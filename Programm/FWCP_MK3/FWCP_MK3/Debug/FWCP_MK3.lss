
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000328  00800100  0000938c  00009420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000938c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a17  00800428  00800428  00009748  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000097a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000580  00000000  00000000  000097e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dc51  00000000  00000000  00009d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002054  00000000  00000000  000179b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ad1  00000000  00000000  00019a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a28  00000000  00000000  0001f4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b51  00000000  00000000  00020f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d3f8  00000000  00000000  00022a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  0002fe4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c3       	rjmp	.+1712   	; 0x6b2 <__dtors_end>
       2:	00 00       	nop
       4:	80 c3       	rjmp	.+1792   	; 0x706 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c3       	rjmp	.+1788   	; 0x706 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c3       	rjmp	.+1784   	; 0x706 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c3       	rjmp	.+1780   	; 0x706 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c3       	rjmp	.+1776   	; 0x706 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c3       	rjmp	.+1772   	; 0x706 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c3       	rjmp	.+1768   	; 0x706 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c3       	rjmp	.+1764   	; 0x706 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c3       	rjmp	.+1760   	; 0x706 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 27 2c 	jmp	0x584e	; 0x584e <__vector_11>
      30:	6a c3       	rjmp	.+1748   	; 0x706 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__vector_13>
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c3       	rjmp	.+1736   	; 0x706 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 ff 2b 	jmp	0x57fe	; 0x57fe <__vector_16>
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c3       	rjmp	.+1720   	; 0x706 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 54 2c 	jmp	0x58a8	; 0x58a8 <__vector_20>
      54:	58 c3       	rjmp	.+1712   	; 0x706 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c3       	rjmp	.+1708   	; 0x706 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c3       	rjmp	.+1704   	; 0x706 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c3       	rjmp	.+1700   	; 0x706 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c3       	rjmp	.+1696   	; 0x706 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c3       	rjmp	.+1692   	; 0x706 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c3       	rjmp	.+1688   	; 0x706 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c3       	rjmp	.+1684   	; 0x706 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c3       	rjmp	.+1680   	; 0x706 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c3       	rjmp	.+1676   	; 0x706 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c3       	rjmp	.+1672   	; 0x706 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c3       	rjmp	.+1668   	; 0x706 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c3       	rjmp	.+1664   	; 0x706 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c3       	rjmp	.+1660   	; 0x706 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b2 09       	sbc	r27, r2
      8e:	b9 09       	sbc	r27, r9
      90:	06 0b       	sbc	r16, r22
      92:	29 0a       	sbc	r2, r25
      94:	06 0b       	sbc	r16, r22
      96:	06 0b       	sbc	r16, r22
      98:	06 0b       	sbc	r16, r22
      9a:	fe 0a       	sbc	r15, r30
      9c:	06 0b       	sbc	r16, r22
      9e:	06 0b       	sbc	r16, r22
      a0:	06 0b       	sbc	r16, r22
      a2:	06 0b       	sbc	r16, r22
      a4:	06 0b       	sbc	r16, r22
      a6:	06 0b       	sbc	r16, r22
      a8:	06 0b       	sbc	r16, r22
      aa:	06 0b       	sbc	r16, r22
      ac:	06 0b       	sbc	r16, r22
      ae:	06 0b       	sbc	r16, r22
      b0:	06 0b       	sbc	r16, r22
      b2:	06 0b       	sbc	r16, r22
      b4:	06 0b       	sbc	r16, r22
      b6:	06 0b       	sbc	r16, r22
      b8:	06 0b       	sbc	r16, r22
      ba:	06 0b       	sbc	r16, r22
      bc:	06 0b       	sbc	r16, r22
      be:	06 0b       	sbc	r16, r22
      c0:	06 0b       	sbc	r16, r22
      c2:	06 0b       	sbc	r16, r22
      c4:	06 0b       	sbc	r16, r22
      c6:	06 0b       	sbc	r16, r22
      c8:	06 0b       	sbc	r16, r22
      ca:	06 0b       	sbc	r16, r22
      cc:	06 0b       	sbc	r16, r22
      ce:	06 0b       	sbc	r16, r22
      d0:	06 0b       	sbc	r16, r22
      d2:	06 0b       	sbc	r16, r22
      d4:	06 0b       	sbc	r16, r22
      d6:	06 0b       	sbc	r16, r22
      d8:	06 0b       	sbc	r16, r22
      da:	06 0b       	sbc	r16, r22
      dc:	06 0b       	sbc	r16, r22
      de:	06 0b       	sbc	r16, r22
      e0:	06 0b       	sbc	r16, r22
      e2:	06 0b       	sbc	r16, r22
      e4:	06 0b       	sbc	r16, r22
      e6:	06 0b       	sbc	r16, r22
      e8:	06 0b       	sbc	r16, r22
      ea:	06 0b       	sbc	r16, r22
      ec:	06 0b       	sbc	r16, r22
      ee:	06 0b       	sbc	r16, r22
      f0:	af 0a       	sbc	r10, r31
      f2:	b5 0a       	sbc	r11, r21
      f4:	c6 0a       	sbc	r12, r22
      f6:	d7 0a       	sbc	r13, r23
      f8:	ec 0a       	sbc	r14, r28
      fa:	2f 23       	and	r18, r31
      fc:	02 22       	and	r0, r18
      fe:	11 22       	and	r1, r17
     100:	0c 22       	and	r0, r28
     102:	0c 22       	and	r0, r28
     104:	0c 22       	and	r0, r28
     106:	0c 22       	and	r0, r28
     108:	0c 22       	and	r0, r28
     10a:	0c 22       	and	r0, r28
     10c:	0c 22       	and	r0, r28
     10e:	0c 22       	and	r0, r28
     110:	0c 22       	and	r0, r28
     112:	0c 22       	and	r0, r28
     114:	3d 23       	and	r19, r29
     116:	0c 22       	and	r0, r28
     118:	0c 22       	and	r0, r28
     11a:	0c 22       	and	r0, r28
     11c:	b8 21       	and	r27, r8
     11e:	0c 22       	and	r0, r28
     120:	11 22       	and	r1, r17
     122:	0c 22       	and	r0, r28
     124:	0c 22       	and	r0, r28
     126:	00 23       	and	r16, r16
     128:	8e 24       	eor	r8, r14
     12a:	90 24       	eor	r9, r0
     12c:	90 24       	eor	r9, r0
     12e:	90 24       	eor	r9, r0
     130:	90 24       	eor	r9, r0
     132:	90 24       	eor	r9, r0
     134:	90 24       	eor	r9, r0
     136:	8c 24       	eor	r8, r12
     138:	90 24       	eor	r9, r0
     13a:	90 24       	eor	r9, r0
     13c:	90 24       	eor	r9, r0
     13e:	90 24       	eor	r9, r0
     140:	90 24       	eor	r9, r0
     142:	93 24       	eor	r9, r3
     144:	92 24       	eor	r9, r2
     146:	7c 24       	eor	r7, r12
     148:	7e 24       	eor	r7, r14
     14a:	80 24       	eor	r8, r0
     14c:	82 24       	eor	r8, r2
     14e:	84 24       	eor	r8, r4
     150:	86 24       	eor	r8, r6
     152:	88 24       	eor	r8, r8
     154:	8a 24       	eor	r8, r10
     156:	a1 2f       	mov	r26, r17
     158:	b1 2f       	mov	r27, r17
     15a:	b1 2f       	mov	r27, r17
     15c:	b1 2f       	mov	r27, r17
     15e:	b1 2f       	mov	r27, r17
     160:	b1 2f       	mov	r27, r17
     162:	b1 2f       	mov	r27, r17
     164:	b1 2f       	mov	r27, r17
     166:	b1 2f       	mov	r27, r17
     168:	b1 2f       	mov	r27, r17
     16a:	b1 2f       	mov	r27, r17
     16c:	b1 2f       	mov	r27, r17
     16e:	b1 2f       	mov	r27, r17
     170:	b1 2f       	mov	r27, r17
     172:	b1 2f       	mov	r27, r17
     174:	b1 2f       	mov	r27, r17
     176:	b1 2f       	mov	r27, r17
     178:	b1 2f       	mov	r27, r17
     17a:	b1 2f       	mov	r27, r17
     17c:	b1 2f       	mov	r27, r17
     17e:	b1 2f       	mov	r27, r17
     180:	b1 2f       	mov	r27, r17
     182:	b1 2f       	mov	r27, r17
     184:	b1 2f       	mov	r27, r17
     186:	b1 2f       	mov	r27, r17
     188:	b1 2f       	mov	r27, r17
     18a:	b1 2f       	mov	r27, r17
     18c:	b1 2f       	mov	r27, r17
     18e:	b1 2f       	mov	r27, r17
     190:	b1 2f       	mov	r27, r17
     192:	b1 2f       	mov	r27, r17
     194:	b1 2f       	mov	r27, r17
     196:	b1 2f       	mov	r27, r17
     198:	b1 2f       	mov	r27, r17
     19a:	b1 2f       	mov	r27, r17
     19c:	b1 2f       	mov	r27, r17
     19e:	b1 2f       	mov	r27, r17
     1a0:	b1 2f       	mov	r27, r17
     1a2:	b1 2f       	mov	r27, r17
     1a4:	b1 2f       	mov	r27, r17
     1a6:	b1 2f       	mov	r27, r17
     1a8:	b1 2f       	mov	r27, r17
     1aa:	b1 2f       	mov	r27, r17
     1ac:	b1 2f       	mov	r27, r17
     1ae:	b1 2f       	mov	r27, r17
     1b0:	b1 2f       	mov	r27, r17
     1b2:	b1 2f       	mov	r27, r17
     1b4:	b1 2f       	mov	r27, r17
     1b6:	b1 2f       	mov	r27, r17
     1b8:	b1 2f       	mov	r27, r17
     1ba:	b1 2f       	mov	r27, r17
     1bc:	b1 2f       	mov	r27, r17
     1be:	7d 2f       	mov	r23, r29
     1c0:	b1 2f       	mov	r27, r17
     1c2:	b1 2f       	mov	r27, r17
     1c4:	b1 2f       	mov	r27, r17
     1c6:	b1 2f       	mov	r27, r17
     1c8:	b1 2f       	mov	r27, r17
     1ca:	b1 2f       	mov	r27, r17
     1cc:	b1 2f       	mov	r27, r17
     1ce:	44 2f       	mov	r20, r20
     1d0:	40 2f       	mov	r20, r16
     1d2:	b1 2f       	mov	r27, r17
     1d4:	67 2f       	mov	r22, r23
     1d6:	b1 2f       	mov	r27, r17
     1d8:	b1 2f       	mov	r27, r17
     1da:	51 2f       	mov	r21, r17
     1dc:	b1 2f       	mov	r27, r17
     1de:	b1 2f       	mov	r27, r17
     1e0:	91 2f       	mov	r25, r17
     1e2:	40 38       	cpi	r20, 0x80	; 128
     1e4:	66 38       	cpi	r22, 0x86	; 134
     1e6:	8d 38       	cpi	r24, 0x8D	; 141
     1e8:	b5 38       	cpi	r27, 0x85	; 133
     1ea:	dc 38       	cpi	r29, 0x8C	; 140
     1ec:	06 39       	cpi	r16, 0x96	; 150
     1ee:	2f 39       	cpi	r18, 0x9F	; 159
     1f0:	59 39       	cpi	r21, 0x99	; 153
     1f2:	d0 39       	cpi	r29, 0x90	; 144
     1f4:	fa 39       	cpi	r31, 0x9A	; 154
     1f6:	05 a8       	ldd	r0, Z+53	; 0x35
     1f8:	4c cd       	rjmp	.-1384   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     1fa:	b2 d4       	rcall	.+2404   	; 0xb60 <_ZN6BMP18018bmp180_getpressureEv+0xe2>
     1fc:	4e b9       	out	0x0e, r20	; 14
     1fe:	38 36       	cpi	r19, 0x68	; 104
     200:	a9 02       	muls	r26, r25
     202:	0c 50       	subi	r16, 0x0C	; 12
     204:	b9 91       	ld	r27, Y+
     206:	86 88       	ldd	r8, Z+22	; 0x16
     208:	08 3c       	cpi	r16, 0xC8	; 200
     20a:	a6 aa       	std	Z+54, r10	; 0x36
     20c:	aa 2a       	or	r10, r26
     20e:	be 00       	.word	0x00be	; ????
     210:	00 00       	nop
     212:	80 3f       	cpi	r24, 0xF0	; 240
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <_ZN6BMP18018bmp180_getpressureEv+0x12>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__trampolines_end>:
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	f8 fc       	.word	0xfcf8	; ????
     29a:	fe 1e       	adc	r15, r30
     29c:	07 07       	cpc	r16, r23
     29e:	07 07       	cpc	r16, r23
     2a0:	1e fe       	.word	0xfe1e	; ????
     2a2:	fc f8       	.word	0xf8fc	; ????
     2a4:	f0 00       	.word	0x00f0	; ????
     2a6:	00 07       	cpc	r16, r16
     2a8:	0f 3f       	cpi	r16, 0xFF	; 255
     2aa:	3f 7c       	andi	r19, 0xCF	; 207
     2ac:	70 70       	andi	r23, 0x00	; 0
     2ae:	70 70       	andi	r23, 0x00	; 0
     2b0:	7c 3f       	cpi	r23, 0xFC	; 252
     2b2:	1f 1f       	adc	r17, r31
     2b4:	07 00       	.word	0x0007	; ????
     2b6:	00 00       	nop
     2b8:	00 06       	cpc	r0, r16
     2ba:	07 07       	cpc	r16, r23
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
	...
     2cc:	7f 7f       	andi	r23, 0xFF	; 255
     2ce:	7f 7f       	andi	r23, 0xFF	; 255
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 38       	cpi	r16, 0x80	; 128
     2d8:	3c 3e       	cpi	r19, 0xEC	; 236
     2da:	3e 0f       	add	r19, r30
     2dc:	07 07       	cpc	r16, r23
     2de:	07 cf       	rjmp	.-498    	; 0xee <__SREG__+0xaf>
     2e0:	ff fe       	.word	0xfeff	; ????
     2e2:	fe 38       	cpi	r31, 0x8E	; 142
     2e4:	00 00       	nop
     2e6:	00 40       	sbci	r16, 0x00	; 0
     2e8:	40 60       	ori	r20, 0x00	; 0
     2ea:	70 78       	andi	r23, 0x80	; 128
     2ec:	7c 7e       	andi	r23, 0xEC	; 236
     2ee:	7f 77       	andi	r23, 0x7F	; 127
     2f0:	73 71       	andi	r23, 0x13	; 19
     2f2:	70 70       	andi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 18       	sub	r0, r0
     2f8:	1c 1e       	adc	r1, r28
     2fa:	1e 0f       	add	r17, r30
     2fc:	c7 c7       	rjmp	.+3982   	; 0x128c <disk_write+0x44>
     2fe:	e7 ff       	sbrs	r30, 7
     300:	fe be       	out	0x3e, r15	; 62
     302:	9c 00       	.word	0x009c	; ????
     304:	00 00       	nop
     306:	00 0c       	add	r0, r0
     308:	1c 3c       	cpi	r17, 0xCC	; 204
     30a:	3c 78       	andi	r19, 0x8C	; 140
     30c:	70 70       	andi	r23, 0x00	; 0
     30e:	70 79       	andi	r23, 0x90	; 144
     310:	7f 3f       	cpi	r23, 0xFF	; 255
     312:	1f 0f       	add	r17, r31
     314:	00 00       	nop
     316:	00 00       	nop
     318:	80 c0       	rjmp	.+256    	; 0x41a <_ZL7font5x8+0x44>
     31a:	e0 70       	andi	r30, 0x00	; 0
     31c:	38 1c       	adc	r3, r8
     31e:	1e ff       	.word	0xff1e	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff 00       	.word	0x00ff	; ????
     324:	00 00       	nop
     326:	06 07       	cpc	r16, r22
     328:	07 07       	cpc	r16, r23
     32a:	06 06       	cpc	r0, r22
     32c:	06 06       	cpc	r0, r22
     32e:	06 7f       	andi	r16, 0xF6	; 246
     330:	7f 7f       	andi	r23, 0xFF	; 255
     332:	7f 06       	cpc	r7, r31
     334:	06 00       	.word	0x0006	; ????
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	f0 ff       	sbrs	r31, 0
     33c:	ff ff       	.word	0xffff	; ????
     33e:	e7 e7       	ldi	r30, 0x77	; 119
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	c7 87       	std	Z+15, r28	; 0x0f
     344:	00 00       	nop
     346:	00 00       	nop
     348:	38 78       	andi	r19, 0x88	; 136
     34a:	71 70       	andi	r23, 0x01	; 1
     34c:	70 70       	andi	r23, 0x00	; 0
     34e:	70 70       	andi	r23, 0x00	; 0
     350:	39 3f       	cpi	r19, 0xF9	; 249
     352:	3f 1f       	adc	r19, r31
     354:	0f 00       	.word	0x000f	; ????
     356:	00 80       	ld	r0, Z
     358:	e0 f0       	brcs	.+56     	; 0x392 <__trampolines_end+0xfc>
     35a:	f8 fc       	.word	0xfcf8	; ????
     35c:	7f 7f       	andi	r23, 0xFF	; 255
     35e:	6f 67       	ori	r22, 0x7F	; 127
     360:	e1 e1       	ldi	r30, 0x11	; 17
     362:	c0 80       	ld	r12, Z
     364:	00 00       	nop
     366:	00 0f       	add	r16, r16
     368:	1f 3f       	cpi	r17, 0xFF	; 255
     36a:	3f 78       	andi	r19, 0x8F	; 143
     36c:	70 70       	andi	r23, 0x00	; 0
     36e:	70 70       	andi	r23, 0x00	; 0
     370:	78 3f       	cpi	r23, 0xF8	; 248
     372:	3f 1f       	adc	r19, r31
     374:	0f 00       	.word	0x000f	; ????
     376:	00 07       	cpc	r16, r16
     378:	07 07       	cpc	r16, r23
     37a:	07 07       	cpc	r16, r23
     37c:	c7 e7       	ldi	r28, 0x77	; 119
     37e:	f7 ff       	sbrs	r31, 7
     380:	7f 3f       	cpi	r23, 0xFF	; 255
     382:	1f 07       	cpc	r17, r31
     384:	03 01       	movw	r0, r6
     386:	00 20       	and	r0, r0
     388:	38 7c       	andi	r19, 0xC8	; 200
     38a:	7e 3f       	cpi	r23, 0xFE	; 254
     38c:	0f 07       	cpc	r16, r31
     38e:	03 00       	.word	0x0003	; ????
	...
     398:	00 1c       	adc	r0, r0
     39a:	be fe       	.word	0xfebe	; ????
     39c:	ff e7       	ldi	r31, 0x7F	; 127
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <_ZN6BMP18018bmp180_getpressureEv+0xa8>
     3a0:	e7 ff       	sbrs	r30, 7
     3a2:	fe be       	out	0x3e, r15	; 62
     3a4:	1c 00       	.word	0x001c	; ????
     3a6:	00 00       	nop
     3a8:	0e 3f       	cpi	r16, 0xFE	; 254
     3aa:	3f 7f       	andi	r19, 0xFF	; 255
     3ac:	71 60       	ori	r23, 0x01	; 1
     3ae:	60 60       	ori	r22, 0x00	; 0
     3b0:	71 7f       	andi	r23, 0xF1	; 241
     3b2:	3f 3f       	cpi	r19, 0xFF	; 255
     3b4:	0f 00       	.word	0x000f	; ????
     3b6:	00 78       	andi	r16, 0x80	; 128
     3b8:	fc fe       	.word	0xfefc	; ????
     3ba:	fe 8f       	std	Y+30, r31	; 0x1e
     3bc:	07 07       	cpc	r16, r23
     3be:	07 07       	cpc	r16, r23
     3c0:	8f fe       	.word	0xfe8f	; ????
     3c2:	fe fc       	.word	0xfcfe	; ????
     3c4:	f8 00       	.word	0x00f8	; ????
     3c6:	00 00       	nop
     3c8:	00 01       	movw	r0, r0
     3ca:	43 43       	sbci	r20, 0x33	; 51
     3cc:	73 7b       	andi	r23, 0xB3	; 179
     3ce:	7f 7f       	andi	r23, 0xFF	; 255
     3d0:	1f 0f       	add	r17, r31
     3d2:	07 03       	mulsu	r16, r23
	...

000003d6 <_ZL7font5x8>:
     3d6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     3e6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     3f6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     406:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     416:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     426:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     436:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     446:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     456:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     466:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     476:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     486:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     496:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     4a6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     4b6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     4c6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     4d6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     4e6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     4f6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     506:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     516:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     526:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     536:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     546:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     556:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     566:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     576:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     586:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     596:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     5a6:	00 10 08 08 10 08                                   ......

000005ac <__c.2179>:
     5ac:	6e 61 6e 00                                         nan.

000005b0 <__c.2177>:
     5b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     600:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     610:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     620:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     630:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     640:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     650:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     660:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     670:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     680:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     690:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000006ae <__ctors_start>:
     6ae:	8e 3c       	cpi	r24, 0xCE	; 206

000006b0 <__ctors_end>:
     6b0:	b1 3c       	cpi	r27, 0xC1	; 193

000006b2 <__dtors_end>:
     6b2:	11 24       	eor	r1, r1
     6b4:	1f be       	out	0x3f, r1	; 63
     6b6:	cf ef       	ldi	r28, 0xFF	; 255
     6b8:	d0 e4       	ldi	r29, 0x40	; 64
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	cd bf       	out	0x3d, r28	; 61

000006be <__do_copy_data>:
     6be:	14 e0       	ldi	r17, 0x04	; 4
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	ec e8       	ldi	r30, 0x8C	; 140
     6c6:	f3 e9       	ldi	r31, 0x93	; 147
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	0b bf       	out	0x3b, r16	; 59
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__do_copy_data+0x14>
     6ce:	07 90       	elpm	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	a8 32       	cpi	r26, 0x28	; 40
     6d4:	b1 07       	cpc	r27, r17
     6d6:	d9 f7       	brne	.-10     	; 0x6ce <__do_copy_data+0x10>

000006d8 <__do_clear_bss>:
     6d8:	2e e0       	ldi	r18, 0x0E	; 14
     6da:	a8 e2       	ldi	r26, 0x28	; 40
     6dc:	b4 e0       	ldi	r27, 0x04	; 4
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <.do_clear_bss_start>

000006e0 <.do_clear_bss_loop>:
     6e0:	1d 92       	st	X+, r1

000006e2 <.do_clear_bss_start>:
     6e2:	af 33       	cpi	r26, 0x3F	; 63
     6e4:	b2 07       	cpc	r27, r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <.do_clear_bss_loop>

000006e8 <__do_global_ctors>:
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d3 e0       	ldi	r29, 0x03	; 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__do_global_ctors+0x10>
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <__tablejump2__>
     6f8:	c7 35       	cpi	r28, 0x57	; 87
     6fa:	d1 07       	cpc	r29, r17
     6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__do_global_ctors+0x8>
     6fe:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <main>
     702:	0c 94 ba 49 	jmp	0x9374	; 0x9374 <__do_global_dtors>

00000706 <__bad_interrupt>:
     706:	7c cc       	rjmp	.-1800   	; 0x0 <__vectors>

00000708 <_ZN6BMP180D1Ev>:
	bmp180_getcalibration();
	
} //BMP180

// default destructor
BMP180::~BMP180()
     708:	8e 96       	adiw	r24, 0x2e	; 46
     70a:	0c 94 5f 23 	jmp	0x46be	; 0x46be <_ZN3I2CD1Ev>
     70e:	08 95       	ret

00000710 <_ZN6BMP18015bmp180_writememEhh>:
{
} //~BMP180bmp180_regac2

void BMP180::bmp180_writemem(uint8_t reg, uint8_t value){
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	06 2f       	mov	r16, r22
     71a:	14 2f       	mov	r17, r20
	i2c.twi_start();
     71c:	ec 01       	movw	r28, r24
     71e:	ae 96       	adiw	r28, 0x2e	; 46
     720:	ce 01       	movw	r24, r28
     722:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
	i2c.twi_write(BMP180_ADDR | I2C_WRITE);
     726:	6e ee       	ldi	r22, 0xEE	; 238
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     72e:	60 2f       	mov	r22, r16
     730:	ce 01       	movw	r24, r28
     732:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(value);
     736:	61 2f       	mov	r22, r17
     738:	ce 01       	movw	r24, r28
     73a:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN3I2C8twi_stopEv>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <_ZN6BMP18021bmp180_getcalibrationEv>:

void BMP180::bmp180_getcalibration() {
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
	i2c.twi_start();
     758:	8c 01       	movw	r16, r24
     75a:	02 5d       	subi	r16, 0xD2	; 210
     75c:	1f 4f       	sbci	r17, 0xFF	; 255
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     764:	6e ee       	ldi	r22, 0xEE	; 238
     766:	c8 01       	movw	r24, r16
     768:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGAC1);
     76c:	6a ea       	ldi	r22, 0xAA	; 170
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     774:	c8 01       	movw	r24, r16
     776:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     77a:	6f ee       	ldi	r22, 0xEF	; 239
     77c:	c8 01       	movw	r24, r16
     77e:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	bmp180_regac1 = (i2c.twi_read(1) << 8);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	c8 01       	movw	r24, r16
     786:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     78a:	18 8a       	std	Y+16, r1	; 0x10
     78c:	89 8b       	std	Y+17, r24	; 0x11
	bmp180_regac1 += (i2c.twi_read(1));
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	c8 01       	movw	r24, r16
     792:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     796:	28 89       	ldd	r18, Y+16	; 0x10
     798:	39 89       	ldd	r19, Y+17	; 0x11
     79a:	28 0f       	add	r18, r24
     79c:	31 1d       	adc	r19, r1
     79e:	39 8b       	std	Y+17, r19	; 0x11
     7a0:	28 8b       	std	Y+16, r18	; 0x10
	
	bmp180_regac2 = (i2c.twi_read(1) << 8);
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     7aa:	1a 8a       	std	Y+18, r1	; 0x12
     7ac:	8b 8b       	std	Y+19, r24	; 0x13
	bmp180_regac2 += (i2c.twi_read(1));
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	c8 01       	movw	r24, r16
     7b2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     7b6:	2a 89       	ldd	r18, Y+18	; 0x12
     7b8:	3b 89       	ldd	r19, Y+19	; 0x13
     7ba:	28 0f       	add	r18, r24
     7bc:	31 1d       	adc	r19, r1
     7be:	3b 8b       	std	Y+19, r19	; 0x13
     7c0:	2a 8b       	std	Y+18, r18	; 0x12
	
	bmp180_regac3 = (i2c.twi_read(1) << 8);
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	c8 01       	movw	r24, r16
     7c6:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     7ca:	1c 8a       	std	Y+20, r1	; 0x14
     7cc:	8d 8b       	std	Y+21, r24	; 0x15
	bmp180_regac3 += (i2c.twi_read(1));
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     7d6:	2c 89       	ldd	r18, Y+20	; 0x14
     7d8:	3d 89       	ldd	r19, Y+21	; 0x15
     7da:	28 0f       	add	r18, r24
     7dc:	31 1d       	adc	r19, r1
     7de:	3d 8b       	std	Y+21, r19	; 0x15
     7e0:	2c 8b       	std	Y+20, r18	; 0x14
	
	bmp180_regac4 = (i2c.twi_read(1) << 8);
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     7ea:	18 a2       	std	Y+32, r1	; 0x20
     7ec:	89 a3       	std	Y+33, r24	; 0x21
	bmp180_regac4 += (i2c.twi_read(1));
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     7f6:	28 a1       	ldd	r18, Y+32	; 0x20
     7f8:	39 a1       	ldd	r19, Y+33	; 0x21
     7fa:	28 0f       	add	r18, r24
     7fc:	31 1d       	adc	r19, r1
     7fe:	39 a3       	std	Y+33, r19	; 0x21
     800:	28 a3       	std	Y+32, r18	; 0x20
	
	bmp180_regac5 = (i2c.twi_read(1) << 8);
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	c8 01       	movw	r24, r16
     806:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     80a:	1a a2       	std	Y+34, r1	; 0x22
     80c:	8b a3       	std	Y+35, r24	; 0x23
	bmp180_regac5 += (i2c.twi_read(1));
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	c8 01       	movw	r24, r16
     812:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     816:	2a a1       	ldd	r18, Y+34	; 0x22
     818:	3b a1       	ldd	r19, Y+35	; 0x23
     81a:	28 0f       	add	r18, r24
     81c:	31 1d       	adc	r19, r1
     81e:	3b a3       	std	Y+35, r19	; 0x23
     820:	2a a3       	std	Y+34, r18	; 0x22
	
	bmp180_regac6 = (i2c.twi_read(1) << 8);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	c8 01       	movw	r24, r16
     826:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     82a:	1c a2       	std	Y+36, r1	; 0x24
     82c:	8d a3       	std	Y+37, r24	; 0x25
	bmp180_regac6 += (i2c.twi_read(1));
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	c8 01       	movw	r24, r16
     832:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     836:	2c a1       	ldd	r18, Y+36	; 0x24
     838:	3d a1       	ldd	r19, Y+37	; 0x25
     83a:	28 0f       	add	r18, r24
     83c:	31 1d       	adc	r19, r1
     83e:	3d a3       	std	Y+37, r19	; 0x25
     840:	2c a3       	std	Y+36, r18	; 0x24
	
	bmp180_regb1 = (i2c.twi_read(1) << 8);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	c8 01       	movw	r24, r16
     846:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     84a:	1e 8a       	std	Y+22, r1	; 0x16
     84c:	8f 8b       	std	Y+23, r24	; 0x17
	bmp180_regb1 += (i2c.twi_read(1));
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	c8 01       	movw	r24, r16
     852:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     856:	2e 89       	ldd	r18, Y+22	; 0x16
     858:	3f 89       	ldd	r19, Y+23	; 0x17
     85a:	28 0f       	add	r18, r24
     85c:	31 1d       	adc	r19, r1
     85e:	3f 8b       	std	Y+23, r19	; 0x17
     860:	2e 8b       	std	Y+22, r18	; 0x16
	
	bmp180_regb2 = (i2c.twi_read(1) << 8);
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	c8 01       	movw	r24, r16
     866:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     86a:	18 8e       	std	Y+24, r1	; 0x18
     86c:	89 8f       	std	Y+25, r24	; 0x19
	bmp180_regb2 += (i2c.twi_read(1));
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	c8 01       	movw	r24, r16
     872:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     876:	28 8d       	ldd	r18, Y+24	; 0x18
     878:	39 8d       	ldd	r19, Y+25	; 0x19
     87a:	28 0f       	add	r18, r24
     87c:	31 1d       	adc	r19, r1
     87e:	39 8f       	std	Y+25, r19	; 0x19
     880:	28 8f       	std	Y+24, r18	; 0x18
	
	bmp180_regmb = (i2c.twi_read(1) << 8);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	c8 01       	movw	r24, r16
     886:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     88a:	1a 8e       	std	Y+26, r1	; 0x1a
     88c:	8b 8f       	std	Y+27, r24	; 0x1b
	bmp180_regmb += (i2c.twi_read(1));
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	c8 01       	movw	r24, r16
     892:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     896:	2a 8d       	ldd	r18, Y+26	; 0x1a
     898:	3b 8d       	ldd	r19, Y+27	; 0x1b
     89a:	28 0f       	add	r18, r24
     89c:	31 1d       	adc	r19, r1
     89e:	3b 8f       	std	Y+27, r19	; 0x1b
     8a0:	2a 8f       	std	Y+26, r18	; 0x1a
	
	bmp180_regmc = (i2c.twi_read(1) << 8);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	c8 01       	movw	r24, r16
     8a6:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     8aa:	1c 8e       	std	Y+28, r1	; 0x1c
     8ac:	8d 8f       	std	Y+29, r24	; 0x1d
	bmp180_regmc += (i2c.twi_read(1));
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     8b6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8b8:	3d 8d       	ldd	r19, Y+29	; 0x1d
     8ba:	28 0f       	add	r18, r24
     8bc:	31 1d       	adc	r19, r1
     8be:	3d 8f       	std	Y+29, r19	; 0x1d
     8c0:	2c 8f       	std	Y+28, r18	; 0x1c
	
	bmp180_regmd = (i2c.twi_read(1) << 8);
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	c8 01       	movw	r24, r16
     8c6:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     8ca:	1e 8e       	std	Y+30, r1	; 0x1e
     8cc:	8f 8f       	std	Y+31, r24	; 0x1f
	bmp180_regmd += (i2c.twi_read(0));
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     8d6:	2e 8d       	ldd	r18, Y+30	; 0x1e
     8d8:	3f 8d       	ldd	r19, Y+31	; 0x1f
     8da:	28 0f       	add	r18, r24
     8dc:	31 1d       	adc	r19, r1
     8de:	3f 8f       	std	Y+31, r19	; 0x1f
     8e0:	2e 8f       	std	Y+30, r18	; 0x1e
	
	i2c.twi_stop();
     8e2:	c8 01       	movw	r24, r16
     8e4:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN3I2C8twi_stopEv>
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <_ZN6BMP180C1Ev>:


#include "BMP180.h"

// default constructor
BMP180::BMP180()
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
     8f8:	8e 96       	adiw	r24, 0x2e	; 46
     8fa:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <_ZN3I2CC1Ev>
{
	bmp180_rawtemperature = 0;
     8fe:	1e a2       	std	Y+38, r1	; 0x26
     900:	1f a2       	std	Y+39, r1	; 0x27
     902:	18 a6       	std	Y+40, r1	; 0x28
     904:	19 a6       	std	Y+41, r1	; 0x29
	bmp180_rawpressure = 0;
     906:	1a a6       	std	Y+42, r1	; 0x2a
     908:	1b a6       	std	Y+43, r1	; 0x2b
     90a:	1c a6       	std	Y+44, r1	; 0x2c
     90c:	1d a6       	std	Y+45, r1	; 0x2d
	pressure0 = PRESSURE00;
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e5       	ldi	r25, 0x50	; 80
     912:	ad e7       	ldi	r26, 0x7D	; 125
     914:	b4 e4       	ldi	r27, 0x44	; 68
     916:	8c 83       	std	Y+4, r24	; 0x04
     918:	9d 83       	std	Y+5, r25	; 0x05
     91a:	ae 83       	std	Y+6, r26	; 0x06
     91c:	bf 83       	std	Y+7, r27	; 0x07
	
	bmp180_getcalibration();
     91e:	ce 01       	movw	r24, r28
     920:	16 df       	rcall	.-468    	; 0x74e <_ZN6BMP18021bmp180_getcalibrationEv>
	
} //BMP180
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <_ZN6BMP18021bmp180_gettemperatureEv>:
	altitude  = pow(altitude,1/5.255);
	altitude  = 1-altitude;
	altitude *= 44330;
}

void BMP180::bmp180_gettemperature(){
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	8c 01       	movw	r16, r24
	//uint8_t buff[2] = {0,0};
	int32_t ut,x1,x2;

	//read raw temperature
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADTEMPERATURE);
     942:	4e e2       	ldi	r20, 0x2E	; 46
     944:	64 ef       	ldi	r22, 0xF4	; 244
     946:	e4 de       	rcall	.-568    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     948:	8f e0       	ldi	r24, 0x0F	; 15
     94a:	97 e2       	ldi	r25, 0x27	; 39
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <_ZN6BMP18021bmp180_gettemperatureEv+0x24>
     950:	00 c0       	rjmp	.+0      	; 0x952 <_ZN6BMP18021bmp180_gettemperatureEv+0x2a>
     952:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 2);
	i2c.twi_start();
     954:	e8 01       	movw	r28, r16
     956:	ae 96       	adiw	r28, 0x2e	; 46
     958:	ce 01       	movw	r24, r28
     95a:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     95e:	6e ee       	ldi	r22, 0xEE	; 238
     960:	ce 01       	movw	r24, r28
     962:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
     966:	66 ef       	ldi	r22, 0xF6	; 246
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     974:	6f ee       	ldi	r22, 0xEF	; 239
     976:	ce 01       	movw	r24, r28
     978:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	ut  = (i2c.twi_read(1)<<8);
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	ce 01       	movw	r24, r28
     980:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     984:	c8 2e       	mov	r12, r24
     986:	d1 2c       	mov	r13, r1
     988:	dc 2c       	mov	r13, r12
     98a:	cc 24       	eor	r12, r12
     98c:	0d 2c       	mov	r0, r13
     98e:	00 0c       	add	r0, r0
     990:	ee 08       	sbc	r14, r14
     992:	ff 08       	sbc	r15, r15
	ut += i2c.twi_read(0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	ce 01       	movw	r24, r28
     998:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     99c:	c8 0e       	add	r12, r24
     99e:	d1 1c       	adc	r13, r1
     9a0:	e1 1c       	adc	r14, r1
     9a2:	f1 1c       	adc	r15, r1
	i2c.twi_stop();
     9a4:	ce 01       	movw	r24, r28
     9a6:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN3I2C8twi_stopEv>

	//calculate raw temperature
	x1	  = (ut - bmp180_regac6);
     9aa:	f8 01       	movw	r30, r16
     9ac:	84 a1       	ldd	r24, Z+36	; 0x24
     9ae:	95 a1       	ldd	r25, Z+37	; 0x25
     9b0:	a7 01       	movw	r20, r14
     9b2:	96 01       	movw	r18, r12
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	41 09       	sbc	r20, r1
     9ba:	51 09       	sbc	r21, r1
	x1	 *= bmp180_regac5;
     9bc:	a2 a1       	ldd	r26, Z+34	; 0x22
     9be:	b3 a1       	ldd	r27, Z+35	; 0x23
     9c0:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__muluhisi3>
	x1	>>= 15;
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
     9c8:	0b 2e       	mov	r0, r27
     9ca:	bf e0       	ldi	r27, 0x0F	; 15
     9cc:	f5 94       	asr	r15
     9ce:	e7 94       	ror	r14
     9d0:	d7 94       	ror	r13
     9d2:	c7 94       	ror	r12
     9d4:	ba 95       	dec	r27
     9d6:	d1 f7       	brne	.-12     	; 0x9cc <_ZN6BMP18021bmp180_gettemperatureEv+0xa4>
     9d8:	b0 2d       	mov	r27, r0
	x2	  = (bmp180_regmc << 11);
     9da:	84 8d       	ldd	r24, Z+28	; 0x1c
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	78 2f       	mov	r23, r24
     9e2:	77 0f       	add	r23, r23
     9e4:	77 0f       	add	r23, r23
     9e6:	77 0f       	add	r23, r23
     9e8:	07 2e       	mov	r0, r23
     9ea:	00 0c       	add	r0, r0
     9ec:	88 0b       	sbc	r24, r24
     9ee:	99 0b       	sbc	r25, r25
	x2	 /= (x1 + bmp180_regmd);
     9f0:	26 8d       	ldd	r18, Z+30	; 0x1e
     9f2:	37 8d       	ldd	r19, Z+31	; 0x1f
     9f4:	49 01       	movw	r8, r18
     9f6:	33 0f       	add	r19, r19
     9f8:	aa 08       	sbc	r10, r10
     9fa:	bb 08       	sbc	r11, r11
     9fc:	a5 01       	movw	r20, r10
     9fe:	94 01       	movw	r18, r8
     a00:	2c 0d       	add	r18, r12
     a02:	3d 1d       	adc	r19, r13
     a04:	4e 1d       	adc	r20, r14
     a06:	5f 1d       	adc	r21, r15
     a08:	0e 94 96 46 	call	0x8d2c	; 0x8d2c <__divmodsi4>
	bmp180_rawtemperature = x1 + x2;
     a0c:	d7 01       	movw	r26, r14
     a0e:	c6 01       	movw	r24, r12
     a10:	82 0f       	add	r24, r18
     a12:	93 1f       	adc	r25, r19
     a14:	a4 1f       	adc	r26, r20
     a16:	b5 1f       	adc	r27, r21
	//Korrektur heuristisch 
	bmp180_rawtemperature -= 3077;
     a18:	6c 01       	movw	r12, r24
     a1a:	7d 01       	movw	r14, r26
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	cf 1a       	sub	r12, r31
     a20:	fc e0       	ldi	r31, 0x0C	; 12
     a22:	df 0a       	sbc	r13, r31
     a24:	e1 08       	sbc	r14, r1
     a26:	f1 08       	sbc	r15, r1
     a28:	f8 01       	movw	r30, r16
     a2a:	c6 a2       	std	Z+38, r12	; 0x26
     a2c:	d7 a2       	std	Z+39, r13	; 0x27
     a2e:	e0 a6       	std	Z+40, r14	; 0x28
     a30:	f1 a6       	std	Z+41, r15	; 0x29
	
	temperature	  = (bmp180_rawtemperature+8);
     a32:	bc 01       	movw	r22, r24
     a34:	cd 01       	movw	r24, r26
     a36:	6d 5f       	subi	r22, 0xFD	; 253
     a38:	7b 40       	sbci	r23, 0x0B	; 11
     a3a:	81 09       	sbc	r24, r1
     a3c:	91 09       	sbc	r25, r1
     a3e:	0e 94 0f 40 	call	0x801e	; 0x801e <__floatunsisf>
	temperature	/= 16.0;
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e8       	ldi	r20, 0x80	; 128
     a48:	5d e3       	ldi	r21, 0x3D	; 61
     a4a:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
	temperature	 /= 10.0;
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e2       	ldi	r20, 0x20	; 32
     a54:	51 e4       	ldi	r21, 0x41	; 65
     a56:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
     a5a:	f8 01       	movw	r30, r16
     a5c:	60 87       	std	Z+8, r22	; 0x08
     a5e:	71 87       	std	Z+9, r23	; 0x09
     a60:	82 87       	std	Z+10, r24	; 0x0a
     a62:	93 87       	std	Z+11, r25	; 0x0b
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	08 95       	ret

00000a7e <_ZN6BMP18018bmp180_getpressureEv>:
	bmp180_regmd += (i2c.twi_read(0));
	
	i2c.twi_stop();
}

void BMP180::bmp180_getpressure(){
     a7e:	2f 92       	push	r2
     a80:	3f 92       	push	r3
     a82:	4f 92       	push	r4
     a84:	5f 92       	push	r5
     a86:	6f 92       	push	r6
     a88:	7f 92       	push	r7
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <_ZN6BMP18018bmp180_getpressureEv+0x26>
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <_ZN6BMP18018bmp180_getpressureEv+0x28>
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	1c 01       	movw	r2, r24
	long up;
	int32_t x1,x2,x3,b3,b6,p;
	uint32_t b4,b7;

	bmp180_gettemperature();
     aac:	3d df       	rcall	.-390    	; 0x928 <_ZN6BMP18021bmp180_gettemperatureEv>

	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
     aae:	44 ef       	ldi	r20, 0xF4	; 244
     ab0:	64 ef       	ldi	r22, 0xF4	; 244
     ab2:	c1 01       	movw	r24, r2
     ab4:	2d de       	rcall	.-934    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
     ab6:	8f e1       	ldi	r24, 0x1F	; 31
     ab8:	9b ec       	ldi	r25, 0xCB	; 203
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <_ZN6BMP18018bmp180_getpressureEv+0x3c>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <_ZN6BMP18018bmp180_getpressureEv+0x42>
     ac0:	00 00       	nop
	_delay_ms(2 + (3<<BMP180_MODE));
	
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 3);
	//up = ((((int32_t)buff[0] <<16) | ((int32_t)buff[1] <<8) | ((int32_t)buff[2])) >> (8-BMP180_MODE)); // uncompensated pressure value
	i2c.twi_start();
     ac2:	71 01       	movw	r14, r2
     ac4:	9e e2       	ldi	r25, 0x2E	; 46
     ac6:	e9 0e       	add	r14, r25
     ac8:	f1 1c       	adc	r15, r1
     aca:	c7 01       	movw	r24, r14
     acc:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     ad0:	6e ee       	ldi	r22, 0xEE	; 238
     ad2:	c7 01       	movw	r24, r14
     ad4:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
     ad8:	66 ef       	ldi	r22, 0xF6	; 246
     ada:	c7 01       	movw	r24, r14
     adc:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     ae0:	c7 01       	movw	r24, r14
     ae2:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     ae6:	6f ee       	ldi	r22, 0xEF	; 239
     ae8:	c7 01       	movw	r24, r14
     aea:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
	up   = i2c.twi_read(1) * 65536;
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	c7 01       	movw	r24, r14
     af2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     af6:	48 2e       	mov	r4, r24
     af8:	51 2c       	mov	r5, r1
     afa:	61 2c       	mov	r6, r1
     afc:	71 2c       	mov	r7, r1
     afe:	32 01       	movw	r6, r4
     b00:	55 24       	eor	r5, r5
     b02:	44 24       	eor	r4, r4
	up  += i2c.twi_read(1) << 8;
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	c7 01       	movw	r24, r14
     b08:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     b0c:	88 2e       	mov	r8, r24
     b0e:	91 2c       	mov	r9, r1
     b10:	98 2c       	mov	r9, r8
     b12:	88 24       	eor	r8, r8
     b14:	09 2c       	mov	r0, r9
     b16:	00 0c       	add	r0, r0
     b18:	aa 08       	sbc	r10, r10
     b1a:	bb 08       	sbc	r11, r11
     b1c:	84 0c       	add	r8, r4
     b1e:	95 1c       	adc	r9, r5
     b20:	a6 1c       	adc	r10, r6
     b22:	b7 1c       	adc	r11, r7
	up  += i2c.twi_read(0);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	c7 01       	movw	r24, r14
     b28:	0e 94 78 23 	call	0x46f0	; 0x46f0 <_ZN3I2C8twi_readEh>
     b2c:	88 0e       	add	r8, r24
     b2e:	91 1c       	adc	r9, r1
     b30:	a1 1c       	adc	r10, r1
     b32:	b1 1c       	adc	r11, r1
	up >>= (8-BMP180_MODE);
	i2c.twi_stop();
     b34:	c7 01       	movw	r24, r14
     b36:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN3I2C8twi_stopEv>

	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
     b3a:	f1 01       	movw	r30, r2
     b3c:	46 a0       	ldd	r4, Z+38	; 0x26
     b3e:	57 a0       	ldd	r5, Z+39	; 0x27
     b40:	60 a4       	ldd	r6, Z+40	; 0x28
     b42:	71 a4       	ldd	r7, Z+41	; 0x29
     b44:	f0 ea       	ldi	r31, 0xA0	; 160
     b46:	4f 1a       	sub	r4, r31
     b48:	ff e0       	ldi	r31, 0x0F	; 15
     b4a:	5f 0a       	sbc	r5, r31
     b4c:	61 08       	sbc	r6, r1
     b4e:	71 08       	sbc	r7, r1
	x1   = b6*b6;
     b50:	a3 01       	movw	r20, r6
     b52:	92 01       	movw	r18, r4
     b54:	c3 01       	movw	r24, r6
     b56:	b2 01       	movw	r22, r4
     b58:	0e 94 65 46 	call	0x8cca	; 0x8cca <__mulsi3>
	x1 >>= 12;
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	01 2e       	mov	r0, r17
     b62:	1c e0       	ldi	r17, 0x0C	; 12
     b64:	55 95       	asr	r21
     b66:	47 95       	ror	r20
     b68:	37 95       	ror	r19
     b6a:	27 95       	ror	r18
     b6c:	1a 95       	dec	r17
     b6e:	d1 f7       	brne	.-12     	; 0xb64 <_ZN6BMP18018bmp180_getpressureEv+0xe6>
     b70:	10 2d       	mov	r17, r0
     b72:	29 83       	std	Y+1, r18	; 0x01
     b74:	3a 83       	std	Y+2, r19	; 0x02
     b76:	4b 83       	std	Y+3, r20	; 0x03
     b78:	5c 83       	std	Y+4, r21	; 0x04
	x1  *= bmp180_regb2;
     b7a:	f1 01       	movw	r30, r2
     b7c:	a0 8d       	ldd	r26, Z+24	; 0x18
     b7e:	b1 8d       	ldd	r27, Z+25	; 0x19
     b80:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <__mulshisi3>
     b84:	6b 01       	movw	r12, r22
     b86:	7c 01       	movw	r14, r24
	x1 >>= 11;
	x2   = bmp180_regac2 * b6;
     b88:	a2 89       	ldd	r26, Z+18	; 0x12
     b8a:	b3 89       	ldd	r27, Z+19	; 0x13
     b8c:	a3 01       	movw	r20, r6
     b8e:	92 01       	movw	r18, r4
     b90:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <__mulshisi3>
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
     b94:	20 89       	ldd	r18, Z+16	; 0x10
     b96:	31 89       	ldd	r19, Z+17	; 0x11
     b98:	22 0f       	add	r18, r18
     b9a:	33 1f       	adc	r19, r19
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	89 01       	movw	r16, r18
     ba2:	33 0f       	add	r19, r19
     ba4:	22 0b       	sbc	r18, r18
     ba6:	33 0b       	sbc	r19, r19
	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
	x1   = b6*b6;
	x1 >>= 12;
	x1  *= bmp180_regb2;
	x1 >>= 11;
     ba8:	0b 2e       	mov	r0, r27
     baa:	bb e0       	ldi	r27, 0x0B	; 11
     bac:	f5 94       	asr	r15
     bae:	e7 94       	ror	r14
     bb0:	d7 94       	ror	r13
     bb2:	c7 94       	ror	r12
     bb4:	ba 95       	dec	r27
     bb6:	d1 f7       	brne	.-12     	; 0xbac <_ZN6BMP18018bmp180_getpressureEv+0x12e>
     bb8:	b0 2d       	mov	r27, r0
	x2   = bmp180_regac2 * b6;
	x2 >>= 11;
     bba:	ab 01       	movw	r20, r22
     bbc:	bc 01       	movw	r22, r24
     bbe:	03 2e       	mov	r0, r19
     bc0:	3b e0       	ldi	r19, 0x0B	; 11
     bc2:	75 95       	asr	r23
     bc4:	67 95       	ror	r22
     bc6:	57 95       	ror	r21
     bc8:	47 95       	ror	r20
     bca:	3a 95       	dec	r19
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <_ZN6BMP18018bmp180_getpressureEv+0x144>
     bce:	30 2d       	mov	r19, r0
	x3   = x1 + x2;
     bd0:	c4 0e       	add	r12, r20
     bd2:	d5 1e       	adc	r13, r21
     bd4:	e6 1e       	adc	r14, r22
     bd6:	f7 1e       	adc	r15, r23
	b3   = bmp180_regac1 * 4 +x3;
     bd8:	c0 0e       	add	r12, r16
     bda:	d1 1e       	adc	r13, r17
     bdc:	e2 1e       	adc	r14, r18
     bde:	f3 1e       	adc	r15, r19
	b3 <<= BMP180_MODE;
     be0:	cc 0c       	add	r12, r12
     be2:	dd 1c       	adc	r13, r13
     be4:	ee 1c       	adc	r14, r14
     be6:	ff 1c       	adc	r15, r15
     be8:	cc 0c       	add	r12, r12
     bea:	dd 1c       	adc	r13, r13
     bec:	ee 1c       	adc	r14, r14
     bee:	ff 1c       	adc	r15, r15
     bf0:	cc 0c       	add	r12, r12
     bf2:	dd 1c       	adc	r13, r13
     bf4:	ee 1c       	adc	r14, r14
     bf6:	ff 1c       	adc	r15, r15
	b3  += 2;
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	cf 0e       	add	r12, r31
     bfc:	d1 1c       	adc	r13, r1
     bfe:	e1 1c       	adc	r14, r1
     c00:	f1 1c       	adc	r15, r1
	b3  /= 4;
	x1   = bmp180_regac3 * b6;
     c02:	f1 01       	movw	r30, r2
     c04:	a4 89       	ldd	r26, Z+20	; 0x14
     c06:	b5 89       	ldd	r27, Z+21	; 0x15
     c08:	a3 01       	movw	r20, r6
     c0a:	92 01       	movw	r18, r4
     c0c:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <__mulshisi3>
     c10:	2b 01       	movw	r4, r22
     c12:	3c 01       	movw	r6, r24
	x1 >>= 13;
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
     c14:	a6 89       	ldd	r26, Z+22	; 0x16
     c16:	b7 89       	ldd	r27, Z+23	; 0x17
     c18:	29 81       	ldd	r18, Y+1	; 0x01
     c1a:	3a 81       	ldd	r19, Y+2	; 0x02
     c1c:	4b 81       	ldd	r20, Y+3	; 0x03
     c1e:	5c 81       	ldd	r21, Y+4	; 0x04
     c20:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <__mulshisi3>
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  /= 4;
	x1   = bmp180_regac3 * b6;
	x1 >>= 13;
     c24:	93 01       	movw	r18, r6
     c26:	82 01       	movw	r16, r4
     c28:	0f 2e       	mov	r0, r31
     c2a:	fd e0       	ldi	r31, 0x0D	; 13
     c2c:	35 95       	asr	r19
     c2e:	27 95       	ror	r18
     c30:	17 95       	ror	r17
     c32:	07 95       	ror	r16
     c34:	fa 95       	dec	r31
     c36:	d1 f7       	brne	.-12     	; 0xc2c <_ZN6BMP18018bmp180_getpressureEv+0x1ae>
     c38:	f0 2d       	mov	r31, r0
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
	x2 >>= 10;
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	07 2e       	mov	r0, r23
     c40:	7a e0       	ldi	r23, 0x0A	; 10
     c42:	b5 95       	asr	r27
     c44:	a7 95       	ror	r26
     c46:	97 95       	ror	r25
     c48:	87 95       	ror	r24
     c4a:	7a 95       	dec	r23
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <_ZN6BMP18018bmp180_getpressureEv+0x1c4>
     c4e:	70 2d       	mov	r23, r0
	x3   = x1 + x2;
     c50:	80 0f       	add	r24, r16
     c52:	91 1f       	adc	r25, r17
     c54:	a2 1f       	adc	r26, r18
     c56:	b3 1f       	adc	r27, r19
	x3  += 2;
     c58:	02 96       	adiw	r24, 0x02	; 2
     c5a:	a1 1d       	adc	r26, r1
     c5c:	b1 1d       	adc	r27, r1
	x3 >>= 2;
     c5e:	b5 95       	asr	r27
     c60:	a7 95       	ror	r26
     c62:	97 95       	ror	r25
     c64:	87 95       	ror	r24
     c66:	b5 95       	asr	r27
     c68:	a7 95       	ror	r26
     c6a:	97 95       	ror	r25
     c6c:	87 95       	ror	r24
	b4   = (uint32_t)(x3+32768);
     c6e:	9c 01       	movw	r18, r24
     c70:	ad 01       	movw	r20, r26
     c72:	30 58       	subi	r19, 0x80	; 128
     c74:	4f 4f       	sbci	r20, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
	b4  *= bmp180_regac4;
     c78:	a0 a1       	ldd	r26, Z+32	; 0x20
     c7a:	b1 a1       	ldd	r27, Z+33	; 0x21
     c7c:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__muluhisi3>
	b4 >>= 15;
     c80:	2b 01       	movw	r4, r22
     c82:	3c 01       	movw	r6, r24
     c84:	03 2e       	mov	r0, r19
     c86:	3f e0       	ldi	r19, 0x0F	; 15
     c88:	76 94       	lsr	r7
     c8a:	67 94       	ror	r6
     c8c:	57 94       	ror	r5
     c8e:	47 94       	ror	r4
     c90:	3a 95       	dec	r19
     c92:	d1 f7       	brne	.-12     	; 0xc88 <_ZN6BMP18018bmp180_getpressureEv+0x20a>
     c94:	30 2d       	mov	r19, r0
	i2c.twi_start();
	i2c.twi_write((BMP180_ADDR | I2C_READ));
	up   = i2c.twi_read(1) * 65536;
	up  += i2c.twi_read(1) << 8;
	up  += i2c.twi_read(0);
	up >>= (8-BMP180_MODE);
     c96:	b5 01       	movw	r22, r10
     c98:	a4 01       	movw	r20, r8
     c9a:	68 94       	set
     c9c:	14 f8       	bld	r1, 4
     c9e:	75 95       	asr	r23
     ca0:	67 95       	ror	r22
     ca2:	57 95       	ror	r21
     ca4:	47 95       	ror	r20
     ca6:	16 94       	lsr	r1
     ca8:	d1 f7       	brne	.-12     	; 0xc9e <_ZN6BMP18018bmp180_getpressureEv+0x220>
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  /= 4;
     caa:	d7 01       	movw	r26, r14
     cac:	c6 01       	movw	r24, r12
     cae:	ff 20       	and	r15, r15
     cb0:	1c f4       	brge	.+6      	; 0xcb8 <_ZN6BMP18018bmp180_getpressureEv+0x23a>
     cb2:	03 96       	adiw	r24, 0x03	; 3
     cb4:	a1 1d       	adc	r26, r1
     cb6:	b1 1d       	adc	r27, r1
     cb8:	b5 95       	asr	r27
     cba:	a7 95       	ror	r26
     cbc:	97 95       	ror	r25
     cbe:	87 95       	ror	r24
     cc0:	b5 95       	asr	r27
     cc2:	a7 95       	ror	r26
     cc4:	97 95       	ror	r25
     cc6:	87 95       	ror	r24
	x3  += 2;
	x3 >>= 2;
	b4   = (uint32_t)(x3+32768);
	b4  *= bmp180_regac4;
	b4 >>= 15;
	b7   = ((uint32_t)up - b3);
     cc8:	9a 01       	movw	r18, r20
     cca:	ab 01       	movw	r20, r22
     ccc:	28 1b       	sub	r18, r24
     cce:	39 0b       	sbc	r19, r25
     cd0:	4a 0b       	sbc	r20, r26
     cd2:	5b 0b       	sbc	r21, r27
	b7  *= (50000 >> BMP180_MODE);
     cd4:	aa e6       	ldi	r26, 0x6A	; 106
     cd6:	b8 e1       	ldi	r27, 0x18	; 24
     cd8:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__muluhisi3>
	if (b7 < 0x80000000){
     cdc:	99 23       	and	r25, r25
     cde:	5c f0       	brlt	.+22     	; 0xcf6 <_ZN6BMP18018bmp180_getpressureEv+0x278>
		p  = b7*2;
     ce0:	66 0f       	add	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	99 1f       	adc	r25, r25
		p /= b4;
     ce8:	a3 01       	movw	r20, r6
     cea:	92 01       	movw	r18, r4
     cec:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <__udivmodsi4>
     cf0:	69 01       	movw	r12, r18
     cf2:	7a 01       	movw	r14, r20
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <_ZN6BMP18018bmp180_getpressureEv+0x28c>
	}
	else {
		p  = b7/b4;
     cf6:	a3 01       	movw	r20, r6
     cf8:	92 01       	movw	r18, r4
     cfa:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <__udivmodsi4>
		p *= 2;
     cfe:	69 01       	movw	r12, r18
     d00:	7a 01       	movw	r14, r20
     d02:	cc 0c       	add	r12, r12
     d04:	dd 1c       	adc	r13, r13
     d06:	ee 1c       	adc	r14, r14
     d08:	ff 1c       	adc	r15, r15
	}
	x1   = (p >> 8);
     d0a:	99 27       	eor	r25, r25
     d0c:	f7 fc       	sbrc	r15, 7
     d0e:	9a 95       	dec	r25
     d10:	8f 2d       	mov	r24, r15
     d12:	7e 2d       	mov	r23, r14
     d14:	6d 2d       	mov	r22, r13
	x1  *= (p >> 8);
     d16:	9b 01       	movw	r18, r22
     d18:	ac 01       	movw	r20, r24
     d1a:	0e 94 65 46 	call	0x8cca	; 0x8cca <__mulsi3>
     d1e:	9b 01       	movw	r18, r22
     d20:	ac 01       	movw	r20, r24
	x1   = (x1 * 3038);
     d22:	ae ed       	ldi	r26, 0xDE	; 222
     d24:	bb e0       	ldi	r27, 0x0B	; 11
     d26:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__muluhisi3>
     d2a:	4b 01       	movw	r8, r22
     d2c:	5c 01       	movw	r10, r24
	x1 >>= 10;
	x2   = (-7357 * p);
     d2e:	a3 e4       	ldi	r26, 0x43	; 67
     d30:	b3 ee       	ldi	r27, 0xE3	; 227
     d32:	a7 01       	movw	r20, r14
     d34:	96 01       	movw	r18, r12
     d36:	0e 94 d6 46 	call	0x8dac	; 0x8dac <__mulohisi3>
     d3a:	f4 e9       	ldi	r31, 0x94	; 148
     d3c:	cf 1a       	sub	r12, r31
     d3e:	fc e5       	ldi	r31, 0x5C	; 92
     d40:	df 0a       	sbc	r13, r31
     d42:	e1 08       	sbc	r14, r1
     d44:	f1 08       	sbc	r15, r1
		p *= 2;
	}
	x1   = (p >> 8);
	x1  *= (p >> 8);
	x1   = (x1 * 3038);
	x1 >>= 10;
     d46:	07 2e       	mov	r0, r23
     d48:	7a e0       	ldi	r23, 0x0A	; 10
     d4a:	b5 94       	asr	r11
     d4c:	a7 94       	ror	r10
     d4e:	97 94       	ror	r9
     d50:	87 94       	ror	r8
     d52:	7a 95       	dec	r23
     d54:	d1 f7       	brne	.-12     	; 0xd4a <_ZN6BMP18018bmp180_getpressureEv+0x2cc>
     d56:	70 2d       	mov	r23, r0
	x2   = (-7357 * p);
	x2 >>= 16;
     d58:	bb 27       	eor	r27, r27
     d5a:	97 fd       	sbrc	r25, 7
     d5c:	b0 95       	com	r27
     d5e:	ab 2f       	mov	r26, r27
	bmp180_rawpressure   = (x1 + x2 + 3791);
     d60:	88 0d       	add	r24, r8
     d62:	99 1d       	adc	r25, r9
     d64:	aa 1d       	adc	r26, r10
     d66:	bb 1d       	adc	r27, r11
     d68:	81 53       	subi	r24, 0x31	; 49
     d6a:	91 4f       	sbci	r25, 0xF1	; 241
     d6c:	af 4f       	sbci	r26, 0xFF	; 255
     d6e:	bf 4f       	sbci	r27, 0xFF	; 255
	bmp180_rawpressure >>= 4;
     d70:	68 94       	set
     d72:	13 f8       	bld	r1, 3
     d74:	b6 95       	lsr	r27
     d76:	a7 95       	ror	r26
     d78:	97 95       	ror	r25
     d7a:	87 95       	ror	r24
     d7c:	16 94       	lsr	r1
     d7e:	d1 f7       	brne	.-12     	; 0xd74 <_ZN6BMP18018bmp180_getpressureEv+0x2f6>
	bmp180_rawpressure  += p;
	//Korrektur heuristisch 
	bmp180_rawpressure  -= 23700;
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	6c 0d       	add	r22, r12
     d86:	7d 1d       	adc	r23, r13
     d88:	8e 1d       	adc	r24, r14
     d8a:	9f 1d       	adc	r25, r15
     d8c:	f1 01       	movw	r30, r2
     d8e:	62 a7       	std	Z+42, r22	; 0x2a
     d90:	73 a7       	std	Z+43, r23	; 0x2b
     d92:	84 a7       	std	Z+44, r24	; 0x2c
     d94:	95 a7       	std	Z+45, r25	; 0x2d
	
	pressure = (bmp180_rawpressure+BMP180_UNITPAOFFSET)/100.0;
     d96:	0e 94 0f 40 	call	0x801e	; 0x801e <__floatunsisf>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	48 ec       	ldi	r20, 0xC8	; 200
     da0:	52 e4       	ldi	r21, 0x42	; 66
     da2:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
     da6:	f1 01       	movw	r30, r2
     da8:	60 83       	st	Z, r22
     daa:	71 83       	std	Z+1, r23	; 0x01
     dac:	82 83       	std	Z+2, r24	; 0x02
     dae:	93 83       	std	Z+3, r25	; 0x03
	
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	bf 90       	pop	r11
     dca:	af 90       	pop	r10
     dcc:	9f 90       	pop	r9
     dce:	8f 90       	pop	r8
     dd0:	7f 90       	pop	r7
     dd2:	6f 90       	pop	r6
     dd4:	5f 90       	pop	r5
     dd6:	4f 90       	pop	r4
     dd8:	3f 90       	pop	r3
     dda:	2f 90       	pop	r2
     ddc:	08 95       	ret

00000dde <_ZN6BMP18018bmp180_getaltitudeEv>:

void BMP180::bmp180_getaltitude(){
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
	bmp180_getpressure();
     de4:	4c de       	rcall	.-872    	; 0xa7e <_ZN6BMP18018bmp180_getpressureEv>
	altitude  = pressure/pressure0;
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	4e 81       	ldd	r20, Y+6	; 0x06
     dec:	5f 81       	ldd	r21, Y+7	; 0x07
     dee:	68 81       	ld	r22, Y
     df0:	79 81       	ldd	r23, Y+1	; 0x01
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
	altitude  = pow(altitude,1/5.255);
     dfa:	2e ea       	ldi	r18, 0xAE	; 174
     dfc:	3c ed       	ldi	r19, 0xDC	; 220
     dfe:	42 e4       	ldi	r20, 0x42	; 66
     e00:	5e e3       	ldi	r21, 0x3E	; 62
     e02:	0e 94 8d 41 	call	0x831a	; 0x831a <pow>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
	altitude  = 1-altitude;
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 e8       	ldi	r24, 0x80	; 128
     e10:	9f e3       	ldi	r25, 0x3F	; 63
     e12:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__subsf3>
	altitude *= 44330;
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	3a e2       	ldi	r19, 0x2A	; 42
     e1a:	4d e2       	ldi	r20, 0x2D	; 45
     e1c:	57 e4       	ldi	r21, 0x47	; 71
     e1e:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
     e22:	6c 87       	std	Y+12, r22	; 0x0c
     e24:	7d 87       	std	Y+13, r23	; 0x0d
     e26:	8e 87       	std	Y+14, r24	; 0x0e
     e28:	9f 87       	std	Y+15, r25	; 0x0f
}
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
     e30:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5));// | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
     e32:	84 b1       	in	r24, 0x04	; 4
     e34:	8f 75       	andi	r24, 0x5F	; 95
     e36:	84 b9       	out	0x04, r24	; 4
	CS_HIGH();
     e38:	2c 9a       	sbi	0x05, 4	; 5
     e3a:	08 95       	ret

00000e3c <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     e3c:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e3e:	0d b4       	in	r0, 0x2d	; 45
     e40:	07 fe       	sbrs	r0, 7
     e42:	fd cf       	rjmp	.-6      	; 0xe3e <xchg_spi+0x2>
	return SPDR;
     e44:	8e b5       	in	r24, 0x2e	; 46
}
     e46:	08 95       	ret

00000e48 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     e48:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	f7 cf       	rjmp	.-18     	; 0xe3c <xchg_spi>
     e4e:	08 95       	ret

00000e50 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     e50:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	f3 df       	rcall	.-26     	; 0xe3c <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
     e56:	82 e3       	ldi	r24, 0x32	; 50
     e58:	80 93 29 04 	sts	0x0429, r24
	do{
		d = xchg_spi(0xFF);
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	ee df       	rcall	.-36     	; 0xe3c <xchg_spi>
	}while (d != 0xFF && Timer2);
     e60:	8f 3f       	cpi	r24, 0xFF	; 255
     e62:	41 f0       	breq	.+16     	; 0xe74 <select+0x24>
     e64:	80 91 29 04 	lds	r24, 0x0429
     e68:	81 11       	cpse	r24, r1
     e6a:	f8 cf       	rjmp	.-16     	; 0xe5c <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
     e6c:	ed df       	rcall	.-38     	; 0xe48 <deselect>
	return 0;	/* Timeout */
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     e78:	08 95       	ret

00000e7a <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
     e84:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     e86:	84 e1       	ldi	r24, 0x14	; 20
     e88:	80 93 2a 04 	sts	0x042A, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	d6 df       	rcall	.-84     	; 0xe3c <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     e90:	8f 3f       	cpi	r24, 0xFF	; 255
     e92:	39 f4       	brne	.+14     	; 0xea2 <rcvr_datablock+0x28>
     e94:	90 91 2a 04 	lds	r25, 0x042A
     e98:	91 11       	cpse	r25, r1
     e9a:	f8 cf       	rjmp	.-16     	; 0xe8c <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	20 c0       	rjmp	.+64     	; 0xee2 <rcvr_datablock+0x68>
     ea2:	8e 3f       	cpi	r24, 0xFE	; 254
     ea4:	e1 f4       	brne	.+56     	; 0xede <rcvr_datablock+0x64>
void rcvr_spi_multi (
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	cli();
     ea6:	f8 94       	cli
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	8e bd       	out	0x2e, r24	; 46
     eac:	0d b4       	in	r0, 0x2d	; 45
     eae:	07 fe       	sbrs	r0, 7
     eb0:	fd cf       	rjmp	.-6      	; 0xeac <rcvr_datablock+0x32>
     eb2:	9e b5       	in	r25, 0x2e	; 46
     eb4:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     eb6:	8e bd       	out	0x2e, r24	; 46
     eb8:	0d b4       	in	r0, 0x2d	; 45
     eba:	07 fe       	sbrs	r0, 7
     ebc:	fd cf       	rjmp	.-6      	; 0xeb8 <rcvr_datablock+0x3e>
     ebe:	22 96       	adiw	r28, 0x02	; 2
     ec0:	9e b5       	in	r25, 0x2e	; 46
     ec2:	fe 01       	movw	r30, r28
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	90 83       	st	Z, r25
	} while (cnt -= 2);
     ec8:	02 50       	subi	r16, 0x02	; 2
     eca:	11 09       	sbc	r17, r1
     ecc:	71 f7       	brne	.-36     	; 0xeaa <rcvr_datablock+0x30>
	sei();
     ece:	78 94       	sei
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	b4 df       	rcall	.-152    	; 0xe3c <xchg_spi>
	xchg_spi(0xFF);
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	b2 df       	rcall	.-156    	; 0xe3c <xchg_spi>

	return 1;						/* Return with success */
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <rcvr_datablock+0x68>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	08 95       	ret

00000eec <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	c8 2f       	mov	r28, r24
     ef8:	d4 2f       	mov	r29, r20
     efa:	15 2f       	mov	r17, r21
     efc:	06 2f       	mov	r16, r22
     efe:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     f00:	88 23       	and	r24, r24
     f02:	4c f4       	brge	.+18     	; 0xf16 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	ba 01       	movw	r22, r20
     f0a:	87 e3       	ldi	r24, 0x37	; 55
     f0c:	ef df       	rcall	.-34     	; 0xeec <send_cmd>
		if (res > 1) return res;
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	08 f0       	brcs	.+2      	; 0xf14 <send_cmd+0x28>
     f12:	3c c0       	rjmp	.+120    	; 0xf8c <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     f14:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     f16:	cc 30       	cpi	r28, 0x0C	; 12
     f18:	f1 f0       	breq	.+60     	; 0xf56 <send_cmd+0x6a>
		deselect();
     f1a:	96 df       	rcall	.-212    	; 0xe48 <deselect>
		if (!select()) return 0xFF;
     f1c:	99 df       	rcall	.-206    	; 0xe50 <select>
     f1e:	89 2b       	or	r24, r25
     f20:	c1 f0       	breq	.+48     	; 0xf52 <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     f22:	8c 2f       	mov	r24, r28
     f24:	80 64       	ori	r24, 0x40	; 64
     f26:	8a df       	rcall	.-236    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     f28:	8f 2d       	mov	r24, r15
     f2a:	88 df       	rcall	.-240    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     f2c:	80 2f       	mov	r24, r16
     f2e:	86 df       	rcall	.-244    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     f30:	81 2f       	mov	r24, r17
     f32:	84 df       	rcall	.-248    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     f34:	8d 2f       	mov	r24, r29
     f36:	82 df       	rcall	.-252    	; 0xe3c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     f38:	cc 23       	and	r28, r28
     f3a:	29 f1       	breq	.+74     	; 0xf86 <send_cmd+0x9a>
     f3c:	21 c0       	rjmp	.+66     	; 0xf80 <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	7d df       	rcall	.-262    	; 0xe3c <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     f42:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	7a df       	rcall	.-268    	; 0xe3c <xchg_spi>
	while ((res & 0x80) && --n);
     f48:	88 23       	and	r24, r24
     f4a:	04 f5       	brge	.+64     	; 0xf8c <send_cmd+0xa0>
     f4c:	c1 50       	subi	r28, 0x01	; 1
     f4e:	d1 f7       	brne	.-12     	; 0xf44 <send_cmd+0x58>
     f50:	1d c0       	rjmp	.+58     	; 0xf8c <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	1b c0       	rjmp	.+54     	; 0xf8c <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     f56:	8c e4       	ldi	r24, 0x4C	; 76
     f58:	71 df       	rcall	.-286    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     f5a:	8f 2d       	mov	r24, r15
     f5c:	6f df       	rcall	.-290    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     f5e:	80 2f       	mov	r24, r16
     f60:	6d df       	rcall	.-294    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     f62:	81 2f       	mov	r24, r17
     f64:	6b df       	rcall	.-298    	; 0xe3c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     f66:	8d 2f       	mov	r24, r29
     f68:	69 df       	rcall	.-302    	; 0xe3c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	67 df       	rcall	.-306    	; 0xe3c <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     f6e:	cc 30       	cpi	r28, 0x0C	; 12
     f70:	31 f3       	breq	.-52     	; 0xf3e <send_cmd+0x52>
     f72:	e7 cf       	rjmp	.-50     	; 0xf42 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     f74:	87 e8       	ldi	r24, 0x87	; 135
     f76:	62 df       	rcall	.-316    	; 0xe3c <xchg_spi>
     f78:	e4 cf       	rjmp	.-56     	; 0xf42 <send_cmd+0x56>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	5f df       	rcall	.-322    	; 0xe3c <xchg_spi>
     f7e:	e1 cf       	rjmp	.-62     	; 0xf42 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     f80:	c8 30       	cpi	r28, 0x08	; 8
     f82:	c1 f3       	breq	.-16     	; 0xf74 <send_cmd+0x88>
     f84:	fa cf       	rjmp	.-12     	; 0xf7a <send_cmd+0x8e>
	xchg_spi(n);
     f86:	85 e9       	ldi	r24, 0x95	; 149
     f88:	59 df       	rcall	.-334    	; 0xe3c <xchg_spi>
     f8a:	db cf       	rjmp	.-74     	; 0xf42 <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	08 95       	ret

00000f98 <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
     fa0:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
     fa2:	92 e3       	ldi	r25, 0x32	; 50
     fa4:	90 93 29 04 	sts	0x0429, r25
	do{
		d = xchg_spi(0xFF);
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	48 df       	rcall	.-368    	; 0xe3c <xchg_spi>
	}while (d != 0xFF && Timer2);
     fac:	8f 3f       	cpi	r24, 0xFF	; 255
     fae:	31 f0       	breq	.+12     	; 0xfbc <xmit_datablock+0x24>
     fb0:	90 91 29 04 	lds	r25, 0x0429
     fb4:	91 11       	cpse	r25, r1
     fb6:	f8 cf       	rjmp	.-16     	; 0xfa8 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	28 c0       	rjmp	.+80     	; 0x100c <xmit_datablock+0x74>

	xchg_spi(token);					/* Xmit data token */
     fbc:	81 2f       	mov	r24, r17
     fbe:	3e df       	rcall	.-388    	; 0xe3c <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     fc0:	1d 3f       	cpi	r17, 0xFD	; 253
     fc2:	11 f1       	breq	.+68     	; 0x1008 <xmit_datablock+0x70>
void xmit_spi_multi (
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	cli();
     fc4:	f8 94       	cli
     fc6:	9e 01       	movw	r18, r28
     fc8:	3e 5f       	subi	r19, 0xFE	; 254
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     fca:	88 81       	ld	r24, Y
     fcc:	8e bd       	out	0x2e, r24	; 46
     fce:	0d b4       	in	r0, 0x2d	; 45
     fd0:	07 fe       	sbrs	r0, 7
     fd2:	fd cf       	rjmp	.-6      	; 0xfce <xmit_datablock+0x36>
     fd4:	22 96       	adiw	r28, 0x02	; 2
     fd6:	fe 01       	movw	r30, r28
     fd8:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     fda:	80 81       	ld	r24, Z
     fdc:	8e bd       	out	0x2e, r24	; 46
     fde:	0d b4       	in	r0, 0x2d	; 45
     fe0:	07 fe       	sbrs	r0, 7
     fe2:	fd cf       	rjmp	.-6      	; 0xfde <xmit_datablock+0x46>
	} while (cnt -= 2);
     fe4:	2c 17       	cp	r18, r28
     fe6:	3d 07       	cpc	r19, r29
     fe8:	81 f7       	brne	.-32     	; 0xfca <xmit_datablock+0x32>
	sei();
     fea:	78 94       	sei
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, CLUSTERSIZE);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	26 df       	rcall	.-436    	; 0xe3c <xchg_spi>
		xchg_spi(0xFF);
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	24 df       	rcall	.-440    	; 0xe3c <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	22 df       	rcall	.-444    	; 0xe3c <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     ff8:	28 2f       	mov	r18, r24
     ffa:	2f 71       	andi	r18, 0x1F	; 31
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	25 30       	cpi	r18, 0x05	; 5
    1002:	21 f0       	breq	.+8      	; 0x100c <xmit_datablock+0x74>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <xmit_datablock+0x74>
		return 0;
	}

	return 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	08 95       	ret

00001014 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	00 d0       	rcall	.+0      	; 0x1026 <disk_initialize+0x12>
    1026:	00 d0       	rcall	.+0      	; 0x1028 <disk_initialize+0x14>
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    102c:	81 11       	cpse	r24, r1
    102e:	9b c0       	rjmp	.+310    	; 0x1166 <disk_initialize+0x152>
	power_off();						/* Turn off the socket power to reset the card */
    1030:	ff de       	rcall	.-514    	; 0xe30 <power_off>
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
    1032:	80 91 06 01 	lds	r24, 0x0106
    1036:	82 ff       	sbrs	r24, 2
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <disk_initialize+0x2c>
    103a:	80 91 06 01 	lds	r24, 0x0106
    103e:	9e c0       	rjmp	.+316    	; 0x117c <disk_initialize+0x168>

static
void power_on (void)
{
	//PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
	DDRB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
    1040:	84 b1       	in	r24, 0x04	; 4
    1042:	80 6b       	ori	r24, 0xB0	; 176
    1044:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PORTB6);
    1046:	26 98       	cbi	0x04, 6	; 4
	CS_HIGH();
    1048:	2c 9a       	sbi	0x05, 4	; 5

	SPSR = 0x01;			/* SPI 2x mode */
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	8d bd       	out	0x2d, r24	; 45
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    104e:	82 e5       	ldi	r24, 0x52	; 82
    1050:	8c bd       	out	0x2c, r24	; 44
    1052:	1a e0       	ldi	r17, 0x0A	; 10
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
//	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	f2 de       	rcall	.-540    	; 0xe3c <xchg_spi>
    1058:	11 50       	subi	r17, 0x01	; 1
    105a:	e1 f7       	brne	.-8      	; 0x1054 <disk_initialize+0x40>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	ba 01       	movw	r22, r20
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	43 df       	rcall	.-378    	; 0xeec <send_cmd>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	09 f0       	breq	.+2      	; 0x106c <disk_initialize+0x58>
    106a:	84 c0       	rjmp	.+264    	; 0x1174 <disk_initialize+0x160>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    106c:	84 e6       	ldi	r24, 0x64	; 100
    106e:	80 93 2a 04 	sts	0x042A, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    1072:	4a ea       	ldi	r20, 0xAA	; 170
    1074:	51 e0       	ldi	r21, 0x01	; 1
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	88 e0       	ldi	r24, 0x08	; 8
    107c:	37 df       	rcall	.-402    	; 0xeec <send_cmd>
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	09 f0       	breq	.+2      	; 0x1084 <disk_initialize+0x70>
    1082:	3f c0       	rjmp	.+126    	; 0x1102 <disk_initialize+0xee>
    1084:	ce 01       	movw	r24, r28
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	6c 01       	movw	r12, r24
    108a:	7e 01       	movw	r14, r28
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	e9 0e       	add	r14, r25
    1090:	f1 1c       	adc	r15, r1
    1092:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	d2 de       	rcall	.-604    	; 0xe3c <xchg_spi>
    1098:	f8 01       	movw	r30, r16
    109a:	81 93       	st	Z+, r24
    109c:	8f 01       	movw	r16, r30
    109e:	ee 15       	cp	r30, r14
    10a0:	ff 05       	cpc	r31, r15
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	09 f0       	breq	.+2      	; 0x10ac <disk_initialize+0x98>
    10aa:	64 c0       	rjmp	.+200    	; 0x1174 <disk_initialize+0x160>
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	8a 3a       	cpi	r24, 0xAA	; 170
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <disk_initialize+0xa0>
    10b2:	60 c0       	rjmp	.+192    	; 0x1174 <disk_initialize+0x160>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    10b4:	80 91 2a 04 	lds	r24, 0x042A
    10b8:	88 23       	and	r24, r24
    10ba:	41 f0       	breq	.+16     	; 0x10cc <disk_initialize+0xb8>
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e4       	ldi	r23, 0x40	; 64
    10c4:	89 ea       	ldi	r24, 0xA9	; 169
    10c6:	12 df       	rcall	.-476    	; 0xeec <send_cmd>
    10c8:	81 11       	cpse	r24, r1
    10ca:	f4 cf       	rjmp	.-24     	; 0x10b4 <disk_initialize+0xa0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    10cc:	80 91 2a 04 	lds	r24, 0x042A
    10d0:	88 23       	and	r24, r24
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <disk_initialize+0xc2>
    10d4:	4f c0       	rjmp	.+158    	; 0x1174 <disk_initialize+0x160>
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	ba 01       	movw	r22, r20
    10dc:	8a e3       	ldi	r24, 0x3A	; 58
    10de:	06 df       	rcall	.-500    	; 0xeec <send_cmd>
    10e0:	81 11       	cpse	r24, r1
    10e2:	48 c0       	rjmp	.+144    	; 0x1174 <disk_initialize+0x160>
    10e4:	76 01       	movw	r14, r12
    10e6:	14 e0       	ldi	r17, 0x04	; 4
    10e8:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	a7 de       	rcall	.-690    	; 0xe3c <xchg_spi>
    10ee:	f7 01       	movw	r30, r14
    10f0:	81 93       	st	Z+, r24
    10f2:	7f 01       	movw	r14, r30
    10f4:	1e 13       	cpse	r17, r30
    10f6:	f9 cf       	rjmp	.-14     	; 0x10ea <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	86 fd       	sbrc	r24, 6
    10fc:	36 c0       	rjmp	.+108    	; 0x116a <disk_initialize+0x156>
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	35 c0       	rjmp	.+106    	; 0x116c <disk_initialize+0x158>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	ba 01       	movw	r22, r20
    1108:	89 ea       	ldi	r24, 0xA9	; 169
    110a:	f0 de       	rcall	.-544    	; 0xeec <send_cmd>
    110c:	82 30       	cpi	r24, 0x02	; 2
    110e:	18 f0       	brcs	.+6      	; 0x1116 <disk_initialize+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1110:	01 e0       	ldi	r16, 0x01	; 1
    1112:	11 e0       	ldi	r17, 0x01	; 1
    1114:	02 c0       	rjmp	.+4      	; 0x111a <disk_initialize+0x106>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    1116:	02 e0       	ldi	r16, 0x02	; 2
    1118:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    111a:	90 91 2a 04 	lds	r25, 0x042A
    111e:	99 23       	and	r25, r25
    1120:	39 f0       	breq	.+14     	; 0x1130 <disk_initialize+0x11c>
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	ba 01       	movw	r22, r20
    1128:	81 2f       	mov	r24, r17
    112a:	e0 de       	rcall	.-576    	; 0xeec <send_cmd>
    112c:	81 11       	cpse	r24, r1
    112e:	f5 cf       	rjmp	.-22     	; 0x111a <disk_initialize+0x106>
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
    1130:	80 91 2a 04 	lds	r24, 0x042A
    1134:	88 23       	and	r24, r24
    1136:	f1 f0       	breq	.+60     	; 0x1174 <disk_initialize+0x160>
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	52 e0       	ldi	r21, 0x02	; 2
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e1       	ldi	r24, 0x10	; 16
    1142:	d4 de       	rcall	.-600    	; 0xeec <send_cmd>
    1144:	81 11       	cpse	r24, r1
    1146:	16 c0       	rjmp	.+44     	; 0x1174 <disk_initialize+0x160>
				ty = 0;
		}
	}
	CardType = ty;
    1148:	00 93 28 04 	sts	0x0428, r16
	deselect();
    114c:	7d de       	rcall	.-774    	; 0xe48 <deselect>

	if (ty) {			/* Initialization succeded */
    114e:	00 23       	and	r16, r16
    1150:	31 f0       	breq	.+12     	; 0x115e <disk_initialize+0x14a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    1152:	80 91 06 01 	lds	r24, 0x0106
    1156:	8e 7f       	andi	r24, 0xFE	; 254
    1158:	80 93 06 01 	sts	0x0106, r24
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <disk_initialize+0x14c>
//		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    115e:	68 de       	rcall	.-816    	; 0xe30 <power_off>
	}

	return Stat;
    1160:	80 91 06 01 	lds	r24, 0x0106
    1164:	0b c0       	rjmp	.+22     	; 0x117c <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	09 c0       	rjmp	.+18     	; 0x117c <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    116a:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    116c:	80 93 28 04 	sts	0x0428, r24
	deselect();
    1170:	6b de       	rcall	.-810    	; 0xe48 <deselect>
    1172:	ef cf       	rjmp	.-34     	; 0x1152 <disk_initialize+0x13e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1174:	10 92 28 04 	sts	0x0428, r1
	deselect();
    1178:	67 de       	rcall	.-818    	; 0xe48 <deselect>
    117a:	f1 cf       	rjmp	.-30     	; 0x115e <disk_initialize+0x14a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	08 95       	ret

00001196 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1196:	81 11       	cpse	r24, r1
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <disk_status+0xa>
	return Stat;
    119a:	80 91 06 01 	lds	r24, 0x0106
    119e:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    11a0:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    11a2:	08 95       	ret

000011a4 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    11b0:	81 11       	cpse	r24, r1
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <disk_read+0x8e>
    11b4:	01 15       	cp	r16, r1
    11b6:	11 05       	cpc	r17, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <disk_read+0x18>
    11ba:	3d c0       	rjmp	.+122    	; 0x1236 <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    11bc:	80 91 06 01 	lds	r24, 0x0106
    11c0:	80 fd       	sbrc	r24, 0
    11c2:	3b c0       	rjmp	.+118    	; 0x123a <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    11c4:	80 91 28 04 	lds	r24, 0x0428
    11c8:	83 fd       	sbrc	r24, 3
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <disk_read+0x3a>
    11cc:	01 2e       	mov	r0, r17
    11ce:	19 e0       	ldi	r17, 0x09	; 9
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	44 1f       	adc	r20, r20
    11d6:	55 1f       	adc	r21, r21
    11d8:	1a 95       	dec	r17
    11da:	d1 f7       	brne	.-12     	; 0x11d0 <disk_read+0x2c>
    11dc:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    11de:	02 30       	cpi	r16, 0x02	; 2
    11e0:	11 05       	cpc	r17, r1
    11e2:	28 f4       	brcc	.+10     	; 0x11ee <disk_read+0x4a>
    11e4:	0f 2e       	mov	r0, r31
    11e6:	f1 e1       	ldi	r31, 0x11	; 17
    11e8:	ff 2e       	mov	r15, r31
    11ea:	f0 2d       	mov	r31, r0
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <disk_read+0x52>
    11ee:	0f 2e       	mov	r0, r31
    11f0:	f2 e1       	ldi	r31, 0x12	; 18
    11f2:	ff 2e       	mov	r15, r31
    11f4:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    11f6:	ba 01       	movw	r22, r20
    11f8:	a9 01       	movw	r20, r18
    11fa:	8f 2d       	mov	r24, r15
    11fc:	77 de       	rcall	.-786    	; 0xeec <send_cmd>
    11fe:	81 11       	cpse	r24, r1
    1200:	12 c0       	rjmp	.+36     	; 0x1226 <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, CLUSTERSIZE)) break;
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	72 e0       	ldi	r23, 0x02	; 2
    1206:	ce 01       	movw	r24, r28
    1208:	38 de       	rcall	.-912    	; 0xe7a <rcvr_datablock>
    120a:	89 2b       	or	r24, r25
    120c:	21 f0       	breq	.+8      	; 0x1216 <disk_read+0x72>
			buff += CLUSTERSIZE;
    120e:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    1210:	01 50       	subi	r16, 0x01	; 1
    1212:	11 09       	sbc	r17, r1
    1214:	b1 f7       	brne	.-20     	; 0x1202 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    1216:	82 e1       	ldi	r24, 0x12	; 18
    1218:	f8 12       	cpse	r15, r24
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <disk_read+0x82>
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	ba 01       	movw	r22, r20
    1222:	8c e0       	ldi	r24, 0x0C	; 12
    1224:	63 de       	rcall	.-826    	; 0xeec <send_cmd>
	}
	deselect();
    1226:	10 de       	rcall	.-992    	; 0xe48 <deselect>

	return count ? RES_ERROR : RES_OK;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	01 2b       	or	r16, r17
    122c:	39 f4       	brne	.+14     	; 0x123c <disk_read+0x98>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	05 c0       	rjmp	.+10     	; 0x123c <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	03 c0       	rjmp	.+6      	; 0x123c <disk_read+0x98>
    1236:	84 e0       	ldi	r24, 0x04	; 4
    1238:	01 c0       	rjmp	.+2      	; 0x123c <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    123a:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	08 95       	ret

00001248 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	eb 01       	movw	r28, r22
    125a:	69 01       	movw	r12, r18
    125c:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    125e:	81 11       	cpse	r24, r1
    1260:	51 c0       	rjmp	.+162    	; 0x1304 <disk_write+0xbc>
    1262:	01 15       	cp	r16, r1
    1264:	11 05       	cpc	r17, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <disk_write+0x22>
    1268:	4f c0       	rjmp	.+158    	; 0x1308 <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    126a:	80 91 06 01 	lds	r24, 0x0106
    126e:	80 fd       	sbrc	r24, 0
    1270:	4d c0       	rjmp	.+154    	; 0x130c <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1272:	80 91 06 01 	lds	r24, 0x0106
    1276:	82 fd       	sbrc	r24, 2
    1278:	4b c0       	rjmp	.+150    	; 0x1310 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    127a:	80 91 28 04 	lds	r24, 0x0428
    127e:	83 fd       	sbrc	r24, 3
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <disk_write+0x4c>
    1282:	0b 2e       	mov	r0, r27
    1284:	b9 e0       	ldi	r27, 0x09	; 9
    1286:	cc 0c       	add	r12, r12
    1288:	dd 1c       	adc	r13, r13
    128a:	ee 1c       	adc	r14, r14
    128c:	ff 1c       	adc	r15, r15
    128e:	ba 95       	dec	r27
    1290:	d1 f7       	brne	.-12     	; 0x1286 <disk_write+0x3e>
    1292:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    1294:	01 30       	cpi	r16, 0x01	; 1
    1296:	11 05       	cpc	r17, r1
    1298:	89 f4       	brne	.+34     	; 0x12bc <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    129a:	b7 01       	movw	r22, r14
    129c:	a6 01       	movw	r20, r12
    129e:	88 e1       	ldi	r24, 0x18	; 24
    12a0:	25 de       	rcall	.-950    	; 0xeec <send_cmd>
    12a2:	81 11       	cpse	r24, r1
    12a4:	29 c0       	rjmp	.+82     	; 0x12f8 <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    12a6:	6e ef       	ldi	r22, 0xFE	; 254
    12a8:	ce 01       	movw	r24, r28
    12aa:	76 de       	rcall	.-788    	; 0xf98 <xmit_datablock>
    12ac:	31 e0       	ldi	r19, 0x01	; 1
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	89 2b       	or	r24, r25
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <disk_write+0x6e>
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	03 2f       	mov	r16, r19
    12b8:	12 2f       	mov	r17, r18
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    12bc:	86 70       	andi	r24, 0x06	; 6
    12be:	29 f0       	breq	.+10     	; 0x12ca <disk_write+0x82>
    12c0:	a8 01       	movw	r20, r16
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	87 e9       	ldi	r24, 0x97	; 151
    12c8:	11 de       	rcall	.-990    	; 0xeec <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    12ca:	b7 01       	movw	r22, r14
    12cc:	a6 01       	movw	r20, r12
    12ce:	89 e1       	ldi	r24, 0x19	; 25
    12d0:	0d de       	rcall	.-998    	; 0xeec <send_cmd>
    12d2:	81 11       	cpse	r24, r1
    12d4:	11 c0       	rjmp	.+34     	; 0x12f8 <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    12d6:	6c ef       	ldi	r22, 0xFC	; 252
    12d8:	ce 01       	movw	r24, r28
    12da:	5e de       	rcall	.-836    	; 0xf98 <xmit_datablock>
    12dc:	89 2b       	or	r24, r25
    12de:	21 f0       	breq	.+8      	; 0x12e8 <disk_write+0xa0>
				buff += CLUSTERSIZE;
    12e0:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    12e2:	01 50       	subi	r16, 0x01	; 1
    12e4:	11 09       	sbc	r17, r1
    12e6:	b9 f7       	brne	.-18     	; 0x12d6 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    12e8:	6d ef       	ldi	r22, 0xFD	; 253
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	54 de       	rcall	.-856    	; 0xf98 <xmit_datablock>
    12f0:	89 2b       	or	r24, r25
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <disk_write+0xb0>
				count = 1;
    12f4:	01 e0       	ldi	r16, 0x01	; 1
    12f6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    12f8:	a7 dd       	rcall	.-1202   	; 0xe48 <deselect>

	return count ? RES_ERROR : RES_OK;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	01 2b       	or	r16, r17
    12fe:	49 f4       	brne	.+18     	; 0x1312 <disk_write+0xca>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	07 c0       	rjmp	.+14     	; 0x1312 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <disk_write+0xca>
    1308:	84 e0       	ldi	r24, 0x04	; 4
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1310:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	08 95       	ret

00001324 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	60 97       	sbiw	r28, 0x10	; 16
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    1340:	81 11       	cpse	r24, r1
    1342:	7c c1       	rjmp	.+760    	; 0x163c <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1344:	80 91 06 01 	lds	r24, 0x0106
    1348:	80 fd       	sbrc	r24, 0
    134a:	7a c1       	rjmp	.+756    	; 0x1640 <disk_ioctl+0x31c>
    134c:	7a 01       	movw	r14, r20

	switch (cmd) {
    134e:	06 2f       	mov	r16, r22
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	07 33       	cpi	r16, 0x37	; 55
    1354:	11 05       	cpc	r17, r1
    1356:	08 f0       	brcs	.+2      	; 0x135a <disk_ioctl+0x36>
    1358:	59 c1       	rjmp	.+690    	; 0x160c <disk_ioctl+0x2e8>
    135a:	f8 01       	movw	r30, r16
    135c:	ea 5b       	subi	r30, 0xBA	; 186
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	0c 94 b2 46 	jmp	0x8d64	; 0x8d64 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    1364:	75 dd       	rcall	.-1302   	; 0xe50 <select>
    1366:	11 e0       	ldi	r17, 0x01	; 1
    1368:	89 2b       	or	r24, r25
    136a:	09 f4       	brne	.+2      	; 0x136e <disk_ioctl+0x4a>
    136c:	64 c1       	rjmp	.+712    	; 0x1636 <disk_ioctl+0x312>
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	62 c1       	rjmp	.+708    	; 0x1636 <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	ba 01       	movw	r22, r20
    1378:	89 e0       	ldi	r24, 0x09	; 9
    137a:	b8 dd       	rcall	.-1168   	; 0xeec <send_cmd>
    137c:	81 11       	cpse	r24, r1
    137e:	48 c1       	rjmp	.+656    	; 0x1610 <disk_ioctl+0x2ec>
    1380:	60 e1       	ldi	r22, 0x10	; 16
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	ce 01       	movw	r24, r28
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	78 dd       	rcall	.-1296   	; 0xe7a <rcvr_datablock>
    138a:	89 2b       	or	r24, r25
    138c:	09 f4       	brne	.+2      	; 0x1390 <disk_ioctl+0x6c>
    138e:	42 c1       	rjmp	.+644    	; 0x1614 <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	82 95       	swap	r24
    1394:	86 95       	lsr	r24
    1396:	86 95       	lsr	r24
    1398:	83 70       	andi	r24, 0x03	; 3
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	31 f5       	brne	.+76     	; 0x13ea <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    139e:	88 85       	ldd	r24, Y+8	; 0x08
    13a0:	8f 73       	andi	r24, 0x3F	; 63
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	dc 01       	movw	r26, r24
    13aa:	99 27       	eor	r25, r25
    13ac:	88 27       	eor	r24, r24
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	a1 1d       	adc	r26, r1
    13b2:	b1 1d       	adc	r27, r1
    13b4:	29 85       	ldd	r18, Y+9	; 0x09
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	32 2f       	mov	r19, r18
    13ba:	22 27       	eor	r18, r18
    13bc:	4a 85       	ldd	r20, Y+10	; 0x0a
    13be:	24 0f       	add	r18, r20
    13c0:	31 1d       	adc	r19, r1
    13c2:	82 0f       	add	r24, r18
    13c4:	93 1f       	adc	r25, r19
    13c6:	a1 1d       	adc	r26, r1
    13c8:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    13ca:	07 2e       	mov	r0, r23
    13cc:	7a e0       	ldi	r23, 0x0A	; 10
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	aa 1f       	adc	r26, r26
    13d4:	bb 1f       	adc	r27, r27
    13d6:	7a 95       	dec	r23
    13d8:	d1 f7       	brne	.-12     	; 0x13ce <disk_ioctl+0xaa>
    13da:	70 2d       	mov	r23, r0
    13dc:	f7 01       	movw	r30, r14
    13de:	80 83       	st	Z, r24
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	a2 83       	std	Z+2, r26	; 0x02
    13e4:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    13e6:	10 e0       	ldi	r17, 0x00	; 0
    13e8:	26 c1       	rjmp	.+588    	; 0x1636 <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	82 95       	swap	r24
    13ee:	86 95       	lsr	r24
    13f0:	86 95       	lsr	r24
    13f2:	83 70       	andi	r24, 0x03	; 3
    13f4:	28 85       	ldd	r18, Y+8	; 0x08
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	f4 e0       	ldi	r31, 0x04	; 4
    13fa:	2f 9f       	mul	r18, r31
    13fc:	80 0d       	add	r24, r0
    13fe:	91 1d       	adc	r25, r1
    1400:	11 24       	eor	r1, r1
    1402:	9c 01       	movw	r18, r24
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	8f 81       	ldd	r24, Y+7	; 0x07
    140a:	83 70       	andi	r24, 0x03	; 3
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	98 2f       	mov	r25, r24
    1410:	88 27       	eor	r24, r24
    1412:	99 0f       	add	r25, r25
    1414:	99 0f       	add	r25, r25
    1416:	82 0f       	add	r24, r18
    1418:	93 1f       	adc	r25, r19
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    141e:	3e 81       	ldd	r19, Y+6	; 0x06
    1420:	3f 70       	andi	r19, 0x0F	; 15
    1422:	2b 85       	ldd	r18, Y+11	; 0x0b
    1424:	22 1f       	adc	r18, r18
    1426:	22 27       	eor	r18, r18
    1428:	22 1f       	adc	r18, r18
    142a:	32 0f       	add	r19, r18
    142c:	2a 85       	ldd	r18, Y+10	; 0x0a
    142e:	23 70       	andi	r18, 0x03	; 3
    1430:	22 0f       	add	r18, r18
    1432:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    1434:	27 50       	subi	r18, 0x07	; 7
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <disk_ioctl+0x11c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	aa 1f       	adc	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	2a 95       	dec	r18
    1442:	d2 f7       	brpl	.-12     	; 0x1438 <disk_ioctl+0x114>
    1444:	f7 01       	movw	r30, r14
    1446:	80 83       	st	Z, r24
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	a2 83       	std	Z+2, r26	; 0x02
    144c:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    144e:	10 e0       	ldi	r17, 0x00	; 0
    1450:	f2 c0       	rjmp	.+484    	; 0x1636 <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    1452:	10 91 28 04 	lds	r17, 0x0428
    1456:	12 ff       	sbrs	r17, 2
    1458:	2a c0       	rjmp	.+84     	; 0x14ae <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	ba 01       	movw	r22, r20
    1460:	8d e8       	ldi	r24, 0x8D	; 141
    1462:	44 dd       	rcall	.-1400   	; 0xeec <send_cmd>
    1464:	81 11       	cpse	r24, r1
    1466:	d8 c0       	rjmp	.+432    	; 0x1618 <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	e8 dc       	rcall	.-1584   	; 0xe3c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    146c:	60 e1       	ldi	r22, 0x10	; 16
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	02 dd       	rcall	.-1532   	; 0xe7a <rcvr_datablock>
    1476:	89 2b       	or	r24, r25
    1478:	09 f4       	brne	.+2      	; 0x147c <disk_ioctl+0x158>
    147a:	d0 c0       	rjmp	.+416    	; 0x161c <disk_ioctl+0x2f8>
    147c:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	dd dc       	rcall	.-1606   	; 0xe3c <xchg_spi>
    1482:	11 50       	subi	r17, 0x01	; 1
    1484:	e1 f7       	brne	.-8      	; 0x147e <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1486:	2b 85       	ldd	r18, Y+11	; 0x0b
    1488:	22 95       	swap	r18
    148a:	2f 70       	andi	r18, 0x0F	; 15
    148c:	80 e1       	ldi	r24, 0x10	; 16
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a0 e0       	ldi	r26, 0x00	; 0
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	04 c0       	rjmp	.+8      	; 0x149e <disk_ioctl+0x17a>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	aa 1f       	adc	r26, r26
    149c:	bb 1f       	adc	r27, r27
    149e:	2a 95       	dec	r18
    14a0:	d2 f7       	brpl	.-12     	; 0x1496 <disk_ioctl+0x172>
    14a2:	f7 01       	movw	r30, r14
    14a4:	80 83       	st	Z, r24
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	a2 83       	std	Z+2, r26	; 0x02
    14aa:	b3 83       	std	Z+3, r27	; 0x03
    14ac:	c4 c0       	rjmp	.+392    	; 0x1636 <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	ba 01       	movw	r22, r20
    14b4:	89 e0       	ldi	r24, 0x09	; 9
    14b6:	1a dd       	rcall	.-1484   	; 0xeec <send_cmd>
    14b8:	81 11       	cpse	r24, r1
    14ba:	b2 c0       	rjmp	.+356    	; 0x1620 <disk_ioctl+0x2fc>
    14bc:	60 e1       	ldi	r22, 0x10	; 16
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	ce 01       	movw	r24, r28
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	da dc       	rcall	.-1612   	; 0xe7a <rcvr_datablock>
    14c6:	89 2b       	or	r24, r25
    14c8:	09 f4       	brne	.+2      	; 0x14cc <disk_ioctl+0x1a8>
    14ca:	ac c0       	rjmp	.+344    	; 0x1624 <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
    14cc:	11 ff       	sbrs	r17, 1
    14ce:	20 c0       	rjmp	.+64     	; 0x1510 <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    14d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d2:	88 1f       	adc	r24, r24
    14d4:	88 27       	eor	r24, r24
    14d6:	88 1f       	adc	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    14de:	2f 73       	andi	r18, 0x3F	; 63
    14e0:	82 0f       	add	r24, r18
    14e2:	91 1d       	adc	r25, r1
    14e4:	82 0f       	add	r24, r18
    14e6:	91 1d       	adc	r25, r1
    14e8:	2e 85       	ldd	r18, Y+14	; 0x0e
    14ea:	22 95       	swap	r18
    14ec:	26 95       	lsr	r18
    14ee:	26 95       	lsr	r18
    14f0:	23 70       	andi	r18, 0x03	; 3
    14f2:	21 50       	subi	r18, 0x01	; 1
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <disk_ioctl+0x1d6>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	2a 95       	dec	r18
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <disk_ioctl+0x1d2>
    14fe:	a0 e0       	ldi	r26, 0x00	; 0
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	f7 01       	movw	r30, r14
    1504:	80 83       	st	Z, r24
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	a2 83       	std	Z+2, r26	; 0x02
    150a:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    150c:	10 e0       	ldi	r17, 0x00	; 0
    150e:	93 c0       	rjmp	.+294    	; 0x1636 <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    1510:	8c 85       	ldd	r24, Y+12	; 0x0c
    1512:	28 2f       	mov	r18, r24
    1514:	23 70       	andi	r18, 0x03	; 3
    1516:	82 95       	swap	r24
    1518:	86 95       	lsr	r24
    151a:	87 70       	andi	r24, 0x07	; 7
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	f8 e0       	ldi	r31, 0x08	; 8
    1520:	2f 9f       	mul	r18, r31
    1522:	80 0d       	add	r24, r0
    1524:	91 1d       	adc	r25, r1
    1526:	11 24       	eor	r1, r1
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	2b 85       	ldd	r18, Y+11	; 0x0b
    152c:	2c 77       	andi	r18, 0x7C	; 124
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	35 95       	asr	r19
    1532:	27 95       	ror	r18
    1534:	35 95       	asr	r19
    1536:	27 95       	ror	r18
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	82 9f       	mul	r24, r18
    153e:	a0 01       	movw	r20, r0
    1540:	83 9f       	mul	r24, r19
    1542:	50 0d       	add	r21, r0
    1544:	92 9f       	mul	r25, r18
    1546:	50 0d       	add	r21, r0
    1548:	11 24       	eor	r1, r1
    154a:	ca 01       	movw	r24, r20
    154c:	a0 e0       	ldi	r26, 0x00	; 0
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	f7 01       	movw	r30, r14
    1552:	80 83       	st	Z, r24
    1554:	91 83       	std	Z+1, r25	; 0x01
    1556:	a2 83       	std	Z+2, r26	; 0x02
    1558:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    155a:	10 e0       	ldi	r17, 0x00	; 0
    155c:	6c c0       	rjmp	.+216    	; 0x1636 <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    155e:	80 91 28 04 	lds	r24, 0x0428
    1562:	fa 01       	movw	r30, r20
    1564:	80 83       	st	Z, r24
		res = RES_OK;
    1566:	10 e0       	ldi	r17, 0x00	; 0
		break;
    1568:	66 c0       	rjmp	.+204    	; 0x1636 <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	ba 01       	movw	r22, r20
    1570:	89 e0       	ldi	r24, 0x09	; 9
    1572:	bc dc       	rcall	.-1672   	; 0xeec <send_cmd>
    1574:	81 11       	cpse	r24, r1
    1576:	58 c0       	rjmp	.+176    	; 0x1628 <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
    1578:	60 e1       	ldi	r22, 0x10	; 16
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	c7 01       	movw	r24, r14
    157e:	7d dc       	rcall	.-1798   	; 0xe7a <rcvr_datablock>
    1580:	11 e0       	ldi	r17, 0x01	; 1
    1582:	89 2b       	or	r24, r25
    1584:	09 f4       	brne	.+2      	; 0x1588 <disk_ioctl+0x264>
    1586:	57 c0       	rjmp	.+174    	; 0x1636 <disk_ioctl+0x312>
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	55 c0       	rjmp	.+170    	; 0x1636 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	ba 01       	movw	r22, r20
    1592:	8a e0       	ldi	r24, 0x0A	; 10
    1594:	ab dc       	rcall	.-1706   	; 0xeec <send_cmd>
    1596:	81 11       	cpse	r24, r1
    1598:	49 c0       	rjmp	.+146    	; 0x162c <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
    159a:	60 e1       	ldi	r22, 0x10	; 16
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	c7 01       	movw	r24, r14
    15a0:	6c dc       	rcall	.-1832   	; 0xe7a <rcvr_datablock>
    15a2:	11 e0       	ldi	r17, 0x01	; 1
    15a4:	89 2b       	or	r24, r25
    15a6:	09 f4       	brne	.+2      	; 0x15aa <disk_ioctl+0x286>
    15a8:	46 c0       	rjmp	.+140    	; 0x1636 <disk_ioctl+0x312>
    15aa:	10 e0       	ldi	r17, 0x00	; 0
    15ac:	44 c0       	rjmp	.+136    	; 0x1636 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	ba 01       	movw	r22, r20
    15b4:	8a e3       	ldi	r24, 0x3A	; 58
    15b6:	9a dc       	rcall	.-1740   	; 0xeec <send_cmd>
    15b8:	81 11       	cpse	r24, r1
    15ba:	3a c0       	rjmp	.+116    	; 0x1630 <disk_ioctl+0x30c>
    15bc:	87 01       	movw	r16, r14
    15be:	f4 e0       	ldi	r31, 0x04	; 4
    15c0:	ef 0e       	add	r14, r31
    15c2:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	3a dc       	rcall	.-1932   	; 0xe3c <xchg_spi>
    15c8:	f8 01       	movw	r30, r16
    15ca:	81 93       	st	Z+, r24
    15cc:	8f 01       	movw	r16, r30
    15ce:	ee 15       	cp	r30, r14
    15d0:	ff 05       	cpc	r31, r15
    15d2:	c1 f7       	brne	.-16     	; 0x15c4 <disk_ioctl+0x2a0>
			res = RES_OK;
    15d4:	10 e0       	ldi	r17, 0x00	; 0
    15d6:	2f c0       	rjmp	.+94     	; 0x1636 <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	ba 01       	movw	r22, r20
    15de:	8d e8       	ldi	r24, 0x8D	; 141
    15e0:	85 dc       	rcall	.-1782   	; 0xeec <send_cmd>
    15e2:	81 11       	cpse	r24, r1
    15e4:	27 c0       	rjmp	.+78     	; 0x1634 <disk_ioctl+0x310>
			xchg_spi(0xFF);
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	29 dc       	rcall	.-1966   	; 0xe3c <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    15ea:	60 e4       	ldi	r22, 0x40	; 64
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	c7 01       	movw	r24, r14
    15f0:	44 dc       	rcall	.-1912   	; 0xe7a <rcvr_datablock>
    15f2:	11 e0       	ldi	r17, 0x01	; 1
    15f4:	89 2b       	or	r24, r25
    15f6:	f9 f0       	breq	.+62     	; 0x1636 <disk_ioctl+0x312>
    15f8:	10 e0       	ldi	r17, 0x00	; 0
    15fa:	1d c0       	rjmp	.+58     	; 0x1636 <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    15fc:	19 dc       	rcall	.-1998   	; 0xe30 <power_off>
		Stat |= STA_NOINIT;
    15fe:	80 91 06 01 	lds	r24, 0x0106
    1602:	81 60       	ori	r24, 0x01	; 1
    1604:	80 93 06 01 	sts	0x0106, r24
		res = RES_OK;
    1608:	10 e0       	ldi	r17, 0x00	; 0
		break;
    160a:	15 c0       	rjmp	.+42     	; 0x1636 <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
    160c:	14 e0       	ldi	r17, 0x04	; 4
    160e:	13 c0       	rjmp	.+38     	; 0x1636 <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    1610:	11 e0       	ldi	r17, 0x01	; 1
    1612:	11 c0       	rjmp	.+34     	; 0x1636 <disk_ioctl+0x312>
    1614:	11 e0       	ldi	r17, 0x01	; 1
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <disk_ioctl+0x312>
    1618:	11 e0       	ldi	r17, 0x01	; 1
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <disk_ioctl+0x312>
    161c:	11 e0       	ldi	r17, 0x01	; 1
    161e:	0b c0       	rjmp	.+22     	; 0x1636 <disk_ioctl+0x312>
    1620:	11 e0       	ldi	r17, 0x01	; 1
    1622:	09 c0       	rjmp	.+18     	; 0x1636 <disk_ioctl+0x312>
    1624:	11 e0       	ldi	r17, 0x01	; 1
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <disk_ioctl+0x312>
    1628:	11 e0       	ldi	r17, 0x01	; 1
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <disk_ioctl+0x312>
    162c:	11 e0       	ldi	r17, 0x01	; 1
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <disk_ioctl+0x312>
    1630:	11 e0       	ldi	r17, 0x01	; 1
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <disk_ioctl+0x312>
    1634:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    1636:	08 dc       	rcall	.-2032   	; 0xe48 <deselect>

	return res;
    1638:	81 2f       	mov	r24, r17
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1640:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    1642:	60 96       	adiw	r28, 0x10	; 16
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    165c:	80 91 2a 04 	lds	r24, 0x042A
	if (n) Timer1 = --n;
    1660:	88 23       	and	r24, r24
    1662:	19 f0       	breq	.+6      	; 0x166a <disk_timerproc+0xe>
    1664:	81 50       	subi	r24, 0x01	; 1
    1666:	80 93 2a 04 	sts	0x042A, r24
	n = Timer2;
    166a:	80 91 29 04 	lds	r24, 0x0429
	if (n) Timer2 = --n;
    166e:	88 23       	and	r24, r24
    1670:	19 f0       	breq	.+6      	; 0x1678 <disk_timerproc+0x1c>
    1672:	81 50       	subi	r24, 0x01	; 1
    1674:	80 93 29 04 	sts	0x0429, r24
	
	s = Stat;
    1678:	80 91 06 01 	lds	r24, 0x0106
//	if (MMC_CD)				/* Card inserted */
//		s &= ~STA_NODISK;
//	else					/* Socket empty */
//		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    167c:	80 93 06 01 	sts	0x0106, r24
    1680:	08 95       	ret

00001682 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
    1682:	9c 5f       	subi	r25, 0xFC	; 252
    1684:	0c 94 5f 23 	jmp	0x46be	; 0x46be <_ZN3I2CD1Ev>
    1688:	08 95       	ret

0000168a <_ZN7Display10clearFrameEv>:
    168a:	fc 01       	movw	r30, r24
    168c:	9c 5f       	subi	r25, 0xFC	; 252
    168e:	11 92       	st	Z+, r1
    1690:	e8 17       	cp	r30, r24
    1692:	f9 07       	cpc	r31, r25
    1694:	e1 f7       	brne	.-8      	; 0x168e <_ZN7Display10clearFrameEv+0x4>
    1696:	08 95       	ret

00001698 <_ZN7Display15ssd1306_commandEh>:
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	16 2f       	mov	r17, r22
    16a0:	ec 01       	movw	r28, r24
    16a2:	dc 5f       	subi	r29, 0xFC	; 252
    16a4:	ce 01       	movw	r24, r28
    16a6:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
    16aa:	68 e7       	ldi	r22, 0x78	; 120
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	ce 01       	movw	r24, r28
    16b6:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
    16ba:	61 2f       	mov	r22, r17
    16bc:	ce 01       	movw	r24, r28
    16be:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
    16c2:	ce 01       	movw	r24, r28
    16c4:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN3I2C8twi_stopEv>
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	08 95       	ret

000016d0 <_ZN7Display17InitializeDisplayEv>:
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
    16d6:	6e ea       	ldi	r22, 0xAE	; 174
    16d8:	df df       	rcall	.-66     	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    16da:	65 ed       	ldi	r22, 0xD5	; 213
    16dc:	ce 01       	movw	r24, r28
    16de:	dc df       	rcall	.-72     	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    16e0:	60 e8       	ldi	r22, 0x80	; 128
    16e2:	ce 01       	movw	r24, r28
    16e4:	d9 df       	rcall	.-78     	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    16e6:	68 ea       	ldi	r22, 0xA8	; 168
    16e8:	ce 01       	movw	r24, r28
    16ea:	d6 df       	rcall	.-84     	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    16ec:	6f e3       	ldi	r22, 0x3F	; 63
    16ee:	ce 01       	movw	r24, r28
    16f0:	d3 df       	rcall	.-90     	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    16f2:	63 ed       	ldi	r22, 0xD3	; 211
    16f4:	ce 01       	movw	r24, r28
    16f6:	d0 df       	rcall	.-96     	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	ce 01       	movw	r24, r28
    16fc:	cd df       	rcall	.-102    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    16fe:	60 e4       	ldi	r22, 0x40	; 64
    1700:	ce 01       	movw	r24, r28
    1702:	ca df       	rcall	.-108    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1704:	6d e8       	ldi	r22, 0x8D	; 141
    1706:	ce 01       	movw	r24, r28
    1708:	c7 df       	rcall	.-114    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    170a:	64 e1       	ldi	r22, 0x14	; 20
    170c:	ce 01       	movw	r24, r28
    170e:	c4 df       	rcall	.-120    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1710:	60 e2       	ldi	r22, 0x20	; 32
    1712:	ce 01       	movw	r24, r28
    1714:	c1 df       	rcall	.-126    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	ce 01       	movw	r24, r28
    171a:	be df       	rcall	.-132    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    171c:	61 ea       	ldi	r22, 0xA1	; 161
    171e:	ce 01       	movw	r24, r28
    1720:	bb df       	rcall	.-138    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1722:	68 ec       	ldi	r22, 0xC8	; 200
    1724:	ce 01       	movw	r24, r28
    1726:	b8 df       	rcall	.-144    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1728:	6a ed       	ldi	r22, 0xDA	; 218
    172a:	ce 01       	movw	r24, r28
    172c:	b5 df       	rcall	.-150    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    172e:	62 e1       	ldi	r22, 0x12	; 18
    1730:	ce 01       	movw	r24, r28
    1732:	b2 df       	rcall	.-156    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1734:	61 e8       	ldi	r22, 0x81	; 129
    1736:	ce 01       	movw	r24, r28
    1738:	af df       	rcall	.-162    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    173a:	6f ec       	ldi	r22, 0xCF	; 207
    173c:	ce 01       	movw	r24, r28
    173e:	ac df       	rcall	.-168    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1740:	69 ed       	ldi	r22, 0xD9	; 217
    1742:	ce 01       	movw	r24, r28
    1744:	a9 df       	rcall	.-174    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1746:	61 ef       	ldi	r22, 0xF1	; 241
    1748:	ce 01       	movw	r24, r28
    174a:	a6 df       	rcall	.-180    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    174c:	6b ed       	ldi	r22, 0xDB	; 219
    174e:	ce 01       	movw	r24, r28
    1750:	a3 df       	rcall	.-186    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1752:	60 e4       	ldi	r22, 0x40	; 64
    1754:	ce 01       	movw	r24, r28
    1756:	a0 df       	rcall	.-192    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1758:	64 ea       	ldi	r22, 0xA4	; 164
    175a:	ce 01       	movw	r24, r28
    175c:	9d df       	rcall	.-198    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    175e:	66 ea       	ldi	r22, 0xA6	; 166
    1760:	ce 01       	movw	r24, r28
    1762:	9a df       	rcall	.-204    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    1764:	6f ea       	ldi	r22, 0xAF	; 175
    1766:	ce 01       	movw	r24, r28
    1768:	97 df       	rcall	.-210    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <_ZN7DisplayC1Ev>:
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	ec 01       	movw	r28, r24
    1776:	9c 5f       	subi	r25, 0xFC	; 252
    1778:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <_ZN3I2CC1Ev>
    177c:	ce 01       	movw	r24, r28
    177e:	a8 df       	rcall	.-176    	; 0x16d0 <_ZN7Display17InitializeDisplayEv>
    1780:	ce 01       	movw	r24, r28
    1782:	83 df       	rcall	.-250    	; 0x168a <_ZN7Display10clearFrameEv>
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <_ZN7Display9sendFrameEv>:
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	ec 01       	movw	r28, r24
    1798:	61 e2       	ldi	r22, 0x21	; 33
    179a:	7e df       	rcall	.-260    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	ce 01       	movw	r24, r28
    17a0:	7b df       	rcall	.-266    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    17a2:	6f e7       	ldi	r22, 0x7F	; 127
    17a4:	ce 01       	movw	r24, r28
    17a6:	78 df       	rcall	.-272    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    17a8:	62 e2       	ldi	r22, 0x22	; 34
    17aa:	ce 01       	movw	r24, r28
    17ac:	75 df       	rcall	.-278    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	ce 01       	movw	r24, r28
    17b2:	72 df       	rcall	.-284    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    17b4:	67 e0       	ldi	r22, 0x07	; 7
    17b6:	ce 01       	movw	r24, r28
    17b8:	6f df       	rcall	.-290    	; 0x1698 <_ZN7Display15ssd1306_commandEh>
    17ba:	8e 01       	movw	r16, r28
    17bc:	1c 5f       	subi	r17, 0xFC	; 252
    17be:	c8 01       	movw	r24, r16
    17c0:	0e 94 60 23 	call	0x46c0	; 0x46c0 <_ZN3I2C9twi_startEv>
    17c4:	68 e7       	ldi	r22, 0x78	; 120
    17c6:	c8 01       	movw	r24, r16
    17c8:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
    17cc:	60 e4       	ldi	r22, 0x40	; 64
    17ce:	c8 01       	movw	r24, r16
    17d0:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
    17d4:	78 01       	movw	r14, r16
    17d6:	69 91       	ld	r22, Y+
    17d8:	c8 01       	movw	r24, r16
    17da:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN3I2C9twi_writeEh>
    17de:	ce 15       	cp	r28, r14
    17e0:	df 05       	cpc	r29, r15
    17e2:	c9 f7       	brne	.-14     	; 0x17d6 <_ZN7Display9sendFrameEv+0x4c>
    17e4:	c8 01       	movw	r24, r16
    17e6:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN3I2C8twi_stopEv>
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	08 95       	ret

000017f8 <_ZN7Display9drawPixelEhhh>:
    17f8:	66 23       	and	r22, r22
    17fa:	ac f1       	brlt	.+106    	; 0x1866 <_ZN7Display9drawPixelEhhh+0x6e>
    17fc:	40 34       	cpi	r20, 0x40	; 64
    17fe:	98 f5       	brcc	.+102    	; 0x1866 <_ZN7Display9drawPixelEhhh+0x6e>
    1800:	21 11       	cpse	r18, r1
    1802:	19 c0       	rjmp	.+50     	; 0x1836 <_ZN7Display9drawPixelEhhh+0x3e>
    1804:	24 2f       	mov	r18, r20
    1806:	26 95       	lsr	r18
    1808:	26 95       	lsr	r18
    180a:	26 95       	lsr	r18
    180c:	50 e8       	ldi	r21, 0x80	; 128
    180e:	25 9f       	mul	r18, r21
    1810:	90 01       	movw	r18, r0
    1812:	11 24       	eor	r1, r1
    1814:	26 0f       	add	r18, r22
    1816:	31 1d       	adc	r19, r1
    1818:	fc 01       	movw	r30, r24
    181a:	e2 0f       	add	r30, r18
    181c:	f3 1f       	adc	r31, r19
    181e:	47 70       	andi	r20, 0x07	; 7
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <_ZN7Display9drawPixelEhhh+0x32>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	4a 95       	dec	r20
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <_ZN7Display9drawPixelEhhh+0x2e>
    182e:	90 81       	ld	r25, Z
    1830:	89 2b       	or	r24, r25
    1832:	80 83       	st	Z, r24
    1834:	08 95       	ret
    1836:	24 2f       	mov	r18, r20
    1838:	26 95       	lsr	r18
    183a:	26 95       	lsr	r18
    183c:	26 95       	lsr	r18
    183e:	30 e8       	ldi	r19, 0x80	; 128
    1840:	23 9f       	mul	r18, r19
    1842:	f0 01       	movw	r30, r0
    1844:	11 24       	eor	r1, r1
    1846:	e6 0f       	add	r30, r22
    1848:	f1 1d       	adc	r31, r1
    184a:	e8 0f       	add	r30, r24
    184c:	f9 1f       	adc	r31, r25
    184e:	47 70       	andi	r20, 0x07	; 7
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <_ZN7Display9drawPixelEhhh+0x62>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	4a 95       	dec	r20
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <_ZN7Display9drawPixelEhhh+0x5e>
    185e:	80 95       	com	r24
    1860:	90 81       	ld	r25, Z
    1862:	89 23       	and	r24, r25
    1864:	80 83       	st	Z, r24
    1866:	08 95       	ret

00001868 <_ZN7Display9drawVLineEhhh>:
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	22 23       	and	r18, r18
    1874:	69 f0       	breq	.+26     	; 0x1890 <_ZN7Display9drawVLineEhhh+0x28>
    1876:	c4 2f       	mov	r28, r20
    1878:	f6 2e       	mov	r15, r22
    187a:	8c 01       	movw	r16, r24
    187c:	d2 2f       	mov	r29, r18
    187e:	d4 0f       	add	r29, r20
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	4c 2f       	mov	r20, r28
    1884:	6f 2d       	mov	r22, r15
    1886:	c8 01       	movw	r24, r16
    1888:	b7 df       	rcall	.-146    	; 0x17f8 <_ZN7Display9drawPixelEhhh>
    188a:	cf 5f       	subi	r28, 0xFF	; 255
    188c:	cd 13       	cpse	r28, r29
    188e:	f8 cf       	rjmp	.-16     	; 0x1880 <_ZN7Display9drawVLineEhhh+0x18>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	08 95       	ret

0000189c <_ZN7Display9drawHLineEhhh>:
    189c:	ff 92       	push	r15
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	22 23       	and	r18, r18
    18a8:	69 f0       	breq	.+26     	; 0x18c4 <_ZN7Display9drawHLineEhhh+0x28>
    18aa:	f4 2e       	mov	r15, r20
    18ac:	c6 2f       	mov	r28, r22
    18ae:	8c 01       	movw	r16, r24
    18b0:	d2 2f       	mov	r29, r18
    18b2:	d6 0f       	add	r29, r22
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	4f 2d       	mov	r20, r15
    18b8:	6c 2f       	mov	r22, r28
    18ba:	c8 01       	movw	r24, r16
    18bc:	9d df       	rcall	.-198    	; 0x17f8 <_ZN7Display9drawPixelEhhh>
    18be:	cf 5f       	subi	r28, 0xFF	; 255
    18c0:	cd 13       	cpse	r28, r29
    18c2:	f8 cf       	rjmp	.-16     	; 0x18b4 <_ZN7Display9drawHLineEhhh+0x18>
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	08 95       	ret

000018d0 <_ZN7Display9draw_ASCIEhhh>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	61 32       	cpi	r22, 0x21	; 33
    18da:	08 f4       	brcc	.+2      	; 0x18de <_ZN7Display9draw_ASCIEhhh+0xe>
    18dc:	3e c0       	rjmp	.+124    	; 0x195a <_ZN7Display9draw_ASCIEhhh+0x8a>
    18de:	a4 2f       	mov	r26, r20
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	02 2f       	mov	r16, r18
    18e4:	06 95       	lsr	r16
    18e6:	06 95       	lsr	r16
    18e8:	06 95       	lsr	r16
    18ea:	30 e8       	ldi	r19, 0x80	; 128
    18ec:	03 9f       	mul	r16, r19
    18ee:	80 01       	movw	r16, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	61 52       	subi	r22, 0x21	; 33
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	fb 01       	movw	r30, r22
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	e6 0f       	add	r30, r22
    1902:	f7 1f       	adc	r31, r23
    1904:	ea 52       	subi	r30, 0x2A	; 42
    1906:	fc 4f       	sbci	r31, 0xFC	; 252
    1908:	ad 01       	movw	r20, r26
    190a:	40 0f       	add	r20, r16
    190c:	51 1f       	adc	r21, r17
    190e:	ec 01       	movw	r28, r24
    1910:	c4 0f       	add	r28, r20
    1912:	d5 1f       	adc	r29, r21
    1914:	00 58       	subi	r16, 0x80	; 128
    1916:	1f 4f       	sbci	r17, 0xFF	; 255
    1918:	a0 0f       	add	r26, r16
    191a:	b1 1f       	adc	r27, r17
    191c:	a8 0f       	add	r26, r24
    191e:	b9 1f       	adc	r27, r25
    1920:	4b 5f       	subi	r20, 0xFB	; 251
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	48 0f       	add	r20, r24
    1926:	59 1f       	adc	r21, r25
    1928:	27 70       	andi	r18, 0x07	; 7
    192a:	64 91       	lpm	r22, Z
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <_ZN7Display9draw_ASCIEhhh+0x66>
    1932:	66 0f       	add	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <_ZN7Display9draw_ASCIEhhh+0x62>
    193a:	98 81       	ld	r25, Y
    193c:	96 2b       	or	r25, r22
    193e:	99 93       	st	Y+, r25
    1940:	67 2f       	mov	r22, r23
    1942:	77 27       	eor	r23, r23
    1944:	61 15       	cp	r22, r1
    1946:	71 05       	cpc	r23, r1
    1948:	19 f0       	breq	.+6      	; 0x1950 <_ZN7Display9draw_ASCIEhhh+0x80>
    194a:	8c 91       	ld	r24, X
    194c:	68 2b       	or	r22, r24
    194e:	6c 93       	st	X, r22
    1950:	31 96       	adiw	r30, 0x01	; 1
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	c4 17       	cp	r28, r20
    1956:	d5 07       	cpc	r29, r21
    1958:	41 f7       	brne	.-48     	; 0x192a <_ZN7Display9draw_ASCIEhhh+0x5a>
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <_ZN7Display16draw_number16x16Ehhh>:
    1964:	cf 92       	push	r12
    1966:	df 92       	push	r13
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	6a 30       	cpi	r22, 0x0A	; 10
    1976:	08 f0       	brcs	.+2      	; 0x197a <_ZN7Display16draw_number16x16Ehhh+0x16>
    1978:	66 c0       	rjmp	.+204    	; 0x1a46 <_ZN7Display16draw_number16x16Ehhh+0xe2>
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	02 2f       	mov	r16, r18
    197e:	06 95       	lsr	r16
    1980:	06 95       	lsr	r16
    1982:	06 95       	lsr	r16
    1984:	10 e0       	ldi	r17, 0x00	; 0
    1986:	d8 01       	movw	r26, r16
    1988:	b6 95       	lsr	r27
    198a:	ba 2f       	mov	r27, r26
    198c:	aa 27       	eor	r26, r26
    198e:	b7 95       	ror	r27
    1990:	a7 95       	ror	r26
    1992:	0f 5f       	subi	r16, 0xFF	; 255
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	16 95       	lsr	r17
    1998:	10 2f       	mov	r17, r16
    199a:	00 27       	eor	r16, r16
    199c:	17 95       	ror	r17
    199e:	07 95       	ror	r16
    19a0:	7d 01       	movw	r14, r26
    19a2:	30 e8       	ldi	r19, 0x80	; 128
    19a4:	e3 0e       	add	r14, r19
    19a6:	f1 1c       	adc	r15, r1
    19a8:	e4 0e       	add	r14, r20
    19aa:	f5 1e       	adc	r15, r21
    19ac:	e8 0e       	add	r14, r24
    19ae:	f9 1e       	adc	r15, r25
    19b0:	ea 01       	movw	r28, r20
    19b2:	c0 0f       	add	r28, r16
    19b4:	d1 1f       	adc	r29, r17
    19b6:	60 97       	sbiw	r28, 0x10	; 16
    19b8:	c8 0f       	add	r28, r24
    19ba:	d9 1f       	adc	r29, r25
    19bc:	04 0f       	add	r16, r20
    19be:	15 1f       	adc	r17, r21
    19c0:	00 59       	subi	r16, 0x90	; 144
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	08 0f       	add	r16, r24
    19c6:	19 1f       	adc	r17, r25
    19c8:	a4 0f       	add	r26, r20
    19ca:	b5 1f       	adc	r27, r21
    19cc:	a8 0f       	add	r26, r24
    19ce:	b9 1f       	adc	r27, r25
    19d0:	80 e2       	ldi	r24, 0x20	; 32
    19d2:	68 9f       	mul	r22, r24
    19d4:	b0 01       	movw	r22, r0
    19d6:	11 24       	eor	r1, r1
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	27 70       	andi	r18, 0x07	; 7
    19de:	fa 01       	movw	r30, r20
    19e0:	e6 0f       	add	r30, r22
    19e2:	f7 1f       	adc	r31, r23
    19e4:	ea 56       	subi	r30, 0x6A	; 106
    19e6:	fd 4f       	sbci	r31, 0xFD	; 253
    19e8:	e4 91       	lpm	r30, Z
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <_ZN7Display16draw_number16x16Ehhh+0x90>
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <_ZN7Display16draw_number16x16Ehhh+0x8c>
    19f8:	40 31       	cpi	r20, 0x10	; 16
    19fa:	68 f4       	brcc	.+26     	; 0x1a16 <_ZN7Display16draw_number16x16Ehhh+0xb2>
    19fc:	8c 91       	ld	r24, X
    19fe:	8e 2b       	or	r24, r30
    1a00:	8c 93       	st	X, r24
    1a02:	cf 2e       	mov	r12, r31
    1a04:	dd 24       	eor	r13, r13
    1a06:	c1 14       	cp	r12, r1
    1a08:	d1 04       	cpc	r13, r1
    1a0a:	89 f0       	breq	.+34     	; 0x1a2e <_ZN7Display16draw_number16x16Ehhh+0xca>
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	80 81       	ld	r24, Z
    1a10:	8c 29       	or	r24, r12
    1a12:	80 83       	st	Z, r24
    1a14:	0c c0       	rjmp	.+24     	; 0x1a2e <_ZN7Display16draw_number16x16Ehhh+0xca>
    1a16:	88 81       	ld	r24, Y
    1a18:	8e 2b       	or	r24, r30
    1a1a:	88 83       	st	Y, r24
    1a1c:	cf 2e       	mov	r12, r31
    1a1e:	dd 24       	eor	r13, r13
    1a20:	c1 14       	cp	r12, r1
    1a22:	d1 04       	cpc	r13, r1
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <_ZN7Display16draw_number16x16Ehhh+0xca>
    1a26:	f8 01       	movw	r30, r16
    1a28:	80 81       	ld	r24, Z
    1a2a:	8c 29       	or	r24, r12
    1a2c:	80 83       	st	Z, r24
    1a2e:	4f 5f       	subi	r20, 0xFF	; 255
    1a30:	5f 4f       	sbci	r21, 0xFF	; 255
    1a32:	ff ef       	ldi	r31, 0xFF	; 255
    1a34:	ef 1a       	sub	r14, r31
    1a36:	ff 0a       	sbc	r15, r31
    1a38:	21 96       	adiw	r28, 0x01	; 1
    1a3a:	0f 5f       	subi	r16, 0xFF	; 255
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	11 96       	adiw	r26, 0x01	; 1
    1a40:	40 32       	cpi	r20, 0x20	; 32
    1a42:	51 05       	cpc	r21, r1
    1a44:	61 f6       	brne	.-104    	; 0x19de <_ZN7Display16draw_number16x16Ehhh+0x7a>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	08 95       	ret

00001a58 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1a58:	2f 92       	push	r2
    1a5a:	3f 92       	push	r3
    1a5c:	4f 92       	push	r4
    1a5e:	5f 92       	push	r5
    1a60:	6f 92       	push	r6
    1a62:	7f 92       	push	r7
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	27 97       	sbiw	r28, 0x07	; 7
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	9f 83       	std	Y+7, r25	; 0x07
    1a8e:	8e 83       	std	Y+6, r24	; 0x06
    1a90:	6d 83       	std	Y+5, r22	; 0x05
    1a92:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    1a94:	00 23       	and	r16, r16
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <_ZN7Display6analogEhhhh+0x42>
    1a98:	26 c1       	rjmp	.+588    	; 0x1ce6 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    1a9a:	62 2f       	mov	r22, r18
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 ec       	ldi	r20, 0xC0	; 192
    1aac:	50 e4       	ldi	r21, 0x40	; 64
    1aae:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1ab2:	2b ed       	ldi	r18, 0xDB	; 219
    1ab4:	3f e0       	ldi	r19, 0x0F	; 15
    1ab6:	49 e4       	ldi	r20, 0x49	; 73
    1ab8:	50 e4       	ldi	r21, 0x40	; 64
    1aba:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	44 e3       	ldi	r20, 0x34	; 52
    1ac4:	53 e4       	ldi	r21, 0x43	; 67
    1ac6:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    1aca:	2b ed       	ldi	r18, 0xDB	; 219
    1acc:	3f e0       	ldi	r19, 0x0F	; 15
    1ace:	49 ec       	ldi	r20, 0xC9	; 201
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__subsf3>
    1ad6:	6b 01       	movw	r12, r22
    1ad8:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1ada:	0e 94 73 3f 	call	0x7ee6	; 0x7ee6 <cos>
    1ade:	4b 01       	movw	r8, r22
    1ae0:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	0e 94 d9 41 	call	0x83b2	; 0x83b2 <sin>
    1aea:	2b 01       	movw	r4, r22
    1aec:	3c 01       	movw	r6, r24
    1aee:	00 e0       	ldi	r16, 0x00	; 0
    1af0:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1af2:	b8 01       	movw	r22, r16
    1af4:	01 2e       	mov	r0, r17
    1af6:	00 0c       	add	r0, r0
    1af8:	88 0b       	sbc	r24, r24
    1afa:	99 0b       	sbc	r25, r25
    1afc:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1b00:	6b 01       	movw	r12, r22
    1b02:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1b04:	a3 01       	movw	r20, r6
    1b06:	92 01       	movw	r18, r4
    1b08:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	48 ef       	ldi	r20, 0xF8	; 248
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1b18:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    1b1c:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1b1e:	a5 01       	movw	r20, r10
    1b20:	94 01       	movw	r18, r8
    1b22:	c7 01       	movw	r24, r14
    1b24:	b6 01       	movw	r22, r12
    1b26:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	48 ef       	ldi	r20, 0xF8	; 248
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1b36:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	42 2d       	mov	r20, r2
    1b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b40:	9f 81       	ldd	r25, Y+7	; 0x07
    1b42:	5a de       	rcall	.-844    	; 0x17f8 <_ZN7Display9drawPixelEhhh>
    1b44:	0f 5f       	subi	r16, 0xFF	; 255
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1b48:	09 31       	cpi	r16, 0x19	; 25
    1b4a:	11 05       	cpc	r17, r1
    1b4c:	91 f6       	brne	.-92     	; 0x1af2 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1b4e:	63 2d       	mov	r22, r3
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1b5a:	69 83       	std	Y+1, r22	; 0x01
    1b5c:	7a 83       	std	Y+2, r23	; 0x02
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 ec       	ldi	r20, 0xC0	; 192
    1b68:	50 e4       	ldi	r21, 0x40	; 64
    1b6a:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1b6e:	2b ed       	ldi	r18, 0xDB	; 219
    1b70:	3f e0       	ldi	r19, 0x0F	; 15
    1b72:	49 e4       	ldi	r20, 0x49	; 73
    1b74:	50 e4       	ldi	r21, 0x40	; 64
    1b76:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	44 e3       	ldi	r20, 0x34	; 52
    1b80:	53 e4       	ldi	r21, 0x43	; 67
    1b82:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    1b86:	2b ed       	ldi	r18, 0xDB	; 219
    1b88:	3f e0       	ldi	r19, 0x0F	; 15
    1b8a:	49 ec       	ldi	r20, 0xC9	; 201
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__subsf3>
    1b92:	6b 01       	movw	r12, r22
    1b94:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1b96:	0e 94 73 3f 	call	0x7ee6	; 0x7ee6 <cos>
    1b9a:	2b 01       	movw	r4, r22
    1b9c:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1b9e:	c7 01       	movw	r24, r14
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	0e 94 d9 41 	call	0x83b2	; 0x83b2 <sin>
    1ba6:	4b 01       	movw	r8, r22
    1ba8:	5c 01       	movw	r10, r24
    1baa:	00 e0       	ldi	r16, 0x00	; 0
    1bac:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1bae:	b8 01       	movw	r22, r16
    1bb0:	01 2e       	mov	r0, r17
    1bb2:	00 0c       	add	r0, r0
    1bb4:	88 0b       	sbc	r24, r24
    1bb6:	99 0b       	sbc	r25, r25
    1bb8:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1bbc:	6b 01       	movw	r12, r22
    1bbe:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1bc0:	a5 01       	movw	r20, r10
    1bc2:	94 01       	movw	r18, r8
    1bc4:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	48 ef       	ldi	r20, 0xF8	; 248
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1bd4:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    1bd8:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1bda:	a3 01       	movw	r20, r6
    1bdc:	92 01       	movw	r18, r4
    1bde:	c7 01       	movw	r24, r14
    1be0:	b6 01       	movw	r22, r12
    1be2:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	48 ef       	ldi	r20, 0xF8	; 248
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1bf2:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	43 2d       	mov	r20, r3
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfe:	fc dd       	rcall	.-1032   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
    1c00:	0f 5f       	subi	r16, 0xFF	; 255
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1c04:	05 31       	cpi	r16, 0x15	; 21
    1c06:	11 05       	cpc	r17, r1
    1c08:	91 f6       	brne	.-92     	; 0x1bae <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1c0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c0c:	62 2f       	mov	r22, r18
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 ef       	ldi	r20, 0xF0	; 240
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1c24:	6b 01       	movw	r12, r22
    1c26:	7c 01       	movw	r14, r24
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e0       	ldi	r20, 0x00	; 0
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	69 81       	ldd	r22, Y+1	; 0x01
    1c32:	7a 81       	ldd	r23, Y+2	; 0x02
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	ac 01       	movw	r20, r24
    1c40:	c7 01       	movw	r24, r14
    1c42:	b6 01       	movw	r22, r12
    1c44:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1c48:	2b ed       	ldi	r18, 0xDB	; 219
    1c4a:	3f e0       	ldi	r19, 0x0F	; 15
    1c4c:	49 e4       	ldi	r20, 0x49	; 73
    1c4e:	50 e4       	ldi	r21, 0x40	; 64
    1c50:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	44 e3       	ldi	r20, 0x34	; 52
    1c5a:	53 e4       	ldi	r21, 0x43	; 67
    1c5c:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    1c60:	2b ed       	ldi	r18, 0xDB	; 219
    1c62:	3f e0       	ldi	r19, 0x0F	; 15
    1c64:	49 ec       	ldi	r20, 0xC9	; 201
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__subsf3>
    1c6c:	6b 01       	movw	r12, r22
    1c6e:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1c70:	0e 94 73 3f 	call	0x7ee6	; 0x7ee6 <cos>
    1c74:	4b 01       	movw	r8, r22
    1c76:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1c78:	c7 01       	movw	r24, r14
    1c7a:	b6 01       	movw	r22, r12
    1c7c:	0e 94 d9 41 	call	0x83b2	; 0x83b2 <sin>
    1c80:	2b 01       	movw	r4, r22
    1c82:	3c 01       	movw	r6, r24
    1c84:	00 e0       	ldi	r16, 0x00	; 0
    1c86:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1c88:	b8 01       	movw	r22, r16
    1c8a:	01 2e       	mov	r0, r17
    1c8c:	00 0c       	add	r0, r0
    1c8e:	88 0b       	sbc	r24, r24
    1c90:	99 0b       	sbc	r25, r25
    1c92:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1c96:	6b 01       	movw	r12, r22
    1c98:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1c9a:	a3 01       	movw	r20, r6
    1c9c:	92 01       	movw	r18, r4
    1c9e:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	48 ef       	ldi	r20, 0xF8	; 248
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1cae:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    1cb2:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1cb4:	a5 01       	movw	r20, r10
    1cb6:	94 01       	movw	r18, r8
    1cb8:	c7 01       	movw	r24, r14
    1cba:	b6 01       	movw	r22, r12
    1cbc:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	48 ef       	ldi	r20, 0xF8	; 248
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1ccc:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	43 2d       	mov	r20, r3
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd8:	8f dd       	rcall	.-1250   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
    1cda:	0f 5f       	subi	r16, 0xFF	; 255
    1cdc:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1cde:	0d 30       	cpi	r16, 0x0D	; 13
    1ce0:	11 05       	cpc	r17, r1
    1ce2:	91 f6       	brne	.-92     	; 0x1c88 <_ZN7Display6analogEhhhh+0x230>
    1ce4:	cb c0       	rjmp	.+406    	; 0x1e7c <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1ce6:	64 2f       	mov	r22, r20
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1cf2:	69 83       	std	Y+1, r22	; 0x01
    1cf4:	7a 83       	std	Y+2, r23	; 0x02
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	9c 83       	std	Y+4, r25	; 0x04
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 ec       	ldi	r20, 0xC0	; 192
    1d00:	50 e4       	ldi	r21, 0x40	; 64
    1d02:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1d06:	2b ed       	ldi	r18, 0xDB	; 219
    1d08:	3f e0       	ldi	r19, 0x0F	; 15
    1d0a:	49 e4       	ldi	r20, 0x49	; 73
    1d0c:	50 e4       	ldi	r21, 0x40	; 64
    1d0e:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	44 e3       	ldi	r20, 0x34	; 52
    1d18:	53 e4       	ldi	r21, 0x43	; 67
    1d1a:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    1d1e:	2b ed       	ldi	r18, 0xDB	; 219
    1d20:	3f e0       	ldi	r19, 0x0F	; 15
    1d22:	49 ec       	ldi	r20, 0xC9	; 201
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__subsf3>
    1d2a:	6b 01       	movw	r12, r22
    1d2c:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1d2e:	0e 94 73 3f 	call	0x7ee6	; 0x7ee6 <cos>
    1d32:	2b 01       	movw	r4, r22
    1d34:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1d36:	c7 01       	movw	r24, r14
    1d38:	b6 01       	movw	r22, r12
    1d3a:	0e 94 d9 41 	call	0x83b2	; 0x83b2 <sin>
    1d3e:	4b 01       	movw	r8, r22
    1d40:	5c 01       	movw	r10, r24
    1d42:	00 e0       	ldi	r16, 0x00	; 0
    1d44:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1d46:	b8 01       	movw	r22, r16
    1d48:	01 2e       	mov	r0, r17
    1d4a:	00 0c       	add	r0, r0
    1d4c:	88 0b       	sbc	r24, r24
    1d4e:	99 0b       	sbc	r25, r25
    1d50:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1d54:	6b 01       	movw	r12, r22
    1d56:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1d58:	a5 01       	movw	r20, r10
    1d5a:	94 01       	movw	r18, r8
    1d5c:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	48 ef       	ldi	r20, 0xF8	; 248
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1d6c:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    1d70:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1d72:	a3 01       	movw	r20, r6
    1d74:	92 01       	movw	r18, r4
    1d76:	c7 01       	movw	r24, r14
    1d78:	b6 01       	movw	r22, r12
    1d7a:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	48 ef       	ldi	r20, 0xF8	; 248
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1d8a:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	43 2d       	mov	r20, r3
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	9f 81       	ldd	r25, Y+7	; 0x07
    1d96:	30 dd       	rcall	.-1440   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
    1d98:	0f 5f       	subi	r16, 0xFF	; 255
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1d9c:	09 31       	cpi	r16, 0x19	; 25
    1d9e:	11 05       	cpc	r17, r1
    1da0:	91 f6       	brne	.-92     	; 0x1d46 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1da2:	ed 81       	ldd	r30, Y+5	; 0x05
    1da4:	6e 2f       	mov	r22, r30
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 ef       	ldi	r20, 0xF0	; 240
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1dbc:	6b 01       	movw	r12, r22
    1dbe:	7c 01       	movw	r14, r24
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	69 81       	ldd	r22, Y+1	; 0x01
    1dca:	7a 81       	ldd	r23, Y+2	; 0x02
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1dd4:	9b 01       	movw	r18, r22
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	c7 01       	movw	r24, r14
    1dda:	b6 01       	movw	r22, r12
    1ddc:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1de0:	2b ed       	ldi	r18, 0xDB	; 219
    1de2:	3f e0       	ldi	r19, 0x0F	; 15
    1de4:	49 e4       	ldi	r20, 0x49	; 73
    1de6:	50 e4       	ldi	r21, 0x40	; 64
    1de8:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	44 e3       	ldi	r20, 0x34	; 52
    1df2:	53 e4       	ldi	r21, 0x43	; 67
    1df4:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    1df8:	2b ed       	ldi	r18, 0xDB	; 219
    1dfa:	3f e0       	ldi	r19, 0x0F	; 15
    1dfc:	49 ec       	ldi	r20, 0xC9	; 201
    1dfe:	5f e3       	ldi	r21, 0x3F	; 63
    1e00:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__subsf3>
    1e04:	6b 01       	movw	r12, r22
    1e06:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1e08:	0e 94 73 3f 	call	0x7ee6	; 0x7ee6 <cos>
    1e0c:	4b 01       	movw	r8, r22
    1e0e:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1e10:	c7 01       	movw	r24, r14
    1e12:	b6 01       	movw	r22, r12
    1e14:	0e 94 d9 41 	call	0x83b2	; 0x83b2 <sin>
    1e18:	2b 01       	movw	r4, r22
    1e1a:	3c 01       	movw	r6, r24
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1e20:	b8 01       	movw	r22, r16
    1e22:	01 2e       	mov	r0, r17
    1e24:	00 0c       	add	r0, r0
    1e26:	88 0b       	sbc	r24, r24
    1e28:	99 0b       	sbc	r25, r25
    1e2a:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    1e2e:	6b 01       	movw	r12, r22
    1e30:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1e32:	a3 01       	movw	r20, r6
    1e34:	92 01       	movw	r18, r4
    1e36:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	48 ef       	ldi	r20, 0xF8	; 248
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1e46:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    1e4a:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1e4c:	a5 01       	movw	r20, r10
    1e4e:	94 01       	movw	r18, r8
    1e50:	c7 01       	movw	r24, r14
    1e52:	b6 01       	movw	r22, r12
    1e54:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	48 ef       	ldi	r20, 0xF8	; 248
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    1e64:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	43 2d       	mov	r20, r3
    1e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e70:	c3 dc       	rcall	.-1658   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
    1e72:	0f 5f       	subi	r16, 0xFF	; 255
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1e76:	01 31       	cpi	r16, 0x11	; 17
    1e78:	11 05       	cpc	r17, r1
    1e7a:	91 f6       	brne	.-92     	; 0x1e20 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	4a e1       	ldi	r20, 0x1A	; 26
    1e80:	61 e3       	ldi	r22, 0x31	; 49
    1e82:	8e 81       	ldd	r24, Y+6	; 0x06
    1e84:	9f 81       	ldd	r25, Y+7	; 0x07
    1e86:	24 dd       	rcall	.-1464   	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	62 e3       	ldi	r22, 0x32	; 50
    1e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e90:	9f 81       	ldd	r25, Y+7	; 0x07
    1e92:	1e dd       	rcall	.-1476   	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    1e94:	2c e1       	ldi	r18, 0x1C	; 28
    1e96:	4a e3       	ldi	r20, 0x3A	; 58
    1e98:	63 e3       	ldi	r22, 0x33	; 51
    1e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9e:	18 dd       	rcall	.-1488   	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1ea0:	28 e3       	ldi	r18, 0x38	; 56
    1ea2:	4d e1       	ldi	r20, 0x1D	; 29
    1ea4:	66 e3       	ldi	r22, 0x36	; 54
    1ea6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eaa:	12 dd       	rcall	.-1500   	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    1eac:	2c e1       	ldi	r18, 0x1C	; 28
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	69 e3       	ldi	r22, 0x39	; 57
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb6:	0c dd       	rcall	.-1512   	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	48 e0       	ldi	r20, 0x08	; 8
    1ebc:	6c e2       	ldi	r22, 0x2C	; 44
    1ebe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec2:	9a dc       	rcall	.-1740   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	42 e1       	ldi	r20, 0x12	; 18
    1ec8:	65 e3       	ldi	r22, 0x35	; 53
    1eca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ece:	94 dc       	rcall	.-1752   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	4c e2       	ldi	r20, 0x2C	; 44
    1ed4:	65 e3       	ldi	r22, 0x35	; 53
    1ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eda:	8e dc       	rcall	.-1764   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	45 e3       	ldi	r20, 0x35	; 53
    1ee0:	6b e2       	ldi	r22, 0x2B	; 43
    1ee2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee6:	88 dc       	rcall	.-1776   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	45 e3       	ldi	r20, 0x35	; 53
    1eec:	61 e1       	ldi	r22, 0x11	; 17
    1eee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef2:	82 dc       	rcall	.-1788   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	4c e2       	ldi	r20, 0x2C	; 44
    1ef8:	68 e0       	ldi	r22, 0x08	; 8
    1efa:	8e 81       	ldd	r24, Y+6	; 0x06
    1efc:	9f 81       	ldd	r25, Y+7	; 0x07
    1efe:	7c dc       	rcall	.-1800   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	41 e1       	ldi	r20, 0x11	; 17
    1f04:	68 e0       	ldi	r22, 0x08	; 8
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0a:	76 dc       	rcall	.-1812   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	48 e0       	ldi	r20, 0x08	; 8
    1f10:	62 e1       	ldi	r22, 0x12	; 18
    1f12:	8e 81       	ldd	r24, Y+6	; 0x06
    1f14:	9f 81       	ldd	r25, Y+7	; 0x07
    1f16:	70 dc       	rcall	.-1824   	; 0x17f8 <_ZN7Display9drawPixelEhhh>
}
    1f18:	27 96       	adiw	r28, 0x07	; 7
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	7f 90       	pop	r7
    1f3e:	6f 90       	pop	r6
    1f40:	5f 90       	pop	r5
    1f42:	4f 90       	pop	r4
    1f44:	3f 90       	pop	r3
    1f46:	2f 90       	pop	r2
    1f48:	08 95       	ret

00001f4a <mem_cpy>:

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    1f4a:	41 15       	cp	r20, r1
    1f4c:	51 05       	cpc	r21, r1
    1f4e:	51 f0       	breq	.+20     	; 0x1f64 <mem_cpy+0x1a>
    1f50:	a6 2f       	mov	r26, r22
    1f52:	b7 2f       	mov	r27, r23
    1f54:	fc 01       	movw	r30, r24
    1f56:	48 0f       	add	r20, r24
    1f58:	59 1f       	adc	r21, r25
    1f5a:	9d 91       	ld	r25, X+
    1f5c:	91 93       	st	Z+, r25
    1f5e:	e4 17       	cp	r30, r20
    1f60:	f5 07       	cpc	r31, r21
    1f62:	d9 f7       	brne	.-10     	; 0x1f5a <mem_cpy+0x10>
    1f64:	08 95       	ret

00001f66 <ld_clust>:
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	fb 01       	movw	r30, r22
    1f6e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f70:	69 2f       	mov	r22, r25
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	76 2f       	mov	r23, r22
    1f76:	66 27       	eor	r22, r22
    1f78:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f7a:	68 2b       	or	r22, r24
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	2c 91       	ld	r18, X
    1f82:	23 30       	cpi	r18, 0x03	; 3
    1f84:	79 f4       	brne	.+30     	; 0x1fa4 <ld_clust+0x3e>
    1f86:	05 89       	ldd	r16, Z+21	; 0x15
    1f88:	10 e0       	ldi	r17, 0x00	; 0
    1f8a:	10 2f       	mov	r17, r16
    1f8c:	00 27       	eor	r16, r16
    1f8e:	24 89       	ldd	r18, Z+20	; 0x14
    1f90:	02 2b       	or	r16, r18
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	98 01       	movw	r18, r16
    1f98:	11 27       	eor	r17, r17
    1f9a:	00 27       	eor	r16, r16
    1f9c:	60 2b       	or	r22, r16
    1f9e:	71 2b       	or	r23, r17
    1fa0:	82 2b       	or	r24, r18
    1fa2:	93 2b       	or	r25, r19
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	08 95       	ret

00001faa <get_ldnumber>:
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	ec 01       	movw	r28, r24
    1fb0:	a8 81       	ld	r26, Y
    1fb2:	b9 81       	ldd	r27, Y+1	; 0x01
    1fb4:	10 97       	sbiw	r26, 0x00	; 0
    1fb6:	f9 f0       	breq	.+62     	; 0x1ff6 <get_ldnumber+0x4c>
    1fb8:	4c 91       	ld	r20, X
    1fba:	41 32       	cpi	r20, 0x21	; 33
    1fbc:	58 f0       	brcs	.+22     	; 0x1fd4 <get_ldnumber+0x2a>
    1fbe:	4a 33       	cpi	r20, 0x3A	; 58
    1fc0:	31 f1       	breq	.+76     	; 0x200e <get_ldnumber+0x64>
    1fc2:	fd 01       	movw	r30, r26
    1fc4:	31 96       	adiw	r30, 0x01	; 1
    1fc6:	9f 01       	movw	r18, r30
    1fc8:	91 91       	ld	r25, Z+
    1fca:	91 32       	cpi	r25, 0x21	; 33
    1fcc:	28 f0       	brcs	.+10     	; 0x1fd8 <get_ldnumber+0x2e>
    1fce:	9a 33       	cpi	r25, 0x3A	; 58
    1fd0:	d1 f7       	brne	.-12     	; 0x1fc6 <get_ldnumber+0x1c>
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <get_ldnumber+0x32>
    1fd4:	94 2f       	mov	r25, r20
    1fd6:	9d 01       	movw	r18, r26
    1fd8:	9a 33       	cpi	r25, 0x3A	; 58
    1fda:	81 f4       	brne	.+32     	; 0x1ffc <get_ldnumber+0x52>
    1fdc:	cd 01       	movw	r24, r26
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	28 17       	cp	r18, r24
    1fe2:	39 07       	cpc	r19, r25
    1fe4:	71 f4       	brne	.+28     	; 0x2002 <get_ldnumber+0x58>
    1fe6:	40 33       	cpi	r20, 0x30	; 48
    1fe8:	79 f4       	brne	.+30     	; 0x2008 <get_ldnumber+0x5e>
    1fea:	12 96       	adiw	r26, 0x02	; 2
    1fec:	b9 83       	std	Y+1, r27	; 0x01
    1fee:	a8 83       	st	Y, r26
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e c0       	rjmp	.+28     	; 0x2012 <get_ldnumber+0x68>
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	9f ef       	ldi	r25, 0xFF	; 255
    1ffa:	0b c0       	rjmp	.+22     	; 0x2012 <get_ldnumber+0x68>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	08 c0       	rjmp	.+16     	; 0x2012 <get_ldnumber+0x68>
    2002:	8f ef       	ldi	r24, 0xFF	; 255
    2004:	9f ef       	ldi	r25, 0xFF	; 255
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <get_ldnumber+0x68>
    2008:	8f ef       	ldi	r24, 0xFF	; 255
    200a:	9f ef       	ldi	r25, 0xFF	; 255
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <get_ldnumber+0x68>
    200e:	9d 01       	movw	r18, r26
    2010:	e5 cf       	rjmp	.-54     	; 0x1fdc <get_ldnumber+0x32>
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <sync_window>:
    2018:	8f 92       	push	r8
    201a:	9f 92       	push	r9
    201c:	af 92       	push	r10
    201e:	bf 92       	push	r11
    2020:	cf 92       	push	r12
    2022:	df 92       	push	r13
    2024:	ef 92       	push	r14
    2026:	ff 92       	push	r15
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	fc 01       	movw	r30, r24
    2032:	24 81       	ldd	r18, Z+4	; 0x04
    2034:	22 23       	and	r18, r18
    2036:	09 f4       	brne	.+2      	; 0x203a <sync_window+0x22>
    2038:	44 c0       	rjmp	.+136    	; 0x20c2 <sync_window+0xaa>
    203a:	ec 01       	movw	r28, r24
    203c:	c2 a4       	ldd	r12, Z+42	; 0x2a
    203e:	d3 a4       	ldd	r13, Z+43	; 0x2b
    2040:	e4 a4       	ldd	r14, Z+44	; 0x2c
    2042:	f5 a4       	ldd	r15, Z+45	; 0x2d
    2044:	5c 01       	movw	r10, r24
    2046:	fe e2       	ldi	r31, 0x2E	; 46
    2048:	af 0e       	add	r10, r31
    204a:	b1 1c       	adc	r11, r1
    204c:	01 e0       	ldi	r16, 0x01	; 1
    204e:	10 e0       	ldi	r17, 0x00	; 0
    2050:	a7 01       	movw	r20, r14
    2052:	96 01       	movw	r18, r12
    2054:	b5 01       	movw	r22, r10
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	f7 d8       	rcall	.-3602   	; 0x1248 <disk_write>
    205a:	81 11       	cpse	r24, r1
    205c:	34 c0       	rjmp	.+104    	; 0x20c6 <sync_window+0xae>
    205e:	1c 82       	std	Y+4, r1	; 0x04
    2060:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2062:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2064:	a8 a1       	ldd	r26, Y+32	; 0x20
    2066:	b9 a1       	ldd	r27, Y+33	; 0x21
    2068:	b7 01       	movw	r22, r14
    206a:	a6 01       	movw	r20, r12
    206c:	48 1b       	sub	r20, r24
    206e:	59 0b       	sbc	r21, r25
    2070:	6a 0b       	sbc	r22, r26
    2072:	7b 0b       	sbc	r23, r27
    2074:	8e 89       	ldd	r24, Y+22	; 0x16
    2076:	9f 89       	ldd	r25, Y+23	; 0x17
    2078:	a8 8d       	ldd	r26, Y+24	; 0x18
    207a:	b9 8d       	ldd	r27, Y+25	; 0x19
    207c:	48 17       	cp	r20, r24
    207e:	59 07       	cpc	r21, r25
    2080:	6a 07       	cpc	r22, r26
    2082:	7b 07       	cpc	r23, r27
    2084:	10 f5       	brcc	.+68     	; 0x20ca <sync_window+0xb2>
    2086:	8b 80       	ldd	r8, Y+3	; 0x03
    2088:	91 2c       	mov	r9, r1
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	88 16       	cp	r8, r24
    208e:	91 04       	cpc	r9, r1
    2090:	f0 f0       	brcs	.+60     	; 0x20ce <sync_window+0xb6>
    2092:	8e 89       	ldd	r24, Y+22	; 0x16
    2094:	9f 89       	ldd	r25, Y+23	; 0x17
    2096:	a8 8d       	ldd	r26, Y+24	; 0x18
    2098:	b9 8d       	ldd	r27, Y+25	; 0x19
    209a:	c8 0e       	add	r12, r24
    209c:	d9 1e       	adc	r13, r25
    209e:	ea 1e       	adc	r14, r26
    20a0:	fb 1e       	adc	r15, r27
    20a2:	01 e0       	ldi	r16, 0x01	; 1
    20a4:	10 e0       	ldi	r17, 0x00	; 0
    20a6:	a7 01       	movw	r20, r14
    20a8:	96 01       	movw	r18, r12
    20aa:	b5 01       	movw	r22, r10
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	cc d8       	rcall	.-3688   	; 0x1248 <disk_write>
    20b0:	e1 e0       	ldi	r30, 0x01	; 1
    20b2:	8e 1a       	sub	r8, r30
    20b4:	91 08       	sbc	r9, r1
    20b6:	f1 e0       	ldi	r31, 0x01	; 1
    20b8:	8f 16       	cp	r8, r31
    20ba:	91 04       	cpc	r9, r1
    20bc:	51 f7       	brne	.-44     	; 0x2092 <sync_window+0x7a>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <sync_window+0xb8>
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <sync_window+0xb8>
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <sync_window+0xb8>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <sync_window+0xb8>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
    20e0:	bf 90       	pop	r11
    20e2:	af 90       	pop	r10
    20e4:	9f 90       	pop	r9
    20e6:	8f 90       	pop	r8
    20e8:	08 95       	ret

000020ea <move_window>:
    20ea:	8f 92       	push	r8
    20ec:	9f 92       	push	r9
    20ee:	af 92       	push	r10
    20f0:	bf 92       	push	r11
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	ec 01       	movw	r28, r24
    20fe:	4a 01       	movw	r8, r20
    2100:	5b 01       	movw	r10, r22
    2102:	8a a5       	ldd	r24, Y+42	; 0x2a
    2104:	9b a5       	ldd	r25, Y+43	; 0x2b
    2106:	ac a5       	ldd	r26, Y+44	; 0x2c
    2108:	bd a5       	ldd	r27, Y+45	; 0x2d
    210a:	84 17       	cp	r24, r20
    210c:	95 07       	cpc	r25, r21
    210e:	a6 07       	cpc	r26, r22
    2110:	b7 07       	cpc	r27, r23
    2112:	d9 f0       	breq	.+54     	; 0x214a <move_window+0x60>
    2114:	ce 01       	movw	r24, r28
    2116:	80 df       	rcall	.-256    	; 0x2018 <sync_window>
    2118:	f8 2e       	mov	r15, r24
    211a:	81 11       	cpse	r24, r1
    211c:	17 c0       	rjmp	.+46     	; 0x214c <move_window+0x62>
    211e:	01 e0       	ldi	r16, 0x01	; 1
    2120:	10 e0       	ldi	r17, 0x00	; 0
    2122:	a5 01       	movw	r20, r10
    2124:	94 01       	movw	r18, r8
    2126:	be 01       	movw	r22, r28
    2128:	62 5d       	subi	r22, 0xD2	; 210
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	3a d8       	rcall	.-3980   	; 0x11a4 <disk_read>
    2130:	88 23       	and	r24, r24
    2132:	31 f0       	breq	.+12     	; 0x2140 <move_window+0x56>
    2134:	ff 24       	eor	r15, r15
    2136:	f3 94       	inc	r15
    2138:	88 24       	eor	r8, r8
    213a:	8a 94       	dec	r8
    213c:	98 2c       	mov	r9, r8
    213e:	54 01       	movw	r10, r8
    2140:	8a a6       	std	Y+42, r8	; 0x2a
    2142:	9b a6       	std	Y+43, r9	; 0x2b
    2144:	ac a6       	std	Y+44, r10	; 0x2c
    2146:	bd a6       	std	Y+45, r11	; 0x2d
    2148:	01 c0       	rjmp	.+2      	; 0x214c <move_window+0x62>
    214a:	f1 2c       	mov	r15, r1
    214c:	8f 2d       	mov	r24, r15
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	ff 90       	pop	r15
    2158:	bf 90       	pop	r11
    215a:	af 90       	pop	r10
    215c:	9f 90       	pop	r9
    215e:	8f 90       	pop	r8
    2160:	08 95       	ret

00002162 <check_fs>:
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	ec 01       	movw	r28, r24
    2168:	1c 82       	std	Y+4, r1	; 0x04
    216a:	8f ef       	ldi	r24, 0xFF	; 255
    216c:	9f ef       	ldi	r25, 0xFF	; 255
    216e:	dc 01       	movw	r26, r24
    2170:	8a a7       	std	Y+42, r24	; 0x2a
    2172:	9b a7       	std	Y+43, r25	; 0x2b
    2174:	ac a7       	std	Y+44, r26	; 0x2c
    2176:	bd a7       	std	Y+45, r27	; 0x2d
    2178:	ce 01       	movw	r24, r28
    217a:	b7 df       	rcall	.-146    	; 0x20ea <move_window>
    217c:	81 11       	cpse	r24, r1
    217e:	51 c0       	rjmp	.+162    	; 0x2222 <check_fs+0xc0>
    2180:	fe 01       	movw	r30, r28
    2182:	e3 5d       	subi	r30, 0xD3	; 211
    2184:	fd 4f       	sbci	r31, 0xFD	; 253
    2186:	80 81       	ld	r24, Z
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	98 2f       	mov	r25, r24
    218c:	88 27       	eor	r24, r24
    218e:	31 97       	sbiw	r30, 0x01	; 1
    2190:	20 81       	ld	r18, Z
    2192:	82 2b       	or	r24, r18
    2194:	85 35       	cpi	r24, 0x55	; 85
    2196:	9a 4a       	sbci	r25, 0xAA	; 170
    2198:	09 f0       	breq	.+2      	; 0x219c <check_fs+0x3a>
    219a:	45 c0       	rjmp	.+138    	; 0x2226 <check_fs+0xc4>
    219c:	e5 5c       	subi	r30, 0xC5	; 197
    219e:	f1 40       	sbci	r31, 0x01	; 1
    21a0:	20 81       	ld	r18, Z
    21a2:	31 97       	sbiw	r30, 0x01	; 1
    21a4:	80 81       	ld	r24, Z
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a0 e0       	ldi	r26, 0x00	; 0
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	dc 01       	movw	r26, r24
    21ae:	99 27       	eor	r25, r25
    21b0:	88 27       	eor	r24, r24
    21b2:	b2 2b       	or	r27, r18
    21b4:	32 97       	sbiw	r30, 0x02	; 2
    21b6:	20 81       	ld	r18, Z
    21b8:	82 2b       	or	r24, r18
    21ba:	31 96       	adiw	r30, 0x01	; 1
    21bc:	40 81       	ld	r20, Z
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	54 2f       	mov	r21, r20
    21c2:	44 27       	eor	r20, r20
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	84 2b       	or	r24, r20
    21ca:	95 2b       	or	r25, r21
    21cc:	a6 2b       	or	r26, r22
    21ce:	b7 2b       	or	r27, r23
    21d0:	bb 27       	eor	r27, r27
    21d2:	86 34       	cpi	r24, 0x46	; 70
    21d4:	91 44       	sbci	r25, 0x41	; 65
    21d6:	a4 45       	sbci	r26, 0x54	; 84
    21d8:	b1 05       	cpc	r27, r1
    21da:	39 f1       	breq	.+78     	; 0x222a <check_fs+0xc8>
    21dc:	7e 96       	adiw	r30, 0x1e	; 30
    21de:	80 81       	ld	r24, Z
    21e0:	31 97       	sbiw	r30, 0x01	; 1
    21e2:	40 81       	ld	r20, Z
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	ba 01       	movw	r22, r20
    21ec:	55 27       	eor	r21, r21
    21ee:	44 27       	eor	r20, r20
    21f0:	78 2b       	or	r23, r24
    21f2:	32 97       	sbiw	r30, 0x02	; 2
    21f4:	80 81       	ld	r24, Z
    21f6:	48 2b       	or	r20, r24
    21f8:	cf 57       	subi	r28, 0x7F	; 127
    21fa:	df 4f       	sbci	r29, 0xFF	; 255
    21fc:	88 81       	ld	r24, Y
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	98 2f       	mov	r25, r24
    2202:	88 27       	eor	r24, r24
    2204:	a0 e0       	ldi	r26, 0x00	; 0
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	48 2b       	or	r20, r24
    220a:	59 2b       	or	r21, r25
    220c:	6a 2b       	or	r22, r26
    220e:	7b 2b       	or	r23, r27
    2210:	77 27       	eor	r23, r23
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	46 34       	cpi	r20, 0x46	; 70
    2216:	51 44       	sbci	r21, 0x41	; 65
    2218:	64 45       	sbci	r22, 0x54	; 84
    221a:	71 05       	cpc	r23, r1
    221c:	39 f4       	brne	.+14     	; 0x222c <check_fs+0xca>
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	05 c0       	rjmp	.+10     	; 0x222c <check_fs+0xca>
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	03 c0       	rjmp	.+6      	; 0x222c <check_fs+0xca>
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	01 c0       	rjmp	.+2      	; 0x222c <check_fs+0xca>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	08 95       	ret

00002232 <validate>:
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	c9 f0       	breq	.+50     	; 0x2268 <validate+0x36>
    2236:	dc 01       	movw	r26, r24
    2238:	ed 91       	ld	r30, X+
    223a:	fc 91       	ld	r31, X
    223c:	11 97       	sbiw	r26, 0x01	; 1
    223e:	30 97       	sbiw	r30, 0x00	; 0
    2240:	a9 f0       	breq	.+42     	; 0x226c <validate+0x3a>
    2242:	20 81       	ld	r18, Z
    2244:	22 23       	and	r18, r18
    2246:	a1 f0       	breq	.+40     	; 0x2270 <validate+0x3e>
    2248:	26 81       	ldd	r18, Z+6	; 0x06
    224a:	37 81       	ldd	r19, Z+7	; 0x07
    224c:	12 96       	adiw	r26, 0x02	; 2
    224e:	8d 91       	ld	r24, X+
    2250:	9c 91       	ld	r25, X
    2252:	13 97       	sbiw	r26, 0x03	; 3
    2254:	28 17       	cp	r18, r24
    2256:	39 07       	cpc	r19, r25
    2258:	69 f4       	brne	.+26     	; 0x2274 <validate+0x42>
    225a:	81 81       	ldd	r24, Z+1	; 0x01
    225c:	0e 94 cb 08 	call	0x1196	; 0x1196 <disk_status>
    2260:	80 ff       	sbrs	r24, 0
    2262:	0a c0       	rjmp	.+20     	; 0x2278 <validate+0x46>
    2264:	89 e0       	ldi	r24, 0x09	; 9
    2266:	08 95       	ret
    2268:	89 e0       	ldi	r24, 0x09	; 9
    226a:	08 95       	ret
    226c:	89 e0       	ldi	r24, 0x09	; 9
    226e:	08 95       	ret
    2270:	89 e0       	ldi	r24, 0x09	; 9
    2272:	08 95       	ret
    2274:	89 e0       	ldi	r24, 0x09	; 9
    2276:	08 95       	ret
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	08 95       	ret

0000227c <find_volume>:
    227c:	2f 92       	push	r2
    227e:	3f 92       	push	r3
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	6d 97       	sbiw	r28, 0x1d	; 29
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	6c 01       	movw	r12, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	b4 2e       	mov	r11, r20
    22b6:	d6 01       	movw	r26, r12
    22b8:	1d 92       	st	X+, r1
    22ba:	1c 92       	st	X, r1
    22bc:	76 de       	rcall	.-788    	; 0x1faa <get_ldnumber>
    22be:	7c 01       	movw	r14, r24
    22c0:	99 23       	and	r25, r25
    22c2:	0c f4       	brge	.+2      	; 0x22c6 <find_volume+0x4a>
    22c4:	d7 c2       	rjmp	.+1454   	; 0x2874 <find_volume+0x5f8>
    22c6:	fc 01       	movw	r30, r24
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	e3 5d       	subi	r30, 0xD3	; 211
    22ce:	fb 4f       	sbci	r31, 0xFB	; 251
    22d0:	00 81       	ld	r16, Z
    22d2:	11 81       	ldd	r17, Z+1	; 0x01
    22d4:	01 15       	cp	r16, r1
    22d6:	11 05       	cpc	r17, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <find_volume+0x60>
    22da:	ce c2       	rjmp	.+1436   	; 0x2878 <find_volume+0x5fc>
    22dc:	f6 01       	movw	r30, r12
    22de:	11 83       	std	Z+1, r17	; 0x01
    22e0:	00 83       	st	Z, r16
    22e2:	d8 01       	movw	r26, r16
    22e4:	8c 91       	ld	r24, X
    22e6:	88 23       	and	r24, r24
    22e8:	69 f0       	breq	.+26     	; 0x2304 <find_volume+0x88>
    22ea:	11 96       	adiw	r26, 0x01	; 1
    22ec:	8c 91       	ld	r24, X
    22ee:	0e 94 cb 08 	call	0x1196	; 0x1196 <disk_status>
    22f2:	80 fd       	sbrc	r24, 0
    22f4:	07 c0       	rjmp	.+14     	; 0x2304 <find_volume+0x88>
    22f6:	bb 20       	and	r11, r11
    22f8:	09 f4       	brne	.+2      	; 0x22fc <find_volume+0x80>
    22fa:	c0 c2       	rjmp	.+1408   	; 0x287c <find_volume+0x600>
    22fc:	82 ff       	sbrs	r24, 2
    22fe:	c0 c2       	rjmp	.+1408   	; 0x2880 <find_volume+0x604>
    2300:	8a e0       	ldi	r24, 0x0A	; 10
    2302:	65 c3       	rjmp	.+1738   	; 0x29ce <find_volume+0x752>
    2304:	f8 01       	movw	r30, r16
    2306:	10 82       	st	Z, r1
    2308:	e1 82       	std	Z+1, r14	; 0x01
    230a:	8e 2d       	mov	r24, r14
    230c:	0e 94 0a 08 	call	0x1014	; 0x1014 <disk_initialize>
    2310:	80 fd       	sbrc	r24, 0
    2312:	b8 c2       	rjmp	.+1392   	; 0x2884 <find_volume+0x608>
    2314:	bb 20       	and	r11, r11
    2316:	09 f4       	brne	.+2      	; 0x231a <find_volume+0x9e>
    2318:	d5 c2       	rjmp	.+1450   	; 0x28c4 <find_volume+0x648>
    231a:	82 fd       	sbrc	r24, 2
    231c:	b5 c2       	rjmp	.+1386   	; 0x2888 <find_volume+0x60c>
    231e:	d2 c2       	rjmp	.+1444   	; 0x28c4 <find_volume+0x648>
    2320:	df 01       	movw	r26, r30
    2322:	17 97       	sbiw	r26, 0x07	; 7
    2324:	8c 91       	ld	r24, X
    2326:	88 23       	and	r24, r24
    2328:	b9 f0       	breq	.+46     	; 0x2358 <find_volume+0xdc>
    232a:	14 96       	adiw	r26, 0x04	; 4
    232c:	cc 90       	ld	r12, X
    232e:	80 81       	ld	r24, Z
    2330:	d1 2c       	mov	r13, r1
    2332:	e1 2c       	mov	r14, r1
    2334:	f1 2c       	mov	r15, r1
    2336:	f8 2a       	or	r15, r24
    2338:	12 96       	adiw	r26, 0x02	; 2
    233a:	8c 91       	ld	r24, X
    233c:	e8 2a       	or	r14, r24
    233e:	11 97       	sbiw	r26, 0x01	; 1
    2340:	ac 91       	ld	r26, X
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	ba 2f       	mov	r27, r26
    2346:	aa 27       	eor	r26, r26
    2348:	cd 01       	movw	r24, r26
    234a:	a0 e0       	ldi	r26, 0x00	; 0
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	c8 2a       	or	r12, r24
    2350:	d9 2a       	or	r13, r25
    2352:	ea 2a       	or	r14, r26
    2354:	fb 2a       	or	r15, r27
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <find_volume+0xe4>
    2358:	c8 2c       	mov	r12, r8
    235a:	d9 2c       	mov	r13, r9
    235c:	e7 2e       	mov	r14, r23
    235e:	f6 2e       	mov	r15, r22
    2360:	d9 01       	movw	r26, r18
    2362:	cd 92       	st	X+, r12
    2364:	dd 92       	st	X+, r13
    2366:	ed 92       	st	X+, r14
    2368:	fd 92       	st	X+, r15
    236a:	9d 01       	movw	r18, r26
    236c:	70 96       	adiw	r30, 0x10	; 16
    236e:	e4 17       	cp	r30, r20
    2370:	f5 07       	cpc	r31, r21
    2372:	b1 f6       	brne	.-84     	; 0x2320 <find_volume+0xa4>
    2374:	4e 01       	movw	r8, r28
    2376:	b1 e1       	ldi	r27, 0x11	; 17
    2378:	8b 0e       	add	r8, r27
    237a:	91 1c       	adc	r9, r1
    237c:	68 94       	set
    237e:	77 24       	eor	r7, r7
    2380:	71 f8       	bld	r7, 1
    2382:	f5 01       	movw	r30, r10
    2384:	c1 90       	ld	r12, Z+
    2386:	d1 90       	ld	r13, Z+
    2388:	e1 90       	ld	r14, Z+
    238a:	f1 90       	ld	r15, Z+
    238c:	5f 01       	movw	r10, r30
    238e:	c1 14       	cp	r12, r1
    2390:	d1 04       	cpc	r13, r1
    2392:	e1 04       	cpc	r14, r1
    2394:	f1 04       	cpc	r15, r1
    2396:	39 f0       	breq	.+14     	; 0x23a6 <find_volume+0x12a>
    2398:	b7 01       	movw	r22, r14
    239a:	a6 01       	movw	r20, r12
    239c:	c8 01       	movw	r24, r16
    239e:	e1 de       	rcall	.-574    	; 0x2162 <check_fs>
    23a0:	81 11       	cpse	r24, r1
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <find_volume+0x12c>
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <find_volume+0x144>
    23a6:	87 2d       	mov	r24, r7
    23a8:	a8 14       	cp	r10, r8
    23aa:	b9 04       	cpc	r11, r9
    23ac:	51 f7       	brne	.-44     	; 0x2382 <find_volume+0x106>
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <find_volume+0x13a>
    23b0:	c1 2c       	mov	r12, r1
    23b2:	d1 2c       	mov	r13, r1
    23b4:	76 01       	movw	r14, r12
    23b6:	83 30       	cpi	r24, 0x03	; 3
    23b8:	09 f4       	brne	.+2      	; 0x23bc <find_volume+0x140>
    23ba:	68 c2       	rjmp	.+1232   	; 0x288c <find_volume+0x610>
    23bc:	81 11       	cpse	r24, r1
    23be:	68 c2       	rjmp	.+1232   	; 0x2890 <find_volume+0x614>
    23c0:	d8 01       	movw	r26, r16
    23c2:	da 96       	adiw	r26, 0x3a	; 58
    23c4:	8c 91       	ld	r24, X
    23c6:	da 97       	sbiw	r26, 0x3a	; 58
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	98 2f       	mov	r25, r24
    23cc:	88 27       	eor	r24, r24
    23ce:	d9 96       	adiw	r26, 0x39	; 57
    23d0:	2c 91       	ld	r18, X
    23d2:	82 2b       	or	r24, r18
    23d4:	81 15       	cp	r24, r1
    23d6:	92 40       	sbci	r25, 0x02	; 2
    23d8:	09 f0       	breq	.+2      	; 0x23dc <find_volume+0x160>
    23da:	5c c2       	rjmp	.+1208   	; 0x2894 <find_volume+0x618>
    23dc:	f8 01       	movw	r30, r16
    23de:	eb 5b       	subi	r30, 0xBB	; 187
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 80       	ld	r8, Z
    23e4:	91 2c       	mov	r9, r1
    23e6:	98 2c       	mov	r9, r8
    23e8:	88 24       	eor	r8, r8
    23ea:	31 97       	sbiw	r30, 0x01	; 1
    23ec:	80 81       	ld	r24, Z
    23ee:	88 2a       	or	r8, r24
    23f0:	a1 2c       	mov	r10, r1
    23f2:	b1 2c       	mov	r11, r1
    23f4:	81 14       	cp	r8, r1
    23f6:	91 04       	cpc	r9, r1
    23f8:	a1 04       	cpc	r10, r1
    23fa:	b1 04       	cpc	r11, r1
    23fc:	e9 f4       	brne	.+58     	; 0x2438 <find_volume+0x1bc>
    23fe:	71 96       	adiw	r30, 0x11	; 17
    2400:	80 81       	ld	r24, Z
    2402:	31 97       	sbiw	r30, 0x01	; 1
    2404:	80 80       	ld	r8, Z
    2406:	91 2c       	mov	r9, r1
    2408:	a1 2c       	mov	r10, r1
    240a:	b1 2c       	mov	r11, r1
    240c:	54 01       	movw	r10, r8
    240e:	99 24       	eor	r9, r9
    2410:	88 24       	eor	r8, r8
    2412:	b8 2a       	or	r11, r24
    2414:	32 97       	sbiw	r30, 0x02	; 2
    2416:	80 81       	ld	r24, Z
    2418:	a5 01       	movw	r20, r10
    241a:	94 01       	movw	r18, r8
    241c:	28 2b       	or	r18, r24
    241e:	da 01       	movw	r26, r20
    2420:	c9 01       	movw	r24, r18
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	80 80       	ld	r8, Z
    2426:	91 2c       	mov	r9, r1
    2428:	98 2c       	mov	r9, r8
    242a:	88 24       	eor	r8, r8
    242c:	a1 2c       	mov	r10, r1
    242e:	b1 2c       	mov	r11, r1
    2430:	88 2a       	or	r8, r24
    2432:	99 2a       	or	r9, r25
    2434:	aa 2a       	or	r10, r26
    2436:	bb 2a       	or	r11, r27
    2438:	d8 01       	movw	r26, r16
    243a:	56 96       	adiw	r26, 0x16	; 22
    243c:	8d 92       	st	X+, r8
    243e:	9d 92       	st	X+, r9
    2440:	ad 92       	st	X+, r10
    2442:	bc 92       	st	X, r11
    2444:	59 97       	sbiw	r26, 0x19	; 25
    2446:	de 96       	adiw	r26, 0x3e	; 62
    2448:	ac 91       	ld	r26, X
    244a:	f8 01       	movw	r30, r16
    244c:	a3 83       	std	Z+3, r26	; 0x03
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	8a 0f       	add	r24, r26
    2452:	82 30       	cpi	r24, 0x02	; 2
    2454:	08 f0       	brcs	.+2      	; 0x2458 <find_volume+0x1dc>
    2456:	20 c2       	rjmp	.+1088   	; 0x2898 <find_volume+0x61c>
    2458:	f3 ad       	ldd	r31, Z+59	; 0x3b
    245a:	f9 8b       	std	Y+17, r31	; 0x11
    245c:	2f 2f       	mov	r18, r31
    245e:	f8 01       	movw	r30, r16
    2460:	22 83       	std	Z+2, r18	; 0x02
    2462:	22 23       	and	r18, r18
    2464:	09 f4       	brne	.+2      	; 0x2468 <find_volume+0x1ec>
    2466:	1a c2       	rjmp	.+1076   	; 0x289c <find_volume+0x620>
    2468:	82 2f       	mov	r24, r18
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9c 01       	movw	r18, r24
    246e:	21 50       	subi	r18, 0x01	; 1
    2470:	31 09       	sbc	r19, r1
    2472:	82 23       	and	r24, r18
    2474:	93 23       	and	r25, r19
    2476:	89 2b       	or	r24, r25
    2478:	09 f0       	breq	.+2      	; 0x247c <find_volume+0x200>
    247a:	12 c2       	rjmp	.+1060   	; 0x28a0 <find_volume+0x624>
    247c:	e0 5c       	subi	r30, 0xC0	; 192
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	98 2f       	mov	r25, r24
    2486:	88 27       	eor	r24, r24
    2488:	f8 01       	movw	r30, r16
    248a:	27 ad       	ldd	r18, Z+63	; 0x3f
    248c:	1c 01       	movw	r2, r24
    248e:	22 2a       	or	r2, r18
    2490:	31 86       	std	Z+9, r3	; 0x09
    2492:	20 86       	std	Z+8, r2	; 0x08
    2494:	c1 01       	movw	r24, r2
    2496:	8f 70       	andi	r24, 0x0F	; 15
    2498:	99 27       	eor	r25, r25
    249a:	89 2b       	or	r24, r25
    249c:	09 f0       	breq	.+2      	; 0x24a0 <find_volume+0x224>
    249e:	02 c2       	rjmp	.+1028   	; 0x28a4 <find_volume+0x628>
    24a0:	ee 5b       	subi	r30, 0xBE	; 190
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	40 80       	ld	r4, Z
    24a6:	51 2c       	mov	r5, r1
    24a8:	54 2c       	mov	r5, r4
    24aa:	44 24       	eor	r4, r4
    24ac:	31 97       	sbiw	r30, 0x01	; 1
    24ae:	80 81       	ld	r24, Z
    24b0:	48 2a       	or	r4, r24
    24b2:	61 2c       	mov	r6, r1
    24b4:	71 2c       	mov	r7, r1
    24b6:	41 14       	cp	r4, r1
    24b8:	51 04       	cpc	r5, r1
    24ba:	61 04       	cpc	r6, r1
    24bc:	71 04       	cpc	r7, r1
    24be:	d1 f4       	brne	.+52     	; 0x24f4 <find_volume+0x278>
    24c0:	70 96       	adiw	r30, 0x10	; 16
    24c2:	80 81       	ld	r24, Z
    24c4:	31 97       	sbiw	r30, 0x01	; 1
    24c6:	40 80       	ld	r4, Z
    24c8:	51 2c       	mov	r5, r1
    24ca:	61 2c       	mov	r6, r1
    24cc:	71 2c       	mov	r7, r1
    24ce:	32 01       	movw	r6, r4
    24d0:	55 24       	eor	r5, r5
    24d2:	44 24       	eor	r4, r4
    24d4:	78 2a       	or	r7, r24
    24d6:	32 97       	sbiw	r30, 0x02	; 2
    24d8:	80 81       	ld	r24, Z
    24da:	48 2a       	or	r4, r24
    24dc:	31 96       	adiw	r30, 0x01	; 1
    24de:	80 81       	ld	r24, Z
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	98 2f       	mov	r25, r24
    24e4:	88 27       	eor	r24, r24
    24e6:	ac 01       	movw	r20, r24
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	44 2a       	or	r4, r20
    24ee:	55 2a       	or	r5, r21
    24f0:	66 2a       	or	r6, r22
    24f2:	77 2a       	or	r7, r23
    24f4:	f8 01       	movw	r30, r16
    24f6:	85 ad       	ldd	r24, Z+61	; 0x3d
    24f8:	e8 2f       	mov	r30, r24
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	3e 2f       	mov	r19, r30
    24fe:	22 27       	eor	r18, r18
    2500:	f8 01       	movw	r30, r16
    2502:	84 ad       	ldd	r24, Z+60	; 0x3c
    2504:	f9 01       	movw	r30, r18
    2506:	e8 2b       	or	r30, r24
    2508:	30 97       	sbiw	r30, 0x00	; 0
    250a:	09 f4       	brne	.+2      	; 0x250e <find_volume+0x292>
    250c:	cd c1       	rjmp	.+922    	; 0x28a8 <find_volume+0x62c>
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	a5 01       	movw	r20, r10
    2512:	94 01       	movw	r18, r8
    2514:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__muluhisi3>
    2518:	6a 8f       	std	Y+26, r22	; 0x1a
    251a:	7b 8f       	std	Y+27, r23	; 0x1b
    251c:	8c 8f       	std	Y+28, r24	; 0x1c
    251e:	9d 8f       	std	Y+29, r25	; 0x1d
    2520:	9f 01       	movw	r18, r30
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	2e 8b       	std	Y+22, r18	; 0x16
    2528:	3f 8b       	std	Y+23, r19	; 0x17
    252a:	48 8f       	std	Y+24, r20	; 0x18
    252c:	59 8f       	std	Y+25, r21	; 0x19
    252e:	c1 01       	movw	r24, r2
    2530:	92 95       	swap	r25
    2532:	82 95       	swap	r24
    2534:	8f 70       	andi	r24, 0x0F	; 15
    2536:	89 27       	eor	r24, r25
    2538:	9f 70       	andi	r25, 0x0F	; 15
    253a:	89 27       	eor	r24, r25
    253c:	28 0f       	add	r18, r24
    253e:	39 1f       	adc	r19, r25
    2540:	41 1d       	adc	r20, r1
    2542:	51 1d       	adc	r21, r1
    2544:	da 01       	movw	r26, r20
    2546:	c9 01       	movw	r24, r18
    2548:	2a 8d       	ldd	r18, Y+26	; 0x1a
    254a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    254c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    254e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2550:	28 0f       	add	r18, r24
    2552:	39 1f       	adc	r19, r25
    2554:	4a 1f       	adc	r20, r26
    2556:	5b 1f       	adc	r21, r27
    2558:	2a 8b       	std	Y+18, r18	; 0x12
    255a:	3b 8b       	std	Y+19, r19	; 0x13
    255c:	4c 8b       	std	Y+20, r20	; 0x14
    255e:	5d 8b       	std	Y+21, r21	; 0x15
    2560:	42 16       	cp	r4, r18
    2562:	53 06       	cpc	r5, r19
    2564:	64 06       	cpc	r6, r20
    2566:	75 06       	cpc	r7, r21
    2568:	08 f4       	brcc	.+2      	; 0x256c <find_volume+0x2f0>
    256a:	a0 c1       	rjmp	.+832    	; 0x28ac <find_volume+0x630>
    256c:	c3 01       	movw	r24, r6
    256e:	b2 01       	movw	r22, r4
    2570:	62 1b       	sub	r22, r18
    2572:	73 0b       	sbc	r23, r19
    2574:	84 0b       	sbc	r24, r20
    2576:	95 0b       	sbc	r25, r21
    2578:	e9 89       	ldd	r30, Y+17	; 0x11
    257a:	2e 2f       	mov	r18, r30
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <__udivmodsi4>
    2586:	da 01       	movw	r26, r20
    2588:	c9 01       	movw	r24, r18
    258a:	21 15       	cp	r18, r1
    258c:	31 05       	cpc	r19, r1
    258e:	41 05       	cpc	r20, r1
    2590:	51 05       	cpc	r21, r1
    2592:	09 f4       	brne	.+2      	; 0x2596 <find_volume+0x31a>
    2594:	8d c1       	rjmp	.+794    	; 0x28b0 <find_volume+0x634>
    2596:	26 3f       	cpi	r18, 0xF6	; 246
    2598:	ff e0       	ldi	r31, 0x0F	; 15
    259a:	3f 07       	cpc	r19, r31
    259c:	41 05       	cpc	r20, r1
    259e:	51 05       	cpc	r21, r1
    25a0:	18 f0       	brcs	.+6      	; 0x25a8 <find_volume+0x32c>
    25a2:	e2 e0       	ldi	r30, 0x02	; 2
    25a4:	e9 8b       	std	Y+17, r30	; 0x11
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <find_volume+0x330>
    25a8:	f1 e0       	ldi	r31, 0x01	; 1
    25aa:	f9 8b       	std	Y+17, r31	; 0x11
    25ac:	86 3f       	cpi	r24, 0xF6	; 246
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	a1 05       	cpc	r26, r1
    25b2:	b1 05       	cpc	r27, r1
    25b4:	08 f0       	brcs	.+2      	; 0x25b8 <find_volume+0x33c>
    25b6:	9d c1       	rjmp	.+826    	; 0x28f2 <find_volume+0x676>
    25b8:	29 01       	movw	r4, r18
    25ba:	3a 01       	movw	r6, r20
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	48 0e       	add	r4, r24
    25c0:	51 1c       	adc	r5, r1
    25c2:	61 1c       	adc	r6, r1
    25c4:	71 1c       	adc	r7, r1
    25c6:	d8 01       	movw	r26, r16
    25c8:	52 96       	adiw	r26, 0x12	; 18
    25ca:	4d 92       	st	X+, r4
    25cc:	5d 92       	st	X+, r5
    25ce:	6d 92       	st	X+, r6
    25d0:	7c 92       	st	X, r7
    25d2:	55 97       	sbiw	r26, 0x15	; 21
    25d4:	f8 01       	movw	r30, r16
    25d6:	c2 8e       	std	Z+26, r12	; 0x1a
    25d8:	d3 8e       	std	Z+27, r13	; 0x1b
    25da:	e4 8e       	std	Z+28, r14	; 0x1c
    25dc:	f5 8e       	std	Z+29, r15	; 0x1d
    25de:	8e 89       	ldd	r24, Y+22	; 0x16
    25e0:	9f 89       	ldd	r25, Y+23	; 0x17
    25e2:	a8 8d       	ldd	r26, Y+24	; 0x18
    25e4:	b9 8d       	ldd	r27, Y+25	; 0x19
    25e6:	8c 0d       	add	r24, r12
    25e8:	9d 1d       	adc	r25, r13
    25ea:	ae 1d       	adc	r26, r14
    25ec:	bf 1d       	adc	r27, r15
    25ee:	86 8f       	std	Z+30, r24	; 0x1e
    25f0:	97 8f       	std	Z+31, r25	; 0x1f
    25f2:	a0 a3       	std	Z+32, r26	; 0x20
    25f4:	b1 a3       	std	Z+33, r27	; 0x21
    25f6:	4a 89       	ldd	r20, Y+18	; 0x12
    25f8:	5b 89       	ldd	r21, Y+19	; 0x13
    25fa:	6c 89       	ldd	r22, Y+20	; 0x14
    25fc:	7d 89       	ldd	r23, Y+21	; 0x15
    25fe:	4c 0d       	add	r20, r12
    2600:	5d 1d       	adc	r21, r13
    2602:	6e 1d       	adc	r22, r14
    2604:	7f 1d       	adc	r23, r15
    2606:	46 a3       	std	Z+38, r20	; 0x26
    2608:	57 a3       	std	Z+39, r21	; 0x27
    260a:	60 a7       	std	Z+40, r22	; 0x28
    260c:	71 a7       	std	Z+41, r23	; 0x29
    260e:	f9 89       	ldd	r31, Y+17	; 0x11
    2610:	f3 30       	cpi	r31, 0x03	; 3
    2612:	09 f0       	breq	.+2      	; 0x2616 <find_volume+0x39a>
    2614:	44 c0       	rjmp	.+136    	; 0x269e <find_volume+0x422>
    2616:	23 28       	or	r2, r3
    2618:	09 f0       	breq	.+2      	; 0x261c <find_volume+0x3a0>
    261a:	4c c1       	rjmp	.+664    	; 0x28b4 <find_volume+0x638>
    261c:	f8 01       	movw	r30, r16
    261e:	e3 5a       	subi	r30, 0xA3	; 163
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	20 81       	ld	r18, Z
    2624:	31 97       	sbiw	r30, 0x01	; 1
    2626:	80 81       	ld	r24, Z
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a0 e0       	ldi	r26, 0x00	; 0
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	dc 01       	movw	r26, r24
    2630:	99 27       	eor	r25, r25
    2632:	88 27       	eor	r24, r24
    2634:	b2 2b       	or	r27, r18
    2636:	32 97       	sbiw	r30, 0x02	; 2
    2638:	20 81       	ld	r18, Z
    263a:	ac 01       	movw	r20, r24
    263c:	bd 01       	movw	r22, r26
    263e:	42 2b       	or	r20, r18
    2640:	31 96       	adiw	r30, 0x01	; 1
    2642:	80 81       	ld	r24, Z
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	92 2f       	mov	r25, r18
    264a:	88 27       	eor	r24, r24
    264c:	a0 e0       	ldi	r26, 0x00	; 0
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	84 2b       	or	r24, r20
    2652:	95 2b       	or	r25, r21
    2654:	a6 2b       	or	r26, r22
    2656:	b7 2b       	or	r27, r23
    2658:	f8 01       	movw	r30, r16
    265a:	82 a3       	std	Z+34, r24	; 0x22
    265c:	93 a3       	std	Z+35, r25	; 0x23
    265e:	a4 a3       	std	Z+36, r26	; 0x24
    2660:	b5 a3       	std	Z+37, r27	; 0x25
    2662:	44 0c       	add	r4, r4
    2664:	55 1c       	adc	r5, r5
    2666:	66 1c       	adc	r6, r6
    2668:	77 1c       	adc	r7, r7
    266a:	44 0c       	add	r4, r4
    266c:	55 1c       	adc	r5, r5
    266e:	66 1c       	adc	r6, r6
    2670:	77 1c       	adc	r7, r7
    2672:	ff ef       	ldi	r31, 0xFF	; 255
    2674:	4f 0e       	add	r4, r31
    2676:	f1 e0       	ldi	r31, 0x01	; 1
    2678:	5f 1e       	adc	r5, r31
    267a:	61 1c       	adc	r6, r1
    267c:	71 1c       	adc	r7, r1
    267e:	03 2e       	mov	r0, r19
    2680:	39 e0       	ldi	r19, 0x09	; 9
    2682:	76 94       	lsr	r7
    2684:	67 94       	ror	r6
    2686:	57 94       	ror	r5
    2688:	47 94       	ror	r4
    268a:	3a 95       	dec	r19
    268c:	d1 f7       	brne	.-12     	; 0x2682 <find_volume+0x406>
    268e:	30 2d       	mov	r19, r0
    2690:	84 14       	cp	r8, r4
    2692:	95 04       	cpc	r9, r5
    2694:	a6 04       	cpc	r10, r6
    2696:	b7 04       	cpc	r11, r7
    2698:	08 f4       	brcc	.+2      	; 0x269c <find_volume+0x420>
    269a:	0e c1       	rjmp	.+540    	; 0x28b8 <find_volume+0x63c>
    269c:	56 c1       	rjmp	.+684    	; 0x294a <find_volume+0x6ce>
    269e:	23 28       	or	r2, r3
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <find_volume+0x428>
    26a2:	0c c1       	rjmp	.+536    	; 0x28bc <find_volume+0x640>
    26a4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    26a6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    26a8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    26aa:	5d 8d       	ldd	r21, Y+29	; 0x1d
    26ac:	82 0f       	add	r24, r18
    26ae:	93 1f       	adc	r25, r19
    26b0:	a4 1f       	adc	r26, r20
    26b2:	b5 1f       	adc	r27, r21
    26b4:	f8 01       	movw	r30, r16
    26b6:	82 a3       	std	Z+34, r24	; 0x22
    26b8:	93 a3       	std	Z+35, r25	; 0x23
    26ba:	a4 a3       	std	Z+36, r26	; 0x24
    26bc:	b5 a3       	std	Z+37, r27	; 0x25
    26be:	f9 89       	ldd	r31, Y+17	; 0x11
    26c0:	f2 30       	cpi	r31, 0x02	; 2
    26c2:	29 f4       	brne	.+10     	; 0x26ce <find_volume+0x452>
    26c4:	44 0c       	add	r4, r4
    26c6:	55 1c       	adc	r5, r5
    26c8:	66 1c       	adc	r6, r6
    26ca:	77 1c       	adc	r7, r7
    26cc:	6a c1       	rjmp	.+724    	; 0x29a2 <find_volume+0x726>
    26ce:	a3 e0       	ldi	r26, 0x03	; 3
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	a3 01       	movw	r20, r6
    26d4:	92 01       	movw	r18, r4
    26d6:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__muluhisi3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	b6 95       	lsr	r27
    26e0:	a7 95       	ror	r26
    26e2:	97 95       	ror	r25
    26e4:	87 95       	ror	r24
    26e6:	21 e0       	ldi	r18, 0x01	; 1
    26e8:	42 22       	and	r4, r18
    26ea:	55 24       	eor	r5, r5
    26ec:	66 24       	eor	r6, r6
    26ee:	77 24       	eor	r7, r7
    26f0:	48 0e       	add	r4, r24
    26f2:	59 1e       	adc	r5, r25
    26f4:	6a 1e       	adc	r6, r26
    26f6:	7b 1e       	adc	r7, r27
    26f8:	54 c1       	rjmp	.+680    	; 0x29a2 <find_volume+0x726>
    26fa:	b7 01       	movw	r22, r14
    26fc:	a6 01       	movw	r20, r12
    26fe:	4f 5f       	subi	r20, 0xFF	; 255
    2700:	5f 4f       	sbci	r21, 0xFF	; 255
    2702:	6f 4f       	sbci	r22, 0xFF	; 255
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	c8 01       	movw	r24, r16
    2708:	f0 dc       	rcall	.-1568   	; 0x20ea <move_window>
    270a:	81 11       	cpse	r24, r1
    270c:	96 c0       	rjmp	.+300    	; 0x283a <find_volume+0x5be>
    270e:	d8 01       	movw	r26, r16
    2710:	15 96       	adiw	r26, 0x05	; 5
    2712:	1c 92       	st	X, r1
    2714:	f8 01       	movw	r30, r16
    2716:	e3 5d       	subi	r30, 0xD3	; 211
    2718:	fd 4f       	sbci	r31, 0xFD	; 253
    271a:	80 81       	ld	r24, Z
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	98 2f       	mov	r25, r24
    2720:	88 27       	eor	r24, r24
    2722:	31 97       	sbiw	r30, 0x01	; 1
    2724:	20 81       	ld	r18, Z
    2726:	82 2b       	or	r24, r18
    2728:	85 35       	cpi	r24, 0x55	; 85
    272a:	9a 4a       	sbci	r25, 0xAA	; 170
    272c:	09 f0       	breq	.+2      	; 0x2730 <find_volume+0x4b4>
    272e:	88 c0       	rjmp	.+272    	; 0x2840 <find_volume+0x5c4>
    2730:	f8 01       	movw	r30, r16
    2732:	21 a9       	ldd	r18, Z+49	; 0x31
    2734:	80 a9       	ldd	r24, Z+48	; 0x30
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e0       	ldi	r26, 0x00	; 0
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	dc 01       	movw	r26, r24
    273e:	99 27       	eor	r25, r25
    2740:	88 27       	eor	r24, r24
    2742:	b2 2b       	or	r27, r18
    2744:	26 a5       	ldd	r18, Z+46	; 0x2e
    2746:	ac 01       	movw	r20, r24
    2748:	bd 01       	movw	r22, r26
    274a:	42 2b       	or	r20, r18
    274c:	27 a5       	ldd	r18, Z+47	; 0x2f
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	92 2f       	mov	r25, r18
    2752:	88 27       	eor	r24, r24
    2754:	a0 e0       	ldi	r26, 0x00	; 0
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	84 2b       	or	r24, r20
    275a:	95 2b       	or	r25, r21
    275c:	a6 2b       	or	r26, r22
    275e:	b7 2b       	or	r27, r23
    2760:	82 35       	cpi	r24, 0x52	; 82
    2762:	92 45       	sbci	r25, 0x52	; 82
    2764:	a1 46       	sbci	r26, 0x61	; 97
    2766:	b1 44       	sbci	r27, 0x41	; 65
    2768:	09 f0       	breq	.+2      	; 0x276c <find_volume+0x4f0>
    276a:	6d c0       	rjmp	.+218    	; 0x2846 <find_volume+0x5ca>
    276c:	f8 01       	movw	r30, r16
    276e:	eb 5e       	subi	r30, 0xEB	; 235
    2770:	fd 4f       	sbci	r31, 0xFD	; 253
    2772:	20 81       	ld	r18, Z
    2774:	31 97       	sbiw	r30, 0x01	; 1
    2776:	80 81       	ld	r24, Z
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e0       	ldi	r26, 0x00	; 0
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	dc 01       	movw	r26, r24
    2780:	99 27       	eor	r25, r25
    2782:	88 27       	eor	r24, r24
    2784:	b2 2b       	or	r27, r18
    2786:	32 97       	sbiw	r30, 0x02	; 2
    2788:	20 81       	ld	r18, Z
    278a:	ac 01       	movw	r20, r24
    278c:	bd 01       	movw	r22, r26
    278e:	42 2b       	or	r20, r18
    2790:	31 96       	adiw	r30, 0x01	; 1
    2792:	20 81       	ld	r18, Z
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	92 2f       	mov	r25, r18
    2798:	88 27       	eor	r24, r24
    279a:	a0 e0       	ldi	r26, 0x00	; 0
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	84 2b       	or	r24, r20
    27a0:	95 2b       	or	r25, r21
    27a2:	a6 2b       	or	r26, r22
    27a4:	b7 2b       	or	r27, r23
    27a6:	82 37       	cpi	r24, 0x72	; 114
    27a8:	92 47       	sbci	r25, 0x72	; 114
    27aa:	a1 44       	sbci	r26, 0x41	; 65
    27ac:	b1 46       	sbci	r27, 0x61	; 97
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <find_volume+0x536>
    27b0:	4d c0       	rjmp	.+154    	; 0x284c <find_volume+0x5d0>
    27b2:	36 96       	adiw	r30, 0x06	; 6
    27b4:	20 81       	ld	r18, Z
    27b6:	31 97       	sbiw	r30, 0x01	; 1
    27b8:	80 81       	ld	r24, Z
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	a0 e0       	ldi	r26, 0x00	; 0
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	dc 01       	movw	r26, r24
    27c2:	99 27       	eor	r25, r25
    27c4:	88 27       	eor	r24, r24
    27c6:	b2 2b       	or	r27, r18
    27c8:	32 97       	sbiw	r30, 0x02	; 2
    27ca:	20 81       	ld	r18, Z
    27cc:	ac 01       	movw	r20, r24
    27ce:	bd 01       	movw	r22, r26
    27d0:	42 2b       	or	r20, r18
    27d2:	31 96       	adiw	r30, 0x01	; 1
    27d4:	20 81       	ld	r18, Z
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	92 2f       	mov	r25, r18
    27da:	88 27       	eor	r24, r24
    27dc:	a0 e0       	ldi	r26, 0x00	; 0
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	84 2b       	or	r24, r20
    27e2:	95 2b       	or	r25, r21
    27e4:	a6 2b       	or	r26, r22
    27e6:	b7 2b       	or	r27, r23
    27e8:	f8 01       	movw	r30, r16
    27ea:	86 87       	std	Z+14, r24	; 0x0e
    27ec:	97 87       	std	Z+15, r25	; 0x0f
    27ee:	a0 8b       	std	Z+16, r26	; 0x10
    27f0:	b1 8b       	std	Z+17, r27	; 0x11
    27f2:	e3 5e       	subi	r30, 0xE3	; 227
    27f4:	fd 4f       	sbci	r31, 0xFD	; 253
    27f6:	20 81       	ld	r18, Z
    27f8:	31 97       	sbiw	r30, 0x01	; 1
    27fa:	80 81       	ld	r24, Z
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	a0 e0       	ldi	r26, 0x00	; 0
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	dc 01       	movw	r26, r24
    2804:	99 27       	eor	r25, r25
    2806:	88 27       	eor	r24, r24
    2808:	b2 2b       	or	r27, r18
    280a:	32 97       	sbiw	r30, 0x02	; 2
    280c:	20 81       	ld	r18, Z
    280e:	ac 01       	movw	r20, r24
    2810:	bd 01       	movw	r22, r26
    2812:	42 2b       	or	r20, r18
    2814:	31 96       	adiw	r30, 0x01	; 1
    2816:	20 81       	ld	r18, Z
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	92 2f       	mov	r25, r18
    281c:	88 27       	eor	r24, r24
    281e:	a0 e0       	ldi	r26, 0x00	; 0
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	84 2b       	or	r24, r20
    2824:	95 2b       	or	r25, r21
    2826:	a6 2b       	or	r26, r22
    2828:	b7 2b       	or	r27, r23
    282a:	f8 01       	movw	r30, r16
    282c:	82 87       	std	Z+10, r24	; 0x0a
    282e:	93 87       	std	Z+11, r25	; 0x0b
    2830:	a4 87       	std	Z+12, r26	; 0x0c
    2832:	b5 87       	std	Z+13, r27	; 0x0d
    2834:	f3 e0       	ldi	r31, 0x03	; 3
    2836:	f9 8b       	std	Y+17, r31	; 0x11
    2838:	0b c0       	rjmp	.+22     	; 0x2850 <find_volume+0x5d4>
    283a:	e3 e0       	ldi	r30, 0x03	; 3
    283c:	e9 8b       	std	Y+17, r30	; 0x11
    283e:	08 c0       	rjmp	.+16     	; 0x2850 <find_volume+0x5d4>
    2840:	f3 e0       	ldi	r31, 0x03	; 3
    2842:	f9 8b       	std	Y+17, r31	; 0x11
    2844:	05 c0       	rjmp	.+10     	; 0x2850 <find_volume+0x5d4>
    2846:	e3 e0       	ldi	r30, 0x03	; 3
    2848:	e9 8b       	std	Y+17, r30	; 0x11
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <find_volume+0x5d4>
    284c:	f3 e0       	ldi	r31, 0x03	; 3
    284e:	f9 8b       	std	Y+17, r31	; 0x11
    2850:	e9 89       	ldd	r30, Y+17	; 0x11
    2852:	d8 01       	movw	r26, r16
    2854:	ec 93       	st	X, r30
    2856:	80 91 2b 04 	lds	r24, 0x042B
    285a:	90 91 2c 04 	lds	r25, 0x042C
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	90 93 2c 04 	sts	0x042C, r25
    2864:	80 93 2b 04 	sts	0x042B, r24
    2868:	17 96       	adiw	r26, 0x07	; 7
    286a:	9c 93       	st	X, r25
    286c:	8e 93       	st	-X, r24
    286e:	16 97       	sbiw	r26, 0x06	; 6
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	ad c0       	rjmp	.+346    	; 0x29ce <find_volume+0x752>
    2874:	8b e0       	ldi	r24, 0x0B	; 11
    2876:	ab c0       	rjmp	.+342    	; 0x29ce <find_volume+0x752>
    2878:	8c e0       	ldi	r24, 0x0C	; 12
    287a:	a9 c0       	rjmp	.+338    	; 0x29ce <find_volume+0x752>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	a7 c0       	rjmp	.+334    	; 0x29ce <find_volume+0x752>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	a5 c0       	rjmp	.+330    	; 0x29ce <find_volume+0x752>
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	a3 c0       	rjmp	.+326    	; 0x29ce <find_volume+0x752>
    2888:	8a e0       	ldi	r24, 0x0A	; 10
    288a:	a1 c0       	rjmp	.+322    	; 0x29ce <find_volume+0x752>
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	9f c0       	rjmp	.+318    	; 0x29ce <find_volume+0x752>
    2890:	8d e0       	ldi	r24, 0x0D	; 13
    2892:	9d c0       	rjmp	.+314    	; 0x29ce <find_volume+0x752>
    2894:	8d e0       	ldi	r24, 0x0D	; 13
    2896:	9b c0       	rjmp	.+310    	; 0x29ce <find_volume+0x752>
    2898:	8d e0       	ldi	r24, 0x0D	; 13
    289a:	99 c0       	rjmp	.+306    	; 0x29ce <find_volume+0x752>
    289c:	8d e0       	ldi	r24, 0x0D	; 13
    289e:	97 c0       	rjmp	.+302    	; 0x29ce <find_volume+0x752>
    28a0:	8d e0       	ldi	r24, 0x0D	; 13
    28a2:	95 c0       	rjmp	.+298    	; 0x29ce <find_volume+0x752>
    28a4:	8d e0       	ldi	r24, 0x0D	; 13
    28a6:	93 c0       	rjmp	.+294    	; 0x29ce <find_volume+0x752>
    28a8:	8d e0       	ldi	r24, 0x0D	; 13
    28aa:	91 c0       	rjmp	.+290    	; 0x29ce <find_volume+0x752>
    28ac:	8d e0       	ldi	r24, 0x0D	; 13
    28ae:	8f c0       	rjmp	.+286    	; 0x29ce <find_volume+0x752>
    28b0:	8d e0       	ldi	r24, 0x0D	; 13
    28b2:	8d c0       	rjmp	.+282    	; 0x29ce <find_volume+0x752>
    28b4:	8d e0       	ldi	r24, 0x0D	; 13
    28b6:	8b c0       	rjmp	.+278    	; 0x29ce <find_volume+0x752>
    28b8:	8d e0       	ldi	r24, 0x0D	; 13
    28ba:	89 c0       	rjmp	.+274    	; 0x29ce <find_volume+0x752>
    28bc:	8d e0       	ldi	r24, 0x0D	; 13
    28be:	87 c0       	rjmp	.+270    	; 0x29ce <find_volume+0x752>
    28c0:	8d e0       	ldi	r24, 0x0D	; 13
    28c2:	85 c0       	rjmp	.+266    	; 0x29ce <find_volume+0x752>
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	ba 01       	movw	r22, r20
    28ca:	c8 01       	movw	r24, r16
    28cc:	4a dc       	rcall	.-1900   	; 0x2162 <check_fs>
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <find_volume+0x658>
    28d2:	6e cd       	rjmp	.-1316   	; 0x23b0 <find_volume+0x134>
    28d4:	9e 01       	movw	r18, r28
    28d6:	2f 5f       	subi	r18, 0xFF	; 255
    28d8:	3f 4f       	sbci	r19, 0xFF	; 255
    28da:	59 01       	movw	r10, r18
    28dc:	f8 01       	movw	r30, r16
    28de:	e9 50       	subi	r30, 0x09	; 9
    28e0:	fe 4f       	sbci	r31, 0xFE	; 254
    28e2:	a8 01       	movw	r20, r16
    28e4:	49 5c       	subi	r20, 0xC9	; 201
    28e6:	5d 4f       	sbci	r21, 0xFD	; 253
    28e8:	81 2c       	mov	r8, r1
    28ea:	91 2c       	mov	r9, r1
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	17 cd       	rjmp	.-1490   	; 0x2320 <find_volume+0xa4>
    28f2:	29 01       	movw	r4, r18
    28f4:	3a 01       	movw	r6, r20
    28f6:	62 e0       	ldi	r22, 0x02	; 2
    28f8:	46 0e       	add	r4, r22
    28fa:	51 1c       	adc	r5, r1
    28fc:	61 1c       	adc	r6, r1
    28fe:	71 1c       	adc	r7, r1
    2900:	d8 01       	movw	r26, r16
    2902:	52 96       	adiw	r26, 0x12	; 18
    2904:	4d 92       	st	X+, r4
    2906:	5d 92       	st	X+, r5
    2908:	6d 92       	st	X+, r6
    290a:	7c 92       	st	X, r7
    290c:	55 97       	sbiw	r26, 0x15	; 21
    290e:	f8 01       	movw	r30, r16
    2910:	c2 8e       	std	Z+26, r12	; 0x1a
    2912:	d3 8e       	std	Z+27, r13	; 0x1b
    2914:	e4 8e       	std	Z+28, r14	; 0x1c
    2916:	f5 8e       	std	Z+29, r15	; 0x1d
    2918:	8e 89       	ldd	r24, Y+22	; 0x16
    291a:	9f 89       	ldd	r25, Y+23	; 0x17
    291c:	a8 8d       	ldd	r26, Y+24	; 0x18
    291e:	b9 8d       	ldd	r27, Y+25	; 0x19
    2920:	8c 0d       	add	r24, r12
    2922:	9d 1d       	adc	r25, r13
    2924:	ae 1d       	adc	r26, r14
    2926:	bf 1d       	adc	r27, r15
    2928:	86 8f       	std	Z+30, r24	; 0x1e
    292a:	97 8f       	std	Z+31, r25	; 0x1f
    292c:	a0 a3       	std	Z+32, r26	; 0x20
    292e:	b1 a3       	std	Z+33, r27	; 0x21
    2930:	8a 89       	ldd	r24, Y+18	; 0x12
    2932:	9b 89       	ldd	r25, Y+19	; 0x13
    2934:	ac 89       	ldd	r26, Y+20	; 0x14
    2936:	bd 89       	ldd	r27, Y+21	; 0x15
    2938:	8c 0d       	add	r24, r12
    293a:	9d 1d       	adc	r25, r13
    293c:	ae 1d       	adc	r26, r14
    293e:	bf 1d       	adc	r27, r15
    2940:	86 a3       	std	Z+38, r24	; 0x26
    2942:	97 a3       	std	Z+39, r25	; 0x27
    2944:	a0 a7       	std	Z+40, r26	; 0x28
    2946:	b1 a7       	std	Z+41, r27	; 0x29
    2948:	66 ce       	rjmp	.-820    	; 0x2616 <find_volume+0x39a>
    294a:	8f ef       	ldi	r24, 0xFF	; 255
    294c:	9f ef       	ldi	r25, 0xFF	; 255
    294e:	dc 01       	movw	r26, r24
    2950:	f8 01       	movw	r30, r16
    2952:	86 87       	std	Z+14, r24	; 0x0e
    2954:	97 87       	std	Z+15, r25	; 0x0f
    2956:	a0 8b       	std	Z+16, r26	; 0x10
    2958:	b1 8b       	std	Z+17, r27	; 0x11
    295a:	82 87       	std	Z+10, r24	; 0x0a
    295c:	93 87       	std	Z+11, r25	; 0x0b
    295e:	a4 87       	std	Z+12, r26	; 0x0c
    2960:	b5 87       	std	Z+13, r27	; 0x0d
    2962:	80 e8       	ldi	r24, 0x80	; 128
    2964:	85 83       	std	Z+5, r24	; 0x05
    2966:	e1 5a       	subi	r30, 0xA1	; 161
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 81       	ld	r24, Z
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	98 2f       	mov	r25, r24
    2970:	88 27       	eor	r24, r24
    2972:	31 97       	sbiw	r30, 0x01	; 1
    2974:	20 81       	ld	r18, Z
    2976:	82 2b       	or	r24, r18
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	09 f4       	brne	.+2      	; 0x297e <find_volume+0x702>
    297c:	be ce       	rjmp	.-644    	; 0x26fa <find_volume+0x47e>
    297e:	f3 e0       	ldi	r31, 0x03	; 3
    2980:	f9 8b       	std	Y+17, r31	; 0x11
    2982:	66 cf       	rjmp	.-308    	; 0x2850 <find_volume+0x5d4>
    2984:	8f ef       	ldi	r24, 0xFF	; 255
    2986:	9f ef       	ldi	r25, 0xFF	; 255
    2988:	dc 01       	movw	r26, r24
    298a:	f8 01       	movw	r30, r16
    298c:	86 87       	std	Z+14, r24	; 0x0e
    298e:	97 87       	std	Z+15, r25	; 0x0f
    2990:	a0 8b       	std	Z+16, r26	; 0x10
    2992:	b1 8b       	std	Z+17, r27	; 0x11
    2994:	82 87       	std	Z+10, r24	; 0x0a
    2996:	93 87       	std	Z+11, r25	; 0x0b
    2998:	a4 87       	std	Z+12, r26	; 0x0c
    299a:	b5 87       	std	Z+13, r27	; 0x0d
    299c:	80 e8       	ldi	r24, 0x80	; 128
    299e:	85 83       	std	Z+5, r24	; 0x05
    29a0:	57 cf       	rjmp	.-338    	; 0x2850 <find_volume+0x5d4>
    29a2:	ff ef       	ldi	r31, 0xFF	; 255
    29a4:	4f 0e       	add	r4, r31
    29a6:	f1 e0       	ldi	r31, 0x01	; 1
    29a8:	5f 1e       	adc	r5, r31
    29aa:	61 1c       	adc	r6, r1
    29ac:	71 1c       	adc	r7, r1
    29ae:	03 2e       	mov	r0, r19
    29b0:	39 e0       	ldi	r19, 0x09	; 9
    29b2:	76 94       	lsr	r7
    29b4:	67 94       	ror	r6
    29b6:	57 94       	ror	r5
    29b8:	47 94       	ror	r4
    29ba:	3a 95       	dec	r19
    29bc:	d1 f7       	brne	.-12     	; 0x29b2 <find_volume+0x736>
    29be:	30 2d       	mov	r19, r0
    29c0:	84 14       	cp	r8, r4
    29c2:	95 04       	cpc	r9, r5
    29c4:	a6 04       	cpc	r10, r6
    29c6:	b7 04       	cpc	r11, r7
    29c8:	08 f4       	brcc	.+2      	; 0x29cc <find_volume+0x750>
    29ca:	7a cf       	rjmp	.-268    	; 0x28c0 <find_volume+0x644>
    29cc:	db cf       	rjmp	.-74     	; 0x2984 <find_volume+0x708>
    29ce:	6d 96       	adiw	r28, 0x1d	; 29
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
    29ec:	af 90       	pop	r10
    29ee:	9f 90       	pop	r9
    29f0:	8f 90       	pop	r8
    29f2:	7f 90       	pop	r7
    29f4:	6f 90       	pop	r6
    29f6:	5f 90       	pop	r5
    29f8:	4f 90       	pop	r4
    29fa:	3f 90       	pop	r3
    29fc:	2f 90       	pop	r2
    29fe:	08 95       	ret

00002a00 <clust2sect>:
    2a00:	cf 92       	push	r12
    2a02:	df 92       	push	r13
    2a04:	ef 92       	push	r14
    2a06:	ff 92       	push	r15
    2a08:	fc 01       	movw	r30, r24
    2a0a:	9a 01       	movw	r18, r20
    2a0c:	ab 01       	movw	r20, r22
    2a0e:	22 50       	subi	r18, 0x02	; 2
    2a10:	31 09       	sbc	r19, r1
    2a12:	41 09       	sbc	r20, r1
    2a14:	51 09       	sbc	r21, r1
    2a16:	c2 88       	ldd	r12, Z+18	; 0x12
    2a18:	d3 88       	ldd	r13, Z+19	; 0x13
    2a1a:	e4 88       	ldd	r14, Z+20	; 0x14
    2a1c:	f5 88       	ldd	r15, Z+21	; 0x15
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	c8 1a       	sub	r12, r24
    2a22:	d1 08       	sbc	r13, r1
    2a24:	e1 08       	sbc	r14, r1
    2a26:	f1 08       	sbc	r15, r1
    2a28:	2c 15       	cp	r18, r12
    2a2a:	3d 05       	cpc	r19, r13
    2a2c:	4e 05       	cpc	r20, r14
    2a2e:	5f 05       	cpc	r21, r15
    2a30:	68 f4       	brcc	.+26     	; 0x2a4c <clust2sect+0x4c>
    2a32:	a2 81       	ldd	r26, Z+2	; 0x02
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <__muluhisi3>
    2a3a:	c6 a0       	ldd	r12, Z+38	; 0x26
    2a3c:	d7 a0       	ldd	r13, Z+39	; 0x27
    2a3e:	e0 a4       	ldd	r14, Z+40	; 0x28
    2a40:	f1 a4       	ldd	r15, Z+41	; 0x29
    2a42:	6c 0d       	add	r22, r12
    2a44:	7d 1d       	adc	r23, r13
    2a46:	8e 1d       	adc	r24, r14
    2a48:	9f 1d       	adc	r25, r15
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <clust2sect+0x52>
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	cb 01       	movw	r24, r22
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
    2a5a:	08 95       	ret

00002a5c <get_fat>:
    2a5c:	af 92       	push	r10
    2a5e:	bf 92       	push	r11
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	ec 01       	movw	r28, r24
    2a72:	6a 01       	movw	r12, r20
    2a74:	7b 01       	movw	r14, r22
    2a76:	42 30       	cpi	r20, 0x02	; 2
    2a78:	51 05       	cpc	r21, r1
    2a7a:	61 05       	cpc	r22, r1
    2a7c:	71 05       	cpc	r23, r1
    2a7e:	08 f4       	brcc	.+2      	; 0x2a82 <get_fat+0x26>
    2a80:	c3 c0       	rjmp	.+390    	; 0x2c08 <get_fat+0x1ac>
    2a82:	8a 89       	ldd	r24, Y+18	; 0x12
    2a84:	9b 89       	ldd	r25, Y+19	; 0x13
    2a86:	ac 89       	ldd	r26, Y+20	; 0x14
    2a88:	bd 89       	ldd	r27, Y+21	; 0x15
    2a8a:	48 17       	cp	r20, r24
    2a8c:	59 07       	cpc	r21, r25
    2a8e:	6a 07       	cpc	r22, r26
    2a90:	7b 07       	cpc	r23, r27
    2a92:	08 f0       	brcs	.+2      	; 0x2a96 <get_fat+0x3a>
    2a94:	be c0       	rjmp	.+380    	; 0x2c12 <get_fat+0x1b6>
    2a96:	88 81       	ld	r24, Y
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <get_fat+0x42>
    2a9c:	4b c0       	rjmp	.+150    	; 0x2b34 <get_fat+0xd8>
    2a9e:	83 30       	cpi	r24, 0x03	; 3
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <get_fat+0x48>
    2aa2:	6c c0       	rjmp	.+216    	; 0x2b7c <get_fat+0x120>
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <get_fat+0x4e>
    2aa8:	b9 c0       	rjmp	.+370    	; 0x2c1c <get_fat+0x1c0>
    2aaa:	8a 01       	movw	r16, r20
    2aac:	16 95       	lsr	r17
    2aae:	07 95       	ror	r16
    2ab0:	04 0f       	add	r16, r20
    2ab2:	15 1f       	adc	r17, r21
    2ab4:	c8 01       	movw	r24, r16
    2ab6:	89 2f       	mov	r24, r25
    2ab8:	99 27       	eor	r25, r25
    2aba:	86 95       	lsr	r24
    2abc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2abe:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2ac0:	68 a1       	ldd	r22, Y+32	; 0x20
    2ac2:	79 a1       	ldd	r23, Y+33	; 0x21
    2ac4:	48 0f       	add	r20, r24
    2ac6:	59 1f       	adc	r21, r25
    2ac8:	61 1d       	adc	r22, r1
    2aca:	71 1d       	adc	r23, r1
    2acc:	ce 01       	movw	r24, r28
    2ace:	0d db       	rcall	.-2534   	; 0x20ea <move_window>
    2ad0:	81 11       	cpse	r24, r1
    2ad2:	a9 c0       	rjmp	.+338    	; 0x2c26 <get_fat+0x1ca>
    2ad4:	58 01       	movw	r10, r16
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	a8 1a       	sub	r10, r24
    2ada:	b8 0a       	sbc	r11, r24
    2adc:	11 70       	andi	r17, 0x01	; 1
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e0 0f       	add	r30, r16
    2ae2:	f1 1f       	adc	r31, r17
    2ae4:	16 a5       	ldd	r17, Z+46	; 0x2e
    2ae6:	c5 01       	movw	r24, r10
    2ae8:	89 2f       	mov	r24, r25
    2aea:	99 27       	eor	r25, r25
    2aec:	86 95       	lsr	r24
    2aee:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2af0:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2af2:	68 a1       	ldd	r22, Y+32	; 0x20
    2af4:	79 a1       	ldd	r23, Y+33	; 0x21
    2af6:	48 0f       	add	r20, r24
    2af8:	59 1f       	adc	r21, r25
    2afa:	61 1d       	adc	r22, r1
    2afc:	71 1d       	adc	r23, r1
    2afe:	ce 01       	movw	r24, r28
    2b00:	f4 da       	rcall	.-2584   	; 0x20ea <move_window>
    2b02:	81 11       	cpse	r24, r1
    2b04:	94 c0       	rjmp	.+296    	; 0x2c2e <get_fat+0x1d2>
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	b8 22       	and	r11, r24
    2b0a:	ca 0d       	add	r28, r10
    2b0c:	db 1d       	adc	r29, r11
    2b0e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b10:	61 2f       	mov	r22, r17
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	78 2b       	or	r23, r24
    2b16:	c0 fe       	sbrs	r12, 0
    2b18:	09 c0       	rjmp	.+18     	; 0x2b2c <get_fat+0xd0>
    2b1a:	72 95       	swap	r23
    2b1c:	62 95       	swap	r22
    2b1e:	6f 70       	andi	r22, 0x0F	; 15
    2b20:	67 27       	eor	r22, r23
    2b22:	7f 70       	andi	r23, 0x0F	; 15
    2b24:	67 27       	eor	r22, r23
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	8c c0       	rjmp	.+280    	; 0x2c44 <get_fat+0x1e8>
    2b2c:	7f 70       	andi	r23, 0x0F	; 15
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	88 c0       	rjmp	.+272    	; 0x2c44 <get_fat+0x1e8>
    2b34:	45 2f       	mov	r20, r21
    2b36:	56 2f       	mov	r21, r22
    2b38:	67 2f       	mov	r22, r23
    2b3a:	77 27       	eor	r23, r23
    2b3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b40:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b42:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b44:	48 0f       	add	r20, r24
    2b46:	59 1f       	adc	r21, r25
    2b48:	6a 1f       	adc	r22, r26
    2b4a:	7b 1f       	adc	r23, r27
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	cd da       	rcall	.-2662   	; 0x20ea <move_window>
    2b50:	81 11       	cpse	r24, r1
    2b52:	71 c0       	rjmp	.+226    	; 0x2c36 <get_fat+0x1da>
    2b54:	cc 0c       	add	r12, r12
    2b56:	dd 1c       	adc	r13, r13
    2b58:	ee 1c       	adc	r14, r14
    2b5a:	ff 1c       	adc	r15, r15
    2b5c:	e8 94       	clt
    2b5e:	c0 f8       	bld	r12, 0
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	d8 22       	and	r13, r24
    2b64:	ee 24       	eor	r14, r14
    2b66:	ff 24       	eor	r15, r15
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ec 0d       	add	r30, r12
    2b6c:	fd 1d       	adc	r31, r13
    2b6e:	66 a5       	ldd	r22, Z+46	; 0x2e
    2b70:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	78 2b       	or	r23, r24
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	64 c0       	rjmp	.+200    	; 0x2c44 <get_fat+0x1e8>
    2b7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b80:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b82:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b84:	68 94       	set
    2b86:	16 f8       	bld	r1, 6
    2b88:	76 95       	lsr	r23
    2b8a:	67 95       	ror	r22
    2b8c:	57 95       	ror	r21
    2b8e:	47 95       	ror	r20
    2b90:	16 94       	lsr	r1
    2b92:	d1 f7       	brne	.-12     	; 0x2b88 <get_fat+0x12c>
    2b94:	48 0f       	add	r20, r24
    2b96:	59 1f       	adc	r21, r25
    2b98:	6a 1f       	adc	r22, r26
    2b9a:	7b 1f       	adc	r23, r27
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	a5 da       	rcall	.-2742   	; 0x20ea <move_window>
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	4d c0       	rjmp	.+154    	; 0x2c3e <get_fat+0x1e2>
    2ba4:	cc 0c       	add	r12, r12
    2ba6:	dd 1c       	adc	r13, r13
    2ba8:	ee 1c       	adc	r14, r14
    2baa:	ff 1c       	adc	r15, r15
    2bac:	cc 0c       	add	r12, r12
    2bae:	dd 1c       	adc	r13, r13
    2bb0:	ee 1c       	adc	r14, r14
    2bb2:	ff 1c       	adc	r15, r15
    2bb4:	8c ef       	ldi	r24, 0xFC	; 252
    2bb6:	c8 22       	and	r12, r24
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	d8 22       	and	r13, r24
    2bbc:	ee 24       	eor	r14, r14
    2bbe:	ff 24       	eor	r15, r15
    2bc0:	f6 01       	movw	r30, r12
    2bc2:	be 96       	adiw	r30, 0x2e	; 46
    2bc4:	ec 0f       	add	r30, r28
    2bc6:	fd 1f       	adc	r31, r29
    2bc8:	22 81       	ldd	r18, Z+2	; 0x02
    2bca:	63 81       	ldd	r22, Z+3	; 0x03
    2bcc:	86 2f       	mov	r24, r22
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a0 e0       	ldi	r26, 0x00	; 0
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	b8 2f       	mov	r27, r24
    2bd6:	aa 27       	eor	r26, r26
    2bd8:	99 27       	eor	r25, r25
    2bda:	88 27       	eor	r24, r24
    2bdc:	ac 01       	movw	r20, r24
    2bde:	bd 01       	movw	r22, r26
    2be0:	62 2b       	or	r22, r18
    2be2:	81 81       	ldd	r24, Z+1	; 0x01
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	98 2f       	mov	r25, r24
    2be8:	88 27       	eor	r24, r24
    2bea:	a0 e0       	ldi	r26, 0x00	; 0
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	84 2b       	or	r24, r20
    2bf0:	95 2b       	or	r25, r21
    2bf2:	a6 2b       	or	r26, r22
    2bf4:	b7 2b       	or	r27, r23
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ec 0d       	add	r30, r12
    2bfa:	fd 1d       	adc	r31, r13
    2bfc:	26 a5       	ldd	r18, Z+46	; 0x2e
    2bfe:	82 2b       	or	r24, r18
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	9f 70       	andi	r25, 0x0F	; 15
    2c06:	1e c0       	rjmp	.+60     	; 0x2c44 <get_fat+0x1e8>
    2c08:	61 e0       	ldi	r22, 0x01	; 1
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	19 c0       	rjmp	.+50     	; 0x2c44 <get_fat+0x1e8>
    2c12:	61 e0       	ldi	r22, 0x01	; 1
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <get_fat+0x1e8>
    2c1c:	61 e0       	ldi	r22, 0x01	; 1
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <get_fat+0x1e8>
    2c26:	6f ef       	ldi	r22, 0xFF	; 255
    2c28:	7f ef       	ldi	r23, 0xFF	; 255
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	0b c0       	rjmp	.+22     	; 0x2c44 <get_fat+0x1e8>
    2c2e:	6f ef       	ldi	r22, 0xFF	; 255
    2c30:	7f ef       	ldi	r23, 0xFF	; 255
    2c32:	cb 01       	movw	r24, r22
    2c34:	07 c0       	rjmp	.+14     	; 0x2c44 <get_fat+0x1e8>
    2c36:	6f ef       	ldi	r22, 0xFF	; 255
    2c38:	7f ef       	ldi	r23, 0xFF	; 255
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	03 c0       	rjmp	.+6      	; 0x2c44 <get_fat+0x1e8>
    2c3e:	6f ef       	ldi	r22, 0xFF	; 255
    2c40:	7f ef       	ldi	r23, 0xFF	; 255
    2c42:	cb 01       	movw	r24, r22
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	ef 90       	pop	r14
    2c50:	df 90       	pop	r13
    2c52:	cf 90       	pop	r12
    2c54:	bf 90       	pop	r11
    2c56:	af 90       	pop	r10
    2c58:	08 95       	ret

00002c5a <dir_sdi>:
    2c5a:	af 92       	push	r10
    2c5c:	bf 92       	push	r11
    2c5e:	cf 92       	push	r12
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	ec 01       	movw	r28, r24
    2c70:	8b 01       	movw	r16, r22
    2c72:	7d 83       	std	Y+5, r23	; 0x05
    2c74:	6c 83       	std	Y+4, r22	; 0x04
    2c76:	ce 80       	ldd	r12, Y+6	; 0x06
    2c78:	df 80       	ldd	r13, Y+7	; 0x07
    2c7a:	e8 84       	ldd	r14, Y+8	; 0x08
    2c7c:	f9 84       	ldd	r15, Y+9	; 0x09
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	c8 16       	cp	r12, r24
    2c82:	d1 04       	cpc	r13, r1
    2c84:	e1 04       	cpc	r14, r1
    2c86:	f1 04       	cpc	r15, r1
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <dir_sdi+0x32>
    2c8a:	8a c0       	rjmp	.+276    	; 0x2da0 <dir_sdi+0x146>
    2c8c:	e8 81       	ld	r30, Y
    2c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c90:	82 89       	ldd	r24, Z+18	; 0x12
    2c92:	93 89       	ldd	r25, Z+19	; 0x13
    2c94:	a4 89       	ldd	r26, Z+20	; 0x14
    2c96:	b5 89       	ldd	r27, Z+21	; 0x15
    2c98:	c8 16       	cp	r12, r24
    2c9a:	d9 06       	cpc	r13, r25
    2c9c:	ea 06       	cpc	r14, r26
    2c9e:	fb 06       	cpc	r15, r27
    2ca0:	08 f0       	brcs	.+2      	; 0x2ca4 <dir_sdi+0x4a>
    2ca2:	80 c0       	rjmp	.+256    	; 0x2da4 <dir_sdi+0x14a>
    2ca4:	c1 14       	cp	r12, r1
    2ca6:	d1 04       	cpc	r13, r1
    2ca8:	e1 04       	cpc	r14, r1
    2caa:	f1 04       	cpc	r15, r1
    2cac:	c1 f4       	brne	.+48     	; 0x2cde <dir_sdi+0x84>
    2cae:	80 81       	ld	r24, Z
    2cb0:	83 30       	cpi	r24, 0x03	; 3
    2cb2:	41 f4       	brne	.+16     	; 0x2cc4 <dir_sdi+0x6a>
    2cb4:	82 a1       	ldd	r24, Z+34	; 0x22
    2cb6:	93 a1       	ldd	r25, Z+35	; 0x23
    2cb8:	a4 a1       	ldd	r26, Z+36	; 0x24
    2cba:	b5 a1       	ldd	r27, Z+37	; 0x25
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	a1 05       	cpc	r26, r1
    2cc0:	b1 05       	cpc	r27, r1
    2cc2:	59 f4       	brne	.+22     	; 0x2cda <dir_sdi+0x80>
    2cc4:	80 85       	ldd	r24, Z+8	; 0x08
    2cc6:	91 85       	ldd	r25, Z+9	; 0x09
    2cc8:	08 17       	cp	r16, r24
    2cca:	19 07       	cpc	r17, r25
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <dir_sdi+0x76>
    2cce:	6c c0       	rjmp	.+216    	; 0x2da8 <dir_sdi+0x14e>
    2cd0:	62 a1       	ldd	r22, Z+34	; 0x22
    2cd2:	73 a1       	ldd	r23, Z+35	; 0x23
    2cd4:	84 a1       	ldd	r24, Z+36	; 0x24
    2cd6:	95 a1       	ldd	r25, Z+37	; 0x25
    2cd8:	35 c0       	rjmp	.+106    	; 0x2d44 <dir_sdi+0xea>
    2cda:	6c 01       	movw	r12, r24
    2cdc:	7d 01       	movw	r14, r26
    2cde:	a2 80       	ldd	r10, Z+2	; 0x02
    2ce0:	80 e1       	ldi	r24, 0x10	; 16
    2ce2:	a8 9e       	mul	r10, r24
    2ce4:	50 01       	movw	r10, r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	0a 15       	cp	r16, r10
    2cea:	1b 05       	cpc	r17, r11
    2cec:	30 f1       	brcs	.+76     	; 0x2d3a <dir_sdi+0xe0>
    2cee:	b7 01       	movw	r22, r14
    2cf0:	a6 01       	movw	r20, r12
    2cf2:	88 81       	ld	r24, Y
    2cf4:	99 81       	ldd	r25, Y+1	; 0x01
    2cf6:	b2 de       	rcall	.-668    	; 0x2a5c <get_fat>
    2cf8:	6b 01       	movw	r12, r22
    2cfa:	7c 01       	movw	r14, r24
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	c8 16       	cp	r12, r24
    2d00:	d8 06       	cpc	r13, r24
    2d02:	e8 06       	cpc	r14, r24
    2d04:	f8 06       	cpc	r15, r24
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <dir_sdi+0xb0>
    2d08:	51 c0       	rjmp	.+162    	; 0x2dac <dir_sdi+0x152>
    2d0a:	82 e0       	ldi	r24, 0x02	; 2
    2d0c:	c8 16       	cp	r12, r24
    2d0e:	d1 04       	cpc	r13, r1
    2d10:	e1 04       	cpc	r14, r1
    2d12:	f1 04       	cpc	r15, r1
    2d14:	08 f4       	brcc	.+2      	; 0x2d18 <dir_sdi+0xbe>
    2d16:	4c c0       	rjmp	.+152    	; 0x2db0 <dir_sdi+0x156>
    2d18:	e8 81       	ld	r30, Y
    2d1a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d1c:	82 89       	ldd	r24, Z+18	; 0x12
    2d1e:	93 89       	ldd	r25, Z+19	; 0x13
    2d20:	a4 89       	ldd	r26, Z+20	; 0x14
    2d22:	b5 89       	ldd	r27, Z+21	; 0x15
    2d24:	c8 16       	cp	r12, r24
    2d26:	d9 06       	cpc	r13, r25
    2d28:	ea 06       	cpc	r14, r26
    2d2a:	fb 06       	cpc	r15, r27
    2d2c:	08 f0       	brcs	.+2      	; 0x2d30 <dir_sdi+0xd6>
    2d2e:	42 c0       	rjmp	.+132    	; 0x2db4 <dir_sdi+0x15a>
    2d30:	0a 19       	sub	r16, r10
    2d32:	1b 09       	sbc	r17, r11
    2d34:	0a 15       	cp	r16, r10
    2d36:	1b 05       	cpc	r17, r11
    2d38:	d0 f6       	brcc	.-76     	; 0x2cee <dir_sdi+0x94>
    2d3a:	b7 01       	movw	r22, r14
    2d3c:	a6 01       	movw	r20, r12
    2d3e:	88 81       	ld	r24, Y
    2d40:	99 81       	ldd	r25, Y+1	; 0x01
    2d42:	5e de       	rcall	.-836    	; 0x2a00 <clust2sect>
    2d44:	ca 86       	std	Y+10, r12	; 0x0a
    2d46:	db 86       	std	Y+11, r13	; 0x0b
    2d48:	ec 86       	std	Y+12, r14	; 0x0c
    2d4a:	fd 86       	std	Y+13, r15	; 0x0d
    2d4c:	61 15       	cp	r22, r1
    2d4e:	71 05       	cpc	r23, r1
    2d50:	81 05       	cpc	r24, r1
    2d52:	91 05       	cpc	r25, r1
    2d54:	89 f1       	breq	.+98     	; 0x2db8 <dir_sdi+0x15e>
    2d56:	98 01       	movw	r18, r16
    2d58:	32 95       	swap	r19
    2d5a:	22 95       	swap	r18
    2d5c:	2f 70       	andi	r18, 0x0F	; 15
    2d5e:	23 27       	eor	r18, r19
    2d60:	3f 70       	andi	r19, 0x0F	; 15
    2d62:	23 27       	eor	r18, r19
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	82 0f       	add	r24, r18
    2d6a:	93 1f       	adc	r25, r19
    2d6c:	a1 1d       	adc	r26, r1
    2d6e:	b1 1d       	adc	r27, r1
    2d70:	8e 87       	std	Y+14, r24	; 0x0e
    2d72:	9f 87       	std	Y+15, r25	; 0x0f
    2d74:	a8 8b       	std	Y+16, r26	; 0x10
    2d76:	b9 8b       	std	Y+17, r27	; 0x11
    2d78:	0f 70       	andi	r16, 0x0F	; 15
    2d7a:	11 27       	eor	r17, r17
    2d7c:	00 0f       	add	r16, r16
    2d7e:	11 1f       	adc	r17, r17
    2d80:	02 95       	swap	r16
    2d82:	12 95       	swap	r17
    2d84:	10 7f       	andi	r17, 0xF0	; 240
    2d86:	10 27       	eor	r17, r16
    2d88:	00 7f       	andi	r16, 0xF0	; 240
    2d8a:	10 27       	eor	r17, r16
    2d8c:	02 5d       	subi	r16, 0xD2	; 210
    2d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d90:	88 81       	ld	r24, Y
    2d92:	99 81       	ldd	r25, Y+1	; 0x01
    2d94:	80 0f       	add	r24, r16
    2d96:	91 1f       	adc	r25, r17
    2d98:	9b 8b       	std	Y+19, r25	; 0x13
    2d9a:	8a 8b       	std	Y+18, r24	; 0x12
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	0d c0       	rjmp	.+26     	; 0x2dba <dir_sdi+0x160>
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	0b c0       	rjmp	.+22     	; 0x2dba <dir_sdi+0x160>
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	09 c0       	rjmp	.+18     	; 0x2dba <dir_sdi+0x160>
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	07 c0       	rjmp	.+14     	; 0x2dba <dir_sdi+0x160>
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	05 c0       	rjmp	.+10     	; 0x2dba <dir_sdi+0x160>
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	03 c0       	rjmp	.+6      	; 0x2dba <dir_sdi+0x160>
    2db4:	82 e0       	ldi	r24, 0x02	; 2
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <dir_sdi+0x160>
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	ff 90       	pop	r15
    2dc4:	ef 90       	pop	r14
    2dc6:	df 90       	pop	r13
    2dc8:	cf 90       	pop	r12
    2dca:	bf 90       	pop	r11
    2dcc:	af 90       	pop	r10
    2dce:	08 95       	ret

00002dd0 <put_fat>:
    2dd0:	4f 92       	push	r4
    2dd2:	5f 92       	push	r5
    2dd4:	6f 92       	push	r6
    2dd6:	7f 92       	push	r7
    2dd8:	8f 92       	push	r8
    2dda:	9f 92       	push	r9
    2ddc:	af 92       	push	r10
    2dde:	bf 92       	push	r11
    2de0:	cf 92       	push	r12
    2de2:	df 92       	push	r13
    2de4:	ef 92       	push	r14
    2de6:	ff 92       	push	r15
    2de8:	0f 93       	push	r16
    2dea:	1f 93       	push	r17
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	ec 01       	movw	r28, r24
    2df2:	6a 01       	movw	r12, r20
    2df4:	7b 01       	movw	r14, r22
    2df6:	28 01       	movw	r4, r16
    2df8:	39 01       	movw	r6, r18
    2dfa:	42 30       	cpi	r20, 0x02	; 2
    2dfc:	51 05       	cpc	r21, r1
    2dfe:	61 05       	cpc	r22, r1
    2e00:	71 05       	cpc	r23, r1
    2e02:	08 f4       	brcc	.+2      	; 0x2e06 <put_fat+0x36>
    2e04:	d8 c0       	rjmp	.+432    	; 0x2fb6 <put_fat+0x1e6>
    2e06:	8a 89       	ldd	r24, Y+18	; 0x12
    2e08:	9b 89       	ldd	r25, Y+19	; 0x13
    2e0a:	ac 89       	ldd	r26, Y+20	; 0x14
    2e0c:	bd 89       	ldd	r27, Y+21	; 0x15
    2e0e:	48 17       	cp	r20, r24
    2e10:	59 07       	cpc	r21, r25
    2e12:	6a 07       	cpc	r22, r26
    2e14:	7b 07       	cpc	r23, r27
    2e16:	08 f0       	brcs	.+2      	; 0x2e1a <put_fat+0x4a>
    2e18:	d0 c0       	rjmp	.+416    	; 0x2fba <put_fat+0x1ea>
    2e1a:	88 81       	ld	r24, Y
    2e1c:	82 30       	cpi	r24, 0x02	; 2
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <put_fat+0x52>
    2e20:	62 c0       	rjmp	.+196    	; 0x2ee6 <put_fat+0x116>
    2e22:	83 30       	cpi	r24, 0x03	; 3
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <put_fat+0x58>
    2e26:	85 c0       	rjmp	.+266    	; 0x2f32 <put_fat+0x162>
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <put_fat+0x5e>
    2e2c:	c8 c0       	rjmp	.+400    	; 0x2fbe <put_fat+0x1ee>
    2e2e:	5a 01       	movw	r10, r20
    2e30:	b6 94       	lsr	r11
    2e32:	a7 94       	ror	r10
    2e34:	a4 0e       	add	r10, r20
    2e36:	b5 1e       	adc	r11, r21
    2e38:	c5 01       	movw	r24, r10
    2e3a:	89 2f       	mov	r24, r25
    2e3c:	99 27       	eor	r25, r25
    2e3e:	86 95       	lsr	r24
    2e40:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e42:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e44:	68 a1       	ldd	r22, Y+32	; 0x20
    2e46:	79 a1       	ldd	r23, Y+33	; 0x21
    2e48:	48 0f       	add	r20, r24
    2e4a:	59 1f       	adc	r21, r25
    2e4c:	61 1d       	adc	r22, r1
    2e4e:	71 1d       	adc	r23, r1
    2e50:	ce 01       	movw	r24, r28
    2e52:	4b d9       	rcall	.-3434   	; 0x20ea <move_window>
    2e54:	18 2f       	mov	r17, r24
    2e56:	81 11       	cpse	r24, r1
    2e58:	d0 c0       	rjmp	.+416    	; 0x2ffa <put_fat+0x22a>
    2e5a:	45 01       	movw	r8, r10
    2e5c:	8f ef       	ldi	r24, 0xFF	; 255
    2e5e:	88 1a       	sub	r8, r24
    2e60:	98 0a       	sbc	r9, r24
    2e62:	a1 e0       	ldi	r26, 0x01	; 1
    2e64:	ba 22       	and	r11, r26
    2e66:	c0 fe       	sbrs	r12, 0
    2e68:	20 c0       	rjmp	.+64     	; 0x2eaa <put_fat+0xda>
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ea 0d       	add	r30, r10
    2e6e:	fb 1d       	adc	r31, r11
    2e70:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e72:	28 2f       	mov	r18, r24
    2e74:	2f 70       	andi	r18, 0x0F	; 15
    2e76:	b0 e1       	ldi	r27, 0x10	; 16
    2e78:	4b 9e       	mul	r4, r27
    2e7a:	c0 01       	movw	r24, r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	82 2b       	or	r24, r18
    2e80:	86 a7       	std	Z+46, r24	; 0x2e
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	8c 83       	std	Y+4, r24	; 0x04
    2e86:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e88:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e8a:	68 a1       	ldd	r22, Y+32	; 0x20
    2e8c:	79 a1       	ldd	r23, Y+33	; 0x21
    2e8e:	c4 01       	movw	r24, r8
    2e90:	89 2f       	mov	r24, r25
    2e92:	99 27       	eor	r25, r25
    2e94:	86 95       	lsr	r24
    2e96:	48 0f       	add	r20, r24
    2e98:	59 1f       	adc	r21, r25
    2e9a:	61 1d       	adc	r22, r1
    2e9c:	71 1d       	adc	r23, r1
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	24 d9       	rcall	.-3512   	; 0x20ea <move_window>
    2ea2:	88 23       	and	r24, r24
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <put_fat+0xd8>
    2ea6:	91 c0       	rjmp	.+290    	; 0x2fca <put_fat+0x1fa>
    2ea8:	8c c0       	rjmp	.+280    	; 0x2fc2 <put_fat+0x1f2>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ea 0d       	add	r30, r10
    2eae:	fb 1d       	adc	r31, r11
    2eb0:	46 a6       	std	Z+46, r4	; 0x2e
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	8c 83       	std	Y+4, r24	; 0x04
    2eb6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2eb8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2eba:	68 a1       	ldd	r22, Y+32	; 0x20
    2ebc:	79 a1       	ldd	r23, Y+33	; 0x21
    2ebe:	c4 01       	movw	r24, r8
    2ec0:	89 2f       	mov	r24, r25
    2ec2:	99 27       	eor	r25, r25
    2ec4:	86 95       	lsr	r24
    2ec6:	48 0f       	add	r20, r24
    2ec8:	59 1f       	adc	r21, r25
    2eca:	61 1d       	adc	r22, r1
    2ecc:	71 1d       	adc	r23, r1
    2ece:	ce 01       	movw	r24, r28
    2ed0:	0c d9       	rcall	.-3560   	; 0x20ea <move_window>
    2ed2:	88 23       	and	r24, r24
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <put_fat+0x108>
    2ed6:	84 c0       	rjmp	.+264    	; 0x2fe0 <put_fat+0x210>
    2ed8:	76 c0       	rjmp	.+236    	; 0x2fc6 <put_fat+0x1f6>
    2eda:	ec 0f       	add	r30, r28
    2edc:	fd 1f       	adc	r31, r29
    2ede:	46 a6       	std	Z+46, r4	; 0x2e
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	8c 83       	std	Y+4, r24	; 0x04
    2ee4:	8a c0       	rjmp	.+276    	; 0x2ffa <put_fat+0x22a>
    2ee6:	45 2f       	mov	r20, r21
    2ee8:	56 2f       	mov	r21, r22
    2eea:	67 2f       	mov	r22, r23
    2eec:	77 27       	eor	r23, r23
    2eee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ef2:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ef4:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ef6:	48 0f       	add	r20, r24
    2ef8:	59 1f       	adc	r21, r25
    2efa:	6a 1f       	adc	r22, r26
    2efc:	7b 1f       	adc	r23, r27
    2efe:	ce 01       	movw	r24, r28
    2f00:	f4 d8       	rcall	.-3608   	; 0x20ea <move_window>
    2f02:	18 2f       	mov	r17, r24
    2f04:	81 11       	cpse	r24, r1
    2f06:	79 c0       	rjmp	.+242    	; 0x2ffa <put_fat+0x22a>
    2f08:	cc 0c       	add	r12, r12
    2f0a:	dd 1c       	adc	r13, r13
    2f0c:	ee 1c       	adc	r14, r14
    2f0e:	ff 1c       	adc	r15, r15
    2f10:	e8 94       	clt
    2f12:	c0 f8       	bld	r12, 0
    2f14:	31 e0       	ldi	r19, 0x01	; 1
    2f16:	d3 22       	and	r13, r19
    2f18:	ee 24       	eor	r14, r14
    2f1a:	ff 24       	eor	r15, r15
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ec 0d       	add	r30, r12
    2f20:	fd 1d       	adc	r31, r13
    2f22:	46 a6       	std	Z+46, r4	; 0x2e
    2f24:	fe 01       	movw	r30, r28
    2f26:	ec 0d       	add	r30, r12
    2f28:	fd 1d       	adc	r31, r13
    2f2a:	57 a6       	std	Z+47, r5	; 0x2f
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	8c 83       	std	Y+4, r24	; 0x04
    2f30:	64 c0       	rjmp	.+200    	; 0x2ffa <put_fat+0x22a>
    2f32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f34:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f36:	a8 a1       	ldd	r26, Y+32	; 0x20
    2f38:	b9 a1       	ldd	r27, Y+33	; 0x21
    2f3a:	68 94       	set
    2f3c:	16 f8       	bld	r1, 6
    2f3e:	76 95       	lsr	r23
    2f40:	67 95       	ror	r22
    2f42:	57 95       	ror	r21
    2f44:	47 95       	ror	r20
    2f46:	16 94       	lsr	r1
    2f48:	d1 f7       	brne	.-12     	; 0x2f3e <put_fat+0x16e>
    2f4a:	48 0f       	add	r20, r24
    2f4c:	59 1f       	adc	r21, r25
    2f4e:	6a 1f       	adc	r22, r26
    2f50:	7b 1f       	adc	r23, r27
    2f52:	ce 01       	movw	r24, r28
    2f54:	ca d8       	rcall	.-3692   	; 0x20ea <move_window>
    2f56:	18 2f       	mov	r17, r24
    2f58:	81 11       	cpse	r24, r1
    2f5a:	4f c0       	rjmp	.+158    	; 0x2ffa <put_fat+0x22a>
    2f5c:	cc 0c       	add	r12, r12
    2f5e:	dd 1c       	adc	r13, r13
    2f60:	ee 1c       	adc	r14, r14
    2f62:	ff 1c       	adc	r15, r15
    2f64:	cc 0c       	add	r12, r12
    2f66:	dd 1c       	adc	r13, r13
    2f68:	ee 1c       	adc	r14, r14
    2f6a:	ff 1c       	adc	r15, r15
    2f6c:	8c ef       	ldi	r24, 0xFC	; 252
    2f6e:	c8 22       	and	r12, r24
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	d8 22       	and	r13, r24
    2f74:	ee 24       	eor	r14, r14
    2f76:	ff 24       	eor	r15, r15
    2f78:	f6 01       	movw	r30, r12
    2f7a:	be 96       	adiw	r30, 0x2e	; 46
    2f7c:	ec 0f       	add	r30, r28
    2f7e:	fd 1f       	adc	r31, r29
    2f80:	83 81       	ldd	r24, Z+3	; 0x03
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	a0 e0       	ldi	r26, 0x00	; 0
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	b8 2f       	mov	r27, r24
    2f8a:	aa 27       	eor	r26, r26
    2f8c:	99 27       	eor	r25, r25
    2f8e:	88 27       	eor	r24, r24
    2f90:	cc 0e       	add	r12, r28
    2f92:	dd 1e       	adc	r13, r29
    2f94:	88 27       	eor	r24, r24
    2f96:	99 27       	eor	r25, r25
    2f98:	aa 27       	eor	r26, r26
    2f9a:	b0 7f       	andi	r27, 0xF0	; 240
    2f9c:	48 2a       	or	r4, r24
    2f9e:	59 2a       	or	r5, r25
    2fa0:	6a 2a       	or	r6, r26
    2fa2:	7b 2a       	or	r7, r27
    2fa4:	d6 01       	movw	r26, r12
    2fa6:	9e 96       	adiw	r26, 0x2e	; 46
    2fa8:	4c 92       	st	X, r4
    2faa:	51 82       	std	Z+1, r5	; 0x01
    2fac:	62 82       	std	Z+2, r6	; 0x02
    2fae:	73 82       	std	Z+3, r7	; 0x03
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	8c 83       	std	Y+4, r24	; 0x04
    2fb4:	22 c0       	rjmp	.+68     	; 0x2ffa <put_fat+0x22a>
    2fb6:	12 e0       	ldi	r17, 0x02	; 2
    2fb8:	20 c0       	rjmp	.+64     	; 0x2ffa <put_fat+0x22a>
    2fba:	12 e0       	ldi	r17, 0x02	; 2
    2fbc:	1e c0       	rjmp	.+60     	; 0x2ffa <put_fat+0x22a>
    2fbe:	12 e0       	ldi	r17, 0x02	; 2
    2fc0:	1c c0       	rjmp	.+56     	; 0x2ffa <put_fat+0x22a>
    2fc2:	18 2f       	mov	r17, r24
    2fc4:	1a c0       	rjmp	.+52     	; 0x2ffa <put_fat+0x22a>
    2fc6:	18 2f       	mov	r17, r24
    2fc8:	18 c0       	rjmp	.+48     	; 0x2ffa <put_fat+0x22a>
    2fca:	f4 01       	movw	r30, r8
    2fcc:	f1 70       	andi	r31, 0x01	; 1
    2fce:	68 94       	set
    2fd0:	13 f8       	bld	r1, 3
    2fd2:	76 94       	lsr	r7
    2fd4:	67 94       	ror	r6
    2fd6:	57 94       	ror	r5
    2fd8:	47 94       	ror	r4
    2fda:	16 94       	lsr	r1
    2fdc:	d1 f7       	brne	.-12     	; 0x2fd2 <put_fat+0x202>
    2fde:	7d cf       	rjmp	.-262    	; 0x2eda <put_fat+0x10a>
    2fe0:	f4 01       	movw	r30, r8
    2fe2:	f1 70       	andi	r31, 0x01	; 1
    2fe4:	de 01       	movw	r26, r28
    2fe6:	ae 0f       	add	r26, r30
    2fe8:	bf 1f       	adc	r27, r31
    2fea:	9e 96       	adiw	r26, 0x2e	; 46
    2fec:	9c 91       	ld	r25, X
    2fee:	90 7f       	andi	r25, 0xF0	; 240
    2ff0:	85 2d       	mov	r24, r5
    2ff2:	8f 70       	andi	r24, 0x0F	; 15
    2ff4:	49 2e       	mov	r4, r25
    2ff6:	48 2a       	or	r4, r24
    2ff8:	70 cf       	rjmp	.-288    	; 0x2eda <put_fat+0x10a>
    2ffa:	81 2f       	mov	r24, r17
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	1f 91       	pop	r17
    3002:	0f 91       	pop	r16
    3004:	ff 90       	pop	r15
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	bf 90       	pop	r11
    300e:	af 90       	pop	r10
    3010:	9f 90       	pop	r9
    3012:	8f 90       	pop	r8
    3014:	7f 90       	pop	r7
    3016:	6f 90       	pop	r6
    3018:	5f 90       	pop	r5
    301a:	4f 90       	pop	r4
    301c:	08 95       	ret

0000301e <create_chain>:
    301e:	2f 92       	push	r2
    3020:	3f 92       	push	r3
    3022:	4f 92       	push	r4
    3024:	5f 92       	push	r5
    3026:	6f 92       	push	r6
    3028:	7f 92       	push	r7
    302a:	8f 92       	push	r8
    302c:	9f 92       	push	r9
    302e:	af 92       	push	r10
    3030:	bf 92       	push	r11
    3032:	cf 92       	push	r12
    3034:	df 92       	push	r13
    3036:	ef 92       	push	r14
    3038:	ff 92       	push	r15
    303a:	0f 93       	push	r16
    303c:	1f 93       	push	r17
    303e:	cf 93       	push	r28
    3040:	df 93       	push	r29
    3042:	ec 01       	movw	r28, r24
    3044:	2a 01       	movw	r4, r20
    3046:	3b 01       	movw	r6, r22
    3048:	41 15       	cp	r20, r1
    304a:	51 05       	cpc	r21, r1
    304c:	61 05       	cpc	r22, r1
    304e:	71 05       	cpc	r23, r1
    3050:	b9 f4       	brne	.+46     	; 0x3080 <create_chain+0x62>
    3052:	8a 84       	ldd	r8, Y+10	; 0x0a
    3054:	9b 84       	ldd	r9, Y+11	; 0x0b
    3056:	ac 84       	ldd	r10, Y+12	; 0x0c
    3058:	bd 84       	ldd	r11, Y+13	; 0x0d
    305a:	81 14       	cp	r8, r1
    305c:	91 04       	cpc	r9, r1
    305e:	a1 04       	cpc	r10, r1
    3060:	b1 04       	cpc	r11, r1
    3062:	59 f1       	breq	.+86     	; 0x30ba <create_chain+0x9c>
    3064:	8a 89       	ldd	r24, Y+18	; 0x12
    3066:	9b 89       	ldd	r25, Y+19	; 0x13
    3068:	ac 89       	ldd	r26, Y+20	; 0x14
    306a:	bd 89       	ldd	r27, Y+21	; 0x15
    306c:	88 16       	cp	r8, r24
    306e:	99 06       	cpc	r9, r25
    3070:	aa 06       	cpc	r10, r26
    3072:	bb 06       	cpc	r11, r27
    3074:	30 f1       	brcs	.+76     	; 0x30c2 <create_chain+0xa4>
    3076:	81 2c       	mov	r8, r1
    3078:	91 2c       	mov	r9, r1
    307a:	54 01       	movw	r10, r8
    307c:	83 94       	inc	r8
    307e:	21 c0       	rjmp	.+66     	; 0x30c2 <create_chain+0xa4>
    3080:	ed dc       	rcall	.-1574   	; 0x2a5c <get_fat>
    3082:	6b 01       	movw	r12, r22
    3084:	7c 01       	movw	r14, r24
    3086:	62 30       	cpi	r22, 0x02	; 2
    3088:	71 05       	cpc	r23, r1
    308a:	81 05       	cpc	r24, r1
    308c:	91 05       	cpc	r25, r1
    308e:	08 f4       	brcc	.+2      	; 0x3092 <create_chain+0x74>
    3090:	96 c0       	rjmp	.+300    	; 0x31be <create_chain+0x1a0>
    3092:	8f ef       	ldi	r24, 0xFF	; 255
    3094:	c8 16       	cp	r12, r24
    3096:	d8 06       	cpc	r13, r24
    3098:	e8 06       	cpc	r14, r24
    309a:	f8 06       	cpc	r15, r24
    309c:	09 f4       	brne	.+2      	; 0x30a0 <create_chain+0x82>
    309e:	94 c0       	rjmp	.+296    	; 0x31c8 <create_chain+0x1aa>
    30a0:	8a 89       	ldd	r24, Y+18	; 0x12
    30a2:	9b 89       	ldd	r25, Y+19	; 0x13
    30a4:	ac 89       	ldd	r26, Y+20	; 0x14
    30a6:	bd 89       	ldd	r27, Y+21	; 0x15
    30a8:	c8 16       	cp	r12, r24
    30aa:	d9 06       	cpc	r13, r25
    30ac:	ea 06       	cpc	r14, r26
    30ae:	fb 06       	cpc	r15, r27
    30b0:	08 f4       	brcc	.+2      	; 0x30b4 <create_chain+0x96>
    30b2:	8f c0       	rjmp	.+286    	; 0x31d2 <create_chain+0x1b4>
    30b4:	53 01       	movw	r10, r6
    30b6:	42 01       	movw	r8, r4
    30b8:	04 c0       	rjmp	.+8      	; 0x30c2 <create_chain+0xa4>
    30ba:	81 2c       	mov	r8, r1
    30bc:	91 2c       	mov	r9, r1
    30be:	54 01       	movw	r10, r8
    30c0:	83 94       	inc	r8
    30c2:	75 01       	movw	r14, r10
    30c4:	64 01       	movw	r12, r8
    30c6:	68 94       	set
    30c8:	22 24       	eor	r2, r2
    30ca:	21 f8       	bld	r2, 1
    30cc:	31 2c       	mov	r3, r1
    30ce:	00 e0       	ldi	r16, 0x00	; 0
    30d0:	10 e0       	ldi	r17, 0x00	; 0
    30d2:	2f ef       	ldi	r18, 0xFF	; 255
    30d4:	c2 1a       	sub	r12, r18
    30d6:	d2 0a       	sbc	r13, r18
    30d8:	e2 0a       	sbc	r14, r18
    30da:	f2 0a       	sbc	r15, r18
    30dc:	8a 89       	ldd	r24, Y+18	; 0x12
    30de:	9b 89       	ldd	r25, Y+19	; 0x13
    30e0:	ac 89       	ldd	r26, Y+20	; 0x14
    30e2:	bd 89       	ldd	r27, Y+21	; 0x15
    30e4:	c8 16       	cp	r12, r24
    30e6:	d9 06       	cpc	r13, r25
    30e8:	ea 06       	cpc	r14, r26
    30ea:	fb 06       	cpc	r15, r27
    30ec:	58 f0       	brcs	.+22     	; 0x3104 <create_chain+0xe6>
    30ee:	82 e0       	ldi	r24, 0x02	; 2
    30f0:	88 16       	cp	r8, r24
    30f2:	91 04       	cpc	r9, r1
    30f4:	a1 04       	cpc	r10, r1
    30f6:	b1 04       	cpc	r11, r1
    30f8:	08 f4       	brcc	.+2      	; 0x30fc <create_chain+0xde>
    30fa:	70 c0       	rjmp	.+224    	; 0x31dc <create_chain+0x1be>
    30fc:	c2 2c       	mov	r12, r2
    30fe:	d3 2c       	mov	r13, r3
    3100:	e0 2e       	mov	r14, r16
    3102:	f1 2e       	mov	r15, r17
    3104:	b7 01       	movw	r22, r14
    3106:	a6 01       	movw	r20, r12
    3108:	ce 01       	movw	r24, r28
    310a:	a8 dc       	rcall	.-1712   	; 0x2a5c <get_fat>
    310c:	61 15       	cp	r22, r1
    310e:	71 05       	cpc	r23, r1
    3110:	81 05       	cpc	r24, r1
    3112:	91 05       	cpc	r25, r1
    3114:	99 f0       	breq	.+38     	; 0x313c <create_chain+0x11e>
    3116:	6f 3f       	cpi	r22, 0xFF	; 255
    3118:	2f ef       	ldi	r18, 0xFF	; 255
    311a:	72 07       	cpc	r23, r18
    311c:	82 07       	cpc	r24, r18
    311e:	92 07       	cpc	r25, r18
    3120:	09 f4       	brne	.+2      	; 0x3124 <create_chain+0x106>
    3122:	61 c0       	rjmp	.+194    	; 0x31e6 <create_chain+0x1c8>
    3124:	61 30       	cpi	r22, 0x01	; 1
    3126:	71 05       	cpc	r23, r1
    3128:	81 05       	cpc	r24, r1
    312a:	91 05       	cpc	r25, r1
    312c:	09 f4       	brne	.+2      	; 0x3130 <create_chain+0x112>
    312e:	60 c0       	rjmp	.+192    	; 0x31f0 <create_chain+0x1d2>
    3130:	c8 14       	cp	r12, r8
    3132:	d9 04       	cpc	r13, r9
    3134:	ea 04       	cpc	r14, r10
    3136:	fb 04       	cpc	r15, r11
    3138:	61 f6       	brne	.-104    	; 0x30d2 <create_chain+0xb4>
    313a:	5f c0       	rjmp	.+190    	; 0x31fa <create_chain+0x1dc>
    313c:	8c 2c       	mov	r8, r12
    313e:	9d 2c       	mov	r9, r13
    3140:	ae 2c       	mov	r10, r14
    3142:	bf 2c       	mov	r11, r15
    3144:	0f ef       	ldi	r16, 0xFF	; 255
    3146:	1f ef       	ldi	r17, 0xFF	; 255
    3148:	2f ef       	ldi	r18, 0xFF	; 255
    314a:	3f e0       	ldi	r19, 0x0F	; 15
    314c:	b7 01       	movw	r22, r14
    314e:	a6 01       	movw	r20, r12
    3150:	ce 01       	movw	r24, r28
    3152:	3e de       	rcall	.-900    	; 0x2dd0 <put_fat>
    3154:	81 11       	cpse	r24, r1
    3156:	2c c0       	rjmp	.+88     	; 0x31b0 <create_chain+0x192>
    3158:	41 14       	cp	r4, r1
    315a:	51 04       	cpc	r5, r1
    315c:	61 04       	cpc	r6, r1
    315e:	71 04       	cpc	r7, r1
    3160:	51 f0       	breq	.+20     	; 0x3176 <create_chain+0x158>
    3162:	0c 2d       	mov	r16, r12
    3164:	1d 2d       	mov	r17, r13
    3166:	2e 2d       	mov	r18, r14
    3168:	3f 2d       	mov	r19, r15
    316a:	b3 01       	movw	r22, r6
    316c:	a2 01       	movw	r20, r4
    316e:	ce 01       	movw	r24, r28
    3170:	2f de       	rcall	.-930    	; 0x2dd0 <put_fat>
    3172:	81 11       	cpse	r24, r1
    3174:	1d c0       	rjmp	.+58     	; 0x31b0 <create_chain+0x192>
    3176:	8a 86       	std	Y+10, r8	; 0x0a
    3178:	9b 86       	std	Y+11, r9	; 0x0b
    317a:	ac 86       	std	Y+12, r10	; 0x0c
    317c:	bd 86       	std	Y+13, r11	; 0x0d
    317e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3180:	9f 85       	ldd	r25, Y+15	; 0x0f
    3182:	a8 89       	ldd	r26, Y+16	; 0x10
    3184:	b9 89       	ldd	r27, Y+17	; 0x11
    3186:	8f 3f       	cpi	r24, 0xFF	; 255
    3188:	2f ef       	ldi	r18, 0xFF	; 255
    318a:	92 07       	cpc	r25, r18
    318c:	a2 07       	cpc	r26, r18
    318e:	b2 07       	cpc	r27, r18
    3190:	c9 f1       	breq	.+114    	; 0x3204 <create_chain+0x1e6>
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	a1 09       	sbc	r26, r1
    3196:	b1 09       	sbc	r27, r1
    3198:	8e 87       	std	Y+14, r24	; 0x0e
    319a:	9f 87       	std	Y+15, r25	; 0x0f
    319c:	a8 8b       	std	Y+16, r26	; 0x10
    319e:	b9 8b       	std	Y+17, r27	; 0x11
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	81 60       	ori	r24, 0x01	; 1
    31a4:	8d 83       	std	Y+5, r24	; 0x05
    31a6:	6c 2d       	mov	r22, r12
    31a8:	7d 2d       	mov	r23, r13
    31aa:	8e 2d       	mov	r24, r14
    31ac:	9f 2d       	mov	r25, r15
    31ae:	33 c0       	rjmp	.+102    	; 0x3216 <create_chain+0x1f8>
    31b0:	81 30       	cpi	r24, 0x01	; 1
    31b2:	69 f1       	breq	.+90     	; 0x320e <create_chain+0x1f0>
    31b4:	61 e0       	ldi	r22, 0x01	; 1
    31b6:	70 e0       	ldi	r23, 0x00	; 0
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	2c c0       	rjmp	.+88     	; 0x3216 <create_chain+0x1f8>
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	27 c0       	rjmp	.+78     	; 0x3216 <create_chain+0x1f8>
    31c8:	6f ef       	ldi	r22, 0xFF	; 255
    31ca:	7f ef       	ldi	r23, 0xFF	; 255
    31cc:	8f ef       	ldi	r24, 0xFF	; 255
    31ce:	9f ef       	ldi	r25, 0xFF	; 255
    31d0:	22 c0       	rjmp	.+68     	; 0x3216 <create_chain+0x1f8>
    31d2:	6c 2d       	mov	r22, r12
    31d4:	7d 2d       	mov	r23, r13
    31d6:	8e 2d       	mov	r24, r14
    31d8:	9f 2d       	mov	r25, r15
    31da:	1d c0       	rjmp	.+58     	; 0x3216 <create_chain+0x1f8>
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	18 c0       	rjmp	.+48     	; 0x3216 <create_chain+0x1f8>
    31e6:	6f ef       	ldi	r22, 0xFF	; 255
    31e8:	7f ef       	ldi	r23, 0xFF	; 255
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	9f ef       	ldi	r25, 0xFF	; 255
    31ee:	13 c0       	rjmp	.+38     	; 0x3216 <create_chain+0x1f8>
    31f0:	61 e0       	ldi	r22, 0x01	; 1
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e c0       	rjmp	.+28     	; 0x3216 <create_chain+0x1f8>
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	70 e0       	ldi	r23, 0x00	; 0
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	09 c0       	rjmp	.+18     	; 0x3216 <create_chain+0x1f8>
    3204:	6c 2d       	mov	r22, r12
    3206:	7d 2d       	mov	r23, r13
    3208:	8e 2d       	mov	r24, r14
    320a:	9f 2d       	mov	r25, r15
    320c:	04 c0       	rjmp	.+8      	; 0x3216 <create_chain+0x1f8>
    320e:	6f ef       	ldi	r22, 0xFF	; 255
    3210:	7f ef       	ldi	r23, 0xFF	; 255
    3212:	8f ef       	ldi	r24, 0xFF	; 255
    3214:	9f ef       	ldi	r25, 0xFF	; 255
    3216:	df 91       	pop	r29
    3218:	cf 91       	pop	r28
    321a:	1f 91       	pop	r17
    321c:	0f 91       	pop	r16
    321e:	ff 90       	pop	r15
    3220:	ef 90       	pop	r14
    3222:	df 90       	pop	r13
    3224:	cf 90       	pop	r12
    3226:	bf 90       	pop	r11
    3228:	af 90       	pop	r10
    322a:	9f 90       	pop	r9
    322c:	8f 90       	pop	r8
    322e:	7f 90       	pop	r7
    3230:	6f 90       	pop	r6
    3232:	5f 90       	pop	r5
    3234:	4f 90       	pop	r4
    3236:	3f 90       	pop	r3
    3238:	2f 90       	pop	r2
    323a:	08 95       	ret

0000323c <dir_next>:
    323c:	7f 92       	push	r7
    323e:	8f 92       	push	r8
    3240:	9f 92       	push	r9
    3242:	af 92       	push	r10
    3244:	bf 92       	push	r11
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	dc 01       	movw	r26, r24
    3258:	14 96       	adiw	r26, 0x04	; 4
    325a:	cd 91       	ld	r28, X+
    325c:	dc 91       	ld	r29, X
    325e:	15 97       	sbiw	r26, 0x05	; 5
    3260:	21 96       	adiw	r28, 0x01	; 1
    3262:	09 f4       	brne	.+2      	; 0x3266 <dir_next+0x2a>
    3264:	03 c1       	rjmp	.+518    	; 0x346c <dir_next+0x230>
    3266:	1e 96       	adiw	r26, 0x0e	; 14
    3268:	8d 90       	ld	r8, X+
    326a:	9d 90       	ld	r9, X+
    326c:	ad 90       	ld	r10, X+
    326e:	bc 90       	ld	r11, X
    3270:	51 97       	sbiw	r26, 0x11	; 17
    3272:	81 14       	cp	r8, r1
    3274:	91 04       	cpc	r9, r1
    3276:	a1 04       	cpc	r10, r1
    3278:	b1 04       	cpc	r11, r1
    327a:	09 f4       	brne	.+2      	; 0x327e <dir_next+0x42>
    327c:	f9 c0       	rjmp	.+498    	; 0x3470 <dir_next+0x234>
    327e:	7b 01       	movw	r14, r22
    3280:	8c 01       	movw	r16, r24
    3282:	6e 01       	movw	r12, r28
    3284:	bf e0       	ldi	r27, 0x0F	; 15
    3286:	cb 22       	and	r12, r27
    3288:	dd 24       	eor	r13, r13
    328a:	c1 14       	cp	r12, r1
    328c:	d1 04       	cpc	r13, r1
    328e:	09 f0       	breq	.+2      	; 0x3292 <dir_next+0x56>
    3290:	d1 c0       	rjmp	.+418    	; 0x3434 <dir_next+0x1f8>
    3292:	ef ef       	ldi	r30, 0xFF	; 255
    3294:	8e 1a       	sub	r8, r30
    3296:	9e 0a       	sbc	r9, r30
    3298:	ae 0a       	sbc	r10, r30
    329a:	be 0a       	sbc	r11, r30
    329c:	dc 01       	movw	r26, r24
    329e:	1e 96       	adiw	r26, 0x0e	; 14
    32a0:	8d 92       	st	X+, r8
    32a2:	9d 92       	st	X+, r9
    32a4:	ad 92       	st	X+, r10
    32a6:	bc 92       	st	X, r11
    32a8:	51 97       	sbiw	r26, 0x11	; 17
    32aa:	1a 96       	adiw	r26, 0x0a	; 10
    32ac:	4d 91       	ld	r20, X+
    32ae:	5d 91       	ld	r21, X+
    32b0:	6d 91       	ld	r22, X+
    32b2:	7c 91       	ld	r23, X
    32b4:	1d 97       	sbiw	r26, 0x0d	; 13
    32b6:	41 15       	cp	r20, r1
    32b8:	51 05       	cpc	r21, r1
    32ba:	61 05       	cpc	r22, r1
    32bc:	71 05       	cpc	r23, r1
    32be:	49 f4       	brne	.+18     	; 0x32d2 <dir_next+0x96>
    32c0:	ed 91       	ld	r30, X+
    32c2:	fc 91       	ld	r31, X
    32c4:	80 85       	ldd	r24, Z+8	; 0x08
    32c6:	91 85       	ldd	r25, Z+9	; 0x09
    32c8:	c8 17       	cp	r28, r24
    32ca:	d9 07       	cpc	r29, r25
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <dir_next+0x94>
    32ce:	d2 c0       	rjmp	.+420    	; 0x3474 <dir_next+0x238>
    32d0:	b1 c0       	rjmp	.+354    	; 0x3434 <dir_next+0x1f8>
    32d2:	dc 01       	movw	r26, r24
    32d4:	ed 91       	ld	r30, X+
    32d6:	fc 91       	ld	r31, X
    32d8:	22 81       	ldd	r18, Z+2	; 0x02
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	21 50       	subi	r18, 0x01	; 1
    32de:	31 09       	sbc	r19, r1
    32e0:	ce 01       	movw	r24, r28
    32e2:	92 95       	swap	r25
    32e4:	82 95       	swap	r24
    32e6:	8f 70       	andi	r24, 0x0F	; 15
    32e8:	89 27       	eor	r24, r25
    32ea:	9f 70       	andi	r25, 0x0F	; 15
    32ec:	89 27       	eor	r24, r25
    32ee:	28 23       	and	r18, r24
    32f0:	39 23       	and	r19, r25
    32f2:	23 2b       	or	r18, r19
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <dir_next+0xbc>
    32f6:	9e c0       	rjmp	.+316    	; 0x3434 <dir_next+0x1f8>
    32f8:	cf 01       	movw	r24, r30
    32fa:	b0 db       	rcall	.-2208   	; 0x2a5c <get_fat>
    32fc:	4b 01       	movw	r8, r22
    32fe:	5c 01       	movw	r10, r24
    3300:	62 30       	cpi	r22, 0x02	; 2
    3302:	71 05       	cpc	r23, r1
    3304:	81 05       	cpc	r24, r1
    3306:	91 05       	cpc	r25, r1
    3308:	08 f4       	brcc	.+2      	; 0x330c <dir_next+0xd0>
    330a:	b6 c0       	rjmp	.+364    	; 0x3478 <dir_next+0x23c>
    330c:	6f 3f       	cpi	r22, 0xFF	; 255
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	8f 4f       	sbci	r24, 0xFF	; 255
    3312:	9f 4f       	sbci	r25, 0xFF	; 255
    3314:	09 f4       	brne	.+2      	; 0x3318 <dir_next+0xdc>
    3316:	b2 c0       	rjmp	.+356    	; 0x347c <dir_next+0x240>
    3318:	d8 01       	movw	r26, r16
    331a:	ed 91       	ld	r30, X+
    331c:	fc 91       	ld	r31, X
    331e:	82 89       	ldd	r24, Z+18	; 0x12
    3320:	93 89       	ldd	r25, Z+19	; 0x13
    3322:	a4 89       	ldd	r26, Z+20	; 0x14
    3324:	b5 89       	ldd	r27, Z+21	; 0x15
    3326:	88 16       	cp	r8, r24
    3328:	99 06       	cpc	r9, r25
    332a:	aa 06       	cpc	r10, r26
    332c:	bb 06       	cpc	r11, r27
    332e:	08 f4       	brcc	.+2      	; 0x3332 <dir_next+0xf6>
    3330:	70 c0       	rjmp	.+224    	; 0x3412 <dir_next+0x1d6>
    3332:	ef 28       	or	r14, r15
    3334:	09 f4       	brne	.+2      	; 0x3338 <dir_next+0xfc>
    3336:	a4 c0       	rjmp	.+328    	; 0x3480 <dir_next+0x244>
    3338:	d8 01       	movw	r26, r16
    333a:	1a 96       	adiw	r26, 0x0a	; 10
    333c:	4d 91       	ld	r20, X+
    333e:	5d 91       	ld	r21, X+
    3340:	6d 91       	ld	r22, X+
    3342:	7c 91       	ld	r23, X
    3344:	1d 97       	sbiw	r26, 0x0d	; 13
    3346:	cf 01       	movw	r24, r30
    3348:	6a de       	rcall	.-812    	; 0x301e <create_chain>
    334a:	4b 01       	movw	r8, r22
    334c:	5c 01       	movw	r10, r24
    334e:	61 15       	cp	r22, r1
    3350:	71 05       	cpc	r23, r1
    3352:	81 05       	cpc	r24, r1
    3354:	91 05       	cpc	r25, r1
    3356:	09 f4       	brne	.+2      	; 0x335a <dir_next+0x11e>
    3358:	95 c0       	rjmp	.+298    	; 0x3484 <dir_next+0x248>
    335a:	61 30       	cpi	r22, 0x01	; 1
    335c:	71 05       	cpc	r23, r1
    335e:	81 05       	cpc	r24, r1
    3360:	91 05       	cpc	r25, r1
    3362:	09 f4       	brne	.+2      	; 0x3366 <dir_next+0x12a>
    3364:	91 c0       	rjmp	.+290    	; 0x3488 <dir_next+0x24c>
    3366:	6f 3f       	cpi	r22, 0xFF	; 255
    3368:	7f 4f       	sbci	r23, 0xFF	; 255
    336a:	8f 4f       	sbci	r24, 0xFF	; 255
    336c:	9f 4f       	sbci	r25, 0xFF	; 255
    336e:	09 f4       	brne	.+2      	; 0x3372 <dir_next+0x136>
    3370:	8d c0       	rjmp	.+282    	; 0x348c <dir_next+0x250>
    3372:	d8 01       	movw	r26, r16
    3374:	8d 91       	ld	r24, X+
    3376:	9c 91       	ld	r25, X
    3378:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_window>
    337c:	81 11       	cpse	r24, r1
    337e:	88 c0       	rjmp	.+272    	; 0x3490 <dir_next+0x254>
    3380:	f8 01       	movw	r30, r16
    3382:	80 81       	ld	r24, Z
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	fc 01       	movw	r30, r24
    3388:	be 96       	adiw	r30, 0x2e	; 46
    338a:	82 5d       	subi	r24, 0xD2	; 210
    338c:	9d 4f       	sbci	r25, 0xFD	; 253
    338e:	11 92       	st	Z+, r1
    3390:	e8 17       	cp	r30, r24
    3392:	f9 07       	cpc	r31, r25
    3394:	e1 f7       	brne	.-8      	; 0x338e <dir_next+0x152>
    3396:	d8 01       	movw	r26, r16
    3398:	ed 90       	ld	r14, X+
    339a:	fc 90       	ld	r15, X
    339c:	b5 01       	movw	r22, r10
    339e:	a4 01       	movw	r20, r8
    33a0:	c7 01       	movw	r24, r14
    33a2:	2e db       	rcall	.-2468   	; 0x2a00 <clust2sect>
    33a4:	f7 01       	movw	r30, r14
    33a6:	62 a7       	std	Z+42, r22	; 0x2a
    33a8:	73 a7       	std	Z+43, r23	; 0x2b
    33aa:	84 a7       	std	Z+44, r24	; 0x2c
    33ac:	95 a7       	std	Z+45, r25	; 0x2d
    33ae:	e1 2c       	mov	r14, r1
    33b0:	f1 2c       	mov	r15, r1
    33b2:	77 24       	eor	r7, r7
    33b4:	73 94       	inc	r7
    33b6:	19 c0       	rjmp	.+50     	; 0x33ea <dir_next+0x1ae>
    33b8:	74 82       	std	Z+4, r7	; 0x04
    33ba:	d8 01       	movw	r26, r16
    33bc:	8d 91       	ld	r24, X+
    33be:	9c 91       	ld	r25, X
    33c0:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_window>
    33c4:	81 11       	cpse	r24, r1
    33c6:	66 c0       	rjmp	.+204    	; 0x3494 <dir_next+0x258>
    33c8:	d8 01       	movw	r26, r16
    33ca:	ed 91       	ld	r30, X+
    33cc:	fc 91       	ld	r31, X
    33ce:	82 a5       	ldd	r24, Z+42	; 0x2a
    33d0:	93 a5       	ldd	r25, Z+43	; 0x2b
    33d2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    33d4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    33d6:	01 96       	adiw	r24, 0x01	; 1
    33d8:	a1 1d       	adc	r26, r1
    33da:	b1 1d       	adc	r27, r1
    33dc:	82 a7       	std	Z+42, r24	; 0x2a
    33de:	93 a7       	std	Z+43, r25	; 0x2b
    33e0:	a4 a7       	std	Z+44, r26	; 0x2c
    33e2:	b5 a7       	std	Z+45, r27	; 0x2d
    33e4:	bf ef       	ldi	r27, 0xFF	; 255
    33e6:	eb 1a       	sub	r14, r27
    33e8:	fb 0a       	sbc	r15, r27
    33ea:	d8 01       	movw	r26, r16
    33ec:	ed 91       	ld	r30, X+
    33ee:	fc 91       	ld	r31, X
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	e8 16       	cp	r14, r24
    33f6:	f9 06       	cpc	r15, r25
    33f8:	f8 f2       	brcs	.-66     	; 0x33b8 <dir_next+0x17c>
    33fa:	82 a5       	ldd	r24, Z+42	; 0x2a
    33fc:	93 a5       	ldd	r25, Z+43	; 0x2b
    33fe:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3400:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3402:	8e 19       	sub	r24, r14
    3404:	9f 09       	sbc	r25, r15
    3406:	a1 09       	sbc	r26, r1
    3408:	b1 09       	sbc	r27, r1
    340a:	82 a7       	std	Z+42, r24	; 0x2a
    340c:	93 a7       	std	Z+43, r25	; 0x2b
    340e:	a4 a7       	std	Z+44, r26	; 0x2c
    3410:	b5 a7       	std	Z+45, r27	; 0x2d
    3412:	f8 01       	movw	r30, r16
    3414:	82 86       	std	Z+10, r8	; 0x0a
    3416:	93 86       	std	Z+11, r9	; 0x0b
    3418:	a4 86       	std	Z+12, r10	; 0x0c
    341a:	b5 86       	std	Z+13, r11	; 0x0d
    341c:	b5 01       	movw	r22, r10
    341e:	a4 01       	movw	r20, r8
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	ed da       	rcall	.-2598   	; 0x2a00 <clust2sect>
    3426:	d8 01       	movw	r26, r16
    3428:	1e 96       	adiw	r26, 0x0e	; 14
    342a:	6d 93       	st	X+, r22
    342c:	7d 93       	st	X+, r23
    342e:	8d 93       	st	X+, r24
    3430:	9c 93       	st	X, r25
    3432:	51 97       	sbiw	r26, 0x11	; 17
    3434:	f8 01       	movw	r30, r16
    3436:	d5 83       	std	Z+5, r29	; 0x05
    3438:	c4 83       	std	Z+4, r28	; 0x04
    343a:	cc 0c       	add	r12, r12
    343c:	dd 1c       	adc	r13, r13
    343e:	cc 0c       	add	r12, r12
    3440:	dd 1c       	adc	r13, r13
    3442:	cc 0c       	add	r12, r12
    3444:	dd 1c       	adc	r13, r13
    3446:	cc 0c       	add	r12, r12
    3448:	dd 1c       	adc	r13, r13
    344a:	cc 0c       	add	r12, r12
    344c:	dd 1c       	adc	r13, r13
    344e:	fe e2       	ldi	r31, 0x2E	; 46
    3450:	cf 0e       	add	r12, r31
    3452:	d1 1c       	adc	r13, r1
    3454:	d8 01       	movw	r26, r16
    3456:	8d 91       	ld	r24, X+
    3458:	9c 91       	ld	r25, X
    345a:	11 97       	sbiw	r26, 0x01	; 1
    345c:	c8 0e       	add	r12, r24
    345e:	d9 1e       	adc	r13, r25
    3460:	53 96       	adiw	r26, 0x13	; 19
    3462:	dc 92       	st	X, r13
    3464:	ce 92       	st	-X, r12
    3466:	52 97       	sbiw	r26, 0x12	; 18
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	15 c0       	rjmp	.+42     	; 0x3496 <dir_next+0x25a>
    346c:	84 e0       	ldi	r24, 0x04	; 4
    346e:	13 c0       	rjmp	.+38     	; 0x3496 <dir_next+0x25a>
    3470:	84 e0       	ldi	r24, 0x04	; 4
    3472:	11 c0       	rjmp	.+34     	; 0x3496 <dir_next+0x25a>
    3474:	84 e0       	ldi	r24, 0x04	; 4
    3476:	0f c0       	rjmp	.+30     	; 0x3496 <dir_next+0x25a>
    3478:	82 e0       	ldi	r24, 0x02	; 2
    347a:	0d c0       	rjmp	.+26     	; 0x3496 <dir_next+0x25a>
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	0b c0       	rjmp	.+22     	; 0x3496 <dir_next+0x25a>
    3480:	84 e0       	ldi	r24, 0x04	; 4
    3482:	09 c0       	rjmp	.+18     	; 0x3496 <dir_next+0x25a>
    3484:	87 e0       	ldi	r24, 0x07	; 7
    3486:	07 c0       	rjmp	.+14     	; 0x3496 <dir_next+0x25a>
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	05 c0       	rjmp	.+10     	; 0x3496 <dir_next+0x25a>
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	03 c0       	rjmp	.+6      	; 0x3496 <dir_next+0x25a>
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	01 c0       	rjmp	.+2      	; 0x3496 <dir_next+0x25a>
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	ff 90       	pop	r15
    34a0:	ef 90       	pop	r14
    34a2:	df 90       	pop	r13
    34a4:	cf 90       	pop	r12
    34a6:	bf 90       	pop	r11
    34a8:	af 90       	pop	r10
    34aa:	9f 90       	pop	r9
    34ac:	8f 90       	pop	r8
    34ae:	7f 90       	pop	r7
    34b0:	08 95       	ret

000034b2 <f_mount>:
    34b2:	1f 93       	push	r17
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	00 d0       	rcall	.+0      	; 0x34ba <f_mount+0x8>
    34ba:	00 d0       	rcall	.+0      	; 0x34bc <f_mount+0xa>
    34bc:	00 d0       	rcall	.+0      	; 0x34be <f_mount+0xc>
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	9c 83       	std	Y+4, r25	; 0x04
    34c4:	8b 83       	std	Y+3, r24	; 0x03
    34c6:	7e 83       	std	Y+6, r23	; 0x06
    34c8:	6d 83       	std	Y+5, r22	; 0x05
    34ca:	14 2f       	mov	r17, r20
    34cc:	7a 83       	std	Y+2, r23	; 0x02
    34ce:	69 83       	std	Y+1, r22	; 0x01
    34d0:	ce 01       	movw	r24, r28
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <get_ldnumber>
    34d8:	99 23       	and	r25, r25
    34da:	34 f1       	brlt	.+76     	; 0x3528 <f_mount+0x76>
    34dc:	fc 01       	movw	r30, r24
    34de:	ee 0f       	add	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	e3 5d       	subi	r30, 0xD3	; 211
    34e4:	fb 4f       	sbci	r31, 0xFB	; 251
    34e6:	01 90       	ld	r0, Z+
    34e8:	f0 81       	ld	r31, Z
    34ea:	e0 2d       	mov	r30, r0
    34ec:	30 97       	sbiw	r30, 0x00	; 0
    34ee:	09 f0       	breq	.+2      	; 0x34f2 <f_mount+0x40>
    34f0:	10 82       	st	Z, r1
    34f2:	eb 81       	ldd	r30, Y+3	; 0x03
    34f4:	fc 81       	ldd	r31, Y+4	; 0x04
    34f6:	30 97       	sbiw	r30, 0x00	; 0
    34f8:	e9 f0       	breq	.+58     	; 0x3534 <f_mount+0x82>
    34fa:	10 82       	st	Z, r1
    34fc:	2b 81       	ldd	r18, Y+3	; 0x03
    34fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	fc 01       	movw	r30, r24
    3506:	e3 5d       	subi	r30, 0xD3	; 211
    3508:	fb 4f       	sbci	r31, 0xFB	; 251
    350a:	31 83       	std	Z+1, r19	; 0x01
    350c:	20 83       	st	Z, r18
    350e:	23 2b       	or	r18, r19
    3510:	69 f0       	breq	.+26     	; 0x352c <f_mount+0x7a>
    3512:	11 30       	cpi	r17, 0x01	; 1
    3514:	69 f4       	brne	.+26     	; 0x3530 <f_mount+0x7e>
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	be 01       	movw	r22, r28
    351a:	6b 5f       	subi	r22, 0xFB	; 251
    351c:	7f 4f       	sbci	r23, 0xFF	; 255
    351e:	ce 01       	movw	r24, r28
    3520:	03 96       	adiw	r24, 0x03	; 3
    3522:	0e 94 3e 11 	call	0x227c	; 0x227c <find_volume>
    3526:	0e c0       	rjmp	.+28     	; 0x3544 <f_mount+0x92>
    3528:	8b e0       	ldi	r24, 0x0B	; 11
    352a:	0c c0       	rjmp	.+24     	; 0x3544 <f_mount+0x92>
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	0a c0       	rjmp	.+20     	; 0x3544 <f_mount+0x92>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	08 c0       	rjmp	.+16     	; 0x3544 <f_mount+0x92>
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	fc 01       	movw	r30, r24
    353a:	e3 5d       	subi	r30, 0xD3	; 211
    353c:	fb 4f       	sbci	r31, 0xFB	; 251
    353e:	11 82       	std	Z+1, r1	; 0x01
    3540:	10 82       	st	Z, r1
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	26 96       	adiw	r28, 0x06	; 6
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	1f 91       	pop	r17
    3556:	08 95       	ret

00003558 <f_open>:
    3558:	2f 92       	push	r2
    355a:	3f 92       	push	r3
    355c:	4f 92       	push	r4
    355e:	5f 92       	push	r5
    3560:	6f 92       	push	r6
    3562:	7f 92       	push	r7
    3564:	8f 92       	push	r8
    3566:	9f 92       	push	r9
    3568:	af 92       	push	r10
    356a:	bf 92       	push	r11
    356c:	cf 92       	push	r12
    356e:	df 92       	push	r13
    3570:	ef 92       	push	r14
    3572:	ff 92       	push	r15
    3574:	0f 93       	push	r16
    3576:	1f 93       	push	r17
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	ae 97       	sbiw	r28, 0x2e	; 46
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	7c a3       	std	Y+36, r23	; 0x24
    358e:	6b a3       	std	Y+35, r22	; 0x23
    3590:	00 97       	sbiw	r24, 0x00	; 0
    3592:	09 f4       	brne	.+2      	; 0x3596 <f_open+0x3e>
    3594:	83 c2       	rjmp	.+1286   	; 0x3a9c <f_open+0x544>
    3596:	4d a3       	std	Y+37, r20	; 0x25
    3598:	1c 01       	movw	r2, r24
    359a:	dc 01       	movw	r26, r24
    359c:	1d 92       	st	X+, r1
    359e:	1c 92       	st	X, r1
    35a0:	4e 71       	andi	r20, 0x1E	; 30
    35a2:	be 01       	movw	r22, r28
    35a4:	6d 5d       	subi	r22, 0xDD	; 221
    35a6:	7f 4f       	sbci	r23, 0xFF	; 255
    35a8:	ce 01       	movw	r24, r28
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	0e 94 3e 11 	call	0x227c	; 0x227c <find_volume>
    35b0:	81 11       	cpse	r24, r1
    35b2:	03 c3       	rjmp	.+1542   	; 0x3bba <f_open+0x662>
    35b4:	ce 01       	movw	r24, r28
    35b6:	47 96       	adiw	r24, 0x17	; 23
    35b8:	9e 8b       	std	Y+22, r25	; 0x16
    35ba:	8d 8b       	std	Y+21, r24	; 0x15
    35bc:	cb a0       	ldd	r12, Y+35	; 0x23
    35be:	dc a0       	ldd	r13, Y+36	; 0x24
    35c0:	f6 01       	movw	r30, r12
    35c2:	80 81       	ld	r24, Z
    35c4:	8f 32       	cpi	r24, 0x2F	; 47
    35c6:	11 f0       	breq	.+4      	; 0x35cc <f_open+0x74>
    35c8:	8c 35       	cpi	r24, 0x5C	; 92
    35ca:	19 f4       	brne	.+6      	; 0x35d2 <f_open+0x7a>
    35cc:	ff ef       	ldi	r31, 0xFF	; 255
    35ce:	cf 1a       	sub	r12, r31
    35d0:	df 0a       	sbc	r13, r31
    35d2:	2d a1       	ldd	r18, Y+37	; 0x25
    35d4:	2f 71       	andi	r18, 0x1F	; 31
    35d6:	29 a7       	std	Y+41, r18	; 0x29
    35d8:	1f 82       	std	Y+7, r1	; 0x07
    35da:	18 86       	std	Y+8, r1	; 0x08
    35dc:	19 86       	std	Y+9, r1	; 0x09
    35de:	1a 86       	std	Y+10, r1	; 0x0a
    35e0:	d6 01       	movw	r26, r12
    35e2:	8c 91       	ld	r24, X
    35e4:	80 32       	cpi	r24, 0x20	; 32
    35e6:	68 f4       	brcc	.+26     	; 0x3602 <f_open+0xaa>
    35e8:	60 e0       	ldi	r22, 0x00	; 0
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	ce 01       	movw	r24, r28
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	34 db       	rcall	.-2456   	; 0x2c5a <dir_sdi>
    35f2:	1c 8a       	std	Y+20, r1	; 0x14
    35f4:	1b 8a       	std	Y+19, r1	; 0x13
    35f6:	e1 2c       	mov	r14, r1
    35f8:	f1 2c       	mov	r15, r1
    35fa:	88 23       	and	r24, r24
    35fc:	09 f4       	brne	.+2      	; 0x3600 <f_open+0xa8>
    35fe:	91 c2       	rjmp	.+1314   	; 0x3b22 <f_open+0x5ca>
    3600:	87 c2       	rjmp	.+1294   	; 0x3b10 <f_open+0x5b8>
    3602:	68 94       	set
    3604:	bb 24       	eor	r11, r11
    3606:	b5 f8       	bld	r11, 5
    3608:	a1 2c       	mov	r10, r1
    360a:	71 2c       	mov	r7, r1
    360c:	68 94       	set
    360e:	66 24       	eor	r6, r6
    3610:	63 f8       	bld	r6, 3
    3612:	51 2c       	mov	r5, r1
    3614:	41 2c       	mov	r4, r1
    3616:	6a a6       	std	Y+42, r6	; 0x2a
    3618:	5e a6       	std	Y+46, r5	; 0x2e
    361a:	f6 01       	movw	r30, r12
    361c:	af 01       	movw	r20, r30
    361e:	81 91       	ld	r24, Z+
    3620:	8f 32       	cpi	r24, 0x2F	; 47
    3622:	e1 f3       	breq	.-8      	; 0x361c <f_open+0xc4>
    3624:	8c 35       	cpi	r24, 0x5C	; 92
    3626:	d1 f3       	breq	.-12     	; 0x361c <f_open+0xc4>
    3628:	0d 89       	ldd	r16, Y+21	; 0x15
    362a:	1e 89       	ldd	r17, Y+22	; 0x16
    362c:	f8 01       	movw	r30, r16
    362e:	c8 01       	movw	r24, r16
    3630:	0b 96       	adiw	r24, 0x0b	; 11
    3632:	b1 92       	st	Z+, r11
    3634:	e8 17       	cp	r30, r24
    3636:	f9 07       	cpc	r31, r25
    3638:	e1 f7       	brne	.-8      	; 0x3632 <f_open+0xda>
    363a:	6a 01       	movw	r12, r20
    363c:	ea 2c       	mov	r14, r10
    363e:	f7 2c       	mov	r15, r7
    3640:	8a 2d       	mov	r24, r10
    3642:	97 2d       	mov	r25, r7
    3644:	86 2c       	mov	r8, r6
    3646:	95 2c       	mov	r9, r5
    3648:	74 2d       	mov	r23, r4
    364a:	da 01       	movw	r26, r20
    364c:	01 96       	adiw	r24, 0x01	; 1
    364e:	6d 91       	ld	r22, X+
    3650:	61 32       	cpi	r22, 0x21	; 33
    3652:	08 f4       	brcc	.+2      	; 0x3656 <f_open+0xfe>
    3654:	3c c2       	rjmp	.+1144   	; 0x3ace <f_open+0x576>
    3656:	6f 32       	cpi	r22, 0x2F	; 47
    3658:	09 f4       	brne	.+2      	; 0x365c <f_open+0x104>
    365a:	3e c2       	rjmp	.+1148   	; 0x3ad8 <f_open+0x580>
    365c:	6c 35       	cpi	r22, 0x5C	; 92
    365e:	09 f4       	brne	.+2      	; 0x3662 <f_open+0x10a>
    3660:	3b c2       	rjmp	.+1142   	; 0x3ad8 <f_open+0x580>
    3662:	6e 32       	cpi	r22, 0x2E	; 46
    3664:	09 f4       	brne	.+2      	; 0x3668 <f_open+0x110>
    3666:	1c c2       	rjmp	.+1080   	; 0x3aa0 <f_open+0x548>
    3668:	e8 14       	cp	r14, r8
    366a:	f9 04       	cpc	r15, r9
    366c:	08 f0       	brcs	.+2      	; 0x3670 <f_open+0x118>
    366e:	79 c2       	rjmp	.+1266   	; 0x3b62 <f_open+0x60a>
    3670:	0a c0       	rjmp	.+20     	; 0x3686 <f_open+0x12e>
    3672:	77 0f       	add	r23, r23
    3674:	77 0f       	add	r23, r23
    3676:	ea a4       	ldd	r14, Y+42	; 0x2a
    3678:	fe a4       	ldd	r15, Y+46	; 0x2e
    367a:	0f 2e       	mov	r0, r31
    367c:	fb e0       	ldi	r31, 0x0B	; 11
    367e:	8f 2e       	mov	r8, r31
    3680:	f0 2d       	mov	r31, r0
    3682:	91 2c       	mov	r9, r1
    3684:	e3 cf       	rjmp	.-58     	; 0x364c <f_open+0xf4>
    3686:	66 23       	and	r22, r22
    3688:	0c f0       	brlt	.+2      	; 0x368c <f_open+0x134>
    368a:	10 c2       	rjmp	.+1056   	; 0x3aac <f_open+0x554>
    368c:	73 60       	ori	r23, 0x03	; 3
    368e:	e6 2f       	mov	r30, r22
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	ea 56       	subi	r30, 0x6A	; 106
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	60 81       	ld	r22, Z
    3698:	09 c2       	rjmp	.+1042   	; 0x3aac <f_open+0x554>
    369a:	81 91       	ld	r24, Z+
    369c:	88 23       	and	r24, r24
    369e:	09 f4       	brne	.+2      	; 0x36a2 <f_open+0x14a>
    36a0:	0f c2       	rjmp	.+1054   	; 0x3ac0 <f_open+0x568>
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	48 17       	cp	r20, r24
    36a6:	59 07       	cpc	r21, r25
    36a8:	c1 f7       	brne	.-16     	; 0x369a <f_open+0x142>
    36aa:	86 e0       	ldi	r24, 0x06	; 6
    36ac:	77 c2       	rjmp	.+1262   	; 0x3b9c <f_open+0x644>
    36ae:	72 60       	ori	r23, 0x02	; 2
    36b0:	06 c0       	rjmp	.+12     	; 0x36be <f_open+0x166>
    36b2:	2f e9       	ldi	r18, 0x9F	; 159
    36b4:	26 0f       	add	r18, r22
    36b6:	2a 31       	cpi	r18, 0x1A	; 26
    36b8:	10 f4       	brcc	.+4      	; 0x36be <f_open+0x166>
    36ba:	71 60       	ori	r23, 0x01	; 1
    36bc:	60 52       	subi	r22, 0x20	; 32
    36be:	f8 01       	movw	r30, r16
    36c0:	ee 0d       	add	r30, r14
    36c2:	ff 1d       	adc	r31, r15
    36c4:	60 83       	st	Z, r22
    36c6:	f7 01       	movw	r30, r14
    36c8:	31 96       	adiw	r30, 0x01	; 1
    36ca:	7f 01       	movw	r14, r30
    36cc:	bf cf       	rjmp	.-130    	; 0x364c <f_open+0xf4>
    36ce:	ef 28       	or	r14, r15
    36d0:	09 f4       	brne	.+2      	; 0x36d4 <f_open+0x17c>
    36d2:	47 c2       	rjmp	.+1166   	; 0x3b62 <f_open+0x60a>
    36d4:	d8 01       	movw	r26, r16
    36d6:	2c 91       	ld	r18, X
    36d8:	25 3e       	cpi	r18, 0xE5	; 229
    36da:	11 f4       	brne	.+4      	; 0x36e0 <f_open+0x188>
    36dc:	e5 e0       	ldi	r30, 0x05	; 5
    36de:	ec 93       	st	X, r30
    36e0:	f8 e0       	ldi	r31, 0x08	; 8
    36e2:	8f 16       	cp	r8, r31
    36e4:	91 04       	cpc	r9, r1
    36e6:	19 f4       	brne	.+6      	; 0x36ee <f_open+0x196>
    36e8:	79 2f       	mov	r23, r25
    36ea:	77 0f       	add	r23, r23
    36ec:	77 0f       	add	r23, r23
    36ee:	97 2f       	mov	r25, r23
    36f0:	93 70       	andi	r25, 0x03	; 3
    36f2:	91 30       	cpi	r25, 0x01	; 1
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <f_open+0x1a0>
    36f6:	80 61       	ori	r24, 0x10	; 16
    36f8:	97 2f       	mov	r25, r23
    36fa:	9c 70       	andi	r25, 0x0C	; 12
    36fc:	94 30       	cpi	r25, 0x04	; 4
    36fe:	09 f4       	brne	.+2      	; 0x3702 <f_open+0x1aa>
    3700:	88 60       	ori	r24, 0x08	; 8
    3702:	d8 01       	movw	r26, r16
    3704:	1b 96       	adiw	r26, 0x0b	; 11
    3706:	8c 93       	st	X, r24
    3708:	6a 2d       	mov	r22, r10
    370a:	77 2d       	mov	r23, r7
    370c:	ce 01       	movw	r24, r28
    370e:	01 96       	adiw	r24, 0x01	; 1
    3710:	a4 da       	rcall	.-2744   	; 0x2c5a <dir_sdi>
    3712:	81 11       	cpse	r24, r1
    3714:	ec c1       	rjmp	.+984    	; 0x3aee <f_open+0x596>
    3716:	4f 85       	ldd	r20, Y+15	; 0x0f
    3718:	58 89       	ldd	r21, Y+16	; 0x10
    371a:	69 89       	ldd	r22, Y+17	; 0x11
    371c:	7a 89       	ldd	r23, Y+18	; 0x12
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	0e 94 75 10 	call	0x20ea	; 0x20ea <move_window>
    3726:	81 11       	cpse	r24, r1
    3728:	e2 c1       	rjmp	.+964    	; 0x3aee <f_open+0x596>
    372a:	6b 89       	ldd	r22, Y+19	; 0x13
    372c:	7c 89       	ldd	r23, Y+20	; 0x14
    372e:	fb 01       	movw	r30, r22
    3730:	80 81       	ld	r24, Z
    3732:	88 23       	and	r24, r24
    3734:	d1 f0       	breq	.+52     	; 0x376a <f_open+0x212>
    3736:	83 85       	ldd	r24, Z+11	; 0x0b
    3738:	83 fd       	sbrc	r24, 3
    373a:	0f c0       	rjmp	.+30     	; 0x375a <f_open+0x202>
    373c:	4d 89       	ldd	r20, Y+21	; 0x15
    373e:	5e 89       	ldd	r21, Y+22	; 0x16
    3740:	da 01       	movw	r26, r20
    3742:	9b 01       	movw	r18, r22
    3744:	25 5f       	subi	r18, 0xF5	; 245
    3746:	3f 4f       	sbci	r19, 0xFF	; 255
    3748:	04 c0       	rjmp	.+8      	; 0x3752 <f_open+0x1fa>
    374a:	e2 17       	cp	r30, r18
    374c:	f3 07       	cpc	r31, r19
    374e:	09 f4       	brne	.+2      	; 0x3752 <f_open+0x1fa>
    3750:	c8 c1       	rjmp	.+912    	; 0x3ae2 <f_open+0x58a>
    3752:	91 91       	ld	r25, Z+
    3754:	8d 91       	ld	r24, X+
    3756:	98 17       	cp	r25, r24
    3758:	c1 f3       	breq	.-16     	; 0x374a <f_open+0x1f2>
    375a:	6a 2d       	mov	r22, r10
    375c:	77 2d       	mov	r23, r7
    375e:	ce 01       	movw	r24, r28
    3760:	01 96       	adiw	r24, 0x01	; 1
    3762:	6c dd       	rcall	.-1320   	; 0x323c <dir_next>
    3764:	88 23       	and	r24, r24
    3766:	b9 f2       	breq	.-82     	; 0x3716 <f_open+0x1be>
    3768:	c2 c1       	rjmp	.+900    	; 0x3aee <f_open+0x596>
    376a:	ed 89       	ldd	r30, Y+21	; 0x15
    376c:	fe 89       	ldd	r31, Y+22	; 0x16
    376e:	93 85       	ldd	r25, Z+11	; 0x0b
    3770:	92 fd       	sbrc	r25, 2
    3772:	0d c2       	rjmp	.+1050   	; 0x3b8e <f_open+0x636>
    3774:	85 e0       	ldi	r24, 0x05	; 5
    3776:	12 c2       	rjmp	.+1060   	; 0x3b9c <f_open+0x644>
    3778:	db 01       	movw	r26, r22
    377a:	1b 96       	adiw	r26, 0x0b	; 11
    377c:	8c 91       	ld	r24, X
    377e:	84 ff       	sbrs	r24, 4
    3780:	08 c2       	rjmp	.+1040   	; 0x3b92 <f_open+0x63a>
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ld_clust>
    378a:	6f 83       	std	Y+7, r22	; 0x07
    378c:	78 87       	std	Y+8, r23	; 0x08
    378e:	89 87       	std	Y+9, r24	; 0x09
    3790:	9a 87       	std	Y+10, r25	; 0x0a
    3792:	43 cf       	rjmp	.-378    	; 0x361a <f_open+0xc2>
    3794:	81 11       	cpse	r24, r1
    3796:	ef c1       	rjmp	.+990    	; 0x3b76 <f_open+0x61e>
    3798:	44 c0       	rjmp	.+136    	; 0x3822 <f_open+0x2ca>
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	ce 01       	movw	r24, r28
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	5b da       	rcall	.-2890   	; 0x2c5a <dir_sdi>
    37a4:	81 11       	cpse	r24, r1
    37a6:	06 c2       	rjmp	.+1036   	; 0x3bb4 <f_open+0x65c>
    37a8:	4f 85       	ldd	r20, Y+15	; 0x0f
    37aa:	58 89       	ldd	r21, Y+16	; 0x10
    37ac:	69 89       	ldd	r22, Y+17	; 0x11
    37ae:	7a 89       	ldd	r23, Y+18	; 0x12
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	0e 94 75 10 	call	0x20ea	; 0x20ea <move_window>
    37b8:	81 11       	cpse	r24, r1
    37ba:	fc c1       	rjmp	.+1016   	; 0x3bb4 <f_open+0x65c>
    37bc:	eb 89       	ldd	r30, Y+19	; 0x13
    37be:	fc 89       	ldd	r31, Y+20	; 0x14
    37c0:	80 81       	ld	r24, Z
    37c2:	85 3e       	cpi	r24, 0xE5	; 229
    37c4:	51 f0       	breq	.+20     	; 0x37da <f_open+0x282>
    37c6:	88 23       	and	r24, r24
    37c8:	41 f0       	breq	.+16     	; 0x37da <f_open+0x282>
    37ca:	61 e0       	ldi	r22, 0x01	; 1
    37cc:	70 e0       	ldi	r23, 0x00	; 0
    37ce:	ce 01       	movw	r24, r28
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	34 dd       	rcall	.-1432   	; 0x323c <dir_next>
    37d4:	88 23       	and	r24, r24
    37d6:	41 f3       	breq	.-48     	; 0x37a8 <f_open+0x250>
    37d8:	ed c1       	rjmp	.+986    	; 0x3bb4 <f_open+0x65c>
    37da:	4f 85       	ldd	r20, Y+15	; 0x0f
    37dc:	58 89       	ldd	r21, Y+16	; 0x10
    37de:	69 89       	ldd	r22, Y+17	; 0x11
    37e0:	7a 89       	ldd	r23, Y+18	; 0x12
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	9a 81       	ldd	r25, Y+2	; 0x02
    37e6:	0e 94 75 10 	call	0x20ea	; 0x20ea <move_window>
    37ea:	81 11       	cpse	r24, r1
    37ec:	ca c1       	rjmp	.+916    	; 0x3b82 <f_open+0x62a>
    37ee:	eb 89       	ldd	r30, Y+19	; 0x13
    37f0:	fc 89       	ldd	r31, Y+20	; 0x14
    37f2:	cf 01       	movw	r24, r30
    37f4:	80 96       	adiw	r24, 0x20	; 32
    37f6:	11 92       	st	Z+, r1
    37f8:	e8 17       	cp	r30, r24
    37fa:	f9 07       	cpc	r31, r25
    37fc:	e1 f7       	brne	.-8      	; 0x37f6 <f_open+0x29e>
    37fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3800:	7e 89       	ldd	r23, Y+22	; 0x16
    3802:	4b e0       	ldi	r20, 0x0B	; 11
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	8b 89       	ldd	r24, Y+19	; 0x13
    3808:	9c 89       	ldd	r25, Y+20	; 0x14
    380a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <mem_cpy>
    380e:	e9 81       	ldd	r30, Y+1	; 0x01
    3810:	fa 81       	ldd	r31, Y+2	; 0x02
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	84 83       	std	Z+4, r24	; 0x04
    3816:	b9 a5       	ldd	r27, Y+41	; 0x29
    3818:	b8 60       	ori	r27, 0x08	; 8
    381a:	b9 a7       	std	Y+41, r27	; 0x29
    381c:	eb 88       	ldd	r14, Y+19	; 0x13
    381e:	fc 88       	ldd	r15, Y+20	; 0x14
    3820:	08 c0       	rjmp	.+16     	; 0x3832 <f_open+0x2da>
    3822:	f7 01       	movw	r30, r14
    3824:	83 85       	ldd	r24, Z+11	; 0x0b
    3826:	81 71       	andi	r24, 0x11	; 17
    3828:	09 f0       	breq	.+2      	; 0x382c <f_open+0x2d4>
    382a:	82 c1       	rjmp	.+772    	; 0x3b30 <f_open+0x5d8>
    382c:	fd a1       	ldd	r31, Y+37	; 0x25
    382e:	f2 fd       	sbrc	r31, 2
    3830:	81 c1       	rjmp	.+770    	; 0x3b34 <f_open+0x5dc>
    3832:	29 a5       	ldd	r18, Y+41	; 0x29
    3834:	23 ff       	sbrs	r18, 3
    3836:	db c0       	rjmp	.+438    	; 0x39ee <f_open+0x496>
    3838:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <get_fattime>
    383c:	d7 01       	movw	r26, r14
    383e:	1e 96       	adiw	r26, 0x0e	; 14
    3840:	6c 93       	st	X, r22
    3842:	1e 97       	sbiw	r26, 0x0e	; 14
    3844:	47 2f       	mov	r20, r23
    3846:	55 27       	eor	r21, r21
    3848:	1f 96       	adiw	r26, 0x0f	; 15
    384a:	4c 93       	st	X, r20
    384c:	1f 97       	sbiw	r26, 0x0f	; 15
    384e:	4c 01       	movw	r8, r24
    3850:	aa 24       	eor	r10, r10
    3852:	bb 24       	eor	r11, r11
    3854:	50 96       	adiw	r26, 0x10	; 16
    3856:	8c 92       	st	X, r8
    3858:	50 97       	sbiw	r26, 0x10	; 16
    385a:	09 2f       	mov	r16, r25
    385c:	11 27       	eor	r17, r17
    385e:	22 27       	eor	r18, r18
    3860:	33 27       	eor	r19, r19
    3862:	51 96       	adiw	r26, 0x11	; 17
    3864:	0c 93       	st	X, r16
    3866:	51 97       	sbiw	r26, 0x11	; 17
    3868:	56 96       	adiw	r26, 0x16	; 22
    386a:	6c 93       	st	X, r22
    386c:	56 97       	sbiw	r26, 0x16	; 22
    386e:	57 96       	adiw	r26, 0x17	; 23
    3870:	4c 93       	st	X, r20
    3872:	57 97       	sbiw	r26, 0x17	; 23
    3874:	58 96       	adiw	r26, 0x18	; 24
    3876:	8c 92       	st	X, r8
    3878:	58 97       	sbiw	r26, 0x18	; 24
    387a:	59 96       	adiw	r26, 0x19	; 25
    387c:	0c 93       	st	X, r16
    387e:	59 97       	sbiw	r26, 0x19	; 25
    3880:	1b 96       	adiw	r26, 0x0b	; 11
    3882:	1c 92       	st	X, r1
    3884:	1b 97       	sbiw	r26, 0x0b	; 11
    3886:	5c 96       	adiw	r26, 0x1c	; 28
    3888:	1c 92       	st	X, r1
    388a:	5c 97       	sbiw	r26, 0x1c	; 28
    388c:	5d 96       	adiw	r26, 0x1d	; 29
    388e:	1c 92       	st	X, r1
    3890:	5d 97       	sbiw	r26, 0x1d	; 29
    3892:	5e 96       	adiw	r26, 0x1e	; 30
    3894:	1c 92       	st	X, r1
    3896:	5e 97       	sbiw	r26, 0x1e	; 30
    3898:	5f 96       	adiw	r26, 0x1f	; 31
    389a:	1c 92       	st	X, r1
    389c:	c9 80       	ldd	r12, Y+1	; 0x01
    389e:	da 80       	ldd	r13, Y+2	; 0x02
    38a0:	b7 01       	movw	r22, r14
    38a2:	c6 01       	movw	r24, r12
    38a4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ld_clust>
    38a8:	4b 01       	movw	r8, r22
    38aa:	5c 01       	movw	r10, r24
    38ac:	f7 01       	movw	r30, r14
    38ae:	12 8e       	std	Z+26, r1	; 0x1a
    38b0:	13 8e       	std	Z+27, r1	; 0x1b
    38b2:	14 8a       	std	Z+20, r1	; 0x14
    38b4:	15 8a       	std	Z+21, r1	; 0x15
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	d6 01       	movw	r26, r12
    38ba:	14 96       	adiw	r26, 0x04	; 4
    38bc:	8c 93       	st	X, r24
    38be:	14 97       	sbiw	r26, 0x04	; 4
    38c0:	81 14       	cp	r8, r1
    38c2:	91 04       	cpc	r9, r1
    38c4:	a1 04       	cpc	r10, r1
    38c6:	b1 04       	cpc	r11, r1
    38c8:	09 f4       	brne	.+2      	; 0x38cc <f_open+0x374>
    38ca:	91 c0       	rjmp	.+290    	; 0x39ee <f_open+0x496>
    38cc:	9a 96       	adiw	r26, 0x2a	; 42
    38ce:	2d 91       	ld	r18, X+
    38d0:	3d 91       	ld	r19, X+
    38d2:	4d 91       	ld	r20, X+
    38d4:	5c 91       	ld	r21, X
    38d6:	9d 97       	sbiw	r26, 0x2d	; 45
    38d8:	2a a7       	std	Y+42, r18	; 0x2a
    38da:	3b a7       	std	Y+43, r19	; 0x2b
    38dc:	4c a7       	std	Y+44, r20	; 0x2c
    38de:	5d a7       	std	Y+45, r21	; 0x2d
    38e0:	b2 e0       	ldi	r27, 0x02	; 2
    38e2:	8b 16       	cp	r8, r27
    38e4:	91 04       	cpc	r9, r1
    38e6:	a1 04       	cpc	r10, r1
    38e8:	b1 04       	cpc	r11, r1
    38ea:	08 f4       	brcc	.+2      	; 0x38ee <f_open+0x396>
    38ec:	28 c1       	rjmp	.+592    	; 0x3b3e <f_open+0x5e6>
    38ee:	f6 01       	movw	r30, r12
    38f0:	82 89       	ldd	r24, Z+18	; 0x12
    38f2:	93 89       	ldd	r25, Z+19	; 0x13
    38f4:	a4 89       	ldd	r26, Z+20	; 0x14
    38f6:	b5 89       	ldd	r27, Z+21	; 0x15
    38f8:	88 16       	cp	r8, r24
    38fa:	99 06       	cpc	r9, r25
    38fc:	aa 06       	cpc	r10, r26
    38fe:	bb 06       	cpc	r11, r27
    3900:	08 f0       	brcs	.+2      	; 0x3904 <f_open+0x3ac>
    3902:	1f c1       	rjmp	.+574    	; 0x3b42 <f_open+0x5ea>
    3904:	8d a2       	std	Y+37, r8	; 0x25
    3906:	9e a2       	std	Y+38, r9	; 0x26
    3908:	af a2       	std	Y+39, r10	; 0x27
    390a:	b8 a6       	std	Y+40, r11	; 0x28
    390c:	3f c0       	rjmp	.+126    	; 0x398c <f_open+0x434>
    390e:	4d a1       	ldd	r20, Y+37	; 0x25
    3910:	5e a1       	ldd	r21, Y+38	; 0x26
    3912:	6f a1       	ldd	r22, Y+39	; 0x27
    3914:	78 a5       	ldd	r23, Y+40	; 0x28
    3916:	c6 01       	movw	r24, r12
    3918:	a1 d8       	rcall	.-3774   	; 0x2a5c <get_fat>
    391a:	2b 01       	movw	r4, r22
    391c:	3c 01       	movw	r6, r24
    391e:	61 15       	cp	r22, r1
    3920:	71 05       	cpc	r23, r1
    3922:	81 05       	cpc	r24, r1
    3924:	91 05       	cpc	r25, r1
    3926:	09 f4       	brne	.+2      	; 0x392a <f_open+0x3d2>
    3928:	40 c0       	rjmp	.+128    	; 0x39aa <f_open+0x452>
    392a:	61 30       	cpi	r22, 0x01	; 1
    392c:	71 05       	cpc	r23, r1
    392e:	81 05       	cpc	r24, r1
    3930:	91 05       	cpc	r25, r1
    3932:	09 f4       	brne	.+2      	; 0x3936 <f_open+0x3de>
    3934:	08 c1       	rjmp	.+528    	; 0x3b46 <f_open+0x5ee>
    3936:	6f 3f       	cpi	r22, 0xFF	; 255
    3938:	7f 4f       	sbci	r23, 0xFF	; 255
    393a:	8f 4f       	sbci	r24, 0xFF	; 255
    393c:	9f 4f       	sbci	r25, 0xFF	; 255
    393e:	09 f4       	brne	.+2      	; 0x3942 <f_open+0x3ea>
    3940:	04 c1       	rjmp	.+520    	; 0x3b4a <f_open+0x5f2>
    3942:	00 e0       	ldi	r16, 0x00	; 0
    3944:	10 e0       	ldi	r17, 0x00	; 0
    3946:	98 01       	movw	r18, r16
    3948:	4d a1       	ldd	r20, Y+37	; 0x25
    394a:	5e a1       	ldd	r21, Y+38	; 0x26
    394c:	6f a1       	ldd	r22, Y+39	; 0x27
    394e:	78 a5       	ldd	r23, Y+40	; 0x28
    3950:	c6 01       	movw	r24, r12
    3952:	3e da       	rcall	.-2948   	; 0x2dd0 <put_fat>
    3954:	81 11       	cpse	r24, r1
    3956:	fa c0       	rjmp	.+500    	; 0x3b4c <f_open+0x5f4>
    3958:	f6 01       	movw	r30, r12
    395a:	86 85       	ldd	r24, Z+14	; 0x0e
    395c:	97 85       	ldd	r25, Z+15	; 0x0f
    395e:	a0 89       	ldd	r26, Z+16	; 0x10
    3960:	b1 89       	ldd	r27, Z+17	; 0x11
    3962:	8f 3f       	cpi	r24, 0xFF	; 255
    3964:	ff ef       	ldi	r31, 0xFF	; 255
    3966:	9f 07       	cpc	r25, r31
    3968:	af 07       	cpc	r26, r31
    396a:	bf 07       	cpc	r27, r31
    396c:	59 f0       	breq	.+22     	; 0x3984 <f_open+0x42c>
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	a1 1d       	adc	r26, r1
    3972:	b1 1d       	adc	r27, r1
    3974:	f6 01       	movw	r30, r12
    3976:	86 87       	std	Z+14, r24	; 0x0e
    3978:	97 87       	std	Z+15, r25	; 0x0f
    397a:	a0 8b       	std	Z+16, r26	; 0x10
    397c:	b1 8b       	std	Z+17, r27	; 0x11
    397e:	85 81       	ldd	r24, Z+5	; 0x05
    3980:	81 60       	ori	r24, 0x01	; 1
    3982:	85 83       	std	Z+5, r24	; 0x05
    3984:	4d a2       	std	Y+37, r4	; 0x25
    3986:	5e a2       	std	Y+38, r5	; 0x26
    3988:	6f a2       	std	Y+39, r6	; 0x27
    398a:	78 a6       	std	Y+40, r7	; 0x28
    398c:	f6 01       	movw	r30, r12
    398e:	82 89       	ldd	r24, Z+18	; 0x12
    3990:	93 89       	ldd	r25, Z+19	; 0x13
    3992:	a4 89       	ldd	r26, Z+20	; 0x14
    3994:	b5 89       	ldd	r27, Z+21	; 0x15
    3996:	2d a1       	ldd	r18, Y+37	; 0x25
    3998:	3e a1       	ldd	r19, Y+38	; 0x26
    399a:	4f a1       	ldd	r20, Y+39	; 0x27
    399c:	58 a5       	ldd	r21, Y+40	; 0x28
    399e:	28 17       	cp	r18, r24
    39a0:	39 07       	cpc	r19, r25
    39a2:	4a 07       	cpc	r20, r26
    39a4:	5b 07       	cpc	r21, r27
    39a6:	08 f4       	brcc	.+2      	; 0x39aa <f_open+0x452>
    39a8:	b2 cf       	rjmp	.-156    	; 0x390e <f_open+0x3b6>
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	9a 81       	ldd	r25, Y+2	; 0x02
    39ae:	31 e0       	ldi	r19, 0x01	; 1
    39b0:	83 1a       	sub	r8, r19
    39b2:	91 08       	sbc	r9, r1
    39b4:	a1 08       	sbc	r10, r1
    39b6:	b1 08       	sbc	r11, r1
    39b8:	dc 01       	movw	r26, r24
    39ba:	1a 96       	adiw	r26, 0x0a	; 10
    39bc:	8d 92       	st	X+, r8
    39be:	9d 92       	st	X+, r9
    39c0:	ad 92       	st	X+, r10
    39c2:	bc 92       	st	X, r11
    39c4:	1d 97       	sbiw	r26, 0x0d	; 13
    39c6:	4a a5       	ldd	r20, Y+42	; 0x2a
    39c8:	5b a5       	ldd	r21, Y+43	; 0x2b
    39ca:	6c a5       	ldd	r22, Y+44	; 0x2c
    39cc:	7d a5       	ldd	r23, Y+45	; 0x2d
    39ce:	0e 94 75 10 	call	0x20ea	; 0x20ea <move_window>
    39d2:	88 23       	and	r24, r24
    39d4:	79 f0       	breq	.+30     	; 0x39f4 <f_open+0x49c>
    39d6:	f1 c0       	rjmp	.+482    	; 0x3bba <f_open+0x662>
    39d8:	81 11       	cpse	r24, r1
    39da:	bf c0       	rjmp	.+382    	; 0x3b5a <f_open+0x602>
    39dc:	f7 01       	movw	r30, r14
    39de:	83 85       	ldd	r24, Z+11	; 0x0b
    39e0:	84 fd       	sbrc	r24, 4
    39e2:	b8 c0       	rjmp	.+368    	; 0x3b54 <f_open+0x5fc>
    39e4:	fd a1       	ldd	r31, Y+37	; 0x25
    39e6:	f1 ff       	sbrs	r31, 1
    39e8:	02 c0       	rjmp	.+4      	; 0x39ee <f_open+0x496>
    39ea:	80 fd       	sbrc	r24, 0
    39ec:	b5 c0       	rjmp	.+362    	; 0x3b58 <f_open+0x600>
    39ee:	29 a5       	ldd	r18, Y+41	; 0x29
    39f0:	23 ff       	sbrs	r18, 3
    39f2:	03 c0       	rjmp	.+6      	; 0x39fa <f_open+0x4a2>
    39f4:	39 a5       	ldd	r19, Y+41	; 0x29
    39f6:	30 62       	ori	r19, 0x20	; 32
    39f8:	39 a7       	std	Y+41, r19	; 0x29
    39fa:	e9 81       	ldd	r30, Y+1	; 0x01
    39fc:	fa 81       	ldd	r31, Y+2	; 0x02
    39fe:	82 a5       	ldd	r24, Z+42	; 0x2a
    3a00:	93 a5       	ldd	r25, Z+43	; 0x2b
    3a02:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3a04:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3a06:	f1 01       	movw	r30, r2
    3a08:	82 8f       	std	Z+26, r24	; 0x1a
    3a0a:	93 8f       	std	Z+27, r25	; 0x1b
    3a0c:	a4 8f       	std	Z+28, r26	; 0x1c
    3a0e:	b5 8f       	std	Z+29, r27	; 0x1d
    3a10:	f7 8e       	std	Z+31, r15	; 0x1f
    3a12:	e6 8e       	std	Z+30, r14	; 0x1e
    3a14:	e9 a5       	ldd	r30, Y+41	; 0x29
    3a16:	d1 01       	movw	r26, r2
    3a18:	14 96       	adiw	r26, 0x04	; 4
    3a1a:	ec 93       	st	X, r30
    3a1c:	14 97       	sbiw	r26, 0x04	; 4
    3a1e:	15 96       	adiw	r26, 0x05	; 5
    3a20:	1c 92       	st	X, r1
    3a22:	09 81       	ldd	r16, Y+1	; 0x01
    3a24:	1a 81       	ldd	r17, Y+2	; 0x02
    3a26:	b7 01       	movw	r22, r14
    3a28:	c8 01       	movw	r24, r16
    3a2a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ld_clust>
    3a2e:	d1 01       	movw	r26, r2
    3a30:	1e 96       	adiw	r26, 0x0e	; 14
    3a32:	6d 93       	st	X+, r22
    3a34:	7d 93       	st	X+, r23
    3a36:	8d 93       	st	X+, r24
    3a38:	9c 93       	st	X, r25
    3a3a:	51 97       	sbiw	r26, 0x11	; 17
    3a3c:	f7 01       	movw	r30, r14
    3a3e:	27 8d       	ldd	r18, Z+31	; 0x1f
    3a40:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a0 e0       	ldi	r26, 0x00	; 0
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	dc 01       	movw	r26, r24
    3a4a:	99 27       	eor	r25, r25
    3a4c:	88 27       	eor	r24, r24
    3a4e:	b2 2b       	or	r27, r18
    3a50:	24 8d       	ldd	r18, Z+28	; 0x1c
    3a52:	ac 01       	movw	r20, r24
    3a54:	bd 01       	movw	r22, r26
    3a56:	42 2b       	or	r20, r18
    3a58:	25 8d       	ldd	r18, Z+29	; 0x1d
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	92 2f       	mov	r25, r18
    3a5e:	88 27       	eor	r24, r24
    3a60:	a0 e0       	ldi	r26, 0x00	; 0
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	84 2b       	or	r24, r20
    3a66:	95 2b       	or	r25, r21
    3a68:	a6 2b       	or	r26, r22
    3a6a:	b7 2b       	or	r27, r23
    3a6c:	f1 01       	movw	r30, r2
    3a6e:	82 87       	std	Z+10, r24	; 0x0a
    3a70:	93 87       	std	Z+11, r25	; 0x0b
    3a72:	a4 87       	std	Z+12, r26	; 0x0c
    3a74:	b5 87       	std	Z+13, r27	; 0x0d
    3a76:	16 82       	std	Z+6, r1	; 0x06
    3a78:	17 82       	std	Z+7, r1	; 0x07
    3a7a:	10 86       	std	Z+8, r1	; 0x08
    3a7c:	11 86       	std	Z+9, r1	; 0x09
    3a7e:	16 8a       	std	Z+22, r1	; 0x16
    3a80:	17 8a       	std	Z+23, r1	; 0x17
    3a82:	10 8e       	std	Z+24, r1	; 0x18
    3a84:	11 8e       	std	Z+25, r1	; 0x19
    3a86:	11 83       	std	Z+1, r17	; 0x01
    3a88:	00 83       	st	Z, r16
    3a8a:	d8 01       	movw	r26, r16
    3a8c:	16 96       	adiw	r26, 0x06	; 6
    3a8e:	8d 91       	ld	r24, X+
    3a90:	9c 91       	ld	r25, X
    3a92:	17 97       	sbiw	r26, 0x07	; 7
    3a94:	93 83       	std	Z+3, r25	; 0x03
    3a96:	82 83       	std	Z+2, r24	; 0x02
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	8f c0       	rjmp	.+286    	; 0x3bba <f_open+0x662>
    3a9c:	89 e0       	ldi	r24, 0x09	; 9
    3a9e:	8d c0       	rjmp	.+282    	; 0x3bba <f_open+0x662>
    3aa0:	e8 e0       	ldi	r30, 0x08	; 8
    3aa2:	8e 16       	cp	r8, r30
    3aa4:	91 04       	cpc	r9, r1
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <f_open+0x552>
    3aa8:	e4 cd       	rjmp	.-1080   	; 0x3672 <f_open+0x11a>
    3aaa:	75 c0       	rjmp	.+234    	; 0x3b96 <f_open+0x63e>
    3aac:	46 2f       	mov	r20, r22
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	42 32       	cpi	r20, 0x22	; 34
    3ab2:	51 05       	cpc	r21, r1
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <f_open+0x560>
    3ab6:	71 c0       	rjmp	.+226    	; 0x3b9a <f_open+0x642>
    3ab8:	e8 e0       	ldi	r30, 0x08	; 8
    3aba:	f1 e0       	ldi	r31, 0x01	; 1
    3abc:	9c 01       	movw	r18, r24
    3abe:	ed cd       	rjmp	.-1062   	; 0x369a <f_open+0x142>
    3ac0:	c9 01       	movw	r24, r18
    3ac2:	2f eb       	ldi	r18, 0xBF	; 191
    3ac4:	26 0f       	add	r18, r22
    3ac6:	2a 31       	cpi	r18, 0x1A	; 26
    3ac8:	08 f4       	brcc	.+2      	; 0x3acc <f_open+0x574>
    3aca:	f1 cd       	rjmp	.-1054   	; 0x36ae <f_open+0x156>
    3acc:	f2 cd       	rjmp	.-1052   	; 0x36b2 <f_open+0x15a>
    3ace:	c8 0e       	add	r12, r24
    3ad0:	d9 1e       	adc	r13, r25
    3ad2:	97 2f       	mov	r25, r23
    3ad4:	84 e0       	ldi	r24, 0x04	; 4
    3ad6:	fb cd       	rjmp	.-1034   	; 0x36ce <f_open+0x176>
    3ad8:	c8 0e       	add	r12, r24
    3ada:	d9 1e       	adc	r13, r25
    3adc:	97 2f       	mov	r25, r23
    3ade:	84 2d       	mov	r24, r4
    3ae0:	f6 cd       	rjmp	.-1044   	; 0x36ce <f_open+0x176>
    3ae2:	da 01       	movw	r26, r20
    3ae4:	1b 96       	adiw	r26, 0x0b	; 11
    3ae6:	8c 91       	ld	r24, X
    3ae8:	82 ff       	sbrs	r24, 2
    3aea:	46 ce       	rjmp	.-884    	; 0x3778 <f_open+0x220>
    3aec:	0d c0       	rjmp	.+26     	; 0x3b08 <f_open+0x5b0>
    3aee:	ed 89       	ldd	r30, Y+21	; 0x15
    3af0:	fe 89       	ldd	r31, Y+22	; 0x16
    3af2:	93 85       	ldd	r25, Z+11	; 0x0b
    3af4:	84 30       	cpi	r24, 0x04	; 4
    3af6:	09 f4       	brne	.+2      	; 0x3afa <f_open+0x5a2>
    3af8:	3b ce       	rjmp	.-906    	; 0x3770 <f_open+0x218>
    3afa:	eb 88       	ldd	r14, Y+19	; 0x13
    3afc:	fc 88       	ldd	r15, Y+20	; 0x14
    3afe:	9d a1       	ldd	r25, Y+37	; 0x25
    3b00:	9c 71       	andi	r25, 0x1C	; 28
    3b02:	09 f0       	breq	.+2      	; 0x3b06 <f_open+0x5ae>
    3b04:	47 ce       	rjmp	.-882    	; 0x3794 <f_open+0x23c>
    3b06:	68 cf       	rjmp	.-304    	; 0x39d8 <f_open+0x480>
    3b08:	7b 01       	movw	r14, r22
    3b0a:	67 2b       	or	r22, r23
    3b0c:	29 f4       	brne	.+10     	; 0x3b18 <f_open+0x5c0>
    3b0e:	09 c0       	rjmp	.+18     	; 0x3b22 <f_open+0x5ca>
    3b10:	0d a1       	ldd	r16, Y+37	; 0x25
    3b12:	0c 71       	andi	r16, 0x1C	; 28
    3b14:	81 f5       	brne	.+96     	; 0x3b76 <f_open+0x61e>
    3b16:	21 c0       	rjmp	.+66     	; 0x3b5a <f_open+0x602>
    3b18:	8d a1       	ldd	r24, Y+37	; 0x25
    3b1a:	8c 71       	andi	r24, 0x1C	; 28
    3b1c:	09 f0       	breq	.+2      	; 0x3b20 <f_open+0x5c8>
    3b1e:	81 ce       	rjmp	.-766    	; 0x3822 <f_open+0x2ca>
    3b20:	5d cf       	rjmp	.-326    	; 0x39dc <f_open+0x484>
    3b22:	0d a1       	ldd	r16, Y+37	; 0x25
    3b24:	0c 71       	andi	r16, 0x1C	; 28
    3b26:	51 f5       	brne	.+84     	; 0x3b7c <f_open+0x624>
    3b28:	e1 2c       	mov	r14, r1
    3b2a:	f1 2c       	mov	r15, r1
    3b2c:	86 e0       	ldi	r24, 0x06	; 6
    3b2e:	15 c0       	rjmp	.+42     	; 0x3b5a <f_open+0x602>
    3b30:	87 e0       	ldi	r24, 0x07	; 7
    3b32:	01 c0       	rjmp	.+2      	; 0x3b36 <f_open+0x5de>
    3b34:	88 e0       	ldi	r24, 0x08	; 8
    3b36:	88 23       	and	r24, r24
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <f_open+0x5e4>
    3b3a:	59 cf       	rjmp	.-334    	; 0x39ee <f_open+0x496>
    3b3c:	3e c0       	rjmp	.+124    	; 0x3bba <f_open+0x662>
    3b3e:	82 e0       	ldi	r24, 0x02	; 2
    3b40:	05 c0       	rjmp	.+10     	; 0x3b4c <f_open+0x5f4>
    3b42:	82 e0       	ldi	r24, 0x02	; 2
    3b44:	03 c0       	rjmp	.+6      	; 0x3b4c <f_open+0x5f4>
    3b46:	82 e0       	ldi	r24, 0x02	; 2
    3b48:	01 c0       	rjmp	.+2      	; 0x3b4c <f_open+0x5f4>
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	88 23       	and	r24, r24
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <f_open+0x5fa>
    3b50:	51 cf       	rjmp	.-350    	; 0x39f4 <f_open+0x49c>
    3b52:	33 c0       	rjmp	.+102    	; 0x3bba <f_open+0x662>
    3b54:	84 e0       	ldi	r24, 0x04	; 4
    3b56:	01 c0       	rjmp	.+2      	; 0x3b5a <f_open+0x602>
    3b58:	87 e0       	ldi	r24, 0x07	; 7
    3b5a:	88 23       	and	r24, r24
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <f_open+0x608>
    3b5e:	5a cf       	rjmp	.-332    	; 0x3a14 <f_open+0x4bc>
    3b60:	2c c0       	rjmp	.+88     	; 0x3bba <f_open+0x662>
    3b62:	eb 88       	ldd	r14, Y+19	; 0x13
    3b64:	fc 88       	ldd	r15, Y+20	; 0x14
    3b66:	86 e0       	ldi	r24, 0x06	; 6
    3b68:	d3 cf       	rjmp	.-90     	; 0x3b10 <f_open+0x5b8>
    3b6a:	b9 a5       	ldd	r27, Y+41	; 0x29
    3b6c:	b8 60       	ori	r27, 0x08	; 8
    3b6e:	b9 a7       	std	Y+41, r27	; 0x29
    3b70:	eb 88       	ldd	r14, Y+19	; 0x13
    3b72:	fc 88       	ldd	r15, Y+20	; 0x14
    3b74:	f2 cf       	rjmp	.-28     	; 0x3b5a <f_open+0x602>
    3b76:	84 30       	cpi	r24, 0x04	; 4
    3b78:	c1 f7       	brne	.-16     	; 0x3b6a <f_open+0x612>
    3b7a:	0f ce       	rjmp	.-994    	; 0x379a <f_open+0x242>
    3b7c:	86 e0       	ldi	r24, 0x06	; 6
    3b7e:	01 c0       	rjmp	.+2      	; 0x3b82 <f_open+0x62a>
    3b80:	87 e0       	ldi	r24, 0x07	; 7
    3b82:	e9 a5       	ldd	r30, Y+41	; 0x29
    3b84:	e8 60       	ori	r30, 0x08	; 8
    3b86:	e9 a7       	std	Y+41, r30	; 0x29
    3b88:	eb 88       	ldd	r14, Y+19	; 0x13
    3b8a:	fc 88       	ldd	r15, Y+20	; 0x14
    3b8c:	e6 cf       	rjmp	.-52     	; 0x3b5a <f_open+0x602>
    3b8e:	84 e0       	ldi	r24, 0x04	; 4
    3b90:	05 c0       	rjmp	.+10     	; 0x3b9c <f_open+0x644>
    3b92:	85 e0       	ldi	r24, 0x05	; 5
    3b94:	03 c0       	rjmp	.+6      	; 0x3b9c <f_open+0x644>
    3b96:	86 e0       	ldi	r24, 0x06	; 6
    3b98:	01 c0       	rjmp	.+2      	; 0x3b9c <f_open+0x644>
    3b9a:	86 e0       	ldi	r24, 0x06	; 6
    3b9c:	eb 88       	ldd	r14, Y+19	; 0x13
    3b9e:	fc 88       	ldd	r15, Y+20	; 0x14
    3ba0:	9d a1       	ldd	r25, Y+37	; 0x25
    3ba2:	9c 71       	andi	r25, 0x1C	; 28
    3ba4:	41 f7       	brne	.-48     	; 0x3b76 <f_open+0x61e>
    3ba6:	18 cf       	rjmp	.-464    	; 0x39d8 <f_open+0x480>
    3ba8:	f9 a5       	ldd	r31, Y+41	; 0x29
    3baa:	f8 60       	ori	r31, 0x08	; 8
    3bac:	f9 a7       	std	Y+41, r31	; 0x29
    3bae:	eb 88       	ldd	r14, Y+19	; 0x13
    3bb0:	fc 88       	ldd	r15, Y+20	; 0x14
    3bb2:	d3 cf       	rjmp	.-90     	; 0x3b5a <f_open+0x602>
    3bb4:	84 30       	cpi	r24, 0x04	; 4
    3bb6:	21 f3       	breq	.-56     	; 0x3b80 <f_open+0x628>
    3bb8:	f7 cf       	rjmp	.-18     	; 0x3ba8 <f_open+0x650>
    3bba:	ae 96       	adiw	r28, 0x2e	; 46
    3bbc:	0f b6       	in	r0, 0x3f	; 63
    3bbe:	f8 94       	cli
    3bc0:	de bf       	out	0x3e, r29	; 62
    3bc2:	0f be       	out	0x3f, r0	; 63
    3bc4:	cd bf       	out	0x3d, r28	; 61
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	1f 91       	pop	r17
    3bcc:	0f 91       	pop	r16
    3bce:	ff 90       	pop	r15
    3bd0:	ef 90       	pop	r14
    3bd2:	df 90       	pop	r13
    3bd4:	cf 90       	pop	r12
    3bd6:	bf 90       	pop	r11
    3bd8:	af 90       	pop	r10
    3bda:	9f 90       	pop	r9
    3bdc:	8f 90       	pop	r8
    3bde:	7f 90       	pop	r7
    3be0:	6f 90       	pop	r6
    3be2:	5f 90       	pop	r5
    3be4:	4f 90       	pop	r4
    3be6:	3f 90       	pop	r3
    3be8:	2f 90       	pop	r2
    3bea:	08 95       	ret

00003bec <f_write>:
    3bec:	3f 92       	push	r3
    3bee:	4f 92       	push	r4
    3bf0:	5f 92       	push	r5
    3bf2:	6f 92       	push	r6
    3bf4:	7f 92       	push	r7
    3bf6:	8f 92       	push	r8
    3bf8:	9f 92       	push	r9
    3bfa:	af 92       	push	r10
    3bfc:	bf 92       	push	r11
    3bfe:	cf 92       	push	r12
    3c00:	df 92       	push	r13
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <f_write+0x24>
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <f_write+0x26>
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <f_write+0x28>
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	9e 83       	std	Y+6, r25	; 0x06
    3c1a:	8d 83       	std	Y+5, r24	; 0x05
    3c1c:	4b 01       	movw	r8, r22
    3c1e:	6a 01       	movw	r12, r20
    3c20:	59 01       	movw	r10, r18
    3c22:	d9 01       	movw	r26, r18
    3c24:	1d 92       	st	X+, r1
    3c26:	1c 92       	st	X, r1
    3c28:	0e 94 19 11 	call	0x2232	; 0x2232 <validate>
    3c2c:	81 11       	cpse	r24, r1
    3c2e:	c0 c1       	rjmp	.+896    	; 0x3fb0 <f_write+0x3c4>
    3c30:	ed 81       	ldd	r30, Y+5	; 0x05
    3c32:	fe 81       	ldd	r31, Y+6	; 0x06
    3c34:	85 81       	ldd	r24, Z+5	; 0x05
    3c36:	81 11       	cpse	r24, r1
    3c38:	bb c1       	rjmp	.+886    	; 0x3fb0 <f_write+0x3c4>
    3c3a:	84 81       	ldd	r24, Z+4	; 0x04
    3c3c:	81 ff       	sbrs	r24, 1
    3c3e:	b7 c1       	rjmp	.+878    	; 0x3fae <f_write+0x3c2>
    3c40:	86 81       	ldd	r24, Z+6	; 0x06
    3c42:	97 81       	ldd	r25, Z+7	; 0x07
    3c44:	a0 85       	ldd	r26, Z+8	; 0x08
    3c46:	b1 85       	ldd	r27, Z+9	; 0x09
    3c48:	ac 01       	movw	r20, r24
    3c4a:	bd 01       	movw	r22, r26
    3c4c:	4c 0d       	add	r20, r12
    3c4e:	5d 1d       	adc	r21, r13
    3c50:	61 1d       	adc	r22, r1
    3c52:	71 1d       	adc	r23, r1
    3c54:	48 17       	cp	r20, r24
    3c56:	59 07       	cpc	r21, r25
    3c58:	6a 07       	cpc	r22, r26
    3c5a:	7b 07       	cpc	r23, r27
    3c5c:	08 f4       	brcc	.+2      	; 0x3c60 <f_write+0x74>
    3c5e:	8a c1       	rjmp	.+788    	; 0x3f74 <f_write+0x388>
    3c60:	c1 14       	cp	r12, r1
    3c62:	d1 04       	cpc	r13, r1
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <f_write+0x7c>
    3c66:	86 c1       	rjmp	.+780    	; 0x3f74 <f_write+0x388>
    3c68:	b0 96       	adiw	r30, 0x20	; 32
    3c6a:	fc 83       	std	Y+4, r31	; 0x04
    3c6c:	eb 83       	std	Y+3, r30	; 0x03
    3c6e:	ed 81       	ldd	r30, Y+5	; 0x05
    3c70:	fe 81       	ldd	r31, Y+6	; 0x06
    3c72:	86 81       	ldd	r24, Z+6	; 0x06
    3c74:	97 81       	ldd	r25, Z+7	; 0x07
    3c76:	a0 85       	ldd	r26, Z+8	; 0x08
    3c78:	b1 85       	ldd	r27, Z+9	; 0x09
    3c7a:	ac 01       	movw	r20, r24
    3c7c:	bd 01       	movw	r22, r26
    3c7e:	51 70       	andi	r21, 0x01	; 1
    3c80:	66 27       	eor	r22, r22
    3c82:	77 27       	eor	r23, r23
    3c84:	45 2b       	or	r20, r21
    3c86:	46 2b       	or	r20, r22
    3c88:	47 2b       	or	r20, r23
    3c8a:	09 f0       	breq	.+2      	; 0x3c8e <f_write+0xa2>
    3c8c:	32 c1       	rjmp	.+612    	; 0x3ef2 <f_write+0x306>
    3c8e:	e0 80       	ld	r14, Z
    3c90:	f1 80       	ldd	r15, Z+1	; 0x01
    3c92:	f7 01       	movw	r30, r14
    3c94:	22 81       	ldd	r18, Z+2	; 0x02
    3c96:	21 50       	subi	r18, 0x01	; 1
    3c98:	ac 01       	movw	r20, r24
    3c9a:	bd 01       	movw	r22, r26
    3c9c:	03 2e       	mov	r0, r19
    3c9e:	39 e0       	ldi	r19, 0x09	; 9
    3ca0:	76 95       	lsr	r23
    3ca2:	67 95       	ror	r22
    3ca4:	57 95       	ror	r21
    3ca6:	47 95       	ror	r20
    3ca8:	3a 95       	dec	r19
    3caa:	d1 f7       	brne	.-12     	; 0x3ca0 <f_write+0xb4>
    3cac:	30 2d       	mov	r19, r0
    3cae:	32 2e       	mov	r3, r18
    3cb0:	34 22       	and	r3, r20
    3cb2:	09 f0       	breq	.+2      	; 0x3cb6 <f_write+0xca>
    3cb4:	52 c0       	rjmp	.+164    	; 0x3d5a <f_write+0x16e>
    3cb6:	89 2b       	or	r24, r25
    3cb8:	8a 2b       	or	r24, r26
    3cba:	8b 2b       	or	r24, r27
    3cbc:	99 f4       	brne	.+38     	; 0x3ce4 <f_write+0xf8>
    3cbe:	ad 81       	ldd	r26, Y+5	; 0x05
    3cc0:	be 81       	ldd	r27, Y+6	; 0x06
    3cc2:	1e 96       	adiw	r26, 0x0e	; 14
    3cc4:	6d 91       	ld	r22, X+
    3cc6:	7d 91       	ld	r23, X+
    3cc8:	8d 91       	ld	r24, X+
    3cca:	9c 91       	ld	r25, X
    3ccc:	51 97       	sbiw	r26, 0x11	; 17
    3cce:	61 15       	cp	r22, r1
    3cd0:	71 05       	cpc	r23, r1
    3cd2:	81 05       	cpc	r24, r1
    3cd4:	91 05       	cpc	r25, r1
    3cd6:	a1 f4       	brne	.+40     	; 0x3d00 <f_write+0x114>
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	ba 01       	movw	r22, r20
    3cde:	c7 01       	movw	r24, r14
    3ce0:	9e d9       	rcall	.-3268   	; 0x301e <create_chain>
    3ce2:	08 c0       	rjmp	.+16     	; 0x3cf4 <f_write+0x108>
    3ce4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ce6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ce8:	42 89       	ldd	r20, Z+18	; 0x12
    3cea:	53 89       	ldd	r21, Z+19	; 0x13
    3cec:	64 89       	ldd	r22, Z+20	; 0x14
    3cee:	75 89       	ldd	r23, Z+21	; 0x15
    3cf0:	c7 01       	movw	r24, r14
    3cf2:	95 d9       	rcall	.-3286   	; 0x301e <create_chain>
    3cf4:	61 15       	cp	r22, r1
    3cf6:	71 05       	cpc	r23, r1
    3cf8:	81 05       	cpc	r24, r1
    3cfa:	91 05       	cpc	r25, r1
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <f_write+0x114>
    3cfe:	3a c1       	rjmp	.+628    	; 0x3f74 <f_write+0x388>
    3d00:	61 30       	cpi	r22, 0x01	; 1
    3d02:	71 05       	cpc	r23, r1
    3d04:	81 05       	cpc	r24, r1
    3d06:	91 05       	cpc	r25, r1
    3d08:	31 f4       	brne	.+12     	; 0x3d16 <f_write+0x12a>
    3d0a:	82 e0       	ldi	r24, 0x02	; 2
    3d0c:	ad 81       	ldd	r26, Y+5	; 0x05
    3d0e:	be 81       	ldd	r27, Y+6	; 0x06
    3d10:	15 96       	adiw	r26, 0x05	; 5
    3d12:	8c 93       	st	X, r24
    3d14:	4d c1       	rjmp	.+666    	; 0x3fb0 <f_write+0x3c4>
    3d16:	6f 3f       	cpi	r22, 0xFF	; 255
    3d18:	bf ef       	ldi	r27, 0xFF	; 255
    3d1a:	7b 07       	cpc	r23, r27
    3d1c:	8b 07       	cpc	r24, r27
    3d1e:	9b 07       	cpc	r25, r27
    3d20:	29 f4       	brne	.+10     	; 0x3d2c <f_write+0x140>
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	ed 81       	ldd	r30, Y+5	; 0x05
    3d26:	fe 81       	ldd	r31, Y+6	; 0x06
    3d28:	85 83       	std	Z+5, r24	; 0x05
    3d2a:	42 c1       	rjmp	.+644    	; 0x3fb0 <f_write+0x3c4>
    3d2c:	ad 81       	ldd	r26, Y+5	; 0x05
    3d2e:	be 81       	ldd	r27, Y+6	; 0x06
    3d30:	52 96       	adiw	r26, 0x12	; 18
    3d32:	6d 93       	st	X+, r22
    3d34:	7d 93       	st	X+, r23
    3d36:	8d 93       	st	X+, r24
    3d38:	9c 93       	st	X, r25
    3d3a:	55 97       	sbiw	r26, 0x15	; 21
    3d3c:	1e 96       	adiw	r26, 0x0e	; 14
    3d3e:	4d 90       	ld	r4, X+
    3d40:	5d 90       	ld	r5, X+
    3d42:	6d 90       	ld	r6, X+
    3d44:	7c 90       	ld	r7, X
    3d46:	51 97       	sbiw	r26, 0x11	; 17
    3d48:	45 28       	or	r4, r5
    3d4a:	46 28       	or	r4, r6
    3d4c:	47 28       	or	r4, r7
    3d4e:	29 f4       	brne	.+10     	; 0x3d5a <f_write+0x16e>
    3d50:	fd 01       	movw	r30, r26
    3d52:	66 87       	std	Z+14, r22	; 0x0e
    3d54:	77 87       	std	Z+15, r23	; 0x0f
    3d56:	80 8b       	std	Z+16, r24	; 0x10
    3d58:	91 8b       	std	Z+17, r25	; 0x11
    3d5a:	ad 81       	ldd	r26, Y+5	; 0x05
    3d5c:	be 81       	ldd	r27, Y+6	; 0x06
    3d5e:	14 96       	adiw	r26, 0x04	; 4
    3d60:	8c 91       	ld	r24, X
    3d62:	14 97       	sbiw	r26, 0x04	; 4
    3d64:	86 ff       	sbrs	r24, 6
    3d66:	1e c0       	rjmp	.+60     	; 0x3da4 <f_write+0x1b8>
    3d68:	56 96       	adiw	r26, 0x16	; 22
    3d6a:	2d 91       	ld	r18, X+
    3d6c:	3d 91       	ld	r19, X+
    3d6e:	4d 91       	ld	r20, X+
    3d70:	5c 91       	ld	r21, X
    3d72:	59 97       	sbiw	r26, 0x19	; 25
    3d74:	ed 91       	ld	r30, X+
    3d76:	fc 91       	ld	r31, X
    3d78:	01 e0       	ldi	r16, 0x01	; 1
    3d7a:	10 e0       	ldi	r17, 0x00	; 0
    3d7c:	6b 81       	ldd	r22, Y+3	; 0x03
    3d7e:	7c 81       	ldd	r23, Y+4	; 0x04
    3d80:	81 81       	ldd	r24, Z+1	; 0x01
    3d82:	0e 94 24 09 	call	0x1248	; 0x1248 <disk_write>
    3d86:	88 23       	and	r24, r24
    3d88:	29 f0       	breq	.+10     	; 0x3d94 <f_write+0x1a8>
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	ed 81       	ldd	r30, Y+5	; 0x05
    3d8e:	fe 81       	ldd	r31, Y+6	; 0x06
    3d90:	85 83       	std	Z+5, r24	; 0x05
    3d92:	0e c1       	rjmp	.+540    	; 0x3fb0 <f_write+0x3c4>
    3d94:	ad 81       	ldd	r26, Y+5	; 0x05
    3d96:	be 81       	ldd	r27, Y+6	; 0x06
    3d98:	14 96       	adiw	r26, 0x04	; 4
    3d9a:	8c 91       	ld	r24, X
    3d9c:	14 97       	sbiw	r26, 0x04	; 4
    3d9e:	8f 7b       	andi	r24, 0xBF	; 191
    3da0:	14 96       	adiw	r26, 0x04	; 4
    3da2:	8c 93       	st	X, r24
    3da4:	ed 81       	ldd	r30, Y+5	; 0x05
    3da6:	fe 81       	ldd	r31, Y+6	; 0x06
    3da8:	01 90       	ld	r0, Z+
    3daa:	f0 81       	ld	r31, Z
    3dac:	e0 2d       	mov	r30, r0
    3dae:	fa 83       	std	Y+2, r31	; 0x02
    3db0:	e9 83       	std	Y+1, r30	; 0x01
    3db2:	ad 81       	ldd	r26, Y+5	; 0x05
    3db4:	be 81       	ldd	r27, Y+6	; 0x06
    3db6:	52 96       	adiw	r26, 0x12	; 18
    3db8:	4d 91       	ld	r20, X+
    3dba:	5d 91       	ld	r21, X+
    3dbc:	6d 91       	ld	r22, X+
    3dbe:	7c 91       	ld	r23, X
    3dc0:	55 97       	sbiw	r26, 0x15	; 21
    3dc2:	cf 01       	movw	r24, r30
    3dc4:	0e 94 00 15 	call	0x2a00	; 0x2a00 <clust2sect>
    3dc8:	61 15       	cp	r22, r1
    3dca:	71 05       	cpc	r23, r1
    3dcc:	81 05       	cpc	r24, r1
    3dce:	91 05       	cpc	r25, r1
    3dd0:	29 f4       	brne	.+10     	; 0x3ddc <f_write+0x1f0>
    3dd2:	82 e0       	ldi	r24, 0x02	; 2
    3dd4:	ed 81       	ldd	r30, Y+5	; 0x05
    3dd6:	fe 81       	ldd	r31, Y+6	; 0x06
    3dd8:	85 83       	std	Z+5, r24	; 0x05
    3dda:	ea c0       	rjmp	.+468    	; 0x3fb0 <f_write+0x3c4>
    3ddc:	2b 01       	movw	r4, r22
    3dde:	3c 01       	movw	r6, r24
    3de0:	43 0c       	add	r4, r3
    3de2:	51 1c       	adc	r5, r1
    3de4:	61 1c       	adc	r6, r1
    3de6:	71 1c       	adc	r7, r1
    3de8:	76 01       	movw	r14, r12
    3dea:	ef 2c       	mov	r14, r15
    3dec:	ff 24       	eor	r15, r15
    3dee:	e6 94       	lsr	r14
    3df0:	e1 14       	cp	r14, r1
    3df2:	f1 04       	cpc	r15, r1
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <f_write+0x20c>
    3df6:	4a c0       	rjmp	.+148    	; 0x3e8c <f_write+0x2a0>
    3df8:	a9 81       	ldd	r26, Y+1	; 0x01
    3dfa:	ba 81       	ldd	r27, Y+2	; 0x02
    3dfc:	12 96       	adiw	r26, 0x02	; 2
    3dfe:	4c 91       	ld	r20, X
    3e00:	24 2f       	mov	r18, r20
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	c7 01       	movw	r24, r14
    3e06:	83 0d       	add	r24, r3
    3e08:	91 1d       	adc	r25, r1
    3e0a:	28 17       	cp	r18, r24
    3e0c:	39 07       	cpc	r19, r25
    3e0e:	18 f4       	brcc	.+6      	; 0x3e16 <f_write+0x22a>
    3e10:	79 01       	movw	r14, r18
    3e12:	e3 18       	sub	r14, r3
    3e14:	f1 08       	sbc	r15, r1
    3e16:	87 01       	movw	r16, r14
    3e18:	a3 01       	movw	r20, r6
    3e1a:	92 01       	movw	r18, r4
    3e1c:	b4 01       	movw	r22, r8
    3e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e20:	fa 81       	ldd	r31, Y+2	; 0x02
    3e22:	81 81       	ldd	r24, Z+1	; 0x01
    3e24:	0e 94 24 09 	call	0x1248	; 0x1248 <disk_write>
    3e28:	88 23       	and	r24, r24
    3e2a:	31 f0       	breq	.+12     	; 0x3e38 <f_write+0x24c>
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	ad 81       	ldd	r26, Y+5	; 0x05
    3e30:	be 81       	ldd	r27, Y+6	; 0x06
    3e32:	15 96       	adiw	r26, 0x05	; 5
    3e34:	8c 93       	st	X, r24
    3e36:	bc c0       	rjmp	.+376    	; 0x3fb0 <f_write+0x3c4>
    3e38:	ed 81       	ldd	r30, Y+5	; 0x05
    3e3a:	fe 81       	ldd	r31, Y+6	; 0x06
    3e3c:	86 89       	ldd	r24, Z+22	; 0x16
    3e3e:	97 89       	ldd	r25, Z+23	; 0x17
    3e40:	a0 8d       	ldd	r26, Z+24	; 0x18
    3e42:	b1 8d       	ldd	r27, Z+25	; 0x19
    3e44:	84 19       	sub	r24, r4
    3e46:	95 09       	sbc	r25, r5
    3e48:	a6 09       	sbc	r26, r6
    3e4a:	b7 09       	sbc	r27, r7
    3e4c:	a7 01       	movw	r20, r14
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	70 e0       	ldi	r23, 0x00	; 0
    3e52:	84 17       	cp	r24, r20
    3e54:	95 07       	cpc	r25, r21
    3e56:	a6 07       	cpc	r26, r22
    3e58:	b7 07       	cpc	r27, r23
    3e5a:	a0 f4       	brcc	.+40     	; 0x3e84 <f_write+0x298>
    3e5c:	98 2f       	mov	r25, r24
    3e5e:	88 27       	eor	r24, r24
    3e60:	99 0f       	add	r25, r25
    3e62:	b4 01       	movw	r22, r8
    3e64:	68 0f       	add	r22, r24
    3e66:	79 1f       	adc	r23, r25
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	52 e0       	ldi	r21, 0x02	; 2
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e70:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <mem_cpy>
    3e74:	ad 81       	ldd	r26, Y+5	; 0x05
    3e76:	be 81       	ldd	r27, Y+6	; 0x06
    3e78:	14 96       	adiw	r26, 0x04	; 4
    3e7a:	8c 91       	ld	r24, X
    3e7c:	14 97       	sbiw	r26, 0x04	; 4
    3e7e:	8f 7b       	andi	r24, 0xBF	; 191
    3e80:	14 96       	adiw	r26, 0x04	; 4
    3e82:	8c 93       	st	X, r24
    3e84:	fe 2c       	mov	r15, r14
    3e86:	ee 24       	eor	r14, r14
    3e88:	ff 0c       	add	r15, r15
    3e8a:	58 c0       	rjmp	.+176    	; 0x3f3c <f_write+0x350>
    3e8c:	ed 81       	ldd	r30, Y+5	; 0x05
    3e8e:	fe 81       	ldd	r31, Y+6	; 0x06
    3e90:	86 89       	ldd	r24, Z+22	; 0x16
    3e92:	97 89       	ldd	r25, Z+23	; 0x17
    3e94:	a0 8d       	ldd	r26, Z+24	; 0x18
    3e96:	b1 8d       	ldd	r27, Z+25	; 0x19
    3e98:	84 15       	cp	r24, r4
    3e9a:	95 05       	cpc	r25, r5
    3e9c:	a6 05       	cpc	r26, r6
    3e9e:	b7 05       	cpc	r27, r7
    3ea0:	01 f1       	breq	.+64     	; 0x3ee2 <f_write+0x2f6>
    3ea2:	46 81       	ldd	r20, Z+6	; 0x06
    3ea4:	57 81       	ldd	r21, Z+7	; 0x07
    3ea6:	60 85       	ldd	r22, Z+8	; 0x08
    3ea8:	71 85       	ldd	r23, Z+9	; 0x09
    3eaa:	82 85       	ldd	r24, Z+10	; 0x0a
    3eac:	93 85       	ldd	r25, Z+11	; 0x0b
    3eae:	a4 85       	ldd	r26, Z+12	; 0x0c
    3eb0:	b5 85       	ldd	r27, Z+13	; 0x0d
    3eb2:	48 17       	cp	r20, r24
    3eb4:	59 07       	cpc	r21, r25
    3eb6:	6a 07       	cpc	r22, r26
    3eb8:	7b 07       	cpc	r23, r27
    3eba:	98 f4       	brcc	.+38     	; 0x3ee2 <f_write+0x2f6>
    3ebc:	01 e0       	ldi	r16, 0x01	; 1
    3ebe:	10 e0       	ldi	r17, 0x00	; 0
    3ec0:	a3 01       	movw	r20, r6
    3ec2:	92 01       	movw	r18, r4
    3ec4:	6b 81       	ldd	r22, Y+3	; 0x03
    3ec6:	7c 81       	ldd	r23, Y+4	; 0x04
    3ec8:	a9 81       	ldd	r26, Y+1	; 0x01
    3eca:	ba 81       	ldd	r27, Y+2	; 0x02
    3ecc:	11 96       	adiw	r26, 0x01	; 1
    3ece:	8c 91       	ld	r24, X
    3ed0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <disk_read>
    3ed4:	88 23       	and	r24, r24
    3ed6:	29 f0       	breq	.+10     	; 0x3ee2 <f_write+0x2f6>
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	ed 81       	ldd	r30, Y+5	; 0x05
    3edc:	fe 81       	ldd	r31, Y+6	; 0x06
    3ede:	85 83       	std	Z+5, r24	; 0x05
    3ee0:	67 c0       	rjmp	.+206    	; 0x3fb0 <f_write+0x3c4>
    3ee2:	ad 81       	ldd	r26, Y+5	; 0x05
    3ee4:	be 81       	ldd	r27, Y+6	; 0x06
    3ee6:	56 96       	adiw	r26, 0x16	; 22
    3ee8:	4d 92       	st	X+, r4
    3eea:	5d 92       	st	X+, r5
    3eec:	6d 92       	st	X+, r6
    3eee:	7c 92       	st	X, r7
    3ef0:	59 97       	sbiw	r26, 0x19	; 25
    3ef2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ef4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ef6:	86 81       	ldd	r24, Z+6	; 0x06
    3ef8:	97 81       	ldd	r25, Z+7	; 0x07
    3efa:	a0 85       	ldd	r26, Z+8	; 0x08
    3efc:	b1 85       	ldd	r27, Z+9	; 0x09
    3efe:	ac 01       	movw	r20, r24
    3f00:	51 70       	andi	r21, 0x01	; 1
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	32 e0       	ldi	r19, 0x02	; 2
    3f06:	24 1b       	sub	r18, r20
    3f08:	35 0b       	sbc	r19, r21
    3f0a:	76 01       	movw	r14, r12
    3f0c:	2c 15       	cp	r18, r12
    3f0e:	3d 05       	cpc	r19, r13
    3f10:	08 f4       	brcc	.+2      	; 0x3f14 <f_write+0x328>
    3f12:	79 01       	movw	r14, r18
    3f14:	91 70       	andi	r25, 0x01	; 1
    3f16:	aa 27       	eor	r26, r26
    3f18:	bb 27       	eor	r27, r27
    3f1a:	80 96       	adiw	r24, 0x20	; 32
    3f1c:	a7 01       	movw	r20, r14
    3f1e:	b4 01       	movw	r22, r8
    3f20:	2d 81       	ldd	r18, Y+5	; 0x05
    3f22:	3e 81       	ldd	r19, Y+6	; 0x06
    3f24:	82 0f       	add	r24, r18
    3f26:	93 1f       	adc	r25, r19
    3f28:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <mem_cpy>
    3f2c:	ad 81       	ldd	r26, Y+5	; 0x05
    3f2e:	be 81       	ldd	r27, Y+6	; 0x06
    3f30:	14 96       	adiw	r26, 0x04	; 4
    3f32:	8c 91       	ld	r24, X
    3f34:	14 97       	sbiw	r26, 0x04	; 4
    3f36:	80 64       	ori	r24, 0x40	; 64
    3f38:	14 96       	adiw	r26, 0x04	; 4
    3f3a:	8c 93       	st	X, r24
    3f3c:	8e 0c       	add	r8, r14
    3f3e:	9f 1c       	adc	r9, r15
    3f40:	ed 81       	ldd	r30, Y+5	; 0x05
    3f42:	fe 81       	ldd	r31, Y+6	; 0x06
    3f44:	86 81       	ldd	r24, Z+6	; 0x06
    3f46:	97 81       	ldd	r25, Z+7	; 0x07
    3f48:	a0 85       	ldd	r26, Z+8	; 0x08
    3f4a:	b1 85       	ldd	r27, Z+9	; 0x09
    3f4c:	8e 0d       	add	r24, r14
    3f4e:	9f 1d       	adc	r25, r15
    3f50:	a1 1d       	adc	r26, r1
    3f52:	b1 1d       	adc	r27, r1
    3f54:	86 83       	std	Z+6, r24	; 0x06
    3f56:	97 83       	std	Z+7, r25	; 0x07
    3f58:	a0 87       	std	Z+8, r26	; 0x08
    3f5a:	b1 87       	std	Z+9, r27	; 0x09
    3f5c:	d5 01       	movw	r26, r10
    3f5e:	8d 91       	ld	r24, X+
    3f60:	9c 91       	ld	r25, X
    3f62:	11 97       	sbiw	r26, 0x01	; 1
    3f64:	8e 0d       	add	r24, r14
    3f66:	9f 1d       	adc	r25, r15
    3f68:	8d 93       	st	X+, r24
    3f6a:	9c 93       	st	X, r25
    3f6c:	ce 18       	sub	r12, r14
    3f6e:	df 08       	sbc	r13, r15
    3f70:	09 f0       	breq	.+2      	; 0x3f74 <f_write+0x388>
    3f72:	7d ce       	rjmp	.-774    	; 0x3c6e <f_write+0x82>
    3f74:	ed 81       	ldd	r30, Y+5	; 0x05
    3f76:	fe 81       	ldd	r31, Y+6	; 0x06
    3f78:	86 81       	ldd	r24, Z+6	; 0x06
    3f7a:	97 81       	ldd	r25, Z+7	; 0x07
    3f7c:	a0 85       	ldd	r26, Z+8	; 0x08
    3f7e:	b1 85       	ldd	r27, Z+9	; 0x09
    3f80:	42 85       	ldd	r20, Z+10	; 0x0a
    3f82:	53 85       	ldd	r21, Z+11	; 0x0b
    3f84:	64 85       	ldd	r22, Z+12	; 0x0c
    3f86:	75 85       	ldd	r23, Z+13	; 0x0d
    3f88:	48 17       	cp	r20, r24
    3f8a:	59 07       	cpc	r21, r25
    3f8c:	6a 07       	cpc	r22, r26
    3f8e:	7b 07       	cpc	r23, r27
    3f90:	20 f4       	brcc	.+8      	; 0x3f9a <f_write+0x3ae>
    3f92:	82 87       	std	Z+10, r24	; 0x0a
    3f94:	93 87       	std	Z+11, r25	; 0x0b
    3f96:	a4 87       	std	Z+12, r26	; 0x0c
    3f98:	b5 87       	std	Z+13, r27	; 0x0d
    3f9a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f9c:	be 81       	ldd	r27, Y+6	; 0x06
    3f9e:	14 96       	adiw	r26, 0x04	; 4
    3fa0:	8c 91       	ld	r24, X
    3fa2:	14 97       	sbiw	r26, 0x04	; 4
    3fa4:	80 62       	ori	r24, 0x20	; 32
    3fa6:	14 96       	adiw	r26, 0x04	; 4
    3fa8:	8c 93       	st	X, r24
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <f_write+0x3c4>
    3fae:	87 e0       	ldi	r24, 0x07	; 7
    3fb0:	26 96       	adiw	r28, 0x06	; 6
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	df 91       	pop	r29
    3fbe:	cf 91       	pop	r28
    3fc0:	1f 91       	pop	r17
    3fc2:	0f 91       	pop	r16
    3fc4:	ff 90       	pop	r15
    3fc6:	ef 90       	pop	r14
    3fc8:	df 90       	pop	r13
    3fca:	cf 90       	pop	r12
    3fcc:	bf 90       	pop	r11
    3fce:	af 90       	pop	r10
    3fd0:	9f 90       	pop	r9
    3fd2:	8f 90       	pop	r8
    3fd4:	7f 90       	pop	r7
    3fd6:	6f 90       	pop	r6
    3fd8:	5f 90       	pop	r5
    3fda:	4f 90       	pop	r4
    3fdc:	3f 90       	pop	r3
    3fde:	08 95       	ret

00003fe0 <putc_bfd>:
    3fe0:	ef 92       	push	r14
    3fe2:	ff 92       	push	r15
    3fe4:	0f 93       	push	r16
    3fe6:	1f 93       	push	r17
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	00 d0       	rcall	.+0      	; 0x3fee <putc_bfd+0xe>
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	22 81       	ldd	r18, Z+2	; 0x02
    3ff6:	33 81       	ldd	r19, Z+3	; 0x03
    3ff8:	33 23       	and	r19, r19
    3ffa:	6c f1       	brlt	.+90     	; 0x4056 <putc_bfd+0x76>
    3ffc:	8c 01       	movw	r16, r24
    3ffe:	79 01       	movw	r14, r18
    4000:	ff ef       	ldi	r31, 0xFF	; 255
    4002:	ef 1a       	sub	r14, r31
    4004:	ff 0a       	sbc	r15, r31
    4006:	fc 01       	movw	r30, r24
    4008:	e2 0f       	add	r30, r18
    400a:	f3 1f       	adc	r31, r19
    400c:	66 83       	std	Z+6, r22	; 0x06
    400e:	8d e3       	ldi	r24, 0x3D	; 61
    4010:	e8 16       	cp	r14, r24
    4012:	f1 04       	cpc	r15, r1
    4014:	c4 f0       	brlt	.+48     	; 0x4046 <putc_bfd+0x66>
    4016:	9e 01       	movw	r18, r28
    4018:	2f 5f       	subi	r18, 0xFF	; 255
    401a:	3f 4f       	sbci	r19, 0xFF	; 255
    401c:	a7 01       	movw	r20, r14
    401e:	b8 01       	movw	r22, r16
    4020:	6a 5f       	subi	r22, 0xFA	; 250
    4022:	7f 4f       	sbci	r23, 0xFF	; 255
    4024:	f8 01       	movw	r30, r16
    4026:	80 81       	ld	r24, Z
    4028:	91 81       	ldd	r25, Z+1	; 0x01
    402a:	e0 dd       	rcall	.-1088   	; 0x3bec <f_write>
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	29 81       	ldd	r18, Y+1	; 0x01
    4032:	3a 81       	ldd	r19, Y+2	; 0x02
    4034:	e2 16       	cp	r14, r18
    4036:	f3 06       	cpc	r15, r19
    4038:	11 f4       	brne	.+4      	; 0x403e <putc_bfd+0x5e>
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	ee 24       	eor	r14, r14
    4040:	ff 24       	eor	r15, r15
    4042:	e8 1a       	sub	r14, r24
    4044:	f9 0a       	sbc	r15, r25
    4046:	f8 01       	movw	r30, r16
    4048:	f3 82       	std	Z+3, r15	; 0x03
    404a:	e2 82       	std	Z+2, r14	; 0x02
    404c:	84 81       	ldd	r24, Z+4	; 0x04
    404e:	95 81       	ldd	r25, Z+5	; 0x05
    4050:	01 96       	adiw	r24, 0x01	; 1
    4052:	95 83       	std	Z+5, r25	; 0x05
    4054:	84 83       	std	Z+4, r24	; 0x04
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	df 91       	pop	r29
    405c:	cf 91       	pop	r28
    405e:	1f 91       	pop	r17
    4060:	0f 91       	pop	r16
    4062:	ff 90       	pop	r15
    4064:	ef 90       	pop	r14
    4066:	08 95       	ret

00004068 <f_sync>:
    4068:	0f 93       	push	r16
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	ec 01       	movw	r28, r24
    4072:	0e 94 19 11 	call	0x2232	; 0x2232 <validate>
    4076:	81 11       	cpse	r24, r1
    4078:	b5 c0       	rjmp	.+362    	; 0x41e4 <__stack+0xe5>
    407a:	8c 81       	ldd	r24, Y+4	; 0x04
    407c:	85 ff       	sbrs	r24, 5
    407e:	b4 c0       	rjmp	.+360    	; 0x41e8 <__stack+0xe9>
    4080:	86 ff       	sbrs	r24, 6
    4082:	13 c0       	rjmp	.+38     	; 0x40aa <f_sync+0x42>
    4084:	2e 89       	ldd	r18, Y+22	; 0x16
    4086:	3f 89       	ldd	r19, Y+23	; 0x17
    4088:	48 8d       	ldd	r20, Y+24	; 0x18
    408a:	59 8d       	ldd	r21, Y+25	; 0x19
    408c:	e8 81       	ld	r30, Y
    408e:	f9 81       	ldd	r31, Y+1	; 0x01
    4090:	01 e0       	ldi	r16, 0x01	; 1
    4092:	10 e0       	ldi	r17, 0x00	; 0
    4094:	be 01       	movw	r22, r28
    4096:	60 5e       	subi	r22, 0xE0	; 224
    4098:	7f 4f       	sbci	r23, 0xFF	; 255
    409a:	81 81       	ldd	r24, Z+1	; 0x01
    409c:	0e 94 24 09 	call	0x1248	; 0x1248 <disk_write>
    40a0:	81 11       	cpse	r24, r1
    40a2:	a4 c0       	rjmp	.+328    	; 0x41ec <__stack+0xed>
    40a4:	8c 81       	ldd	r24, Y+4	; 0x04
    40a6:	8f 7b       	andi	r24, 0xBF	; 191
    40a8:	8c 83       	std	Y+4, r24	; 0x04
    40aa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    40ac:	5b 8d       	ldd	r21, Y+27	; 0x1b
    40ae:	6c 8d       	ldd	r22, Y+28	; 0x1c
    40b0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    40b2:	88 81       	ld	r24, Y
    40b4:	99 81       	ldd	r25, Y+1	; 0x01
    40b6:	0e 94 75 10 	call	0x20ea	; 0x20ea <move_window>
    40ba:	81 11       	cpse	r24, r1
    40bc:	99 c0       	rjmp	.+306    	; 0x41f0 <__stack+0xf1>
    40be:	0e 8d       	ldd	r16, Y+30	; 0x1e
    40c0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    40c2:	f8 01       	movw	r30, r16
    40c4:	83 85       	ldd	r24, Z+11	; 0x0b
    40c6:	80 62       	ori	r24, 0x20	; 32
    40c8:	83 87       	std	Z+11, r24	; 0x0b
    40ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    40cc:	84 8f       	std	Z+28, r24	; 0x1c
    40ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    40d0:	85 8f       	std	Z+29, r24	; 0x1d
    40d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    40d4:	86 8f       	std	Z+30, r24	; 0x1e
    40d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d8:	87 8f       	std	Z+31, r24	; 0x1f
    40da:	8e 85       	ldd	r24, Y+14	; 0x0e
    40dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    40de:	a8 89       	ldd	r26, Y+16	; 0x10
    40e0:	b9 89       	ldd	r27, Y+17	; 0x11
    40e2:	82 8f       	std	Z+26, r24	; 0x1a
    40e4:	93 8f       	std	Z+27, r25	; 0x1b
    40e6:	cd 01       	movw	r24, r26
    40e8:	aa 27       	eor	r26, r26
    40ea:	bb 27       	eor	r27, r27
    40ec:	84 8b       	std	Z+20, r24	; 0x14
    40ee:	95 8b       	std	Z+21, r25	; 0x15
    40f0:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <get_fattime>
    40f4:	f8 01       	movw	r30, r16
    40f6:	66 8b       	std	Z+22, r22	; 0x16
    40f8:	77 8b       	std	Z+23, r23	; 0x17
    40fa:	80 8f       	std	Z+24, r24	; 0x18
    40fc:	91 8f       	std	Z+25, r25	; 0x19
    40fe:	12 8a       	std	Z+18, r1	; 0x12
    4100:	13 8a       	std	Z+19, r1	; 0x13
    4102:	8c 81       	ldd	r24, Y+4	; 0x04
    4104:	8f 7d       	andi	r24, 0xDF	; 223
    4106:	8c 83       	std	Y+4, r24	; 0x04
    4108:	e8 81       	ld	r30, Y
    410a:	f9 81       	ldd	r31, Y+1	; 0x01
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	84 83       	std	Z+4, r24	; 0x04
    4110:	09 90       	ld	r0, Y+
    4112:	d8 81       	ld	r29, Y
    4114:	c0 2d       	mov	r28, r0
    4116:	ce 01       	movw	r24, r28
    4118:	0e 94 0c 10 	call	0x2018	; 0x2018 <sync_window>
    411c:	81 11       	cpse	r24, r1
    411e:	6a c0       	rjmp	.+212    	; 0x41f4 <__stack+0xf5>
    4120:	88 81       	ld	r24, Y
    4122:	83 30       	cpi	r24, 0x03	; 3
    4124:	09 f0       	breq	.+2      	; 0x4128 <__stack+0x29>
    4126:	53 c0       	rjmp	.+166    	; 0x41ce <__stack+0xcf>
    4128:	8d 81       	ldd	r24, Y+5	; 0x05
    412a:	81 30       	cpi	r24, 0x01	; 1
    412c:	09 f0       	breq	.+2      	; 0x4130 <__stack+0x31>
    412e:	4f c0       	rjmp	.+158    	; 0x41ce <__stack+0xcf>
    4130:	be 01       	movw	r22, r28
    4132:	62 5d       	subi	r22, 0xD2	; 210
    4134:	7f 4f       	sbci	r23, 0xFF	; 255
    4136:	fb 01       	movw	r30, r22
    4138:	ce 01       	movw	r24, r28
    413a:	82 5d       	subi	r24, 0xD2	; 210
    413c:	9d 4f       	sbci	r25, 0xFD	; 253
    413e:	11 92       	st	Z+, r1
    4140:	e8 17       	cp	r30, r24
    4142:	f9 07       	cpc	r31, r25
    4144:	e1 f7       	brne	.-8      	; 0x413e <__stack+0x3f>
    4146:	85 e5       	ldi	r24, 0x55	; 85
    4148:	fe 01       	movw	r30, r28
    414a:	e4 5d       	subi	r30, 0xD4	; 212
    414c:	fd 4f       	sbci	r31, 0xFD	; 253
    414e:	80 83       	st	Z, r24
    4150:	8a ea       	ldi	r24, 0xAA	; 170
    4152:	31 96       	adiw	r30, 0x01	; 1
    4154:	80 83       	st	Z, r24
    4156:	82 e5       	ldi	r24, 0x52	; 82
    4158:	8e a7       	std	Y+46, r24	; 0x2e
    415a:	8f a7       	std	Y+47, r24	; 0x2f
    415c:	81 e6       	ldi	r24, 0x61	; 97
    415e:	88 ab       	std	Y+48, r24	; 0x30
    4160:	91 e4       	ldi	r25, 0x41	; 65
    4162:	99 ab       	std	Y+49, r25	; 0x31
    4164:	22 e7       	ldi	r18, 0x72	; 114
    4166:	7b 97       	sbiw	r30, 0x1b	; 27
    4168:	20 83       	st	Z, r18
    416a:	31 96       	adiw	r30, 0x01	; 1
    416c:	20 83       	st	Z, r18
    416e:	31 96       	adiw	r30, 0x01	; 1
    4170:	90 83       	st	Z, r25
    4172:	31 96       	adiw	r30, 0x01	; 1
    4174:	80 83       	st	Z, r24
    4176:	3e 85       	ldd	r19, Y+14	; 0x0e
    4178:	2f 85       	ldd	r18, Y+15	; 0x0f
    417a:	98 89       	ldd	r25, Y+16	; 0x10
    417c:	89 89       	ldd	r24, Y+17	; 0x11
    417e:	31 96       	adiw	r30, 0x01	; 1
    4180:	30 83       	st	Z, r19
    4182:	31 96       	adiw	r30, 0x01	; 1
    4184:	20 83       	st	Z, r18
    4186:	31 96       	adiw	r30, 0x01	; 1
    4188:	90 83       	st	Z, r25
    418a:	31 96       	adiw	r30, 0x01	; 1
    418c:	80 83       	st	Z, r24
    418e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4190:	2b 85       	ldd	r18, Y+11	; 0x0b
    4192:	9c 85       	ldd	r25, Y+12	; 0x0c
    4194:	8d 85       	ldd	r24, Y+13	; 0x0d
    4196:	31 96       	adiw	r30, 0x01	; 1
    4198:	30 83       	st	Z, r19
    419a:	31 96       	adiw	r30, 0x01	; 1
    419c:	20 83       	st	Z, r18
    419e:	31 96       	adiw	r30, 0x01	; 1
    41a0:	90 83       	st	Z, r25
    41a2:	31 96       	adiw	r30, 0x01	; 1
    41a4:	80 83       	st	Z, r24
    41a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    41a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    41aa:	ac 8d       	ldd	r26, Y+28	; 0x1c
    41ac:	bd 8d       	ldd	r27, Y+29	; 0x1d
    41ae:	9c 01       	movw	r18, r24
    41b0:	ad 01       	movw	r20, r26
    41b2:	2f 5f       	subi	r18, 0xFF	; 255
    41b4:	3f 4f       	sbci	r19, 0xFF	; 255
    41b6:	4f 4f       	sbci	r20, 0xFF	; 255
    41b8:	5f 4f       	sbci	r21, 0xFF	; 255
    41ba:	2a a7       	std	Y+42, r18	; 0x2a
    41bc:	3b a7       	std	Y+43, r19	; 0x2b
    41be:	4c a7       	std	Y+44, r20	; 0x2c
    41c0:	5d a7       	std	Y+45, r21	; 0x2d
    41c2:	01 e0       	ldi	r16, 0x01	; 1
    41c4:	10 e0       	ldi	r17, 0x00	; 0
    41c6:	89 81       	ldd	r24, Y+1	; 0x01
    41c8:	0e 94 24 09 	call	0x1248	; 0x1248 <disk_write>
    41cc:	1d 82       	std	Y+5, r1	; 0x05
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	50 e0       	ldi	r21, 0x00	; 0
    41d2:	60 e0       	ldi	r22, 0x00	; 0
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	0e 94 92 09 	call	0x1324	; 0x1324 <disk_ioctl>
    41da:	91 e0       	ldi	r25, 0x01	; 1
    41dc:	81 11       	cpse	r24, r1
    41de:	0b c0       	rjmp	.+22     	; 0x41f6 <__stack+0xf7>
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	09 c0       	rjmp	.+18     	; 0x41f6 <__stack+0xf7>
    41e4:	98 2f       	mov	r25, r24
    41e6:	07 c0       	rjmp	.+14     	; 0x41f6 <__stack+0xf7>
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	05 c0       	rjmp	.+10     	; 0x41f6 <__stack+0xf7>
    41ec:	91 e0       	ldi	r25, 0x01	; 1
    41ee:	03 c0       	rjmp	.+6      	; 0x41f6 <__stack+0xf7>
    41f0:	98 2f       	mov	r25, r24
    41f2:	01 c0       	rjmp	.+2      	; 0x41f6 <__stack+0xf7>
    41f4:	98 2f       	mov	r25, r24
    41f6:	89 2f       	mov	r24, r25
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	08 95       	ret

00004202 <f_close>:
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	ec 01       	movw	r28, r24
    4208:	2f df       	rcall	.-418    	; 0x4068 <f_sync>
    420a:	81 11       	cpse	r24, r1
    420c:	07 c0       	rjmp	.+14     	; 0x421c <f_close+0x1a>
    420e:	ce 01       	movw	r24, r28
    4210:	0e 94 19 11 	call	0x2232	; 0x2232 <validate>
    4214:	81 11       	cpse	r24, r1
    4216:	02 c0       	rjmp	.+4      	; 0x421c <f_close+0x1a>
    4218:	19 82       	std	Y+1, r1	; 0x01
    421a:	18 82       	st	Y, r1
    421c:	df 91       	pop	r29
    421e:	cf 91       	pop	r28
    4220:	08 95       	ret

00004222 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    4222:	2f 92       	push	r2
    4224:	3f 92       	push	r3
    4226:	4f 92       	push	r4
    4228:	5f 92       	push	r5
    422a:	6f 92       	push	r6
    422c:	7f 92       	push	r7
    422e:	8f 92       	push	r8
    4230:	9f 92       	push	r9
    4232:	af 92       	push	r10
    4234:	bf 92       	push	r11
    4236:	cf 92       	push	r12
    4238:	df 92       	push	r13
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	cf 93       	push	r28
    4244:	df 93       	push	r29
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	cc 55       	subi	r28, 0x5C	; 92
    424c:	d1 09       	sbc	r29, r1
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
    4258:	e5 96       	adiw	r28, 0x35	; 53
    425a:	ee ac       	ldd	r14, Y+62	; 0x3e
    425c:	ff ac       	ldd	r15, Y+63	; 0x3f
    425e:	e5 97       	sbiw	r28, 0x35	; 53
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    4260:	e3 96       	adiw	r28, 0x33	; 51
    4262:	8e ad       	ldd	r24, Y+62	; 0x3e
    4264:	9f ad       	ldd	r25, Y+63	; 0x3f
    4266:	e3 97       	sbiw	r28, 0x33	; 51
    4268:	9c 8b       	std	Y+20, r25	; 0x14
    426a:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    426c:	1e 8a       	std	Y+22, r1	; 0x16
    426e:	1d 8a       	std	Y+21, r1	; 0x15
    4270:	18 8e       	std	Y+24, r1	; 0x18
    4272:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    4274:	2e 01       	movw	r4, r28
    4276:	25 e7       	ldi	r18, 0x75	; 117
    4278:	42 0e       	add	r4, r18
    427a:	51 1c       	adc	r5, r1
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
			f |= 8;
		}
		i = 0;
    427c:	21 2c       	mov	r2, r1
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    427e:	0f 2e       	mov	r0, r31
    4280:	f7 e0       	ldi	r31, 0x07	; 7
    4282:	3f 2e       	mov	r3, r31
    4284:	f0 2d       	mov	r31, r0
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4286:	d7 01       	movw	r26, r14
    4288:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    428a:	66 23       	and	r22, r22
    428c:	09 f4       	brne	.+2      	; 0x4290 <f_printf+0x6e>
    428e:	8e c1       	rjmp	.+796    	; 0x45ac <f_printf+0x38a>
		if (c != '%') {				/* Non escape character */
    4290:	65 32       	cpi	r22, 0x25	; 37
    4292:	39 f0       	breq	.+14     	; 0x42a2 <f_printf+0x80>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4294:	bf ef       	ldi	r27, 0xFF	; 255
    4296:	eb 1a       	sub	r14, r27
    4298:	fb 0a       	sbc	r15, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    429a:	ce 01       	movw	r24, r28
    429c:	43 96       	adiw	r24, 0x13	; 19
    429e:	a0 de       	rcall	.-704    	; 0x3fe0 <putc_bfd>
			continue;
    42a0:	f2 cf       	rjmp	.-28     	; 0x4286 <f_printf+0x64>
		}
		w = f = 0;
		c = *fmt++;
    42a2:	f7 01       	movw	r30, r14
    42a4:	d1 80       	ldd	r13, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    42a6:	f0 e3       	ldi	r31, 0x30	; 48
    42a8:	df 12       	cpse	r13, r31
    42aa:	09 c0       	rjmp	.+18     	; 0x42be <f_printf+0x9c>
			f = 1; c = *fmt++;
    42ac:	d7 01       	movw	r26, r14
    42ae:	12 96       	adiw	r26, 0x02	; 2
    42b0:	dc 90       	ld	r13, X
    42b2:	f7 01       	movw	r30, r14
    42b4:	33 96       	adiw	r30, 0x03	; 3
    42b6:	7f 01       	movw	r14, r30
    42b8:	77 24       	eor	r7, r7
    42ba:	73 94       	inc	r7
    42bc:	11 c0       	rjmp	.+34     	; 0x42e0 <f_printf+0xbe>
		} else {
			if (c == '-') {			/* Flag: left justified */
    42be:	fd e2       	ldi	r31, 0x2D	; 45
    42c0:	df 16       	cp	r13, r31
    42c2:	29 f0       	breq	.+10     	; 0x42ce <f_printf+0xac>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    42c4:	22 e0       	ldi	r18, 0x02	; 2
    42c6:	e2 0e       	add	r14, r18
    42c8:	f1 1c       	adc	r15, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    42ca:	71 2c       	mov	r7, r1
    42cc:	09 c0       	rjmp	.+18     	; 0x42e0 <f_printf+0xbe>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    42ce:	d7 01       	movw	r26, r14
    42d0:	12 96       	adiw	r26, 0x02	; 2
    42d2:	dc 90       	ld	r13, X
    42d4:	f7 01       	movw	r30, r14
    42d6:	33 96       	adiw	r30, 0x03	; 3
    42d8:	7f 01       	movw	r14, r30
    42da:	68 94       	set
    42dc:	77 24       	eor	r7, r7
    42de:	71 f8       	bld	r7, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    42e0:	80 ed       	ldi	r24, 0xD0	; 208
    42e2:	8d 0d       	add	r24, r13
    42e4:	8a 30       	cpi	r24, 0x0A	; 10
    42e6:	f0 f4       	brcc	.+60     	; 0x4324 <f_printf+0x102>
    42e8:	02 2d       	mov	r16, r2
    42ea:	10 e0       	ldi	r17, 0x00	; 0
    42ec:	8d 2d       	mov	r24, r13
			w = w * 10 + c - '0';
    42ee:	98 01       	movw	r18, r16
    42f0:	22 0f       	add	r18, r18
    42f2:	33 1f       	adc	r19, r19
    42f4:	00 0f       	add	r16, r16
    42f6:	11 1f       	adc	r17, r17
    42f8:	00 0f       	add	r16, r16
    42fa:	11 1f       	adc	r17, r17
    42fc:	00 0f       	add	r16, r16
    42fe:	11 1f       	adc	r17, r17
    4300:	02 0f       	add	r16, r18
    4302:	13 1f       	adc	r17, r19
    4304:	08 0f       	add	r16, r24
    4306:	11 1d       	adc	r17, r1
    4308:	00 53       	subi	r16, 0x30	; 48
    430a:	11 09       	sbc	r17, r1
			c = *fmt++;
    430c:	ff ef       	ldi	r31, 0xFF	; 255
    430e:	ef 1a       	sub	r14, r31
    4310:	ff 0a       	sbc	r15, r31
    4312:	f7 01       	movw	r30, r14
    4314:	31 97       	sbiw	r30, 0x01	; 1
    4316:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    4318:	90 ed       	ldi	r25, 0xD0	; 208
    431a:	98 0f       	add	r25, r24
    431c:	9a 30       	cpi	r25, 0x0A	; 10
    431e:	38 f3       	brcs	.-50     	; 0x42ee <f_printf+0xcc>
    4320:	d8 2e       	mov	r13, r24
    4322:	02 c0       	rjmp	.+4      	; 0x4328 <f_printf+0x106>
    4324:	02 2d       	mov	r16, r2
    4326:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    4328:	8d 2d       	mov	r24, r13
    432a:	8f 7d       	andi	r24, 0xDF	; 223
    432c:	8c 34       	cpi	r24, 0x4C	; 76
    432e:	41 f4       	brne	.+16     	; 0x4340 <f_printf+0x11e>
			f |= 4; c = *fmt++;
    4330:	27 2d       	mov	r18, r7
    4332:	24 60       	ori	r18, 0x04	; 4
    4334:	72 2e       	mov	r7, r18
    4336:	d7 01       	movw	r26, r14
    4338:	dc 90       	ld	r13, X
    433a:	f7 01       	movw	r30, r14
    433c:	31 96       	adiw	r30, 0x01	; 1
    433e:	7f 01       	movw	r14, r30
		}
		if (!c) break;
    4340:	dd 20       	and	r13, r13
    4342:	09 f4       	brne	.+2      	; 0x4346 <f_printf+0x124>
    4344:	33 c1       	rjmp	.+614    	; 0x45ac <f_printf+0x38a>
		d = c;
		if (IsLower(d)) d -= 0x20;
    4346:	8f e9       	ldi	r24, 0x9F	; 159
    4348:	8d 0d       	add	r24, r13
    434a:	8a 31       	cpi	r24, 0x1A	; 26
    434c:	18 f4       	brcc	.+6      	; 0x4354 <f_printf+0x132>
    434e:	30 ee       	ldi	r19, 0xE0	; 224
    4350:	3d 0d       	add	r19, r13
    4352:	01 c0       	rjmp	.+2      	; 0x4356 <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    4354:	3d 2d       	mov	r19, r13
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    4356:	83 2f       	mov	r24, r19
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	fc 01       	movw	r30, r24
    435c:	e2 54       	subi	r30, 0x42	; 66
    435e:	f1 09       	sbc	r31, r1
    4360:	e7 31       	cpi	r30, 0x17	; 23
    4362:	f1 05       	cpc	r31, r1
    4364:	08 f0       	brcs	.+2      	; 0x4368 <f_printf+0x146>
    4366:	58 c0       	rjmp	.+176    	; 0x4418 <f_printf+0x1f6>
    4368:	e3 58       	subi	r30, 0x83	; 131
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	0c 94 b2 46 	jmp	0x8d64	; 0x8d64 <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    4370:	f2 01       	movw	r30, r4
    4372:	a0 80       	ld	r10, Z
    4374:	b1 80       	ldd	r11, Z+1	; 0x01
    4376:	f2 e0       	ldi	r31, 0x02	; 2
    4378:	4f 0e       	add	r4, r31
    437a:	51 1c       	adc	r5, r1
			for (j = 0; p[j]; j++) ;
    437c:	d5 01       	movw	r26, r10
    437e:	6c 91       	ld	r22, X
    4380:	66 23       	and	r22, r22
    4382:	09 f4       	brne	.+2      	; 0x4386 <f_printf+0x164>
    4384:	38 c1       	rjmp	.+624    	; 0x45f6 <f_printf+0x3d4>
    4386:	f5 01       	movw	r30, r10
    4388:	31 96       	adiw	r30, 0x01	; 1
    438a:	c2 2c       	mov	r12, r2
    438c:	d1 2c       	mov	r13, r1
    438e:	bf ef       	ldi	r27, 0xFF	; 255
    4390:	cb 1a       	sub	r12, r27
    4392:	db 0a       	sbc	r13, r27
    4394:	81 91       	ld	r24, Z+
    4396:	81 11       	cpse	r24, r1
    4398:	fa cf       	rjmp	.-12     	; 0x438e <f_printf+0x16c>
    439a:	2a c1       	rjmp	.+596    	; 0x45f0 <f_printf+0x3ce>
    439c:	c2 2c       	mov	r12, r2
    439e:	d1 2c       	mov	r13, r1
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    43a0:	66 24       	eor	r6, r6
    43a2:	63 94       	inc	r6
    43a4:	71 2c       	mov	r7, r1
    43a6:	46 01       	movw	r8, r12
    43a8:	60 e2       	ldi	r22, 0x20	; 32
    43aa:	ce 01       	movw	r24, r28
    43ac:	43 96       	adiw	r24, 0x13	; 19
    43ae:	18 de       	rcall	.-976    	; 0x3fe0 <putc_bfd>
    43b0:	ef ef       	ldi	r30, 0xFF	; 255
    43b2:	8e 1a       	sub	r8, r30
    43b4:	9e 0a       	sbc	r9, r30
    43b6:	80 16       	cp	r8, r16
    43b8:	91 06       	cpc	r9, r17
    43ba:	b0 f3       	brcs	.-20     	; 0x43a8 <f_printf+0x186>
    43bc:	93 01       	movw	r18, r6
    43be:	2c 19       	sub	r18, r12
    43c0:	3d 09       	sbc	r19, r13
    43c2:	69 01       	movw	r12, r18
    43c4:	c0 0e       	add	r12, r16
    43c6:	d1 1e       	adc	r13, r17
			}
			while (*p) putc_bfd(&pb, *p++);
    43c8:	d5 01       	movw	r26, r10
    43ca:	6c 91       	ld	r22, X
    43cc:	66 23       	and	r22, r22
    43ce:	59 f0       	breq	.+22     	; 0x43e6 <f_printf+0x1c4>
    43d0:	bf ef       	ldi	r27, 0xFF	; 255
    43d2:	ab 1a       	sub	r10, r27
    43d4:	bb 0a       	sbc	r11, r27
    43d6:	ce 01       	movw	r24, r28
    43d8:	43 96       	adiw	r24, 0x13	; 19
    43da:	02 de       	rcall	.-1020   	; 0x3fe0 <putc_bfd>
    43dc:	f5 01       	movw	r30, r10
    43de:	61 91       	ld	r22, Z+
    43e0:	5f 01       	movw	r10, r30
    43e2:	61 11       	cpse	r22, r1
    43e4:	f8 cf       	rjmp	.-16     	; 0x43d6 <f_printf+0x1b4>
			while (j++ < w) putc_bfd(&pb, ' ');
    43e6:	c0 16       	cp	r12, r16
    43e8:	d1 06       	cpc	r13, r17
    43ea:	08 f0       	brcs	.+2      	; 0x43ee <f_printf+0x1cc>
    43ec:	4c cf       	rjmp	.-360    	; 0x4286 <f_printf+0x64>
    43ee:	60 e2       	ldi	r22, 0x20	; 32
    43f0:	ce 01       	movw	r24, r28
    43f2:	43 96       	adiw	r24, 0x13	; 19
    43f4:	f5 dd       	rcall	.-1046   	; 0x3fe0 <putc_bfd>
    43f6:	ff ef       	ldi	r31, 0xFF	; 255
    43f8:	cf 1a       	sub	r12, r31
    43fa:	df 0a       	sbc	r13, r31
    43fc:	c0 16       	cp	r12, r16
    43fe:	d1 06       	cpc	r13, r17
    4400:	b0 f3       	brcs	.-20     	; 0x43ee <f_printf+0x1cc>
    4402:	41 cf       	rjmp	.-382    	; 0x4286 <f_printf+0x64>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    4404:	82 01       	movw	r16, r4
    4406:	0e 5f       	subi	r16, 0xFE	; 254
    4408:	1f 4f       	sbci	r17, 0xFF	; 255
    440a:	d2 01       	movw	r26, r4
    440c:	6c 91       	ld	r22, X
    440e:	ce 01       	movw	r24, r28
    4410:	43 96       	adiw	r24, 0x13	; 19
    4412:	e6 dd       	rcall	.-1076   	; 0x3fe0 <putc_bfd>
    4414:	28 01       	movw	r4, r16
    4416:	37 cf       	rjmp	.-402    	; 0x4286 <f_printf+0x64>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    4418:	6d 2d       	mov	r22, r13
    441a:	ce 01       	movw	r24, r28
    441c:	43 96       	adiw	r24, 0x13	; 19
    441e:	e0 dd       	rcall	.-1088   	; 0x3fe0 <putc_bfd>
    4420:	32 cf       	rjmp	.-412    	; 0x4286 <f_printf+0x64>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4422:	72 fe       	sbrs	r7, 2
    4424:	0e c0       	rjmp	.+28     	; 0x4442 <f_printf+0x220>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    4426:	aa e0       	ldi	r26, 0x0A	; 10
    4428:	01 c0       	rjmp	.+2      	; 0x442c <f_printf+0x20a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    442a:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    442c:	f2 01       	movw	r30, r4
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	b4 e0       	ldi	r27, 0x04	; 4
    4438:	4b 0e       	add	r4, r27
    443a:	51 1c       	adc	r5, r1
		if (d == 'D' && (v & 0x80000000)) {
    443c:	34 34       	cpi	r19, 0x44	; 68
    443e:	31 f5       	brne	.+76     	; 0x448c <f_printf+0x26a>
    4440:	19 c0       	rjmp	.+50     	; 0x4474 <f_printf+0x252>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    4442:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4444:	34 34       	cpi	r19, 0x44	; 68
    4446:	61 f4       	brne	.+24     	; 0x4460 <f_printf+0x23e>
    4448:	f2 01       	movw	r30, r4
    444a:	60 81       	ld	r22, Z
    444c:	71 81       	ldd	r23, Z+1	; 0x01
    444e:	07 2e       	mov	r0, r23
    4450:	00 0c       	add	r0, r0
    4452:	88 0b       	sbc	r24, r24
    4454:	99 0b       	sbc	r25, r25
    4456:	92 01       	movw	r18, r4
    4458:	2e 5f       	subi	r18, 0xFE	; 254
    445a:	3f 4f       	sbci	r19, 0xFF	; 255
    445c:	29 01       	movw	r4, r18
    445e:	0a c0       	rjmp	.+20     	; 0x4474 <f_printf+0x252>
    4460:	f2 01       	movw	r30, r4
    4462:	60 81       	ld	r22, Z
    4464:	71 81       	ldd	r23, Z+1	; 0x01
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	92 01       	movw	r18, r4
    446c:	2e 5f       	subi	r18, 0xFE	; 254
    446e:	3f 4f       	sbci	r19, 0xFF	; 255
    4470:	29 01       	movw	r4, r18
    4472:	0c c0       	rjmp	.+24     	; 0x448c <f_printf+0x26a>
		if (d == 'D' && (v & 0x80000000)) {
    4474:	99 23       	and	r25, r25
    4476:	54 f4       	brge	.+20     	; 0x448c <f_printf+0x26a>
			v = 0 - v;
    4478:	90 95       	com	r25
    447a:	80 95       	com	r24
    447c:	70 95       	com	r23
    447e:	61 95       	neg	r22
    4480:	7f 4f       	sbci	r23, 0xFF	; 255
    4482:	8f 4f       	sbci	r24, 0xFF	; 255
    4484:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    4486:	37 2d       	mov	r19, r7
    4488:	38 60       	ori	r19, 0x08	; 8
    448a:	73 2e       	mov	r7, r19
    448c:	ae 01       	movw	r20, r28
    448e:	4d 5f       	subi	r20, 0xFD	; 253
    4490:	5f 4f       	sbci	r21, 0xFF	; 255
    4492:	5a 01       	movw	r10, r20
		}
		i = 0;
    4494:	82 2c       	mov	r8, r2
    4496:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    4498:	2a 2f       	mov	r18, r26
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	40 e0       	ldi	r20, 0x00	; 0
    449e:	50 e0       	ldi	r21, 0x00	; 0
    44a0:	6d 96       	adiw	r28, 0x1d	; 29
    44a2:	2c af       	std	Y+60, r18	; 0x3c
    44a4:	3d af       	std	Y+61, r19	; 0x3d
    44a6:	4e af       	std	Y+62, r20	; 0x3e
    44a8:	5f af       	std	Y+63, r21	; 0x3f
    44aa:	6d 97       	sbiw	r28, 0x1d	; 29
    44ac:	97 01       	movw	r18, r14
    44ae:	78 01       	movw	r14, r16
    44b0:	1d 2d       	mov	r17, r13
    44b2:	69 01       	movw	r12, r18
    44b4:	6d 96       	adiw	r28, 0x1d	; 29
    44b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    44b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    44ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    44bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    44be:	6d 97       	sbiw	r28, 0x1d	; 29
    44c0:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <__udivmodsi4>
    44c4:	f6 2f       	mov	r31, r22
    44c6:	e6 2f       	mov	r30, r22
    44c8:	62 2f       	mov	r22, r18
    44ca:	73 2f       	mov	r23, r19
    44cc:	84 2f       	mov	r24, r20
    44ce:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    44d0:	fa 30       	cpi	r31, 0x0A	; 10
    44d2:	30 f0       	brcs	.+12     	; 0x44e0 <f_printf+0x2be>
    44d4:	18 37       	cpi	r17, 0x78	; 120
    44d6:	11 f0       	breq	.+4      	; 0x44dc <f_printf+0x2ba>
    44d8:	e3 2d       	mov	r30, r3
    44da:	01 c0       	rjmp	.+2      	; 0x44de <f_printf+0x2bc>
    44dc:	e7 e2       	ldi	r30, 0x27	; 39
    44de:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    44e0:	3f ef       	ldi	r19, 0xFF	; 255
    44e2:	83 1a       	sub	r8, r19
    44e4:	93 0a       	sbc	r9, r19
    44e6:	e0 5d       	subi	r30, 0xD0	; 208
    44e8:	d5 01       	movw	r26, r10
    44ea:	ed 93       	st	X+, r30
    44ec:	5d 01       	movw	r10, r26
		} while (v && i < sizeof s / sizeof s[0]);
    44ee:	61 15       	cp	r22, r1
    44f0:	71 05       	cpc	r23, r1
    44f2:	81 05       	cpc	r24, r1
    44f4:	91 05       	cpc	r25, r1
    44f6:	21 f0       	breq	.+8      	; 0x4500 <f_printf+0x2de>
    44f8:	b0 e1       	ldi	r27, 0x10	; 16
    44fa:	8b 16       	cp	r8, r27
    44fc:	91 04       	cpc	r9, r1
    44fe:	d1 f6       	brne	.-76     	; 0x44b4 <f_printf+0x292>
    4500:	87 01       	movw	r16, r14
    4502:	76 01       	movw	r14, r12
		if (f & 8) s[i++] = '-';
    4504:	73 fe       	sbrs	r7, 3
    4506:	0c c0       	rjmp	.+24     	; 0x4520 <f_printf+0x2fe>
    4508:	e3 e0       	ldi	r30, 0x03	; 3
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	ec 0f       	add	r30, r28
    450e:	fd 1f       	adc	r31, r29
    4510:	e8 0d       	add	r30, r8
    4512:	f9 1d       	adc	r31, r9
    4514:	2d e2       	ldi	r18, 0x2D	; 45
    4516:	20 83       	st	Z, r18
    4518:	a4 01       	movw	r20, r8
    451a:	4f 5f       	subi	r20, 0xFF	; 255
    451c:	5f 4f       	sbci	r21, 0xFF	; 255
    451e:	4a 01       	movw	r8, r20
		j = i; d = (f & 1) ? '0' : ' ';
    4520:	70 fc       	sbrc	r7, 0
    4522:	04 c0       	rjmp	.+8      	; 0x452c <f_printf+0x30a>
    4524:	68 94       	set
    4526:	66 24       	eor	r6, r6
    4528:	65 f8       	bld	r6, 5
    452a:	04 c0       	rjmp	.+8      	; 0x4534 <f_printf+0x312>
    452c:	0f 2e       	mov	r0, r31
    452e:	f0 e3       	ldi	r31, 0x30	; 48
    4530:	6f 2e       	mov	r6, r31
    4532:	f0 2d       	mov	r31, r0
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    4534:	71 fc       	sbrc	r7, 1
    4536:	15 c0       	rjmp	.+42     	; 0x4562 <f_printf+0x340>
    4538:	64 01       	movw	r12, r8
    453a:	5f ef       	ldi	r21, 0xFF	; 255
    453c:	c5 1a       	sub	r12, r21
    453e:	d5 0a       	sbc	r13, r21
    4540:	80 16       	cp	r8, r16
    4542:	91 06       	cpc	r9, r17
    4544:	08 f4       	brcc	.+2      	; 0x4548 <f_printf+0x326>
    4546:	65 c0       	rjmp	.+202    	; 0x4612 <f_printf+0x3f0>
    4548:	0d c0       	rjmp	.+26     	; 0x4564 <f_printf+0x342>
    454a:	8f ef       	ldi	r24, 0xFF	; 255
    454c:	c8 1a       	sub	r12, r24
    454e:	d8 0a       	sbc	r13, r24
    4550:	c0 16       	cp	r12, r16
    4552:	d1 06       	cpc	r13, r17
    4554:	08 f4       	brcc	.+2      	; 0x4558 <f_printf+0x336>
    4556:	58 c0       	rjmp	.+176    	; 0x4608 <f_printf+0x3e6>
    4558:	68 01       	movw	r12, r16
    455a:	9f ef       	ldi	r25, 0xFF	; 255
    455c:	c9 1a       	sub	r12, r25
    455e:	d9 0a       	sbc	r13, r25
    4560:	01 c0       	rjmp	.+2      	; 0x4564 <f_printf+0x342>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    4562:	64 01       	movw	r12, r8
    4564:	0f 2e       	mov	r0, r31
    4566:	f3 e0       	ldi	r31, 0x03	; 3
    4568:	af 2e       	mov	r10, r31
    456a:	b1 2c       	mov	r11, r1
    456c:	f0 2d       	mov	r31, r0
    456e:	ac 0e       	add	r10, r28
    4570:	bd 1e       	adc	r11, r29
    4572:	a8 0c       	add	r10, r8
    4574:	b9 1c       	adc	r11, r9
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    4576:	a1 e0       	ldi	r26, 0x01	; 1
    4578:	8a 1a       	sub	r8, r26
    457a:	91 08       	sbc	r9, r1
    457c:	f5 01       	movw	r30, r10
    457e:	62 91       	ld	r22, -Z
    4580:	5f 01       	movw	r10, r30
    4582:	ce 01       	movw	r24, r28
    4584:	43 96       	adiw	r24, 0x13	; 19
    4586:	2c dd       	rcall	.-1448   	; 0x3fe0 <putc_bfd>
    4588:	81 14       	cp	r8, r1
    458a:	91 04       	cpc	r9, r1
    458c:	a1 f7       	brne	.-24     	; 0x4576 <f_printf+0x354>
		while (j++ < w) putc_bfd(&pb, d);
    458e:	c0 16       	cp	r12, r16
    4590:	d1 06       	cpc	r13, r17
    4592:	08 f0       	brcs	.+2      	; 0x4596 <f_printf+0x374>
    4594:	78 ce       	rjmp	.-784    	; 0x4286 <f_printf+0x64>
    4596:	66 2d       	mov	r22, r6
    4598:	ce 01       	movw	r24, r28
    459a:	43 96       	adiw	r24, 0x13	; 19
    459c:	21 dd       	rcall	.-1470   	; 0x3fe0 <putc_bfd>
    459e:	ff ef       	ldi	r31, 0xFF	; 255
    45a0:	cf 1a       	sub	r12, r31
    45a2:	df 0a       	sbc	r13, r31
    45a4:	c0 16       	cp	r12, r16
    45a6:	d1 06       	cpc	r13, r17
    45a8:	b0 f3       	brcs	.-20     	; 0x4596 <f_printf+0x374>
    45aa:	6d ce       	rjmp	.-806    	; 0x4286 <f_printf+0x64>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    45ac:	4d 89       	ldd	r20, Y+21	; 0x15
    45ae:	5e 89       	ldd	r21, Y+22	; 0x16
    45b0:	55 23       	and	r21, r21
    45b2:	ac f0       	brlt	.+42     	; 0x45de <f_printf+0x3bc>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    45b4:	9e 01       	movw	r18, r28
    45b6:	2f 5f       	subi	r18, 0xFF	; 255
    45b8:	3f 4f       	sbci	r19, 0xFF	; 255
    45ba:	be 01       	movw	r22, r28
    45bc:	67 5e       	subi	r22, 0xE7	; 231
    45be:	7f 4f       	sbci	r23, 0xFF	; 255
    45c0:	8b 89       	ldd	r24, Y+19	; 0x13
    45c2:	9c 89       	ldd	r25, Y+20	; 0x14
    45c4:	13 db       	rcall	.-2522   	; 0x3bec <f_write>
    45c6:	81 11       	cpse	r24, r1
    45c8:	0d c0       	rjmp	.+26     	; 0x45e4 <f_printf+0x3c2>
		&& (UINT)pb.idx == nw) return pb.nchr;
    45ca:	2d 89       	ldd	r18, Y+21	; 0x15
    45cc:	3e 89       	ldd	r19, Y+22	; 0x16
    45ce:	89 81       	ldd	r24, Y+1	; 0x01
    45d0:	9a 81       	ldd	r25, Y+2	; 0x02
    45d2:	28 17       	cp	r18, r24
    45d4:	39 07       	cpc	r19, r25
    45d6:	49 f4       	brne	.+18     	; 0x45ea <f_printf+0x3c8>
    45d8:	8f 89       	ldd	r24, Y+23	; 0x17
    45da:	98 8d       	ldd	r25, Y+24	; 0x18
    45dc:	52 c0       	rjmp	.+164    	; 0x4682 <f_printf+0x460>
	return EOF;
    45de:	8f ef       	ldi	r24, 0xFF	; 255
    45e0:	9f ef       	ldi	r25, 0xFF	; 255
    45e2:	4f c0       	rjmp	.+158    	; 0x4682 <f_printf+0x460>
    45e4:	8f ef       	ldi	r24, 0xFF	; 255
    45e6:	9f ef       	ldi	r25, 0xFF	; 255
    45e8:	4c c0       	rjmp	.+152    	; 0x4682 <f_printf+0x460>
    45ea:	8f ef       	ldi	r24, 0xFF	; 255
    45ec:	9f ef       	ldi	r25, 0xFF	; 255
    45ee:	49 c0       	rjmp	.+146    	; 0x4682 <f_printf+0x460>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
    45f0:	71 fe       	sbrs	r7, 1
    45f2:	19 c0       	rjmp	.+50     	; 0x4626 <f_printf+0x404>
    45f4:	ed ce       	rjmp	.-550    	; 0x43d0 <f_printf+0x1ae>
    45f6:	71 fe       	sbrs	r7, 1
    45f8:	1f c0       	rjmp	.+62     	; 0x4638 <f_printf+0x416>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    45fa:	c2 2c       	mov	r12, r2
    45fc:	d1 2c       	mov	r13, r1
    45fe:	f3 ce       	rjmp	.-538    	; 0x43e6 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4600:	72 fc       	sbrc	r7, 2
    4602:	13 cf       	rjmp	.-474    	; 0x442a <f_printf+0x208>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    4604:	a0 e1       	ldi	r26, 0x10	; 16
    4606:	2c cf       	rjmp	.-424    	; 0x4460 <f_printf+0x23e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    4608:	66 2d       	mov	r22, r6
    460a:	ce 01       	movw	r24, r28
    460c:	43 96       	adiw	r24, 0x13	; 19
    460e:	e8 dc       	rcall	.-1584   	; 0x3fe0 <putc_bfd>
    4610:	9c cf       	rjmp	.-200    	; 0x454a <f_printf+0x328>
    4612:	66 2d       	mov	r22, r6
    4614:	ce 01       	movw	r24, r28
    4616:	43 96       	adiw	r24, 0x13	; 19
    4618:	e3 dc       	rcall	.-1594   	; 0x3fe0 <putc_bfd>
    461a:	64 01       	movw	r12, r8
    461c:	96 cf       	rjmp	.-212    	; 0x454a <f_printf+0x328>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    461e:	d5 01       	movw	r26, r10
    4620:	6c 91       	ld	r22, X
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    4622:	63 01       	movw	r12, r6
    4624:	d5 ce       	rjmp	.-598    	; 0x43d0 <f_printf+0x1ae>
    4626:	36 01       	movw	r6, r12
    4628:	bf ef       	ldi	r27, 0xFF	; 255
    462a:	6b 1a       	sub	r6, r27
    462c:	7b 0a       	sbc	r7, r27
    462e:	c0 16       	cp	r12, r16
    4630:	d1 06       	cpc	r13, r17
    4632:	08 f4       	brcc	.+2      	; 0x4636 <f_printf+0x414>
    4634:	b8 ce       	rjmp	.-656    	; 0x43a6 <f_printf+0x184>
    4636:	f3 cf       	rjmp	.-26     	; 0x461e <f_printf+0x3fc>
    4638:	01 15       	cp	r16, r1
    463a:	11 05       	cpc	r17, r1
    463c:	09 f0       	breq	.+2      	; 0x4640 <f_printf+0x41e>
    463e:	ae ce       	rjmp	.-676    	; 0x439c <f_printf+0x17a>
    4640:	cc 24       	eor	r12, r12
    4642:	c3 94       	inc	r12
    4644:	d1 2c       	mov	r13, r1
    4646:	cf ce       	rjmp	.-610    	; 0x43e6 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4648:	f2 01       	movw	r30, r4
    464a:	60 81       	ld	r22, Z
    464c:	71 81       	ldd	r23, Z+1	; 0x01
    464e:	82 81       	ldd	r24, Z+2	; 0x02
    4650:	93 81       	ldd	r25, Z+3	; 0x03
    4652:	92 01       	movw	r18, r4
    4654:	2c 5f       	subi	r18, 0xFC	; 252
    4656:	3f 4f       	sbci	r19, 0xFF	; 255
    4658:	29 01       	movw	r4, r18
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    465a:	a2 e0       	ldi	r26, 0x02	; 2
    465c:	17 cf       	rjmp	.-466    	; 0x448c <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    465e:	72 fc       	sbrc	r7, 2
    4660:	f3 cf       	rjmp	.-26     	; 0x4648 <f_printf+0x426>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    4662:	a2 e0       	ldi	r26, 0x02	; 2
    4664:	ef ce       	rjmp	.-546    	; 0x4444 <f_printf+0x222>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4666:	d2 01       	movw	r26, r4
    4668:	6d 91       	ld	r22, X+
    466a:	7d 91       	ld	r23, X+
    466c:	8d 91       	ld	r24, X+
    466e:	9c 91       	ld	r25, X
    4670:	f2 01       	movw	r30, r4
    4672:	34 96       	adiw	r30, 0x04	; 4
    4674:	2f 01       	movw	r4, r30
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    4676:	a8 e0       	ldi	r26, 0x08	; 8
    4678:	09 cf       	rjmp	.-494    	; 0x448c <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    467a:	72 fc       	sbrc	r7, 2
    467c:	f4 cf       	rjmp	.-24     	; 0x4666 <f_printf+0x444>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    467e:	a8 e0       	ldi	r26, 0x08	; 8
    4680:	ef ce       	rjmp	.-546    	; 0x4460 <f_printf+0x23e>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    4682:	c4 5a       	subi	r28, 0xA4	; 164
    4684:	df 4f       	sbci	r29, 0xFF	; 255
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	1f 91       	pop	r17
    4696:	0f 91       	pop	r16
    4698:	ff 90       	pop	r15
    469a:	ef 90       	pop	r14
    469c:	df 90       	pop	r13
    469e:	cf 90       	pop	r12
    46a0:	bf 90       	pop	r11
    46a2:	af 90       	pop	r10
    46a4:	9f 90       	pop	r9
    46a6:	8f 90       	pop	r8
    46a8:	7f 90       	pop	r7
    46aa:	6f 90       	pop	r6
    46ac:	5f 90       	pop	r5
    46ae:	4f 90       	pop	r4
    46b0:	3f 90       	pop	r3
    46b2:	2f 90       	pop	r2
    46b4:	08 95       	ret

000046b6 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    46b6:	82 e0       	ldi	r24, 0x02	; 2
    46b8:	80 93 b8 00 	sts	0x00B8, r24
    46bc:	08 95       	ret

000046be <_ZN3I2CD1Ev>:
    46be:	08 95       	ret

000046c0 <_ZN3I2C9twi_startEv>:
    46c0:	84 ea       	ldi	r24, 0xA4	; 164
    46c2:	80 93 bc 00 	sts	0x00BC, r24
    46c6:	08 95       	ret

000046c8 <_ZN3I2C8twi_stopEv>:
    46c8:	84 e9       	ldi	r24, 0x94	; 148
    46ca:	80 93 bc 00 	sts	0x00BC, r24
    46ce:	08 95       	ret

000046d0 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    46d0:	ec eb       	ldi	r30, 0xBC	; 188
    46d2:	f0 e0       	ldi	r31, 0x00	; 0
    46d4:	80 81       	ld	r24, Z
    46d6:	88 23       	and	r24, r24
    46d8:	ec f7       	brge	.-6      	; 0x46d4 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    46da:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    46de:	84 e8       	ldi	r24, 0x84	; 132
    46e0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    46e4:	ec eb       	ldi	r30, 0xBC	; 188
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	80 81       	ld	r24, Z
    46ea:	88 23       	and	r24, r24
    46ec:	ec f7       	brge	.-6      	; 0x46e8 <_ZN3I2C9twi_writeEh+0x18>
}
    46ee:	08 95       	ret

000046f0 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    46f0:	66 23       	and	r22, r22
    46f2:	21 f0       	breq	.+8      	; 0x46fc <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    46f4:	84 ec       	ldi	r24, 0xC4	; 196
    46f6:	80 93 bc 00 	sts	0x00BC, r24
    46fa:	03 c0       	rjmp	.+6      	; 0x4702 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    46fc:	84 e8       	ldi	r24, 0x84	; 132
    46fe:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    4702:	ec eb       	ldi	r30, 0xBC	; 188
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	88 23       	and	r24, r24
    470a:	ec f7       	brge	.-6      	; 0x4706 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    470c:	80 91 bb 00 	lds	r24, 0x00BB
    4710:	08 95       	ret

00004712 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    4712:	2a b1       	in	r18, 0x0a	; 10
    4714:	20 66       	ori	r18, 0x60	; 96
    4716:	2a b9       	out	0x0a, r18	; 10
    4718:	28 b1       	in	r18, 0x08	; 8
    471a:	23 7f       	andi	r18, 0xF3	; 243
    471c:	28 b9       	out	0x08, r18	; 8
    471e:	27 b1       	in	r18, 0x07	; 7
    4720:	2c 60       	ori	r18, 0x0C	; 12
    4722:	27 b9       	out	0x07, r18	; 7
    4724:	2a b1       	in	r18, 0x0a	; 10
    4726:	23 7e       	andi	r18, 0xE3	; 227
    4728:	2a b9       	out	0x0a, r18	; 10
    472a:	fc 01       	movw	r30, r24
    472c:	0c 96       	adiw	r24, 0x0c	; 12
    472e:	11 92       	st	Z+, r1
    4730:	e8 17       	cp	r30, r24
    4732:	f9 07       	cpc	r31, r25
    4734:	e1 f7       	brne	.-8      	; 0x472e <_ZN9InterfaceC1Ev+0x1c>
    4736:	08 95       	ret

00004738 <_ZN9InterfaceD1Ev>:
    4738:	08 95       	ret

0000473a <_ZN9Interface7paradebEPVhhPh>:
    473a:	fb 01       	movw	r30, r22
    473c:	80 81       	ld	r24, Z
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	04 2e       	mov	r0, r20
    4742:	02 c0       	rjmp	.+4      	; 0x4748 <_ZN9Interface7paradebEPVhhPh+0xe>
    4744:	95 95       	asr	r25
    4746:	87 95       	ror	r24
    4748:	0a 94       	dec	r0
    474a:	e2 f7       	brpl	.-8      	; 0x4744 <_ZN9Interface7paradebEPVhhPh+0xa>
    474c:	80 ff       	sbrs	r24, 0
    474e:	05 c0       	rjmp	.+10     	; 0x475a <_ZN9Interface7paradebEPVhhPh+0x20>
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	f9 01       	movw	r30, r18
    4754:	80 83       	st	Z, r24
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	08 95       	ret
    475a:	f9 01       	movw	r30, r18
    475c:	80 81       	ld	r24, Z
    475e:	81 30       	cpi	r24, 0x01	; 1
    4760:	71 f4       	brne	.+28     	; 0x477e <_ZN9Interface7paradebEPVhhPh+0x44>
    4762:	fb 01       	movw	r30, r22
    4764:	60 81       	ld	r22, Z
    4766:	70 e0       	ldi	r23, 0x00	; 0
    4768:	fb 01       	movw	r30, r22
    476a:	02 c0       	rjmp	.+4      	; 0x4770 <_ZN9Interface7paradebEPVhhPh+0x36>
    476c:	f5 95       	asr	r31
    476e:	e7 95       	ror	r30
    4770:	4a 95       	dec	r20
    4772:	e2 f7       	brpl	.-8      	; 0x476c <_ZN9Interface7paradebEPVhhPh+0x32>
    4774:	e0 fd       	sbrc	r30, 0
    4776:	03 c0       	rjmp	.+6      	; 0x477e <_ZN9Interface7paradebEPVhhPh+0x44>
    4778:	f9 01       	movw	r30, r18
    477a:	10 82       	st	Z, r1
    477c:	08 95       	ret
    477e:	f9 01       	movw	r30, r18
    4780:	10 82       	st	Z, r1
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	08 95       	ret

00004786 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    4786:	1f 93       	push	r17
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    478e:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4790:	82 e0       	ldi	r24, 0x02	; 2
    4792:	8a 95       	dec	r24
    4794:	f1 f7       	brne	.-4      	; 0x4792 <_ZN9Interface6TasterEv+0xc>
    4796:	00 c0       	rjmp	.+0      	; 0x4798 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
    4798:	9e 01       	movw	r18, r28
    479a:	2e 5f       	subi	r18, 0xFE	; 254
    479c:	3f 4f       	sbci	r19, 0xFF	; 255
    479e:	44 e0       	ldi	r20, 0x04	; 4
    47a0:	69 e2       	ldi	r22, 0x29	; 41
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	ce 01       	movw	r24, r28
    47a6:	c9 df       	rcall	.-110    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    47a8:	81 11       	cpse	r24, r1
    47aa:	14 c0       	rjmp	.+40     	; 0x47d4 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
    47ac:	9e 01       	movw	r18, r28
    47ae:	2f 5f       	subi	r18, 0xFF	; 255
    47b0:	3f 4f       	sbci	r19, 0xFF	; 255
    47b2:	43 e0       	ldi	r20, 0x03	; 3
    47b4:	69 e2       	ldi	r22, 0x29	; 41
    47b6:	70 e0       	ldi	r23, 0x00	; 0
    47b8:	ce 01       	movw	r24, r28
    47ba:	bf df       	rcall	.-130    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    47bc:	81 11       	cpse	r24, r1
    47be:	0c c0       	rjmp	.+24     	; 0x47d8 <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    47c0:	9e 01       	movw	r18, r28
    47c2:	42 e0       	ldi	r20, 0x02	; 2
    47c4:	69 e2       	ldi	r22, 0x29	; 41
    47c6:	70 e0       	ldi	r23, 0x00	; 0
    47c8:	ce 01       	movw	r24, r28
    47ca:	b7 df       	rcall	.-146    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    47cc:	88 23       	and	r24, r24
    47ce:	31 f0       	breq	.+12     	; 0x47dc <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    47d0:	11 e3       	ldi	r17, 0x31	; 49
    47d2:	05 c0       	rjmp	.+10     	; 0x47de <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    47d4:	13 e3       	ldi	r17, 0x33	; 51
    47d6:	03 c0       	rjmp	.+6      	; 0x47de <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    47d8:	12 e3       	ldi	r17, 0x32	; 50
    47da:	01 c0       	rjmp	.+2      	; 0x47de <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    47dc:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    47de:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    47e0:	42 9a       	sbi	0x08, 2	; 8
    47e2:	82 e0       	ldi	r24, 0x02	; 2
    47e4:	8a 95       	dec	r24
    47e6:	f1 f7       	brne	.-4      	; 0x47e4 <_ZN9Interface6TasterEv+0x5e>
    47e8:	00 c0       	rjmp	.+0      	; 0x47ea <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    47ea:	9e 01       	movw	r18, r28
    47ec:	2b 5f       	subi	r18, 0xFB	; 251
    47ee:	3f 4f       	sbci	r19, 0xFF	; 255
    47f0:	44 e0       	ldi	r20, 0x04	; 4
    47f2:	69 e2       	ldi	r22, 0x29	; 41
    47f4:	70 e0       	ldi	r23, 0x00	; 0
    47f6:	ce 01       	movw	r24, r28
    47f8:	a0 df       	rcall	.-192    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    47fa:	81 11       	cpse	r24, r1
    47fc:	16 c0       	rjmp	.+44     	; 0x482a <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    47fe:	9e 01       	movw	r18, r28
    4800:	2c 5f       	subi	r18, 0xFC	; 252
    4802:	3f 4f       	sbci	r19, 0xFF	; 255
    4804:	43 e0       	ldi	r20, 0x03	; 3
    4806:	69 e2       	ldi	r22, 0x29	; 41
    4808:	70 e0       	ldi	r23, 0x00	; 0
    480a:	ce 01       	movw	r24, r28
    480c:	96 df       	rcall	.-212    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    480e:	81 11       	cpse	r24, r1
    4810:	0e c0       	rjmp	.+28     	; 0x482e <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    4812:	9e 01       	movw	r18, r28
    4814:	2d 5f       	subi	r18, 0xFD	; 253
    4816:	3f 4f       	sbci	r19, 0xFF	; 255
    4818:	42 e0       	ldi	r20, 0x02	; 2
    481a:	69 e2       	ldi	r22, 0x29	; 41
    481c:	70 e0       	ldi	r23, 0x00	; 0
    481e:	ce 01       	movw	r24, r28
    4820:	8c df       	rcall	.-232    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    4822:	88 23       	and	r24, r24
    4824:	29 f0       	breq	.+10     	; 0x4830 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    4826:	14 e3       	ldi	r17, 0x34	; 52
    4828:	03 c0       	rjmp	.+6      	; 0x4830 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    482a:	16 e3       	ldi	r17, 0x36	; 54
    482c:	01 c0       	rjmp	.+2      	; 0x4830 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    482e:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    4830:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    4832:	5e 9a       	sbi	0x0b, 6	; 11
    4834:	82 e0       	ldi	r24, 0x02	; 2
    4836:	8a 95       	dec	r24
    4838:	f1 f7       	brne	.-4      	; 0x4836 <_ZN9Interface6TasterEv+0xb0>
    483a:	00 c0       	rjmp	.+0      	; 0x483c <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    483c:	9e 01       	movw	r18, r28
    483e:	28 5f       	subi	r18, 0xF8	; 248
    4840:	3f 4f       	sbci	r19, 0xFF	; 255
    4842:	44 e0       	ldi	r20, 0x04	; 4
    4844:	69 e2       	ldi	r22, 0x29	; 41
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	ce 01       	movw	r24, r28
    484a:	77 df       	rcall	.-274    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    484c:	81 11       	cpse	r24, r1
    484e:	16 c0       	rjmp	.+44     	; 0x487c <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    4850:	9e 01       	movw	r18, r28
    4852:	29 5f       	subi	r18, 0xF9	; 249
    4854:	3f 4f       	sbci	r19, 0xFF	; 255
    4856:	43 e0       	ldi	r20, 0x03	; 3
    4858:	69 e2       	ldi	r22, 0x29	; 41
    485a:	70 e0       	ldi	r23, 0x00	; 0
    485c:	ce 01       	movw	r24, r28
    485e:	6d df       	rcall	.-294    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    4860:	81 11       	cpse	r24, r1
    4862:	0e c0       	rjmp	.+28     	; 0x4880 <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    4864:	9e 01       	movw	r18, r28
    4866:	2a 5f       	subi	r18, 0xFA	; 250
    4868:	3f 4f       	sbci	r19, 0xFF	; 255
    486a:	42 e0       	ldi	r20, 0x02	; 2
    486c:	69 e2       	ldi	r22, 0x29	; 41
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	ce 01       	movw	r24, r28
    4872:	63 df       	rcall	.-314    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    4874:	88 23       	and	r24, r24
    4876:	29 f0       	breq	.+10     	; 0x4882 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    4878:	17 e3       	ldi	r17, 0x37	; 55
    487a:	03 c0       	rjmp	.+6      	; 0x4882 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    487c:	19 e3       	ldi	r17, 0x39	; 57
    487e:	01 c0       	rjmp	.+2      	; 0x4882 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    4880:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    4882:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    4884:	5d 9a       	sbi	0x0b, 5	; 11
    4886:	82 e0       	ldi	r24, 0x02	; 2
    4888:	8a 95       	dec	r24
    488a:	f1 f7       	brne	.-4      	; 0x4888 <_ZN9Interface6TasterEv+0x102>
    488c:	00 c0       	rjmp	.+0      	; 0x488e <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    488e:	9e 01       	movw	r18, r28
    4890:	25 5f       	subi	r18, 0xF5	; 245
    4892:	3f 4f       	sbci	r19, 0xFF	; 255
    4894:	44 e0       	ldi	r20, 0x04	; 4
    4896:	69 e2       	ldi	r22, 0x29	; 41
    4898:	70 e0       	ldi	r23, 0x00	; 0
    489a:	ce 01       	movw	r24, r28
    489c:	4e df       	rcall	.-356    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    489e:	81 11       	cpse	r24, r1
    48a0:	16 c0       	rjmp	.+44     	; 0x48ce <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    48a2:	9e 01       	movw	r18, r28
    48a4:	26 5f       	subi	r18, 0xF6	; 246
    48a6:	3f 4f       	sbci	r19, 0xFF	; 255
    48a8:	43 e0       	ldi	r20, 0x03	; 3
    48aa:	69 e2       	ldi	r22, 0x29	; 41
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	ce 01       	movw	r24, r28
    48b0:	44 df       	rcall	.-376    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    48b2:	81 11       	cpse	r24, r1
    48b4:	0e c0       	rjmp	.+28     	; 0x48d2 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    48b6:	9e 01       	movw	r18, r28
    48b8:	27 5f       	subi	r18, 0xF7	; 247
    48ba:	3f 4f       	sbci	r19, 0xFF	; 255
    48bc:	42 e0       	ldi	r20, 0x02	; 2
    48be:	69 e2       	ldi	r22, 0x29	; 41
    48c0:	70 e0       	ldi	r23, 0x00	; 0
    48c2:	ce 01       	movw	r24, r28
    48c4:	3a df       	rcall	.-396    	; 0x473a <_ZN9Interface7paradebEPVhhPh>
    48c6:	88 23       	and	r24, r24
    48c8:	29 f0       	breq	.+10     	; 0x48d4 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    48ca:	1a e2       	ldi	r17, 0x2A	; 42
    48cc:	03 c0       	rjmp	.+6      	; 0x48d4 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    48ce:	13 e2       	ldi	r17, 0x23	; 35
    48d0:	01 c0       	rjmp	.+2      	; 0x48d4 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    48d2:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    48d4:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    48d6:	81 2f       	mov	r24, r17
    48d8:	df 91       	pop	r29
    48da:	cf 91       	pop	r28
    48dc:	1f 91       	pop	r17
    48de:	08 95       	ret

000048e0 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    48e0:	52 df       	rcall	.-348    	; 0x4786 <_ZN9Interface6TasterEv>
    48e2:	48 2f       	mov	r20, r24
    48e4:	50 e0       	ldi	r21, 0x00	; 0
    48e6:	fa 01       	movw	r30, r20
    48e8:	b3 97       	sbiw	r30, 0x23	; 35
    48ea:	e7 31       	cpi	r30, 0x17	; 23
    48ec:	f1 05       	cpc	r31, r1
    48ee:	c0 f4       	brcc	.+48     	; 0x4920 <_ZN9Interface7unifiedEv+0x40>
    48f0:	ec 56       	subi	r30, 0x6C	; 108
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	0c 94 b2 46 	jmp	0x8d64	; 0x8d64 <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    48f8:	85 e7       	ldi	r24, 0x75	; 117
    48fa:	08 95       	ret
		break;
	case '3':
		return 'A';
    48fc:	81 e4       	ldi	r24, 0x41	; 65
    48fe:	08 95       	ret
		break;
	case '4':
		return 'l';
    4900:	8c e6       	ldi	r24, 0x6C	; 108
    4902:	08 95       	ret
		break;
	case '5':
		return 'o';
    4904:	8f e6       	ldi	r24, 0x6F	; 111
    4906:	08 95       	ret
		break;
	case '6':
		return 'r';
    4908:	82 e7       	ldi	r24, 0x72	; 114
    490a:	08 95       	ret
		break;
	case '7':
		return 'Y';
    490c:	89 e5       	ldi	r24, 0x59	; 89
    490e:	08 95       	ret
		break;
	case '8':
		return 'd';
    4910:	84 e6       	ldi	r24, 0x64	; 100
    4912:	08 95       	ret
		break;
	case '9':
		return 'X';
    4914:	88 e5       	ldi	r24, 0x58	; 88
    4916:	08 95       	ret
		break;
	case '*':
		return 'e';
    4918:	85 e6       	ldi	r24, 0x65	; 101
    491a:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    491c:	8d e6       	ldi	r24, 0x6D	; 109
    491e:	08 95       	ret
		break;
	default:
		return ' ';
    4920:	80 e2       	ldi	r24, 0x20	; 32
    4922:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    4924:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    4926:	08 95       	ret

00004928 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    4928:	cf 93       	push	r28
    492a:	df 93       	push	r29
    492c:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    492e:	ce 01       	movw	r24, r28
    4930:	2a df       	rcall	.-428    	; 0x4786 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    4932:	80 53       	subi	r24, 0x30	; 48
    4934:	8a 30       	cpi	r24, 0x0A	; 10
    4936:	d8 f7       	brcc	.-10     	; 0x492e <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    4938:	df 91       	pop	r29
    493a:	cf 91       	pop	r28
    493c:	08 95       	ret

0000493e <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    493e:	46 96       	adiw	r24, 0x16	; 22
    4940:	be ce       	rjmp	.-644    	; 0x46be <_ZN3I2CD1Ev>
    4942:	08 95       	ret

00004944 <_ZN7LSM303D14LSM303_commandEhh>:
    4944:	0f 93       	push	r16
    4946:	1f 93       	push	r17
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	06 2f       	mov	r16, r22
    494e:	14 2f       	mov	r17, r20
    4950:	ec 01       	movw	r28, r24
    4952:	66 96       	adiw	r28, 0x16	; 22
    4954:	ce 01       	movw	r24, r28
    4956:	b4 de       	rcall	.-664    	; 0x46c0 <_ZN3I2C9twi_startEv>
    4958:	6a e3       	ldi	r22, 0x3A	; 58
    495a:	ce 01       	movw	r24, r28
    495c:	b9 de       	rcall	.-654    	; 0x46d0 <_ZN3I2C9twi_writeEh>
    495e:	60 2f       	mov	r22, r16
    4960:	ce 01       	movw	r24, r28
    4962:	b6 de       	rcall	.-660    	; 0x46d0 <_ZN3I2C9twi_writeEh>
    4964:	61 2f       	mov	r22, r17
    4966:	ce 01       	movw	r24, r28
    4968:	b3 de       	rcall	.-666    	; 0x46d0 <_ZN3I2C9twi_writeEh>
    496a:	ce 01       	movw	r24, r28
    496c:	ad de       	rcall	.-678    	; 0x46c8 <_ZN3I2C8twi_stopEv>
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	1f 91       	pop	r17
    4974:	0f 91       	pop	r16
    4976:	08 95       	ret

00004978 <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    4978:	40 e0       	ldi	r20, 0x00	; 0
    497a:	6e e2       	ldi	r22, 0x2E	; 46
    497c:	e3 cf       	rjmp	.-58     	; 0x4944 <_ZN7LSM303D14LSM303_commandEhh>
    497e:	08 95       	ret

00004980 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    4986:	47 e4       	ldi	r20, 0x47	; 71
    4988:	60 e2       	ldi	r22, 0x20	; 32
    498a:	dc df       	rcall	.-72     	; 0x4944 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    498c:	40 e0       	ldi	r20, 0x00	; 0
    498e:	61 e2       	ldi	r22, 0x21	; 33
    4990:	ce 01       	movw	r24, r28
    4992:	d8 df       	rcall	.-80     	; 0x4944 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    4994:	40 e8       	ldi	r20, 0x80	; 128
    4996:	64 e2       	ldi	r22, 0x24	; 36
    4998:	ce 01       	movw	r24, r28
    499a:	d4 df       	rcall	.-88     	; 0x4944 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    499c:	ce 01       	movw	r24, r28
    499e:	ec df       	rcall	.-40     	; 0x4978 <_ZN7LSM303D13ACCBypassmodeEv>
}
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	08 95       	ret

000049a6 <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	ec 01       	movw	r28, r24
    49ac:	46 96       	adiw	r24, 0x16	; 22
    49ae:	83 de       	rcall	.-762    	; 0x46b6 <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    49b0:	1f 82       	std	Y+7, r1	; 0x07
    49b2:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    49b4:	18 86       	std	Y+8, r1	; 0x08
    49b6:	19 86       	std	Y+9, r1	; 0x09
    49b8:	1a 86       	std	Y+10, r1	; 0x0a
    49ba:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    49bc:	1c 86       	std	Y+12, r1	; 0x0c
    49be:	1d 86       	std	Y+13, r1	; 0x0d
    49c0:	1e 86       	std	Y+14, r1	; 0x0e
    49c2:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    49c4:	19 8a       	std	Y+17, r1	; 0x11
    49c6:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    49c8:	1a 8a       	std	Y+18, r1	; 0x12
    49ca:	1b 8a       	std	Y+19, r1	; 0x13
    49cc:	1c 8a       	std	Y+20, r1	; 0x14
    49ce:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    49d0:	de 01       	movw	r26, r28
    49d2:	a1 52       	subi	r26, 0x21	; 33
    49d4:	bf 4f       	sbci	r27, 0xFF	; 255
    49d6:	1d 92       	st	X+, r1
    49d8:	1d 92       	st	X+, r1
    49da:	1d 92       	st	X+, r1
    49dc:	1c 92       	st	X, r1
    49de:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    49e0:	fe 01       	movw	r30, r28
    49e2:	ed 51       	subi	r30, 0x1D	; 29
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	10 82       	st	Z, r1
    49e8:	11 82       	std	Z+1, r1	; 0x01
    49ea:	12 82       	std	Z+2, r1	; 0x02
    49ec:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    49ee:	34 96       	adiw	r30, 0x04	; 4
    49f0:	8b e1       	ldi	r24, 0x1B	; 27
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	91 83       	std	Z+1, r25	; 0x01
    49f6:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    49f8:	19 82       	std	Y+1, r1	; 0x01
    49fa:	18 82       	st	Y, r1
    49fc:	1b 82       	std	Y+3, r1	; 0x03
    49fe:	1a 82       	std	Y+2, r1	; 0x02
    4a00:	1d 82       	std	Y+5, r1	; 0x05
    4a02:	1c 82       	std	Y+4, r1	; 0x04
    4a04:	e0 5d       	subi	r30, 0xD0	; 208
    4a06:	f1 09       	sbc	r31, r1
    4a08:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    4a0a:	11 92       	st	Z+, r1
    4a0c:	11 92       	st	Z+, r1
    4a0e:	11 92       	st	Z+, r1
    4a10:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    4a12:	e2 17       	cp	r30, r18
    4a14:	f3 07       	cpc	r31, r19
    4a16:	c9 f7       	brne	.-14     	; 0x4a0a <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    4a18:	ce 01       	movw	r24, r28
    4a1a:	b2 df       	rcall	.-156    	; 0x4980 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	08 95       	ret

00004a22 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	08 95       	ret

00004a26 <_ZN3uhr11tastendruckEPh>:
    4a26:	fc 01       	movw	r30, r24
    4a28:	db 01       	movw	r26, r22
    4a2a:	9c 91       	ld	r25, X
    4a2c:	95 36       	cpi	r25, 0x65	; 101
    4a2e:	39 f4       	brne	.+14     	; 0x4a3e <_ZN3uhr11tastendruckEPh+0x18>
    4a30:	81 a5       	ldd	r24, Z+41	; 0x29
    4a32:	81 30       	cpi	r24, 0x01	; 1
    4a34:	11 f4       	brne	.+4      	; 0x4a3a <_ZN3uhr11tastendruckEPh+0x14>
    4a36:	11 a6       	std	Z+41, r1	; 0x29
    4a38:	02 c0       	rjmp	.+4      	; 0x4a3e <_ZN3uhr11tastendruckEPh+0x18>
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	81 a7       	std	Z+41, r24	; 0x29
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	08 95       	ret

00004a42 <_ZN13einstellungen11tastendruckEPh>:
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	08 95       	ret

00004a46 <_ZN5menue11tastendruckEPh>:
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	08 95       	ret

00004a4a <_ZN9offscreen4drawEv>:
    4a4a:	cf 93       	push	r28
    4a4c:	df 93       	push	r29
    4a4e:	ec 01       	movw	r28, r24
    4a50:	8f 89       	ldd	r24, Y+23	; 0x17
    4a52:	98 8d       	ldd	r25, Y+24	; 0x18
    4a54:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
    4a58:	8f 89       	ldd	r24, Y+23	; 0x17
    4a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a5c:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    4a64:	08 95       	ret

00004a66 <_ZN9wilkommen4drawEv>:
    4a66:	ef 92       	push	r14
    4a68:	ff 92       	push	r15
    4a6a:	0f 93       	push	r16
    4a6c:	1f 93       	push	r17
    4a6e:	cf 93       	push	r28
    4a70:	df 93       	push	r29
    4a72:	ec 01       	movw	r28, r24
    4a74:	8f 89       	ldd	r24, Y+23	; 0x17
    4a76:	98 8d       	ldd	r25, Y+24	; 0x18
    4a78:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
    4a7c:	7e 01       	movw	r14, r28
    4a7e:	22 e0       	ldi	r18, 0x02	; 2
    4a80:	e2 0e       	add	r14, r18
    4a82:	f1 1c       	adc	r15, r1
    4a84:	8f e0       	ldi	r24, 0x0F	; 15
    4a86:	e6 e9       	ldi	r30, 0x96	; 150
    4a88:	f1 e0       	ldi	r31, 0x01	; 1
    4a8a:	d7 01       	movw	r26, r14
    4a8c:	01 90       	ld	r0, Z+
    4a8e:	0d 92       	st	X+, r0
    4a90:	8a 95       	dec	r24
    4a92:	e1 f7       	brne	.-8      	; 0x4a8c <_ZN9wilkommen4drawEv+0x26>
    4a94:	8e e0       	ldi	r24, 0x0E	; 14
    4a96:	8e 8b       	std	Y+22, r24	; 0x16
    4a98:	00 e0       	ldi	r16, 0x00	; 0
    4a9a:	10 e0       	ldi	r17, 0x00	; 0
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	e1 0f       	add	r30, r17
    4aa0:	f1 1d       	adc	r31, r1
    4aa2:	20 e0       	ldi	r18, 0x00	; 0
    4aa4:	40 2f       	mov	r20, r16
    4aa6:	62 81       	ldd	r22, Z+2	; 0x02
    4aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    4aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    4aac:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4ab0:	1f 5f       	subi	r17, 0xFF	; 255
    4ab2:	0a 5f       	subi	r16, 0xFA	; 250
    4ab4:	8e 89       	ldd	r24, Y+22	; 0x16
    4ab6:	18 17       	cp	r17, r24
    4ab8:	88 f3       	brcs	.-30     	; 0x4a9c <_ZN9wilkommen4drawEv+0x36>
    4aba:	8f e0       	ldi	r24, 0x0F	; 15
    4abc:	e5 ea       	ldi	r30, 0xA5	; 165
    4abe:	f1 e0       	ldi	r31, 0x01	; 1
    4ac0:	d7 01       	movw	r26, r14
    4ac2:	01 90       	ld	r0, Z+
    4ac4:	0d 92       	st	X+, r0
    4ac6:	8a 95       	dec	r24
    4ac8:	e1 f7       	brne	.-8      	; 0x4ac2 <_ZN9wilkommen4drawEv+0x5c>
    4aca:	8e e0       	ldi	r24, 0x0E	; 14
    4acc:	8e 8b       	std	Y+22, r24	; 0x16
    4ace:	00 e0       	ldi	r16, 0x00	; 0
    4ad0:	10 e0       	ldi	r17, 0x00	; 0
    4ad2:	fe 01       	movw	r30, r28
    4ad4:	e1 0f       	add	r30, r17
    4ad6:	f1 1d       	adc	r31, r1
    4ad8:	28 e0       	ldi	r18, 0x08	; 8
    4ada:	40 2f       	mov	r20, r16
    4adc:	62 81       	ldd	r22, Z+2	; 0x02
    4ade:	8f 89       	ldd	r24, Y+23	; 0x17
    4ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ae2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4ae6:	1f 5f       	subi	r17, 0xFF	; 255
    4ae8:	0a 5f       	subi	r16, 0xFA	; 250
    4aea:	8e 89       	ldd	r24, Y+22	; 0x16
    4aec:	18 17       	cp	r17, r24
    4aee:	88 f3       	brcs	.-30     	; 0x4ad2 <_ZN9wilkommen4drawEv+0x6c>
    4af0:	80 e4       	ldi	r24, 0x40	; 64
    4af2:	8f 93       	push	r24
    4af4:	81 e4       	ldi	r24, 0x41	; 65
    4af6:	8f 93       	push	r24
    4af8:	8b ee       	ldi	r24, 0xEB	; 235
    4afa:	8f 93       	push	r24
    4afc:	85 e8       	ldi	r24, 0x85	; 133
    4afe:	8f 93       	push	r24
    4b00:	84 eb       	ldi	r24, 0xB4	; 180
    4b02:	91 e0       	ldi	r25, 0x01	; 1
    4b04:	9f 93       	push	r25
    4b06:	8f 93       	push	r24
    4b08:	ff 92       	push	r15
    4b0a:	ef 92       	push	r14
    4b0c:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4b10:	8e 8b       	std	Y+22, r24	; 0x16
    4b12:	2d b7       	in	r18, 0x3d	; 61
    4b14:	3e b7       	in	r19, 0x3e	; 62
    4b16:	28 5f       	subi	r18, 0xF8	; 248
    4b18:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	f8 94       	cli
    4b1e:	3e bf       	out	0x3e, r19	; 62
    4b20:	0f be       	out	0x3f, r0	; 63
    4b22:	2d bf       	out	0x3d, r18	; 61
    4b24:	88 23       	and	r24, r24
    4b26:	89 f0       	breq	.+34     	; 0x4b4a <_ZN9wilkommen4drawEv+0xe4>
    4b28:	00 e0       	ldi	r16, 0x00	; 0
    4b2a:	10 e0       	ldi	r17, 0x00	; 0
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e1 0f       	add	r30, r17
    4b30:	f1 1d       	adc	r31, r1
    4b32:	20 e2       	ldi	r18, 0x20	; 32
    4b34:	40 2f       	mov	r20, r16
    4b36:	62 81       	ldd	r22, Z+2	; 0x02
    4b38:	8f 89       	ldd	r24, Y+23	; 0x17
    4b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b3c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4b40:	1f 5f       	subi	r17, 0xFF	; 255
    4b42:	0a 5f       	subi	r16, 0xFA	; 250
    4b44:	8e 89       	ldd	r24, Y+22	; 0x16
    4b46:	18 17       	cp	r17, r24
    4b48:	88 f3       	brcs	.-30     	; 0x4b2c <_ZN9wilkommen4drawEv+0xc6>
    4b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b4e:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	1f 91       	pop	r17
    4b58:	0f 91       	pop	r16
    4b5a:	ff 90       	pop	r15
    4b5c:	ef 90       	pop	r14
    4b5e:	08 95       	ret

00004b60 <_Z8ADC_Readh>:
    4b60:	ec e7       	ldi	r30, 0x7C	; 124
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	90 81       	ld	r25, Z
    4b66:	8f 71       	andi	r24, 0x1F	; 31
    4b68:	90 7e       	andi	r25, 0xE0	; 224
    4b6a:	89 2b       	or	r24, r25
    4b6c:	80 83       	st	Z, r24
    4b6e:	ea e7       	ldi	r30, 0x7A	; 122
    4b70:	f0 e0       	ldi	r31, 0x00	; 0
    4b72:	80 81       	ld	r24, Z
    4b74:	80 64       	ori	r24, 0x40	; 64
    4b76:	80 83       	st	Z, r24
    4b78:	80 81       	ld	r24, Z
    4b7a:	86 fd       	sbrc	r24, 6
    4b7c:	fd cf       	rjmp	.-6      	; 0x4b78 <_Z8ADC_Readh+0x18>
    4b7e:	80 91 78 00 	lds	r24, 0x0078
    4b82:	90 91 79 00 	lds	r25, 0x0079
    4b86:	08 95       	ret

00004b88 <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    4b88:	cf 92       	push	r12
    4b8a:	df 92       	push	r13
    4b8c:	ef 92       	push	r14
    4b8e:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    4b90:	80 e0       	ldi	r24, 0x00	; 0
    4b92:	e6 df       	rcall	.-52     	; 0x4b60 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    4b94:	bc 01       	movw	r22, r24
    4b96:	80 e0       	ldi	r24, 0x00	; 0
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	0e 94 0f 40 	call	0x801e	; 0x801e <__floatunsisf>
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	30 ec       	ldi	r19, 0xC0	; 192
    4ba2:	4f e7       	ldi	r20, 0x7F	; 127
    4ba4:	54 e4       	ldi	r21, 0x44	; 68
    4ba6:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    4baa:	2c e5       	ldi	r18, 0x5C	; 92
    4bac:	3f e8       	ldi	r19, 0x8F	; 143
    4bae:	42 e5       	ldi	r20, 0x52	; 82
    4bb0:	50 e4       	ldi	r21, 0x40	; 64
    4bb2:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    4bb6:	2d e0       	ldi	r18, 0x0D	; 13
    4bb8:	31 e7       	ldi	r19, 0x71	; 113
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	50 e4       	ldi	r21, 0x40	; 64
    4bbe:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    4bc2:	60 93 f3 08 	sts	0x08F3, r22
    4bc6:	70 93 f4 08 	sts	0x08F4, r23
    4bca:	80 93 f5 08 	sts	0x08F5, r24
    4bce:	90 93 f6 08 	sts	0x08F6, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    4bd2:	26 e6       	ldi	r18, 0x66	; 102
    4bd4:	36 e6       	ldi	r19, 0x66	; 102
    4bd6:	46 e6       	ldi	r20, 0x66	; 102
    4bd8:	50 e4       	ldi	r21, 0x40	; 64
    4bda:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__subsf3>
    4bde:	28 e9       	ldi	r18, 0x98	; 152
    4be0:	39 e9       	ldi	r19, 0x99	; 153
    4be2:	49 e1       	ldi	r20, 0x19	; 25
    4be4:	5f e3       	ldi	r21, 0x3F	; 63
    4be6:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	48 ec       	ldi	r20, 0xC8	; 200
    4bf0:	52 e4       	ldi	r21, 0x42	; 66
    4bf2:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    4bf6:	6b 01       	movw	r12, r22
    4bf8:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e2       	ldi	r20, 0x20	; 32
    4c00:	51 e4       	ldi	r21, 0x41	; 65
    4c02:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    4c06:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
	if (temp%10>=5)
    4c0a:	8d ec       	ldi	r24, 0xCD	; 205
    4c0c:	68 9f       	mul	r22, r24
    4c0e:	81 2d       	mov	r24, r1
    4c10:	11 24       	eor	r1, r1
    4c12:	86 95       	lsr	r24
    4c14:	86 95       	lsr	r24
    4c16:	86 95       	lsr	r24
    4c18:	88 0f       	add	r24, r24
    4c1a:	28 2f       	mov	r18, r24
    4c1c:	22 0f       	add	r18, r18
    4c1e:	22 0f       	add	r18, r18
    4c20:	82 0f       	add	r24, r18
    4c22:	96 2f       	mov	r25, r22
    4c24:	98 1b       	sub	r25, r24
    4c26:	95 30       	cpi	r25, 0x05	; 5
    4c28:	70 f0       	brcs	.+28     	; 0x4c46 <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    4c2a:	c7 01       	movw	r24, r14
    4c2c:	b6 01       	movw	r22, r12
    4c2e:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    4c32:	70 e0       	ldi	r23, 0x00	; 0
    4c34:	6f 5f       	subi	r22, 0xFF	; 255
    4c36:	7f 4f       	sbci	r23, 0xFF	; 255
    4c38:	07 2e       	mov	r0, r23
    4c3a:	00 0c       	add	r0, r0
    4c3c:	88 0b       	sbc	r24, r24
    4c3e:	99 0b       	sbc	r25, r25
    4c40:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    4c44:	09 c0       	rjmp	.+18     	; 0x4c58 <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    4c46:	c7 01       	movw	r24, r14
    4c48:	b6 01       	movw	r22, r12
    4c4a:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    4c4e:	70 e0       	ldi	r23, 0x00	; 0
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	0e 94 0f 40 	call	0x801e	; 0x801e <__floatunsisf>
	}
	return stat;
    4c58:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <__fixsfsi>
    4c5c:	86 2f       	mov	r24, r22
}
    4c5e:	ff 90       	pop	r15
    4c60:	ef 90       	pop	r14
    4c62:	df 90       	pop	r13
    4c64:	cf 90       	pop	r12
    4c66:	08 95       	ret

00004c68 <_ZN7wandern4drawEv>:
			EEPROM_Write(EEJAHR,rtc->Jahr);
		}
		return 0;
	}
	
	void draw(){
    4c68:	cf 92       	push	r12
    4c6a:	df 92       	push	r13
    4c6c:	ef 92       	push	r14
    4c6e:	ff 92       	push	r15
    4c70:	0f 93       	push	r16
    4c72:	1f 93       	push	r17
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c7e:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
    4c82:	10 e0       	ldi	r17, 0x00	; 0
    4c84:	e1 2c       	mov	r14, r1
    4c86:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    4c88:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c8a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c8c:	ee 0d       	add	r30, r14
    4c8e:	ff 1d       	adc	r31, r15
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	41 2f       	mov	r20, r17
    4c94:	60 81       	ld	r22, Z
    4c96:	8f 89       	ldd	r24, Y+23	; 0x17
    4c98:	98 8d       	ldd	r25, Y+24	; 0x18
    4c9a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4c9e:	2f ef       	ldi	r18, 0xFF	; 255
    4ca0:	e2 1a       	sub	r14, r18
    4ca2:	f2 0a       	sbc	r15, r18
    4ca4:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    4ca6:	10 33       	cpi	r17, 0x30	; 48
    4ca8:	79 f7       	brne	.-34     	; 0x4c88 <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    4caa:	6e df       	rcall	.-292    	; 0x4b88 <_Z14Batteriestatusv>
    4cac:	7e 01       	movw	r14, r28
    4cae:	32 e0       	ldi	r19, 0x02	; 2
    4cb0:	e3 0e       	add	r14, r19
    4cb2:	f1 1c       	adc	r15, r1
    4cb4:	28 2f       	mov	r18, r24
    4cb6:	08 2e       	mov	r0, r24
    4cb8:	00 0c       	add	r0, r0
    4cba:	33 0b       	sbc	r19, r19
    4cbc:	3f 93       	push	r19
    4cbe:	8f 93       	push	r24
    4cc0:	82 ec       	ldi	r24, 0xC2	; 194
    4cc2:	91 e0       	ldi	r25, 0x01	; 1
    4cc4:	9f 93       	push	r25
    4cc6:	8f 93       	push	r24
    4cc8:	ff 92       	push	r15
    4cca:	ef 92       	push	r14
    4ccc:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4cd0:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4cd2:	15 e1       	ldi	r17, 0x15	; 21
    4cd4:	18 1b       	sub	r17, r24
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	0f 90       	pop	r0
    4cde:	0f 90       	pop	r0
    4ce0:	0f 90       	pop	r0
    4ce2:	15 31       	cpi	r17, 0x15	; 21
    4ce4:	08 f0       	brcs	.+2      	; 0x4ce8 <_ZN7wandern4drawEv+0x80>
    4ce6:	5b c1       	rjmp	.+694    	; 0x4f9e <_ZN7wandern4drawEv+0x336>
    4ce8:	01 2f       	mov	r16, r17
    4cea:	00 0f       	add	r16, r16
    4cec:	01 0f       	add	r16, r17
    4cee:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4cf0:	8e 89       	ldd	r24, Y+22	; 0x16
    4cf2:	fe 01       	movw	r30, r28
    4cf4:	e1 0f       	add	r30, r17
    4cf6:	f1 1d       	adc	r31, r1
    4cf8:	e8 0f       	add	r30, r24
    4cfa:	f1 1d       	adc	r31, r1
    4cfc:	73 97       	sbiw	r30, 0x13	; 19
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	40 2f       	mov	r20, r16
    4d02:	60 81       	ld	r22, Z
    4d04:	8f 89       	ldd	r24, Y+23	; 0x17
    4d06:	98 8d       	ldd	r25, Y+24	; 0x18
    4d08:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4d0c:	1f 5f       	subi	r17, 0xFF	; 255
    4d0e:	0a 5f       	subi	r16, 0xFA	; 250
    4d10:	15 31       	cpi	r17, 0x15	; 21
    4d12:	71 f7       	brne	.-36     	; 0x4cf0 <_ZN7wandern4drawEv+0x88>
    4d14:	44 c1       	rjmp	.+648    	; 0x4f9e <_ZN7wandern4drawEv+0x336>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    4d16:	e9 8d       	ldd	r30, Y+25	; 0x19
    4d18:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4d1a:	ec 0d       	add	r30, r12
    4d1c:	fd 1d       	adc	r31, r13
    4d1e:	28 e3       	ldi	r18, 0x38	; 56
    4d20:	41 2f       	mov	r20, r17
    4d22:	60 85       	ldd	r22, Z+8	; 0x08
    4d24:	8f 89       	ldd	r24, Y+23	; 0x17
    4d26:	98 8d       	ldd	r25, Y+24	; 0x18
    4d28:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4d2c:	8f ef       	ldi	r24, 0xFF	; 255
    4d2e:	c8 1a       	sub	r12, r24
    4d30:	d8 0a       	sbc	r13, r24
    4d32:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    4d34:	10 38       	cpi	r17, 0x80	; 128
    4d36:	79 f7       	brne	.-34     	; 0x4d16 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"Data: %c%c%c%c%c",gpsdata[0],gpsdata[1],gpsdata[2],gpsdata[3],gpsdata[4]);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
		*/

		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    4d38:	80 91 9e 08 	lds	r24, 0x089E
    4d3c:	8f 93       	push	r24
    4d3e:	80 91 9d 08 	lds	r24, 0x089D
    4d42:	8f 93       	push	r24
    4d44:	80 91 9c 08 	lds	r24, 0x089C
    4d48:	8f 93       	push	r24
    4d4a:	80 91 9b 08 	lds	r24, 0x089B
    4d4e:	8f 93       	push	r24
    4d50:	8c ec       	ldi	r24, 0xCC	; 204
    4d52:	91 e0       	ldi	r25, 0x01	; 1
    4d54:	9f 93       	push	r25
    4d56:	8f 93       	push	r24
    4d58:	ff 92       	push	r15
    4d5a:	ef 92       	push	r14
    4d5c:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4d60:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    4d62:	2d b7       	in	r18, 0x3d	; 61
    4d64:	3e b7       	in	r19, 0x3e	; 62
    4d66:	28 5f       	subi	r18, 0xF8	; 248
    4d68:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	3e bf       	out	0x3e, r19	; 62
    4d70:	0f be       	out	0x3f, r0	; 63
    4d72:	2d bf       	out	0x3d, r18	; 61
    4d74:	88 23       	and	r24, r24
    4d76:	89 f0       	breq	.+34     	; 0x4d9a <_ZN7wandern4drawEv+0x132>
    4d78:	00 e0       	ldi	r16, 0x00	; 0
    4d7a:	10 e0       	ldi	r17, 0x00	; 0
    4d7c:	fe 01       	movw	r30, r28
    4d7e:	e1 0f       	add	r30, r17
    4d80:	f1 1d       	adc	r31, r1
    4d82:	20 e1       	ldi	r18, 0x10	; 16
    4d84:	40 2f       	mov	r20, r16
    4d86:	62 81       	ldd	r22, Z+2	; 0x02
    4d88:	8f 89       	ldd	r24, Y+23	; 0x17
    4d8a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d8c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4d90:	1f 5f       	subi	r17, 0xFF	; 255
    4d92:	0a 5f       	subi	r16, 0xFA	; 250
    4d94:	8e 89       	ldd	r24, Y+22	; 0x16
    4d96:	18 17       	cp	r17, r24
    4d98:	88 f3       	brcs	.-30     	; 0x4d7c <_ZN7wandern4drawEv+0x114>
			
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    4d9a:	80 91 9a 08 	lds	r24, 0x089A
    4d9e:	8f 93       	push	r24
    4da0:	80 91 99 08 	lds	r24, 0x0899
    4da4:	8f 93       	push	r24
    4da6:	80 91 98 08 	lds	r24, 0x0898
    4daa:	8f 93       	push	r24
    4dac:	80 91 97 08 	lds	r24, 0x0897
    4db0:	8f 93       	push	r24
    4db2:	86 ed       	ldi	r24, 0xD6	; 214
    4db4:	91 e0       	ldi	r25, 0x01	; 1
    4db6:	9f 93       	push	r25
    4db8:	8f 93       	push	r24
    4dba:	ff 92       	push	r15
    4dbc:	ef 92       	push	r14
    4dbe:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4dc2:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    4dc4:	2d b7       	in	r18, 0x3d	; 61
    4dc6:	3e b7       	in	r19, 0x3e	; 62
    4dc8:	28 5f       	subi	r18, 0xF8	; 248
    4dca:	3f 4f       	sbci	r19, 0xFF	; 255
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	3e bf       	out	0x3e, r19	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	2d bf       	out	0x3d, r18	; 61
    4dd6:	88 23       	and	r24, r24
    4dd8:	89 f0       	breq	.+34     	; 0x4dfc <_ZN7wandern4drawEv+0x194>
    4dda:	00 e0       	ldi	r16, 0x00	; 0
    4ddc:	10 e0       	ldi	r17, 0x00	; 0
    4dde:	fe 01       	movw	r30, r28
    4de0:	e1 0f       	add	r30, r17
    4de2:	f1 1d       	adc	r31, r1
    4de4:	28 e1       	ldi	r18, 0x18	; 24
    4de6:	40 2f       	mov	r20, r16
    4de8:	62 81       	ldd	r22, Z+2	; 0x02
    4dea:	8f 89       	ldd	r24, Y+23	; 0x17
    4dec:	98 8d       	ldd	r25, Y+24	; 0x18
    4dee:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4df2:	1f 5f       	subi	r17, 0xFF	; 255
    4df4:	0a 5f       	subi	r16, 0xFA	; 250
    4df6:	8e 89       	ldd	r24, Y+22	; 0x16
    4df8:	18 17       	cp	r17, r24
    4dfa:	88 f3       	brcs	.-30     	; 0x4dde <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.2f",gpsspeed);
    4dfc:	80 91 96 08 	lds	r24, 0x0896
    4e00:	8f 93       	push	r24
    4e02:	80 91 95 08 	lds	r24, 0x0895
    4e06:	8f 93       	push	r24
    4e08:	80 91 94 08 	lds	r24, 0x0894
    4e0c:	8f 93       	push	r24
    4e0e:	80 91 93 08 	lds	r24, 0x0893
    4e12:	8f 93       	push	r24
    4e14:	80 ee       	ldi	r24, 0xE0	; 224
    4e16:	91 e0       	ldi	r25, 0x01	; 1
    4e18:	9f 93       	push	r25
    4e1a:	8f 93       	push	r24
    4e1c:	ff 92       	push	r15
    4e1e:	ef 92       	push	r14
    4e20:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4e24:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    4e26:	2d b7       	in	r18, 0x3d	; 61
    4e28:	3e b7       	in	r19, 0x3e	; 62
    4e2a:	28 5f       	subi	r18, 0xF8	; 248
    4e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e2e:	0f b6       	in	r0, 0x3f	; 63
    4e30:	f8 94       	cli
    4e32:	3e bf       	out	0x3e, r19	; 62
    4e34:	0f be       	out	0x3f, r0	; 63
    4e36:	2d bf       	out	0x3d, r18	; 61
    4e38:	88 23       	and	r24, r24
    4e3a:	89 f0       	breq	.+34     	; 0x4e5e <_ZN7wandern4drawEv+0x1f6>
    4e3c:	00 e0       	ldi	r16, 0x00	; 0
    4e3e:	10 e0       	ldi	r17, 0x00	; 0
    4e40:	fe 01       	movw	r30, r28
    4e42:	e1 0f       	add	r30, r17
    4e44:	f1 1d       	adc	r31, r1
    4e46:	20 e2       	ldi	r18, 0x20	; 32
    4e48:	40 2f       	mov	r20, r16
    4e4a:	62 81       	ldd	r22, Z+2	; 0x02
    4e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e50:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4e54:	1f 5f       	subi	r17, 0xFF	; 255
    4e56:	0a 5f       	subi	r16, 0xFA	; 250
    4e58:	8e 89       	ldd	r24, Y+22	; 0x16
    4e5a:	18 17       	cp	r17, r24
    4e5c:	88 f3       	brcs	.-30     	; 0x4e40 <_ZN7wandern4drawEv+0x1d8>
			
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    4e5e:	80 91 8d 08 	lds	r24, 0x088D
    4e62:	1f 92       	push	r1
    4e64:	8f 93       	push	r24
    4e66:	80 91 8e 08 	lds	r24, 0x088E
    4e6a:	1f 92       	push	r1
    4e6c:	8f 93       	push	r24
    4e6e:	80 91 8f 08 	lds	r24, 0x088F
    4e72:	1f 92       	push	r1
    4e74:	8f 93       	push	r24
    4e76:	80 91 90 08 	lds	r24, 0x0890
    4e7a:	1f 92       	push	r1
    4e7c:	8f 93       	push	r24
    4e7e:	80 91 91 08 	lds	r24, 0x0891
    4e82:	1f 92       	push	r1
    4e84:	8f 93       	push	r24
    4e86:	80 91 92 08 	lds	r24, 0x0892
    4e8a:	1f 92       	push	r1
    4e8c:	8f 93       	push	r24
    4e8e:	8a ee       	ldi	r24, 0xEA	; 234
    4e90:	91 e0       	ldi	r25, 0x01	; 1
    4e92:	9f 93       	push	r25
    4e94:	8f 93       	push	r24
    4e96:	ff 92       	push	r15
    4e98:	ef 92       	push	r14
    4e9a:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4e9e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    4ea0:	2d b7       	in	r18, 0x3d	; 61
    4ea2:	3e b7       	in	r19, 0x3e	; 62
    4ea4:	20 5f       	subi	r18, 0xF0	; 240
    4ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	f8 94       	cli
    4eac:	3e bf       	out	0x3e, r19	; 62
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	2d bf       	out	0x3d, r18	; 61
    4eb2:	88 23       	and	r24, r24
    4eb4:	89 f0       	breq	.+34     	; 0x4ed8 <_ZN7wandern4drawEv+0x270>
    4eb6:	00 e0       	ldi	r16, 0x00	; 0
    4eb8:	10 e0       	ldi	r17, 0x00	; 0
    4eba:	fe 01       	movw	r30, r28
    4ebc:	e1 0f       	add	r30, r17
    4ebe:	f1 1d       	adc	r31, r1
    4ec0:	28 e2       	ldi	r18, 0x28	; 40
    4ec2:	40 2f       	mov	r20, r16
    4ec4:	62 81       	ldd	r22, Z+2	; 0x02
    4ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    4eca:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4ece:	1f 5f       	subi	r17, 0xFF	; 255
    4ed0:	0a 5f       	subi	r16, 0xFA	; 250
    4ed2:	8e 89       	ldd	r24, Y+22	; 0x16
    4ed4:	18 17       	cp	r17, r24
    4ed6:	88 f3       	brcs	.-30     	; 0x4eba <_ZN7wandern4drawEv+0x252>
		
		//Druckdaten	
		buffersize=sprintf(buffer,"%.02f",druck.pressure);
    4ed8:	e7 ef       	ldi	r30, 0xF7	; 247
    4eda:	f8 e0       	ldi	r31, 0x08	; 8
    4edc:	83 81       	ldd	r24, Z+3	; 0x03
    4ede:	8f 93       	push	r24
    4ee0:	82 81       	ldd	r24, Z+2	; 0x02
    4ee2:	8f 93       	push	r24
    4ee4:	81 81       	ldd	r24, Z+1	; 0x01
    4ee6:	8f 93       	push	r24
    4ee8:	80 81       	ld	r24, Z
    4eea:	8f 93       	push	r24
    4eec:	88 e0       	ldi	r24, 0x08	; 8
    4eee:	92 e0       	ldi	r25, 0x02	; 2
    4ef0:	9f 93       	push	r25
    4ef2:	8f 93       	push	r24
    4ef4:	ff 92       	push	r15
    4ef6:	ef 92       	push	r14
    4ef8:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4efc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    4efe:	2d b7       	in	r18, 0x3d	; 61
    4f00:	3e b7       	in	r19, 0x3e	; 62
    4f02:	28 5f       	subi	r18, 0xF8	; 248
    4f04:	3f 4f       	sbci	r19, 0xFF	; 255
    4f06:	0f b6       	in	r0, 0x3f	; 63
    4f08:	f8 94       	cli
    4f0a:	3e bf       	out	0x3e, r19	; 62
    4f0c:	0f be       	out	0x3f, r0	; 63
    4f0e:	2d bf       	out	0x3d, r18	; 61
    4f10:	88 23       	and	r24, r24
    4f12:	89 f0       	breq	.+34     	; 0x4f36 <_ZN7wandern4drawEv+0x2ce>
    4f14:	00 e0       	ldi	r16, 0x00	; 0
    4f16:	10 e0       	ldi	r17, 0x00	; 0
    4f18:	fe 01       	movw	r30, r28
    4f1a:	e1 0f       	add	r30, r17
    4f1c:	f1 1d       	adc	r31, r1
    4f1e:	20 e3       	ldi	r18, 0x30	; 48
    4f20:	40 2f       	mov	r20, r16
    4f22:	62 81       	ldd	r22, Z+2	; 0x02
    4f24:	8f 89       	ldd	r24, Y+23	; 0x17
    4f26:	98 8d       	ldd	r25, Y+24	; 0x18
    4f28:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4f2c:	1f 5f       	subi	r17, 0xFF	; 255
    4f2e:	0a 5f       	subi	r16, 0xFA	; 250
    4f30:	8e 89       	ldd	r24, Y+22	; 0x16
    4f32:	18 17       	cp	r17, r24
    4f34:	88 f3       	brcs	.-30     	; 0x4f18 <_ZN7wandern4drawEv+0x2b0>
		
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
    4f36:	e7 ef       	ldi	r30, 0xF7	; 247
    4f38:	f8 e0       	ldi	r31, 0x08	; 8
    4f3a:	87 85       	ldd	r24, Z+15	; 0x0f
    4f3c:	8f 93       	push	r24
    4f3e:	86 85       	ldd	r24, Z+14	; 0x0e
    4f40:	8f 93       	push	r24
    4f42:	85 85       	ldd	r24, Z+13	; 0x0d
    4f44:	8f 93       	push	r24
    4f46:	84 85       	ldd	r24, Z+12	; 0x0c
    4f48:	8f 93       	push	r24
    4f4a:	88 e0       	ldi	r24, 0x08	; 8
    4f4c:	92 e0       	ldi	r25, 0x02	; 2
    4f4e:	9f 93       	push	r25
    4f50:	8f 93       	push	r24
    4f52:	ff 92       	push	r15
    4f54:	ef 92       	push	r14
    4f56:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4f5a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    4f5c:	2d b7       	in	r18, 0x3d	; 61
    4f5e:	3e b7       	in	r19, 0x3e	; 62
    4f60:	28 5f       	subi	r18, 0xF8	; 248
    4f62:	3f 4f       	sbci	r19, 0xFF	; 255
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	3e bf       	out	0x3e, r19	; 62
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	2d bf       	out	0x3d, r18	; 61
    4f6e:	88 23       	and	r24, r24
    4f70:	89 f0       	breq	.+34     	; 0x4f94 <_ZN7wandern4drawEv+0x32c>
    4f72:	00 e0       	ldi	r16, 0x00	; 0
    4f74:	10 e0       	ldi	r17, 0x00	; 0
    4f76:	fe 01       	movw	r30, r28
    4f78:	e1 0f       	add	r30, r17
    4f7a:	f1 1d       	adc	r31, r1
    4f7c:	28 e3       	ldi	r18, 0x38	; 56
    4f7e:	40 2f       	mov	r20, r16
    4f80:	62 81       	ldd	r22, Z+2	; 0x02
    4f82:	8f 89       	ldd	r24, Y+23	; 0x17
    4f84:	98 8d       	ldd	r25, Y+24	; 0x18
    4f86:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    4f8a:	1f 5f       	subi	r17, 0xFF	; 255
    4f8c:	0a 5f       	subi	r16, 0xFA	; 250
    4f8e:	8e 89       	ldd	r24, Y+22	; 0x16
    4f90:	18 17       	cp	r17, r24
    4f92:	88 f3       	brcs	.-30     	; 0x4f76 <_ZN7wandern4drawEv+0x30e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4f94:	8f 89       	ldd	r24, Y+23	; 0x17
    4f96:	98 8d       	ldd	r25, Y+24	; 0x18
    4f98:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    4f9c:	04 c0       	rjmp	.+8      	; 0x4fa6 <_ZN7wandern4drawEv+0x33e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4f9e:	10 e5       	ldi	r17, 0x50	; 80
    4fa0:	c1 2c       	mov	r12, r1
    4fa2:	d1 2c       	mov	r13, r1
    4fa4:	b8 ce       	rjmp	.-656    	; 0x4d16 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,7*charhighte);}
		
			
		send();	
	}
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	1f 91       	pop	r17
    4fac:	0f 91       	pop	r16
    4fae:	ff 90       	pop	r15
    4fb0:	ef 90       	pop	r14
    4fb2:	df 90       	pop	r13
    4fb4:	cf 90       	pop	r12
    4fb6:	08 95       	ret

00004fb8 <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    4fb8:	af 92       	push	r10
    4fba:	bf 92       	push	r11
    4fbc:	cf 92       	push	r12
    4fbe:	df 92       	push	r13
    4fc0:	ef 92       	push	r14
    4fc2:	ff 92       	push	r15
    4fc4:	0f 93       	push	r16
    4fc6:	1f 93       	push	r17
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4fce:	8f 89       	ldd	r24, Y+23	; 0x17
    4fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    4fd2:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    4fd6:	d8 dd       	rcall	.-1104   	; 0x4b88 <_Z14Batteriestatusv>
    4fd8:	5e 01       	movw	r10, r28
    4fda:	22 e0       	ldi	r18, 0x02	; 2
    4fdc:	a2 0e       	add	r10, r18
    4fde:	b1 1c       	adc	r11, r1
    4fe0:	28 2f       	mov	r18, r24
    4fe2:	08 2e       	mov	r0, r24
    4fe4:	00 0c       	add	r0, r0
    4fe6:	33 0b       	sbc	r19, r19
    4fe8:	3f 93       	push	r19
    4fea:	8f 93       	push	r24
    4fec:	8e e0       	ldi	r24, 0x0E	; 14
    4fee:	92 e0       	ldi	r25, 0x02	; 2
    4ff0:	9f 93       	push	r25
    4ff2:	8f 93       	push	r24
    4ff4:	bf 92       	push	r11
    4ff6:	af 92       	push	r10
    4ff8:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    4ffc:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4ffe:	95 e1       	ldi	r25, 0x15	; 21
    5000:	09 2f       	mov	r16, r25
    5002:	08 1b       	sub	r16, r24
    5004:	0f 90       	pop	r0
    5006:	0f 90       	pop	r0
    5008:	0f 90       	pop	r0
    500a:	0f 90       	pop	r0
    500c:	0f 90       	pop	r0
    500e:	0f 90       	pop	r0
    5010:	05 31       	cpi	r16, 0x15	; 21
    5012:	08 f0       	brcs	.+2      	; 0x5016 <_ZN5tacho4drawEv+0x5e>
    5014:	d4 c1       	rjmp	.+936    	; 0x53be <_ZN5tacho4drawEv+0x406>
    5016:	e0 2e       	mov	r14, r16
    5018:	ee 0c       	add	r14, r14
    501a:	e0 0e       	add	r14, r16
    501c:	1e 2d       	mov	r17, r14
    501e:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    5020:	8e 89       	ldd	r24, Y+22	; 0x16
    5022:	fe 01       	movw	r30, r28
    5024:	e0 0f       	add	r30, r16
    5026:	f1 1d       	adc	r31, r1
    5028:	e8 0f       	add	r30, r24
    502a:	f1 1d       	adc	r31, r1
    502c:	73 97       	sbiw	r30, 0x13	; 19
    502e:	20 e0       	ldi	r18, 0x00	; 0
    5030:	41 2f       	mov	r20, r17
    5032:	60 81       	ld	r22, Z
    5034:	8f 89       	ldd	r24, Y+23	; 0x17
    5036:	98 8d       	ldd	r25, Y+24	; 0x18
    5038:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    503c:	0f 5f       	subi	r16, 0xFF	; 255
    503e:	1a 5f       	subi	r17, 0xFA	; 250
    5040:	05 31       	cpi	r16, 0x15	; 21
    5042:	71 f7       	brne	.-36     	; 0x5020 <_ZN5tacho4drawEv+0x68>
    5044:	bc c1       	rjmp	.+888    	; 0x53be <_ZN5tacho4drawEv+0x406>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    5046:	e9 8d       	ldd	r30, Y+25	; 0x19
    5048:	fa 8d       	ldd	r31, Y+26	; 0x1a
    504a:	ec 0d       	add	r30, r12
    504c:	fd 1d       	adc	r31, r13
    504e:	28 e3       	ldi	r18, 0x38	; 56
    5050:	41 2f       	mov	r20, r17
    5052:	60 85       	ldd	r22, Z+8	; 0x08
    5054:	8f 89       	ldd	r24, Y+23	; 0x17
    5056:	98 8d       	ldd	r25, Y+24	; 0x18
    5058:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    505c:	3f ef       	ldi	r19, 0xFF	; 255
    505e:	c3 1a       	sub	r12, r19
    5060:	d3 0a       	sbc	r13, r19
    5062:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    5064:	10 38       	cpi	r17, 0x80	; 128
    5066:	79 f7       	brne	.-34     	; 0x5046 <_ZN5tacho4drawEv+0x8e>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    5068:	20 e8       	ldi	r18, 0x80	; 128
    506a:	47 e3       	ldi	r20, 0x37	; 55
    506c:	60 e0       	ldi	r22, 0x00	; 0
    506e:	8f 89       	ldd	r24, Y+23	; 0x17
    5070:	98 8d       	ldd	r25, Y+24	; 0x18
    5072:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    5076:	25 e4       	ldi	r18, 0x45	; 69
    5078:	4f e0       	ldi	r20, 0x0F	; 15
    507a:	60 e0       	ldi	r22, 0x00	; 0
    507c:	8f 89       	ldd	r24, Y+23	; 0x17
    507e:	98 8d       	ldd	r25, Y+24	; 0x18
    5080:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    5084:	2b e3       	ldi	r18, 0x3B	; 59
    5086:	47 e0       	ldi	r20, 0x07	; 7
    5088:	65 e4       	ldi	r22, 0x45	; 69
    508a:	8f 89       	ldd	r24, Y+23	; 0x17
    508c:	98 8d       	ldd	r25, Y+24	; 0x18
    508e:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    5092:	20 e1       	ldi	r18, 0x10	; 16
    5094:	40 e0       	ldi	r20, 0x00	; 0
    5096:	65 e4       	ldi	r22, 0x45	; 69
    5098:	8f 89       	ldd	r24, Y+23	; 0x17
    509a:	98 8d       	ldd	r25, Y+24	; 0x18
    509c:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    50a0:	21 e4       	ldi	r18, 0x41	; 65
    50a2:	47 e2       	ldi	r20, 0x27	; 39
    50a4:	6f e3       	ldi	r22, 0x3F	; 63
    50a6:	8f 89       	ldd	r24, Y+23	; 0x17
    50a8:	98 8d       	ldd	r25, Y+24	; 0x18
    50aa:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    50ae:	20 e3       	ldi	r18, 0x30	; 48
    50b0:	40 e1       	ldi	r20, 0x10	; 16
    50b2:	6f e3       	ldi	r22, 0x3F	; 63
    50b4:	8f 89       	ldd	r24, Y+23	; 0x17
    50b6:	98 8d       	ldd	r25, Y+24	; 0x18
    50b8:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    50bc:	21 e4       	ldi	r18, 0x41	; 65
    50be:	48 e1       	ldi	r20, 0x18	; 24
    50c0:	6f e3       	ldi	r22, 0x3F	; 63
    50c2:	8f 89       	ldd	r24, Y+23	; 0x17
    50c4:	98 8d       	ldd	r25, Y+24	; 0x18
    50c6:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    50ca:	e9 8d       	ldd	r30, Y+25	; 0x19
    50cc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50ce:	60 81       	ld	r22, Z
    50d0:	60 53       	subi	r22, 0x30	; 48
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	40 e0       	ldi	r20, 0x00	; 0
    50d6:	8f 89       	ldd	r24, Y+23	; 0x17
    50d8:	98 8d       	ldd	r25, Y+24	; 0x18
    50da:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    50de:	e9 8d       	ldd	r30, Y+25	; 0x19
    50e0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50e2:	61 81       	ldd	r22, Z+1	; 0x01
    50e4:	60 53       	subi	r22, 0x30	; 48
    50e6:	20 e0       	ldi	r18, 0x00	; 0
    50e8:	40 e1       	ldi	r20, 0x10	; 16
    50ea:	8f 89       	ldd	r24, Y+23	; 0x17
    50ec:	98 8d       	ldd	r25, Y+24	; 0x18
    50ee:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    50f2:	e9 8d       	ldd	r30, Y+25	; 0x19
    50f4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50f6:	63 81       	ldd	r22, Z+3	; 0x03
    50f8:	60 53       	subi	r22, 0x30	; 48
    50fa:	20 e0       	ldi	r18, 0x00	; 0
    50fc:	45 e2       	ldi	r20, 0x25	; 37
    50fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5100:	98 8d       	ldd	r25, Y+24	; 0x18
    5102:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    5106:	e9 8d       	ldd	r30, Y+25	; 0x19
    5108:	fa 8d       	ldd	r31, Y+26	; 0x1a
    510a:	64 81       	ldd	r22, Z+4	; 0x04
    510c:	60 53       	subi	r22, 0x30	; 48
    510e:	20 e0       	ldi	r18, 0x00	; 0
    5110:	45 e3       	ldi	r20, 0x35	; 53
    5112:	8f 89       	ldd	r24, Y+23	; 0x17
    5114:	98 8d       	ldd	r25, Y+24	; 0x18
    5116:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    511a:	80 91 8c 08 	lds	r24, 0x088C
    511e:	8f 93       	push	r24
    5120:	80 91 8b 08 	lds	r24, 0x088B
    5124:	8f 93       	push	r24
    5126:	80 91 8a 08 	lds	r24, 0x088A
    512a:	8f 93       	push	r24
    512c:	80 91 89 08 	lds	r24, 0x0889
    5130:	8f 93       	push	r24
    5132:	89 e1       	ldi	r24, 0x19	; 25
    5134:	92 e0       	ldi	r25, 0x02	; 2
    5136:	9f 93       	push	r25
    5138:	8f 93       	push	r24
    513a:	bf 92       	push	r11
    513c:	af 92       	push	r10
    513e:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    5142:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    5144:	98 e0       	ldi	r25, 0x08	; 8
    5146:	09 2f       	mov	r16, r25
    5148:	08 1b       	sub	r16, r24
    514a:	8d b7       	in	r24, 0x3d	; 61
    514c:	9e b7       	in	r25, 0x3e	; 62
    514e:	08 96       	adiw	r24, 0x08	; 8
    5150:	0f b6       	in	r0, 0x3f	; 63
    5152:	f8 94       	cli
    5154:	9e bf       	out	0x3e, r25	; 62
    5156:	0f be       	out	0x3f, r0	; 63
    5158:	8d bf       	out	0x3d, r24	; 61
    515a:	08 30       	cpi	r16, 0x08	; 8
    515c:	f8 f4       	brcc	.+62     	; 0x519c <_ZN5tacho4drawEv+0x1e4>
    515e:	10 2f       	mov	r17, r16
    5160:	12 95       	swap	r17
    5162:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    5164:	8e 89       	ldd	r24, Y+22	; 0x16
    5166:	fe 01       	movw	r30, r28
    5168:	e0 0f       	add	r30, r16
    516a:	f1 1d       	adc	r31, r1
    516c:	e8 0f       	add	r30, r24
    516e:	f1 1d       	adc	r31, r1
    5170:	36 97       	sbiw	r30, 0x06	; 6
    5172:	60 81       	ld	r22, Z
    5174:	6e 32       	cpi	r22, 0x2E	; 46
    5176:	39 f4       	brne	.+14     	; 0x5186 <_ZN5tacho4drawEv+0x1ce>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    5178:	20 e2       	ldi	r18, 0x20	; 32
    517a:	41 2f       	mov	r20, r17
    517c:	8f 89       	ldd	r24, Y+23	; 0x17
    517e:	98 8d       	ldd	r25, Y+24	; 0x18
    5180:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    5184:	07 c0       	rjmp	.+14     	; 0x5194 <_ZN5tacho4drawEv+0x1dc>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    5186:	60 53       	subi	r22, 0x30	; 48
    5188:	28 e1       	ldi	r18, 0x18	; 24
    518a:	41 2f       	mov	r20, r17
    518c:	8f 89       	ldd	r24, Y+23	; 0x17
    518e:	98 8d       	ldd	r25, Y+24	; 0x18
    5190:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    5194:	0f 5f       	subi	r16, 0xFF	; 255
    5196:	10 5f       	subi	r17, 0xF0	; 240
    5198:	08 30       	cpi	r16, 0x08	; 8
    519a:	21 f7       	brne	.-56     	; 0x5164 <_ZN5tacho4drawEv+0x1ac>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	4a e7       	ldi	r20, 0x7A	; 122
    51a2:	54 e4       	ldi	r21, 0x44	; 68
    51a4:	60 91 85 08 	lds	r22, 0x0885
    51a8:	70 91 86 08 	lds	r23, 0x0886
    51ac:	80 91 87 08 	lds	r24, 0x0887
    51b0:	90 91 88 08 	lds	r25, 0x0888
    51b4:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    51b8:	9f 93       	push	r25
    51ba:	8f 93       	push	r24
    51bc:	7f 93       	push	r23
    51be:	6f 93       	push	r22
    51c0:	8f e1       	ldi	r24, 0x1F	; 31
    51c2:	92 e0       	ldi	r25, 0x02	; 2
    51c4:	9f 93       	push	r25
    51c6:	8f 93       	push	r24
    51c8:	bf 92       	push	r11
    51ca:	af 92       	push	r10
    51cc:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    51d0:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    51d2:	2d b7       	in	r18, 0x3d	; 61
    51d4:	3e b7       	in	r19, 0x3e	; 62
    51d6:	28 5f       	subi	r18, 0xF8	; 248
    51d8:	3f 4f       	sbci	r19, 0xFF	; 255
    51da:	0f b6       	in	r0, 0x3f	; 63
    51dc:	f8 94       	cli
    51de:	3e bf       	out	0x3e, r19	; 62
    51e0:	0f be       	out	0x3f, r0	; 63
    51e2:	2d bf       	out	0x3d, r18	; 61
    51e4:	88 23       	and	r24, r24
    51e6:	89 f0       	breq	.+34     	; 0x520a <_ZN5tacho4drawEv+0x252>
    51e8:	16 e4       	ldi	r17, 0x46	; 70
    51ea:	f1 2c       	mov	r15, r1
    51ec:	fe 01       	movw	r30, r28
    51ee:	ef 0d       	add	r30, r15
    51f0:	f1 1d       	adc	r31, r1
    51f2:	20 e1       	ldi	r18, 0x10	; 16
    51f4:	41 2f       	mov	r20, r17
    51f6:	62 81       	ldd	r22, Z+2	; 0x02
    51f8:	8f 89       	ldd	r24, Y+23	; 0x17
    51fa:	98 8d       	ldd	r25, Y+24	; 0x18
    51fc:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    5200:	f3 94       	inc	r15
    5202:	1a 5f       	subi	r17, 0xFA	; 250
    5204:	8e 89       	ldd	r24, Y+22	; 0x16
    5206:	f8 16       	cp	r15, r24
    5208:	88 f3       	brcs	.-30     	; 0x51ec <_ZN5tacho4drawEv+0x234>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    520a:	80 91 84 08 	lds	r24, 0x0884
    520e:	8f 93       	push	r24
    5210:	80 91 83 08 	lds	r24, 0x0883
    5214:	8f 93       	push	r24
    5216:	80 91 82 08 	lds	r24, 0x0882
    521a:	8f 93       	push	r24
    521c:	80 91 81 08 	lds	r24, 0x0881
    5220:	8f 93       	push	r24
    5222:	86 e2       	ldi	r24, 0x26	; 38
    5224:	92 e0       	ldi	r25, 0x02	; 2
    5226:	9f 93       	push	r25
    5228:	8f 93       	push	r24
    522a:	bf 92       	push	r11
    522c:	af 92       	push	r10
    522e:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    5232:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    5234:	2d b7       	in	r18, 0x3d	; 61
    5236:	3e b7       	in	r19, 0x3e	; 62
    5238:	28 5f       	subi	r18, 0xF8	; 248
    523a:	3f 4f       	sbci	r19, 0xFF	; 255
    523c:	0f b6       	in	r0, 0x3f	; 63
    523e:	f8 94       	cli
    5240:	3e bf       	out	0x3e, r19	; 62
    5242:	0f be       	out	0x3f, r0	; 63
    5244:	2d bf       	out	0x3d, r18	; 61
    5246:	88 23       	and	r24, r24
    5248:	89 f0       	breq	.+34     	; 0x526c <_ZN5tacho4drawEv+0x2b4>
    524a:	16 e4       	ldi	r17, 0x46	; 70
    524c:	f1 2c       	mov	r15, r1
    524e:	fe 01       	movw	r30, r28
    5250:	ef 0d       	add	r30, r15
    5252:	f1 1d       	adc	r31, r1
    5254:	28 e2       	ldi	r18, 0x28	; 40
    5256:	41 2f       	mov	r20, r17
    5258:	62 81       	ldd	r22, Z+2	; 0x02
    525a:	8f 89       	ldd	r24, Y+23	; 0x17
    525c:	98 8d       	ldd	r25, Y+24	; 0x18
    525e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    5262:	f3 94       	inc	r15
    5264:	1a 5f       	subi	r17, 0xFA	; 250
    5266:	8e 89       	ldd	r24, Y+22	; 0x16
    5268:	f8 16       	cp	r15, r24
    526a:	88 f3       	brcs	.-30     	; 0x524e <_ZN5tacho4drawEv+0x296>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    526c:	c0 90 7d 08 	lds	r12, 0x087D
    5270:	d0 90 7e 08 	lds	r13, 0x087E
    5274:	e0 90 7f 08 	lds	r14, 0x087F
    5278:	f0 90 80 08 	lds	r15, 0x0880
    527c:	c7 01       	movw	r24, r14
    527e:	b6 01       	movw	r22, r12
    5280:	2c e3       	ldi	r18, 0x3C	; 60
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	40 e0       	ldi	r20, 0x00	; 0
    5286:	50 e0       	ldi	r21, 0x00	; 0
    5288:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <__udivmodsi4>
    528c:	1f 92       	push	r1
    528e:	6f 93       	push	r22
    5290:	1f 92       	push	r1
    5292:	2f 93       	push	r18
    5294:	c7 01       	movw	r24, r14
    5296:	b6 01       	movw	r22, r12
    5298:	20 e1       	ldi	r18, 0x10	; 16
    529a:	3e e0       	ldi	r19, 0x0E	; 14
    529c:	40 e0       	ldi	r20, 0x00	; 0
    529e:	50 e0       	ldi	r21, 0x00	; 0
    52a0:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <__udivmodsi4>
    52a4:	1f 92       	push	r1
    52a6:	2f 93       	push	r18
    52a8:	8f e2       	ldi	r24, 0x2F	; 47
    52aa:	92 e0       	ldi	r25, 0x02	; 2
    52ac:	9f 93       	push	r25
    52ae:	8f 93       	push	r24
    52b0:	bf 92       	push	r11
    52b2:	af 92       	push	r10
    52b4:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    52b8:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    52ba:	2d b7       	in	r18, 0x3d	; 61
    52bc:	3e b7       	in	r19, 0x3e	; 62
    52be:	26 5f       	subi	r18, 0xF6	; 246
    52c0:	3f 4f       	sbci	r19, 0xFF	; 255
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	f8 94       	cli
    52c6:	3e bf       	out	0x3e, r19	; 62
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	2d bf       	out	0x3d, r18	; 61
    52cc:	88 23       	and	r24, r24
    52ce:	89 f0       	breq	.+34     	; 0x52f2 <_ZN5tacho4drawEv+0x33a>
    52d0:	16 e4       	ldi	r17, 0x46	; 70
    52d2:	f1 2c       	mov	r15, r1
    52d4:	fe 01       	movw	r30, r28
    52d6:	ef 0d       	add	r30, r15
    52d8:	f1 1d       	adc	r31, r1
    52da:	20 e3       	ldi	r18, 0x30	; 48
    52dc:	41 2f       	mov	r20, r17
    52de:	62 81       	ldd	r22, Z+2	; 0x02
    52e0:	8f 89       	ldd	r24, Y+23	; 0x17
    52e2:	98 8d       	ldd	r25, Y+24	; 0x18
    52e4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    52e8:	f3 94       	inc	r15
    52ea:	1a 5f       	subi	r17, 0xFA	; 250
    52ec:	8e 89       	ldd	r24, Y+22	; 0x16
    52ee:	f8 16       	cp	r15, r24
    52f0:	88 f3       	brcs	.-30     	; 0x52d4 <_ZN5tacho4drawEv+0x31c>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    52f2:	60 91 7d 08 	lds	r22, 0x087D
    52f6:	70 91 7e 08 	lds	r23, 0x087E
    52fa:	80 91 7f 08 	lds	r24, 0x087F
    52fe:	90 91 80 08 	lds	r25, 0x0880
    5302:	61 15       	cp	r22, r1
    5304:	71 05       	cpc	r23, r1
    5306:	81 05       	cpc	r24, r1
    5308:	91 05       	cpc	r25, r1
    530a:	b1 f4       	brne	.+44     	; 0x5338 <_ZN5tacho4drawEv+0x380>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    530c:	1f 92       	push	r1
    530e:	1f 92       	push	r1
    5310:	1f 92       	push	r1
    5312:	1f 92       	push	r1
    5314:	86 e2       	ldi	r24, 0x26	; 38
    5316:	92 e0       	ldi	r25, 0x02	; 2
    5318:	9f 93       	push	r25
    531a:	8f 93       	push	r24
    531c:	bf 92       	push	r11
    531e:	af 92       	push	r10
    5320:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    5324:	8e 8b       	std	Y+22, r24	; 0x16
    5326:	8d b7       	in	r24, 0x3d	; 61
    5328:	9e b7       	in	r25, 0x3e	; 62
    532a:	08 96       	adiw	r24, 0x08	; 8
    532c:	0f b6       	in	r0, 0x3f	; 63
    532e:	f8 94       	cli
    5330:	9e bf       	out	0x3e, r25	; 62
    5332:	0f be       	out	0x3f, r0	; 63
    5334:	8d bf       	out	0x3d, r24	; 61
    5336:	2a c0       	rjmp	.+84     	; 0x538c <_ZN5tacho4drawEv+0x3d4>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    5338:	0e 94 0f 40 	call	0x801e	; 0x801e <__floatunsisf>
    533c:	9b 01       	movw	r18, r22
    533e:	ac 01       	movw	r20, r24
    5340:	60 91 85 08 	lds	r22, 0x0885
    5344:	70 91 86 08 	lds	r23, 0x0886
    5348:	80 91 87 08 	lds	r24, 0x0887
    534c:	90 91 88 08 	lds	r25, 0x0888
    5350:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    5354:	26 e6       	ldi	r18, 0x66	; 102
    5356:	36 e6       	ldi	r19, 0x66	; 102
    5358:	46 e6       	ldi	r20, 0x66	; 102
    535a:	50 e4       	ldi	r21, 0x40	; 64
    535c:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    5360:	9f 93       	push	r25
    5362:	8f 93       	push	r24
    5364:	7f 93       	push	r23
    5366:	6f 93       	push	r22
    5368:	86 e2       	ldi	r24, 0x26	; 38
    536a:	92 e0       	ldi	r25, 0x02	; 2
    536c:	9f 93       	push	r25
    536e:	8f 93       	push	r24
    5370:	bf 92       	push	r11
    5372:	af 92       	push	r10
    5374:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    5378:	8e 8b       	std	Y+22, r24	; 0x16
    537a:	2d b7       	in	r18, 0x3d	; 61
    537c:	3e b7       	in	r19, 0x3e	; 62
    537e:	28 5f       	subi	r18, 0xF8	; 248
    5380:	3f 4f       	sbci	r19, 0xFF	; 255
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	3e bf       	out	0x3e, r19	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    538c:	8e 89       	ldd	r24, Y+22	; 0x16
    538e:	88 23       	and	r24, r24
    5390:	89 f0       	breq	.+34     	; 0x53b4 <_ZN5tacho4drawEv+0x3fc>
    5392:	0b e4       	ldi	r16, 0x4B	; 75
    5394:	10 e0       	ldi	r17, 0x00	; 0
    5396:	fe 01       	movw	r30, r28
    5398:	e1 0f       	add	r30, r17
    539a:	f1 1d       	adc	r31, r1
    539c:	28 e0       	ldi	r18, 0x08	; 8
    539e:	40 2f       	mov	r20, r16
    53a0:	62 81       	ldd	r22, Z+2	; 0x02
    53a2:	8f 89       	ldd	r24, Y+23	; 0x17
    53a4:	98 8d       	ldd	r25, Y+24	; 0x18
    53a6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    53aa:	1f 5f       	subi	r17, 0xFF	; 255
    53ac:	0a 5f       	subi	r16, 0xFA	; 250
    53ae:	8e 89       	ldd	r24, Y+22	; 0x16
    53b0:	18 17       	cp	r17, r24
    53b2:	88 f3       	brcs	.-30     	; 0x5396 <_ZN5tacho4drawEv+0x3de>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    53b4:	8f 89       	ldd	r24, Y+23	; 0x17
    53b6:	98 8d       	ldd	r25, Y+24	; 0x18
    53b8:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    53bc:	04 c0       	rjmp	.+8      	; 0x53c6 <_ZN5tacho4drawEv+0x40e>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    53be:	10 e5       	ldi	r17, 0x50	; 80
    53c0:	c1 2c       	mov	r12, r1
    53c2:	d1 2c       	mov	r13, r1
    53c4:	40 ce       	rjmp	.-896    	; 0x5046 <_ZN5tacho4drawEv+0x8e>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    53c6:	df 91       	pop	r29
    53c8:	cf 91       	pop	r28
    53ca:	1f 91       	pop	r17
    53cc:	0f 91       	pop	r16
    53ce:	ff 90       	pop	r15
    53d0:	ef 90       	pop	r14
    53d2:	df 90       	pop	r13
    53d4:	cf 90       	pop	r12
    53d6:	bf 90       	pop	r11
    53d8:	af 90       	pop	r10
    53da:	08 95       	ret

000053dc <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    53dc:	ef 92       	push	r14
    53de:	ff 92       	push	r15
    53e0:	0f 93       	push	r16
    53e2:	1f 93       	push	r17
    53e4:	cf 93       	push	r28
    53e6:	df 93       	push	r29
    53e8:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    53ea:	8f 89       	ldd	r24, Y+23	; 0x17
    53ec:	98 8d       	ldd	r25, Y+24	; 0x18
    53ee:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
    53f2:	11 e4       	ldi	r17, 0x41	; 65
    53f4:	e1 2c       	mov	r14, r1
    53f6:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    53f8:	e9 8d       	ldd	r30, Y+25	; 0x19
    53fa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    53fc:	ee 0d       	add	r30, r14
    53fe:	ff 1d       	adc	r31, r15
    5400:	20 e0       	ldi	r18, 0x00	; 0
    5402:	41 2f       	mov	r20, r17
    5404:	60 81       	ld	r22, Z
    5406:	8f 89       	ldd	r24, Y+23	; 0x17
    5408:	98 8d       	ldd	r25, Y+24	; 0x18
    540a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    540e:	8f ef       	ldi	r24, 0xFF	; 255
    5410:	e8 1a       	sub	r14, r24
    5412:	f8 0a       	sbc	r15, r24
    5414:	1a 5f       	subi	r17, 0xFA	; 250
    5416:	1f 35       	cpi	r17, 0x5F	; 95
    5418:	79 f7       	brne	.-34     	; 0x53f8 <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    541a:	b6 db       	rcall	.-2196   	; 0x4b88 <_Z14Batteriestatusv>
    541c:	28 2f       	mov	r18, r24
    541e:	08 2e       	mov	r0, r24
    5420:	00 0c       	add	r0, r0
    5422:	33 0b       	sbc	r19, r19
    5424:	3f 93       	push	r19
    5426:	8f 93       	push	r24
    5428:	84 e1       	ldi	r24, 0x14	; 20
    542a:	92 e0       	ldi	r25, 0x02	; 2
    542c:	9f 93       	push	r25
    542e:	8f 93       	push	r24
    5430:	ce 01       	movw	r24, r28
    5432:	02 96       	adiw	r24, 0x02	; 2
    5434:	9f 93       	push	r25
    5436:	8f 93       	push	r24
    5438:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    543c:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    543e:	15 e1       	ldi	r17, 0x15	; 21
    5440:	18 1b       	sub	r17, r24
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	0f 90       	pop	r0
    5448:	0f 90       	pop	r0
    544a:	0f 90       	pop	r0
    544c:	0f 90       	pop	r0
    544e:	15 31       	cpi	r17, 0x15	; 21
    5450:	08 f0       	brcs	.+2      	; 0x5454 <_ZN3uhr4drawEv+0x78>
    5452:	5f c0       	rjmp	.+190    	; 0x5512 <_ZN3uhr4drawEv+0x136>
    5454:	01 2f       	mov	r16, r17
    5456:	00 0f       	add	r16, r16
    5458:	01 0f       	add	r16, r17
    545a:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    545c:	8e 89       	ldd	r24, Y+22	; 0x16
    545e:	fe 01       	movw	r30, r28
    5460:	e1 0f       	add	r30, r17
    5462:	f1 1d       	adc	r31, r1
    5464:	e8 0f       	add	r30, r24
    5466:	f1 1d       	adc	r31, r1
    5468:	73 97       	sbiw	r30, 0x13	; 19
    546a:	20 e0       	ldi	r18, 0x00	; 0
    546c:	40 2f       	mov	r20, r16
    546e:	60 81       	ld	r22, Z
    5470:	8f 89       	ldd	r24, Y+23	; 0x17
    5472:	98 8d       	ldd	r25, Y+24	; 0x18
    5474:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5478:	1f 5f       	subi	r17, 0xFF	; 255
    547a:	0a 5f       	subi	r16, 0xFA	; 250
    547c:	15 31       	cpi	r17, 0x15	; 21
    547e:	71 f7       	brne	.-36     	; 0x545c <_ZN3uhr4drawEv+0x80>
    5480:	48 c0       	rjmp	.+144    	; 0x5512 <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    5482:	e9 8d       	ldd	r30, Y+25	; 0x19
    5484:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5486:	ee 0d       	add	r30, r14
    5488:	ff 1d       	adc	r31, r15
    548a:	28 e3       	ldi	r18, 0x38	; 56
    548c:	41 2f       	mov	r20, r17
    548e:	60 85       	ldd	r22, Z+8	; 0x08
    5490:	8f 89       	ldd	r24, Y+23	; 0x17
    5492:	98 8d       	ldd	r25, Y+24	; 0x18
    5494:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    5498:	8f ef       	ldi	r24, 0xFF	; 255
    549a:	e8 1a       	sub	r14, r24
    549c:	f8 0a       	sbc	r15, r24
    549e:	1a 5f       	subi	r17, 0xFA	; 250
    54a0:	11 37       	cpi	r17, 0x71	; 113
    54a2:	79 f7       	brne	.-34     	; 0x5482 <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    54a4:	e9 8d       	ldd	r30, Y+25	; 0x19
    54a6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54a8:	09 a5       	ldd	r16, Y+41	; 0x29
    54aa:	22 89       	ldd	r18, Z+18	; 0x12
    54ac:	41 89       	ldd	r20, Z+17	; 0x11
    54ae:	60 89       	ldd	r22, Z+16	; 0x10
    54b0:	8f 89       	ldd	r24, Y+23	; 0x17
    54b2:	98 8d       	ldd	r25, Y+24	; 0x18
    54b4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    54b8:	e9 8d       	ldd	r30, Y+25	; 0x19
    54ba:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54bc:	60 81       	ld	r22, Z
    54be:	60 53       	subi	r22, 0x30	; 48
    54c0:	2d e0       	ldi	r18, 0x0D	; 13
    54c2:	46 e4       	ldi	r20, 0x46	; 70
    54c4:	8f 89       	ldd	r24, Y+23	; 0x17
    54c6:	98 8d       	ldd	r25, Y+24	; 0x18
    54c8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    54cc:	e9 8d       	ldd	r30, Y+25	; 0x19
    54ce:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54d0:	61 81       	ldd	r22, Z+1	; 0x01
    54d2:	60 53       	subi	r22, 0x30	; 48
    54d4:	2d e0       	ldi	r18, 0x0D	; 13
    54d6:	46 e5       	ldi	r20, 0x56	; 86
    54d8:	8f 89       	ldd	r24, Y+23	; 0x17
    54da:	98 8d       	ldd	r25, Y+24	; 0x18
    54dc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    54e0:	e9 8d       	ldd	r30, Y+25	; 0x19
    54e2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54e4:	63 81       	ldd	r22, Z+3	; 0x03
    54e6:	60 53       	subi	r22, 0x30	; 48
    54e8:	22 e2       	ldi	r18, 0x22	; 34
    54ea:	46 e4       	ldi	r20, 0x46	; 70
    54ec:	8f 89       	ldd	r24, Y+23	; 0x17
    54ee:	98 8d       	ldd	r25, Y+24	; 0x18
    54f0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    54f4:	e9 8d       	ldd	r30, Y+25	; 0x19
    54f6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54f8:	64 81       	ldd	r22, Z+4	; 0x04
    54fa:	60 53       	subi	r22, 0x30	; 48
    54fc:	22 e2       	ldi	r18, 0x22	; 34
    54fe:	46 e5       	ldi	r20, 0x56	; 86
    5500:	8f 89       	ldd	r24, Y+23	; 0x17
    5502:	98 8d       	ldd	r25, Y+24	; 0x18
    5504:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5508:	8f 89       	ldd	r24, Y+23	; 0x17
    550a:	98 8d       	ldd	r25, Y+24	; 0x18
    550c:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    5510:	04 c0       	rjmp	.+8      	; 0x551a <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5512:	11 e4       	ldi	r17, 0x41	; 65
    5514:	e1 2c       	mov	r14, r1
    5516:	f1 2c       	mov	r15, r1
    5518:	b4 cf       	rjmp	.-152    	; 0x5482 <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    551a:	df 91       	pop	r29
    551c:	cf 91       	pop	r28
    551e:	1f 91       	pop	r17
    5520:	0f 91       	pop	r16
    5522:	ff 90       	pop	r15
    5524:	ef 90       	pop	r14
    5526:	08 95       	ret

00005528 <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    5528:	cf 92       	push	r12
    552a:	df 92       	push	r13
    552c:	ef 92       	push	r14
    552e:	ff 92       	push	r15
    5530:	0f 93       	push	r16
    5532:	1f 93       	push	r17
    5534:	cf 93       	push	r28
    5536:	df 93       	push	r29
    5538:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    553a:	8f 89       	ldd	r24, Y+23	; 0x17
    553c:	98 8d       	ldd	r25, Y+24	; 0x18
    553e:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
    5542:	10 e0       	ldi	r17, 0x00	; 0
    5544:	e1 2c       	mov	r14, r1
    5546:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    5548:	e9 8d       	ldd	r30, Y+25	; 0x19
    554a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    554c:	ee 0d       	add	r30, r14
    554e:	ff 1d       	adc	r31, r15
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	41 2f       	mov	r20, r17
    5554:	60 81       	ld	r22, Z
    5556:	8f 89       	ldd	r24, Y+23	; 0x17
    5558:	98 8d       	ldd	r25, Y+24	; 0x18
    555a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    555e:	8f ef       	ldi	r24, 0xFF	; 255
    5560:	e8 1a       	sub	r14, r24
    5562:	f8 0a       	sbc	r15, r24
    5564:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    5566:	10 33       	cpi	r17, 0x30	; 48
    5568:	79 f7       	brne	.-34     	; 0x5548 <_ZN5menue4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    556a:	0e db       	rcall	.-2532   	; 0x4b88 <_Z14Batteriestatusv>
    556c:	7e 01       	movw	r14, r28
    556e:	92 e0       	ldi	r25, 0x02	; 2
    5570:	e9 0e       	add	r14, r25
    5572:	f1 1c       	adc	r15, r1
    5574:	28 2f       	mov	r18, r24
    5576:	08 2e       	mov	r0, r24
    5578:	00 0c       	add	r0, r0
    557a:	33 0b       	sbc	r19, r19
    557c:	3f 93       	push	r19
    557e:	8f 93       	push	r24
    5580:	82 ec       	ldi	r24, 0xC2	; 194
    5582:	91 e0       	ldi	r25, 0x01	; 1
    5584:	9f 93       	push	r25
    5586:	8f 93       	push	r24
    5588:	ff 92       	push	r15
    558a:	ef 92       	push	r14
    558c:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    5590:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5592:	15 e1       	ldi	r17, 0x15	; 21
    5594:	18 1b       	sub	r17, r24
    5596:	0f 90       	pop	r0
    5598:	0f 90       	pop	r0
    559a:	0f 90       	pop	r0
    559c:	0f 90       	pop	r0
    559e:	0f 90       	pop	r0
    55a0:	0f 90       	pop	r0
    55a2:	15 31       	cpi	r17, 0x15	; 21
    55a4:	08 f0       	brcs	.+2      	; 0x55a8 <_ZN5menue4drawEv+0x80>
    55a6:	bf c0       	rjmp	.+382    	; 0x5726 <_ZN5menue4drawEv+0x1fe>
    55a8:	01 2f       	mov	r16, r17
    55aa:	00 0f       	add	r16, r16
    55ac:	01 0f       	add	r16, r17
    55ae:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    55b0:	8e 89       	ldd	r24, Y+22	; 0x16
    55b2:	fe 01       	movw	r30, r28
    55b4:	e1 0f       	add	r30, r17
    55b6:	f1 1d       	adc	r31, r1
    55b8:	e8 0f       	add	r30, r24
    55ba:	f1 1d       	adc	r31, r1
    55bc:	73 97       	sbiw	r30, 0x13	; 19
    55be:	20 e0       	ldi	r18, 0x00	; 0
    55c0:	40 2f       	mov	r20, r16
    55c2:	60 81       	ld	r22, Z
    55c4:	8f 89       	ldd	r24, Y+23	; 0x17
    55c6:	98 8d       	ldd	r25, Y+24	; 0x18
    55c8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    55cc:	1f 5f       	subi	r17, 0xFF	; 255
    55ce:	0a 5f       	subi	r16, 0xFA	; 250
    55d0:	15 31       	cpi	r17, 0x15	; 21
    55d2:	71 f7       	brne	.-36     	; 0x55b0 <_ZN5menue4drawEv+0x88>
    55d4:	a8 c0       	rjmp	.+336    	; 0x5726 <_ZN5menue4drawEv+0x1fe>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    55d6:	e9 8d       	ldd	r30, Y+25	; 0x19
    55d8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    55da:	ec 0d       	add	r30, r12
    55dc:	fd 1d       	adc	r31, r13
    55de:	28 e3       	ldi	r18, 0x38	; 56
    55e0:	41 2f       	mov	r20, r17
    55e2:	60 85       	ldd	r22, Z+8	; 0x08
    55e4:	8f 89       	ldd	r24, Y+23	; 0x17
    55e6:	98 8d       	ldd	r25, Y+24	; 0x18
    55e8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    55ec:	8f ef       	ldi	r24, 0xFF	; 255
    55ee:	c8 1a       	sub	r12, r24
    55f0:	d8 0a       	sbc	r13, r24
    55f2:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    55f4:	10 38       	cpi	r17, 0x80	; 128
    55f6:	79 f7       	brne	.-34     	; 0x55d6 <_ZN5menue4drawEv+0xae>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    55f8:	85 e5       	ldi	r24, 0x55	; 85
    55fa:	98 e6       	ldi	r25, 0x68	; 104
    55fc:	a2 e7       	ldi	r26, 0x72	; 114
    55fe:	b0 e0       	ldi	r27, 0x00	; 0
    5600:	8a 83       	std	Y+2, r24	; 0x02
    5602:	9b 83       	std	Y+3, r25	; 0x03
    5604:	ac 83       	std	Y+4, r26	; 0x04
    5606:	bd 83       	std	Y+5, r27	; 0x05
    5608:	83 e0       	ldi	r24, 0x03	; 3
    560a:	8e 8b       	std	Y+22, r24	; 0x16
    560c:	0c e0       	ldi	r16, 0x0C	; 12
    560e:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    5610:	fe 01       	movw	r30, r28
    5612:	e1 0f       	add	r30, r17
    5614:	f1 1d       	adc	r31, r1
    5616:	20 e1       	ldi	r18, 0x10	; 16
    5618:	40 2f       	mov	r20, r16
    561a:	62 81       	ldd	r22, Z+2	; 0x02
    561c:	8f 89       	ldd	r24, Y+23	; 0x17
    561e:	98 8d       	ldd	r25, Y+24	; 0x18
    5620:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    5624:	1f 5f       	subi	r17, 0xFF	; 255
    5626:	0a 5f       	subi	r16, 0xFA	; 250
    5628:	8e 89       	ldd	r24, Y+22	; 0x16
    562a:	18 17       	cp	r17, r24
    562c:	88 f3       	brcs	.-30     	; 0x5610 <_ZN5menue4drawEv+0xe8>
		buffersize=sprintf(buffer,"Tacho");
    562e:	86 e0       	ldi	r24, 0x06	; 6
    5630:	ee e3       	ldi	r30, 0x3E	; 62
    5632:	f2 e0       	ldi	r31, 0x02	; 2
    5634:	d7 01       	movw	r26, r14
    5636:	01 90       	ld	r0, Z+
    5638:	0d 92       	st	X+, r0
    563a:	8a 95       	dec	r24
    563c:	e1 f7       	brne	.-8      	; 0x5636 <_ZN5menue4drawEv+0x10e>
    563e:	85 e0       	ldi	r24, 0x05	; 5
    5640:	8e 8b       	std	Y+22, r24	; 0x16
    5642:	0c e0       	ldi	r16, 0x0C	; 12
    5644:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    5646:	fe 01       	movw	r30, r28
    5648:	e1 0f       	add	r30, r17
    564a:	f1 1d       	adc	r31, r1
    564c:	28 e1       	ldi	r18, 0x18	; 24
    564e:	40 2f       	mov	r20, r16
    5650:	62 81       	ldd	r22, Z+2	; 0x02
    5652:	8f 89       	ldd	r24, Y+23	; 0x17
    5654:	98 8d       	ldd	r25, Y+24	; 0x18
    5656:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    565a:	1f 5f       	subi	r17, 0xFF	; 255
    565c:	0a 5f       	subi	r16, 0xFA	; 250
    565e:	8e 89       	ldd	r24, Y+22	; 0x16
    5660:	18 17       	cp	r17, r24
    5662:	88 f3       	brcs	.-30     	; 0x5646 <_ZN5menue4drawEv+0x11e>
		buffersize=sprintf(buffer,"Wandern");
    5664:	88 e0       	ldi	r24, 0x08	; 8
    5666:	e4 e4       	ldi	r30, 0x44	; 68
    5668:	f2 e0       	ldi	r31, 0x02	; 2
    566a:	d7 01       	movw	r26, r14
    566c:	01 90       	ld	r0, Z+
    566e:	0d 92       	st	X+, r0
    5670:	8a 95       	dec	r24
    5672:	e1 f7       	brne	.-8      	; 0x566c <_ZN5menue4drawEv+0x144>
    5674:	87 e0       	ldi	r24, 0x07	; 7
    5676:	8e 8b       	std	Y+22, r24	; 0x16
    5678:	0c e0       	ldi	r16, 0x0C	; 12
    567a:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    567c:	fe 01       	movw	r30, r28
    567e:	e1 0f       	add	r30, r17
    5680:	f1 1d       	adc	r31, r1
    5682:	20 e2       	ldi	r18, 0x20	; 32
    5684:	40 2f       	mov	r20, r16
    5686:	62 81       	ldd	r22, Z+2	; 0x02
    5688:	8f 89       	ldd	r24, Y+23	; 0x17
    568a:	98 8d       	ldd	r25, Y+24	; 0x18
    568c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    5690:	1f 5f       	subi	r17, 0xFF	; 255
    5692:	0a 5f       	subi	r16, 0xFA	; 250
    5694:	8e 89       	ldd	r24, Y+22	; 0x16
    5696:	18 17       	cp	r17, r24
    5698:	88 f3       	brcs	.-30     	; 0x567c <_ZN5menue4drawEv+0x154>
		buffersize=sprintf(buffer,"Einstellungen");
    569a:	8e e0       	ldi	r24, 0x0E	; 14
    569c:	ec e4       	ldi	r30, 0x4C	; 76
    569e:	f2 e0       	ldi	r31, 0x02	; 2
    56a0:	d7 01       	movw	r26, r14
    56a2:	01 90       	ld	r0, Z+
    56a4:	0d 92       	st	X+, r0
    56a6:	8a 95       	dec	r24
    56a8:	e1 f7       	brne	.-8      	; 0x56a2 <_ZN5menue4drawEv+0x17a>
    56aa:	8d e0       	ldi	r24, 0x0D	; 13
    56ac:	8e 8b       	std	Y+22, r24	; 0x16
    56ae:	0c e0       	ldi	r16, 0x0C	; 12
    56b0:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    56b2:	fe 01       	movw	r30, r28
    56b4:	e1 0f       	add	r30, r17
    56b6:	f1 1d       	adc	r31, r1
    56b8:	28 e2       	ldi	r18, 0x28	; 40
    56ba:	40 2f       	mov	r20, r16
    56bc:	62 81       	ldd	r22, Z+2	; 0x02
    56be:	8f 89       	ldd	r24, Y+23	; 0x17
    56c0:	98 8d       	ldd	r25, Y+24	; 0x18
    56c2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    56c6:	1f 5f       	subi	r17, 0xFF	; 255
    56c8:	0a 5f       	subi	r16, 0xFA	; 250
    56ca:	8e 89       	ldd	r24, Y+22	; 0x16
    56cc:	18 17       	cp	r17, r24
    56ce:	88 f3       	brcs	.-30     	; 0x56b2 <_ZN5menue4drawEv+0x18a>
		buffersize=sprintf(buffer,"Display aus");
    56d0:	8c e0       	ldi	r24, 0x0C	; 12
    56d2:	ea e5       	ldi	r30, 0x5A	; 90
    56d4:	f2 e0       	ldi	r31, 0x02	; 2
    56d6:	d7 01       	movw	r26, r14
    56d8:	01 90       	ld	r0, Z+
    56da:	0d 92       	st	X+, r0
    56dc:	8a 95       	dec	r24
    56de:	e1 f7       	brne	.-8      	; 0x56d8 <_ZN5menue4drawEv+0x1b0>
    56e0:	8b e0       	ldi	r24, 0x0B	; 11
    56e2:	8e 8b       	std	Y+22, r24	; 0x16
    56e4:	0c e0       	ldi	r16, 0x0C	; 12
    56e6:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    56e8:	fe 01       	movw	r30, r28
    56ea:	e1 0f       	add	r30, r17
    56ec:	f1 1d       	adc	r31, r1
    56ee:	20 e3       	ldi	r18, 0x30	; 48
    56f0:	40 2f       	mov	r20, r16
    56f2:	62 81       	ldd	r22, Z+2	; 0x02
    56f4:	8f 89       	ldd	r24, Y+23	; 0x17
    56f6:	98 8d       	ldd	r25, Y+24	; 0x18
    56f8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    56fc:	1f 5f       	subi	r17, 0xFF	; 255
    56fe:	0a 5f       	subi	r16, 0xFA	; 250
    5700:	8e 89       	ldd	r24, Y+22	; 0x16
    5702:	18 17       	cp	r17, r24
    5704:	88 f3       	brcs	.-30     	; 0x56e8 <_ZN5menue4drawEv+0x1c0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    5706:	2d a1       	ldd	r18, Y+37	; 0x25
    5708:	22 0f       	add	r18, r18
    570a:	22 0f       	add	r18, r18
    570c:	22 0f       	add	r18, r18
    570e:	20 5f       	subi	r18, 0xF0	; 240
    5710:	40 e0       	ldi	r20, 0x00	; 0
    5712:	6e e3       	ldi	r22, 0x3E	; 62
    5714:	8f 89       	ldd	r24, Y+23	; 0x17
    5716:	98 8d       	ldd	r25, Y+24	; 0x18
    5718:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    571c:	8f 89       	ldd	r24, Y+23	; 0x17
    571e:	98 8d       	ldd	r25, Y+24	; 0x18
    5720:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    5724:	04 c0       	rjmp	.+8      	; 0x572e <_ZN5menue4drawEv+0x206>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5726:	10 e5       	ldi	r17, 0x50	; 80
    5728:	c1 2c       	mov	r12, r1
    572a:	d1 2c       	mov	r13, r1
    572c:	54 cf       	rjmp	.-344    	; 0x55d6 <_ZN5menue4drawEv+0xae>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    572e:	df 91       	pop	r29
    5730:	cf 91       	pop	r28
    5732:	1f 91       	pop	r17
    5734:	0f 91       	pop	r16
    5736:	ff 90       	pop	r15
    5738:	ef 90       	pop	r14
    573a:	df 90       	pop	r13
    573c:	cf 90       	pop	r12
    573e:	08 95       	ret

00005740 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    5740:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5742:	f9 99       	sbic	0x1f, 1	; 31
    5744:	fe cf       	rjmp	.-4      	; 0x5742 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    5746:	92 bd       	out	0x22, r25	; 34
    5748:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    574a:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    574c:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    574e:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    5750:	78 94       	sei
    5752:	08 95       	ret

00005754 <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    5754:	cf 93       	push	r28
    5756:	df 93       	push	r29
    5758:	ec 01       	movw	r28, r24
		if (*tast=='e')
    575a:	fb 01       	movw	r30, r22
    575c:	90 81       	ld	r25, Z
    575e:	95 36       	cpi	r25, 0x65	; 101
    5760:	09 f0       	breq	.+2      	; 0x5764 <_ZN7wandern11tastendruckEPh+0x10>
    5762:	40 c0       	rjmp	.+128    	; 0x57e4 <_ZN7wandern11tastendruckEPh+0x90>
		{
			rtc->Stunden	= gpsstunde;
    5764:	e9 8d       	ldd	r30, Y+25	; 0x19
    5766:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5768:	80 91 92 08 	lds	r24, 0x0892
    576c:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    576e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5770:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5772:	80 91 91 08 	lds	r24, 0x0891
    5776:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    5778:	e9 8d       	ldd	r30, Y+25	; 0x19
    577a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    577c:	80 91 90 08 	lds	r24, 0x0890
    5780:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    5782:	e9 8d       	ldd	r30, Y+25	; 0x19
    5784:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5786:	80 91 8f 08 	lds	r24, 0x088F
    578a:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    578c:	e9 8d       	ldd	r30, Y+25	; 0x19
    578e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5790:	80 91 8e 08 	lds	r24, 0x088E
    5794:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    5796:	e9 8d       	ldd	r30, Y+25	; 0x19
    5798:	fa 8d       	ldd	r31, Y+26	; 0x1a
    579a:	80 91 8d 08 	lds	r24, 0x088D
    579e:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    57a0:	89 8d       	ldd	r24, Y+25	; 0x19
    57a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    57a4:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    57a8:	e9 8d       	ldd	r30, Y+25	; 0x19
    57aa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57ac:	61 89       	ldd	r22, Z+17	; 0x11
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	c6 df       	rcall	.-116    	; 0x5740 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    57b4:	e9 8d       	ldd	r30, Y+25	; 0x19
    57b6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57b8:	60 89       	ldd	r22, Z+16	; 0x10
    57ba:	81 e0       	ldi	r24, 0x01	; 1
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	c0 df       	rcall	.-128    	; 0x5740 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    57c0:	e9 8d       	ldd	r30, Y+25	; 0x19
    57c2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57c4:	64 89       	ldd	r22, Z+20	; 0x14
    57c6:	82 e0       	ldi	r24, 0x02	; 2
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	ba df       	rcall	.-140    	; 0x5740 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    57cc:	e9 8d       	ldd	r30, Y+25	; 0x19
    57ce:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57d0:	66 89       	ldd	r22, Z+22	; 0x16
    57d2:	83 e0       	ldi	r24, 0x03	; 3
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	b4 df       	rcall	.-152    	; 0x5740 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    57d8:	e9 8d       	ldd	r30, Y+25	; 0x19
    57da:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57dc:	67 89       	ldd	r22, Z+23	; 0x17
    57de:	84 e0       	ldi	r24, 0x04	; 4
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	ae df       	rcall	.-164    	; 0x5740 <_Z12EEPROM_Writejh>
		}
		return 0;
	}
    57e4:	80 e0       	ldi	r24, 0x00	; 0
    57e6:	df 91       	pop	r29
    57e8:	cf 91       	pop	r28
    57ea:	08 95       	ret

000057ec <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    57ec:	f8 94       	cli
	while(EECR&(1<<EEPE));
    57ee:	f9 99       	sbic	0x1f, 1	; 31
    57f0:	fe cf       	rjmp	.-4      	; 0x57ee <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    57f2:	92 bd       	out	0x22, r25	; 34
    57f4:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    57f6:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    57f8:	78 94       	sei
	return EEDR;
    57fa:	80 b5       	in	r24, 0x20	; 32
}
    57fc:	08 95       	ret

000057fe <__vector_16>:

//schlechte variante der Uhreinstellung
void uhreinstellen();

//SD karten Timer
ISR(TIMER0_COMPA_vect){
    57fe:	1f 92       	push	r1
    5800:	0f 92       	push	r0
    5802:	0f b6       	in	r0, 0x3f	; 63
    5804:	0f 92       	push	r0
    5806:	11 24       	eor	r1, r1
    5808:	0b b6       	in	r0, 0x3b	; 59
    580a:	0f 92       	push	r0
    580c:	2f 93       	push	r18
    580e:	3f 93       	push	r19
    5810:	4f 93       	push	r20
    5812:	5f 93       	push	r21
    5814:	6f 93       	push	r22
    5816:	7f 93       	push	r23
    5818:	8f 93       	push	r24
    581a:	9f 93       	push	r25
    581c:	af 93       	push	r26
    581e:	bf 93       	push	r27
    5820:	ef 93       	push	r30
    5822:	ff 93       	push	r31
	disk_timerproc();	//Timer der SD Karte
    5824:	0e 94 2e 0b 	call	0x165c	; 0x165c <disk_timerproc>
}
    5828:	ff 91       	pop	r31
    582a:	ef 91       	pop	r30
    582c:	bf 91       	pop	r27
    582e:	af 91       	pop	r26
    5830:	9f 91       	pop	r25
    5832:	8f 91       	pop	r24
    5834:	7f 91       	pop	r23
    5836:	6f 91       	pop	r22
    5838:	5f 91       	pop	r21
    583a:	4f 91       	pop	r20
    583c:	3f 91       	pop	r19
    583e:	2f 91       	pop	r18
    5840:	0f 90       	pop	r0
    5842:	0b be       	out	0x3b, r0	; 59
    5844:	0f 90       	pop	r0
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	0f 90       	pop	r0
    584a:	1f 90       	pop	r1
    584c:	18 95       	reti

0000584e <__vector_11>:

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    584e:	1f 92       	push	r1
    5850:	0f 92       	push	r0
    5852:	0f b6       	in	r0, 0x3f	; 63
    5854:	0f 92       	push	r0
    5856:	11 24       	eor	r1, r1
    5858:	0b b6       	in	r0, 0x3b	; 59
    585a:	0f 92       	push	r0
    585c:	8f 93       	push	r24
    585e:	ef 93       	push	r30
    5860:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    5862:	ec e1       	ldi	r30, 0x1C	; 28
    5864:	fe e0       	ldi	r31, 0x0E	; 14
    5866:	82 89       	ldd	r24, Z+18	; 0x12
    5868:	8f 5f       	subi	r24, 0xFF	; 255
    586a:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    586c:	80 8d       	ldd	r24, Z+24	; 0x18
    586e:	82 60       	ori	r24, 0x02	; 2
    5870:	80 8f       	std	Z+24, r24	; 0x18
}
    5872:	ff 91       	pop	r31
    5874:	ef 91       	pop	r30
    5876:	8f 91       	pop	r24
    5878:	0f 90       	pop	r0
    587a:	0b be       	out	0x3b, r0	; 59
    587c:	0f 90       	pop	r0
    587e:	0f be       	out	0x3f, r0	; 63
    5880:	0f 90       	pop	r0
    5882:	1f 90       	pop	r1
    5884:	18 95       	reti

00005886 <__vector_13>:

ISR(TIMER1_COMPA_vect){
    5886:	1f 92       	push	r1
    5888:	0f 92       	push	r0
    588a:	0f b6       	in	r0, 0x3f	; 63
    588c:	0f 92       	push	r0
    588e:	11 24       	eor	r1, r1
    5890:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    5892:	80 91 eb 08 	lds	r24, 0x08EB
    5896:	81 60       	ori	r24, 0x01	; 1
    5898:	80 93 eb 08 	sts	0x08EB, r24
}
    589c:	8f 91       	pop	r24
    589e:	0f 90       	pop	r0
    58a0:	0f be       	out	0x3f, r0	; 63
    58a2:	0f 90       	pop	r0
    58a4:	1f 90       	pop	r1
    58a6:	18 95       	reti

000058a8 <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    58a8:	1f 92       	push	r1
    58aa:	0f 92       	push	r0
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	0f 92       	push	r0
    58b0:	11 24       	eor	r1, r1
    58b2:	0b b6       	in	r0, 0x3b	; 59
    58b4:	0f 92       	push	r0
    58b6:	2f 93       	push	r18
    58b8:	8f 93       	push	r24
    58ba:	9f 93       	push	r25
    58bc:	ef 93       	push	r30
    58be:	ff 93       	push	r31
	uint8_t temp = UDR0;
    58c0:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    58c4:	24 32       	cpi	r18, 0x24	; 36
    58c6:	51 f4       	brne	.+20     	; 0x58dc <__vector_20+0x34>
    58c8:	80 91 e8 08 	lds	r24, 0x08E8
    58cc:	98 2f       	mov	r25, r24
    58ce:	9c 70       	andi	r25, 0x0C	; 12
    58d0:	29 f4       	brne	.+10     	; 0x58dc <__vector_20+0x34>
	{
		gpscounter = 0;
    58d2:	10 92 9f 08 	sts	0x089F, r1
		gpsstatus |= (1<<message);
    58d6:	81 60       	ori	r24, 0x01	; 1
    58d8:	80 93 e8 08 	sts	0x08E8, r24
	}
	if ((gpsstatus&(1<<message)))
    58dc:	90 91 e8 08 	lds	r25, 0x08E8
    58e0:	90 ff       	sbrs	r25, 0
    58e2:	3c c0       	rjmp	.+120    	; 0x595c <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    58e4:	80 91 9f 08 	lds	r24, 0x089F
    58e8:	e8 2f       	mov	r30, r24
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	e0 56       	subi	r30, 0x60	; 96
    58ee:	f7 4f       	sbci	r31, 0xF7	; 247
    58f0:	20 83       	st	Z, r18
		gpscounter++;
    58f2:	8f 5f       	subi	r24, 0xFF	; 255
    58f4:	80 93 9f 08 	sts	0x089F, r24
		if (gpscounter>72)
    58f8:	89 34       	cpi	r24, 0x49	; 73
    58fa:	20 f0       	brcs	.+8      	; 0x5904 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    58fc:	9e 7f       	andi	r25, 0xFE	; 254
    58fe:	90 93 e8 08 	sts	0x08E8, r25
    5902:	2c c0       	rjmp	.+88     	; 0x595c <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    5904:	83 31       	cpi	r24, 0x13	; 19
    5906:	c9 f4       	brne	.+50     	; 0x593a <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    5908:	80 91 a4 08 	lds	r24, 0x08A4
    590c:	8d 34       	cpi	r24, 0x4D	; 77
    590e:	89 f4       	brne	.+34     	; 0x5932 <__vector_20+0x8a>
    5910:	80 91 a5 08 	lds	r24, 0x08A5
    5914:	83 34       	cpi	r24, 0x43	; 67
    5916:	69 f4       	brne	.+26     	; 0x5932 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    5918:	80 91 b2 08 	lds	r24, 0x08B2
    591c:	81 34       	cpi	r24, 0x41	; 65
    591e:	29 f0       	breq	.+10     	; 0x592a <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    5920:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    5922:	90 61       	ori	r25, 0x10	; 16
    5924:	90 93 e8 08 	sts	0x08E8, r25
    5928:	19 c0       	rjmp	.+50     	; 0x595c <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    592a:	92 60       	ori	r25, 0x02	; 2
    592c:	90 93 e8 08 	sts	0x08E8, r25
    5930:	15 c0       	rjmp	.+42     	; 0x595c <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    5932:	9c 7f       	andi	r25, 0xFC	; 252
    5934:	90 93 e8 08 	sts	0x08E8, r25
    5938:	11 c0       	rjmp	.+34     	; 0x595c <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    593a:	8a 32       	cpi	r24, 0x2A	; 42
    593c:	39 f4       	brne	.+14     	; 0x594c <__vector_20+0xa4>
    593e:	94 ff       	sbrs	r25, 4
    5940:	0d c0       	rjmp	.+26     	; 0x595c <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    5942:	9e 7e       	andi	r25, 0xEE	; 238
    5944:	98 60       	ori	r25, 0x08	; 8
    5946:	90 93 e8 08 	sts	0x08E8, r25
    594a:	08 c0       	rjmp	.+16     	; 0x595c <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    594c:	86 34       	cpi	r24, 0x46	; 70
    594e:	31 f4       	brne	.+12     	; 0x595c <__vector_20+0xb4>
    5950:	91 ff       	sbrs	r25, 1
    5952:	04 c0       	rjmp	.+8      	; 0x595c <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    5954:	9c 7f       	andi	r25, 0xFC	; 252
    5956:	94 60       	ori	r25, 0x04	; 4
    5958:	90 93 e8 08 	sts	0x08E8, r25
		}
	}
}
    595c:	ff 91       	pop	r31
    595e:	ef 91       	pop	r30
    5960:	9f 91       	pop	r25
    5962:	8f 91       	pop	r24
    5964:	2f 91       	pop	r18
    5966:	0f 90       	pop	r0
    5968:	0b be       	out	0x3b, r0	; 59
    596a:	0f 90       	pop	r0
    596c:	0f be       	out	0x3f, r0	; 63
    596e:	0f 90       	pop	r0
    5970:	1f 90       	pop	r1
    5972:	18 95       	reti

00005974 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    5974:	10 92 89 08 	sts	0x0889, r1
    5978:	10 92 8a 08 	sts	0x088A, r1
    597c:	10 92 8b 08 	sts	0x088B, r1
    5980:	10 92 8c 08 	sts	0x088C, r1
	strecke = 0;
    5984:	10 92 85 08 	sts	0x0885, r1
    5988:	10 92 86 08 	sts	0x0886, r1
    598c:	10 92 87 08 	sts	0x0887, r1
    5990:	10 92 88 08 	sts	0x0888, r1
	maxgeschw = 0;
    5994:	10 92 81 08 	sts	0x0881, r1
    5998:	10 92 82 08 	sts	0x0882, r1
    599c:	10 92 83 08 	sts	0x0883, r1
    59a0:	10 92 84 08 	sts	0x0884, r1
	Fahrtzeit = 0;
    59a4:	10 92 7d 08 	sts	0x087D, r1
    59a8:	10 92 7e 08 	sts	0x087E, r1
    59ac:	10 92 7f 08 	sts	0x087F, r1
    59b0:	10 92 80 08 	sts	0x0880, r1
    59b4:	08 95       	ret

000059b6 <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    59b6:	fb 01       	movw	r30, r22
    59b8:	80 81       	ld	r24, Z
    59ba:	85 36       	cpi	r24, 0x65	; 101
    59bc:	09 f4       	brne	.+2      	; 0x59c0 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    59be:	da df       	rcall	.-76     	; 0x5974 <_Z6nullenv>
		}
		return 0;
	}
    59c0:	80 e0       	ldi	r24, 0x00	; 0
    59c2:	08 95       	ret

000059c4 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    59c4:	fc 01       	movw	r30, r24
    59c6:	20 81       	ld	r18, Z
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	06 2e       	mov	r0, r22
    59cc:	02 c0       	rjmp	.+4      	; 0x59d2 <_Z13reed_debouncePVhh+0xe>
    59ce:	35 95       	asr	r19
    59d0:	27 95       	ror	r18
    59d2:	0a 94       	dec	r0
    59d4:	e2 f7       	brpl	.-8      	; 0x59ce <_Z13reed_debouncePVhh+0xa>
    59d6:	20 ff       	sbrs	r18, 0
    59d8:	16 c0       	rjmp	.+44     	; 0x5a06 <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    59da:	ef e0       	ldi	r30, 0x0F	; 15
    59dc:	f7 e2       	ldi	r31, 0x27	; 39
    59de:	31 97       	sbiw	r30, 0x01	; 1
    59e0:	f1 f7       	brne	.-4      	; 0x59de <_Z13reed_debouncePVhh+0x1a>
    59e2:	00 c0       	rjmp	.+0      	; 0x59e4 <_Z13reed_debouncePVhh+0x20>
    59e4:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    59e6:	fc 01       	movw	r30, r24
    59e8:	80 81       	ld	r24, Z
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	02 c0       	rjmp	.+4      	; 0x59f2 <_Z13reed_debouncePVhh+0x2e>
    59ee:	95 95       	asr	r25
    59f0:	87 95       	ror	r24
    59f2:	6a 95       	dec	r22
    59f4:	e2 f7       	brpl	.-8      	; 0x59ee <_Z13reed_debouncePVhh+0x2a>
    59f6:	80 fd       	sbrc	r24, 0
    59f8:	08 c0       	rjmp	.+16     	; 0x5a0a <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    59fa:	f2 e0       	ldi	r31, 0x02	; 2
    59fc:	fa 95       	dec	r31
    59fe:	f1 f7       	brne	.-4      	; 0x59fc <_Z13reed_debouncePVhh+0x38>
    5a00:	00 c0       	rjmp	.+0      	; 0x5a02 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    5a02:	81 e0       	ldi	r24, 0x01	; 1
    5a04:	08 95       	ret
		}
	}
	return 0;
    5a06:	80 e0       	ldi	r24, 0x00	; 0
    5a08:	08 95       	ret
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
}
    5a0c:	08 95       	ret

00005a0e <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    5a0e:	cf 92       	push	r12
    5a10:	df 92       	push	r13
    5a12:	ef 92       	push	r14
    5a14:	ff 92       	push	r15
    5a16:	cf 93       	push	r28
    5a18:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    5a1a:	e4 e8       	ldi	r30, 0x84	; 132
    5a1c:	f0 e0       	ldi	r31, 0x00	; 0
    5a1e:	c0 81       	ld	r28, Z
    5a20:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    5a22:	11 82       	std	Z+1, r1	; 0x01
    5a24:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    5a26:	2b ed       	ldi	r18, 0xDB	; 219
    5a28:	3f e0       	ldi	r19, 0x0F	; 15
    5a2a:	49 e4       	ldi	r20, 0x49	; 73
    5a2c:	50 e4       	ldi	r21, 0x40	; 64
    5a2e:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    5a32:	26 e6       	ldi	r18, 0x66	; 102
    5a34:	36 e6       	ldi	r19, 0x66	; 102
    5a36:	46 e6       	ldi	r20, 0x66	; 102
    5a38:	50 e4       	ldi	r21, 0x40	; 64
    5a3a:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    5a3e:	6b 01       	movw	r12, r22
    5a40:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    5a42:	be 01       	movw	r22, r28
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	0e 94 0f 40 	call	0x801e	; 0x801e <__floatunsisf>
    5a4c:	20 e0       	ldi	r18, 0x00	; 0
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	40 e0       	ldi	r20, 0x00	; 0
    5a52:	5e e3       	ldi	r21, 0x3E	; 62
    5a54:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    5a58:	2d eb       	ldi	r18, 0xBD	; 189
    5a5a:	37 e3       	ldi	r19, 0x37	; 55
    5a5c:	46 e8       	ldi	r20, 0x86	; 134
    5a5e:	5a e3       	ldi	r21, 0x3A	; 58
    5a60:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    5a64:	2a e0       	ldi	r18, 0x0A	; 10
    5a66:	37 ed       	ldi	r19, 0xD7	; 215
    5a68:	43 ea       	ldi	r20, 0xA3	; 163
    5a6a:	5b e3       	ldi	r21, 0x3B	; 59
    5a6c:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    5a70:	9b 01       	movw	r18, r22
    5a72:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    5a74:	c7 01       	movw	r24, r14
    5a76:	b6 01       	movw	r22, r12
    5a78:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    5a7c:	20 91 89 08 	lds	r18, 0x0889
    5a80:	30 91 8a 08 	lds	r19, 0x088A
    5a84:	40 91 8b 08 	lds	r20, 0x088B
    5a88:	50 91 8c 08 	lds	r21, 0x088C
    5a8c:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
	geschw /= 2.0;
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	40 e0       	ldi	r20, 0x00	; 0
    5a96:	5f e3       	ldi	r21, 0x3F	; 63
    5a98:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    5a9c:	6b 01       	movw	r12, r22
    5a9e:	7c 01       	movw	r14, r24
	if (geschw >=160)
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	40 e2       	ldi	r20, 0x20	; 32
    5aa6:	53 e4       	ldi	r21, 0x43	; 67
    5aa8:	0e 94 1f 41 	call	0x823e	; 0x823e <__gesf2>
    5aac:	88 23       	and	r24, r24
    5aae:	4c f4       	brge	.+18     	; 0x5ac2 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    5ab0:	c0 92 89 08 	sts	0x0889, r12
    5ab4:	d0 92 8a 08 	sts	0x088A, r13
    5ab8:	e0 92 8b 08 	sts	0x088B, r14
    5abc:	f0 92 8c 08 	sts	0x088C, r15
    5ac0:	08 c0       	rjmp	.+16     	; 0x5ad2 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    5ac2:	10 92 89 08 	sts	0x0889, r1
    5ac6:	10 92 8a 08 	sts	0x088A, r1
    5aca:	10 92 8b 08 	sts	0x088B, r1
    5ace:	10 92 8c 08 	sts	0x088C, r1
	}
}
    5ad2:	df 91       	pop	r29
    5ad4:	cf 91       	pop	r28
    5ad6:	ff 90       	pop	r15
    5ad8:	ef 90       	pop	r14
    5ada:	df 90       	pop	r13
    5adc:	cf 90       	pop	r12
    5ade:	08 95       	ret

00005ae0 <get_fattime>:

FATFS FATFS_Obj;
FIL logger;

DWORD get_fattime (void)
{
    5ae0:	0f 93       	push	r16
    5ae2:	1f 93       	push	r17
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
    5ae4:	ec e1       	ldi	r30, 0x1C	; 28
    5ae6:	fe e0       	ldi	r31, 0x0E	; 14
    5ae8:	24 89       	ldd	r18, Z+20	; 0x14

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
    5aea:	86 89       	ldd	r24, Z+22	; 0x16
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	a0 e0       	ldi	r26, 0x00	; 0
    5af0:	b0 e0       	ldi	r27, 0x00	; 0
    5af2:	07 2e       	mov	r0, r23
    5af4:	75 e1       	ldi	r23, 0x15	; 21
    5af6:	88 0f       	add	r24, r24
    5af8:	99 1f       	adc	r25, r25
    5afa:	aa 1f       	adc	r26, r26
    5afc:	bb 1f       	adc	r27, r27
    5afe:	7a 95       	dec	r23
    5b00:	d1 f7       	brne	.-12     	; 0x5af6 <get_fattime+0x16>
    5b02:	70 2d       	mov	r23, r0
    5b04:	a2 2b       	or	r26, r18
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
    5b06:	40 89       	ldd	r20, Z+16	; 0x10
    5b08:	50 e0       	ldi	r21, 0x00	; 0
    5b0a:	60 e0       	ldi	r22, 0x00	; 0
    5b0c:	70 e0       	ldi	r23, 0x00	; 0
    5b0e:	03 2e       	mov	r0, r19
    5b10:	3b e0       	ldi	r19, 0x0B	; 11
    5b12:	44 0f       	add	r20, r20
    5b14:	55 1f       	adc	r21, r21
    5b16:	66 1f       	adc	r22, r22
    5b18:	77 1f       	adc	r23, r23
    5b1a:	3a 95       	dec	r19
    5b1c:	d1 f7       	brne	.-12     	; 0x5b12 <get_fattime+0x32>
    5b1e:	30 2d       	mov	r19, r0
    5b20:	84 2b       	or	r24, r20
    5b22:	95 2b       	or	r25, r21
    5b24:	a6 2b       	or	r26, r22
    5b26:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Minuten << 5)
    5b28:	41 89       	ldd	r20, Z+17	; 0x11
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	60 e0       	ldi	r22, 0x00	; 0
    5b2e:	70 e0       	ldi	r23, 0x00	; 0
    5b30:	44 0f       	add	r20, r20
    5b32:	55 1f       	adc	r21, r21
    5b34:	66 1f       	adc	r22, r22
    5b36:	77 1f       	adc	r23, r23
    5b38:	44 0f       	add	r20, r20
    5b3a:	55 1f       	adc	r21, r21
    5b3c:	66 1f       	adc	r22, r22
    5b3e:	77 1f       	adc	r23, r23
    5b40:	44 0f       	add	r20, r20
    5b42:	55 1f       	adc	r21, r21
    5b44:	66 1f       	adc	r22, r22
    5b46:	77 1f       	adc	r23, r23
    5b48:	44 0f       	add	r20, r20
    5b4a:	55 1f       	adc	r21, r21
    5b4c:	66 1f       	adc	r22, r22
    5b4e:	77 1f       	adc	r23, r23
    5b50:	44 0f       	add	r20, r20
    5b52:	55 1f       	adc	r21, r21
    5b54:	66 1f       	adc	r22, r22
    5b56:	77 1f       	adc	r23, r23
    5b58:	84 2b       	or	r24, r20
    5b5a:	95 2b       	or	r25, r21
    5b5c:	a6 2b       	or	r26, r22
    5b5e:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Sekunden >> 1);
    5b60:	42 89       	ldd	r20, Z+18	; 0x12
    5b62:	50 e0       	ldi	r21, 0x00	; 0
    5b64:	60 e0       	ldi	r22, 0x00	; 0
    5b66:	70 e0       	ldi	r23, 0x00	; 0
    5b68:	76 95       	lsr	r23
    5b6a:	67 95       	ror	r22
    5b6c:	57 95       	ror	r21
    5b6e:	47 95       	ror	r20
    5b70:	48 2b       	or	r20, r24
    5b72:	59 2b       	or	r21, r25
    5b74:	6a 2b       	or	r22, r26
    5b76:	7b 2b       	or	r23, r27
FIL logger;

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
    5b78:	87 89       	ldd	r24, Z+23	; 0x17
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	44 96       	adiw	r24, 0x14	; 20
    5b7e:	09 2e       	mov	r0, r25
    5b80:	00 0c       	add	r0, r0
    5b82:	aa 0b       	sbc	r26, r26
    5b84:	bb 0b       	sbc	r27, r27
    5b86:	07 2e       	mov	r0, r23
    5b88:	79 e1       	ldi	r23, 0x19	; 25
    5b8a:	88 0f       	add	r24, r24
    5b8c:	99 1f       	adc	r25, r25
    5b8e:	aa 1f       	adc	r26, r26
    5b90:	bb 1f       	adc	r27, r27
    5b92:	7a 95       	dec	r23
    5b94:	d1 f7       	brne	.-12     	; 0x5b8a <get_fattime+0xaa>
    5b96:	70 2d       	mov	r23, r0
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
    5b98:	8a 01       	movw	r16, r20
    5b9a:	9b 01       	movw	r18, r22
    5b9c:	08 2b       	or	r16, r24
    5b9e:	19 2b       	or	r17, r25
    5ba0:	2a 2b       	or	r18, r26
    5ba2:	3b 2b       	or	r19, r27
    5ba4:	c9 01       	movw	r24, r18
    5ba6:	b8 01       	movw	r22, r16
}
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	08 95       	ret

00005bae <_Z15initialisierungv>:
		maininterupthandler(Folien[position]);
		gpshandler();
    }
}

void initialisierung(){	
    5bae:	ff 92       	push	r15
    5bb0:	0f 93       	push	r16
    5bb2:	1f 93       	push	r17
    5bb4:	cf 93       	push	r28
    5bb6:	df 93       	push	r29
    5bb8:	cd b7       	in	r28, 0x3d	; 61
    5bba:	de b7       	in	r29, 0x3e	; 62
    5bbc:	a9 97       	sbiw	r28, 0x29	; 41
    5bbe:	0f b6       	in	r0, 0x3f	; 63
    5bc0:	f8 94       	cli
    5bc2:	de bf       	out	0x3e, r29	; 62
    5bc4:	0f be       	out	0x3f, r0	; 63
    5bc6:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    5bc8:	10 92 ec 08 	sts	0x08EC, r1
	statusreg=0;
    5bcc:	10 92 eb 08 	sts	0x08EB, r1
	position=0;
    5bd0:	10 92 ea 08 	sts	0x08EA, r1
	FPS=0;
    5bd4:	10 92 e9 08 	sts	0x08E9, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    5bd8:	10 92 85 00 	sts	0x0085, r1
    5bdc:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    5be0:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    5be4:	85 e0       	ldi	r24, 0x05	; 5
    5be6:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    5bea:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    5bec:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    5bee:	80 e4       	ldi	r24, 0x40	; 64
    5bf0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    5bf4:	ea e7       	ldi	r30, 0x7A	; 122
    5bf6:	f0 e0       	ldi	r31, 0x00	; 0
    5bf8:	83 e0       	ldi	r24, 0x03	; 3
    5bfa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    5bfc:	80 81       	ld	r24, Z
    5bfe:	80 68       	ori	r24, 0x80	; 128
    5c00:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    5c02:	80 81       	ld	r24, Z
    5c04:	80 64       	ori	r24, 0x40	; 64
    5c06:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    5c08:	80 81       	ld	r24, Z
    5c0a:	18 2f       	mov	r17, r24
    5c0c:	10 74       	andi	r17, 0x40	; 64
    5c0e:	86 fd       	sbrc	r24, 6
    5c10:	fb cf       	rjmp	.-10     	; 0x5c08 <_Z15initialisierungv+0x5a>
	(void) ADCW;
    5c12:	80 91 78 00 	lds	r24, 0x0078
    5c16:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    5c1a:	89 b1       	in	r24, 0x09	; 9
    5c1c:	89 7f       	andi	r24, 0xF9	; 249
    5c1e:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    5c20:	8a b1       	in	r24, 0x0a	; 10
    5c22:	89 7f       	andi	r24, 0xF9	; 249
    5c24:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    5c26:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    5c2a:	83 e3       	ldi	r24, 0x33	; 51
    5c2c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    5c30:	86 e0       	ldi	r24, 0x06	; 6
    5c32:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    5c36:	80 e8       	ldi	r24, 0x80	; 128
    5c38:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    5c3c:	10 92 9f 08 	sts	0x089F, r1
	gpsstatus = (1<<fix);
    5c40:	80 93 e8 08 	sts	0x08E8, r24
	lat = 0;
    5c44:	10 92 9b 08 	sts	0x089B, r1
    5c48:	10 92 9c 08 	sts	0x089C, r1
    5c4c:	10 92 9d 08 	sts	0x089D, r1
    5c50:	10 92 9e 08 	sts	0x089E, r1
	lon = 0;
    5c54:	10 92 97 08 	sts	0x0897, r1
    5c58:	10 92 98 08 	sts	0x0898, r1
    5c5c:	10 92 99 08 	sts	0x0899, r1
    5c60:	10 92 9a 08 	sts	0x089A, r1
	gpsspeed = 0;
    5c64:	10 92 93 08 	sts	0x0893, r1
    5c68:	10 92 94 08 	sts	0x0894, r1
    5c6c:	10 92 95 08 	sts	0x0895, r1
    5c70:	10 92 96 08 	sts	0x0896, r1
	gpsstunde = 0;
    5c74:	10 92 92 08 	sts	0x0892, r1
	gpsminute = 0;
    5c78:	10 92 91 08 	sts	0x0891, r1
	gpssekunde = 0;
    5c7c:	10 92 90 08 	sts	0x0890, r1
	gpsTag = 0;
    5c80:	10 92 8f 08 	sts	0x088F, r1
	gpsMonat = 0;
    5c84:	10 92 8e 08 	sts	0x088E, r1
	gpsJahr = 0;
    5c88:	10 92 8d 08 	sts	0x088D, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    5c8c:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    5c8e:	8b e1       	ldi	r24, 0x1B	; 27
    5c90:	9a e0       	ldi	r25, 0x0A	; 10
    5c92:	99 8f       	std	Y+25, r25	; 0x19
    5c94:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    5c96:	8c e1       	ldi	r24, 0x1C	; 28
    5c98:	9e e0       	ldi	r25, 0x0E	; 14
    5c9a:	9b 8f       	std	Y+27, r25	; 0x1b
    5c9c:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    5c9e:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    5ca0:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    5ca6:	84 e1       	ldi	r24, 0x14	; 20
    5ca8:	94 e0       	ldi	r25, 0x04	; 4
    5caa:	9a 83       	std	Y+2, r25	; 0x02
    5cac:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    5cae:	8b e1       	ldi	r24, 0x1B	; 27
    5cb0:	9a e0       	ldi	r25, 0x0A	; 10
    5cb2:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    5cb6:	8f e0       	ldi	r24, 0x0F	; 15
    5cb8:	e6 e9       	ldi	r30, 0x96	; 150
    5cba:	f1 e0       	ldi	r31, 0x01	; 1
    5cbc:	de 01       	movw	r26, r28
    5cbe:	13 96       	adiw	r26, 0x03	; 3
    5cc0:	01 90       	ld	r0, Z+
    5cc2:	0d 92       	st	X+, r0
    5cc4:	8a 95       	dec	r24
    5cc6:	e1 f7       	brne	.-8      	; 0x5cc0 <_Z15initialisierungv+0x112>
    5cc8:	8e e0       	ldi	r24, 0x0E	; 14
    5cca:	8f 8b       	std	Y+23, r24	; 0x17
    5ccc:	f1 2e       	mov	r15, r17
    5cce:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    5cd0:	e3 e0       	ldi	r30, 0x03	; 3
    5cd2:	f0 e0       	ldi	r31, 0x00	; 0
    5cd4:	ec 0f       	add	r30, r28
    5cd6:	fd 1f       	adc	r31, r29
    5cd8:	e0 0f       	add	r30, r16
    5cda:	f1 1d       	adc	r31, r1
    5cdc:	20 e0       	ldi	r18, 0x00	; 0
    5cde:	4f 2d       	mov	r20, r15
    5ce0:	60 81       	ld	r22, Z
    5ce2:	88 8d       	ldd	r24, Y+24	; 0x18
    5ce4:	99 8d       	ldd	r25, Y+25	; 0x19
    5ce6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    5cea:	0f 5f       	subi	r16, 0xFF	; 255
    5cec:	26 e0       	ldi	r18, 0x06	; 6
    5cee:	f2 0e       	add	r15, r18
    5cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    5cf2:	08 17       	cp	r16, r24
    5cf4:	68 f3       	brcs	.-38     	; 0x5cd0 <_Z15initialisierungv+0x122>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    5cf6:	8f e0       	ldi	r24, 0x0F	; 15
    5cf8:	e5 ea       	ldi	r30, 0xA5	; 165
    5cfa:	f1 e0       	ldi	r31, 0x01	; 1
    5cfc:	de 01       	movw	r26, r28
    5cfe:	13 96       	adiw	r26, 0x03	; 3
    5d00:	01 90       	ld	r0, Z+
    5d02:	0d 92       	st	X+, r0
    5d04:	8a 95       	dec	r24
    5d06:	e1 f7       	brne	.-8      	; 0x5d00 <_Z15initialisierungv+0x152>
    5d08:	8e e0       	ldi	r24, 0x0E	; 14
    5d0a:	8f 8b       	std	Y+23, r24	; 0x17
    5d0c:	f1 2e       	mov	r15, r17
    5d0e:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    5d10:	e3 e0       	ldi	r30, 0x03	; 3
    5d12:	f0 e0       	ldi	r31, 0x00	; 0
    5d14:	ec 0f       	add	r30, r28
    5d16:	fd 1f       	adc	r31, r29
    5d18:	e0 0f       	add	r30, r16
    5d1a:	f1 1d       	adc	r31, r1
    5d1c:	28 e0       	ldi	r18, 0x08	; 8
    5d1e:	4f 2d       	mov	r20, r15
    5d20:	60 81       	ld	r22, Z
    5d22:	88 8d       	ldd	r24, Y+24	; 0x18
    5d24:	99 8d       	ldd	r25, Y+25	; 0x19
    5d26:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    5d2a:	0f 5f       	subi	r16, 0xFF	; 255
    5d2c:	36 e0       	ldi	r19, 0x06	; 6
    5d2e:	f3 0e       	add	r15, r19
    5d30:	8f 89       	ldd	r24, Y+23	; 0x17
    5d32:	08 17       	cp	r16, r24
    5d34:	68 f3       	brcs	.-38     	; 0x5d10 <_Z15initialisierungv+0x162>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    5d36:	80 e4       	ldi	r24, 0x40	; 64
    5d38:	8f 93       	push	r24
    5d3a:	81 e4       	ldi	r24, 0x41	; 65
    5d3c:	8f 93       	push	r24
    5d3e:	8b ee       	ldi	r24, 0xEB	; 235
    5d40:	8f 93       	push	r24
    5d42:	85 e8       	ldi	r24, 0x85	; 133
    5d44:	8f 93       	push	r24
    5d46:	84 eb       	ldi	r24, 0xB4	; 180
    5d48:	91 e0       	ldi	r25, 0x01	; 1
    5d4a:	9f 93       	push	r25
    5d4c:	8f 93       	push	r24
    5d4e:	ce 01       	movw	r24, r28
    5d50:	03 96       	adiw	r24, 0x03	; 3
    5d52:	9f 93       	push	r25
    5d54:	8f 93       	push	r24
    5d56:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    5d5a:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    5d5c:	0f b6       	in	r0, 0x3f	; 63
    5d5e:	f8 94       	cli
    5d60:	de bf       	out	0x3e, r29	; 62
    5d62:	0f be       	out	0x3f, r0	; 63
    5d64:	cd bf       	out	0x3d, r28	; 61
    5d66:	88 23       	and	r24, r24
    5d68:	99 f0       	breq	.+38     	; 0x5d90 <_Z15initialisierungv+0x1e2>
    5d6a:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    5d6c:	e3 e0       	ldi	r30, 0x03	; 3
    5d6e:	f0 e0       	ldi	r31, 0x00	; 0
    5d70:	ec 0f       	add	r30, r28
    5d72:	fd 1f       	adc	r31, r29
    5d74:	e0 0f       	add	r30, r16
    5d76:	f1 1d       	adc	r31, r1
    5d78:	20 e2       	ldi	r18, 0x20	; 32
    5d7a:	41 2f       	mov	r20, r17
    5d7c:	60 81       	ld	r22, Z
    5d7e:	88 8d       	ldd	r24, Y+24	; 0x18
    5d80:	99 8d       	ldd	r25, Y+25	; 0x19
    5d82:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    5d86:	0f 5f       	subi	r16, 0xFF	; 255
    5d88:	1a 5f       	subi	r17, 0xFA	; 250
    5d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    5d8c:	08 17       	cp	r16, r24
    5d8e:	70 f3       	brcs	.-36     	; 0x5d6c <_Z15initialisierungv+0x1be>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5d90:	88 8d       	ldd	r24, Y+24	; 0x18
    5d92:	99 8d       	ldd	r25, Y+25	; 0x19
    5d94:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    5d98:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5d9a:	ff e7       	ldi	r31, 0x7F	; 127
    5d9c:	28 e3       	ldi	r18, 0x38	; 56
    5d9e:	31 e0       	ldi	r19, 0x01	; 1
    5da0:	f1 50       	subi	r31, 0x01	; 1
    5da2:	20 40       	sbci	r18, 0x00	; 0
    5da4:	30 40       	sbci	r19, 0x00	; 0
    5da6:	e1 f7       	brne	.-8      	; 0x5da0 <_Z15initialisierungv+0x1f2>
    5da8:	00 c0       	rjmp	.+0      	; 0x5daa <_Z15initialisierungv+0x1fc>
    5daa:	00 00       	nop
    5dac:	9f e7       	ldi	r25, 0x7F	; 127
    5dae:	e8 e3       	ldi	r30, 0x38	; 56
    5db0:	f1 e0       	ldi	r31, 0x01	; 1
    5db2:	91 50       	subi	r25, 0x01	; 1
    5db4:	e0 40       	sbci	r30, 0x00	; 0
    5db6:	f0 40       	sbci	r31, 0x00	; 0
    5db8:	e1 f7       	brne	.-8      	; 0x5db2 <_Z15initialisierungv+0x204>
    5dba:	00 c0       	rjmp	.+0      	; 0x5dbc <_Z15initialisierungv+0x20e>
    5dbc:	00 00       	nop
    5dbe:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    5dc0:	61 f7       	brne	.-40     	; 0x5d9a <_Z15initialisierungv+0x1ec>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    5dc2:	0c e1       	ldi	r16, 0x1C	; 28
    5dc4:	1e e0       	ldi	r17, 0x0E	; 14
    5dc6:	f8 01       	movw	r30, r16
    5dc8:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    5dca:	80 e0       	ldi	r24, 0x00	; 0
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	0e dd       	rcall	.-1508   	; 0x57ec <_Z11EEPROM_Readj>
    5dd0:	f8 01       	movw	r30, r16
    5dd2:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	09 dd       	rcall	.-1518   	; 0x57ec <_Z11EEPROM_Readj>
    5dda:	f8 01       	movw	r30, r16
    5ddc:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    5dde:	82 e0       	ldi	r24, 0x02	; 2
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	04 dd       	rcall	.-1528   	; 0x57ec <_Z11EEPROM_Readj>
    5de4:	f8 01       	movw	r30, r16
    5de6:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    5de8:	83 e0       	ldi	r24, 0x03	; 3
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	ff dc       	rcall	.-1538   	; 0x57ec <_Z11EEPROM_Readj>
    5dee:	f8 01       	movw	r30, r16
    5df0:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    5df2:	84 e0       	ldi	r24, 0x04	; 4
    5df4:	90 e0       	ldi	r25, 0x00	; 0
    5df6:	fa dc       	rcall	.-1548   	; 0x57ec <_Z11EEPROM_Readj>
    5df8:	f8 01       	movw	r30, r16
    5dfa:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    5dfc:	c8 01       	movw	r24, r16
    5dfe:	0e 94 0d 3e 	call	0x7c1a	; 0x7c1a <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    5e02:	c8 01       	movw	r24, r16
    5e04:	0e 94 ee 3e 	call	0x7ddc	; 0x7ddc <_ZN3RTC8RTCstartEv>
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    5e08:	80 b7       	in	r24, 0x30	; 48
    5e0a:	80 68       	ori	r24, 0x80	; 128
    5e0c:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    5e0e:	e1 ec       	ldi	r30, 0xC1	; 193
    5e10:	f0 e0       	ldi	r31, 0x00	; 0
    5e12:	80 81       	ld	r24, Z
    5e14:	80 61       	ori	r24, 0x10	; 16
    5e16:	80 83       	st	Z, r24
	
	//SD Karten timer init
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mode
    5e18:	82 e0       	ldi	r24, 0x02	; 2
    5e1a:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    5e1c:	86 e2       	ldi	r24, 0x26	; 38
    5e1e:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    5e20:	ee e6       	ldi	r30, 0x6E	; 110
    5e22:	f0 e0       	ldi	r31, 0x00	; 0
    5e24:	80 81       	ld	r24, Z
    5e26:	82 60       	ori	r24, 0x02	; 2
    5e28:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    5e2a:	85 b5       	in	r24, 0x25	; 37
    5e2c:	85 60       	ori	r24, 0x05	; 5
    5e2e:	85 bd       	out	0x25, r24	; 37
	sei();
    5e30:	78 94       	sei
}
    5e32:	a9 96       	adiw	r28, 0x29	; 41
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
    5e3e:	df 91       	pop	r29
    5e40:	cf 91       	pop	r28
    5e42:	1f 91       	pop	r17
    5e44:	0f 91       	pop	r16
    5e46:	ff 90       	pop	r15
    5e48:	08 95       	ret

00005e4a <_Z15tastaturhandlerP7monitorh>:

void tastaturhandler(monitor *mon, uint8_t taste){
    5e4a:	cf 93       	push	r28
    5e4c:	df 93       	push	r29
    5e4e:	1f 92       	push	r1
    5e50:	cd b7       	in	r28, 0x3d	; 61
    5e52:	de b7       	in	r29, 0x3e	; 62
    5e54:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    5e56:	60 32       	cpi	r22, 0x20	; 32
    5e58:	09 f4       	brne	.+2      	; 0x5e5c <_Z15tastaturhandlerP7monitorh+0x12>
    5e5a:	8e c0       	rjmp	.+284    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
    5e5c:	dc 01       	movw	r26, r24
	{
		anzeige |= (1<<refreshdisplay);
    5e5e:	80 91 ec 08 	lds	r24, 0x08EC
    5e62:	81 60       	ori	r24, 0x01	; 1
    5e64:	80 93 ec 08 	sts	0x08EC, r24
		switch (taste)							//Tastendruck ueberpruefen
    5e68:	46 2f       	mov	r20, r22
    5e6a:	50 e0       	ldi	r21, 0x00	; 0
    5e6c:	fa 01       	movw	r30, r20
    5e6e:	f0 97       	sbiw	r30, 0x30	; 48
    5e70:	e6 34       	cpi	r30, 0x46	; 70
    5e72:	f1 05       	cpc	r31, r1
    5e74:	08 f0       	brcs	.+2      	; 0x5e78 <_Z15tastaturhandlerP7monitorh+0x2e>
    5e76:	75 c0       	rjmp	.+234    	; 0x5f62 <_Z15tastaturhandlerP7monitorh+0x118>
    5e78:	e5 55       	subi	r30, 0x55	; 85
    5e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e7c:	0c 94 b2 46 	jmp	0x8d64	; 0x8d64 <__tablejump2__>
		{
			case 'm':
			position = numberofpages;
    5e80:	85 e0       	ldi	r24, 0x05	; 5
    5e82:	80 93 ea 08 	sts	0x08EA, r24
			break;
    5e86:	78 c0       	rjmp	.+240    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			case 'l':
			if (mon->posx==0)
    5e88:	96 96       	adiw	r26, 0x26	; 38
    5e8a:	8c 91       	ld	r24, X
    5e8c:	96 97       	sbiw	r26, 0x26	; 38
    5e8e:	81 11       	cpse	r24, r1
    5e90:	04 c0       	rjmp	.+8      	; 0x5e9a <_Z15tastaturhandlerP7monitorh+0x50>
			{
				position = numberofpages;
    5e92:	85 e0       	ldi	r24, 0x05	; 5
    5e94:	80 93 ea 08 	sts	0x08EA, r24
    5e98:	6f c0       	rjmp	.+222    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posx--;
    5e9a:	81 50       	subi	r24, 0x01	; 1
    5e9c:	96 96       	adiw	r26, 0x26	; 38
    5e9e:	8c 93       	st	X, r24
    5ea0:	6b c0       	rjmp	.+214    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'r':
			if (position==numberofpages)
    5ea2:	80 91 ea 08 	lds	r24, 0x08EA
    5ea6:	85 30       	cpi	r24, 0x05	; 5
    5ea8:	29 f4       	brne	.+10     	; 0x5eb4 <_Z15tastaturhandlerP7monitorh+0x6a>
			{
				position=mon->posy;
    5eaa:	95 96       	adiw	r26, 0x25	; 37
    5eac:	8c 91       	ld	r24, X
    5eae:	80 93 ea 08 	sts	0x08EA, r24
    5eb2:	62 c0       	rjmp	.+196    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    5eb4:	96 96       	adiw	r26, 0x26	; 38
    5eb6:	8c 91       	ld	r24, X
    5eb8:	96 97       	sbiw	r26, 0x26	; 38
    5eba:	98 96       	adiw	r26, 0x28	; 40
    5ebc:	9c 91       	ld	r25, X
    5ebe:	98 97       	sbiw	r26, 0x28	; 40
    5ec0:	89 17       	cp	r24, r25
    5ec2:	08 f0       	brcs	.+2      	; 0x5ec6 <_Z15tastaturhandlerP7monitorh+0x7c>
    5ec4:	59 c0       	rjmp	.+178    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    5ec6:	8f 5f       	subi	r24, 0xFF	; 255
    5ec8:	96 96       	adiw	r26, 0x26	; 38
    5eca:	8c 93       	st	X, r24
    5ecc:	55 c0       	rjmp	.+170    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'o':
			if (position==numberofpages)
    5ece:	80 91 ea 08 	lds	r24, 0x08EA
    5ed2:	85 30       	cpi	r24, 0x05	; 5
    5ed4:	29 f4       	brne	.+10     	; 0x5ee0 <_Z15tastaturhandlerP7monitorh+0x96>
			{
				position=mon->posy;
    5ed6:	95 96       	adiw	r26, 0x25	; 37
    5ed8:	8c 91       	ld	r24, X
    5eda:	80 93 ea 08 	sts	0x08EA, r24
    5ede:	4c c0       	rjmp	.+152    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    5ee0:	96 96       	adiw	r26, 0x26	; 38
    5ee2:	8c 91       	ld	r24, X
    5ee4:	96 97       	sbiw	r26, 0x26	; 38
    5ee6:	98 96       	adiw	r26, 0x28	; 40
    5ee8:	9c 91       	ld	r25, X
    5eea:	98 97       	sbiw	r26, 0x28	; 40
    5eec:	89 17       	cp	r24, r25
    5eee:	08 f0       	brcs	.+2      	; 0x5ef2 <_Z15tastaturhandlerP7monitorh+0xa8>
    5ef0:	43 c0       	rjmp	.+134    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    5ef2:	8f 5f       	subi	r24, 0xFF	; 255
    5ef4:	96 96       	adiw	r26, 0x26	; 38
    5ef6:	8c 93       	st	X, r24
    5ef8:	3f c0       	rjmp	.+126    	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'd':
			if (!(mon->posy >= mon->maxentries-1))
    5efa:	95 96       	adiw	r26, 0x25	; 37
    5efc:	2c 91       	ld	r18, X
    5efe:	95 97       	sbiw	r26, 0x25	; 37
    5f00:	42 2f       	mov	r20, r18
    5f02:	50 e0       	ldi	r21, 0x00	; 0
    5f04:	97 96       	adiw	r26, 0x27	; 39
    5f06:	8c 91       	ld	r24, X
    5f08:	97 97       	sbiw	r26, 0x27	; 39
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	01 97       	sbiw	r24, 0x01	; 1
    5f0e:	48 17       	cp	r20, r24
    5f10:	59 07       	cpc	r21, r25
    5f12:	24 f4       	brge	.+8      	; 0x5f1c <_Z15tastaturhandlerP7monitorh+0xd2>
			{
				mon->posy++;
    5f14:	2f 5f       	subi	r18, 0xFF	; 255
    5f16:	95 96       	adiw	r26, 0x25	; 37
    5f18:	2c 93       	st	X, r18
    5f1a:	2e c0       	rjmp	.+92     	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy = 0;
    5f1c:	95 96       	adiw	r26, 0x25	; 37
    5f1e:	1c 92       	st	X, r1
    5f20:	2b c0       	rjmp	.+86     	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'u':
			if (!(mon->posy == 0))
    5f22:	95 96       	adiw	r26, 0x25	; 37
    5f24:	8c 91       	ld	r24, X
    5f26:	95 97       	sbiw	r26, 0x25	; 37
    5f28:	88 23       	and	r24, r24
    5f2a:	21 f0       	breq	.+8      	; 0x5f34 <_Z15tastaturhandlerP7monitorh+0xea>
			{
				mon->posy--;
    5f2c:	81 50       	subi	r24, 0x01	; 1
    5f2e:	95 96       	adiw	r26, 0x25	; 37
    5f30:	8c 93       	st	X, r24
    5f32:	22 c0       	rjmp	.+68     	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy=mon->maxentries-1;
    5f34:	97 96       	adiw	r26, 0x27	; 39
    5f36:	8c 91       	ld	r24, X
    5f38:	97 97       	sbiw	r26, 0x27	; 39
    5f3a:	81 50       	subi	r24, 0x01	; 1
    5f3c:	95 96       	adiw	r26, 0x25	; 37
    5f3e:	8c 93       	st	X, r24
    5f40:	1b c0       	rjmp	.+54     	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case '0':
			//Licht an/aus
			if (LED.ison())
    5f42:	81 ef       	ldi	r24, 0xF1	; 241
    5f44:	98 e0       	ldi	r25, 0x08	; 8
    5f46:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <_ZN6Output4isonEv>
    5f4a:	88 23       	and	r24, r24
    5f4c:	29 f0       	breq	.+10     	; 0x5f58 <_Z15tastaturhandlerP7monitorh+0x10e>
			{
				LED.off();
    5f4e:	81 ef       	ldi	r24, 0xF1	; 241
    5f50:	98 e0       	ldi	r25, 0x08	; 8
    5f52:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <_ZN6Output3offEv>
    5f56:	10 c0       	rjmp	.+32     	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				LED.on();
    5f58:	81 ef       	ldi	r24, 0xF1	; 241
    5f5a:	98 e0       	ldi	r25, 0x08	; 8
    5f5c:	0e 94 09 3d 	call	0x7a12	; 0x7a12 <_ZN6Output2onEv>
    5f60:	0b c0       	rjmp	.+22     	; 0x5f78 <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			default:
			//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
			mon->tastendruck(&taste);
    5f62:	ed 91       	ld	r30, X+
    5f64:	fc 91       	ld	r31, X
    5f66:	11 97       	sbiw	r26, 0x01	; 1
    5f68:	01 90       	ld	r0, Z+
    5f6a:	f0 81       	ld	r31, Z
    5f6c:	e0 2d       	mov	r30, r0
    5f6e:	be 01       	movw	r22, r28
    5f70:	6f 5f       	subi	r22, 0xFF	; 255
    5f72:	7f 4f       	sbci	r23, 0xFF	; 255
    5f74:	cd 01       	movw	r24, r26
    5f76:	09 95       	icall
			break;
		}
	}
}
    5f78:	0f 90       	pop	r0
    5f7a:	df 91       	pop	r29
    5f7c:	cf 91       	pop	r28
    5f7e:	08 95       	ret

00005f80 <_Z19maininterupthandlerP7monitor>:

void maininterupthandler(monitor *mon){
    5f80:	af 92       	push	r10
    5f82:	bf 92       	push	r11
    5f84:	cf 92       	push	r12
    5f86:	df 92       	push	r13
    5f88:	ef 92       	push	r14
    5f8a:	ff 92       	push	r15
    5f8c:	0f 93       	push	r16
    5f8e:	1f 93       	push	r17
    5f90:	cf 93       	push	r28
    5f92:	df 93       	push	r29
    5f94:	cd b7       	in	r28, 0x3d	; 61
    5f96:	de b7       	in	r29, 0x3e	; 62
    5f98:	2c 97       	sbiw	r28, 0x0c	; 12
    5f9a:	0f b6       	in	r0, 0x3f	; 63
    5f9c:	f8 94       	cli
    5f9e:	de bf       	out	0x3e, r29	; 62
    5fa0:	0f be       	out	0x3f, r0	; 63
    5fa2:	cd bf       	out	0x3d, r28	; 61
    5fa4:	8c 01       	movw	r16, r24
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    5fa6:	90 91 ea 08 	lds	r25, 0x08EA
    5faa:	91 30       	cpi	r25, 0x01	; 1
    5fac:	09 f5       	brne	.+66     	; 0x5ff0 <_Z19maininterupthandlerP7monitor+0x70>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    5fae:	67 e0       	ldi	r22, 0x07	; 7
    5fb0:	80 e2       	ldi	r24, 0x20	; 32
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	07 dd       	rcall	.-1522   	; 0x59c4 <_Z13reed_debouncePVhh>
    5fb6:	88 23       	and	r24, r24
    5fb8:	31 f0       	breq	.+12     	; 0x5fc6 <_Z19maininterupthandlerP7monitor+0x46>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    5fba:	63 e3       	ldi	r22, 0x33	; 51
    5fbc:	71 e1       	ldi	r23, 0x11	; 17
    5fbe:	86 e3       	ldi	r24, 0x36	; 54
    5fc0:	9f e3       	ldi	r25, 0x3F	; 63
    5fc2:	25 dd       	rcall	.-1462   	; 0x5a0e <_Z15geschwindigkeitf>
    5fc4:	aa c0       	rjmp	.+340    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    5fc6:	80 91 84 00 	lds	r24, 0x0084
    5fca:	90 91 85 00 	lds	r25, 0x0085
    5fce:	8e 38       	cpi	r24, 0x8E	; 142
    5fd0:	9b 45       	sbci	r25, 0x5B	; 91
    5fd2:	08 f4       	brcc	.+2      	; 0x5fd6 <_Z19maininterupthandlerP7monitor+0x56>
    5fd4:	a2 c0       	rjmp	.+324    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
		{
			TCNT1=0;
    5fd6:	10 92 85 00 	sts	0x0085, r1
    5fda:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    5fde:	10 92 89 08 	sts	0x0889, r1
    5fe2:	10 92 8a 08 	sts	0x088A, r1
    5fe6:	10 92 8b 08 	sts	0x088B, r1
    5fea:	10 92 8c 08 	sts	0x088C, r1
    5fee:	95 c0       	rjmp	.+298    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
		}
	}
	//SD Karte mounten bzw. aufnahme starten
	else if (position==3)
    5ff0:	93 30       	cpi	r25, 0x03	; 3
    5ff2:	09 f0       	breq	.+2      	; 0x5ff6 <_Z19maininterupthandlerP7monitor+0x76>
    5ff4:	92 c0       	rjmp	.+292    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
	{
		if (mon->posy==3 && mon->posx==1)
    5ff6:	d8 01       	movw	r26, r16
    5ff8:	95 96       	adiw	r26, 0x25	; 37
    5ffa:	8c 91       	ld	r24, X
    5ffc:	95 97       	sbiw	r26, 0x25	; 37
    5ffe:	83 30       	cpi	r24, 0x03	; 3
    6000:	81 f5       	brne	.+96     	; 0x6062 <_Z19maininterupthandlerP7monitor+0xe2>
    6002:	96 96       	adiw	r26, 0x26	; 38
    6004:	8c 91       	ld	r24, X
    6006:	81 30       	cpi	r24, 0x01	; 1
    6008:	09 f0       	breq	.+2      	; 0x600c <_Z19maininterupthandlerP7monitor+0x8c>
    600a:	87 c0       	rjmp	.+270    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
		{
			if (!(statusreg&(1<<mounttingstat)))
    600c:	80 91 eb 08 	lds	r24, 0x08EB
    6010:	81 fd       	sbrc	r24, 1
    6012:	14 c0       	rjmp	.+40     	; 0x603c <_Z19maininterupthandlerP7monitor+0xbc>
			{
				//mounting sd Karte
				if (disk_initialize(0) == 0)
    6014:	80 e0       	ldi	r24, 0x00	; 0
    6016:	0e 94 0a 08 	call	0x1014	; 0x1014 <disk_initialize>
    601a:	81 11       	cpse	r24, r1
    601c:	1d c0       	rjmp	.+58     	; 0x6058 <_Z19maininterupthandlerP7monitor+0xd8>
				{
					if (f_mount(&FATFS_Obj,"",0) == 0)
    601e:	40 e0       	ldi	r20, 0x00	; 0
    6020:	6a ef       	ldi	r22, 0xFA	; 250
    6022:	72 e0       	ldi	r23, 0x02	; 2
    6024:	8f e4       	ldi	r24, 0x4F	; 79
    6026:	96 e0       	ldi	r25, 0x06	; 6
    6028:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <f_mount>
    602c:	81 11       	cpse	r24, r1
    602e:	14 c0       	rjmp	.+40     	; 0x6058 <_Z19maininterupthandlerP7monitor+0xd8>
					{
						statusreg |= (1<<mounttingstat);
    6030:	80 91 eb 08 	lds	r24, 0x08EB
    6034:	82 60       	ori	r24, 0x02	; 2
    6036:	80 93 eb 08 	sts	0x08EB, r24
    603a:	0e c0       	rjmp	.+28     	; 0x6058 <_Z19maininterupthandlerP7monitor+0xd8>
					}
				}
			}
			else if (!(statusreg&(1<<loggingstat)))
    603c:	82 fd       	sbrc	r24, 2
    603e:	0c c0       	rjmp	.+24     	; 0x6058 <_Z19maininterupthandlerP7monitor+0xd8>
			{
				f_mount(0,"",0);
    6040:	40 e0       	ldi	r20, 0x00	; 0
    6042:	6a ef       	ldi	r22, 0xFA	; 250
    6044:	72 e0       	ldi	r23, 0x02	; 2
    6046:	80 e0       	ldi	r24, 0x00	; 0
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <f_mount>
				statusreg &= ~(1<<mounttingstat);
    604e:	80 91 eb 08 	lds	r24, 0x08EB
    6052:	8d 7f       	andi	r24, 0xFD	; 253
    6054:	80 93 eb 08 	sts	0x08EB, r24
			}
			mon->posx--;
    6058:	f8 01       	movw	r30, r16
    605a:	86 a1       	ldd	r24, Z+38	; 0x26
    605c:	81 50       	subi	r24, 0x01	; 1
    605e:	86 a3       	std	Z+38, r24	; 0x26
    6060:	5c c0       	rjmp	.+184    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
		}
		else if (mon->posy==4 && mon->posx==1)
    6062:	84 30       	cpi	r24, 0x04	; 4
    6064:	09 f0       	breq	.+2      	; 0x6068 <_Z19maininterupthandlerP7monitor+0xe8>
    6066:	59 c0       	rjmp	.+178    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
    6068:	d8 01       	movw	r26, r16
    606a:	96 96       	adiw	r26, 0x26	; 38
    606c:	8c 91       	ld	r24, X
    606e:	81 30       	cpi	r24, 0x01	; 1
    6070:	09 f0       	breq	.+2      	; 0x6074 <_Z19maininterupthandlerP7monitor+0xf4>
    6072:	53 c0       	rjmp	.+166    	; 0x611a <_Z19maininterupthandlerP7monitor+0x19a>
		{
			if (!(statusreg&(1<<loggingstat)) && (statusreg&(1<<mounttingstat)) )
    6074:	80 91 eb 08 	lds	r24, 0x08EB
    6078:	82 fd       	sbrc	r24, 2
    607a:	3b c0       	rjmp	.+118    	; 0x60f2 <_Z19maininterupthandlerP7monitor+0x172>
    607c:	81 ff       	sbrs	r24, 1
    607e:	39 c0       	rjmp	.+114    	; 0x60f2 <_Z19maininterupthandlerP7monitor+0x172>
			{
				if (disk_status(0) == 0)
    6080:	80 e0       	ldi	r24, 0x00	; 0
    6082:	0e 94 cb 08 	call	0x1196	; 0x1196 <disk_status>
    6086:	81 11       	cpse	r24, r1
    6088:	2e c0       	rjmp	.+92     	; 0x60e6 <_Z19maininterupthandlerP7monitor+0x166>
				{
					char name[12];
					sprintf(name,"%02u%02u%02u%02u.txt",rtc.Monat,rtc.Tag,rtc.Stunden,rtc.Minuten);
    608a:	ec e1       	ldi	r30, 0x1C	; 28
    608c:	fe e0       	ldi	r31, 0x0E	; 14
    608e:	81 89       	ldd	r24, Z+17	; 0x11
    6090:	1f 92       	push	r1
    6092:	8f 93       	push	r24
    6094:	80 89       	ldd	r24, Z+16	; 0x10
    6096:	1f 92       	push	r1
    6098:	8f 93       	push	r24
    609a:	84 89       	ldd	r24, Z+20	; 0x14
    609c:	1f 92       	push	r1
    609e:	8f 93       	push	r24
    60a0:	86 89       	ldd	r24, Z+22	; 0x16
    60a2:	1f 92       	push	r1
    60a4:	8f 93       	push	r24
    60a6:	86 e6       	ldi	r24, 0x66	; 102
    60a8:	92 e0       	ldi	r25, 0x02	; 2
    60aa:	9f 93       	push	r25
    60ac:	8f 93       	push	r24
    60ae:	fe 01       	movw	r30, r28
    60b0:	31 96       	adiw	r30, 0x01	; 1
    60b2:	7f 01       	movw	r14, r30
    60b4:	ff 93       	push	r31
    60b6:	ef 93       	push	r30
    60b8:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
					f_open(&logger, name, FA_OPEN_ALWAYS | FA_WRITE);
    60bc:	42 e1       	ldi	r20, 0x12	; 18
    60be:	b7 01       	movw	r22, r14
    60c0:	8f e2       	ldi	r24, 0x2F	; 47
    60c2:	94 e0       	ldi	r25, 0x04	; 4
    60c4:	0e 94 ac 1a 	call	0x3558	; 0x3558 <f_open>
					f_printf(&logger,"#Zeit [s]\tlongitude [1e6]\tLatitude [1e5]\tGPSSpeed [1e2 km/h] \tTacho [1e2 km/h] \tTemperatur [10 C] \tDruck [Pa] \tHoeheSee [10 m]\n");
    60c8:	8b e7       	ldi	r24, 0x7B	; 123
    60ca:	92 e0       	ldi	r25, 0x02	; 2
    60cc:	9f 93       	push	r25
    60ce:	8f 93       	push	r24
    60d0:	8f e2       	ldi	r24, 0x2F	; 47
    60d2:	94 e0       	ldi	r25, 0x04	; 4
    60d4:	9f 93       	push	r25
    60d6:	8f 93       	push	r24
    60d8:	0e 94 11 21 	call	0x4222	; 0x4222 <f_printf>
    60dc:	0f b6       	in	r0, 0x3f	; 63
    60de:	f8 94       	cli
    60e0:	de bf       	out	0x3e, r29	; 62
    60e2:	0f be       	out	0x3f, r0	; 63
    60e4:	cd bf       	out	0x3d, r28	; 61
				}
				
				statusreg |= (1<<loggingstat);
    60e6:	80 91 eb 08 	lds	r24, 0x08EB
    60ea:	84 60       	ori	r24, 0x04	; 4
    60ec:	80 93 eb 08 	sts	0x08EB, r24
    60f0:	0d c0       	rjmp	.+26     	; 0x610c <_Z19maininterupthandlerP7monitor+0x18c>
			}
			else{
				f_sync(&logger);
    60f2:	8f e2       	ldi	r24, 0x2F	; 47
    60f4:	94 e0       	ldi	r25, 0x04	; 4
    60f6:	0e 94 34 20 	call	0x4068	; 0x4068 <f_sync>
				f_close(&logger);
    60fa:	8f e2       	ldi	r24, 0x2F	; 47
    60fc:	94 e0       	ldi	r25, 0x04	; 4
    60fe:	0e 94 01 21 	call	0x4202	; 0x4202 <f_close>
				statusreg &= ~(1<<loggingstat);
    6102:	80 91 eb 08 	lds	r24, 0x08EB
    6106:	8b 7f       	andi	r24, 0xFB	; 251
    6108:	80 93 eb 08 	sts	0x08EB, r24
			}
			mon->posx--;
    610c:	d8 01       	movw	r26, r16
    610e:	96 96       	adiw	r26, 0x26	; 38
    6110:	8c 91       	ld	r24, X
    6112:	96 97       	sbiw	r26, 0x26	; 38
    6114:	81 50       	subi	r24, 0x01	; 1
    6116:	96 96       	adiw	r26, 0x26	; 38
    6118:	8c 93       	st	X, r24
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    611a:	80 91 34 0e 	lds	r24, 0x0E34
    611e:	81 ff       	sbrs	r24, 1
    6120:	28 c1       	rjmp	.+592    	; 0x6372 <_Z19maininterupthandlerP7monitor+0x3f2>
	{
		rtc.zeit();
    6122:	8c e1       	ldi	r24, 0x1C	; 28
    6124:	9e e0       	ldi	r25, 0x0E	; 14
    6126:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <_ZN3RTC4zeitEv>
		druck.bmp180_getaltitude();
    612a:	87 ef       	ldi	r24, 0xF7	; 247
    612c:	98 e0       	ldi	r25, 0x08	; 8
    612e:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6BMP18018bmp180_getaltitudeEv>
		if (position==1)
    6132:	80 91 ea 08 	lds	r24, 0x08EA
    6136:	81 30       	cpi	r24, 0x01	; 1
    6138:	09 f0       	breq	.+2      	; 0x613c <_Z19maininterupthandlerP7monitor+0x1bc>
    613a:	57 c0       	rjmp	.+174    	; 0x61ea <_Z19maininterupthandlerP7monitor+0x26a>
		{
			if (geschw>maxgeschw)
    613c:	c0 90 89 08 	lds	r12, 0x0889
    6140:	d0 90 8a 08 	lds	r13, 0x088A
    6144:	e0 90 8b 08 	lds	r14, 0x088B
    6148:	f0 90 8c 08 	lds	r15, 0x088C
    614c:	20 91 81 08 	lds	r18, 0x0881
    6150:	30 91 82 08 	lds	r19, 0x0882
    6154:	40 91 83 08 	lds	r20, 0x0883
    6158:	50 91 84 08 	lds	r21, 0x0884
    615c:	c7 01       	movw	r24, r14
    615e:	b6 01       	movw	r22, r12
    6160:	0e 94 1f 41 	call	0x823e	; 0x823e <__gesf2>
    6164:	18 16       	cp	r1, r24
    6166:	44 f4       	brge	.+16     	; 0x6178 <_Z19maininterupthandlerP7monitor+0x1f8>
			{
				maxgeschw=geschw;
    6168:	c0 92 81 08 	sts	0x0881, r12
    616c:	d0 92 82 08 	sts	0x0882, r13
    6170:	e0 92 83 08 	sts	0x0883, r14
    6174:	f0 92 84 08 	sts	0x0884, r15
			}
			if (geschw >= 1.0)
    6178:	20 e0       	ldi	r18, 0x00	; 0
    617a:	30 e0       	ldi	r19, 0x00	; 0
    617c:	40 e8       	ldi	r20, 0x80	; 128
    617e:	5f e3       	ldi	r21, 0x3F	; 63
    6180:	c7 01       	movw	r24, r14
    6182:	b6 01       	movw	r22, r12
    6184:	0e 94 1f 41 	call	0x823e	; 0x823e <__gesf2>
    6188:	88 23       	and	r24, r24
    618a:	9c f0       	brlt	.+38     	; 0x61b2 <_Z19maininterupthandlerP7monitor+0x232>
			{
				Fahrtzeit++;
    618c:	80 91 7d 08 	lds	r24, 0x087D
    6190:	90 91 7e 08 	lds	r25, 0x087E
    6194:	a0 91 7f 08 	lds	r26, 0x087F
    6198:	b0 91 80 08 	lds	r27, 0x0880
    619c:	01 96       	adiw	r24, 0x01	; 1
    619e:	a1 1d       	adc	r26, r1
    61a0:	b1 1d       	adc	r27, r1
    61a2:	80 93 7d 08 	sts	0x087D, r24
    61a6:	90 93 7e 08 	sts	0x087E, r25
    61aa:	a0 93 7f 08 	sts	0x087F, r26
    61ae:	b0 93 80 08 	sts	0x0880, r27
			}
			strecke+=geschw/3.6;
    61b2:	26 e6       	ldi	r18, 0x66	; 102
    61b4:	36 e6       	ldi	r19, 0x66	; 102
    61b6:	46 e6       	ldi	r20, 0x66	; 102
    61b8:	50 e4       	ldi	r21, 0x40	; 64
    61ba:	c7 01       	movw	r24, r14
    61bc:	b6 01       	movw	r22, r12
    61be:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    61c2:	9b 01       	movw	r18, r22
    61c4:	ac 01       	movw	r20, r24
    61c6:	60 91 85 08 	lds	r22, 0x0885
    61ca:	70 91 86 08 	lds	r23, 0x0886
    61ce:	80 91 87 08 	lds	r24, 0x0887
    61d2:	90 91 88 08 	lds	r25, 0x0888
    61d6:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    61da:	60 93 85 08 	sts	0x0885, r22
    61de:	70 93 86 08 	sts	0x0886, r23
    61e2:	80 93 87 08 	sts	0x0887, r24
    61e6:	90 93 88 08 	sts	0x0888, r25
    61ea:	80 91 eb 08 	lds	r24, 0x08EB
    61ee:	86 70       	andi	r24, 0x06	; 6
		}
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    61f0:	86 30       	cpi	r24, 0x06	; 6
    61f2:	09 f0       	breq	.+2      	; 0x61f6 <_Z19maininterupthandlerP7monitor+0x276>
    61f4:	b4 c0       	rjmp	.+360    	; 0x635e <_Z19maininterupthandlerP7monitor+0x3de>
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
    61f6:	0f 2e       	mov	r0, r31
    61f8:	fc e1       	ldi	r31, 0x1C	; 28
    61fa:	cf 2e       	mov	r12, r31
    61fc:	fe e0       	ldi	r31, 0x0E	; 14
    61fe:	df 2e       	mov	r13, r31
    6200:	f0 2d       	mov	r31, r0
    6202:	f6 01       	movw	r30, r12
    6204:	40 89       	ldd	r20, Z+16	; 0x10
    6206:	20 e1       	ldi	r18, 0x10	; 16
    6208:	3e e0       	ldi	r19, 0x0E	; 14
    620a:	42 9f       	mul	r20, r18
    620c:	c0 01       	movw	r24, r0
    620e:	43 9f       	mul	r20, r19
    6210:	90 0d       	add	r25, r0
    6212:	11 24       	eor	r1, r1
			Sekundenges += rtc.Minuten*60;
    6214:	21 89       	ldd	r18, Z+17	; 0x11
    6216:	7c 01       	movw	r14, r24
    6218:	fc e3       	ldi	r31, 0x3C	; 60
    621a:	2f 9f       	mul	r18, r31
    621c:	e0 0c       	add	r14, r0
    621e:	f1 1c       	adc	r15, r1
    6220:	11 24       	eor	r1, r1
			Sekundenges += rtc.Sekunden;
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\t%d\t%u\t%d\n",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100),(int16_t)(druck.temperature*10),(uint16_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    6222:	0f 2e       	mov	r0, r31
    6224:	f7 ef       	ldi	r31, 0xF7	; 247
    6226:	af 2e       	mov	r10, r31
    6228:	f8 e0       	ldi	r31, 0x08	; 8
    622a:	bf 2e       	mov	r11, r31
    622c:	f0 2d       	mov	r31, r0
    622e:	20 e0       	ldi	r18, 0x00	; 0
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	40 e2       	ldi	r20, 0x20	; 32
    6234:	51 e4       	ldi	r21, 0x41	; 65
    6236:	d5 01       	movw	r26, r10
    6238:	1c 96       	adiw	r26, 0x0c	; 12
    623a:	6d 91       	ld	r22, X+
    623c:	7d 91       	ld	r23, X+
    623e:	8d 91       	ld	r24, X+
    6240:	9c 91       	ld	r25, X
    6242:	1f 97       	sbiw	r26, 0x0f	; 15
    6244:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    6248:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <__fixsfsi>
    624c:	7f 93       	push	r23
    624e:	6f 93       	push	r22
    6250:	20 e0       	ldi	r18, 0x00	; 0
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	48 ec       	ldi	r20, 0xC8	; 200
    6256:	52 e4       	ldi	r21, 0x42	; 66
    6258:	f5 01       	movw	r30, r10
    625a:	60 81       	ld	r22, Z
    625c:	71 81       	ldd	r23, Z+1	; 0x01
    625e:	82 81       	ldd	r24, Z+2	; 0x02
    6260:	93 81       	ldd	r25, Z+3	; 0x03
    6262:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    6266:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <__fixunssfsi>
    626a:	7f 93       	push	r23
    626c:	6f 93       	push	r22
    626e:	20 e0       	ldi	r18, 0x00	; 0
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	40 e2       	ldi	r20, 0x20	; 32
    6274:	51 e4       	ldi	r21, 0x41	; 65
    6276:	d5 01       	movw	r26, r10
    6278:	18 96       	adiw	r26, 0x08	; 8
    627a:	6d 91       	ld	r22, X+
    627c:	7d 91       	ld	r23, X+
    627e:	8d 91       	ld	r24, X+
    6280:	9c 91       	ld	r25, X
    6282:	1b 97       	sbiw	r26, 0x0b	; 11
    6284:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    6288:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <__fixsfsi>
    628c:	7f 93       	push	r23
    628e:	6f 93       	push	r22
    6290:	20 e0       	ldi	r18, 0x00	; 0
    6292:	30 e0       	ldi	r19, 0x00	; 0
    6294:	48 ec       	ldi	r20, 0xC8	; 200
    6296:	52 e4       	ldi	r21, 0x42	; 66
    6298:	60 91 89 08 	lds	r22, 0x0889
    629c:	70 91 8a 08 	lds	r23, 0x088A
    62a0:	80 91 8b 08 	lds	r24, 0x088B
    62a4:	90 91 8c 08 	lds	r25, 0x088C
    62a8:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    62ac:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <__fixsfsi>
    62b0:	9f 93       	push	r25
    62b2:	8f 93       	push	r24
    62b4:	7f 93       	push	r23
    62b6:	6f 93       	push	r22
    62b8:	20 e0       	ldi	r18, 0x00	; 0
    62ba:	30 e0       	ldi	r19, 0x00	; 0
    62bc:	48 ec       	ldi	r20, 0xC8	; 200
    62be:	52 e4       	ldi	r21, 0x42	; 66
    62c0:	60 91 93 08 	lds	r22, 0x0893
    62c4:	70 91 94 08 	lds	r23, 0x0894
    62c8:	80 91 95 08 	lds	r24, 0x0895
    62cc:	90 91 96 08 	lds	r25, 0x0896
    62d0:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    62d4:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <__fixsfsi>
    62d8:	9f 93       	push	r25
    62da:	8f 93       	push	r24
    62dc:	7f 93       	push	r23
    62de:	6f 93       	push	r22
    62e0:	20 e0       	ldi	r18, 0x00	; 0
    62e2:	30 e5       	ldi	r19, 0x50	; 80
    62e4:	43 ec       	ldi	r20, 0xC3	; 195
    62e6:	57 e4       	ldi	r21, 0x47	; 71
    62e8:	60 91 9b 08 	lds	r22, 0x089B
    62ec:	70 91 9c 08 	lds	r23, 0x089C
    62f0:	80 91 9d 08 	lds	r24, 0x089D
    62f4:	90 91 9e 08 	lds	r25, 0x089E
    62f8:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    62fc:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <__fixsfsi>
    6300:	9f 93       	push	r25
    6302:	8f 93       	push	r24
    6304:	7f 93       	push	r23
    6306:	6f 93       	push	r22
    6308:	20 e0       	ldi	r18, 0x00	; 0
    630a:	34 e2       	ldi	r19, 0x24	; 36
    630c:	44 e7       	ldi	r20, 0x74	; 116
    630e:	59 e4       	ldi	r21, 0x49	; 73
    6310:	60 91 97 08 	lds	r22, 0x0897
    6314:	70 91 98 08 	lds	r23, 0x0898
    6318:	80 91 99 08 	lds	r24, 0x0899
    631c:	90 91 9a 08 	lds	r25, 0x089A
    6320:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    6324:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <__fixsfsi>
    6328:	9f 93       	push	r25
    632a:	8f 93       	push	r24
    632c:	7f 93       	push	r23
    632e:	6f 93       	push	r22
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
			Sekundenges += rtc.Minuten*60;
			Sekundenges += rtc.Sekunden;
    6330:	f6 01       	movw	r30, r12
    6332:	82 89       	ldd	r24, Z+18	; 0x12
    6334:	97 01       	movw	r18, r14
    6336:	28 0f       	add	r18, r24
    6338:	31 1d       	adc	r19, r1
    633a:	c9 01       	movw	r24, r18
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\t%d\t%u\t%d\n",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100),(int16_t)(druck.temperature*10),(uint16_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    633c:	9f 93       	push	r25
    633e:	2f 93       	push	r18
    6340:	8b ef       	ldi	r24, 0xFB	; 251
    6342:	92 e0       	ldi	r25, 0x02	; 2
    6344:	9f 93       	push	r25
    6346:	8f 93       	push	r24
    6348:	8f e2       	ldi	r24, 0x2F	; 47
    634a:	94 e0       	ldi	r25, 0x04	; 4
    634c:	9f 93       	push	r25
    634e:	8f 93       	push	r24
    6350:	0e 94 11 21 	call	0x4222	; 0x4222 <f_printf>
    6354:	0f b6       	in	r0, 0x3f	; 63
    6356:	f8 94       	cli
    6358:	de bf       	out	0x3e, r29	; 62
    635a:	0f be       	out	0x3f, r0	; 63
    635c:	cd bf       	out	0x3d, r28	; 61
		}
		
		anzeige |= (1<<refreshdisplay);
    635e:	80 91 ec 08 	lds	r24, 0x08EC
    6362:	81 60       	ori	r24, 0x01	; 1
    6364:	80 93 ec 08 	sts	0x08EC, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    6368:	ec e1       	ldi	r30, 0x1C	; 28
    636a:	fe e0       	ldi	r31, 0x0E	; 14
    636c:	80 8d       	ldd	r24, Z+24	; 0x18
    636e:	8d 7f       	andi	r24, 0xFD	; 253
    6370:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    6372:	80 91 34 0e 	lds	r24, 0x0E34
    6376:	82 ff       	sbrs	r24, 2
    6378:	13 c0       	rjmp	.+38     	; 0x63a0 <_Z19maininterupthandlerP7monitor+0x420>
    637a:	80 91 eb 08 	lds	r24, 0x08EB
    637e:	86 70       	andi	r24, 0x06	; 6
	{
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    6380:	86 30       	cpi	r24, 0x06	; 6
    6382:	21 f4       	brne	.+8      	; 0x638c <_Z19maininterupthandlerP7monitor+0x40c>
		{
			f_sync(&logger);
    6384:	8f e2       	ldi	r24, 0x2F	; 47
    6386:	94 e0       	ldi	r25, 0x04	; 4
    6388:	0e 94 34 20 	call	0x4068	; 0x4068 <f_sync>
		}
		anzeige |= (1<<refreshdisplay);
    638c:	80 91 ec 08 	lds	r24, 0x08EC
    6390:	81 60       	ori	r24, 0x01	; 1
    6392:	80 93 ec 08 	sts	0x08EC, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    6396:	ec e1       	ldi	r30, 0x1C	; 28
    6398:	fe e0       	ldi	r31, 0x0E	; 14
    639a:	80 8d       	ldd	r24, Z+24	; 0x18
    639c:	8b 7f       	andi	r24, 0xFB	; 251
    639e:	80 8f       	std	Z+24, r24	; 0x18
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    63a0:	80 91 ec 08 	lds	r24, 0x08EC
    63a4:	80 ff       	sbrs	r24, 0
    63a6:	0d c0       	rjmp	.+26     	; 0x63c2 <_Z19maininterupthandlerP7monitor+0x442>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    63a8:	d8 01       	movw	r26, r16
    63aa:	ed 91       	ld	r30, X+
    63ac:	fc 91       	ld	r31, X
    63ae:	02 80       	ldd	r0, Z+2	; 0x02
    63b0:	f3 81       	ldd	r31, Z+3	; 0x03
    63b2:	e0 2d       	mov	r30, r0
    63b4:	c8 01       	movw	r24, r16
    63b6:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    63b8:	80 91 ec 08 	lds	r24, 0x08EC
    63bc:	8e 7f       	andi	r24, 0xFE	; 254
    63be:	80 93 ec 08 	sts	0x08EC, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    63c2:	2c 96       	adiw	r28, 0x0c	; 12
    63c4:	0f b6       	in	r0, 0x3f	; 63
    63c6:	f8 94       	cli
    63c8:	de bf       	out	0x3e, r29	; 62
    63ca:	0f be       	out	0x3f, r0	; 63
    63cc:	cd bf       	out	0x3d, r28	; 61
    63ce:	df 91       	pop	r29
    63d0:	cf 91       	pop	r28
    63d2:	1f 91       	pop	r17
    63d4:	0f 91       	pop	r16
    63d6:	ff 90       	pop	r15
    63d8:	ef 90       	pop	r14
    63da:	df 90       	pop	r13
    63dc:	cf 90       	pop	r12
    63de:	bf 90       	pop	r11
    63e0:	af 90       	pop	r10
    63e2:	08 95       	ret

000063e4 <_Z10gpshandlerv>:

void gpshandler(){
    63e4:	4f 92       	push	r4
    63e6:	5f 92       	push	r5
    63e8:	6f 92       	push	r6
    63ea:	7f 92       	push	r7
    63ec:	8f 92       	push	r8
    63ee:	9f 92       	push	r9
    63f0:	af 92       	push	r10
    63f2:	bf 92       	push	r11
    63f4:	ef 92       	push	r14
    63f6:	ff 92       	push	r15
    63f8:	0f 93       	push	r16
    63fa:	1f 93       	push	r17
    63fc:	cf 93       	push	r28
    63fe:	df 93       	push	r29
    6400:	00 d0       	rcall	.+0      	; 0x6402 <_Z10gpshandlerv+0x1e>
    6402:	00 d0       	rcall	.+0      	; 0x6404 <_Z10gpshandlerv+0x20>
    6404:	cd b7       	in	r28, 0x3d	; 61
    6406:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    6408:	e0 90 e8 08 	lds	r14, 0x08E8
    640c:	e2 fe       	sbrs	r14, 2
    640e:	e3 c2       	rjmp	.+1478   	; 0x69d6 <_Z10gpshandlerv+0x5f2>
    6410:	ee 20       	and	r14, r14
    6412:	0c f0       	brlt	.+2      	; 0x6416 <_Z10gpshandlerv+0x32>
    6414:	84 c3       	rjmp	.+1800   	; 0x6b1e <_Z10gpshandlerv+0x73a>
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    6416:	00 ea       	ldi	r16, 0xA0	; 160
    6418:	18 e0       	ldi	r17, 0x08	; 8
    641a:	f8 01       	movw	r30, r16
    641c:	80 85       	ldd	r24, Z+8	; 0x08
    641e:	21 ed       	ldi	r18, 0xD1	; 209
    6420:	28 0f       	add	r18, r24
void gpshandler(){
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6422:	87 81       	ldd	r24, Z+7	; 0x07
    6424:	88 0f       	add	r24, r24
    6426:	80 56       	subi	r24, 0x60	; 96
    6428:	98 2f       	mov	r25, r24
    642a:	99 0f       	add	r25, r25
    642c:	99 0f       	add	r25, r25
    642e:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6430:	82 0f       	add	r24, r18
    6432:	80 93 92 08 	sts	0x0892, r24
    6436:	82 85       	ldd	r24, Z+10	; 0x0a
    6438:	20 ed       	ldi	r18, 0xD0	; 208
    643a:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    643c:	81 85       	ldd	r24, Z+9	; 0x09
    643e:	88 0f       	add	r24, r24
    6440:	80 56       	subi	r24, 0x60	; 96
    6442:	98 2f       	mov	r25, r24
    6444:	99 0f       	add	r25, r25
    6446:	99 0f       	add	r25, r25
    6448:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    644a:	82 0f       	add	r24, r18
    644c:	80 93 91 08 	sts	0x0891, r24
    6450:	84 85       	ldd	r24, Z+12	; 0x0c
    6452:	20 ed       	ldi	r18, 0xD0	; 208
    6454:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6456:	83 85       	ldd	r24, Z+11	; 0x0b
    6458:	88 0f       	add	r24, r24
    645a:	80 56       	subi	r24, 0x60	; 96
    645c:	98 2f       	mov	r25, r24
    645e:	99 0f       	add	r25, r25
    6460:	99 0f       	add	r25, r25
    6462:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    6464:	82 0f       	add	r24, r18
    6466:	80 93 90 08 	sts	0x0890, r24
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
		lat +=	(gpsdata[21] - '0');
		float latmin =	(gpsdata[22] - '0')*10;
    646a:	86 89       	ldd	r24, Z+22	; 0x16
    646c:	90 e0       	ldi	r25, 0x00	; 0
    646e:	c0 97       	sbiw	r24, 0x30	; 48
    6470:	bc 01       	movw	r22, r24
    6472:	66 0f       	add	r22, r22
    6474:	77 1f       	adc	r23, r23
    6476:	88 0f       	add	r24, r24
    6478:	99 1f       	adc	r25, r25
    647a:	88 0f       	add	r24, r24
    647c:	99 1f       	adc	r25, r25
    647e:	88 0f       	add	r24, r24
    6480:	99 1f       	adc	r25, r25
    6482:	68 0f       	add	r22, r24
    6484:	79 1f       	adc	r23, r25
    6486:	07 2e       	mov	r0, r23
    6488:	00 0c       	add	r0, r0
    648a:	88 0b       	sbc	r24, r24
    648c:	99 0b       	sbc	r25, r25
    648e:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6492:	4b 01       	movw	r8, r22
    6494:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[23] - '0');
    6496:	f8 01       	movw	r30, r16
    6498:	87 89       	ldd	r24, Z+23	; 0x17
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	c0 97       	sbiw	r24, 0x30	; 48
    649e:	bc 01       	movw	r22, r24
    64a0:	99 0f       	add	r25, r25
    64a2:	88 0b       	sbc	r24, r24
    64a4:	99 0b       	sbc	r25, r25
    64a6:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    64aa:	a5 01       	movw	r20, r10
    64ac:	94 01       	movw	r18, r8
    64ae:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    64b2:	4b 01       	movw	r8, r22
    64b4:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[25] - '0')/10.0;
    64b6:	f8 01       	movw	r30, r16
    64b8:	81 8d       	ldd	r24, Z+25	; 0x19
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	c0 97       	sbiw	r24, 0x30	; 48
    64be:	bc 01       	movw	r22, r24
    64c0:	99 0f       	add	r25, r25
    64c2:	88 0b       	sbc	r24, r24
    64c4:	99 0b       	sbc	r25, r25
    64c6:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    64ca:	20 e0       	ldi	r18, 0x00	; 0
    64cc:	30 e0       	ldi	r19, 0x00	; 0
    64ce:	40 e2       	ldi	r20, 0x20	; 32
    64d0:	51 e4       	ldi	r21, 0x41	; 65
    64d2:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    64d6:	a5 01       	movw	r20, r10
    64d8:	94 01       	movw	r18, r8
    64da:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    64de:	4b 01       	movw	r8, r22
    64e0:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[26] - '0')/100.0;
    64e2:	f8 01       	movw	r30, r16
    64e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	c0 97       	sbiw	r24, 0x30	; 48
    64ea:	bc 01       	movw	r22, r24
    64ec:	99 0f       	add	r25, r25
    64ee:	88 0b       	sbc	r24, r24
    64f0:	99 0b       	sbc	r25, r25
    64f2:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    64f6:	20 e0       	ldi	r18, 0x00	; 0
    64f8:	30 e0       	ldi	r19, 0x00	; 0
    64fa:	48 ec       	ldi	r20, 0xC8	; 200
    64fc:	52 e4       	ldi	r21, 0x42	; 66
    64fe:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    6502:	a5 01       	movw	r20, r10
    6504:	94 01       	movw	r18, r8
    6506:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    650a:	4b 01       	movw	r8, r22
    650c:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[27] - '0')/1000.0;
    650e:	f8 01       	movw	r30, r16
    6510:	83 8d       	ldd	r24, Z+27	; 0x1b
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	c0 97       	sbiw	r24, 0x30	; 48
    6516:	bc 01       	movw	r22, r24
    6518:	99 0f       	add	r25, r25
    651a:	88 0b       	sbc	r24, r24
    651c:	99 0b       	sbc	r25, r25
    651e:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6522:	20 e0       	ldi	r18, 0x00	; 0
    6524:	30 e0       	ldi	r19, 0x00	; 0
    6526:	4a e7       	ldi	r20, 0x7A	; 122
    6528:	54 e4       	ldi	r21, 0x44	; 68
    652a:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    652e:	a5 01       	movw	r20, r10
    6530:	94 01       	movw	r18, r8
    6532:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    6536:	4b 01       	movw	r8, r22
    6538:	5c 01       	movw	r10, r24
		gpsminute +=	(gpsdata[10] - '0');
		gpssekunde =	(gpsdata[11] - '0')*10;
		gpssekunde +=	(gpsdata[12] - '0');
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
    653a:	f8 01       	movw	r30, r16
    653c:	44 89       	ldd	r20, Z+20	; 0x14
    653e:	50 e0       	ldi	r21, 0x00	; 0
    6540:	40 53       	subi	r20, 0x30	; 48
    6542:	51 09       	sbc	r21, r1
    6544:	ca 01       	movw	r24, r20
    6546:	88 0f       	add	r24, r24
    6548:	99 1f       	adc	r25, r25
    654a:	44 0f       	add	r20, r20
    654c:	55 1f       	adc	r21, r21
    654e:	44 0f       	add	r20, r20
    6550:	55 1f       	adc	r21, r21
    6552:	44 0f       	add	r20, r20
    6554:	55 1f       	adc	r21, r21
    6556:	84 0f       	add	r24, r20
    6558:	95 1f       	adc	r25, r21
    655a:	bc 01       	movw	r22, r24
    655c:	99 0f       	add	r25, r25
    655e:	88 0b       	sbc	r24, r24
    6560:	99 0b       	sbc	r25, r25
    6562:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6566:	2b 01       	movw	r4, r22
    6568:	3c 01       	movw	r6, r24
		lat +=	(gpsdata[21] - '0');
    656a:	f8 01       	movw	r30, r16
    656c:	85 89       	ldd	r24, Z+21	; 0x15
    656e:	90 e0       	ldi	r25, 0x00	; 0
    6570:	c0 97       	sbiw	r24, 0x30	; 48
    6572:	bc 01       	movw	r22, r24
    6574:	99 0f       	add	r25, r25
    6576:	88 0b       	sbc	r24, r24
    6578:	99 0b       	sbc	r25, r25
    657a:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    657e:	9b 01       	movw	r18, r22
    6580:	ac 01       	movw	r20, r24
    6582:	c3 01       	movw	r24, r6
    6584:	b2 01       	movw	r22, r4
    6586:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    658a:	2b 01       	movw	r4, r22
    658c:	3c 01       	movw	r6, r24
		float latmin =	(gpsdata[22] - '0')*10;
		latmin +=		(gpsdata[23] - '0');
		latmin +=		(gpsdata[25] - '0')/10.0;
		latmin +=		(gpsdata[26] - '0')/100.0;
		latmin +=		(gpsdata[27] - '0')/1000.0;
		latmin +=		(gpsdata[28] - '0')/10000.0;
    658e:	f8 01       	movw	r30, r16
    6590:	84 8d       	ldd	r24, Z+28	; 0x1c
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	c0 97       	sbiw	r24, 0x30	; 48
    6596:	bc 01       	movw	r22, r24
    6598:	99 0f       	add	r25, r25
    659a:	88 0b       	sbc	r24, r24
    659c:	99 0b       	sbc	r25, r25
    659e:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    65a2:	20 e0       	ldi	r18, 0x00	; 0
    65a4:	30 e4       	ldi	r19, 0x40	; 64
    65a6:	4c e1       	ldi	r20, 0x1C	; 28
    65a8:	56 e4       	ldi	r21, 0x46	; 70
    65aa:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    65ae:	a5 01       	movw	r20, r10
    65b0:	94 01       	movw	r18, r8
    65b2:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
		lat +=	latmin/60.0;
    65b6:	20 e0       	ldi	r18, 0x00	; 0
    65b8:	30 e0       	ldi	r19, 0x00	; 0
    65ba:	40 e7       	ldi	r20, 0x70	; 112
    65bc:	52 e4       	ldi	r21, 0x42	; 66
    65be:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    65c2:	9b 01       	movw	r18, r22
    65c4:	ac 01       	movw	r20, r24
    65c6:	c3 01       	movw	r24, r6
    65c8:	b2 01       	movw	r22, r4
    65ca:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    65ce:	60 93 9b 08 	sts	0x089B, r22
    65d2:	70 93 9c 08 	sts	0x089C, r23
    65d6:	80 93 9d 08 	sts	0x089D, r24
    65da:	90 93 9e 08 	sts	0x089E, r25
		if (gpsdata[30] != 'N')
    65de:	f8 01       	movw	r30, r16
    65e0:	26 8d       	ldd	r18, Z+30	; 0x1e
    65e2:	2e 34       	cpi	r18, 0x4E	; 78
    65e4:	59 f0       	breq	.+22     	; 0x65fc <_Z10gpshandlerv+0x218>
		{
			lat *= -1;
    65e6:	dc 01       	movw	r26, r24
    65e8:	cb 01       	movw	r24, r22
    65ea:	b0 58       	subi	r27, 0x80	; 128
    65ec:	80 93 9b 08 	sts	0x089B, r24
    65f0:	90 93 9c 08 	sts	0x089C, r25
    65f4:	a0 93 9d 08 	sts	0x089D, r26
    65f8:	b0 93 9e 08 	sts	0x089E, r27
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
		lon +=	(gpsdata[33] - '0')*10;
		lon +=	(gpsdata[34] - '0');
		float lonmin =	(gpsdata[35] - '0')*10;
    65fc:	00 ea       	ldi	r16, 0xA0	; 160
    65fe:	18 e0       	ldi	r17, 0x08	; 8
    6600:	f8 01       	movw	r30, r16
    6602:	83 a1       	ldd	r24, Z+35	; 0x23
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	c0 97       	sbiw	r24, 0x30	; 48
    6608:	bc 01       	movw	r22, r24
    660a:	66 0f       	add	r22, r22
    660c:	77 1f       	adc	r23, r23
    660e:	88 0f       	add	r24, r24
    6610:	99 1f       	adc	r25, r25
    6612:	88 0f       	add	r24, r24
    6614:	99 1f       	adc	r25, r25
    6616:	88 0f       	add	r24, r24
    6618:	99 1f       	adc	r25, r25
    661a:	68 0f       	add	r22, r24
    661c:	79 1f       	adc	r23, r25
    661e:	07 2e       	mov	r0, r23
    6620:	00 0c       	add	r0, r0
    6622:	88 0b       	sbc	r24, r24
    6624:	99 0b       	sbc	r25, r25
    6626:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    662a:	4b 01       	movw	r8, r22
    662c:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[36] - '0');
    662e:	f8 01       	movw	r30, r16
    6630:	84 a1       	ldd	r24, Z+36	; 0x24
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	c0 97       	sbiw	r24, 0x30	; 48
    6636:	bc 01       	movw	r22, r24
    6638:	99 0f       	add	r25, r25
    663a:	88 0b       	sbc	r24, r24
    663c:	99 0b       	sbc	r25, r25
    663e:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6642:	a5 01       	movw	r20, r10
    6644:	94 01       	movw	r18, r8
    6646:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    664a:	4b 01       	movw	r8, r22
    664c:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[38] - '0')/10.0;
    664e:	f8 01       	movw	r30, r16
    6650:	86 a1       	ldd	r24, Z+38	; 0x26
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	c0 97       	sbiw	r24, 0x30	; 48
    6656:	bc 01       	movw	r22, r24
    6658:	99 0f       	add	r25, r25
    665a:	88 0b       	sbc	r24, r24
    665c:	99 0b       	sbc	r25, r25
    665e:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6662:	20 e0       	ldi	r18, 0x00	; 0
    6664:	30 e0       	ldi	r19, 0x00	; 0
    6666:	40 e2       	ldi	r20, 0x20	; 32
    6668:	51 e4       	ldi	r21, 0x41	; 65
    666a:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    666e:	a5 01       	movw	r20, r10
    6670:	94 01       	movw	r18, r8
    6672:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    6676:	4b 01       	movw	r8, r22
    6678:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[39] - '0')/100.0;
    667a:	f8 01       	movw	r30, r16
    667c:	87 a1       	ldd	r24, Z+39	; 0x27
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	c0 97       	sbiw	r24, 0x30	; 48
    6682:	bc 01       	movw	r22, r24
    6684:	99 0f       	add	r25, r25
    6686:	88 0b       	sbc	r24, r24
    6688:	99 0b       	sbc	r25, r25
    668a:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    668e:	20 e0       	ldi	r18, 0x00	; 0
    6690:	30 e0       	ldi	r19, 0x00	; 0
    6692:	48 ec       	ldi	r20, 0xC8	; 200
    6694:	52 e4       	ldi	r21, 0x42	; 66
    6696:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    669a:	a5 01       	movw	r20, r10
    669c:	94 01       	movw	r18, r8
    669e:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    66a2:	4b 01       	movw	r8, r22
    66a4:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[40] - '0')/1000.0;
    66a6:	f8 01       	movw	r30, r16
    66a8:	80 a5       	ldd	r24, Z+40	; 0x28
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	c0 97       	sbiw	r24, 0x30	; 48
    66ae:	bc 01       	movw	r22, r24
    66b0:	99 0f       	add	r25, r25
    66b2:	88 0b       	sbc	r24, r24
    66b4:	99 0b       	sbc	r25, r25
    66b6:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    66ba:	20 e0       	ldi	r18, 0x00	; 0
    66bc:	30 e0       	ldi	r19, 0x00	; 0
    66be:	4a e7       	ldi	r20, 0x7A	; 122
    66c0:	54 e4       	ldi	r21, 0x44	; 68
    66c2:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    66c6:	a5 01       	movw	r20, r10
    66c8:	94 01       	movw	r18, r8
    66ca:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    66ce:	4b 01       	movw	r8, r22
    66d0:	5c 01       	movw	r10, r24
		{
			lat *= -1;
		}
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
    66d2:	f8 01       	movw	r30, r16
    66d4:	80 a1       	ldd	r24, Z+32	; 0x20
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	c0 97       	sbiw	r24, 0x30	; 48
    66da:	24 e6       	ldi	r18, 0x64	; 100
    66dc:	28 9f       	mul	r18, r24
    66de:	b0 01       	movw	r22, r0
    66e0:	29 9f       	mul	r18, r25
    66e2:	70 0d       	add	r23, r0
    66e4:	11 24       	eor	r1, r1
    66e6:	07 2e       	mov	r0, r23
    66e8:	00 0c       	add	r0, r0
    66ea:	88 0b       	sbc	r24, r24
    66ec:	99 0b       	sbc	r25, r25
    66ee:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    66f2:	2b 01       	movw	r4, r22
    66f4:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[33] - '0')*10;
    66f6:	f8 01       	movw	r30, r16
    66f8:	21 a1       	ldd	r18, Z+33	; 0x21
    66fa:	30 e0       	ldi	r19, 0x00	; 0
    66fc:	20 53       	subi	r18, 0x30	; 48
    66fe:	31 09       	sbc	r19, r1
    6700:	c9 01       	movw	r24, r18
    6702:	88 0f       	add	r24, r24
    6704:	99 1f       	adc	r25, r25
    6706:	22 0f       	add	r18, r18
    6708:	33 1f       	adc	r19, r19
    670a:	22 0f       	add	r18, r18
    670c:	33 1f       	adc	r19, r19
    670e:	22 0f       	add	r18, r18
    6710:	33 1f       	adc	r19, r19
    6712:	82 0f       	add	r24, r18
    6714:	93 1f       	adc	r25, r19
    6716:	bc 01       	movw	r22, r24
    6718:	99 0f       	add	r25, r25
    671a:	88 0b       	sbc	r24, r24
    671c:	99 0b       	sbc	r25, r25
    671e:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6722:	9b 01       	movw	r18, r22
    6724:	ac 01       	movw	r20, r24
    6726:	c3 01       	movw	r24, r6
    6728:	b2 01       	movw	r22, r4
    672a:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    672e:	2b 01       	movw	r4, r22
    6730:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[34] - '0');
    6732:	f8 01       	movw	r30, r16
    6734:	82 a1       	ldd	r24, Z+34	; 0x22
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	c0 97       	sbiw	r24, 0x30	; 48
    673a:	bc 01       	movw	r22, r24
    673c:	99 0f       	add	r25, r25
    673e:	88 0b       	sbc	r24, r24
    6740:	99 0b       	sbc	r25, r25
    6742:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6746:	9b 01       	movw	r18, r22
    6748:	ac 01       	movw	r20, r24
    674a:	c3 01       	movw	r24, r6
    674c:	b2 01       	movw	r22, r4
    674e:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    6752:	2b 01       	movw	r4, r22
    6754:	3c 01       	movw	r6, r24
		float lonmin =	(gpsdata[35] - '0')*10;
		lonmin +=		(gpsdata[36] - '0');
		lonmin +=		(gpsdata[38] - '0')/10.0;
		lonmin +=		(gpsdata[39] - '0')/100.0;
		lonmin +=		(gpsdata[40] - '0')/1000.0;
		lonmin +=		(gpsdata[41] - '0')/10000.0;
    6756:	f8 01       	movw	r30, r16
    6758:	81 a5       	ldd	r24, Z+41	; 0x29
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	c0 97       	sbiw	r24, 0x30	; 48
    675e:	bc 01       	movw	r22, r24
    6760:	99 0f       	add	r25, r25
    6762:	88 0b       	sbc	r24, r24
    6764:	99 0b       	sbc	r25, r25
    6766:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    676a:	20 e0       	ldi	r18, 0x00	; 0
    676c:	30 e4       	ldi	r19, 0x40	; 64
    676e:	4c e1       	ldi	r20, 0x1C	; 28
    6770:	56 e4       	ldi	r21, 0x46	; 70
    6772:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    6776:	a5 01       	movw	r20, r10
    6778:	94 01       	movw	r18, r8
    677a:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
		lon +=			lonmin/60.0;
    677e:	20 e0       	ldi	r18, 0x00	; 0
    6780:	30 e0       	ldi	r19, 0x00	; 0
    6782:	40 e7       	ldi	r20, 0x70	; 112
    6784:	52 e4       	ldi	r21, 0x42	; 66
    6786:	0e 94 76 3f 	call	0x7eec	; 0x7eec <__divsf3>
    678a:	9b 01       	movw	r18, r22
    678c:	ac 01       	movw	r20, r24
    678e:	c3 01       	movw	r24, r6
    6790:	b2 01       	movw	r22, r4
    6792:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    6796:	60 93 97 08 	sts	0x0897, r22
    679a:	70 93 98 08 	sts	0x0898, r23
    679e:	80 93 99 08 	sts	0x0899, r24
    67a2:	90 93 9a 08 	sts	0x089A, r25
		if (gpsdata[43] != 'E')
    67a6:	f8 01       	movw	r30, r16
    67a8:	23 a5       	ldd	r18, Z+43	; 0x2b
    67aa:	25 34       	cpi	r18, 0x45	; 69
    67ac:	59 f0       	breq	.+22     	; 0x67c4 <_Z10gpshandlerv+0x3e0>
		{
			lon *= -1;
    67ae:	dc 01       	movw	r26, r24
    67b0:	cb 01       	movw	r24, r22
    67b2:	b0 58       	subi	r27, 0x80	; 128
    67b4:	80 93 97 08 	sts	0x0897, r24
    67b8:	90 93 98 08 	sts	0x0898, r25
    67bc:	a0 93 99 08 	sts	0x0899, r26
    67c0:	b0 93 9a 08 	sts	0x089A, r27
		}
		//Speed 
		volatile uint8_t counter = 45;
    67c4:	8d e2       	ldi	r24, 0x2D	; 45
    67c6:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    67c8:	ec 81       	ldd	r30, Y+4	; 0x04
    67ca:	f0 e0       	ldi	r31, 0x00	; 0
    67cc:	e0 56       	subi	r30, 0x60	; 96
    67ce:	f7 4f       	sbci	r31, 0xF7	; 247
    67d0:	80 81       	ld	r24, Z
    67d2:	8e 32       	cpi	r24, 0x2E	; 46
    67d4:	91 f4       	brne	.+36     	; 0x67fa <_Z10gpshandlerv+0x416>
			{
				weiter=false;
				counter--;
    67d6:	8c 81       	ldd	r24, Y+4	; 0x04
    67d8:	81 50       	subi	r24, 0x01	; 1
    67da:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    67dc:	8c 81       	ldd	r24, Y+4	; 0x04
    67de:	8f 5f       	subi	r24, 0xFF	; 255
    67e0:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    67e2:	10 92 93 08 	sts	0x0893, r1
    67e6:	10 92 94 08 	sts	0x0894, r1
    67ea:	10 92 95 08 	sts	0x0895, r1
    67ee:	10 92 96 08 	sts	0x0896, r1
		for(uint8_t i=45;i<counter;i++){
    67f2:	8c 81       	ldd	r24, Y+4	; 0x04
    67f4:	8e 32       	cpi	r24, 0x2E	; 46
    67f6:	28 f4       	brcc	.+10     	; 0x6802 <_Z10gpshandlerv+0x41e>
    67f8:	47 c0       	rjmp	.+142    	; 0x6888 <_Z10gpshandlerv+0x4a4>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    67fa:	8c 81       	ldd	r24, Y+4	; 0x04
    67fc:	8f 5f       	subi	r24, 0xFF	; 255
    67fe:	8c 83       	std	Y+4, r24	; 0x04
    6800:	e3 cf       	rjmp	.-58     	; 0x67c8 <_Z10gpshandlerv+0x3e4>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    6802:	81 2c       	mov	r8, r1
    6804:	91 2c       	mov	r9, r1
    6806:	54 01       	movw	r10, r8
    6808:	0f 2e       	mov	r0, r31
    680a:	fd e2       	ldi	r31, 0x2D	; 45
    680c:	ff 2e       	mov	r15, r31
    680e:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    6810:	0f 2d       	mov	r16, r15
    6812:	10 e0       	ldi	r17, 0x00	; 0
    6814:	8c 81       	ldd	r24, Y+4	; 0x04
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	80 1b       	sub	r24, r16
    681a:	91 0b       	sbc	r25, r17
    681c:	01 97       	sbiw	r24, 0x01	; 1
    681e:	bc 01       	movw	r22, r24
    6820:	99 0f       	add	r25, r25
    6822:	88 0b       	sbc	r24, r24
    6824:	99 0b       	sbc	r25, r25
    6826:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    682a:	9b 01       	movw	r18, r22
    682c:	ac 01       	movw	r20, r24
    682e:	60 e0       	ldi	r22, 0x00	; 0
    6830:	70 e0       	ldi	r23, 0x00	; 0
    6832:	80 e2       	ldi	r24, 0x20	; 32
    6834:	91 e4       	ldi	r25, 0x41	; 65
    6836:	0e 94 8d 41 	call	0x831a	; 0x831a <pow>
    683a:	2b 01       	movw	r4, r22
    683c:	3c 01       	movw	r6, r24
    683e:	f8 01       	movw	r30, r16
    6840:	e0 56       	subi	r30, 0x60	; 96
    6842:	f7 4f       	sbci	r31, 0xF7	; 247
    6844:	60 81       	ld	r22, Z
    6846:	70 e0       	ldi	r23, 0x00	; 0
    6848:	60 53       	subi	r22, 0x30	; 48
    684a:	71 09       	sbc	r23, r1
    684c:	07 2e       	mov	r0, r23
    684e:	00 0c       	add	r0, r0
    6850:	88 0b       	sbc	r24, r24
    6852:	99 0b       	sbc	r25, r25
    6854:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    6858:	a3 01       	movw	r20, r6
    685a:	92 01       	movw	r18, r4
    685c:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    6860:	9b 01       	movw	r18, r22
    6862:	ac 01       	movw	r20, r24
    6864:	c5 01       	movw	r24, r10
    6866:	b4 01       	movw	r22, r8
    6868:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    686c:	4b 01       	movw	r8, r22
    686e:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    6870:	f3 94       	inc	r15
    6872:	8c 81       	ldd	r24, Y+4	; 0x04
    6874:	f8 16       	cp	r15, r24
    6876:	60 f2       	brcs	.-104    	; 0x6810 <_Z10gpshandlerv+0x42c>
    6878:	80 92 93 08 	sts	0x0893, r8
    687c:	90 92 94 08 	sts	0x0894, r9
    6880:	a0 92 95 08 	sts	0x0895, r10
    6884:	b0 92 96 08 	sts	0x0896, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    6888:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    688a:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    688c:	f0 e0       	ldi	r31, 0x00	; 0
    688e:	e0 56       	subi	r30, 0x60	; 96
    6890:	f7 4f       	sbci	r31, 0xF7	; 247
    6892:	61 81       	ldd	r22, Z+1	; 0x01
    6894:	70 e0       	ldi	r23, 0x00	; 0
    6896:	60 53       	subi	r22, 0x30	; 48
    6898:	71 09       	sbc	r23, r1
    689a:	07 2e       	mov	r0, r23
    689c:	00 0c       	add	r0, r0
    689e:	88 0b       	sbc	r24, r24
    68a0:	99 0b       	sbc	r25, r25
    68a2:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    68a6:	2d ec       	ldi	r18, 0xCD	; 205
    68a8:	3c ec       	ldi	r19, 0xCC	; 204
    68aa:	4c ec       	ldi	r20, 0xCC	; 204
    68ac:	5d e3       	ldi	r21, 0x3D	; 61
    68ae:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    68b2:	20 91 93 08 	lds	r18, 0x0893
    68b6:	30 91 94 08 	lds	r19, 0x0894
    68ba:	40 91 95 08 	lds	r20, 0x0895
    68be:	50 91 96 08 	lds	r21, 0x0896
    68c2:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
    68c6:	4b 01       	movw	r8, r22
    68c8:	5c 01       	movw	r10, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    68ca:	e1 2f       	mov	r30, r17
    68cc:	f0 e0       	ldi	r31, 0x00	; 0
    68ce:	e0 56       	subi	r30, 0x60	; 96
    68d0:	f7 4f       	sbci	r31, 0xF7	; 247
    68d2:	82 81       	ldd	r24, Z+2	; 0x02
    68d4:	90 e0       	ldi	r25, 0x00	; 0
    68d6:	c0 97       	sbiw	r24, 0x30	; 48
    68d8:	bc 01       	movw	r22, r24
    68da:	99 0f       	add	r25, r25
    68dc:	88 0b       	sbc	r24, r24
    68de:	99 0b       	sbc	r25, r25
    68e0:	0e 94 11 40 	call	0x8022	; 0x8022 <__floatsisf>
    68e4:	2a e0       	ldi	r18, 0x0A	; 10
    68e6:	37 ed       	ldi	r19, 0xD7	; 215
    68e8:	43 e2       	ldi	r20, 0x23	; 35
    68ea:	5c e3       	ldi	r21, 0x3C	; 60
    68ec:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    68f0:	9b 01       	movw	r18, r22
    68f2:	ac 01       	movw	r20, r24
    68f4:	c5 01       	movw	r24, r10
    68f6:	b4 01       	movw	r22, r8
    68f8:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    68fc:	26 e5       	ldi	r18, 0x56	; 86
    68fe:	3e e0       	ldi	r19, 0x0E	; 14
    6900:	4d ee       	ldi	r20, 0xED	; 237
    6902:	5f e3       	ldi	r21, 0x3F	; 63
    6904:	0e 94 2a 41 	call	0x8254	; 0x8254 <__mulsf3>
    6908:	60 93 93 08 	sts	0x0893, r22
    690c:	70 93 94 08 	sts	0x0894, r23
    6910:	80 93 95 08 	sts	0x0895, r24
    6914:	90 93 96 08 	sts	0x0896, r25
		
		//date
		counter =19;
    6918:	83 e1       	ldi	r24, 0x13	; 19
    691a:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    691c:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    691e:	8b 81       	ldd	r24, Y+3	; 0x03
    6920:	87 30       	cpi	r24, 0x07	; 7
    6922:	80 f4       	brcc	.+32     	; 0x6944 <_Z10gpshandlerv+0x560>
		{
			if (gpsdata[counter] == ',')
    6924:	ec 81       	ldd	r30, Y+4	; 0x04
    6926:	f0 e0       	ldi	r31, 0x00	; 0
    6928:	e0 56       	subi	r30, 0x60	; 96
    692a:	f7 4f       	sbci	r31, 0xF7	; 247
    692c:	80 81       	ld	r24, Z
    692e:	8c 32       	cpi	r24, 0x2C	; 44
    6930:	19 f4       	brne	.+6      	; 0x6938 <_Z10gpshandlerv+0x554>
			{
				nichterreicht++;
    6932:	8b 81       	ldd	r24, Y+3	; 0x03
    6934:	8f 5f       	subi	r24, 0xFF	; 255
    6936:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    6938:	8c 81       	ldd	r24, Y+4	; 0x04
    693a:	8f 5f       	subi	r24, 0xFF	; 255
    693c:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    693e:	8b 81       	ldd	r24, Y+3	; 0x03
    6940:	87 30       	cpi	r24, 0x07	; 7
    6942:	80 f3       	brcs	.-32     	; 0x6924 <_Z10gpshandlerv+0x540>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6944:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    6946:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6948:	b0 e0       	ldi	r27, 0x00	; 0
    694a:	a0 56       	subi	r26, 0x60	; 96
    694c:	b7 4f       	sbci	r27, 0xF7	; 247
    694e:	8c 91       	ld	r24, X
    6950:	88 0f       	add	r24, r24
    6952:	80 56       	subi	r24, 0x60	; 96
    6954:	28 2f       	mov	r18, r24
    6956:	22 0f       	add	r18, r18
    6958:	22 0f       	add	r18, r18
    695a:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    695c:	f0 e0       	ldi	r31, 0x00	; 0
    695e:	e0 56       	subi	r30, 0x60	; 96
    6960:	f7 4f       	sbci	r31, 0xF7	; 247
    6962:	81 81       	ldd	r24, Z+1	; 0x01
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	c0 97       	sbiw	r24, 0x30	; 48
    6968:	82 0f       	add	r24, r18
    696a:	91 1d       	adc	r25, r1
    696c:	80 93 8f 08 	sts	0x088F, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6970:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6972:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6974:	b0 e0       	ldi	r27, 0x00	; 0
    6976:	a0 56       	subi	r26, 0x60	; 96
    6978:	b7 4f       	sbci	r27, 0xF7	; 247
    697a:	12 96       	adiw	r26, 0x02	; 2
    697c:	8c 91       	ld	r24, X
    697e:	88 0f       	add	r24, r24
    6980:	80 56       	subi	r24, 0x60	; 96
    6982:	28 2f       	mov	r18, r24
    6984:	22 0f       	add	r18, r18
    6986:	22 0f       	add	r18, r18
    6988:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    698a:	f0 e0       	ldi	r31, 0x00	; 0
    698c:	e0 56       	subi	r30, 0x60	; 96
    698e:	f7 4f       	sbci	r31, 0xF7	; 247
    6990:	83 81       	ldd	r24, Z+3	; 0x03
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	c0 97       	sbiw	r24, 0x30	; 48
    6996:	82 0f       	add	r24, r18
    6998:	91 1d       	adc	r25, r1
    699a:	80 93 8e 08 	sts	0x088E, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    699e:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    69a0:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    69a2:	b0 e0       	ldi	r27, 0x00	; 0
    69a4:	a0 56       	subi	r26, 0x60	; 96
    69a6:	b7 4f       	sbci	r27, 0xF7	; 247
    69a8:	14 96       	adiw	r26, 0x04	; 4
    69aa:	8c 91       	ld	r24, X
    69ac:	88 0f       	add	r24, r24
    69ae:	80 56       	subi	r24, 0x60	; 96
    69b0:	28 2f       	mov	r18, r24
    69b2:	22 0f       	add	r18, r18
    69b4:	22 0f       	add	r18, r18
    69b6:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    69b8:	f0 e0       	ldi	r31, 0x00	; 0
    69ba:	e0 56       	subi	r30, 0x60	; 96
    69bc:	f7 4f       	sbci	r31, 0xF7	; 247
    69be:	85 81       	ldd	r24, Z+5	; 0x05
    69c0:	90 e0       	ldi	r25, 0x00	; 0
    69c2:	c0 97       	sbiw	r24, 0x30	; 48
    69c4:	82 0f       	add	r24, r18
    69c6:	91 1d       	adc	r25, r1
    69c8:	80 93 8d 08 	sts	0x088D, r24
		
		gpsstatus &= ~(1<<complete);
    69cc:	8e 2d       	mov	r24, r14
    69ce:	8b 7f       	andi	r24, 0xFB	; 251
    69d0:	80 93 e8 08 	sts	0x08E8, r24
    69d4:	a4 c0       	rjmp	.+328    	; 0x6b1e <_Z10gpshandlerv+0x73a>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    69d6:	e3 fe       	sbrs	r14, 3
    69d8:	a2 c0       	rjmp	.+324    	; 0x6b1e <_Z10gpshandlerv+0x73a>
    69da:	ee 20       	and	r14, r14
    69dc:	0c f0       	brlt	.+2      	; 0x69e0 <_Z10gpshandlerv+0x5fc>
    69de:	9f c0       	rjmp	.+318    	; 0x6b1e <_Z10gpshandlerv+0x73a>
	{
		//Andere Daten vernichten
		lat = 0;
    69e0:	10 92 9b 08 	sts	0x089B, r1
    69e4:	10 92 9c 08 	sts	0x089C, r1
    69e8:	10 92 9d 08 	sts	0x089D, r1
    69ec:	10 92 9e 08 	sts	0x089E, r1
		lon = 0;
    69f0:	10 92 97 08 	sts	0x0897, r1
    69f4:	10 92 98 08 	sts	0x0898, r1
    69f8:	10 92 99 08 	sts	0x0899, r1
    69fc:	10 92 9a 08 	sts	0x089A, r1
		gpsspeed = 0;
    6a00:	10 92 93 08 	sts	0x0893, r1
    6a04:	10 92 94 08 	sts	0x0894, r1
    6a08:	10 92 95 08 	sts	0x0895, r1
    6a0c:	10 92 96 08 	sts	0x0896, r1
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    6a10:	e0 ea       	ldi	r30, 0xA0	; 160
    6a12:	f8 e0       	ldi	r31, 0x08	; 8
    6a14:	80 85       	ldd	r24, Z+8	; 0x08
    6a16:	21 ed       	ldi	r18, 0xD1	; 209
    6a18:	28 0f       	add	r18, r24
		//Andere Daten vernichten
		lat = 0;
		lon = 0;
		gpsspeed = 0;
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6a1a:	87 81       	ldd	r24, Z+7	; 0x07
    6a1c:	88 0f       	add	r24, r24
    6a1e:	80 56       	subi	r24, 0x60	; 96
    6a20:	98 2f       	mov	r25, r24
    6a22:	99 0f       	add	r25, r25
    6a24:	99 0f       	add	r25, r25
    6a26:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6a28:	82 0f       	add	r24, r18
    6a2a:	80 93 92 08 	sts	0x0892, r24
    6a2e:	82 85       	ldd	r24, Z+10	; 0x0a
    6a30:	20 ed       	ldi	r18, 0xD0	; 208
    6a32:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    6a34:	81 85       	ldd	r24, Z+9	; 0x09
    6a36:	88 0f       	add	r24, r24
    6a38:	80 56       	subi	r24, 0x60	; 96
    6a3a:	98 2f       	mov	r25, r24
    6a3c:	99 0f       	add	r25, r25
    6a3e:	99 0f       	add	r25, r25
    6a40:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    6a42:	82 0f       	add	r24, r18
    6a44:	80 93 91 08 	sts	0x0891, r24
    6a48:	84 85       	ldd	r24, Z+12	; 0x0c
    6a4a:	20 ed       	ldi	r18, 0xD0	; 208
    6a4c:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6a4e:	83 85       	ldd	r24, Z+11	; 0x0b
    6a50:	88 0f       	add	r24, r24
    6a52:	80 56       	subi	r24, 0x60	; 96
    6a54:	98 2f       	mov	r25, r24
    6a56:	99 0f       	add	r25, r25
    6a58:	99 0f       	add	r25, r25
    6a5a:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    6a5c:	82 0f       	add	r24, r18
    6a5e:	80 93 90 08 	sts	0x0890, r24
		
		volatile uint8_t counter = 19;
    6a62:	83 e1       	ldi	r24, 0x13	; 19
    6a64:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    6a66:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    6a68:	89 81       	ldd	r24, Y+1	; 0x01
    6a6a:	87 30       	cpi	r24, 0x07	; 7
    6a6c:	80 f4       	brcc	.+32     	; 0x6a8e <_Z10gpshandlerv+0x6aa>
		{
			if (gpsdata[counter] == ',')
    6a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    6a70:	f0 e0       	ldi	r31, 0x00	; 0
    6a72:	e0 56       	subi	r30, 0x60	; 96
    6a74:	f7 4f       	sbci	r31, 0xF7	; 247
    6a76:	80 81       	ld	r24, Z
    6a78:	8c 32       	cpi	r24, 0x2C	; 44
    6a7a:	19 f4       	brne	.+6      	; 0x6a82 <_Z10gpshandlerv+0x69e>
			{
				nichterreicht++;
    6a7c:	89 81       	ldd	r24, Y+1	; 0x01
    6a7e:	8f 5f       	subi	r24, 0xFF	; 255
    6a80:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    6a82:	8a 81       	ldd	r24, Y+2	; 0x02
    6a84:	8f 5f       	subi	r24, 0xFF	; 255
    6a86:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    6a88:	89 81       	ldd	r24, Y+1	; 0x01
    6a8a:	87 30       	cpi	r24, 0x07	; 7
    6a8c:	80 f3       	brcs	.-32     	; 0x6a6e <_Z10gpshandlerv+0x68a>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6a8e:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    6a90:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6a92:	b0 e0       	ldi	r27, 0x00	; 0
    6a94:	a0 56       	subi	r26, 0x60	; 96
    6a96:	b7 4f       	sbci	r27, 0xF7	; 247
    6a98:	8c 91       	ld	r24, X
    6a9a:	88 0f       	add	r24, r24
    6a9c:	80 56       	subi	r24, 0x60	; 96
    6a9e:	28 2f       	mov	r18, r24
    6aa0:	22 0f       	add	r18, r18
    6aa2:	22 0f       	add	r18, r18
    6aa4:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    6aa6:	f0 e0       	ldi	r31, 0x00	; 0
    6aa8:	e0 56       	subi	r30, 0x60	; 96
    6aaa:	f7 4f       	sbci	r31, 0xF7	; 247
    6aac:	81 81       	ldd	r24, Z+1	; 0x01
    6aae:	90 e0       	ldi	r25, 0x00	; 0
    6ab0:	c0 97       	sbiw	r24, 0x30	; 48
    6ab2:	82 0f       	add	r24, r18
    6ab4:	91 1d       	adc	r25, r1
    6ab6:	80 93 8f 08 	sts	0x088F, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6aba:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6abc:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6abe:	b0 e0       	ldi	r27, 0x00	; 0
    6ac0:	a0 56       	subi	r26, 0x60	; 96
    6ac2:	b7 4f       	sbci	r27, 0xF7	; 247
    6ac4:	12 96       	adiw	r26, 0x02	; 2
    6ac6:	8c 91       	ld	r24, X
    6ac8:	88 0f       	add	r24, r24
    6aca:	80 56       	subi	r24, 0x60	; 96
    6acc:	28 2f       	mov	r18, r24
    6ace:	22 0f       	add	r18, r18
    6ad0:	22 0f       	add	r18, r18
    6ad2:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6ad4:	f0 e0       	ldi	r31, 0x00	; 0
    6ad6:	e0 56       	subi	r30, 0x60	; 96
    6ad8:	f7 4f       	sbci	r31, 0xF7	; 247
    6ada:	83 81       	ldd	r24, Z+3	; 0x03
    6adc:	90 e0       	ldi	r25, 0x00	; 0
    6ade:	c0 97       	sbiw	r24, 0x30	; 48
    6ae0:	82 0f       	add	r24, r18
    6ae2:	91 1d       	adc	r25, r1
    6ae4:	80 93 8e 08 	sts	0x088E, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6ae8:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6aea:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6aec:	b0 e0       	ldi	r27, 0x00	; 0
    6aee:	a0 56       	subi	r26, 0x60	; 96
    6af0:	b7 4f       	sbci	r27, 0xF7	; 247
    6af2:	14 96       	adiw	r26, 0x04	; 4
    6af4:	8c 91       	ld	r24, X
    6af6:	88 0f       	add	r24, r24
    6af8:	80 56       	subi	r24, 0x60	; 96
    6afa:	28 2f       	mov	r18, r24
    6afc:	22 0f       	add	r18, r18
    6afe:	22 0f       	add	r18, r18
    6b00:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6b02:	f0 e0       	ldi	r31, 0x00	; 0
    6b04:	e0 56       	subi	r30, 0x60	; 96
    6b06:	f7 4f       	sbci	r31, 0xF7	; 247
    6b08:	85 81       	ldd	r24, Z+5	; 0x05
    6b0a:	90 e0       	ldi	r25, 0x00	; 0
    6b0c:	c0 97       	sbiw	r24, 0x30	; 48
    6b0e:	82 0f       	add	r24, r18
    6b10:	91 1d       	adc	r25, r1
    6b12:	80 93 8d 08 	sts	0x088D, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    6b16:	8e 2d       	mov	r24, r14
    6b18:	87 7f       	andi	r24, 0xF7	; 247
    6b1a:	80 93 e8 08 	sts	0x08E8, r24
	}
	//fix status pruefen, wenn implementiert
}
    6b1e:	0f 90       	pop	r0
    6b20:	0f 90       	pop	r0
    6b22:	0f 90       	pop	r0
    6b24:	0f 90       	pop	r0
    6b26:	df 91       	pop	r29
    6b28:	cf 91       	pop	r28
    6b2a:	1f 91       	pop	r17
    6b2c:	0f 91       	pop	r16
    6b2e:	ff 90       	pop	r15
    6b30:	ef 90       	pop	r14
    6b32:	bf 90       	pop	r11
    6b34:	af 90       	pop	r10
    6b36:	9f 90       	pop	r9
    6b38:	8f 90       	pop	r8
    6b3a:	7f 90       	pop	r7
    6b3c:	6f 90       	pop	r6
    6b3e:	5f 90       	pop	r5
    6b40:	4f 90       	pop	r4
    6b42:	08 95       	ret

00006b44 <main>:
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
}

int main(void)
{
    6b44:	cf 93       	push	r28
    6b46:	df 93       	push	r29
    6b48:	cd b7       	in	r28, 0x3d	; 61
    6b4a:	de b7       	in	r29, 0x3e	; 62
    6b4c:	65 97       	sbiw	r28, 0x15	; 21
    6b4e:	0f b6       	in	r0, 0x3f	; 63
    6b50:	f8 94       	cli
    6b52:	de bf       	out	0x3e, r29	; 62
    6b54:	0f be       	out	0x3f, r0	; 63
    6b56:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    6b58:	2a d8       	rcall	.-4012   	; 0x5bae <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6b5a:	8a e2       	ldi	r24, 0x2A	; 42
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	0e 94 da 46 	call	0x8db4	; 0x8db4 <malloc>
    6b62:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6b64:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6b66:	8b e1       	ldi	r24, 0x1B	; 27
    6b68:	9a e0       	ldi	r25, 0x0A	; 10
    6b6a:	90 8f       	std	Z+24, r25	; 0x18
    6b6c:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6b6e:	8c e1       	ldi	r24, 0x1C	; 28
    6b70:	9e e0       	ldi	r25, 0x0E	; 14
    6b72:	92 8f       	std	Z+26, r25	; 0x1a
    6b74:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    6b76:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6b78:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6b7a:	81 e0       	ldi	r24, 0x01	; 1
    6b7c:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    6b7e:	84 ef       	ldi	r24, 0xF4	; 244
    6b80:	93 e0       	ldi	r25, 0x03	; 3
    6b82:	91 83       	std	Z+1, r25	; 0x01
    6b84:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    6b86:	85 e5       	ldi	r24, 0x55	; 85
    6b88:	98 e6       	ldi	r25, 0x68	; 104
    6b8a:	a2 e7       	ldi	r26, 0x72	; 114
    6b8c:	b0 e0       	ldi	r27, 0x00	; 0
    6b8e:	89 83       	std	Y+1, r24	; 0x01
    6b90:	9a 83       	std	Y+2, r25	; 0x02
    6b92:	ab 83       	std	Y+3, r26	; 0x03
    6b94:	bc 83       	std	Y+4, r27	; 0x04
    6b96:	9e 01       	movw	r18, r28
    6b98:	2f 5f       	subi	r18, 0xFF	; 255
    6b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b9c:	cf 01       	movw	r24, r30
    6b9e:	4b 96       	adiw	r24, 0x1b	; 27
    6ba0:	be 01       	movw	r22, r28
    6ba2:	65 5f       	subi	r22, 0xF5	; 245
    6ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ba6:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6ba8:	40 e2       	ldi	r20, 0x20	; 32
    6baa:	50 2f       	mov	r21, r16
    6bac:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6bae:	54 30       	cpi	r21, 0x04	; 4
    6bb0:	28 f4       	brcc	.+10     	; 0x6bbc <main+0x78>
			{
				name[i] = na[i];
    6bb2:	d8 01       	movw	r26, r16
    6bb4:	5c 91       	ld	r21, X
    6bb6:	dc 01       	movw	r26, r24
    6bb8:	5c 93       	st	X, r21
    6bba:	02 c0       	rjmp	.+4      	; 0x6bc0 <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    6bbc:	dc 01       	movw	r26, r24
    6bbe:	4c 93       	st	X, r20
    6bc0:	0f 5f       	subi	r16, 0xFF	; 255
    6bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    6bc4:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    6bc6:	06 17       	cp	r16, r22
    6bc8:	17 07       	cpc	r17, r23
    6bca:	79 f7       	brne	.-34     	; 0x6baa <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    6bcc:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    6bce:	83 e0       	ldi	r24, 0x03	; 3
    6bd0:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6bd2:	fa 83       	std	Y+2, r31	; 0x02
    6bd4:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6bd6:	89 e2       	ldi	r24, 0x29	; 41
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	0e 94 da 46 	call	0x8db4	; 0x8db4 <malloc>
    6bde:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6be0:	fc 01       	movw	r30, r24
    6be2:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6be4:	8b e1       	ldi	r24, 0x1B	; 27
    6be6:	9a e0       	ldi	r25, 0x0A	; 10
    6be8:	90 8f       	std	Z+24, r25	; 0x18
    6bea:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6bec:	8c e1       	ldi	r24, 0x1C	; 28
    6bee:	9e e0       	ldi	r25, 0x0E	; 14
    6bf0:	92 8f       	std	Z+26, r25	; 0x1a
    6bf2:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    6bf4:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6bf6:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6bf8:	81 e0       	ldi	r24, 0x01	; 1
    6bfa:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    6bfc:	8c ef       	ldi	r24, 0xFC	; 252
    6bfe:	93 e0       	ldi	r25, 0x03	; 3
    6c00:	91 83       	std	Z+1, r25	; 0x01
    6c02:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    6c04:	86 e0       	ldi	r24, 0x06	; 6
    6c06:	ee e3       	ldi	r30, 0x3E	; 62
    6c08:	f2 e0       	ldi	r31, 0x02	; 2
    6c0a:	de 01       	movw	r26, r28
    6c0c:	1d 96       	adiw	r26, 0x0d	; 13
    6c0e:	01 90       	ld	r0, Z+
    6c10:	0d 92       	st	X+, r0
    6c12:	8a 95       	dec	r24
    6c14:	e1 f7       	brne	.-8      	; 0x6c0e <main+0xca>
    6c16:	ce 01       	movw	r24, r28
    6c18:	0d 96       	adiw	r24, 0x0d	; 13
    6c1a:	d8 01       	movw	r26, r16
    6c1c:	5b 96       	adiw	r26, 0x1b	; 27
    6c1e:	ae 01       	movw	r20, r28
    6c20:	49 5e       	subi	r20, 0xE9	; 233
    6c22:	5f 4f       	sbci	r21, 0xFF	; 255
    6c24:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6c26:	20 e2       	ldi	r18, 0x20	; 32
    6c28:	3e 2f       	mov	r19, r30
    6c2a:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6c2c:	36 30       	cpi	r19, 0x06	; 6
    6c2e:	18 f4       	brcc	.+6      	; 0x6c36 <main+0xf2>
			{
				name[i] = na[i];
    6c30:	30 81       	ld	r19, Z
    6c32:	3c 93       	st	X, r19
    6c34:	01 c0       	rjmp	.+2      	; 0x6c38 <main+0xf4>
			}
			else
			{
				name[i] = ' ';
    6c36:	2c 93       	st	X, r18
    6c38:	31 96       	adiw	r30, 0x01	; 1
    6c3a:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    6c3c:	e4 17       	cp	r30, r20
    6c3e:	f5 07       	cpc	r31, r21
    6c40:	99 f7       	brne	.-26     	; 0x6c28 <main+0xe4>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    6c42:	0e 94 ba 2c 	call	0x5974	; 0x5974 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6c46:	1c 83       	std	Y+4, r17	; 0x04
    6c48:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6c4a:	89 e2       	ldi	r24, 0x29	; 41
    6c4c:	90 e0       	ldi	r25, 0x00	; 0
    6c4e:	0e 94 da 46 	call	0x8db4	; 0x8db4 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6c52:	dc 01       	movw	r26, r24
    6c54:	56 96       	adiw	r26, 0x16	; 22
    6c56:	1c 92       	st	X, r1
    6c58:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    6c5a:	2b e1       	ldi	r18, 0x1B	; 27
    6c5c:	3a e0       	ldi	r19, 0x0A	; 10
    6c5e:	58 96       	adiw	r26, 0x18	; 24
    6c60:	3c 93       	st	X, r19
    6c62:	2e 93       	st	-X, r18
    6c64:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    6c66:	2c e1       	ldi	r18, 0x1C	; 28
    6c68:	3e e0       	ldi	r19, 0x0E	; 14
    6c6a:	5a 96       	adiw	r26, 0x1a	; 26
    6c6c:	3c 93       	st	X, r19
    6c6e:	2e 93       	st	-X, r18
    6c70:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    6c72:	95 96       	adiw	r26, 0x25	; 37
    6c74:	1c 92       	st	X, r1
    6c76:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    6c78:	96 96       	adiw	r26, 0x26	; 38
    6c7a:	1c 92       	st	X, r1
    6c7c:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    6c7e:	21 e0       	ldi	r18, 0x01	; 1
    6c80:	98 96       	adiw	r26, 0x28	; 40
    6c82:	2c 93       	st	X, r18
    6c84:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    6c86:	24 e0       	ldi	r18, 0x04	; 4
    6c88:	34 e0       	ldi	r19, 0x04	; 4
    6c8a:	2d 93       	st	X+, r18
    6c8c:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    6c8e:	28 e0       	ldi	r18, 0x08	; 8
    6c90:	e4 e4       	ldi	r30, 0x44	; 68
    6c92:	f2 e0       	ldi	r31, 0x02	; 2
    6c94:	de 01       	movw	r26, r28
    6c96:	1d 96       	adiw	r26, 0x0d	; 13
    6c98:	01 90       	ld	r0, Z+
    6c9a:	0d 92       	st	X+, r0
    6c9c:	2a 95       	dec	r18
    6c9e:	e1 f7       	brne	.-8      	; 0x6c98 <main+0x154>
    6ca0:	9e 01       	movw	r18, r28
    6ca2:	23 5f       	subi	r18, 0xF3	; 243
    6ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca6:	dc 01       	movw	r26, r24
    6ca8:	5b 96       	adiw	r26, 0x1b	; 27
    6caa:	be 01       	movw	r22, r28
    6cac:	69 5e       	subi	r22, 0xE9	; 233
    6cae:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb0:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6cb2:	40 e2       	ldi	r20, 0x20	; 32
    6cb4:	5e 2f       	mov	r21, r30
    6cb6:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6cb8:	58 30       	cpi	r21, 0x08	; 8
    6cba:	18 f4       	brcc	.+6      	; 0x6cc2 <main+0x17e>
			{
				name[i] = na[i];
    6cbc:	50 81       	ld	r21, Z
    6cbe:	5c 93       	st	X, r21
    6cc0:	01 c0       	rjmp	.+2      	; 0x6cc4 <main+0x180>
			}
			else
			{
				name[i] = ' ';
    6cc2:	4c 93       	st	X, r20
    6cc4:	31 96       	adiw	r30, 0x01	; 1
    6cc6:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    6cc8:	e6 17       	cp	r30, r22
    6cca:	f7 07       	cpc	r31, r23
    6ccc:	99 f7       	brne	.-26     	; 0x6cb4 <main+0x170>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6cce:	9e 83       	std	Y+6, r25	; 0x06
    6cd0:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6cd2:	89 e2       	ldi	r24, 0x29	; 41
    6cd4:	90 e0       	ldi	r25, 0x00	; 0
    6cd6:	0e 94 da 46 	call	0x8db4	; 0x8db4 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6cda:	fc 01       	movw	r30, r24
    6cdc:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6cde:	2b e1       	ldi	r18, 0x1B	; 27
    6ce0:	3a e0       	ldi	r19, 0x0A	; 10
    6ce2:	30 8f       	std	Z+24, r19	; 0x18
    6ce4:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    6ce6:	2c e1       	ldi	r18, 0x1C	; 28
    6ce8:	3e e0       	ldi	r19, 0x0E	; 14
    6cea:	32 8f       	std	Z+26, r19	; 0x1a
    6cec:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    6cee:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6cf0:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6cf2:	21 e0       	ldi	r18, 0x01	; 1
    6cf4:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    6cf6:	2c e0       	ldi	r18, 0x0C	; 12
    6cf8:	34 e0       	ldi	r19, 0x04	; 4
    6cfa:	31 83       	std	Z+1, r19	; 0x01
    6cfc:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    6cfe:	29 e0       	ldi	r18, 0x09	; 9
    6d00:	e8 e1       	ldi	r30, 0x18	; 24
    6d02:	f3 e0       	ldi	r31, 0x03	; 3
    6d04:	de 01       	movw	r26, r28
    6d06:	1d 96       	adiw	r26, 0x0d	; 13
    6d08:	01 90       	ld	r0, Z+
    6d0a:	0d 92       	st	X+, r0
    6d0c:	2a 95       	dec	r18
    6d0e:	e1 f7       	brne	.-8      	; 0x6d08 <main+0x1c4>
    6d10:	9e 01       	movw	r18, r28
    6d12:	23 5f       	subi	r18, 0xF3	; 243
    6d14:	3f 4f       	sbci	r19, 0xFF	; 255
    6d16:	dc 01       	movw	r26, r24
    6d18:	5b 96       	adiw	r26, 0x1b	; 27
    6d1a:	be 01       	movw	r22, r28
    6d1c:	69 5e       	subi	r22, 0xE9	; 233
    6d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    6d20:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6d22:	40 e2       	ldi	r20, 0x20	; 32
    6d24:	5e 2f       	mov	r21, r30
    6d26:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6d28:	59 30       	cpi	r21, 0x09	; 9
    6d2a:	18 f4       	brcc	.+6      	; 0x6d32 <main+0x1ee>
			{
				name[i] = na[i];
    6d2c:	50 81       	ld	r21, Z
    6d2e:	5c 93       	st	X, r21
    6d30:	01 c0       	rjmp	.+2      	; 0x6d34 <main+0x1f0>
			}
			else
			{
				name[i] = ' ';
    6d32:	4c 93       	st	X, r20
    6d34:	31 96       	adiw	r30, 0x01	; 1
    6d36:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    6d38:	e6 17       	cp	r30, r22
    6d3a:	f7 07       	cpc	r31, r23
    6d3c:	99 f7       	brne	.-26     	; 0x6d24 <main+0x1e0>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 5;
    6d3e:	25 e0       	ldi	r18, 0x05	; 5
    6d40:	dc 01       	movw	r26, r24
    6d42:	97 96       	adiw	r26, 0x27	; 39
    6d44:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6d46:	98 87       	std	Y+8, r25	; 0x08
    6d48:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6d4a:	89 e2       	ldi	r24, 0x29	; 41
    6d4c:	90 e0       	ldi	r25, 0x00	; 0
    6d4e:	0e 94 da 46 	call	0x8db4	; 0x8db4 <malloc>
    6d52:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6d54:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6d56:	0f 2e       	mov	r0, r31
    6d58:	fb e1       	ldi	r31, 0x1B	; 27
    6d5a:	cf 2e       	mov	r12, r31
    6d5c:	fa e0       	ldi	r31, 0x0A	; 10
    6d5e:	df 2e       	mov	r13, r31
    6d60:	f0 2d       	mov	r31, r0
    6d62:	d0 8e       	std	Z+24, r13	; 0x18
    6d64:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6d66:	0f 2e       	mov	r0, r31
    6d68:	fc e1       	ldi	r31, 0x1C	; 28
    6d6a:	ef 2e       	mov	r14, r31
    6d6c:	fe e0       	ldi	r31, 0x0E	; 14
    6d6e:	ff 2e       	mov	r15, r31
    6d70:	f0 2d       	mov	r31, r0
    6d72:	f2 8e       	std	Z+26, r15	; 0x1a
    6d74:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6d76:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6d78:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6d7a:	11 e0       	ldi	r17, 0x01	; 1
    6d7c:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    6d7e:	84 e2       	ldi	r24, 0x24	; 36
    6d80:	94 e0       	ldi	r25, 0x04	; 4
    6d82:	91 83       	std	Z+1, r25	; 0x01
    6d84:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6d86:	fa 87       	std	Y+10, r31	; 0x0a
    6d88:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6d8a:	89 e2       	ldi	r24, 0x29	; 41
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	0e 94 da 46 	call	0x8db4	; 0x8db4 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6d92:	fc 01       	movw	r30, r24
    6d94:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6d96:	d0 8e       	std	Z+24, r13	; 0x18
    6d98:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6d9a:	f2 8e       	std	Z+26, r15	; 0x1a
    6d9c:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6d9e:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6da0:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6da2:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    6da4:	2c e1       	ldi	r18, 0x1C	; 28
    6da6:	34 e0       	ldi	r19, 0x04	; 4
    6da8:	31 83       	std	Z+1, r19	; 0x01
    6daa:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    6dac:	26 e0       	ldi	r18, 0x06	; 6
    6dae:	e1 e2       	ldi	r30, 0x21	; 33
    6db0:	f3 e0       	ldi	r31, 0x03	; 3
    6db2:	de 01       	movw	r26, r28
    6db4:	1d 96       	adiw	r26, 0x0d	; 13
    6db6:	01 90       	ld	r0, Z+
    6db8:	0d 92       	st	X+, r0
    6dba:	2a 95       	dec	r18
    6dbc:	e1 f7       	brne	.-8      	; 0x6db6 <main+0x272>
    6dbe:	9e 01       	movw	r18, r28
    6dc0:	23 5f       	subi	r18, 0xF3	; 243
    6dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6dc4:	dc 01       	movw	r26, r24
    6dc6:	5b 96       	adiw	r26, 0x1b	; 27
    6dc8:	be 01       	movw	r22, r28
    6dca:	69 5e       	subi	r22, 0xE9	; 233
    6dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    6dce:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6dd0:	40 e2       	ldi	r20, 0x20	; 32
    6dd2:	5e 2f       	mov	r21, r30
    6dd4:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    6dd6:	56 30       	cpi	r21, 0x06	; 6
    6dd8:	18 f4       	brcc	.+6      	; 0x6de0 <main+0x29c>
			{
				name[i] = na[i];
    6dda:	50 81       	ld	r21, Z
    6ddc:	5c 93       	st	X, r21
    6dde:	01 c0       	rjmp	.+2      	; 0x6de2 <main+0x29e>
			}
			else
			{
				name[i] = ' ';
    6de0:	4c 93       	st	X, r20
    6de2:	31 96       	adiw	r30, 0x01	; 1
    6de4:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    6de6:	e6 17       	cp	r30, r22
    6de8:	f7 07       	cpc	r31, r23
    6dea:	99 f7       	brne	.-26     	; 0x6dd2 <main+0x28e>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    6dec:	dc 01       	movw	r26, r24
    6dee:	98 96       	adiw	r26, 0x28	; 40
    6df0:	1c 92       	st	X, r1
    6df2:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    6df4:	25 e0       	ldi	r18, 0x05	; 5
    6df6:	97 96       	adiw	r26, 0x27	; 39
    6df8:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6dfa:	9c 87       	std	Y+12, r25	; 0x0c
    6dfc:	8b 87       	std	Y+11, r24	; 0x0b
	
	druck.bmp180_getcalibration();
    6dfe:	87 ef       	ldi	r24, 0xF7	; 247
    6e00:	98 e0       	ldi	r25, 0x08	; 8
    6e02:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN6BMP18021bmp180_getcalibrationEv>
	//speichern der Werte und per hand rechnen
	
	
	while (1) 
    {
		tastaturhandler(Folien[position],Tastatur.unified());
    6e06:	8f e0       	ldi	r24, 0x0F	; 15
    6e08:	9a e0       	ldi	r25, 0x0A	; 10
    6e0a:	0e 94 70 24 	call	0x48e0	; 0x48e0 <_ZN9Interface7unifiedEv>
    6e0e:	e0 91 ea 08 	lds	r30, 0x08EA
    6e12:	f0 e0       	ldi	r31, 0x00	; 0
    6e14:	ee 0f       	add	r30, r30
    6e16:	ff 1f       	adc	r31, r31
    6e18:	21 e0       	ldi	r18, 0x01	; 1
    6e1a:	30 e0       	ldi	r19, 0x00	; 0
    6e1c:	2c 0f       	add	r18, r28
    6e1e:	3d 1f       	adc	r19, r29
    6e20:	e2 0f       	add	r30, r18
    6e22:	f3 1f       	adc	r31, r19
    6e24:	68 2f       	mov	r22, r24
    6e26:	80 81       	ld	r24, Z
    6e28:	91 81       	ldd	r25, Z+1	; 0x01
    6e2a:	0f d8       	rcall	.-4066   	; 0x5e4a <_Z15tastaturhandlerP7monitorh>
		maininterupthandler(Folien[position]);
    6e2c:	e0 91 ea 08 	lds	r30, 0x08EA
    6e30:	f0 e0       	ldi	r31, 0x00	; 0
    6e32:	ee 0f       	add	r30, r30
    6e34:	ff 1f       	adc	r31, r31
    6e36:	81 e0       	ldi	r24, 0x01	; 1
    6e38:	90 e0       	ldi	r25, 0x00	; 0
    6e3a:	8c 0f       	add	r24, r28
    6e3c:	9d 1f       	adc	r25, r29
    6e3e:	e8 0f       	add	r30, r24
    6e40:	f9 1f       	adc	r31, r25
    6e42:	80 81       	ld	r24, Z
    6e44:	91 81       	ldd	r25, Z+1	; 0x01
    6e46:	9c d8       	rcall	.-3784   	; 0x5f80 <_Z19maininterupthandlerP7monitor>
		gpshandler();
    6e48:	cd da       	rcall	.-2662   	; 0x63e4 <_Z10gpshandlerv>
    }
    6e4a:	dd cf       	rjmp	.-70     	; 0x6e06 <main+0x2c2>

00006e4c <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    6e4c:	2f 92       	push	r2
    6e4e:	3f 92       	push	r3
    6e50:	4f 92       	push	r4
    6e52:	5f 92       	push	r5
    6e54:	6f 92       	push	r6
    6e56:	7f 92       	push	r7
    6e58:	8f 92       	push	r8
    6e5a:	9f 92       	push	r9
    6e5c:	af 92       	push	r10
    6e5e:	bf 92       	push	r11
    6e60:	cf 92       	push	r12
    6e62:	df 92       	push	r13
    6e64:	ef 92       	push	r14
    6e66:	ff 92       	push	r15
    6e68:	0f 93       	push	r16
    6e6a:	1f 93       	push	r17
    6e6c:	cf 93       	push	r28
    6e6e:	df 93       	push	r29
    6e70:	cd b7       	in	r28, 0x3d	; 61
    6e72:	de b7       	in	r29, 0x3e	; 62
    6e74:	66 97       	sbiw	r28, 0x16	; 22
    6e76:	0f b6       	in	r0, 0x3f	; 63
    6e78:	f8 94       	cli
    6e7a:	de bf       	out	0x3e, r29	; 62
    6e7c:	0f be       	out	0x3f, r0	; 63
    6e7e:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    6e80:	8c e1       	ldi	r24, 0x1C	; 28
    6e82:	9e e0       	ldi	r25, 0x0E	; 14
    6e84:	c5 d7       	rcall	.+3978   	; 0x7e10 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    6e86:	8b e1       	ldi	r24, 0x1B	; 27
    6e88:	9a e0       	ldi	r25, 0x0A	; 10
    6e8a:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    6e8e:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6e90:	0f 2e       	mov	r0, r31
    6e92:	ff e0       	ldi	r31, 0x0F	; 15
    6e94:	7f 2e       	mov	r7, r31
    6e96:	f0 2d       	mov	r31, r0
    6e98:	ce 01       	movw	r24, r28
    6e9a:	01 96       	adiw	r24, 0x01	; 1
    6e9c:	2c 01       	movw	r4, r24
    6e9e:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    6ea0:	8d 8b       	std	Y+21, r24	; 0x15
    6ea2:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6ea4:	0f 2e       	mov	r0, r31
    6ea6:	fc e1       	ldi	r31, 0x1C	; 28
    6ea8:	cf 2e       	mov	r12, r31
    6eaa:	fe e0       	ldi	r31, 0x0E	; 14
    6eac:	df 2e       	mov	r13, r31
    6eae:	f0 2d       	mov	r31, r0
    6eb0:	0f 2e       	mov	r0, r31
    6eb2:	fd ec       	ldi	r31, 0xCD	; 205
    6eb4:	8f 2e       	mov	r8, r31
    6eb6:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    6eb8:	68 94       	set
    6eba:	ee 24       	eor	r14, r14
    6ebc:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    6ebe:	0f 2e       	mov	r0, r31
    6ec0:	fe e2       	ldi	r31, 0x2E	; 46
    6ec2:	6f 2e       	mov	r6, r31
    6ec4:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6ec6:	e7 e2       	ldi	r30, 0x27	; 39
    6ec8:	f3 e0       	ldi	r31, 0x03	; 3
    6eca:	d2 01       	movw	r26, r4
    6ecc:	87 2d       	mov	r24, r7
    6ece:	01 90       	ld	r0, Z+
    6ed0:	0d 92       	st	X+, r0
    6ed2:	8a 95       	dec	r24
    6ed4:	e1 f7       	brne	.-8      	; 0x6ece <_Z13uhreinstellenv+0x82>
    6ed6:	52 01       	movw	r10, r4
    6ed8:	12 01       	movw	r2, r4
    6eda:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    6edc:	f1 01       	movw	r30, r2
    6ede:	61 91       	ld	r22, Z+
    6ee0:	1f 01       	movw	r2, r30
    6ee2:	2f 2d       	mov	r18, r15
    6ee4:	41 2f       	mov	r20, r17
    6ee6:	8b e1       	ldi	r24, 0x1B	; 27
    6ee8:	9a e0       	ldi	r25, 0x0A	; 10
    6eea:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    6eee:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    6ef0:	14 35       	cpi	r17, 0x54	; 84
    6ef2:	a1 f7       	brne	.-24     	; 0x6edc <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    6ef4:	e5 ea       	ldi	r30, 0xA5	; 165
    6ef6:	f1 e0       	ldi	r31, 0x01	; 1
    6ef8:	d2 01       	movw	r26, r4
    6efa:	87 2d       	mov	r24, r7
    6efc:	01 90       	ld	r0, Z+
    6efe:	0d 92       	st	X+, r0
    6f00:	8a 95       	dec	r24
    6f02:	e1 f7       	brne	.-8      	; 0x6efc <_Z13uhreinstellenv+0xb0>
    6f04:	2d 88       	ldd	r2, Y+21	; 0x15
    6f06:	3e 88       	ldd	r3, Y+22	; 0x16
    6f08:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    6f0a:	f1 01       	movw	r30, r2
    6f0c:	61 91       	ld	r22, Z+
    6f0e:	1f 01       	movw	r2, r30
    6f10:	28 e0       	ldi	r18, 0x08	; 8
    6f12:	41 2f       	mov	r20, r17
    6f14:	8b e1       	ldi	r24, 0x1B	; 27
    6f16:	9a e0       	ldi	r25, 0x0A	; 10
    6f18:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    6f1c:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    6f1e:	14 35       	cpi	r17, 0x54	; 84
    6f20:	a1 f7       	brne	.-24     	; 0x6f0a <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6f22:	f6 01       	movw	r30, r12
    6f24:	90 89       	ldd	r25, Z+16	; 0x10
    6f26:	98 9d       	mul	r25, r8
    6f28:	81 2d       	mov	r24, r1
    6f2a:	11 24       	eor	r1, r1
    6f2c:	86 95       	lsr	r24
    6f2e:	86 95       	lsr	r24
    6f30:	86 95       	lsr	r24
    6f32:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    6f34:	88 0f       	add	r24, r24
    6f36:	28 2f       	mov	r18, r24
    6f38:	22 0f       	add	r18, r18
    6f3a:	22 0f       	add	r18, r18
    6f3c:	82 0f       	add	r24, r18
    6f3e:	98 1b       	sub	r25, r24
    6f40:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    6f42:	fa e3       	ldi	r31, 0x3A	; 58
    6f44:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    6f46:	f6 01       	movw	r30, r12
    6f48:	91 89       	ldd	r25, Z+17	; 0x11
    6f4a:	98 9d       	mul	r25, r8
    6f4c:	81 2d       	mov	r24, r1
    6f4e:	11 24       	eor	r1, r1
    6f50:	86 95       	lsr	r24
    6f52:	86 95       	lsr	r24
    6f54:	86 95       	lsr	r24
    6f56:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    6f58:	88 0f       	add	r24, r24
    6f5a:	28 2f       	mov	r18, r24
    6f5c:	22 0f       	add	r18, r18
    6f5e:	22 0f       	add	r18, r18
    6f60:	82 0f       	add	r24, r18
    6f62:	98 1b       	sub	r25, r24
    6f64:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    6f66:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    6f68:	94 89       	ldd	r25, Z+20	; 0x14
    6f6a:	98 9d       	mul	r25, r8
    6f6c:	81 2d       	mov	r24, r1
    6f6e:	11 24       	eor	r1, r1
    6f70:	86 95       	lsr	r24
    6f72:	86 95       	lsr	r24
    6f74:	86 95       	lsr	r24
    6f76:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    6f78:	88 0f       	add	r24, r24
    6f7a:	28 2f       	mov	r18, r24
    6f7c:	22 0f       	add	r18, r18
    6f7e:	22 0f       	add	r18, r18
    6f80:	82 0f       	add	r24, r18
    6f82:	98 1b       	sub	r25, r24
    6f84:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    6f86:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    6f88:	96 89       	ldd	r25, Z+22	; 0x16
    6f8a:	98 9d       	mul	r25, r8
    6f8c:	81 2d       	mov	r24, r1
    6f8e:	11 24       	eor	r1, r1
    6f90:	86 95       	lsr	r24
    6f92:	86 95       	lsr	r24
    6f94:	86 95       	lsr	r24
    6f96:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    6f98:	88 0f       	add	r24, r24
    6f9a:	28 2f       	mov	r18, r24
    6f9c:	22 0f       	add	r18, r18
    6f9e:	22 0f       	add	r18, r18
    6fa0:	82 0f       	add	r24, r18
    6fa2:	98 1b       	sub	r25, r24
    6fa4:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    6fa6:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    6fa8:	97 89       	ldd	r25, Z+23	; 0x17
    6faa:	98 9d       	mul	r25, r8
    6fac:	81 2d       	mov	r24, r1
    6fae:	11 24       	eor	r1, r1
    6fb0:	86 95       	lsr	r24
    6fb2:	86 95       	lsr	r24
    6fb4:	86 95       	lsr	r24
    6fb6:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    6fb8:	88 0f       	add	r24, r24
    6fba:	28 2f       	mov	r18, r24
    6fbc:	22 0f       	add	r18, r18
    6fbe:	22 0f       	add	r18, r18
    6fc0:	82 0f       	add	r24, r18
    6fc2:	98 1b       	sub	r25, r24
    6fc4:	9e 87       	std	Y+14, r25	; 0x0e
    6fc6:	0d 89       	ldd	r16, Y+21	; 0x15
    6fc8:	1e 89       	ldd	r17, Y+22	; 0x16
    6fca:	2f 2c       	mov	r2, r15
    6fcc:	33 24       	eor	r3, r3
    6fce:	33 94       	inc	r3
    6fd0:	05 c0       	rjmp	.+10     	; 0x6fdc <_Z13uhreinstellenv+0x190>
    6fd2:	33 94       	inc	r3
    6fd4:	0f 5f       	subi	r16, 0xFF	; 255
    6fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    6fd8:	f0 e1       	ldi	r31, 0x10	; 16
    6fda:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    6fdc:	83 e0       	ldi	r24, 0x03	; 3
    6fde:	38 16       	cp	r3, r24
    6fe0:	61 f0       	breq	.+24     	; 0x6ffa <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    6fe2:	20 e1       	ldi	r18, 0x10	; 16
    6fe4:	42 2d       	mov	r20, r2
    6fe6:	f8 01       	movw	r30, r16
    6fe8:	60 81       	ld	r22, Z
    6fea:	8b e1       	ldi	r24, 0x1B	; 27
    6fec:	9a e0       	ldi	r25, 0x0A	; 10
    6fee:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    6ff2:	f4 e0       	ldi	r31, 0x04	; 4
    6ff4:	f3 15       	cp	r31, r3
    6ff6:	68 f7       	brcc	.-38     	; 0x6fd2 <_Z13uhreinstellenv+0x186>
    6ff8:	08 c0       	rjmp	.+16     	; 0x700a <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    6ffa:	24 e1       	ldi	r18, 0x14	; 20
    6ffc:	48 e2       	ldi	r20, 0x28	; 40
    6ffe:	6b 81       	ldd	r22, Y+3	; 0x03
    7000:	8b e1       	ldi	r24, 0x1B	; 27
    7002:	9a e0       	ldi	r25, 0x0A	; 10
    7004:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7008:	e4 cf       	rjmp	.-56     	; 0x6fd2 <_Z13uhreinstellenv+0x186>
    700a:	8e 01       	movw	r16, r28
    700c:	09 5f       	subi	r16, 0xF9	; 249
    700e:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    7010:	2f 2c       	mov	r2, r15
    7012:	0f 2e       	mov	r0, r31
    7014:	f6 e0       	ldi	r31, 0x06	; 6
    7016:	3f 2e       	mov	r3, r31
    7018:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    701a:	88 e0       	ldi	r24, 0x08	; 8
    701c:	38 16       	cp	r3, r24
    701e:	61 f0       	breq	.+24     	; 0x7038 <_Z13uhreinstellenv+0x1ec>
    7020:	9b e0       	ldi	r25, 0x0B	; 11
    7022:	39 16       	cp	r3, r25
    7024:	49 f0       	breq	.+18     	; 0x7038 <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    7026:	2e 2d       	mov	r18, r14
    7028:	42 2d       	mov	r20, r2
    702a:	f8 01       	movw	r30, r16
    702c:	60 81       	ld	r22, Z
    702e:	8b e1       	ldi	r24, 0x1B	; 27
    7030:	9a e0       	ldi	r25, 0x0A	; 10
    7032:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display16draw_number16x16Ehhh>
    7036:	09 c0       	rjmp	.+18     	; 0x704a <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    7038:	28 e2       	ldi	r18, 0x28	; 40
    703a:	48 e0       	ldi	r20, 0x08	; 8
    703c:	42 0d       	add	r20, r2
    703e:	f8 01       	movw	r30, r16
    7040:	60 81       	ld	r22, Z
    7042:	8b e1       	ldi	r24, 0x1B	; 27
    7044:	9a e0       	ldi	r25, 0x0A	; 10
    7046:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    704a:	33 94       	inc	r3
    704c:	0f 5f       	subi	r16, 0xFF	; 255
    704e:	1f 4f       	sbci	r17, 0xFF	; 255
    7050:	f0 e1       	ldi	r31, 0x10	; 16
    7052:	2f 0e       	add	r2, r31
    7054:	8e e0       	ldi	r24, 0x0E	; 14
    7056:	38 12       	cpse	r3, r24
    7058:	e0 cf       	rjmp	.-64     	; 0x701a <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    705a:	8b e1       	ldi	r24, 0x1B	; 27
    705c:	9a e0       	ldi	r25, 0x0A	; 10
    705e:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    7062:	8b e1       	ldi	r24, 0x1B	; 27
    7064:	9a e0       	ldi	r25, 0x0A	; 10
    7066:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
		switch (pos) {
    706a:	89 2d       	mov	r24, r9
    706c:	90 e0       	ldi	r25, 0x00	; 0
    706e:	8a 30       	cpi	r24, 0x0A	; 10
    7070:	91 05       	cpc	r25, r1
    7072:	08 f0       	brcs	.+2      	; 0x7076 <_Z13uhreinstellenv+0x22a>
    7074:	2c c2       	rjmp	.+1112   	; 0x74ce <_Z13uhreinstellenv+0x682>
    7076:	fc 01       	movw	r30, r24
    7078:	ef 50       	subi	r30, 0x0F	; 15
    707a:	ff 4f       	sbci	r31, 0xFF	; 255
    707c:	0c 94 b2 46 	jmp	0x8d64	; 0x8d64 <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    7080:	8f e0       	ldi	r24, 0x0F	; 15
    7082:	9a e0       	ldi	r25, 0x0A	; 10
    7084:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    7088:	88 0f       	add	r24, r24
    708a:	98 2f       	mov	r25, r24
    708c:	99 0f       	add	r25, r25
    708e:	99 0f       	add	r25, r25
    7090:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    7092:	88 31       	cpi	r24, 0x18	; 24
    7094:	08 f4       	brcc	.+2      	; 0x7098 <_Z13uhreinstellenv+0x24c>
    7096:	57 c2       	rjmp	.+1198   	; 0x7546 <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    7098:	f6 01       	movw	r30, r12
    709a:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    709c:	e6 e3       	ldi	r30, 0x36	; 54
    709e:	f3 e0       	ldi	r31, 0x03	; 3
    70a0:	d2 01       	movw	r26, r4
    70a2:	87 2d       	mov	r24, r7
    70a4:	01 90       	ld	r0, Z+
    70a6:	0d 92       	st	X+, r0
    70a8:	8a 95       	dec	r24
    70aa:	e1 f7       	brne	.-8      	; 0x70a4 <_Z13uhreinstellenv+0x258>
    70ac:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    70ae:	f5 01       	movw	r30, r10
    70b0:	61 91       	ld	r22, Z+
    70b2:	5f 01       	movw	r10, r30
    70b4:	28 e3       	ldi	r18, 0x38	; 56
    70b6:	41 2f       	mov	r20, r17
    70b8:	8b e1       	ldi	r24, 0x1B	; 27
    70ba:	9a e0       	ldi	r25, 0x0A	; 10
    70bc:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    70c0:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    70c2:	14 35       	cpi	r17, 0x54	; 84
    70c4:	a1 f7       	brne	.-24     	; 0x70ae <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    70c6:	99 24       	eor	r9, r9
    70c8:	9a 94       	dec	r9
    70ca:	3f c2       	rjmp	.+1150   	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    70cc:	8f e0       	ldi	r24, 0x0F	; 15
    70ce:	9a e0       	ldi	r25, 0x0A	; 10
    70d0:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    70d4:	f6 01       	movw	r30, r12
    70d6:	20 89       	ldd	r18, Z+16	; 0x10
    70d8:	90 e0       	ldi	r25, 0x00	; 0
    70da:	82 0f       	add	r24, r18
    70dc:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    70de:	88 31       	cpi	r24, 0x18	; 24
    70e0:	10 f4       	brcc	.+4      	; 0x70e6 <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    70e2:	80 8b       	std	Z+16, r24	; 0x10
    70e4:	32 c2       	rjmp	.+1124   	; 0x754a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    70e6:	f6 01       	movw	r30, r12
    70e8:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    70ea:	e6 e3       	ldi	r30, 0x36	; 54
    70ec:	f3 e0       	ldi	r31, 0x03	; 3
    70ee:	d2 01       	movw	r26, r4
    70f0:	87 2d       	mov	r24, r7
    70f2:	01 90       	ld	r0, Z+
    70f4:	0d 92       	st	X+, r0
    70f6:	8a 95       	dec	r24
    70f8:	e1 f7       	brne	.-8      	; 0x70f2 <_Z13uhreinstellenv+0x2a6>
    70fa:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    70fc:	f5 01       	movw	r30, r10
    70fe:	61 91       	ld	r22, Z+
    7100:	5f 01       	movw	r10, r30
    7102:	28 e3       	ldi	r18, 0x38	; 56
    7104:	41 2f       	mov	r20, r17
    7106:	8b e1       	ldi	r24, 0x1B	; 27
    7108:	9a e0       	ldi	r25, 0x0A	; 10
    710a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    710e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7110:	14 35       	cpi	r17, 0x54	; 84
    7112:	a1 f7       	brne	.-24     	; 0x70fc <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    7114:	99 24       	eor	r9, r9
    7116:	9a 94       	dec	r9
    7118:	18 c2       	rjmp	.+1072   	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    711a:	8f e0       	ldi	r24, 0x0F	; 15
    711c:	9a e0       	ldi	r25, 0x0A	; 10
    711e:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    7122:	88 0f       	add	r24, r24
    7124:	98 2f       	mov	r25, r24
    7126:	99 0f       	add	r25, r25
    7128:	99 0f       	add	r25, r25
    712a:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    712c:	8c 33       	cpi	r24, 0x3C	; 60
    712e:	18 f4       	brcc	.+6      	; 0x7136 <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    7130:	f6 01       	movw	r30, r12
    7132:	81 8b       	std	Z+17, r24	; 0x11
    7134:	0a c2       	rjmp	.+1044   	; 0x754a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    7136:	f6 01       	movw	r30, r12
    7138:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    713a:	e5 e4       	ldi	r30, 0x45	; 69
    713c:	f3 e0       	ldi	r31, 0x03	; 3
    713e:	d2 01       	movw	r26, r4
    7140:	87 2d       	mov	r24, r7
    7142:	01 90       	ld	r0, Z+
    7144:	0d 92       	st	X+, r0
    7146:	8a 95       	dec	r24
    7148:	e1 f7       	brne	.-8      	; 0x7142 <_Z13uhreinstellenv+0x2f6>
    714a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    714c:	f5 01       	movw	r30, r10
    714e:	61 91       	ld	r22, Z+
    7150:	5f 01       	movw	r10, r30
    7152:	28 e3       	ldi	r18, 0x38	; 56
    7154:	41 2f       	mov	r20, r17
    7156:	8b e1       	ldi	r24, 0x1B	; 27
    7158:	9a e0       	ldi	r25, 0x0A	; 10
    715a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    715e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7160:	14 35       	cpi	r17, 0x54	; 84
    7162:	a1 f7       	brne	.-24     	; 0x714c <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    7164:	99 24       	eor	r9, r9
    7166:	93 94       	inc	r9
    7168:	f0 c1       	rjmp	.+992    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    716a:	8f e0       	ldi	r24, 0x0F	; 15
    716c:	9a e0       	ldi	r25, 0x0A	; 10
    716e:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    7172:	f6 01       	movw	r30, r12
    7174:	21 89       	ldd	r18, Z+17	; 0x11
    7176:	90 e0       	ldi	r25, 0x00	; 0
    7178:	82 0f       	add	r24, r18
    717a:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    717c:	8c 33       	cpi	r24, 0x3C	; 60
    717e:	10 f4       	brcc	.+4      	; 0x7184 <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7180:	81 8b       	std	Z+17, r24	; 0x11
    7182:	e3 c1       	rjmp	.+966    	; 0x754a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    7184:	f6 01       	movw	r30, r12
    7186:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7188:	e5 e4       	ldi	r30, 0x45	; 69
    718a:	f3 e0       	ldi	r31, 0x03	; 3
    718c:	d2 01       	movw	r26, r4
    718e:	87 2d       	mov	r24, r7
    7190:	01 90       	ld	r0, Z+
    7192:	0d 92       	st	X+, r0
    7194:	8a 95       	dec	r24
    7196:	e1 f7       	brne	.-8      	; 0x7190 <_Z13uhreinstellenv+0x344>
    7198:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    719a:	f5 01       	movw	r30, r10
    719c:	61 91       	ld	r22, Z+
    719e:	5f 01       	movw	r10, r30
    71a0:	28 e3       	ldi	r18, 0x38	; 56
    71a2:	41 2f       	mov	r20, r17
    71a4:	8b e1       	ldi	r24, 0x1B	; 27
    71a6:	9a e0       	ldi	r25, 0x0A	; 10
    71a8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    71ac:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    71ae:	14 35       	cpi	r17, 0x54	; 84
    71b0:	a1 f7       	brne	.-24     	; 0x719a <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    71b2:	99 24       	eor	r9, r9
    71b4:	93 94       	inc	r9
    71b6:	c9 c1       	rjmp	.+914    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    71b8:	8f e0       	ldi	r24, 0x0F	; 15
    71ba:	9a e0       	ldi	r25, 0x0A	; 10
    71bc:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    71c0:	88 0f       	add	r24, r24
    71c2:	98 2f       	mov	r25, r24
    71c4:	99 0f       	add	r25, r25
    71c6:	99 0f       	add	r25, r25
    71c8:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    71ca:	80 32       	cpi	r24, 0x20	; 32
    71cc:	18 f4       	brcc	.+6      	; 0x71d4 <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    71ce:	f6 01       	movw	r30, r12
    71d0:	84 8b       	std	Z+20, r24	; 0x14
    71d2:	bb c1       	rjmp	.+886    	; 0x754a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    71d4:	f6 01       	movw	r30, r12
    71d6:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    71d8:	8b e0       	ldi	r24, 0x0B	; 11
    71da:	e4 e5       	ldi	r30, 0x54	; 84
    71dc:	f3 e0       	ldi	r31, 0x03	; 3
    71de:	d2 01       	movw	r26, r4
    71e0:	01 90       	ld	r0, Z+
    71e2:	0d 92       	st	X+, r0
    71e4:	8a 95       	dec	r24
    71e6:	e1 f7       	brne	.-8      	; 0x71e0 <_Z13uhreinstellenv+0x394>
    71e8:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    71ea:	f5 01       	movw	r30, r10
    71ec:	61 91       	ld	r22, Z+
    71ee:	5f 01       	movw	r10, r30
    71f0:	28 e3       	ldi	r18, 0x38	; 56
    71f2:	41 2f       	mov	r20, r17
    71f4:	8b e1       	ldi	r24, 0x1B	; 27
    71f6:	9a e0       	ldi	r25, 0x0A	; 10
    71f8:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    71fc:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    71fe:	1c 33       	cpi	r17, 0x3C	; 60
    7200:	a1 f7       	brne	.-24     	; 0x71ea <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    7202:	0f 2e       	mov	r0, r31
    7204:	f3 e0       	ldi	r31, 0x03	; 3
    7206:	9f 2e       	mov	r9, r31
    7208:	f0 2d       	mov	r31, r0
    720a:	9f c1       	rjmp	.+830    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    720c:	8f e0       	ldi	r24, 0x0F	; 15
    720e:	9a e0       	ldi	r25, 0x0A	; 10
    7210:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    7214:	f6 01       	movw	r30, r12
    7216:	24 89       	ldd	r18, Z+20	; 0x14
    7218:	90 e0       	ldi	r25, 0x00	; 0
    721a:	82 0f       	add	r24, r18
    721c:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    721e:	80 32       	cpi	r24, 0x20	; 32
    7220:	10 f4       	brcc	.+4      	; 0x7226 <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    7222:	84 8b       	std	Z+20, r24	; 0x14
    7224:	92 c1       	rjmp	.+804    	; 0x754a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    7226:	f6 01       	movw	r30, r12
    7228:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    722a:	8b e0       	ldi	r24, 0x0B	; 11
    722c:	e4 e5       	ldi	r30, 0x54	; 84
    722e:	f3 e0       	ldi	r31, 0x03	; 3
    7230:	d2 01       	movw	r26, r4
    7232:	01 90       	ld	r0, Z+
    7234:	0d 92       	st	X+, r0
    7236:	8a 95       	dec	r24
    7238:	e1 f7       	brne	.-8      	; 0x7232 <_Z13uhreinstellenv+0x3e6>
    723a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    723c:	f5 01       	movw	r30, r10
    723e:	61 91       	ld	r22, Z+
    7240:	5f 01       	movw	r10, r30
    7242:	28 e3       	ldi	r18, 0x38	; 56
    7244:	41 2f       	mov	r20, r17
    7246:	8b e1       	ldi	r24, 0x1B	; 27
    7248:	9a e0       	ldi	r25, 0x0A	; 10
    724a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    724e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7250:	1c 33       	cpi	r17, 0x3C	; 60
    7252:	a1 f7       	brne	.-24     	; 0x723c <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    7254:	0f 2e       	mov	r0, r31
    7256:	f3 e0       	ldi	r31, 0x03	; 3
    7258:	9f 2e       	mov	r9, r31
    725a:	f0 2d       	mov	r31, r0
    725c:	76 c1       	rjmp	.+748    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    725e:	8f e0       	ldi	r24, 0x0F	; 15
    7260:	9a e0       	ldi	r25, 0x0A	; 10
    7262:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    7266:	88 0f       	add	r24, r24
    7268:	98 2f       	mov	r25, r24
    726a:	99 0f       	add	r25, r25
    726c:	99 0f       	add	r25, r25
    726e:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    7270:	8d 30       	cpi	r24, 0x0D	; 13
    7272:	18 f4       	brcc	.+6      	; 0x727a <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    7274:	f6 01       	movw	r30, r12
    7276:	86 8b       	std	Z+22, r24	; 0x16
    7278:	68 c1       	rjmp	.+720    	; 0x754a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    727a:	f6 01       	movw	r30, r12
    727c:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    727e:	8d e0       	ldi	r24, 0x0D	; 13
    7280:	ef e5       	ldi	r30, 0x5F	; 95
    7282:	f3 e0       	ldi	r31, 0x03	; 3
    7284:	d2 01       	movw	r26, r4
    7286:	01 90       	ld	r0, Z+
    7288:	0d 92       	st	X+, r0
    728a:	8a 95       	dec	r24
    728c:	e1 f7       	brne	.-8      	; 0x7286 <_Z13uhreinstellenv+0x43a>
    728e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7290:	f5 01       	movw	r30, r10
    7292:	61 91       	ld	r22, Z+
    7294:	5f 01       	movw	r10, r30
    7296:	28 e3       	ldi	r18, 0x38	; 56
    7298:	41 2f       	mov	r20, r17
    729a:	8b e1       	ldi	r24, 0x1B	; 27
    729c:	9a e0       	ldi	r25, 0x0A	; 10
    729e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    72a2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    72a4:	18 34       	cpi	r17, 0x48	; 72
    72a6:	a1 f7       	brne	.-24     	; 0x7290 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    72a8:	0f 2e       	mov	r0, r31
    72aa:	f5 e0       	ldi	r31, 0x05	; 5
    72ac:	9f 2e       	mov	r9, r31
    72ae:	f0 2d       	mov	r31, r0
    72b0:	4c c1       	rjmp	.+664    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    72b2:	8f e0       	ldi	r24, 0x0F	; 15
    72b4:	9a e0       	ldi	r25, 0x0A	; 10
    72b6:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    72ba:	f6 01       	movw	r30, r12
    72bc:	26 89       	ldd	r18, Z+22	; 0x16
    72be:	90 e0       	ldi	r25, 0x00	; 0
    72c0:	82 0f       	add	r24, r18
    72c2:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    72c4:	8d 30       	cpi	r24, 0x0D	; 13
    72c6:	10 f4       	brcc	.+4      	; 0x72cc <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    72c8:	86 8b       	std	Z+22, r24	; 0x16
    72ca:	1d c0       	rjmp	.+58     	; 0x7306 <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    72cc:	f6 01       	movw	r30, r12
    72ce:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    72d0:	8d e0       	ldi	r24, 0x0D	; 13
    72d2:	ef e5       	ldi	r30, 0x5F	; 95
    72d4:	f3 e0       	ldi	r31, 0x03	; 3
    72d6:	d2 01       	movw	r26, r4
    72d8:	01 90       	ld	r0, Z+
    72da:	0d 92       	st	X+, r0
    72dc:	8a 95       	dec	r24
    72de:	e1 f7       	brne	.-8      	; 0x72d8 <_Z13uhreinstellenv+0x48c>
    72e0:	2d 88       	ldd	r2, Y+21	; 0x15
    72e2:	3e 88       	ldd	r3, Y+22	; 0x16
    72e4:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    72e6:	f1 01       	movw	r30, r2
    72e8:	61 91       	ld	r22, Z+
    72ea:	1f 01       	movw	r2, r30
    72ec:	28 e3       	ldi	r18, 0x38	; 56
    72ee:	41 2f       	mov	r20, r17
    72f0:	8b e1       	ldi	r24, 0x1B	; 27
    72f2:	9a e0       	ldi	r25, 0x0A	; 10
    72f4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    72f8:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    72fa:	18 34       	cpi	r17, 0x48	; 72
    72fc:	a1 f7       	brne	.-24     	; 0x72e6 <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    72fe:	0f 2e       	mov	r0, r31
    7300:	f5 e0       	ldi	r31, 0x05	; 5
    7302:	9f 2e       	mov	r9, r31
    7304:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    7306:	f6 01       	movw	r30, r12
    7308:	96 89       	ldd	r25, Z+22	; 0x16
    730a:	89 2f       	mov	r24, r25
    730c:	8d 7f       	andi	r24, 0xFD	; 253
    730e:	84 30       	cpi	r24, 0x04	; 4
    7310:	11 f0       	breq	.+4      	; 0x7316 <_Z13uhreinstellenv+0x4ca>
    7312:	89 30       	cpi	r24, 0x09	; 9
    7314:	09 f5       	brne	.+66     	; 0x7358 <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    7316:	f6 01       	movw	r30, r12
    7318:	84 89       	ldd	r24, Z+20	; 0x14
    731a:	8f 31       	cpi	r24, 0x1F	; 31
    731c:	08 f4       	brcc	.+2      	; 0x7320 <_Z13uhreinstellenv+0x4d4>
    731e:	d8 c0       	rjmp	.+432    	; 0x74d0 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7320:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7322:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    7324:	8b e0       	ldi	r24, 0x0B	; 11
    7326:	e4 e5       	ldi	r30, 0x54	; 84
    7328:	f3 e0       	ldi	r31, 0x03	; 3
    732a:	d2 01       	movw	r26, r4
    732c:	01 90       	ld	r0, Z+
    732e:	0d 92       	st	X+, r0
    7330:	8a 95       	dec	r24
    7332:	e1 f7       	brne	.-8      	; 0x732c <_Z13uhreinstellenv+0x4e0>
    7334:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7336:	f5 01       	movw	r30, r10
    7338:	61 91       	ld	r22, Z+
    733a:	5f 01       	movw	r10, r30
    733c:	28 e3       	ldi	r18, 0x38	; 56
    733e:	41 2f       	mov	r20, r17
    7340:	8b e1       	ldi	r24, 0x1B	; 27
    7342:	9a e0       	ldi	r25, 0x0A	; 10
    7344:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7348:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    734a:	1c 33       	cpi	r17, 0x3C	; 60
    734c:	a1 f7       	brne	.-24     	; 0x7336 <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    734e:	0f 2e       	mov	r0, r31
    7350:	f3 e0       	ldi	r31, 0x03	; 3
    7352:	9f 2e       	mov	r9, r31
    7354:	f0 2d       	mov	r31, r0
    7356:	f9 c0       	rjmp	.+498    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    7358:	92 30       	cpi	r25, 0x02	; 2
    735a:	09 f0       	breq	.+2      	; 0x735e <_Z13uhreinstellenv+0x512>
    735c:	b9 c0       	rjmp	.+370    	; 0x74d0 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    735e:	f6 01       	movw	r30, r12
    7360:	84 89       	ldd	r24, Z+20	; 0x14
    7362:	8e 31       	cpi	r24, 0x1E	; 30
    7364:	08 f4       	brcc	.+2      	; 0x7368 <_Z13uhreinstellenv+0x51c>
    7366:	b4 c0       	rjmp	.+360    	; 0x74d0 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7368:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    736a:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    736c:	8b e0       	ldi	r24, 0x0B	; 11
    736e:	e4 e5       	ldi	r30, 0x54	; 84
    7370:	f3 e0       	ldi	r31, 0x03	; 3
    7372:	d2 01       	movw	r26, r4
    7374:	01 90       	ld	r0, Z+
    7376:	0d 92       	st	X+, r0
    7378:	8a 95       	dec	r24
    737a:	e1 f7       	brne	.-8      	; 0x7374 <_Z13uhreinstellenv+0x528>
    737c:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    737e:	f5 01       	movw	r30, r10
    7380:	61 91       	ld	r22, Z+
    7382:	5f 01       	movw	r10, r30
    7384:	28 e3       	ldi	r18, 0x38	; 56
    7386:	41 2f       	mov	r20, r17
    7388:	8b e1       	ldi	r24, 0x1B	; 27
    738a:	9a e0       	ldi	r25, 0x0A	; 10
    738c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7390:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7392:	1c 33       	cpi	r17, 0x3C	; 60
    7394:	a1 f7       	brne	.-24     	; 0x737e <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    7396:	0f 2e       	mov	r0, r31
    7398:	f3 e0       	ldi	r31, 0x03	; 3
    739a:	9f 2e       	mov	r9, r31
    739c:	f0 2d       	mov	r31, r0
    739e:	d5 c0       	rjmp	.+426    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    73a0:	8f e0       	ldi	r24, 0x0F	; 15
    73a2:	9a e0       	ldi	r25, 0x0A	; 10
    73a4:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    73a8:	88 0f       	add	r24, r24
    73aa:	98 2f       	mov	r25, r24
    73ac:	99 0f       	add	r25, r25
    73ae:	99 0f       	add	r25, r25
    73b0:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    73b2:	82 33       	cpi	r24, 0x32	; 50
    73b4:	18 f4       	brcc	.+6      	; 0x73bc <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    73b6:	f6 01       	movw	r30, r12
    73b8:	87 8b       	std	Z+23, r24	; 0x17
    73ba:	c7 c0       	rjmp	.+398    	; 0x754a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    73bc:	f6 01       	movw	r30, r12
    73be:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    73c0:	8c e0       	ldi	r24, 0x0C	; 12
    73c2:	ec e6       	ldi	r30, 0x6C	; 108
    73c4:	f3 e0       	ldi	r31, 0x03	; 3
    73c6:	d2 01       	movw	r26, r4
    73c8:	01 90       	ld	r0, Z+
    73ca:	0d 92       	st	X+, r0
    73cc:	8a 95       	dec	r24
    73ce:	e1 f7       	brne	.-8      	; 0x73c8 <_Z13uhreinstellenv+0x57c>
    73d0:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    73d2:	f5 01       	movw	r30, r10
    73d4:	61 91       	ld	r22, Z+
    73d6:	5f 01       	movw	r10, r30
    73d8:	28 e3       	ldi	r18, 0x38	; 56
    73da:	41 2f       	mov	r20, r17
    73dc:	8b e1       	ldi	r24, 0x1B	; 27
    73de:	9a e0       	ldi	r25, 0x0A	; 10
    73e0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    73e4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    73e6:	12 34       	cpi	r17, 0x42	; 66
    73e8:	a1 f7       	brne	.-24     	; 0x73d2 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    73ea:	0f 2e       	mov	r0, r31
    73ec:	f7 e0       	ldi	r31, 0x07	; 7
    73ee:	9f 2e       	mov	r9, r31
    73f0:	f0 2d       	mov	r31, r0
    73f2:	ab c0       	rjmp	.+342    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    73f4:	8f e0       	ldi	r24, 0x0F	; 15
    73f6:	9a e0       	ldi	r25, 0x0A	; 10
    73f8:	0e 94 94 24 	call	0x4928	; 0x4928 <_ZN9Interface17ZahlenausTastaturEv>
    73fc:	f6 01       	movw	r30, r12
    73fe:	27 89       	ldd	r18, Z+23	; 0x17
    7400:	90 e0       	ldi	r25, 0x00	; 0
    7402:	82 0f       	add	r24, r18
    7404:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    7406:	82 33       	cpi	r24, 0x32	; 50
    7408:	08 f4       	brcc	.+2      	; 0x740c <_Z13uhreinstellenv+0x5c0>
    740a:	96 c0       	rjmp	.+300    	; 0x7538 <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    740c:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    740e:	8c e0       	ldi	r24, 0x0C	; 12
    7410:	ec e6       	ldi	r30, 0x6C	; 108
    7412:	f3 e0       	ldi	r31, 0x03	; 3
    7414:	d2 01       	movw	r26, r4
    7416:	01 90       	ld	r0, Z+
    7418:	0d 92       	st	X+, r0
    741a:	8a 95       	dec	r24
    741c:	e1 f7       	brne	.-8      	; 0x7416 <_Z13uhreinstellenv+0x5ca>
    741e:	2d 88       	ldd	r2, Y+21	; 0x15
    7420:	3e 88       	ldd	r3, Y+22	; 0x16
    7422:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7424:	f1 01       	movw	r30, r2
    7426:	61 91       	ld	r22, Z+
    7428:	1f 01       	movw	r2, r30
    742a:	28 e3       	ldi	r18, 0x38	; 56
    742c:	41 2f       	mov	r20, r17
    742e:	8b e1       	ldi	r24, 0x1B	; 27
    7430:	9a e0       	ldi	r25, 0x0A	; 10
    7432:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7436:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7438:	12 34       	cpi	r17, 0x42	; 66
    743a:	a1 f7       	brne	.-24     	; 0x7424 <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    743c:	0f 2e       	mov	r0, r31
    743e:	f7 e0       	ldi	r31, 0x07	; 7
    7440:	9f 2e       	mov	r9, r31
    7442:	f0 2d       	mov	r31, r0
    7444:	7b c0       	rjmp	.+246    	; 0x753c <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    7446:	f6 01       	movw	r30, r12
    7448:	17 89       	ldd	r17, Z+23	; 0x17
    744a:	13 70       	andi	r17, 0x03	; 3
    744c:	f9 f4       	brne	.+62     	; 0x748c <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    744e:	84 89       	ldd	r24, Z+20	; 0x14
    7450:	8e 31       	cpi	r24, 0x1E	; 30
    7452:	f0 f1       	brcs	.+124    	; 0x74d0 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    7454:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    7456:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    7458:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    745a:	8b e0       	ldi	r24, 0x0B	; 11
    745c:	e4 e5       	ldi	r30, 0x54	; 84
    745e:	f3 e0       	ldi	r31, 0x03	; 3
    7460:	d2 01       	movw	r26, r4
    7462:	01 90       	ld	r0, Z+
    7464:	0d 92       	st	X+, r0
    7466:	8a 95       	dec	r24
    7468:	e1 f7       	brne	.-8      	; 0x7462 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    746a:	f5 01       	movw	r30, r10
    746c:	61 91       	ld	r22, Z+
    746e:	5f 01       	movw	r10, r30
    7470:	28 e3       	ldi	r18, 0x38	; 56
    7472:	41 2f       	mov	r20, r17
    7474:	8b e1       	ldi	r24, 0x1B	; 27
    7476:	9a e0       	ldi	r25, 0x0A	; 10
    7478:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    747c:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    747e:	1c 33       	cpi	r17, 0x3C	; 60
    7480:	a1 f7       	brne	.-24     	; 0x746a <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    7482:	0f 2e       	mov	r0, r31
    7484:	f3 e0       	ldi	r31, 0x03	; 3
    7486:	9f 2e       	mov	r9, r31
    7488:	f0 2d       	mov	r31, r0
    748a:	5f c0       	rjmp	.+190    	; 0x754a <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    748c:	f6 01       	movw	r30, r12
    748e:	84 89       	ldd	r24, Z+20	; 0x14
    7490:	8d 31       	cpi	r24, 0x1D	; 29
    7492:	f0 f0       	brcs	.+60     	; 0x74d0 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    7494:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    7496:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    7498:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    749a:	8b e0       	ldi	r24, 0x0B	; 11
    749c:	e4 e5       	ldi	r30, 0x54	; 84
    749e:	f3 e0       	ldi	r31, 0x03	; 3
    74a0:	d2 01       	movw	r26, r4
    74a2:	01 90       	ld	r0, Z+
    74a4:	0d 92       	st	X+, r0
    74a6:	8a 95       	dec	r24
    74a8:	e1 f7       	brne	.-8      	; 0x74a2 <_Z13uhreinstellenv+0x656>
    74aa:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    74ac:	f5 01       	movw	r30, r10
    74ae:	61 91       	ld	r22, Z+
    74b0:	5f 01       	movw	r10, r30
    74b2:	28 e3       	ldi	r18, 0x38	; 56
    74b4:	41 2f       	mov	r20, r17
    74b6:	8b e1       	ldi	r24, 0x1B	; 27
    74b8:	9a e0       	ldi	r25, 0x0A	; 10
    74ba:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    74be:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    74c0:	1c 33       	cpi	r17, 0x3C	; 60
    74c2:	a1 f7       	brne	.-24     	; 0x74ac <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    74c4:	0f 2e       	mov	r0, r31
    74c6:	f3 e0       	ldi	r31, 0x03	; 3
    74c8:	9f 2e       	mov	r9, r31
    74ca:	f0 2d       	mov	r31, r0
    74cc:	3e c0       	rjmp	.+124    	; 0x754a <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    74ce:	93 94       	inc	r9
			break;
		}
		pos++;
    74d0:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    74d2:	fa e0       	ldi	r31, 0x0A	; 10
    74d4:	f9 15       	cp	r31, r9
    74d6:	08 f0       	brcs	.+2      	; 0x74da <_Z13uhreinstellenv+0x68e>
    74d8:	f6 cc       	rjmp	.-1556   	; 0x6ec6 <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    74da:	0c e1       	ldi	r16, 0x1C	; 28
    74dc:	1e e0       	ldi	r17, 0x0E	; 14
    74de:	f8 01       	movw	r30, r16
    74e0:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    74e2:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    74e4:	61 89       	ldd	r22, Z+17	; 0x11
    74e6:	80 e0       	ldi	r24, 0x00	; 0
    74e8:	90 e0       	ldi	r25, 0x00	; 0
    74ea:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    74ee:	f8 01       	movw	r30, r16
    74f0:	60 89       	ldd	r22, Z+16	; 0x10
    74f2:	81 e0       	ldi	r24, 0x01	; 1
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    74fa:	f8 01       	movw	r30, r16
    74fc:	64 89       	ldd	r22, Z+20	; 0x14
    74fe:	82 e0       	ldi	r24, 0x02	; 2
    7500:	90 e0       	ldi	r25, 0x00	; 0
    7502:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    7506:	f8 01       	movw	r30, r16
    7508:	66 89       	ldd	r22, Z+22	; 0x16
    750a:	83 e0       	ldi	r24, 0x03	; 3
    750c:	90 e0       	ldi	r25, 0x00	; 0
    750e:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    7512:	f8 01       	movw	r30, r16
    7514:	67 89       	ldd	r22, Z+23	; 0x17
    7516:	84 e0       	ldi	r24, 0x04	; 4
    7518:	90 e0       	ldi	r25, 0x00	; 0
    751a:	0e 94 a0 2b 	call	0x5740	; 0x5740 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    751e:	8b e1       	ldi	r24, 0x1B	; 27
    7520:	9a e0       	ldi	r25, 0x0A	; 10
    7522:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    7526:	c8 01       	movw	r24, r16
    7528:	78 d3       	rcall	.+1776   	; 0x7c1a <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    752a:	c8 01       	movw	r24, r16
    752c:	3d d3       	rcall	.+1658   	; 0x7ba8 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    752e:	c8 01       	movw	r24, r16
    7530:	55 d4       	rcall	.+2218   	; 0x7ddc <_ZN3RTC8RTCstartEv>
    7532:	0d c0       	rjmp	.+26     	; 0x754e <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7534:	93 94       	inc	r9
    7536:	c7 cc       	rjmp	.-1650   	; 0x6ec6 <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    7538:	f6 01       	movw	r30, r12
    753a:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    753c:	f6 01       	movw	r30, r12
    753e:	86 89       	ldd	r24, Z+22	; 0x16
    7540:	82 30       	cpi	r24, 0x02	; 2
    7542:	c1 f7       	brne	.-16     	; 0x7534 <_Z13uhreinstellenv+0x6e8>
    7544:	80 cf       	rjmp	.-256    	; 0x7446 <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    7546:	f6 01       	movw	r30, r12
    7548:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    754a:	93 94       	inc	r9
    754c:	bc cc       	rjmp	.-1672   	; 0x6ec6 <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    754e:	66 96       	adiw	r28, 0x16	; 22
    7550:	0f b6       	in	r0, 0x3f	; 63
    7552:	f8 94       	cli
    7554:	de bf       	out	0x3e, r29	; 62
    7556:	0f be       	out	0x3f, r0	; 63
    7558:	cd bf       	out	0x3d, r28	; 61
    755a:	df 91       	pop	r29
    755c:	cf 91       	pop	r28
    755e:	1f 91       	pop	r17
    7560:	0f 91       	pop	r16
    7562:	ff 90       	pop	r15
    7564:	ef 90       	pop	r14
    7566:	df 90       	pop	r13
    7568:	cf 90       	pop	r12
    756a:	bf 90       	pop	r11
    756c:	af 90       	pop	r10
    756e:	9f 90       	pop	r9
    7570:	8f 90       	pop	r8
    7572:	7f 90       	pop	r7
    7574:	6f 90       	pop	r6
    7576:	5f 90       	pop	r5
    7578:	4f 90       	pop	r4
    757a:	3f 90       	pop	r3
    757c:	2f 90       	pop	r2
    757e:	08 95       	ret

00007580 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    7580:	cf 92       	push	r12
    7582:	df 92       	push	r13
    7584:	ef 92       	push	r14
    7586:	ff 92       	push	r15
    7588:	0f 93       	push	r16
    758a:	1f 93       	push	r17
    758c:	cf 93       	push	r28
    758e:	df 93       	push	r29
    7590:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7592:	8f 89       	ldd	r24, Y+23	; 0x17
    7594:	98 8d       	ldd	r25, Y+24	; 0x18
    7596:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN7Display10clearFrameEv>
    759a:	10 e0       	ldi	r17, 0x00	; 0
    759c:	e1 2c       	mov	r14, r1
    759e:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    75a0:	e9 8d       	ldd	r30, Y+25	; 0x19
    75a2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    75a4:	ee 0d       	add	r30, r14
    75a6:	ff 1d       	adc	r31, r15
    75a8:	20 e0       	ldi	r18, 0x00	; 0
    75aa:	41 2f       	mov	r20, r17
    75ac:	60 81       	ld	r22, Z
    75ae:	8f 89       	ldd	r24, Y+23	; 0x17
    75b0:	98 8d       	ldd	r25, Y+24	; 0x18
    75b2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    75b6:	2f ef       	ldi	r18, 0xFF	; 255
    75b8:	e2 1a       	sub	r14, r18
    75ba:	f2 0a       	sbc	r15, r18
    75bc:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    75be:	10 33       	cpi	r17, 0x30	; 48
    75c0:	79 f7       	brne	.-34     	; 0x75a0 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    75c2:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <_Z14Batteriestatusv>
    75c6:	7e 01       	movw	r14, r28
    75c8:	32 e0       	ldi	r19, 0x02	; 2
    75ca:	e3 0e       	add	r14, r19
    75cc:	f1 1c       	adc	r15, r1
    75ce:	28 2f       	mov	r18, r24
    75d0:	08 2e       	mov	r0, r24
    75d2:	00 0c       	add	r0, r0
    75d4:	33 0b       	sbc	r19, r19
    75d6:	3f 93       	push	r19
    75d8:	8f 93       	push	r24
    75da:	82 ec       	ldi	r24, 0xC2	; 194
    75dc:	91 e0       	ldi	r25, 0x01	; 1
    75de:	9f 93       	push	r25
    75e0:	8f 93       	push	r24
    75e2:	ff 92       	push	r15
    75e4:	ef 92       	push	r14
    75e6:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    75ea:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    75ec:	15 e1       	ldi	r17, 0x15	; 21
    75ee:	18 1b       	sub	r17, r24
    75f0:	0f 90       	pop	r0
    75f2:	0f 90       	pop	r0
    75f4:	0f 90       	pop	r0
    75f6:	0f 90       	pop	r0
    75f8:	0f 90       	pop	r0
    75fa:	0f 90       	pop	r0
    75fc:	15 31       	cpi	r17, 0x15	; 21
    75fe:	08 f0       	brcs	.+2      	; 0x7602 <_ZN13einstellungen4drawEv+0x82>
    7600:	80 c1       	rjmp	.+768    	; 0x7902 <_ZN13einstellungen4drawEv+0x382>
    7602:	01 2f       	mov	r16, r17
    7604:	00 0f       	add	r16, r16
    7606:	01 0f       	add	r16, r17
    7608:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    760a:	8e 89       	ldd	r24, Y+22	; 0x16
    760c:	fe 01       	movw	r30, r28
    760e:	e1 0f       	add	r30, r17
    7610:	f1 1d       	adc	r31, r1
    7612:	e8 0f       	add	r30, r24
    7614:	f1 1d       	adc	r31, r1
    7616:	73 97       	sbiw	r30, 0x13	; 19
    7618:	20 e0       	ldi	r18, 0x00	; 0
    761a:	40 2f       	mov	r20, r16
    761c:	60 81       	ld	r22, Z
    761e:	8f 89       	ldd	r24, Y+23	; 0x17
    7620:	98 8d       	ldd	r25, Y+24	; 0x18
    7622:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    7626:	1f 5f       	subi	r17, 0xFF	; 255
    7628:	0a 5f       	subi	r16, 0xFA	; 250
    762a:	15 31       	cpi	r17, 0x15	; 21
    762c:	71 f7       	brne	.-36     	; 0x760a <_ZN13einstellungen4drawEv+0x8a>
    762e:	69 c1       	rjmp	.+722    	; 0x7902 <_ZN13einstellungen4drawEv+0x382>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    7630:	e9 8d       	ldd	r30, Y+25	; 0x19
    7632:	fa 8d       	ldd	r31, Y+26	; 0x1a
    7634:	ec 0d       	add	r30, r12
    7636:	fd 1d       	adc	r31, r13
    7638:	28 e3       	ldi	r18, 0x38	; 56
    763a:	41 2f       	mov	r20, r17
    763c:	60 85       	ldd	r22, Z+8	; 0x08
    763e:	8f 89       	ldd	r24, Y+23	; 0x17
    7640:	98 8d       	ldd	r25, Y+24	; 0x18
    7642:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7646:	8f ef       	ldi	r24, 0xFF	; 255
    7648:	c8 1a       	sub	r12, r24
    764a:	d8 0a       	sbc	r13, r24
    764c:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    764e:	10 38       	cpi	r17, 0x80	; 128
    7650:	79 f7       	brne	.-34     	; 0x7630 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    7652:	8e a1       	ldd	r24, Y+38	; 0x26
    7654:	81 11       	cpse	r24, r1
    7656:	ae c0       	rjmp	.+348    	; 0x77b4 <_ZN13einstellungen4drawEv+0x234>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    7658:	80 e1       	ldi	r24, 0x10	; 16
    765a:	e8 e7       	ldi	r30, 0x78	; 120
    765c:	f3 e0       	ldi	r31, 0x03	; 3
    765e:	d7 01       	movw	r26, r14
    7660:	01 90       	ld	r0, Z+
    7662:	0d 92       	st	X+, r0
    7664:	8a 95       	dec	r24
    7666:	e1 f7       	brne	.-8      	; 0x7660 <_ZN13einstellungen4drawEv+0xe0>
    7668:	8f e0       	ldi	r24, 0x0F	; 15
    766a:	8e 8b       	std	Y+22, r24	; 0x16
    766c:	0c e0       	ldi	r16, 0x0C	; 12
    766e:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    7670:	fe 01       	movw	r30, r28
    7672:	e1 0f       	add	r30, r17
    7674:	f1 1d       	adc	r31, r1
    7676:	20 e1       	ldi	r18, 0x10	; 16
    7678:	40 2f       	mov	r20, r16
    767a:	62 81       	ldd	r22, Z+2	; 0x02
    767c:	8f 89       	ldd	r24, Y+23	; 0x17
    767e:	98 8d       	ldd	r25, Y+24	; 0x18
    7680:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7684:	1f 5f       	subi	r17, 0xFF	; 255
    7686:	0a 5f       	subi	r16, 0xFA	; 250
    7688:	8e 89       	ldd	r24, Y+22	; 0x16
    768a:	18 17       	cp	r17, r24
    768c:	88 f3       	brcs	.-30     	; 0x7670 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    768e:	8c e0       	ldi	r24, 0x0C	; 12
    7690:	e8 e8       	ldi	r30, 0x88	; 136
    7692:	f3 e0       	ldi	r31, 0x03	; 3
    7694:	d7 01       	movw	r26, r14
    7696:	01 90       	ld	r0, Z+
    7698:	0d 92       	st	X+, r0
    769a:	8a 95       	dec	r24
    769c:	e1 f7       	brne	.-8      	; 0x7696 <_ZN13einstellungen4drawEv+0x116>
    769e:	8b e0       	ldi	r24, 0x0B	; 11
    76a0:	8e 8b       	std	Y+22, r24	; 0x16
    76a2:	0c e0       	ldi	r16, 0x0C	; 12
    76a4:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    76a6:	fe 01       	movw	r30, r28
    76a8:	e1 0f       	add	r30, r17
    76aa:	f1 1d       	adc	r31, r1
    76ac:	28 e1       	ldi	r18, 0x18	; 24
    76ae:	40 2f       	mov	r20, r16
    76b0:	62 81       	ldd	r22, Z+2	; 0x02
    76b2:	8f 89       	ldd	r24, Y+23	; 0x17
    76b4:	98 8d       	ldd	r25, Y+24	; 0x18
    76b6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    76ba:	1f 5f       	subi	r17, 0xFF	; 255
    76bc:	0a 5f       	subi	r16, 0xFA	; 250
    76be:	8e 89       	ldd	r24, Y+22	; 0x16
    76c0:	18 17       	cp	r17, r24
    76c2:	88 f3       	brcs	.-30     	; 0x76a6 <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    76c4:	8f e0       	ldi	r24, 0x0F	; 15
    76c6:	e4 e9       	ldi	r30, 0x94	; 148
    76c8:	f3 e0       	ldi	r31, 0x03	; 3
    76ca:	d7 01       	movw	r26, r14
    76cc:	01 90       	ld	r0, Z+
    76ce:	0d 92       	st	X+, r0
    76d0:	8a 95       	dec	r24
    76d2:	e1 f7       	brne	.-8      	; 0x76cc <_ZN13einstellungen4drawEv+0x14c>
    76d4:	8e e0       	ldi	r24, 0x0E	; 14
    76d6:	8e 8b       	std	Y+22, r24	; 0x16
    76d8:	0c e0       	ldi	r16, 0x0C	; 12
    76da:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    76dc:	fe 01       	movw	r30, r28
    76de:	e1 0f       	add	r30, r17
    76e0:	f1 1d       	adc	r31, r1
    76e2:	20 e2       	ldi	r18, 0x20	; 32
    76e4:	40 2f       	mov	r20, r16
    76e6:	62 81       	ldd	r22, Z+2	; 0x02
    76e8:	8f 89       	ldd	r24, Y+23	; 0x17
    76ea:	98 8d       	ldd	r25, Y+24	; 0x18
    76ec:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    76f0:	1f 5f       	subi	r17, 0xFF	; 255
    76f2:	0a 5f       	subi	r16, 0xFA	; 250
    76f4:	8e 89       	ldd	r24, Y+22	; 0x16
    76f6:	18 17       	cp	r17, r24
    76f8:	88 f3       	brcs	.-30     	; 0x76dc <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"Mount SD: %u", (bool)(statusreg&(1<<mounttingstat)));
    76fa:	80 91 eb 08 	lds	r24, 0x08EB
    76fe:	86 95       	lsr	r24
    7700:	81 70       	andi	r24, 0x01	; 1
    7702:	1f 92       	push	r1
    7704:	8f 93       	push	r24
    7706:	83 ea       	ldi	r24, 0xA3	; 163
    7708:	93 e0       	ldi	r25, 0x03	; 3
    770a:	9f 93       	push	r25
    770c:	8f 93       	push	r24
    770e:	ff 92       	push	r15
    7710:	ef 92       	push	r14
    7712:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    7716:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    7718:	0f 90       	pop	r0
    771a:	0f 90       	pop	r0
    771c:	0f 90       	pop	r0
    771e:	0f 90       	pop	r0
    7720:	0f 90       	pop	r0
    7722:	0f 90       	pop	r0
    7724:	88 23       	and	r24, r24
    7726:	89 f0       	breq	.+34     	; 0x774a <_ZN13einstellungen4drawEv+0x1ca>
    7728:	0c e0       	ldi	r16, 0x0C	; 12
    772a:	10 e0       	ldi	r17, 0x00	; 0
    772c:	fe 01       	movw	r30, r28
    772e:	e1 0f       	add	r30, r17
    7730:	f1 1d       	adc	r31, r1
    7732:	28 e2       	ldi	r18, 0x28	; 40
    7734:	40 2f       	mov	r20, r16
    7736:	62 81       	ldd	r22, Z+2	; 0x02
    7738:	8f 89       	ldd	r24, Y+23	; 0x17
    773a:	98 8d       	ldd	r25, Y+24	; 0x18
    773c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7740:	1f 5f       	subi	r17, 0xFF	; 255
    7742:	0a 5f       	subi	r16, 0xFA	; 250
    7744:	8e 89       	ldd	r24, Y+22	; 0x16
    7746:	18 17       	cp	r17, r24
    7748:	88 f3       	brcs	.-30     	; 0x772c <_ZN13einstellungen4drawEv+0x1ac>
			buffersize=sprintf(buffer,"Logging:  %u", (bool)(statusreg&(1<<loggingstat)));
    774a:	80 91 eb 08 	lds	r24, 0x08EB
    774e:	82 fb       	bst	r24, 2
    7750:	88 27       	eor	r24, r24
    7752:	80 f9       	bld	r24, 0
    7754:	1f 92       	push	r1
    7756:	8f 93       	push	r24
    7758:	80 eb       	ldi	r24, 0xB0	; 176
    775a:	93 e0       	ldi	r25, 0x03	; 3
    775c:	9f 93       	push	r25
    775e:	8f 93       	push	r24
    7760:	ff 92       	push	r15
    7762:	ef 92       	push	r14
    7764:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    7768:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    776a:	0f 90       	pop	r0
    776c:	0f 90       	pop	r0
    776e:	0f 90       	pop	r0
    7770:	0f 90       	pop	r0
    7772:	0f 90       	pop	r0
    7774:	0f 90       	pop	r0
    7776:	88 23       	and	r24, r24
    7778:	89 f0       	breq	.+34     	; 0x779c <_ZN13einstellungen4drawEv+0x21c>
    777a:	0c e0       	ldi	r16, 0x0C	; 12
    777c:	10 e0       	ldi	r17, 0x00	; 0
    777e:	fe 01       	movw	r30, r28
    7780:	e1 0f       	add	r30, r17
    7782:	f1 1d       	adc	r31, r1
    7784:	20 e3       	ldi	r18, 0x30	; 48
    7786:	40 2f       	mov	r20, r16
    7788:	62 81       	ldd	r22, Z+2	; 0x02
    778a:	8f 89       	ldd	r24, Y+23	; 0x17
    778c:	98 8d       	ldd	r25, Y+24	; 0x18
    778e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7792:	1f 5f       	subi	r17, 0xFF	; 255
    7794:	0a 5f       	subi	r16, 0xFA	; 250
    7796:	8e 89       	ldd	r24, Y+22	; 0x16
    7798:	18 17       	cp	r17, r24
    779a:	88 f3       	brcs	.-30     	; 0x777e <_ZN13einstellungen4drawEv+0x1fe>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    779c:	2d a1       	ldd	r18, Y+37	; 0x25
    779e:	22 0f       	add	r18, r18
    77a0:	22 0f       	add	r18, r18
    77a2:	22 0f       	add	r18, r18
    77a4:	20 5f       	subi	r18, 0xF0	; 240
    77a6:	40 e0       	ldi	r20, 0x00	; 0
    77a8:	6e e3       	ldi	r22, 0x3E	; 62
    77aa:	8f 89       	ldd	r24, Y+23	; 0x17
    77ac:	98 8d       	ldd	r25, Y+24	; 0x18
    77ae:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    77b2:	a2 c0       	rjmp	.+324    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==0 && posx==1)
    77b4:	9d a1       	ldd	r25, Y+37	; 0x25
    77b6:	91 11       	cpse	r25, r1
    77b8:	06 c0       	rjmp	.+12     	; 0x77c6 <_ZN13einstellungen4drawEv+0x246>
    77ba:	81 30       	cpi	r24, 0x01	; 1
    77bc:	09 f0       	breq	.+2      	; 0x77c0 <_ZN13einstellungen4drawEv+0x240>
    77be:	9c c0       	rjmp	.+312    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    77c0:	45 db       	rcall	.-2422   	; 0x6e4c <_Z13uhreinstellenv>
			posx=0;
    77c2:	1e a2       	std	Y+38, r1	; 0x26
    77c4:	99 c0       	rjmp	.+306    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==1 && posx==1)
    77c6:	91 30       	cpi	r25, 0x01	; 1
    77c8:	09 f0       	breq	.+2      	; 0x77cc <_ZN13einstellungen4drawEv+0x24c>
    77ca:	60 c0       	rjmp	.+192    	; 0x788c <_ZN13einstellungen4drawEv+0x30c>
    77cc:	81 30       	cpi	r24, 0x01	; 1
    77ce:	09 f0       	breq	.+2      	; 0x77d2 <_ZN13einstellungen4drawEv+0x252>
    77d0:	93 c0       	rjmp	.+294    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    77d2:	85 e1       	ldi	r24, 0x15	; 21
    77d4:	ed eb       	ldi	r30, 0xBD	; 189
    77d6:	f3 e0       	ldi	r31, 0x03	; 3
    77d8:	d7 01       	movw	r26, r14
    77da:	01 90       	ld	r0, Z+
    77dc:	0d 92       	st	X+, r0
    77de:	8a 95       	dec	r24
    77e0:	e1 f7       	brne	.-8      	; 0x77da <_ZN13einstellungen4drawEv+0x25a>
    77e2:	84 e1       	ldi	r24, 0x14	; 20
    77e4:	8e 8b       	std	Y+22, r24	; 0x16
    77e6:	00 e0       	ldi	r16, 0x00	; 0
    77e8:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    77ea:	fe 01       	movw	r30, r28
    77ec:	e1 0f       	add	r30, r17
    77ee:	f1 1d       	adc	r31, r1
    77f0:	20 e1       	ldi	r18, 0x10	; 16
    77f2:	40 2f       	mov	r20, r16
    77f4:	62 81       	ldd	r22, Z+2	; 0x02
    77f6:	8f 89       	ldd	r24, Y+23	; 0x17
    77f8:	98 8d       	ldd	r25, Y+24	; 0x18
    77fa:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    77fe:	1f 5f       	subi	r17, 0xFF	; 255
    7800:	0a 5f       	subi	r16, 0xFA	; 250
    7802:	8e 89       	ldd	r24, Y+22	; 0x16
    7804:	18 17       	cp	r17, r24
    7806:	88 f3       	brcs	.-30     	; 0x77ea <_ZN13einstellungen4drawEv+0x26a>
			buffersize=sprintf(buffer,"* fuer start");
    7808:	8d e0       	ldi	r24, 0x0D	; 13
    780a:	e2 ed       	ldi	r30, 0xD2	; 210
    780c:	f3 e0       	ldi	r31, 0x03	; 3
    780e:	d7 01       	movw	r26, r14
    7810:	01 90       	ld	r0, Z+
    7812:	0d 92       	st	X+, r0
    7814:	8a 95       	dec	r24
    7816:	e1 f7       	brne	.-8      	; 0x7810 <_ZN13einstellungen4drawEv+0x290>
    7818:	8c e0       	ldi	r24, 0x0C	; 12
    781a:	8e 8b       	std	Y+22, r24	; 0x16
    781c:	00 e0       	ldi	r16, 0x00	; 0
    781e:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    7820:	fe 01       	movw	r30, r28
    7822:	e1 0f       	add	r30, r17
    7824:	f1 1d       	adc	r31, r1
    7826:	28 e1       	ldi	r18, 0x18	; 24
    7828:	40 2f       	mov	r20, r16
    782a:	62 81       	ldd	r22, Z+2	; 0x02
    782c:	8f 89       	ldd	r24, Y+23	; 0x17
    782e:	98 8d       	ldd	r25, Y+24	; 0x18
    7830:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7834:	1f 5f       	subi	r17, 0xFF	; 255
    7836:	0a 5f       	subi	r16, 0xFA	; 250
    7838:	8e 89       	ldd	r24, Y+22	; 0x16
    783a:	18 17       	cp	r17, r24
    783c:	88 f3       	brcs	.-30     	; 0x7820 <_ZN13einstellungen4drawEv+0x2a0>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    783e:	1f 92       	push	r1
    7840:	85 e0       	ldi	r24, 0x05	; 5
    7842:	8f 93       	push	r24
    7844:	8f ed       	ldi	r24, 0xDF	; 223
    7846:	93 e0       	ldi	r25, 0x03	; 3
    7848:	9f 93       	push	r25
    784a:	8f 93       	push	r24
    784c:	ff 92       	push	r15
    784e:	ef 92       	push	r14
    7850:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    7854:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    7856:	0f 90       	pop	r0
    7858:	0f 90       	pop	r0
    785a:	0f 90       	pop	r0
    785c:	0f 90       	pop	r0
    785e:	0f 90       	pop	r0
    7860:	0f 90       	pop	r0
    7862:	88 23       	and	r24, r24
    7864:	09 f4       	brne	.+2      	; 0x7868 <_ZN13einstellungen4drawEv+0x2e8>
    7866:	48 c0       	rjmp	.+144    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
    7868:	00 e0       	ldi	r16, 0x00	; 0
    786a:	10 e0       	ldi	r17, 0x00	; 0
    786c:	fe 01       	movw	r30, r28
    786e:	e1 0f       	add	r30, r17
    7870:	f1 1d       	adc	r31, r1
    7872:	28 e2       	ldi	r18, 0x28	; 40
    7874:	40 2f       	mov	r20, r16
    7876:	62 81       	ldd	r22, Z+2	; 0x02
    7878:	8f 89       	ldd	r24, Y+23	; 0x17
    787a:	98 8d       	ldd	r25, Y+24	; 0x18
    787c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
    7880:	1f 5f       	subi	r17, 0xFF	; 255
    7882:	0a 5f       	subi	r16, 0xFA	; 250
    7884:	8e 89       	ldd	r24, Y+22	; 0x16
    7886:	18 17       	cp	r17, r24
    7888:	88 f3       	brcs	.-30     	; 0x786c <_ZN13einstellungen4drawEv+0x2ec>
    788a:	36 c0       	rjmp	.+108    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    788c:	92 30       	cpi	r25, 0x02	; 2
    788e:	a1 f5       	brne	.+104    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
    7890:	81 30       	cpi	r24, 0x01	; 1
    7892:	91 f5       	brne	.+100    	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    7894:	80 e4       	ldi	r24, 0x40	; 64
    7896:	8f 93       	push	r24
    7898:	81 e4       	ldi	r24, 0x41	; 65
    789a:	8f 93       	push	r24
    789c:	8b ee       	ldi	r24, 0xEB	; 235
    789e:	8f 93       	push	r24
    78a0:	85 e8       	ldi	r24, 0x85	; 133
    78a2:	8f 93       	push	r24
    78a4:	84 eb       	ldi	r24, 0xB4	; 180
    78a6:	91 e0       	ldi	r25, 0x01	; 1
    78a8:	9f 93       	push	r25
    78aa:	8f 93       	push	r24
    78ac:	ff 92       	push	r15
    78ae:	ef 92       	push	r14
    78b0:	0e 94 2d 49 	call	0x925a	; 0x925a <sprintf>
    78b4:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    78b6:	2d b7       	in	r18, 0x3d	; 61
    78b8:	3e b7       	in	r19, 0x3e	; 62
    78ba:	28 5f       	subi	r18, 0xF8	; 248
    78bc:	3f 4f       	sbci	r19, 0xFF	; 255
    78be:	0f b6       	in	r0, 0x3f	; 63
    78c0:	f8 94       	cli
    78c2:	3e bf       	out	0x3e, r19	; 62
    78c4:	0f be       	out	0x3f, r0	; 63
    78c6:	2d bf       	out	0x3d, r18	; 61
    78c8:	88 23       	and	r24, r24
    78ca:	b1 f0       	breq	.+44     	; 0x78f8 <_ZN13einstellungen4drawEv+0x378>
    78cc:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    78ce:	21 2f       	mov	r18, r17
    78d0:	30 e0       	ldi	r19, 0x00	; 0
    78d2:	c9 01       	movw	r24, r18
    78d4:	02 96       	adiw	r24, 0x02	; 2
    78d6:	48 2f       	mov	r20, r24
    78d8:	44 0f       	add	r20, r20
    78da:	48 0f       	add	r20, r24
    78dc:	44 0f       	add	r20, r20
    78de:	fe 01       	movw	r30, r28
    78e0:	e2 0f       	add	r30, r18
    78e2:	f3 1f       	adc	r31, r19
    78e4:	2c e1       	ldi	r18, 0x1C	; 28
    78e6:	62 81       	ldd	r22, Z+2	; 0x02
    78e8:	8f 89       	ldd	r24, Y+23	; 0x17
    78ea:	98 8d       	ldd	r25, Y+24	; 0x18
    78ec:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    78f0:	1f 5f       	subi	r17, 0xFF	; 255
    78f2:	8e 89       	ldd	r24, Y+22	; 0x16
    78f4:	18 17       	cp	r17, r24
    78f6:	58 f3       	brcs	.-42     	; 0x78ce <_ZN13einstellungen4drawEv+0x34e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    78f8:	8f 89       	ldd	r24, Y+23	; 0x17
    78fa:	98 8d       	ldd	r25, Y+24	; 0x18
    78fc:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Display9sendFrameEv>
    7900:	04 c0       	rjmp	.+8      	; 0x790a <_ZN13einstellungen4drawEv+0x38a>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7902:	10 e5       	ldi	r17, 0x50	; 80
    7904:	c1 2c       	mov	r12, r1
    7906:	d1 2c       	mov	r13, r1
    7908:	93 ce       	rjmp	.-730    	; 0x7630 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    790a:	df 91       	pop	r29
    790c:	cf 91       	pop	r28
    790e:	1f 91       	pop	r17
    7910:	0f 91       	pop	r16
    7912:	ff 90       	pop	r15
    7914:	ef 90       	pop	r14
    7916:	df 90       	pop	r13
    7918:	cf 90       	pop	r12
    791a:	08 95       	ret

0000791c <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    791c:	8c e1       	ldi	r24, 0x1C	; 28
    791e:	9e e0       	ldi	r25, 0x0E	; 14
    7920:	b5 d1       	rcall	.+874    	; 0x7c8c <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    7922:	8b e1       	ldi	r24, 0x1B	; 27
    7924:	9a e0       	ldi	r25, 0x0A	; 10
    7926:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    792a:	8f e0       	ldi	r24, 0x0F	; 15
    792c:	9a e0       	ldi	r25, 0x0A	; 10
    792e:	0e 94 89 23 	call	0x4712	; 0x4712 <_ZN9InterfaceC1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7932:	86 e2       	ldi	r24, 0x26	; 38
    7934:	99 e0       	ldi	r25, 0x09	; 9
    7936:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <_ZN7LSM303DC1Ev>

#include "BMP180.h"
BMP180 druck;
    793a:	87 ef       	ldi	r24, 0xF7	; 247
    793c:	98 e0       	ldi	r25, 0x08	; 8
    793e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN6BMP180C1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7942:	41 e0       	ldi	r20, 0x01	; 1
    7944:	62 e4       	ldi	r22, 0x42	; 66
    7946:	81 ef       	ldi	r24, 0xF1	; 241
    7948:	98 e0       	ldi	r25, 0x08	; 8
    794a:	28 d0       	rcall	.+80     	; 0x799c <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    794c:	42 e0       	ldi	r20, 0x02	; 2
    794e:	62 e4       	ldi	r22, 0x42	; 66
    7950:	8f ee       	ldi	r24, 0xEF	; 239
    7952:	98 e0       	ldi	r25, 0x08	; 8
    7954:	23 d0       	rcall	.+70     	; 0x799c <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    7956:	47 e0       	ldi	r20, 0x07	; 7
    7958:	64 e4       	ldi	r22, 0x44	; 68
    795a:	8d ee       	ldi	r24, 0xED	; 237
    795c:	98 e0       	ldi	r25, 0x08	; 8
    795e:	1e c0       	rjmp	.+60     	; 0x799c <_ZN6OutputC1Ehh>
    7960:	08 95       	ret

00007962 <_GLOBAL__sub_D__Znwj>:
    7962:	8d ee       	ldi	r24, 0xED	; 237
    7964:	98 e0       	ldi	r25, 0x08	; 8
    7966:	54 d0       	rcall	.+168    	; 0x7a10 <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    7968:	8f ee       	ldi	r24, 0xEF	; 239
    796a:	98 e0       	ldi	r25, 0x08	; 8
    796c:	51 d0       	rcall	.+162    	; 0x7a10 <_ZN6OutputD1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    796e:	81 ef       	ldi	r24, 0xF1	; 241
    7970:	98 e0       	ldi	r25, 0x08	; 8
    7972:	4e d0       	rcall	.+156    	; 0x7a10 <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "BMP180.h"
BMP180 druck;
    7974:	87 ef       	ldi	r24, 0xF7	; 247
    7976:	98 e0       	ldi	r25, 0x08	; 8
    7978:	0e 94 84 03 	call	0x708	; 0x708 <_ZN6BMP180D1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    797c:	86 e2       	ldi	r24, 0x26	; 38
    797e:	99 e0       	ldi	r25, 0x09	; 9
    7980:	0e 94 9f 24 	call	0x493e	; 0x493e <_ZN7LSM303DD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    7984:	8f e0       	ldi	r24, 0x0F	; 15
    7986:	9a e0       	ldi	r25, 0x0A	; 10
    7988:	0e 94 9c 23 	call	0x4738	; 0x4738 <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    798c:	8b e1       	ldi	r24, 0x1B	; 27
    798e:	9a e0       	ldi	r25, 0x0A	; 10
    7990:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7994:	8c e1       	ldi	r24, 0x1C	; 28
    7996:	9e e0       	ldi	r25, 0x0E	; 14
    7998:	f5 c0       	rjmp	.+490    	; 0x7b84 <_ZN3RTCD1Ev>
    799a:	08 95       	ret

0000799c <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    799c:	fc 01       	movw	r30, r24
    799e:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    79a0:	60 83       	st	Z, r22
	switch (Portpraefix)
    79a2:	62 34       	cpi	r22, 0x42	; 66
    79a4:	a1 f0       	breq	.+40     	; 0x79ce <_ZN6OutputC1Ehh+0x32>
    79a6:	18 f4       	brcc	.+6      	; 0x79ae <_ZN6OutputC1Ehh+0x12>
    79a8:	61 34       	cpi	r22, 0x41	; 65
    79aa:	31 f0       	breq	.+12     	; 0x79b8 <_ZN6OutputC1Ehh+0x1c>
    79ac:	08 95       	ret
    79ae:	63 34       	cpi	r22, 0x43	; 67
    79b0:	c9 f0       	breq	.+50     	; 0x79e4 <_ZN6OutputC1Ehh+0x48>
    79b2:	64 34       	cpi	r22, 0x44	; 68
    79b4:	11 f1       	breq	.+68     	; 0x79fa <_ZN6OutputC1Ehh+0x5e>
    79b6:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    79b8:	21 b1       	in	r18, 0x01	; 1
    79ba:	81 e0       	ldi	r24, 0x01	; 1
    79bc:	90 e0       	ldi	r25, 0x00	; 0
    79be:	02 c0       	rjmp	.+4      	; 0x79c4 <_ZN6OutputC1Ehh+0x28>
    79c0:	88 0f       	add	r24, r24
    79c2:	99 1f       	adc	r25, r25
    79c4:	4a 95       	dec	r20
    79c6:	e2 f7       	brpl	.-8      	; 0x79c0 <_ZN6OutputC1Ehh+0x24>
    79c8:	82 2b       	or	r24, r18
    79ca:	81 b9       	out	0x01, r24	; 1
			break;
    79cc:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    79ce:	24 b1       	in	r18, 0x04	; 4
    79d0:	81 e0       	ldi	r24, 0x01	; 1
    79d2:	90 e0       	ldi	r25, 0x00	; 0
    79d4:	02 c0       	rjmp	.+4      	; 0x79da <_ZN6OutputC1Ehh+0x3e>
    79d6:	88 0f       	add	r24, r24
    79d8:	99 1f       	adc	r25, r25
    79da:	4a 95       	dec	r20
    79dc:	e2 f7       	brpl	.-8      	; 0x79d6 <_ZN6OutputC1Ehh+0x3a>
    79de:	82 2b       	or	r24, r18
    79e0:	84 b9       	out	0x04, r24	; 4
			break;
    79e2:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    79e4:	27 b1       	in	r18, 0x07	; 7
    79e6:	81 e0       	ldi	r24, 0x01	; 1
    79e8:	90 e0       	ldi	r25, 0x00	; 0
    79ea:	02 c0       	rjmp	.+4      	; 0x79f0 <_ZN6OutputC1Ehh+0x54>
    79ec:	88 0f       	add	r24, r24
    79ee:	99 1f       	adc	r25, r25
    79f0:	4a 95       	dec	r20
    79f2:	e2 f7       	brpl	.-8      	; 0x79ec <_ZN6OutputC1Ehh+0x50>
    79f4:	82 2b       	or	r24, r18
    79f6:	87 b9       	out	0x07, r24	; 7
			break;
    79f8:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    79fa:	2a b1       	in	r18, 0x0a	; 10
    79fc:	81 e0       	ldi	r24, 0x01	; 1
    79fe:	90 e0       	ldi	r25, 0x00	; 0
    7a00:	02 c0       	rjmp	.+4      	; 0x7a06 <_ZN6OutputC1Ehh+0x6a>
    7a02:	88 0f       	add	r24, r24
    7a04:	99 1f       	adc	r25, r25
    7a06:	4a 95       	dec	r20
    7a08:	e2 f7       	brpl	.-8      	; 0x7a02 <_ZN6OutputC1Ehh+0x66>
    7a0a:	82 2b       	or	r24, r18
    7a0c:	8a b9       	out	0x0a, r24	; 10
    7a0e:	08 95       	ret

00007a10 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    7a10:	08 95       	ret

00007a12 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    7a12:	fc 01       	movw	r30, r24
	switch (Port)
    7a14:	90 81       	ld	r25, Z
    7a16:	92 34       	cpi	r25, 0x42	; 66
    7a18:	a9 f0       	breq	.+42     	; 0x7a44 <_ZN6Output2onEv+0x32>
    7a1a:	18 f4       	brcc	.+6      	; 0x7a22 <_ZN6Output2onEv+0x10>
    7a1c:	91 34       	cpi	r25, 0x41	; 65
    7a1e:	31 f0       	breq	.+12     	; 0x7a2c <_ZN6Output2onEv+0x1a>
    7a20:	08 95       	ret
    7a22:	93 34       	cpi	r25, 0x43	; 67
    7a24:	d9 f0       	breq	.+54     	; 0x7a5c <_ZN6Output2onEv+0x4a>
    7a26:	94 34       	cpi	r25, 0x44	; 68
    7a28:	29 f1       	breq	.+74     	; 0x7a74 <_ZN6Output2onEv+0x62>
    7a2a:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    7a2c:	22 b1       	in	r18, 0x02	; 2
    7a2e:	81 e0       	ldi	r24, 0x01	; 1
    7a30:	90 e0       	ldi	r25, 0x00	; 0
    7a32:	01 80       	ldd	r0, Z+1	; 0x01
    7a34:	02 c0       	rjmp	.+4      	; 0x7a3a <_ZN6Output2onEv+0x28>
    7a36:	88 0f       	add	r24, r24
    7a38:	99 1f       	adc	r25, r25
    7a3a:	0a 94       	dec	r0
    7a3c:	e2 f7       	brpl	.-8      	; 0x7a36 <_ZN6Output2onEv+0x24>
    7a3e:	82 2b       	or	r24, r18
    7a40:	82 b9       	out	0x02, r24	; 2
			break;
    7a42:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    7a44:	25 b1       	in	r18, 0x05	; 5
    7a46:	81 e0       	ldi	r24, 0x01	; 1
    7a48:	90 e0       	ldi	r25, 0x00	; 0
    7a4a:	01 80       	ldd	r0, Z+1	; 0x01
    7a4c:	02 c0       	rjmp	.+4      	; 0x7a52 <_ZN6Output2onEv+0x40>
    7a4e:	88 0f       	add	r24, r24
    7a50:	99 1f       	adc	r25, r25
    7a52:	0a 94       	dec	r0
    7a54:	e2 f7       	brpl	.-8      	; 0x7a4e <_ZN6Output2onEv+0x3c>
    7a56:	82 2b       	or	r24, r18
    7a58:	85 b9       	out	0x05, r24	; 5
			break;
    7a5a:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    7a5c:	28 b1       	in	r18, 0x08	; 8
    7a5e:	81 e0       	ldi	r24, 0x01	; 1
    7a60:	90 e0       	ldi	r25, 0x00	; 0
    7a62:	01 80       	ldd	r0, Z+1	; 0x01
    7a64:	02 c0       	rjmp	.+4      	; 0x7a6a <_ZN6Output2onEv+0x58>
    7a66:	88 0f       	add	r24, r24
    7a68:	99 1f       	adc	r25, r25
    7a6a:	0a 94       	dec	r0
    7a6c:	e2 f7       	brpl	.-8      	; 0x7a66 <_ZN6Output2onEv+0x54>
    7a6e:	82 2b       	or	r24, r18
    7a70:	88 b9       	out	0x08, r24	; 8
			break;
    7a72:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    7a74:	2b b1       	in	r18, 0x0b	; 11
    7a76:	81 e0       	ldi	r24, 0x01	; 1
    7a78:	90 e0       	ldi	r25, 0x00	; 0
    7a7a:	01 80       	ldd	r0, Z+1	; 0x01
    7a7c:	02 c0       	rjmp	.+4      	; 0x7a82 <_ZN6Output2onEv+0x70>
    7a7e:	88 0f       	add	r24, r24
    7a80:	99 1f       	adc	r25, r25
    7a82:	0a 94       	dec	r0
    7a84:	e2 f7       	brpl	.-8      	; 0x7a7e <_ZN6Output2onEv+0x6c>
    7a86:	82 2b       	or	r24, r18
    7a88:	8b b9       	out	0x0b, r24	; 11
    7a8a:	08 95       	ret

00007a8c <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    7a8c:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    7a8e:	90 81       	ld	r25, Z
    7a90:	92 34       	cpi	r25, 0x42	; 66
    7a92:	a1 f0       	breq	.+40     	; 0x7abc <_ZN6Output4isonEv+0x30>
    7a94:	18 f4       	brcc	.+6      	; 0x7a9c <_ZN6Output4isonEv+0x10>
    7a96:	91 34       	cpi	r25, 0x41	; 65
    7a98:	31 f0       	breq	.+12     	; 0x7aa6 <_ZN6Output4isonEv+0x1a>
    7a9a:	31 c0       	rjmp	.+98     	; 0x7afe <_ZN6Output4isonEv+0x72>
    7a9c:	93 34       	cpi	r25, 0x43	; 67
    7a9e:	c9 f0       	breq	.+50     	; 0x7ad2 <_ZN6Output4isonEv+0x46>
    7aa0:	94 34       	cpi	r25, 0x44	; 68
    7aa2:	11 f1       	breq	.+68     	; 0x7ae8 <_ZN6Output4isonEv+0x5c>
    7aa4:	2c c0       	rjmp	.+88     	; 0x7afe <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    7aa6:	22 b1       	in	r18, 0x02	; 2
    7aa8:	30 e0       	ldi	r19, 0x00	; 0
    7aaa:	c9 01       	movw	r24, r18
    7aac:	01 80       	ldd	r0, Z+1	; 0x01
    7aae:	02 c0       	rjmp	.+4      	; 0x7ab4 <_ZN6Output4isonEv+0x28>
    7ab0:	95 95       	asr	r25
    7ab2:	87 95       	ror	r24
    7ab4:	0a 94       	dec	r0
    7ab6:	e2 f7       	brpl	.-8      	; 0x7ab0 <_ZN6Output4isonEv+0x24>
    7ab8:	81 70       	andi	r24, 0x01	; 1
    7aba:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    7abc:	25 b1       	in	r18, 0x05	; 5
    7abe:	30 e0       	ldi	r19, 0x00	; 0
    7ac0:	c9 01       	movw	r24, r18
    7ac2:	01 80       	ldd	r0, Z+1	; 0x01
    7ac4:	02 c0       	rjmp	.+4      	; 0x7aca <_ZN6Output4isonEv+0x3e>
    7ac6:	95 95       	asr	r25
    7ac8:	87 95       	ror	r24
    7aca:	0a 94       	dec	r0
    7acc:	e2 f7       	brpl	.-8      	; 0x7ac6 <_ZN6Output4isonEv+0x3a>
    7ace:	81 70       	andi	r24, 0x01	; 1
    7ad0:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    7ad2:	28 b1       	in	r18, 0x08	; 8
    7ad4:	30 e0       	ldi	r19, 0x00	; 0
    7ad6:	c9 01       	movw	r24, r18
    7ad8:	01 80       	ldd	r0, Z+1	; 0x01
    7ada:	02 c0       	rjmp	.+4      	; 0x7ae0 <_ZN6Output4isonEv+0x54>
    7adc:	95 95       	asr	r25
    7ade:	87 95       	ror	r24
    7ae0:	0a 94       	dec	r0
    7ae2:	e2 f7       	brpl	.-8      	; 0x7adc <_ZN6Output4isonEv+0x50>
    7ae4:	81 70       	andi	r24, 0x01	; 1
    7ae6:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    7ae8:	2b b1       	in	r18, 0x0b	; 11
    7aea:	30 e0       	ldi	r19, 0x00	; 0
    7aec:	c9 01       	movw	r24, r18
    7aee:	01 80       	ldd	r0, Z+1	; 0x01
    7af0:	02 c0       	rjmp	.+4      	; 0x7af6 <_ZN6Output4isonEv+0x6a>
    7af2:	95 95       	asr	r25
    7af4:	87 95       	ror	r24
    7af6:	0a 94       	dec	r0
    7af8:	e2 f7       	brpl	.-8      	; 0x7af2 <_ZN6Output4isonEv+0x66>
    7afa:	81 70       	andi	r24, 0x01	; 1
    7afc:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    7afe:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    7b00:	08 95       	ret

00007b02 <_ZN6Output3offEv>:

void Output::off(){
    7b02:	fc 01       	movw	r30, r24
	switch (Port)
    7b04:	90 81       	ld	r25, Z
    7b06:	92 34       	cpi	r25, 0x42	; 66
    7b08:	b1 f0       	breq	.+44     	; 0x7b36 <_ZN6Output3offEv+0x34>
    7b0a:	18 f4       	brcc	.+6      	; 0x7b12 <_ZN6Output3offEv+0x10>
    7b0c:	91 34       	cpi	r25, 0x41	; 65
    7b0e:	31 f0       	breq	.+12     	; 0x7b1c <_ZN6Output3offEv+0x1a>
    7b10:	08 95       	ret
    7b12:	93 34       	cpi	r25, 0x43	; 67
    7b14:	e9 f0       	breq	.+58     	; 0x7b50 <_ZN6Output3offEv+0x4e>
    7b16:	94 34       	cpi	r25, 0x44	; 68
    7b18:	41 f1       	breq	.+80     	; 0x7b6a <_ZN6Output3offEv+0x68>
    7b1a:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    7b1c:	22 b1       	in	r18, 0x02	; 2
    7b1e:	81 e0       	ldi	r24, 0x01	; 1
    7b20:	90 e0       	ldi	r25, 0x00	; 0
    7b22:	01 80       	ldd	r0, Z+1	; 0x01
    7b24:	02 c0       	rjmp	.+4      	; 0x7b2a <_ZN6Output3offEv+0x28>
    7b26:	88 0f       	add	r24, r24
    7b28:	99 1f       	adc	r25, r25
    7b2a:	0a 94       	dec	r0
    7b2c:	e2 f7       	brpl	.-8      	; 0x7b26 <_ZN6Output3offEv+0x24>
    7b2e:	80 95       	com	r24
    7b30:	82 23       	and	r24, r18
    7b32:	82 b9       	out	0x02, r24	; 2
			break;
    7b34:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    7b36:	25 b1       	in	r18, 0x05	; 5
    7b38:	81 e0       	ldi	r24, 0x01	; 1
    7b3a:	90 e0       	ldi	r25, 0x00	; 0
    7b3c:	01 80       	ldd	r0, Z+1	; 0x01
    7b3e:	02 c0       	rjmp	.+4      	; 0x7b44 <_ZN6Output3offEv+0x42>
    7b40:	88 0f       	add	r24, r24
    7b42:	99 1f       	adc	r25, r25
    7b44:	0a 94       	dec	r0
    7b46:	e2 f7       	brpl	.-8      	; 0x7b40 <_ZN6Output3offEv+0x3e>
    7b48:	80 95       	com	r24
    7b4a:	82 23       	and	r24, r18
    7b4c:	85 b9       	out	0x05, r24	; 5
			break;
    7b4e:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    7b50:	28 b1       	in	r18, 0x08	; 8
    7b52:	81 e0       	ldi	r24, 0x01	; 1
    7b54:	90 e0       	ldi	r25, 0x00	; 0
    7b56:	01 80       	ldd	r0, Z+1	; 0x01
    7b58:	02 c0       	rjmp	.+4      	; 0x7b5e <_ZN6Output3offEv+0x5c>
    7b5a:	88 0f       	add	r24, r24
    7b5c:	99 1f       	adc	r25, r25
    7b5e:	0a 94       	dec	r0
    7b60:	e2 f7       	brpl	.-8      	; 0x7b5a <_ZN6Output3offEv+0x58>
    7b62:	80 95       	com	r24
    7b64:	82 23       	and	r24, r18
    7b66:	88 b9       	out	0x08, r24	; 8
			break;
    7b68:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    7b6a:	2b b1       	in	r18, 0x0b	; 11
    7b6c:	81 e0       	ldi	r24, 0x01	; 1
    7b6e:	90 e0       	ldi	r25, 0x00	; 0
    7b70:	01 80       	ldd	r0, Z+1	; 0x01
    7b72:	02 c0       	rjmp	.+4      	; 0x7b78 <_ZN6Output3offEv+0x76>
    7b74:	88 0f       	add	r24, r24
    7b76:	99 1f       	adc	r25, r25
    7b78:	0a 94       	dec	r0
    7b7a:	e2 f7       	brpl	.-8      	; 0x7b74 <_ZN6Output3offEv+0x72>
    7b7c:	80 95       	com	r24
    7b7e:	82 23       	and	r24, r18
    7b80:	8b b9       	out	0x0b, r24	; 11
    7b82:	08 95       	ret

00007b84 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    7b84:	08 95       	ret

00007b86 <_ZN3RTC6WeckerEv>:
    7b86:	fc 01       	movw	r30, r24
    7b88:	80 8d       	ldd	r24, Z+24	; 0x18
    7b8a:	83 ff       	sbrs	r24, 3
    7b8c:	0c c0       	rjmp	.+24     	; 0x7ba6 <_ZN3RTC6WeckerEv+0x20>
    7b8e:	84 fd       	sbrc	r24, 4
    7b90:	0a c0       	rjmp	.+20     	; 0x7ba6 <_ZN3RTC6WeckerEv+0x20>
    7b92:	22 8d       	ldd	r18, Z+26	; 0x1a
    7b94:	90 89       	ldd	r25, Z+16	; 0x10
    7b96:	29 13       	cpse	r18, r25
    7b98:	06 c0       	rjmp	.+12     	; 0x7ba6 <_ZN3RTC6WeckerEv+0x20>
    7b9a:	21 8d       	ldd	r18, Z+25	; 0x19
    7b9c:	91 89       	ldd	r25, Z+17	; 0x11
    7b9e:	29 13       	cpse	r18, r25
    7ba0:	02 c0       	rjmp	.+4      	; 0x7ba6 <_ZN3RTC6WeckerEv+0x20>
    7ba2:	80 61       	ori	r24, 0x10	; 16
    7ba4:	80 8f       	std	Z+24, r24	; 0x18
    7ba6:	08 95       	ret

00007ba8 <_ZN3RTC14ausgabezeitneuEv>:
    7ba8:	fc 01       	movw	r30, r24
    7baa:	20 89       	ldd	r18, Z+16	; 0x10
    7bac:	9d ec       	ldi	r25, 0xCD	; 205
    7bae:	29 9f       	mul	r18, r25
    7bb0:	81 2d       	mov	r24, r1
    7bb2:	11 24       	eor	r1, r1
    7bb4:	86 95       	lsr	r24
    7bb6:	86 95       	lsr	r24
    7bb8:	86 95       	lsr	r24
    7bba:	30 e3       	ldi	r19, 0x30	; 48
    7bbc:	38 0f       	add	r19, r24
    7bbe:	30 83       	st	Z, r19
    7bc0:	88 0f       	add	r24, r24
    7bc2:	38 2f       	mov	r19, r24
    7bc4:	33 0f       	add	r19, r19
    7bc6:	33 0f       	add	r19, r19
    7bc8:	83 0f       	add	r24, r19
    7bca:	28 1b       	sub	r18, r24
    7bcc:	20 5d       	subi	r18, 0xD0	; 208
    7bce:	21 83       	std	Z+1, r18	; 0x01
    7bd0:	21 89       	ldd	r18, Z+17	; 0x11
    7bd2:	29 9f       	mul	r18, r25
    7bd4:	81 2d       	mov	r24, r1
    7bd6:	11 24       	eor	r1, r1
    7bd8:	86 95       	lsr	r24
    7bda:	86 95       	lsr	r24
    7bdc:	86 95       	lsr	r24
    7bde:	30 e3       	ldi	r19, 0x30	; 48
    7be0:	38 0f       	add	r19, r24
    7be2:	33 83       	std	Z+3, r19	; 0x03
    7be4:	88 0f       	add	r24, r24
    7be6:	38 2f       	mov	r19, r24
    7be8:	33 0f       	add	r19, r19
    7bea:	33 0f       	add	r19, r19
    7bec:	83 0f       	add	r24, r19
    7bee:	28 1b       	sub	r18, r24
    7bf0:	20 5d       	subi	r18, 0xD0	; 208
    7bf2:	24 83       	std	Z+4, r18	; 0x04
    7bf4:	82 89       	ldd	r24, Z+18	; 0x12
    7bf6:	89 9f       	mul	r24, r25
    7bf8:	91 2d       	mov	r25, r1
    7bfa:	11 24       	eor	r1, r1
    7bfc:	96 95       	lsr	r25
    7bfe:	96 95       	lsr	r25
    7c00:	96 95       	lsr	r25
    7c02:	20 e3       	ldi	r18, 0x30	; 48
    7c04:	29 0f       	add	r18, r25
    7c06:	26 83       	std	Z+6, r18	; 0x06
    7c08:	99 0f       	add	r25, r25
    7c0a:	29 2f       	mov	r18, r25
    7c0c:	22 0f       	add	r18, r18
    7c0e:	22 0f       	add	r18, r18
    7c10:	92 0f       	add	r25, r18
    7c12:	89 1b       	sub	r24, r25
    7c14:	80 5d       	subi	r24, 0xD0	; 208
    7c16:	87 83       	std	Z+7, r24	; 0x07
    7c18:	08 95       	ret

00007c1a <_ZN3RTC15ausgabedatumneuEv>:
    7c1a:	fc 01       	movw	r30, r24
    7c1c:	24 89       	ldd	r18, Z+20	; 0x14
    7c1e:	9d ec       	ldi	r25, 0xCD	; 205
    7c20:	29 9f       	mul	r18, r25
    7c22:	81 2d       	mov	r24, r1
    7c24:	11 24       	eor	r1, r1
    7c26:	86 95       	lsr	r24
    7c28:	86 95       	lsr	r24
    7c2a:	86 95       	lsr	r24
    7c2c:	30 e3       	ldi	r19, 0x30	; 48
    7c2e:	38 0f       	add	r19, r24
    7c30:	30 87       	std	Z+8, r19	; 0x08
    7c32:	88 0f       	add	r24, r24
    7c34:	38 2f       	mov	r19, r24
    7c36:	33 0f       	add	r19, r19
    7c38:	33 0f       	add	r19, r19
    7c3a:	83 0f       	add	r24, r19
    7c3c:	28 1b       	sub	r18, r24
    7c3e:	20 5d       	subi	r18, 0xD0	; 208
    7c40:	21 87       	std	Z+9, r18	; 0x09
    7c42:	26 89       	ldd	r18, Z+22	; 0x16
    7c44:	29 9f       	mul	r18, r25
    7c46:	81 2d       	mov	r24, r1
    7c48:	11 24       	eor	r1, r1
    7c4a:	86 95       	lsr	r24
    7c4c:	86 95       	lsr	r24
    7c4e:	86 95       	lsr	r24
    7c50:	30 e3       	ldi	r19, 0x30	; 48
    7c52:	38 0f       	add	r19, r24
    7c54:	33 87       	std	Z+11, r19	; 0x0b
    7c56:	88 0f       	add	r24, r24
    7c58:	38 2f       	mov	r19, r24
    7c5a:	33 0f       	add	r19, r19
    7c5c:	33 0f       	add	r19, r19
    7c5e:	83 0f       	add	r24, r19
    7c60:	28 1b       	sub	r18, r24
    7c62:	20 5d       	subi	r18, 0xD0	; 208
    7c64:	24 87       	std	Z+12, r18	; 0x0c
    7c66:	87 89       	ldd	r24, Z+23	; 0x17
    7c68:	89 9f       	mul	r24, r25
    7c6a:	91 2d       	mov	r25, r1
    7c6c:	11 24       	eor	r1, r1
    7c6e:	96 95       	lsr	r25
    7c70:	96 95       	lsr	r25
    7c72:	96 95       	lsr	r25
    7c74:	20 e3       	ldi	r18, 0x30	; 48
    7c76:	29 0f       	add	r18, r25
    7c78:	26 87       	std	Z+14, r18	; 0x0e
    7c7a:	99 0f       	add	r25, r25
    7c7c:	29 2f       	mov	r18, r25
    7c7e:	22 0f       	add	r18, r18
    7c80:	22 0f       	add	r18, r18
    7c82:	92 0f       	add	r25, r18
    7c84:	89 1b       	sub	r24, r25
    7c86:	80 5d       	subi	r24, 0xD0	; 208
    7c88:	87 87       	std	Z+15, r24	; 0x0f
    7c8a:	08 95       	ret

00007c8c <_ZN3RTCC1Ev>:
    7c8c:	cf 93       	push	r28
    7c8e:	df 93       	push	r29
    7c90:	ec 01       	movw	r28, r24
    7c92:	1a 8a       	std	Y+18, r1	; 0x12
    7c94:	1b 8a       	std	Y+19, r1	; 0x13
    7c96:	19 8a       	std	Y+17, r1	; 0x11
    7c98:	18 8a       	std	Y+16, r1	; 0x10
    7c9a:	1c 8a       	std	Y+20, r1	; 0x14
    7c9c:	1e 8a       	std	Y+22, r1	; 0x16
    7c9e:	1f 8a       	std	Y+23, r1	; 0x17
    7ca0:	1d 8a       	std	Y+21, r1	; 0x15
    7ca2:	88 e2       	ldi	r24, 0x28	; 40
    7ca4:	89 8f       	std	Y+25, r24	; 0x19
    7ca6:	8a e0       	ldi	r24, 0x0A	; 10
    7ca8:	8a 8f       	std	Y+26, r24	; 0x1a
    7caa:	1c 8e       	std	Y+28, r1	; 0x1c
    7cac:	1b 8e       	std	Y+27, r1	; 0x1b
    7cae:	1e 8e       	std	Y+30, r1	; 0x1e
    7cb0:	1d 8e       	std	Y+29, r1	; 0x1d
    7cb2:	fe 01       	movw	r30, r28
    7cb4:	ce 01       	movw	r24, r28
    7cb6:	08 96       	adiw	r24, 0x08	; 8
    7cb8:	dc 01       	movw	r26, r24
    7cba:	11 92       	st	Z+, r1
    7cbc:	1d 92       	st	X+, r1
    7cbe:	e8 17       	cp	r30, r24
    7cc0:	f9 07       	cpc	r31, r25
    7cc2:	d9 f7       	brne	.-10     	; 0x7cba <_ZN3RTCC1Ev+0x2e>
    7cc4:	8a e3       	ldi	r24, 0x3A	; 58
    7cc6:	8a 83       	std	Y+2, r24	; 0x02
    7cc8:	8d 83       	std	Y+5, r24	; 0x05
    7cca:	8e e2       	ldi	r24, 0x2E	; 46
    7ccc:	8a 87       	std	Y+10, r24	; 0x0a
    7cce:	8d 87       	std	Y+13, r24	; 0x0d
    7cd0:	ce 01       	movw	r24, r28
    7cd2:	6a df       	rcall	.-300    	; 0x7ba8 <_ZN3RTC14ausgabezeitneuEv>
    7cd4:	ce 01       	movw	r24, r28
    7cd6:	a1 df       	rcall	.-190    	; 0x7c1a <_ZN3RTC15ausgabedatumneuEv>
    7cd8:	df 91       	pop	r29
    7cda:	cf 91       	pop	r28
    7cdc:	08 95       	ret

00007cde <_ZN3RTC8kalenderEv>:
    7cde:	fc 01       	movw	r30, r24
    7ce0:	26 89       	ldd	r18, Z+22	; 0x16
    7ce2:	32 2f       	mov	r19, r18
    7ce4:	3d 7f       	andi	r19, 0xFD	; 253
    7ce6:	34 30       	cpi	r19, 0x04	; 4
    7ce8:	11 f0       	breq	.+4      	; 0x7cee <_ZN3RTC8kalenderEv+0x10>
    7cea:	39 30       	cpi	r19, 0x09	; 9
    7cec:	91 f4       	brne	.+36     	; 0x7d12 <_ZN3RTC8kalenderEv+0x34>
    7cee:	fc 01       	movw	r30, r24
    7cf0:	34 89       	ldd	r19, Z+20	; 0x14
    7cf2:	3f 31       	cpi	r19, 0x1F	; 31
    7cf4:	b0 f1       	brcs	.+108    	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7cf6:	31 e0       	ldi	r19, 0x01	; 1
    7cf8:	34 8b       	std	Z+20, r19	; 0x14
    7cfa:	2f 5f       	subi	r18, 0xFF	; 255
    7cfc:	2d 30       	cpi	r18, 0x0D	; 13
    7cfe:	10 f4       	brcc	.+4      	; 0x7d04 <_ZN3RTC8kalenderEv+0x26>
    7d00:	26 8b       	std	Z+22, r18	; 0x16
    7d02:	2f c0       	rjmp	.+94     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d04:	21 e0       	ldi	r18, 0x01	; 1
    7d06:	fc 01       	movw	r30, r24
    7d08:	26 8b       	std	Z+22, r18	; 0x16
    7d0a:	27 89       	ldd	r18, Z+23	; 0x17
    7d0c:	2f 5f       	subi	r18, 0xFF	; 255
    7d0e:	27 8b       	std	Z+23, r18	; 0x17
    7d10:	28 c0       	rjmp	.+80     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d12:	22 30       	cpi	r18, 0x02	; 2
    7d14:	a9 f4       	brne	.+42     	; 0x7d40 <_ZN3RTC8kalenderEv+0x62>
    7d16:	fc 01       	movw	r30, r24
    7d18:	27 89       	ldd	r18, Z+23	; 0x17
    7d1a:	23 70       	andi	r18, 0x03	; 3
    7d1c:	41 f4       	brne	.+16     	; 0x7d2e <_ZN3RTC8kalenderEv+0x50>
    7d1e:	24 89       	ldd	r18, Z+20	; 0x14
    7d20:	2e 31       	cpi	r18, 0x1E	; 30
    7d22:	f8 f0       	brcs	.+62     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d24:	21 e0       	ldi	r18, 0x01	; 1
    7d26:	24 8b       	std	Z+20, r18	; 0x14
    7d28:	23 e0       	ldi	r18, 0x03	; 3
    7d2a:	26 8b       	std	Z+22, r18	; 0x16
    7d2c:	1a c0       	rjmp	.+52     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d2e:	fc 01       	movw	r30, r24
    7d30:	24 89       	ldd	r18, Z+20	; 0x14
    7d32:	2d 31       	cpi	r18, 0x1D	; 29
    7d34:	b0 f0       	brcs	.+44     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d36:	21 e0       	ldi	r18, 0x01	; 1
    7d38:	24 8b       	std	Z+20, r18	; 0x14
    7d3a:	23 e0       	ldi	r18, 0x03	; 3
    7d3c:	26 8b       	std	Z+22, r18	; 0x16
    7d3e:	11 c0       	rjmp	.+34     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d40:	fc 01       	movw	r30, r24
    7d42:	34 89       	ldd	r19, Z+20	; 0x14
    7d44:	30 32       	cpi	r19, 0x20	; 32
    7d46:	68 f0       	brcs	.+26     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d48:	31 e0       	ldi	r19, 0x01	; 1
    7d4a:	34 8b       	std	Z+20, r19	; 0x14
    7d4c:	2f 5f       	subi	r18, 0xFF	; 255
    7d4e:	2d 30       	cpi	r18, 0x0D	; 13
    7d50:	10 f4       	brcc	.+4      	; 0x7d56 <_ZN3RTC8kalenderEv+0x78>
    7d52:	26 8b       	std	Z+22, r18	; 0x16
    7d54:	06 c0       	rjmp	.+12     	; 0x7d62 <_ZN3RTC8kalenderEv+0x84>
    7d56:	21 e0       	ldi	r18, 0x01	; 1
    7d58:	fc 01       	movw	r30, r24
    7d5a:	26 8b       	std	Z+22, r18	; 0x16
    7d5c:	27 89       	ldd	r18, Z+23	; 0x17
    7d5e:	2f 5f       	subi	r18, 0xFF	; 255
    7d60:	27 8b       	std	Z+23, r18	; 0x17
    7d62:	5b cf       	rjmp	.-330    	; 0x7c1a <_ZN3RTC15ausgabedatumneuEv>
    7d64:	08 95       	ret

00007d66 <_ZN3RTC4zeitEv>:
    7d66:	cf 93       	push	r28
    7d68:	df 93       	push	r29
    7d6a:	ec 01       	movw	r28, r24
    7d6c:	8a 89       	ldd	r24, Y+18	; 0x12
    7d6e:	8c 53       	subi	r24, 0x3C	; 60
    7d70:	8d 38       	cpi	r24, 0x8D	; 141
    7d72:	c0 f4       	brcc	.+48     	; 0x7da4 <_ZN3RTC4zeitEv+0x3e>
    7d74:	1a 8a       	std	Y+18, r1	; 0x12
    7d76:	89 89       	ldd	r24, Y+17	; 0x11
    7d78:	8f 5f       	subi	r24, 0xFF	; 255
    7d7a:	89 8b       	std	Y+17, r24	; 0x11
    7d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    7d7e:	94 60       	ori	r25, 0x04	; 4
    7d80:	98 8f       	std	Y+24, r25	; 0x18
    7d82:	8c 33       	cpi	r24, 0x3C	; 60
    7d84:	68 f0       	brcs	.+26     	; 0x7da0 <_ZN3RTC4zeitEv+0x3a>
    7d86:	19 8a       	std	Y+17, r1	; 0x11
    7d88:	88 89       	ldd	r24, Y+16	; 0x10
    7d8a:	8f 5f       	subi	r24, 0xFF	; 255
    7d8c:	88 31       	cpi	r24, 0x18	; 24
    7d8e:	10 f4       	brcc	.+4      	; 0x7d94 <_ZN3RTC4zeitEv+0x2e>
    7d90:	88 8b       	std	Y+16, r24	; 0x10
    7d92:	06 c0       	rjmp	.+12     	; 0x7da0 <_ZN3RTC4zeitEv+0x3a>
    7d94:	18 8a       	std	Y+16, r1	; 0x10
    7d96:	8c 89       	ldd	r24, Y+20	; 0x14
    7d98:	8f 5f       	subi	r24, 0xFF	; 255
    7d9a:	8c 8b       	std	Y+20, r24	; 0x14
    7d9c:	ce 01       	movw	r24, r28
    7d9e:	9f df       	rcall	.-194    	; 0x7cde <_ZN3RTC8kalenderEv>
    7da0:	ce 01       	movw	r24, r28
    7da2:	f1 de       	rcall	.-542    	; 0x7b86 <_ZN3RTC6WeckerEv>
    7da4:	ce 01       	movw	r24, r28
    7da6:	00 df       	rcall	.-512    	; 0x7ba8 <_ZN3RTC14ausgabezeitneuEv>
    7da8:	88 8d       	ldd	r24, Y+24	; 0x18
    7daa:	85 ff       	sbrs	r24, 5
    7dac:	0b c0       	rjmp	.+22     	; 0x7dc4 <_ZN3RTC4zeitEv+0x5e>
    7dae:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7db0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7db2:	21 50       	subi	r18, 0x01	; 1
    7db4:	31 09       	sbc	r19, r1
    7db6:	3c 8f       	std	Y+28, r19	; 0x1c
    7db8:	2b 8f       	std	Y+27, r18	; 0x1b
    7dba:	23 2b       	or	r18, r19
    7dbc:	19 f4       	brne	.+6      	; 0x7dc4 <_ZN3RTC4zeitEv+0x5e>
    7dbe:	8f 7d       	andi	r24, 0xDF	; 223
    7dc0:	81 60       	ori	r24, 0x01	; 1
    7dc2:	88 8f       	std	Y+24, r24	; 0x18
    7dc4:	88 8d       	ldd	r24, Y+24	; 0x18
    7dc6:	86 ff       	sbrs	r24, 6
    7dc8:	05 c0       	rjmp	.+10     	; 0x7dd4 <_ZN3RTC4zeitEv+0x6e>
    7dca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7dcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7dce:	01 96       	adiw	r24, 0x01	; 1
    7dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    7dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    7dd4:	80 e0       	ldi	r24, 0x00	; 0
    7dd6:	df 91       	pop	r29
    7dd8:	cf 91       	pop	r28
    7dda:	08 95       	ret

00007ddc <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    7ddc:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    7dde:	80 e3       	ldi	r24, 0x30	; 48
    7de0:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    7de2:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    7de4:	9a e3       	ldi	r25, 0x3A	; 58
    7de6:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    7de8:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    7dea:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    7dec:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    7dee:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    7df0:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    7df2:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    7df4:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    7df8:	e6 eb       	ldi	r30, 0xB6	; 182
    7dfa:	f0 e0       	ldi	r31, 0x00	; 0
    7dfc:	80 81       	ld	r24, Z
    7dfe:	80 62       	ori	r24, 0x20	; 32
    7e00:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    7e02:	81 e0       	ldi	r24, 0x01	; 1
    7e04:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    7e08:	85 e0       	ldi	r24, 0x05	; 5
    7e0a:	80 93 b1 00 	sts	0x00B1, r24
    7e0e:	08 95       	ret

00007e10 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    7e10:	e1 eb       	ldi	r30, 0xB1	; 177
    7e12:	f0 e0       	ldi	r31, 0x00	; 0
    7e14:	80 81       	ld	r24, Z
    7e16:	89 7f       	andi	r24, 0xF9	; 249
    7e18:	80 83       	st	Z, r24
    7e1a:	08 95       	ret

00007e1c <__subsf3>:
    7e1c:	50 58       	subi	r21, 0x80	; 128

00007e1e <__addsf3>:
    7e1e:	bb 27       	eor	r27, r27
    7e20:	aa 27       	eor	r26, r26
    7e22:	0e d0       	rcall	.+28     	; 0x7e40 <__addsf3x>
    7e24:	c1 c1       	rjmp	.+898    	; 0x81a8 <__fp_round>
    7e26:	8a d1       	rcall	.+788    	; 0x813c <__fp_pscA>
    7e28:	30 f0       	brcs	.+12     	; 0x7e36 <__addsf3+0x18>
    7e2a:	8f d1       	rcall	.+798    	; 0x814a <__fp_pscB>
    7e2c:	20 f0       	brcs	.+8      	; 0x7e36 <__addsf3+0x18>
    7e2e:	31 f4       	brne	.+12     	; 0x7e3c <__addsf3+0x1e>
    7e30:	9f 3f       	cpi	r25, 0xFF	; 255
    7e32:	11 f4       	brne	.+4      	; 0x7e38 <__addsf3+0x1a>
    7e34:	1e f4       	brtc	.+6      	; 0x7e3c <__addsf3+0x1e>
    7e36:	5a c1       	rjmp	.+692    	; 0x80ec <__fp_nan>
    7e38:	0e f4       	brtc	.+2      	; 0x7e3c <__addsf3+0x1e>
    7e3a:	e0 95       	com	r30
    7e3c:	e7 fb       	bst	r30, 7
    7e3e:	50 c1       	rjmp	.+672    	; 0x80e0 <__fp_inf>

00007e40 <__addsf3x>:
    7e40:	e9 2f       	mov	r30, r25
    7e42:	d4 d1       	rcall	.+936    	; 0x81ec <__fp_split3>
    7e44:	80 f3       	brcs	.-32     	; 0x7e26 <__addsf3+0x8>
    7e46:	ba 17       	cp	r27, r26
    7e48:	62 07       	cpc	r22, r18
    7e4a:	73 07       	cpc	r23, r19
    7e4c:	84 07       	cpc	r24, r20
    7e4e:	95 07       	cpc	r25, r21
    7e50:	18 f0       	brcs	.+6      	; 0x7e58 <__addsf3x+0x18>
    7e52:	71 f4       	brne	.+28     	; 0x7e70 <__addsf3x+0x30>
    7e54:	9e f5       	brtc	.+102    	; 0x7ebc <__addsf3x+0x7c>
    7e56:	ec c1       	rjmp	.+984    	; 0x8230 <__fp_zero>
    7e58:	0e f4       	brtc	.+2      	; 0x7e5c <__addsf3x+0x1c>
    7e5a:	e0 95       	com	r30
    7e5c:	0b 2e       	mov	r0, r27
    7e5e:	ba 2f       	mov	r27, r26
    7e60:	a0 2d       	mov	r26, r0
    7e62:	0b 01       	movw	r0, r22
    7e64:	b9 01       	movw	r22, r18
    7e66:	90 01       	movw	r18, r0
    7e68:	0c 01       	movw	r0, r24
    7e6a:	ca 01       	movw	r24, r20
    7e6c:	a0 01       	movw	r20, r0
    7e6e:	11 24       	eor	r1, r1
    7e70:	ff 27       	eor	r31, r31
    7e72:	59 1b       	sub	r21, r25
    7e74:	99 f0       	breq	.+38     	; 0x7e9c <__addsf3x+0x5c>
    7e76:	59 3f       	cpi	r21, 0xF9	; 249
    7e78:	50 f4       	brcc	.+20     	; 0x7e8e <__addsf3x+0x4e>
    7e7a:	50 3e       	cpi	r21, 0xE0	; 224
    7e7c:	68 f1       	brcs	.+90     	; 0x7ed8 <__addsf3x+0x98>
    7e7e:	1a 16       	cp	r1, r26
    7e80:	f0 40       	sbci	r31, 0x00	; 0
    7e82:	a2 2f       	mov	r26, r18
    7e84:	23 2f       	mov	r18, r19
    7e86:	34 2f       	mov	r19, r20
    7e88:	44 27       	eor	r20, r20
    7e8a:	58 5f       	subi	r21, 0xF8	; 248
    7e8c:	f3 cf       	rjmp	.-26     	; 0x7e74 <__addsf3x+0x34>
    7e8e:	46 95       	lsr	r20
    7e90:	37 95       	ror	r19
    7e92:	27 95       	ror	r18
    7e94:	a7 95       	ror	r26
    7e96:	f0 40       	sbci	r31, 0x00	; 0
    7e98:	53 95       	inc	r21
    7e9a:	c9 f7       	brne	.-14     	; 0x7e8e <__addsf3x+0x4e>
    7e9c:	7e f4       	brtc	.+30     	; 0x7ebc <__addsf3x+0x7c>
    7e9e:	1f 16       	cp	r1, r31
    7ea0:	ba 0b       	sbc	r27, r26
    7ea2:	62 0b       	sbc	r22, r18
    7ea4:	73 0b       	sbc	r23, r19
    7ea6:	84 0b       	sbc	r24, r20
    7ea8:	ba f0       	brmi	.+46     	; 0x7ed8 <__addsf3x+0x98>
    7eaa:	91 50       	subi	r25, 0x01	; 1
    7eac:	a1 f0       	breq	.+40     	; 0x7ed6 <__addsf3x+0x96>
    7eae:	ff 0f       	add	r31, r31
    7eb0:	bb 1f       	adc	r27, r27
    7eb2:	66 1f       	adc	r22, r22
    7eb4:	77 1f       	adc	r23, r23
    7eb6:	88 1f       	adc	r24, r24
    7eb8:	c2 f7       	brpl	.-16     	; 0x7eaa <__addsf3x+0x6a>
    7eba:	0e c0       	rjmp	.+28     	; 0x7ed8 <__addsf3x+0x98>
    7ebc:	ba 0f       	add	r27, r26
    7ebe:	62 1f       	adc	r22, r18
    7ec0:	73 1f       	adc	r23, r19
    7ec2:	84 1f       	adc	r24, r20
    7ec4:	48 f4       	brcc	.+18     	; 0x7ed8 <__addsf3x+0x98>
    7ec6:	87 95       	ror	r24
    7ec8:	77 95       	ror	r23
    7eca:	67 95       	ror	r22
    7ecc:	b7 95       	ror	r27
    7ece:	f7 95       	ror	r31
    7ed0:	9e 3f       	cpi	r25, 0xFE	; 254
    7ed2:	08 f0       	brcs	.+2      	; 0x7ed6 <__addsf3x+0x96>
    7ed4:	b3 cf       	rjmp	.-154    	; 0x7e3c <__addsf3+0x1e>
    7ed6:	93 95       	inc	r25
    7ed8:	88 0f       	add	r24, r24
    7eda:	08 f0       	brcs	.+2      	; 0x7ede <__addsf3x+0x9e>
    7edc:	99 27       	eor	r25, r25
    7ede:	ee 0f       	add	r30, r30
    7ee0:	97 95       	ror	r25
    7ee2:	87 95       	ror	r24
    7ee4:	08 95       	ret

00007ee6 <cos>:
    7ee6:	39 d1       	rcall	.+626    	; 0x815a <__fp_rempio2>
    7ee8:	e3 95       	inc	r30
    7eea:	6f c1       	rjmp	.+734    	; 0x81ca <__fp_sinus>

00007eec <__divsf3>:
    7eec:	0c d0       	rcall	.+24     	; 0x7f06 <__divsf3x>
    7eee:	5c c1       	rjmp	.+696    	; 0x81a8 <__fp_round>
    7ef0:	2c d1       	rcall	.+600    	; 0x814a <__fp_pscB>
    7ef2:	40 f0       	brcs	.+16     	; 0x7f04 <__divsf3+0x18>
    7ef4:	23 d1       	rcall	.+582    	; 0x813c <__fp_pscA>
    7ef6:	30 f0       	brcs	.+12     	; 0x7f04 <__divsf3+0x18>
    7ef8:	21 f4       	brne	.+8      	; 0x7f02 <__divsf3+0x16>
    7efa:	5f 3f       	cpi	r21, 0xFF	; 255
    7efc:	19 f0       	breq	.+6      	; 0x7f04 <__divsf3+0x18>
    7efe:	f0 c0       	rjmp	.+480    	; 0x80e0 <__fp_inf>
    7f00:	51 11       	cpse	r21, r1
    7f02:	97 c1       	rjmp	.+814    	; 0x8232 <__fp_szero>
    7f04:	f3 c0       	rjmp	.+486    	; 0x80ec <__fp_nan>

00007f06 <__divsf3x>:
    7f06:	72 d1       	rcall	.+740    	; 0x81ec <__fp_split3>
    7f08:	98 f3       	brcs	.-26     	; 0x7ef0 <__divsf3+0x4>

00007f0a <__divsf3_pse>:
    7f0a:	99 23       	and	r25, r25
    7f0c:	c9 f3       	breq	.-14     	; 0x7f00 <__divsf3+0x14>
    7f0e:	55 23       	and	r21, r21
    7f10:	b1 f3       	breq	.-20     	; 0x7efe <__divsf3+0x12>
    7f12:	95 1b       	sub	r25, r21
    7f14:	55 0b       	sbc	r21, r21
    7f16:	bb 27       	eor	r27, r27
    7f18:	aa 27       	eor	r26, r26
    7f1a:	62 17       	cp	r22, r18
    7f1c:	73 07       	cpc	r23, r19
    7f1e:	84 07       	cpc	r24, r20
    7f20:	38 f0       	brcs	.+14     	; 0x7f30 <__divsf3_pse+0x26>
    7f22:	9f 5f       	subi	r25, 0xFF	; 255
    7f24:	5f 4f       	sbci	r21, 0xFF	; 255
    7f26:	22 0f       	add	r18, r18
    7f28:	33 1f       	adc	r19, r19
    7f2a:	44 1f       	adc	r20, r20
    7f2c:	aa 1f       	adc	r26, r26
    7f2e:	a9 f3       	breq	.-22     	; 0x7f1a <__divsf3_pse+0x10>
    7f30:	33 d0       	rcall	.+102    	; 0x7f98 <__divsf3_pse+0x8e>
    7f32:	0e 2e       	mov	r0, r30
    7f34:	3a f0       	brmi	.+14     	; 0x7f44 <__divsf3_pse+0x3a>
    7f36:	e0 e8       	ldi	r30, 0x80	; 128
    7f38:	30 d0       	rcall	.+96     	; 0x7f9a <__divsf3_pse+0x90>
    7f3a:	91 50       	subi	r25, 0x01	; 1
    7f3c:	50 40       	sbci	r21, 0x00	; 0
    7f3e:	e6 95       	lsr	r30
    7f40:	00 1c       	adc	r0, r0
    7f42:	ca f7       	brpl	.-14     	; 0x7f36 <__divsf3_pse+0x2c>
    7f44:	29 d0       	rcall	.+82     	; 0x7f98 <__divsf3_pse+0x8e>
    7f46:	fe 2f       	mov	r31, r30
    7f48:	27 d0       	rcall	.+78     	; 0x7f98 <__divsf3_pse+0x8e>
    7f4a:	66 0f       	add	r22, r22
    7f4c:	77 1f       	adc	r23, r23
    7f4e:	88 1f       	adc	r24, r24
    7f50:	bb 1f       	adc	r27, r27
    7f52:	26 17       	cp	r18, r22
    7f54:	37 07       	cpc	r19, r23
    7f56:	48 07       	cpc	r20, r24
    7f58:	ab 07       	cpc	r26, r27
    7f5a:	b0 e8       	ldi	r27, 0x80	; 128
    7f5c:	09 f0       	breq	.+2      	; 0x7f60 <__divsf3_pse+0x56>
    7f5e:	bb 0b       	sbc	r27, r27
    7f60:	80 2d       	mov	r24, r0
    7f62:	bf 01       	movw	r22, r30
    7f64:	ff 27       	eor	r31, r31
    7f66:	93 58       	subi	r25, 0x83	; 131
    7f68:	5f 4f       	sbci	r21, 0xFF	; 255
    7f6a:	2a f0       	brmi	.+10     	; 0x7f76 <__divsf3_pse+0x6c>
    7f6c:	9e 3f       	cpi	r25, 0xFE	; 254
    7f6e:	51 05       	cpc	r21, r1
    7f70:	68 f0       	brcs	.+26     	; 0x7f8c <__divsf3_pse+0x82>
    7f72:	b6 c0       	rjmp	.+364    	; 0x80e0 <__fp_inf>
    7f74:	5e c1       	rjmp	.+700    	; 0x8232 <__fp_szero>
    7f76:	5f 3f       	cpi	r21, 0xFF	; 255
    7f78:	ec f3       	brlt	.-6      	; 0x7f74 <__divsf3_pse+0x6a>
    7f7a:	98 3e       	cpi	r25, 0xE8	; 232
    7f7c:	dc f3       	brlt	.-10     	; 0x7f74 <__divsf3_pse+0x6a>
    7f7e:	86 95       	lsr	r24
    7f80:	77 95       	ror	r23
    7f82:	67 95       	ror	r22
    7f84:	b7 95       	ror	r27
    7f86:	f7 95       	ror	r31
    7f88:	9f 5f       	subi	r25, 0xFF	; 255
    7f8a:	c9 f7       	brne	.-14     	; 0x7f7e <__divsf3_pse+0x74>
    7f8c:	88 0f       	add	r24, r24
    7f8e:	91 1d       	adc	r25, r1
    7f90:	96 95       	lsr	r25
    7f92:	87 95       	ror	r24
    7f94:	97 f9       	bld	r25, 7
    7f96:	08 95       	ret
    7f98:	e1 e0       	ldi	r30, 0x01	; 1
    7f9a:	66 0f       	add	r22, r22
    7f9c:	77 1f       	adc	r23, r23
    7f9e:	88 1f       	adc	r24, r24
    7fa0:	bb 1f       	adc	r27, r27
    7fa2:	62 17       	cp	r22, r18
    7fa4:	73 07       	cpc	r23, r19
    7fa6:	84 07       	cpc	r24, r20
    7fa8:	ba 07       	cpc	r27, r26
    7faa:	20 f0       	brcs	.+8      	; 0x7fb4 <__divsf3_pse+0xaa>
    7fac:	62 1b       	sub	r22, r18
    7fae:	73 0b       	sbc	r23, r19
    7fb0:	84 0b       	sbc	r24, r20
    7fb2:	ba 0b       	sbc	r27, r26
    7fb4:	ee 1f       	adc	r30, r30
    7fb6:	88 f7       	brcc	.-30     	; 0x7f9a <__divsf3_pse+0x90>
    7fb8:	e0 95       	com	r30
    7fba:	08 95       	ret

00007fbc <__fixsfsi>:
    7fbc:	04 d0       	rcall	.+8      	; 0x7fc6 <__fixunssfsi>
    7fbe:	68 94       	set
    7fc0:	b1 11       	cpse	r27, r1
    7fc2:	37 c1       	rjmp	.+622    	; 0x8232 <__fp_szero>
    7fc4:	08 95       	ret

00007fc6 <__fixunssfsi>:
    7fc6:	1a d1       	rcall	.+564    	; 0x81fc <__fp_splitA>
    7fc8:	88 f0       	brcs	.+34     	; 0x7fec <__fixunssfsi+0x26>
    7fca:	9f 57       	subi	r25, 0x7F	; 127
    7fcc:	90 f0       	brcs	.+36     	; 0x7ff2 <__fixunssfsi+0x2c>
    7fce:	b9 2f       	mov	r27, r25
    7fd0:	99 27       	eor	r25, r25
    7fd2:	b7 51       	subi	r27, 0x17	; 23
    7fd4:	a0 f0       	brcs	.+40     	; 0x7ffe <__fixunssfsi+0x38>
    7fd6:	d1 f0       	breq	.+52     	; 0x800c <__fixunssfsi+0x46>
    7fd8:	66 0f       	add	r22, r22
    7fda:	77 1f       	adc	r23, r23
    7fdc:	88 1f       	adc	r24, r24
    7fde:	99 1f       	adc	r25, r25
    7fe0:	1a f0       	brmi	.+6      	; 0x7fe8 <__fixunssfsi+0x22>
    7fe2:	ba 95       	dec	r27
    7fe4:	c9 f7       	brne	.-14     	; 0x7fd8 <__fixunssfsi+0x12>
    7fe6:	12 c0       	rjmp	.+36     	; 0x800c <__fixunssfsi+0x46>
    7fe8:	b1 30       	cpi	r27, 0x01	; 1
    7fea:	81 f0       	breq	.+32     	; 0x800c <__fixunssfsi+0x46>
    7fec:	21 d1       	rcall	.+578    	; 0x8230 <__fp_zero>
    7fee:	b1 e0       	ldi	r27, 0x01	; 1
    7ff0:	08 95       	ret
    7ff2:	1e c1       	rjmp	.+572    	; 0x8230 <__fp_zero>
    7ff4:	67 2f       	mov	r22, r23
    7ff6:	78 2f       	mov	r23, r24
    7ff8:	88 27       	eor	r24, r24
    7ffa:	b8 5f       	subi	r27, 0xF8	; 248
    7ffc:	39 f0       	breq	.+14     	; 0x800c <__fixunssfsi+0x46>
    7ffe:	b9 3f       	cpi	r27, 0xF9	; 249
    8000:	cc f3       	brlt	.-14     	; 0x7ff4 <__fixunssfsi+0x2e>
    8002:	86 95       	lsr	r24
    8004:	77 95       	ror	r23
    8006:	67 95       	ror	r22
    8008:	b3 95       	inc	r27
    800a:	d9 f7       	brne	.-10     	; 0x8002 <__fixunssfsi+0x3c>
    800c:	3e f4       	brtc	.+14     	; 0x801c <__fixunssfsi+0x56>
    800e:	90 95       	com	r25
    8010:	80 95       	com	r24
    8012:	70 95       	com	r23
    8014:	61 95       	neg	r22
    8016:	7f 4f       	sbci	r23, 0xFF	; 255
    8018:	8f 4f       	sbci	r24, 0xFF	; 255
    801a:	9f 4f       	sbci	r25, 0xFF	; 255
    801c:	08 95       	ret

0000801e <__floatunsisf>:
    801e:	e8 94       	clt
    8020:	09 c0       	rjmp	.+18     	; 0x8034 <__floatsisf+0x12>

00008022 <__floatsisf>:
    8022:	97 fb       	bst	r25, 7
    8024:	3e f4       	brtc	.+14     	; 0x8034 <__floatsisf+0x12>
    8026:	90 95       	com	r25
    8028:	80 95       	com	r24
    802a:	70 95       	com	r23
    802c:	61 95       	neg	r22
    802e:	7f 4f       	sbci	r23, 0xFF	; 255
    8030:	8f 4f       	sbci	r24, 0xFF	; 255
    8032:	9f 4f       	sbci	r25, 0xFF	; 255
    8034:	99 23       	and	r25, r25
    8036:	a9 f0       	breq	.+42     	; 0x8062 <__floatsisf+0x40>
    8038:	f9 2f       	mov	r31, r25
    803a:	96 e9       	ldi	r25, 0x96	; 150
    803c:	bb 27       	eor	r27, r27
    803e:	93 95       	inc	r25
    8040:	f6 95       	lsr	r31
    8042:	87 95       	ror	r24
    8044:	77 95       	ror	r23
    8046:	67 95       	ror	r22
    8048:	b7 95       	ror	r27
    804a:	f1 11       	cpse	r31, r1
    804c:	f8 cf       	rjmp	.-16     	; 0x803e <__floatsisf+0x1c>
    804e:	fa f4       	brpl	.+62     	; 0x808e <__floatsisf+0x6c>
    8050:	bb 0f       	add	r27, r27
    8052:	11 f4       	brne	.+4      	; 0x8058 <__floatsisf+0x36>
    8054:	60 ff       	sbrs	r22, 0
    8056:	1b c0       	rjmp	.+54     	; 0x808e <__floatsisf+0x6c>
    8058:	6f 5f       	subi	r22, 0xFF	; 255
    805a:	7f 4f       	sbci	r23, 0xFF	; 255
    805c:	8f 4f       	sbci	r24, 0xFF	; 255
    805e:	9f 4f       	sbci	r25, 0xFF	; 255
    8060:	16 c0       	rjmp	.+44     	; 0x808e <__floatsisf+0x6c>
    8062:	88 23       	and	r24, r24
    8064:	11 f0       	breq	.+4      	; 0x806a <__floatsisf+0x48>
    8066:	96 e9       	ldi	r25, 0x96	; 150
    8068:	11 c0       	rjmp	.+34     	; 0x808c <__floatsisf+0x6a>
    806a:	77 23       	and	r23, r23
    806c:	21 f0       	breq	.+8      	; 0x8076 <__floatsisf+0x54>
    806e:	9e e8       	ldi	r25, 0x8E	; 142
    8070:	87 2f       	mov	r24, r23
    8072:	76 2f       	mov	r23, r22
    8074:	05 c0       	rjmp	.+10     	; 0x8080 <__floatsisf+0x5e>
    8076:	66 23       	and	r22, r22
    8078:	71 f0       	breq	.+28     	; 0x8096 <__floatsisf+0x74>
    807a:	96 e8       	ldi	r25, 0x86	; 134
    807c:	86 2f       	mov	r24, r22
    807e:	70 e0       	ldi	r23, 0x00	; 0
    8080:	60 e0       	ldi	r22, 0x00	; 0
    8082:	2a f0       	brmi	.+10     	; 0x808e <__floatsisf+0x6c>
    8084:	9a 95       	dec	r25
    8086:	66 0f       	add	r22, r22
    8088:	77 1f       	adc	r23, r23
    808a:	88 1f       	adc	r24, r24
    808c:	da f7       	brpl	.-10     	; 0x8084 <__floatsisf+0x62>
    808e:	88 0f       	add	r24, r24
    8090:	96 95       	lsr	r25
    8092:	87 95       	ror	r24
    8094:	97 f9       	bld	r25, 7
    8096:	08 95       	ret

00008098 <__fp_cmp>:
    8098:	99 0f       	add	r25, r25
    809a:	00 08       	sbc	r0, r0
    809c:	55 0f       	add	r21, r21
    809e:	aa 0b       	sbc	r26, r26
    80a0:	e0 e8       	ldi	r30, 0x80	; 128
    80a2:	fe ef       	ldi	r31, 0xFE	; 254
    80a4:	16 16       	cp	r1, r22
    80a6:	17 06       	cpc	r1, r23
    80a8:	e8 07       	cpc	r30, r24
    80aa:	f9 07       	cpc	r31, r25
    80ac:	c0 f0       	brcs	.+48     	; 0x80de <__fp_cmp+0x46>
    80ae:	12 16       	cp	r1, r18
    80b0:	13 06       	cpc	r1, r19
    80b2:	e4 07       	cpc	r30, r20
    80b4:	f5 07       	cpc	r31, r21
    80b6:	98 f0       	brcs	.+38     	; 0x80de <__fp_cmp+0x46>
    80b8:	62 1b       	sub	r22, r18
    80ba:	73 0b       	sbc	r23, r19
    80bc:	84 0b       	sbc	r24, r20
    80be:	95 0b       	sbc	r25, r21
    80c0:	39 f4       	brne	.+14     	; 0x80d0 <__fp_cmp+0x38>
    80c2:	0a 26       	eor	r0, r26
    80c4:	61 f0       	breq	.+24     	; 0x80de <__fp_cmp+0x46>
    80c6:	23 2b       	or	r18, r19
    80c8:	24 2b       	or	r18, r20
    80ca:	25 2b       	or	r18, r21
    80cc:	21 f4       	brne	.+8      	; 0x80d6 <__fp_cmp+0x3e>
    80ce:	08 95       	ret
    80d0:	0a 26       	eor	r0, r26
    80d2:	09 f4       	brne	.+2      	; 0x80d6 <__fp_cmp+0x3e>
    80d4:	a1 40       	sbci	r26, 0x01	; 1
    80d6:	a6 95       	lsr	r26
    80d8:	8f ef       	ldi	r24, 0xFF	; 255
    80da:	81 1d       	adc	r24, r1
    80dc:	81 1d       	adc	r24, r1
    80de:	08 95       	ret

000080e0 <__fp_inf>:
    80e0:	97 f9       	bld	r25, 7
    80e2:	9f 67       	ori	r25, 0x7F	; 127
    80e4:	80 e8       	ldi	r24, 0x80	; 128
    80e6:	70 e0       	ldi	r23, 0x00	; 0
    80e8:	60 e0       	ldi	r22, 0x00	; 0
    80ea:	08 95       	ret

000080ec <__fp_nan>:
    80ec:	9f ef       	ldi	r25, 0xFF	; 255
    80ee:	80 ec       	ldi	r24, 0xC0	; 192
    80f0:	08 95       	ret

000080f2 <__fp_powser>:
    80f2:	df 93       	push	r29
    80f4:	cf 93       	push	r28
    80f6:	1f 93       	push	r17
    80f8:	0f 93       	push	r16
    80fa:	ff 92       	push	r15
    80fc:	ef 92       	push	r14
    80fe:	df 92       	push	r13
    8100:	7b 01       	movw	r14, r22
    8102:	8c 01       	movw	r16, r24
    8104:	68 94       	set
    8106:	05 c0       	rjmp	.+10     	; 0x8112 <__fp_powser+0x20>
    8108:	da 2e       	mov	r13, r26
    810a:	ef 01       	movw	r28, r30
    810c:	af d0       	rcall	.+350    	; 0x826c <__mulsf3x>
    810e:	fe 01       	movw	r30, r28
    8110:	e8 94       	clt
    8112:	a5 91       	lpm	r26, Z+
    8114:	25 91       	lpm	r18, Z+
    8116:	35 91       	lpm	r19, Z+
    8118:	45 91       	lpm	r20, Z+
    811a:	55 91       	lpm	r21, Z+
    811c:	ae f3       	brts	.-22     	; 0x8108 <__fp_powser+0x16>
    811e:	ef 01       	movw	r28, r30
    8120:	8f de       	rcall	.-738    	; 0x7e40 <__addsf3x>
    8122:	fe 01       	movw	r30, r28
    8124:	97 01       	movw	r18, r14
    8126:	a8 01       	movw	r20, r16
    8128:	da 94       	dec	r13
    812a:	79 f7       	brne	.-34     	; 0x810a <__fp_powser+0x18>
    812c:	df 90       	pop	r13
    812e:	ef 90       	pop	r14
    8130:	ff 90       	pop	r15
    8132:	0f 91       	pop	r16
    8134:	1f 91       	pop	r17
    8136:	cf 91       	pop	r28
    8138:	df 91       	pop	r29
    813a:	08 95       	ret

0000813c <__fp_pscA>:
    813c:	00 24       	eor	r0, r0
    813e:	0a 94       	dec	r0
    8140:	16 16       	cp	r1, r22
    8142:	17 06       	cpc	r1, r23
    8144:	18 06       	cpc	r1, r24
    8146:	09 06       	cpc	r0, r25
    8148:	08 95       	ret

0000814a <__fp_pscB>:
    814a:	00 24       	eor	r0, r0
    814c:	0a 94       	dec	r0
    814e:	12 16       	cp	r1, r18
    8150:	13 06       	cpc	r1, r19
    8152:	14 06       	cpc	r1, r20
    8154:	05 06       	cpc	r0, r21
    8156:	08 95       	ret
    8158:	c9 cf       	rjmp	.-110    	; 0x80ec <__fp_nan>

0000815a <__fp_rempio2>:
    815a:	50 d0       	rcall	.+160    	; 0x81fc <__fp_splitA>
    815c:	e8 f3       	brcs	.-6      	; 0x8158 <__fp_pscB+0xe>
    815e:	e8 94       	clt
    8160:	e0 e0       	ldi	r30, 0x00	; 0
    8162:	bb 27       	eor	r27, r27
    8164:	9f 57       	subi	r25, 0x7F	; 127
    8166:	f0 f0       	brcs	.+60     	; 0x81a4 <__fp_rempio2+0x4a>
    8168:	2a ed       	ldi	r18, 0xDA	; 218
    816a:	3f e0       	ldi	r19, 0x0F	; 15
    816c:	49 ec       	ldi	r20, 0xC9	; 201
    816e:	06 c0       	rjmp	.+12     	; 0x817c <__fp_rempio2+0x22>
    8170:	ee 0f       	add	r30, r30
    8172:	bb 0f       	add	r27, r27
    8174:	66 1f       	adc	r22, r22
    8176:	77 1f       	adc	r23, r23
    8178:	88 1f       	adc	r24, r24
    817a:	28 f0       	brcs	.+10     	; 0x8186 <__fp_rempio2+0x2c>
    817c:	b2 3a       	cpi	r27, 0xA2	; 162
    817e:	62 07       	cpc	r22, r18
    8180:	73 07       	cpc	r23, r19
    8182:	84 07       	cpc	r24, r20
    8184:	28 f0       	brcs	.+10     	; 0x8190 <__fp_rempio2+0x36>
    8186:	b2 5a       	subi	r27, 0xA2	; 162
    8188:	62 0b       	sbc	r22, r18
    818a:	73 0b       	sbc	r23, r19
    818c:	84 0b       	sbc	r24, r20
    818e:	e3 95       	inc	r30
    8190:	9a 95       	dec	r25
    8192:	72 f7       	brpl	.-36     	; 0x8170 <__fp_rempio2+0x16>
    8194:	80 38       	cpi	r24, 0x80	; 128
    8196:	30 f4       	brcc	.+12     	; 0x81a4 <__fp_rempio2+0x4a>
    8198:	9a 95       	dec	r25
    819a:	bb 0f       	add	r27, r27
    819c:	66 1f       	adc	r22, r22
    819e:	77 1f       	adc	r23, r23
    81a0:	88 1f       	adc	r24, r24
    81a2:	d2 f7       	brpl	.-12     	; 0x8198 <__fp_rempio2+0x3e>
    81a4:	90 48       	sbci	r25, 0x80	; 128
    81a6:	3e c1       	rjmp	.+636    	; 0x8424 <__fp_mpack_finite>

000081a8 <__fp_round>:
    81a8:	09 2e       	mov	r0, r25
    81aa:	03 94       	inc	r0
    81ac:	00 0c       	add	r0, r0
    81ae:	11 f4       	brne	.+4      	; 0x81b4 <__fp_round+0xc>
    81b0:	88 23       	and	r24, r24
    81b2:	52 f0       	brmi	.+20     	; 0x81c8 <__fp_round+0x20>
    81b4:	bb 0f       	add	r27, r27
    81b6:	40 f4       	brcc	.+16     	; 0x81c8 <__fp_round+0x20>
    81b8:	bf 2b       	or	r27, r31
    81ba:	11 f4       	brne	.+4      	; 0x81c0 <__fp_round+0x18>
    81bc:	60 ff       	sbrs	r22, 0
    81be:	04 c0       	rjmp	.+8      	; 0x81c8 <__fp_round+0x20>
    81c0:	6f 5f       	subi	r22, 0xFF	; 255
    81c2:	7f 4f       	sbci	r23, 0xFF	; 255
    81c4:	8f 4f       	sbci	r24, 0xFF	; 255
    81c6:	9f 4f       	sbci	r25, 0xFF	; 255
    81c8:	08 95       	ret

000081ca <__fp_sinus>:
    81ca:	ef 93       	push	r30
    81cc:	e0 ff       	sbrs	r30, 0
    81ce:	06 c0       	rjmp	.+12     	; 0x81dc <__fp_sinus+0x12>
    81d0:	a2 ea       	ldi	r26, 0xA2	; 162
    81d2:	2a ed       	ldi	r18, 0xDA	; 218
    81d4:	3f e0       	ldi	r19, 0x0F	; 15
    81d6:	49 ec       	ldi	r20, 0xC9	; 201
    81d8:	5f eb       	ldi	r21, 0xBF	; 191
    81da:	32 de       	rcall	.-924    	; 0x7e40 <__addsf3x>
    81dc:	e5 df       	rcall	.-54     	; 0x81a8 <__fp_round>
    81de:	0f 90       	pop	r0
    81e0:	03 94       	inc	r0
    81e2:	01 fc       	sbrc	r0, 1
    81e4:	90 58       	subi	r25, 0x80	; 128
    81e6:	e6 ef       	ldi	r30, 0xF6	; 246
    81e8:	f1 e0       	ldi	r31, 0x01	; 1
    81ea:	28 c1       	rjmp	.+592    	; 0x843c <__fp_powsodd>

000081ec <__fp_split3>:
    81ec:	57 fd       	sbrc	r21, 7
    81ee:	90 58       	subi	r25, 0x80	; 128
    81f0:	44 0f       	add	r20, r20
    81f2:	55 1f       	adc	r21, r21
    81f4:	59 f0       	breq	.+22     	; 0x820c <__fp_splitA+0x10>
    81f6:	5f 3f       	cpi	r21, 0xFF	; 255
    81f8:	71 f0       	breq	.+28     	; 0x8216 <__fp_splitA+0x1a>
    81fa:	47 95       	ror	r20

000081fc <__fp_splitA>:
    81fc:	88 0f       	add	r24, r24
    81fe:	97 fb       	bst	r25, 7
    8200:	99 1f       	adc	r25, r25
    8202:	61 f0       	breq	.+24     	; 0x821c <__fp_splitA+0x20>
    8204:	9f 3f       	cpi	r25, 0xFF	; 255
    8206:	79 f0       	breq	.+30     	; 0x8226 <__fp_splitA+0x2a>
    8208:	87 95       	ror	r24
    820a:	08 95       	ret
    820c:	12 16       	cp	r1, r18
    820e:	13 06       	cpc	r1, r19
    8210:	14 06       	cpc	r1, r20
    8212:	55 1f       	adc	r21, r21
    8214:	f2 cf       	rjmp	.-28     	; 0x81fa <__fp_split3+0xe>
    8216:	46 95       	lsr	r20
    8218:	f1 df       	rcall	.-30     	; 0x81fc <__fp_splitA>
    821a:	08 c0       	rjmp	.+16     	; 0x822c <__fp_splitA+0x30>
    821c:	16 16       	cp	r1, r22
    821e:	17 06       	cpc	r1, r23
    8220:	18 06       	cpc	r1, r24
    8222:	99 1f       	adc	r25, r25
    8224:	f1 cf       	rjmp	.-30     	; 0x8208 <__fp_splitA+0xc>
    8226:	86 95       	lsr	r24
    8228:	71 05       	cpc	r23, r1
    822a:	61 05       	cpc	r22, r1
    822c:	08 94       	sec
    822e:	08 95       	ret

00008230 <__fp_zero>:
    8230:	e8 94       	clt

00008232 <__fp_szero>:
    8232:	bb 27       	eor	r27, r27
    8234:	66 27       	eor	r22, r22
    8236:	77 27       	eor	r23, r23
    8238:	cb 01       	movw	r24, r22
    823a:	97 f9       	bld	r25, 7
    823c:	08 95       	ret

0000823e <__gesf2>:
    823e:	2c df       	rcall	.-424    	; 0x8098 <__fp_cmp>
    8240:	08 f4       	brcc	.+2      	; 0x8244 <__gesf2+0x6>
    8242:	8f ef       	ldi	r24, 0xFF	; 255
    8244:	08 95       	ret

00008246 <inverse>:
    8246:	9b 01       	movw	r18, r22
    8248:	ac 01       	movw	r20, r24
    824a:	60 e0       	ldi	r22, 0x00	; 0
    824c:	70 e0       	ldi	r23, 0x00	; 0
    824e:	80 e8       	ldi	r24, 0x80	; 128
    8250:	9f e3       	ldi	r25, 0x3F	; 63
    8252:	4c ce       	rjmp	.-872    	; 0x7eec <__divsf3>

00008254 <__mulsf3>:
    8254:	0b d0       	rcall	.+22     	; 0x826c <__mulsf3x>
    8256:	a8 cf       	rjmp	.-176    	; 0x81a8 <__fp_round>
    8258:	71 df       	rcall	.-286    	; 0x813c <__fp_pscA>
    825a:	28 f0       	brcs	.+10     	; 0x8266 <__mulsf3+0x12>
    825c:	76 df       	rcall	.-276    	; 0x814a <__fp_pscB>
    825e:	18 f0       	brcs	.+6      	; 0x8266 <__mulsf3+0x12>
    8260:	95 23       	and	r25, r21
    8262:	09 f0       	breq	.+2      	; 0x8266 <__mulsf3+0x12>
    8264:	3d cf       	rjmp	.-390    	; 0x80e0 <__fp_inf>
    8266:	42 cf       	rjmp	.-380    	; 0x80ec <__fp_nan>
    8268:	11 24       	eor	r1, r1
    826a:	e3 cf       	rjmp	.-58     	; 0x8232 <__fp_szero>

0000826c <__mulsf3x>:
    826c:	bf df       	rcall	.-130    	; 0x81ec <__fp_split3>
    826e:	a0 f3       	brcs	.-24     	; 0x8258 <__mulsf3+0x4>

00008270 <__mulsf3_pse>:
    8270:	95 9f       	mul	r25, r21
    8272:	d1 f3       	breq	.-12     	; 0x8268 <__mulsf3+0x14>
    8274:	95 0f       	add	r25, r21
    8276:	50 e0       	ldi	r21, 0x00	; 0
    8278:	55 1f       	adc	r21, r21
    827a:	62 9f       	mul	r22, r18
    827c:	f0 01       	movw	r30, r0
    827e:	72 9f       	mul	r23, r18
    8280:	bb 27       	eor	r27, r27
    8282:	f0 0d       	add	r31, r0
    8284:	b1 1d       	adc	r27, r1
    8286:	63 9f       	mul	r22, r19
    8288:	aa 27       	eor	r26, r26
    828a:	f0 0d       	add	r31, r0
    828c:	b1 1d       	adc	r27, r1
    828e:	aa 1f       	adc	r26, r26
    8290:	64 9f       	mul	r22, r20
    8292:	66 27       	eor	r22, r22
    8294:	b0 0d       	add	r27, r0
    8296:	a1 1d       	adc	r26, r1
    8298:	66 1f       	adc	r22, r22
    829a:	82 9f       	mul	r24, r18
    829c:	22 27       	eor	r18, r18
    829e:	b0 0d       	add	r27, r0
    82a0:	a1 1d       	adc	r26, r1
    82a2:	62 1f       	adc	r22, r18
    82a4:	73 9f       	mul	r23, r19
    82a6:	b0 0d       	add	r27, r0
    82a8:	a1 1d       	adc	r26, r1
    82aa:	62 1f       	adc	r22, r18
    82ac:	83 9f       	mul	r24, r19
    82ae:	a0 0d       	add	r26, r0
    82b0:	61 1d       	adc	r22, r1
    82b2:	22 1f       	adc	r18, r18
    82b4:	74 9f       	mul	r23, r20
    82b6:	33 27       	eor	r19, r19
    82b8:	a0 0d       	add	r26, r0
    82ba:	61 1d       	adc	r22, r1
    82bc:	23 1f       	adc	r18, r19
    82be:	84 9f       	mul	r24, r20
    82c0:	60 0d       	add	r22, r0
    82c2:	21 1d       	adc	r18, r1
    82c4:	82 2f       	mov	r24, r18
    82c6:	76 2f       	mov	r23, r22
    82c8:	6a 2f       	mov	r22, r26
    82ca:	11 24       	eor	r1, r1
    82cc:	9f 57       	subi	r25, 0x7F	; 127
    82ce:	50 40       	sbci	r21, 0x00	; 0
    82d0:	8a f0       	brmi	.+34     	; 0x82f4 <__mulsf3_pse+0x84>
    82d2:	e1 f0       	breq	.+56     	; 0x830c <__mulsf3_pse+0x9c>
    82d4:	88 23       	and	r24, r24
    82d6:	4a f0       	brmi	.+18     	; 0x82ea <__mulsf3_pse+0x7a>
    82d8:	ee 0f       	add	r30, r30
    82da:	ff 1f       	adc	r31, r31
    82dc:	bb 1f       	adc	r27, r27
    82de:	66 1f       	adc	r22, r22
    82e0:	77 1f       	adc	r23, r23
    82e2:	88 1f       	adc	r24, r24
    82e4:	91 50       	subi	r25, 0x01	; 1
    82e6:	50 40       	sbci	r21, 0x00	; 0
    82e8:	a9 f7       	brne	.-22     	; 0x82d4 <__mulsf3_pse+0x64>
    82ea:	9e 3f       	cpi	r25, 0xFE	; 254
    82ec:	51 05       	cpc	r21, r1
    82ee:	70 f0       	brcs	.+28     	; 0x830c <__mulsf3_pse+0x9c>
    82f0:	f7 ce       	rjmp	.-530    	; 0x80e0 <__fp_inf>
    82f2:	9f cf       	rjmp	.-194    	; 0x8232 <__fp_szero>
    82f4:	5f 3f       	cpi	r21, 0xFF	; 255
    82f6:	ec f3       	brlt	.-6      	; 0x82f2 <__mulsf3_pse+0x82>
    82f8:	98 3e       	cpi	r25, 0xE8	; 232
    82fa:	dc f3       	brlt	.-10     	; 0x82f2 <__mulsf3_pse+0x82>
    82fc:	86 95       	lsr	r24
    82fe:	77 95       	ror	r23
    8300:	67 95       	ror	r22
    8302:	b7 95       	ror	r27
    8304:	f7 95       	ror	r31
    8306:	e7 95       	ror	r30
    8308:	9f 5f       	subi	r25, 0xFF	; 255
    830a:	c1 f7       	brne	.-16     	; 0x82fc <__mulsf3_pse+0x8c>
    830c:	fe 2b       	or	r31, r30
    830e:	88 0f       	add	r24, r24
    8310:	91 1d       	adc	r25, r1
    8312:	96 95       	lsr	r25
    8314:	87 95       	ror	r24
    8316:	97 f9       	bld	r25, 7
    8318:	08 95       	ret

0000831a <pow>:
    831a:	fa 01       	movw	r30, r20
    831c:	ee 0f       	add	r30, r30
    831e:	ff 1f       	adc	r31, r31
    8320:	30 96       	adiw	r30, 0x00	; 0
    8322:	21 05       	cpc	r18, r1
    8324:	31 05       	cpc	r19, r1
    8326:	99 f1       	breq	.+102    	; 0x838e <pow+0x74>
    8328:	61 15       	cp	r22, r1
    832a:	71 05       	cpc	r23, r1
    832c:	61 f4       	brne	.+24     	; 0x8346 <pow+0x2c>
    832e:	80 38       	cpi	r24, 0x80	; 128
    8330:	bf e3       	ldi	r27, 0x3F	; 63
    8332:	9b 07       	cpc	r25, r27
    8334:	49 f1       	breq	.+82     	; 0x8388 <pow+0x6e>
    8336:	68 94       	set
    8338:	90 38       	cpi	r25, 0x80	; 128
    833a:	81 05       	cpc	r24, r1
    833c:	61 f0       	breq	.+24     	; 0x8356 <pow+0x3c>
    833e:	80 38       	cpi	r24, 0x80	; 128
    8340:	bf ef       	ldi	r27, 0xFF	; 255
    8342:	9b 07       	cpc	r25, r27
    8344:	41 f0       	breq	.+16     	; 0x8356 <pow+0x3c>
    8346:	99 23       	and	r25, r25
    8348:	42 f5       	brpl	.+80     	; 0x839a <pow+0x80>
    834a:	ff 3f       	cpi	r31, 0xFF	; 255
    834c:	e1 05       	cpc	r30, r1
    834e:	31 05       	cpc	r19, r1
    8350:	21 05       	cpc	r18, r1
    8352:	11 f1       	breq	.+68     	; 0x8398 <pow+0x7e>
    8354:	e8 94       	clt
    8356:	08 94       	sec
    8358:	e7 95       	ror	r30
    835a:	d9 01       	movw	r26, r18
    835c:	aa 23       	and	r26, r26
    835e:	29 f4       	brne	.+10     	; 0x836a <pow+0x50>
    8360:	ab 2f       	mov	r26, r27
    8362:	be 2f       	mov	r27, r30
    8364:	f8 5f       	subi	r31, 0xF8	; 248
    8366:	d0 f3       	brcs	.-12     	; 0x835c <pow+0x42>
    8368:	10 c0       	rjmp	.+32     	; 0x838a <pow+0x70>
    836a:	ff 5f       	subi	r31, 0xFF	; 255
    836c:	70 f4       	brcc	.+28     	; 0x838a <pow+0x70>
    836e:	a6 95       	lsr	r26
    8370:	e0 f7       	brcc	.-8      	; 0x836a <pow+0x50>
    8372:	f7 39       	cpi	r31, 0x97	; 151
    8374:	50 f0       	brcs	.+20     	; 0x838a <pow+0x70>
    8376:	19 f0       	breq	.+6      	; 0x837e <pow+0x64>
    8378:	ff 3a       	cpi	r31, 0xAF	; 175
    837a:	38 f4       	brcc	.+14     	; 0x838a <pow+0x70>
    837c:	9f 77       	andi	r25, 0x7F	; 127
    837e:	9f 93       	push	r25
    8380:	0c d0       	rcall	.+24     	; 0x839a <pow+0x80>
    8382:	0f 90       	pop	r0
    8384:	07 fc       	sbrc	r0, 7
    8386:	90 58       	subi	r25, 0x80	; 128
    8388:	08 95       	ret
    838a:	3e f0       	brts	.+14     	; 0x839a <pow+0x80>
    838c:	af ce       	rjmp	.-674    	; 0x80ec <__fp_nan>
    838e:	60 e0       	ldi	r22, 0x00	; 0
    8390:	70 e0       	ldi	r23, 0x00	; 0
    8392:	80 e8       	ldi	r24, 0x80	; 128
    8394:	9f e3       	ldi	r25, 0x3F	; 63
    8396:	08 95       	ret
    8398:	4f e7       	ldi	r20, 0x7F	; 127
    839a:	9f 77       	andi	r25, 0x7F	; 127
    839c:	5f 93       	push	r21
    839e:	4f 93       	push	r20
    83a0:	3f 93       	push	r19
    83a2:	2f 93       	push	r18
    83a4:	97 d0       	rcall	.+302    	; 0x84d4 <log>
    83a6:	2f 91       	pop	r18
    83a8:	3f 91       	pop	r19
    83aa:	4f 91       	pop	r20
    83ac:	5f 91       	pop	r21
    83ae:	52 df       	rcall	.-348    	; 0x8254 <__mulsf3>
    83b0:	0b c0       	rjmp	.+22     	; 0x83c8 <exp>

000083b2 <sin>:
    83b2:	9f 93       	push	r25
    83b4:	d2 de       	rcall	.-604    	; 0x815a <__fp_rempio2>
    83b6:	0f 90       	pop	r0
    83b8:	07 fc       	sbrc	r0, 7
    83ba:	ee 5f       	subi	r30, 0xFE	; 254
    83bc:	06 cf       	rjmp	.-500    	; 0x81ca <__fp_sinus>
    83be:	19 f4       	brne	.+6      	; 0x83c6 <sin+0x14>
    83c0:	0e f0       	brts	.+2      	; 0x83c4 <sin+0x12>
    83c2:	8e ce       	rjmp	.-740    	; 0x80e0 <__fp_inf>
    83c4:	35 cf       	rjmp	.-406    	; 0x8230 <__fp_zero>
    83c6:	92 ce       	rjmp	.-732    	; 0x80ec <__fp_nan>

000083c8 <exp>:
    83c8:	19 df       	rcall	.-462    	; 0x81fc <__fp_splitA>
    83ca:	c8 f3       	brcs	.-14     	; 0x83be <sin+0xc>
    83cc:	96 38       	cpi	r25, 0x86	; 134
    83ce:	c0 f7       	brcc	.-16     	; 0x83c0 <sin+0xe>
    83d0:	07 f8       	bld	r0, 7
    83d2:	0f 92       	push	r0
    83d4:	e8 94       	clt
    83d6:	2b e3       	ldi	r18, 0x3B	; 59
    83d8:	3a ea       	ldi	r19, 0xAA	; 170
    83da:	48 eb       	ldi	r20, 0xB8	; 184
    83dc:	5f e7       	ldi	r21, 0x7F	; 127
    83de:	48 df       	rcall	.-368    	; 0x8270 <__mulsf3_pse>
    83e0:	0f 92       	push	r0
    83e2:	0f 92       	push	r0
    83e4:	0f 92       	push	r0
    83e6:	4d b7       	in	r20, 0x3d	; 61
    83e8:	5e b7       	in	r21, 0x3e	; 62
    83ea:	0f 92       	push	r0
    83ec:	b3 d0       	rcall	.+358    	; 0x8554 <modf>
    83ee:	e4 e1       	ldi	r30, 0x14	; 20
    83f0:	f2 e0       	ldi	r31, 0x02	; 2
    83f2:	7f de       	rcall	.-770    	; 0x80f2 <__fp_powser>
    83f4:	4f 91       	pop	r20
    83f6:	5f 91       	pop	r21
    83f8:	ef 91       	pop	r30
    83fa:	ff 91       	pop	r31
    83fc:	e5 95       	asr	r30
    83fe:	ee 1f       	adc	r30, r30
    8400:	ff 1f       	adc	r31, r31
    8402:	49 f0       	breq	.+18     	; 0x8416 <exp+0x4e>
    8404:	fe 57       	subi	r31, 0x7E	; 126
    8406:	e0 68       	ori	r30, 0x80	; 128
    8408:	44 27       	eor	r20, r20
    840a:	ee 0f       	add	r30, r30
    840c:	44 1f       	adc	r20, r20
    840e:	fa 95       	dec	r31
    8410:	e1 f7       	brne	.-8      	; 0x840a <exp+0x42>
    8412:	41 95       	neg	r20
    8414:	55 0b       	sbc	r21, r21
    8416:	25 d0       	rcall	.+74     	; 0x8462 <ldexp>
    8418:	0f 90       	pop	r0
    841a:	07 fe       	sbrs	r0, 7
    841c:	14 cf       	rjmp	.-472    	; 0x8246 <inverse>
    841e:	08 95       	ret

00008420 <__fp_mpack>:
    8420:	9f 3f       	cpi	r25, 0xFF	; 255
    8422:	31 f0       	breq	.+12     	; 0x8430 <__fp_mpack_finite+0xc>

00008424 <__fp_mpack_finite>:
    8424:	91 50       	subi	r25, 0x01	; 1
    8426:	20 f4       	brcc	.+8      	; 0x8430 <__fp_mpack_finite+0xc>
    8428:	87 95       	ror	r24
    842a:	77 95       	ror	r23
    842c:	67 95       	ror	r22
    842e:	b7 95       	ror	r27
    8430:	88 0f       	add	r24, r24
    8432:	91 1d       	adc	r25, r1
    8434:	96 95       	lsr	r25
    8436:	87 95       	ror	r24
    8438:	97 f9       	bld	r25, 7
    843a:	08 95       	ret

0000843c <__fp_powsodd>:
    843c:	9f 93       	push	r25
    843e:	8f 93       	push	r24
    8440:	7f 93       	push	r23
    8442:	6f 93       	push	r22
    8444:	ff 93       	push	r31
    8446:	ef 93       	push	r30
    8448:	9b 01       	movw	r18, r22
    844a:	ac 01       	movw	r20, r24
    844c:	03 df       	rcall	.-506    	; 0x8254 <__mulsf3>
    844e:	ef 91       	pop	r30
    8450:	ff 91       	pop	r31
    8452:	4f de       	rcall	.-866    	; 0x80f2 <__fp_powser>
    8454:	2f 91       	pop	r18
    8456:	3f 91       	pop	r19
    8458:	4f 91       	pop	r20
    845a:	5f 91       	pop	r21
    845c:	fb ce       	rjmp	.-522    	; 0x8254 <__mulsf3>
    845e:	40 ce       	rjmp	.-896    	; 0x80e0 <__fp_inf>
    8460:	df cf       	rjmp	.-66     	; 0x8420 <__fp_mpack>

00008462 <ldexp>:
    8462:	cc de       	rcall	.-616    	; 0x81fc <__fp_splitA>
    8464:	e8 f3       	brcs	.-6      	; 0x8460 <__fp_powsodd+0x24>
    8466:	99 23       	and	r25, r25
    8468:	d9 f3       	breq	.-10     	; 0x8460 <__fp_powsodd+0x24>
    846a:	94 0f       	add	r25, r20
    846c:	51 1d       	adc	r21, r1
    846e:	bb f3       	brvs	.-18     	; 0x845e <__fp_powsodd+0x22>
    8470:	91 50       	subi	r25, 0x01	; 1
    8472:	50 40       	sbci	r21, 0x00	; 0
    8474:	94 f0       	brlt	.+36     	; 0x849a <ldexp+0x38>
    8476:	59 f0       	breq	.+22     	; 0x848e <ldexp+0x2c>
    8478:	88 23       	and	r24, r24
    847a:	32 f0       	brmi	.+12     	; 0x8488 <ldexp+0x26>
    847c:	66 0f       	add	r22, r22
    847e:	77 1f       	adc	r23, r23
    8480:	88 1f       	adc	r24, r24
    8482:	91 50       	subi	r25, 0x01	; 1
    8484:	50 40       	sbci	r21, 0x00	; 0
    8486:	c1 f7       	brne	.-16     	; 0x8478 <ldexp+0x16>
    8488:	9e 3f       	cpi	r25, 0xFE	; 254
    848a:	51 05       	cpc	r21, r1
    848c:	44 f7       	brge	.-48     	; 0x845e <__fp_powsodd+0x22>
    848e:	88 0f       	add	r24, r24
    8490:	91 1d       	adc	r25, r1
    8492:	96 95       	lsr	r25
    8494:	87 95       	ror	r24
    8496:	97 f9       	bld	r25, 7
    8498:	08 95       	ret
    849a:	5f 3f       	cpi	r21, 0xFF	; 255
    849c:	ac f0       	brlt	.+42     	; 0x84c8 <ldexp+0x66>
    849e:	98 3e       	cpi	r25, 0xE8	; 232
    84a0:	9c f0       	brlt	.+38     	; 0x84c8 <ldexp+0x66>
    84a2:	bb 27       	eor	r27, r27
    84a4:	86 95       	lsr	r24
    84a6:	77 95       	ror	r23
    84a8:	67 95       	ror	r22
    84aa:	b7 95       	ror	r27
    84ac:	08 f4       	brcc	.+2      	; 0x84b0 <ldexp+0x4e>
    84ae:	b1 60       	ori	r27, 0x01	; 1
    84b0:	93 95       	inc	r25
    84b2:	c1 f7       	brne	.-16     	; 0x84a4 <ldexp+0x42>
    84b4:	bb 0f       	add	r27, r27
    84b6:	58 f7       	brcc	.-42     	; 0x848e <ldexp+0x2c>
    84b8:	11 f4       	brne	.+4      	; 0x84be <ldexp+0x5c>
    84ba:	60 ff       	sbrs	r22, 0
    84bc:	e8 cf       	rjmp	.-48     	; 0x848e <ldexp+0x2c>
    84be:	6f 5f       	subi	r22, 0xFF	; 255
    84c0:	7f 4f       	sbci	r23, 0xFF	; 255
    84c2:	8f 4f       	sbci	r24, 0xFF	; 255
    84c4:	9f 4f       	sbci	r25, 0xFF	; 255
    84c6:	e3 cf       	rjmp	.-58     	; 0x848e <ldexp+0x2c>
    84c8:	b4 ce       	rjmp	.-664    	; 0x8232 <__fp_szero>
    84ca:	0e f0       	brts	.+2      	; 0x84ce <ldexp+0x6c>
    84cc:	a9 cf       	rjmp	.-174    	; 0x8420 <__fp_mpack>
    84ce:	0e ce       	rjmp	.-996    	; 0x80ec <__fp_nan>
    84d0:	68 94       	set
    84d2:	06 ce       	rjmp	.-1012   	; 0x80e0 <__fp_inf>

000084d4 <log>:
    84d4:	93 de       	rcall	.-730    	; 0x81fc <__fp_splitA>
    84d6:	c8 f3       	brcs	.-14     	; 0x84ca <ldexp+0x68>
    84d8:	99 23       	and	r25, r25
    84da:	d1 f3       	breq	.-12     	; 0x84d0 <ldexp+0x6e>
    84dc:	c6 f3       	brts	.-16     	; 0x84ce <ldexp+0x6c>
    84de:	df 93       	push	r29
    84e0:	cf 93       	push	r28
    84e2:	1f 93       	push	r17
    84e4:	0f 93       	push	r16
    84e6:	ff 92       	push	r15
    84e8:	c9 2f       	mov	r28, r25
    84ea:	dd 27       	eor	r29, r29
    84ec:	88 23       	and	r24, r24
    84ee:	2a f0       	brmi	.+10     	; 0x84fa <log+0x26>
    84f0:	21 97       	sbiw	r28, 0x01	; 1
    84f2:	66 0f       	add	r22, r22
    84f4:	77 1f       	adc	r23, r23
    84f6:	88 1f       	adc	r24, r24
    84f8:	da f7       	brpl	.-10     	; 0x84f0 <log+0x1c>
    84fa:	20 e0       	ldi	r18, 0x00	; 0
    84fc:	30 e0       	ldi	r19, 0x00	; 0
    84fe:	40 e8       	ldi	r20, 0x80	; 128
    8500:	5f eb       	ldi	r21, 0xBF	; 191
    8502:	9f e3       	ldi	r25, 0x3F	; 63
    8504:	88 39       	cpi	r24, 0x98	; 152
    8506:	20 f0       	brcs	.+8      	; 0x8510 <log+0x3c>
    8508:	80 3e       	cpi	r24, 0xE0	; 224
    850a:	30 f0       	brcs	.+12     	; 0x8518 <log+0x44>
    850c:	21 96       	adiw	r28, 0x01	; 1
    850e:	8f 77       	andi	r24, 0x7F	; 127
    8510:	86 dc       	rcall	.-1780   	; 0x7e1e <__addsf3>
    8512:	ec e3       	ldi	r30, 0x3C	; 60
    8514:	f2 e0       	ldi	r31, 0x02	; 2
    8516:	03 c0       	rjmp	.+6      	; 0x851e <log+0x4a>
    8518:	82 dc       	rcall	.-1788   	; 0x7e1e <__addsf3>
    851a:	e9 e6       	ldi	r30, 0x69	; 105
    851c:	f2 e0       	ldi	r31, 0x02	; 2
    851e:	e9 dd       	rcall	.-1070   	; 0x80f2 <__fp_powser>
    8520:	8b 01       	movw	r16, r22
    8522:	be 01       	movw	r22, r28
    8524:	ec 01       	movw	r28, r24
    8526:	fb 2e       	mov	r15, r27
    8528:	6f 57       	subi	r22, 0x7F	; 127
    852a:	71 09       	sbc	r23, r1
    852c:	75 95       	asr	r23
    852e:	77 1f       	adc	r23, r23
    8530:	88 0b       	sbc	r24, r24
    8532:	99 0b       	sbc	r25, r25
    8534:	76 dd       	rcall	.-1300   	; 0x8022 <__floatsisf>
    8536:	28 e1       	ldi	r18, 0x18	; 24
    8538:	32 e7       	ldi	r19, 0x72	; 114
    853a:	41 e3       	ldi	r20, 0x31	; 49
    853c:	5f e3       	ldi	r21, 0x3F	; 63
    853e:	96 de       	rcall	.-724    	; 0x826c <__mulsf3x>
    8540:	af 2d       	mov	r26, r15
    8542:	98 01       	movw	r18, r16
    8544:	ae 01       	movw	r20, r28
    8546:	ff 90       	pop	r15
    8548:	0f 91       	pop	r16
    854a:	1f 91       	pop	r17
    854c:	cf 91       	pop	r28
    854e:	df 91       	pop	r29
    8550:	77 dc       	rcall	.-1810   	; 0x7e40 <__addsf3x>
    8552:	2a ce       	rjmp	.-940    	; 0x81a8 <__fp_round>

00008554 <modf>:
    8554:	fa 01       	movw	r30, r20
    8556:	dc 01       	movw	r26, r24
    8558:	aa 0f       	add	r26, r26
    855a:	bb 1f       	adc	r27, r27
    855c:	9b 01       	movw	r18, r22
    855e:	ac 01       	movw	r20, r24
    8560:	bf 57       	subi	r27, 0x7F	; 127
    8562:	28 f4       	brcc	.+10     	; 0x856e <modf+0x1a>
    8564:	22 27       	eor	r18, r18
    8566:	33 27       	eor	r19, r19
    8568:	44 27       	eor	r20, r20
    856a:	50 78       	andi	r21, 0x80	; 128
    856c:	1f c0       	rjmp	.+62     	; 0x85ac <modf+0x58>
    856e:	b7 51       	subi	r27, 0x17	; 23
    8570:	88 f4       	brcc	.+34     	; 0x8594 <modf+0x40>
    8572:	ab 2f       	mov	r26, r27
    8574:	00 24       	eor	r0, r0
    8576:	46 95       	lsr	r20
    8578:	37 95       	ror	r19
    857a:	27 95       	ror	r18
    857c:	01 1c       	adc	r0, r1
    857e:	a3 95       	inc	r26
    8580:	d2 f3       	brmi	.-12     	; 0x8576 <modf+0x22>
    8582:	00 20       	and	r0, r0
    8584:	69 f0       	breq	.+26     	; 0x85a0 <modf+0x4c>
    8586:	22 0f       	add	r18, r18
    8588:	33 1f       	adc	r19, r19
    858a:	44 1f       	adc	r20, r20
    858c:	b3 95       	inc	r27
    858e:	da f3       	brmi	.-10     	; 0x8586 <modf+0x32>
    8590:	0d d0       	rcall	.+26     	; 0x85ac <modf+0x58>
    8592:	44 cc       	rjmp	.-1912   	; 0x7e1c <__subsf3>
    8594:	61 30       	cpi	r22, 0x01	; 1
    8596:	71 05       	cpc	r23, r1
    8598:	a0 e8       	ldi	r26, 0x80	; 128
    859a:	8a 07       	cpc	r24, r26
    859c:	b9 46       	sbci	r27, 0x69	; 105
    859e:	30 f4       	brcc	.+12     	; 0x85ac <modf+0x58>
    85a0:	9b 01       	movw	r18, r22
    85a2:	ac 01       	movw	r20, r24
    85a4:	66 27       	eor	r22, r22
    85a6:	77 27       	eor	r23, r23
    85a8:	88 27       	eor	r24, r24
    85aa:	90 78       	andi	r25, 0x80	; 128
    85ac:	30 96       	adiw	r30, 0x00	; 0
    85ae:	21 f0       	breq	.+8      	; 0x85b8 <modf+0x64>
    85b0:	20 83       	st	Z, r18
    85b2:	31 83       	std	Z+1, r19	; 0x01
    85b4:	42 83       	std	Z+2, r20	; 0x02
    85b6:	53 83       	std	Z+3, r21	; 0x03
    85b8:	08 95       	ret

000085ba <vfprintf>:
    85ba:	2f 92       	push	r2
    85bc:	3f 92       	push	r3
    85be:	4f 92       	push	r4
    85c0:	5f 92       	push	r5
    85c2:	6f 92       	push	r6
    85c4:	7f 92       	push	r7
    85c6:	8f 92       	push	r8
    85c8:	9f 92       	push	r9
    85ca:	af 92       	push	r10
    85cc:	bf 92       	push	r11
    85ce:	cf 92       	push	r12
    85d0:	df 92       	push	r13
    85d2:	ef 92       	push	r14
    85d4:	ff 92       	push	r15
    85d6:	0f 93       	push	r16
    85d8:	1f 93       	push	r17
    85da:	cf 93       	push	r28
    85dc:	df 93       	push	r29
    85de:	cd b7       	in	r28, 0x3d	; 61
    85e0:	de b7       	in	r29, 0x3e	; 62
    85e2:	63 97       	sbiw	r28, 0x13	; 19
    85e4:	0f b6       	in	r0, 0x3f	; 63
    85e6:	f8 94       	cli
    85e8:	de bf       	out	0x3e, r29	; 62
    85ea:	0f be       	out	0x3f, r0	; 63
    85ec:	cd bf       	out	0x3d, r28	; 61
    85ee:	6c 01       	movw	r12, r24
    85f0:	4b 01       	movw	r8, r22
    85f2:	2a 01       	movw	r4, r20
    85f4:	fc 01       	movw	r30, r24
    85f6:	17 82       	std	Z+7, r1	; 0x07
    85f8:	16 82       	std	Z+6, r1	; 0x06
    85fa:	83 81       	ldd	r24, Z+3	; 0x03
    85fc:	81 ff       	sbrs	r24, 1
    85fe:	29 c3       	rjmp	.+1618   	; 0x8c52 <vfprintf+0x698>
    8600:	ae 01       	movw	r20, r28
    8602:	4f 5f       	subi	r20, 0xFF	; 255
    8604:	5f 4f       	sbci	r21, 0xFF	; 255
    8606:	3a 01       	movw	r6, r20
    8608:	f6 01       	movw	r30, r12
    860a:	93 81       	ldd	r25, Z+3	; 0x03
    860c:	f4 01       	movw	r30, r8
    860e:	93 fd       	sbrc	r25, 3
    8610:	85 91       	lpm	r24, Z+
    8612:	93 ff       	sbrs	r25, 3
    8614:	81 91       	ld	r24, Z+
    8616:	4f 01       	movw	r8, r30
    8618:	88 23       	and	r24, r24
    861a:	09 f4       	brne	.+2      	; 0x861e <vfprintf+0x64>
    861c:	16 c3       	rjmp	.+1580   	; 0x8c4a <vfprintf+0x690>
    861e:	85 32       	cpi	r24, 0x25	; 37
    8620:	39 f4       	brne	.+14     	; 0x8630 <vfprintf+0x76>
    8622:	93 fd       	sbrc	r25, 3
    8624:	85 91       	lpm	r24, Z+
    8626:	93 ff       	sbrs	r25, 3
    8628:	81 91       	ld	r24, Z+
    862a:	4f 01       	movw	r8, r30
    862c:	85 32       	cpi	r24, 0x25	; 37
    862e:	31 f4       	brne	.+12     	; 0x863c <vfprintf+0x82>
    8630:	b6 01       	movw	r22, r12
    8632:	90 e0       	ldi	r25, 0x00	; 0
    8634:	da d5       	rcall	.+2996   	; 0x91ea <fputc>
    8636:	52 01       	movw	r10, r4
    8638:	25 01       	movw	r4, r10
    863a:	e6 cf       	rjmp	.-52     	; 0x8608 <vfprintf+0x4e>
    863c:	10 e0       	ldi	r17, 0x00	; 0
    863e:	f1 2c       	mov	r15, r1
    8640:	20 e0       	ldi	r18, 0x00	; 0
    8642:	20 32       	cpi	r18, 0x20	; 32
    8644:	a0 f4       	brcc	.+40     	; 0x866e <vfprintf+0xb4>
    8646:	8b 32       	cpi	r24, 0x2B	; 43
    8648:	69 f0       	breq	.+26     	; 0x8664 <vfprintf+0xaa>
    864a:	30 f4       	brcc	.+12     	; 0x8658 <vfprintf+0x9e>
    864c:	80 32       	cpi	r24, 0x20	; 32
    864e:	59 f0       	breq	.+22     	; 0x8666 <vfprintf+0xac>
    8650:	83 32       	cpi	r24, 0x23	; 35
    8652:	69 f4       	brne	.+26     	; 0x866e <vfprintf+0xb4>
    8654:	20 61       	ori	r18, 0x10	; 16
    8656:	2c c0       	rjmp	.+88     	; 0x86b0 <vfprintf+0xf6>
    8658:	8d 32       	cpi	r24, 0x2D	; 45
    865a:	39 f0       	breq	.+14     	; 0x866a <vfprintf+0xb0>
    865c:	80 33       	cpi	r24, 0x30	; 48
    865e:	39 f4       	brne	.+14     	; 0x866e <vfprintf+0xb4>
    8660:	21 60       	ori	r18, 0x01	; 1
    8662:	26 c0       	rjmp	.+76     	; 0x86b0 <vfprintf+0xf6>
    8664:	22 60       	ori	r18, 0x02	; 2
    8666:	24 60       	ori	r18, 0x04	; 4
    8668:	23 c0       	rjmp	.+70     	; 0x86b0 <vfprintf+0xf6>
    866a:	28 60       	ori	r18, 0x08	; 8
    866c:	21 c0       	rjmp	.+66     	; 0x86b0 <vfprintf+0xf6>
    866e:	27 fd       	sbrc	r18, 7
    8670:	27 c0       	rjmp	.+78     	; 0x86c0 <vfprintf+0x106>
    8672:	30 ed       	ldi	r19, 0xD0	; 208
    8674:	38 0f       	add	r19, r24
    8676:	3a 30       	cpi	r19, 0x0A	; 10
    8678:	78 f4       	brcc	.+30     	; 0x8698 <vfprintf+0xde>
    867a:	26 ff       	sbrs	r18, 6
    867c:	06 c0       	rjmp	.+12     	; 0x868a <vfprintf+0xd0>
    867e:	fa e0       	ldi	r31, 0x0A	; 10
    8680:	1f 9f       	mul	r17, r31
    8682:	30 0d       	add	r19, r0
    8684:	11 24       	eor	r1, r1
    8686:	13 2f       	mov	r17, r19
    8688:	13 c0       	rjmp	.+38     	; 0x86b0 <vfprintf+0xf6>
    868a:	4a e0       	ldi	r20, 0x0A	; 10
    868c:	f4 9e       	mul	r15, r20
    868e:	30 0d       	add	r19, r0
    8690:	11 24       	eor	r1, r1
    8692:	f3 2e       	mov	r15, r19
    8694:	20 62       	ori	r18, 0x20	; 32
    8696:	0c c0       	rjmp	.+24     	; 0x86b0 <vfprintf+0xf6>
    8698:	8e 32       	cpi	r24, 0x2E	; 46
    869a:	21 f4       	brne	.+8      	; 0x86a4 <vfprintf+0xea>
    869c:	26 fd       	sbrc	r18, 6
    869e:	d5 c2       	rjmp	.+1450   	; 0x8c4a <vfprintf+0x690>
    86a0:	20 64       	ori	r18, 0x40	; 64
    86a2:	06 c0       	rjmp	.+12     	; 0x86b0 <vfprintf+0xf6>
    86a4:	8c 36       	cpi	r24, 0x6C	; 108
    86a6:	11 f4       	brne	.+4      	; 0x86ac <vfprintf+0xf2>
    86a8:	20 68       	ori	r18, 0x80	; 128
    86aa:	02 c0       	rjmp	.+4      	; 0x86b0 <vfprintf+0xf6>
    86ac:	88 36       	cpi	r24, 0x68	; 104
    86ae:	41 f4       	brne	.+16     	; 0x86c0 <vfprintf+0x106>
    86b0:	f4 01       	movw	r30, r8
    86b2:	93 fd       	sbrc	r25, 3
    86b4:	85 91       	lpm	r24, Z+
    86b6:	93 ff       	sbrs	r25, 3
    86b8:	81 91       	ld	r24, Z+
    86ba:	4f 01       	movw	r8, r30
    86bc:	81 11       	cpse	r24, r1
    86be:	c1 cf       	rjmp	.-126    	; 0x8642 <vfprintf+0x88>
    86c0:	9b eb       	ldi	r25, 0xBB	; 187
    86c2:	98 0f       	add	r25, r24
    86c4:	93 30       	cpi	r25, 0x03	; 3
    86c6:	18 f4       	brcc	.+6      	; 0x86ce <vfprintf+0x114>
    86c8:	20 61       	ori	r18, 0x10	; 16
    86ca:	80 5e       	subi	r24, 0xE0	; 224
    86cc:	06 c0       	rjmp	.+12     	; 0x86da <vfprintf+0x120>
    86ce:	9b e9       	ldi	r25, 0x9B	; 155
    86d0:	98 0f       	add	r25, r24
    86d2:	93 30       	cpi	r25, 0x03	; 3
    86d4:	08 f0       	brcs	.+2      	; 0x86d8 <vfprintf+0x11e>
    86d6:	64 c1       	rjmp	.+712    	; 0x89a0 <vfprintf+0x3e6>
    86d8:	2f 7e       	andi	r18, 0xEF	; 239
    86da:	26 ff       	sbrs	r18, 6
    86dc:	16 e0       	ldi	r17, 0x06	; 6
    86de:	2f 73       	andi	r18, 0x3F	; 63
    86e0:	32 2e       	mov	r3, r18
    86e2:	85 36       	cpi	r24, 0x65	; 101
    86e4:	19 f4       	brne	.+6      	; 0x86ec <vfprintf+0x132>
    86e6:	20 64       	ori	r18, 0x40	; 64
    86e8:	32 2e       	mov	r3, r18
    86ea:	08 c0       	rjmp	.+16     	; 0x86fc <vfprintf+0x142>
    86ec:	86 36       	cpi	r24, 0x66	; 102
    86ee:	21 f4       	brne	.+8      	; 0x86f8 <vfprintf+0x13e>
    86f0:	f2 2f       	mov	r31, r18
    86f2:	f0 68       	ori	r31, 0x80	; 128
    86f4:	3f 2e       	mov	r3, r31
    86f6:	02 c0       	rjmp	.+4      	; 0x86fc <vfprintf+0x142>
    86f8:	11 11       	cpse	r17, r1
    86fa:	11 50       	subi	r17, 0x01	; 1
    86fc:	37 fe       	sbrs	r3, 7
    86fe:	07 c0       	rjmp	.+14     	; 0x870e <vfprintf+0x154>
    8700:	1c 33       	cpi	r17, 0x3C	; 60
    8702:	50 f4       	brcc	.+20     	; 0x8718 <vfprintf+0x15e>
    8704:	ee 24       	eor	r14, r14
    8706:	e3 94       	inc	r14
    8708:	e1 0e       	add	r14, r17
    870a:	27 e0       	ldi	r18, 0x07	; 7
    870c:	0b c0       	rjmp	.+22     	; 0x8724 <vfprintf+0x16a>
    870e:	18 30       	cpi	r17, 0x08	; 8
    8710:	38 f0       	brcs	.+14     	; 0x8720 <vfprintf+0x166>
    8712:	27 e0       	ldi	r18, 0x07	; 7
    8714:	17 e0       	ldi	r17, 0x07	; 7
    8716:	05 c0       	rjmp	.+10     	; 0x8722 <vfprintf+0x168>
    8718:	27 e0       	ldi	r18, 0x07	; 7
    871a:	4c e3       	ldi	r20, 0x3C	; 60
    871c:	e4 2e       	mov	r14, r20
    871e:	02 c0       	rjmp	.+4      	; 0x8724 <vfprintf+0x16a>
    8720:	21 2f       	mov	r18, r17
    8722:	e1 2c       	mov	r14, r1
    8724:	52 01       	movw	r10, r4
    8726:	44 e0       	ldi	r20, 0x04	; 4
    8728:	a4 0e       	add	r10, r20
    872a:	b1 1c       	adc	r11, r1
    872c:	f2 01       	movw	r30, r4
    872e:	60 81       	ld	r22, Z
    8730:	71 81       	ldd	r23, Z+1	; 0x01
    8732:	82 81       	ldd	r24, Z+2	; 0x02
    8734:	93 81       	ldd	r25, Z+3	; 0x03
    8736:	0e 2d       	mov	r16, r14
    8738:	a3 01       	movw	r20, r6
    873a:	69 d4       	rcall	.+2258   	; 0x900e <__ftoa_engine>
    873c:	2c 01       	movw	r4, r24
    873e:	09 81       	ldd	r16, Y+1	; 0x01
    8740:	00 ff       	sbrs	r16, 0
    8742:	02 c0       	rjmp	.+4      	; 0x8748 <vfprintf+0x18e>
    8744:	03 ff       	sbrs	r16, 3
    8746:	07 c0       	rjmp	.+14     	; 0x8756 <vfprintf+0x19c>
    8748:	31 fc       	sbrc	r3, 1
    874a:	08 c0       	rjmp	.+16     	; 0x875c <vfprintf+0x1a2>
    874c:	32 fe       	sbrs	r3, 2
    874e:	09 c0       	rjmp	.+18     	; 0x8762 <vfprintf+0x1a8>
    8750:	30 e2       	ldi	r19, 0x20	; 32
    8752:	23 2e       	mov	r2, r19
    8754:	07 c0       	rjmp	.+14     	; 0x8764 <vfprintf+0x1aa>
    8756:	2d e2       	ldi	r18, 0x2D	; 45
    8758:	22 2e       	mov	r2, r18
    875a:	04 c0       	rjmp	.+8      	; 0x8764 <vfprintf+0x1aa>
    875c:	9b e2       	ldi	r25, 0x2B	; 43
    875e:	29 2e       	mov	r2, r25
    8760:	01 c0       	rjmp	.+2      	; 0x8764 <vfprintf+0x1aa>
    8762:	21 2c       	mov	r2, r1
    8764:	80 2f       	mov	r24, r16
    8766:	8c 70       	andi	r24, 0x0C	; 12
    8768:	19 f0       	breq	.+6      	; 0x8770 <vfprintf+0x1b6>
    876a:	21 10       	cpse	r2, r1
    876c:	51 c2       	rjmp	.+1186   	; 0x8c10 <vfprintf+0x656>
    876e:	8d c2       	rjmp	.+1306   	; 0x8c8a <vfprintf+0x6d0>
    8770:	37 fe       	sbrs	r3, 7
    8772:	0f c0       	rjmp	.+30     	; 0x8792 <vfprintf+0x1d8>
    8774:	e4 0c       	add	r14, r4
    8776:	04 ff       	sbrs	r16, 4
    8778:	04 c0       	rjmp	.+8      	; 0x8782 <vfprintf+0x1c8>
    877a:	8a 81       	ldd	r24, Y+2	; 0x02
    877c:	81 33       	cpi	r24, 0x31	; 49
    877e:	09 f4       	brne	.+2      	; 0x8782 <vfprintf+0x1c8>
    8780:	ea 94       	dec	r14
    8782:	1e 14       	cp	r1, r14
    8784:	74 f5       	brge	.+92     	; 0x87e2 <vfprintf+0x228>
    8786:	f8 e0       	ldi	r31, 0x08	; 8
    8788:	fe 15       	cp	r31, r14
    878a:	78 f5       	brcc	.+94     	; 0x87ea <vfprintf+0x230>
    878c:	88 e0       	ldi	r24, 0x08	; 8
    878e:	e8 2e       	mov	r14, r24
    8790:	2c c0       	rjmp	.+88     	; 0x87ea <vfprintf+0x230>
    8792:	36 fc       	sbrc	r3, 6
    8794:	2a c0       	rjmp	.+84     	; 0x87ea <vfprintf+0x230>
    8796:	81 2f       	mov	r24, r17
    8798:	90 e0       	ldi	r25, 0x00	; 0
    879a:	84 15       	cp	r24, r4
    879c:	95 05       	cpc	r25, r5
    879e:	9c f0       	brlt	.+38     	; 0x87c6 <vfprintf+0x20c>
    87a0:	2c ef       	ldi	r18, 0xFC	; 252
    87a2:	42 16       	cp	r4, r18
    87a4:	2f ef       	ldi	r18, 0xFF	; 255
    87a6:	52 06       	cpc	r5, r18
    87a8:	74 f0       	brlt	.+28     	; 0x87c6 <vfprintf+0x20c>
    87aa:	43 2d       	mov	r20, r3
    87ac:	40 68       	ori	r20, 0x80	; 128
    87ae:	34 2e       	mov	r3, r20
    87b0:	0a c0       	rjmp	.+20     	; 0x87c6 <vfprintf+0x20c>
    87b2:	e2 e0       	ldi	r30, 0x02	; 2
    87b4:	f0 e0       	ldi	r31, 0x00	; 0
    87b6:	ec 0f       	add	r30, r28
    87b8:	fd 1f       	adc	r31, r29
    87ba:	e1 0f       	add	r30, r17
    87bc:	f1 1d       	adc	r31, r1
    87be:	80 81       	ld	r24, Z
    87c0:	80 33       	cpi	r24, 0x30	; 48
    87c2:	19 f4       	brne	.+6      	; 0x87ca <vfprintf+0x210>
    87c4:	11 50       	subi	r17, 0x01	; 1
    87c6:	11 11       	cpse	r17, r1
    87c8:	f4 cf       	rjmp	.-24     	; 0x87b2 <vfprintf+0x1f8>
    87ca:	37 fe       	sbrs	r3, 7
    87cc:	0e c0       	rjmp	.+28     	; 0x87ea <vfprintf+0x230>
    87ce:	ee 24       	eor	r14, r14
    87d0:	e3 94       	inc	r14
    87d2:	e1 0e       	add	r14, r17
    87d4:	81 2f       	mov	r24, r17
    87d6:	90 e0       	ldi	r25, 0x00	; 0
    87d8:	48 16       	cp	r4, r24
    87da:	59 06       	cpc	r5, r25
    87dc:	2c f4       	brge	.+10     	; 0x87e8 <vfprintf+0x22e>
    87de:	14 19       	sub	r17, r4
    87e0:	04 c0       	rjmp	.+8      	; 0x87ea <vfprintf+0x230>
    87e2:	ee 24       	eor	r14, r14
    87e4:	e3 94       	inc	r14
    87e6:	01 c0       	rjmp	.+2      	; 0x87ea <vfprintf+0x230>
    87e8:	10 e0       	ldi	r17, 0x00	; 0
    87ea:	37 fe       	sbrs	r3, 7
    87ec:	06 c0       	rjmp	.+12     	; 0x87fa <vfprintf+0x240>
    87ee:	14 14       	cp	r1, r4
    87f0:	15 04       	cpc	r1, r5
    87f2:	34 f4       	brge	.+12     	; 0x8800 <vfprintf+0x246>
    87f4:	c2 01       	movw	r24, r4
    87f6:	01 96       	adiw	r24, 0x01	; 1
    87f8:	05 c0       	rjmp	.+10     	; 0x8804 <vfprintf+0x24a>
    87fa:	85 e0       	ldi	r24, 0x05	; 5
    87fc:	90 e0       	ldi	r25, 0x00	; 0
    87fe:	02 c0       	rjmp	.+4      	; 0x8804 <vfprintf+0x24a>
    8800:	81 e0       	ldi	r24, 0x01	; 1
    8802:	90 e0       	ldi	r25, 0x00	; 0
    8804:	21 10       	cpse	r2, r1
    8806:	01 96       	adiw	r24, 0x01	; 1
    8808:	11 23       	and	r17, r17
    880a:	31 f0       	breq	.+12     	; 0x8818 <vfprintf+0x25e>
    880c:	21 2f       	mov	r18, r17
    880e:	30 e0       	ldi	r19, 0x00	; 0
    8810:	2f 5f       	subi	r18, 0xFF	; 255
    8812:	3f 4f       	sbci	r19, 0xFF	; 255
    8814:	82 0f       	add	r24, r18
    8816:	93 1f       	adc	r25, r19
    8818:	2f 2d       	mov	r18, r15
    881a:	30 e0       	ldi	r19, 0x00	; 0
    881c:	82 17       	cp	r24, r18
    881e:	93 07       	cpc	r25, r19
    8820:	14 f4       	brge	.+4      	; 0x8826 <vfprintf+0x26c>
    8822:	f8 1a       	sub	r15, r24
    8824:	01 c0       	rjmp	.+2      	; 0x8828 <vfprintf+0x26e>
    8826:	f1 2c       	mov	r15, r1
    8828:	83 2d       	mov	r24, r3
    882a:	89 70       	andi	r24, 0x09	; 9
    882c:	41 f4       	brne	.+16     	; 0x883e <vfprintf+0x284>
    882e:	ff 20       	and	r15, r15
    8830:	31 f0       	breq	.+12     	; 0x883e <vfprintf+0x284>
    8832:	b6 01       	movw	r22, r12
    8834:	80 e2       	ldi	r24, 0x20	; 32
    8836:	90 e0       	ldi	r25, 0x00	; 0
    8838:	d8 d4       	rcall	.+2480   	; 0x91ea <fputc>
    883a:	fa 94       	dec	r15
    883c:	f8 cf       	rjmp	.-16     	; 0x882e <vfprintf+0x274>
    883e:	22 20       	and	r2, r2
    8840:	21 f0       	breq	.+8      	; 0x884a <vfprintf+0x290>
    8842:	b6 01       	movw	r22, r12
    8844:	82 2d       	mov	r24, r2
    8846:	90 e0       	ldi	r25, 0x00	; 0
    8848:	d0 d4       	rcall	.+2464   	; 0x91ea <fputc>
    884a:	33 fc       	sbrc	r3, 3
    884c:	08 c0       	rjmp	.+16     	; 0x885e <vfprintf+0x2a4>
    884e:	ff 20       	and	r15, r15
    8850:	31 f0       	breq	.+12     	; 0x885e <vfprintf+0x2a4>
    8852:	b6 01       	movw	r22, r12
    8854:	80 e3       	ldi	r24, 0x30	; 48
    8856:	90 e0       	ldi	r25, 0x00	; 0
    8858:	c8 d4       	rcall	.+2448   	; 0x91ea <fputc>
    885a:	fa 94       	dec	r15
    885c:	f8 cf       	rjmp	.-16     	; 0x884e <vfprintf+0x294>
    885e:	37 fe       	sbrs	r3, 7
    8860:	58 c0       	rjmp	.+176    	; 0x8912 <vfprintf+0x358>
    8862:	94 2d       	mov	r25, r4
    8864:	85 2d       	mov	r24, r5
    8866:	57 fe       	sbrs	r5, 7
    8868:	02 c0       	rjmp	.+4      	; 0x886e <vfprintf+0x2b4>
    886a:	90 e0       	ldi	r25, 0x00	; 0
    886c:	80 e0       	ldi	r24, 0x00	; 0
    886e:	29 2e       	mov	r2, r25
    8870:	38 2e       	mov	r3, r24
    8872:	20 e0       	ldi	r18, 0x00	; 0
    8874:	30 e0       	ldi	r19, 0x00	; 0
    8876:	a2 01       	movw	r20, r4
    8878:	4e 19       	sub	r20, r14
    887a:	51 09       	sbc	r21, r1
    887c:	5d 87       	std	Y+13, r21	; 0x0d
    887e:	4c 87       	std	Y+12, r20	; 0x0c
    8880:	a2 01       	movw	r20, r4
    8882:	42 19       	sub	r20, r2
    8884:	53 09       	sbc	r21, r3
    8886:	5f 87       	std	Y+15, r21	; 0x0f
    8888:	4e 87       	std	Y+14, r20	; 0x0e
    888a:	61 2f       	mov	r22, r17
    888c:	70 e0       	ldi	r23, 0x00	; 0
    888e:	44 27       	eor	r20, r20
    8890:	55 27       	eor	r21, r21
    8892:	46 1b       	sub	r20, r22
    8894:	57 0b       	sbc	r21, r23
    8896:	59 8b       	std	Y+17, r21	; 0x11
    8898:	48 8b       	std	Y+16, r20	; 0x10
    889a:	5f ef       	ldi	r21, 0xFF	; 255
    889c:	25 16       	cp	r2, r21
    889e:	35 06       	cpc	r3, r21
    88a0:	41 f4       	brne	.+16     	; 0x88b2 <vfprintf+0x2f8>
    88a2:	b6 01       	movw	r22, r12
    88a4:	8e e2       	ldi	r24, 0x2E	; 46
    88a6:	90 e0       	ldi	r25, 0x00	; 0
    88a8:	2a 8b       	std	Y+18, r18	; 0x12
    88aa:	3b 8b       	std	Y+19, r19	; 0x13
    88ac:	9e d4       	rcall	.+2364   	; 0x91ea <fputc>
    88ae:	3b 89       	ldd	r19, Y+19	; 0x13
    88b0:	2a 89       	ldd	r18, Y+18	; 0x12
    88b2:	42 14       	cp	r4, r2
    88b4:	53 04       	cpc	r5, r3
    88b6:	6c f0       	brlt	.+26     	; 0x88d2 <vfprintf+0x318>
    88b8:	4c 85       	ldd	r20, Y+12	; 0x0c
    88ba:	5d 85       	ldd	r21, Y+13	; 0x0d
    88bc:	42 15       	cp	r20, r2
    88be:	53 05       	cpc	r21, r3
    88c0:	44 f4       	brge	.+16     	; 0x88d2 <vfprintf+0x318>
    88c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    88c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    88c6:	e2 0f       	add	r30, r18
    88c8:	f3 1f       	adc	r31, r19
    88ca:	e6 0d       	add	r30, r6
    88cc:	f7 1d       	adc	r31, r7
    88ce:	81 81       	ldd	r24, Z+1	; 0x01
    88d0:	01 c0       	rjmp	.+2      	; 0x88d4 <vfprintf+0x31a>
    88d2:	80 e3       	ldi	r24, 0x30	; 48
    88d4:	51 e0       	ldi	r21, 0x01	; 1
    88d6:	25 1a       	sub	r2, r21
    88d8:	31 08       	sbc	r3, r1
    88da:	2f 5f       	subi	r18, 0xFF	; 255
    88dc:	3f 4f       	sbci	r19, 0xFF	; 255
    88de:	48 89       	ldd	r20, Y+16	; 0x10
    88e0:	59 89       	ldd	r21, Y+17	; 0x11
    88e2:	24 16       	cp	r2, r20
    88e4:	35 06       	cpc	r3, r21
    88e6:	44 f0       	brlt	.+16     	; 0x88f8 <vfprintf+0x33e>
    88e8:	b6 01       	movw	r22, r12
    88ea:	90 e0       	ldi	r25, 0x00	; 0
    88ec:	2a 8b       	std	Y+18, r18	; 0x12
    88ee:	3b 8b       	std	Y+19, r19	; 0x13
    88f0:	7c d4       	rcall	.+2296   	; 0x91ea <fputc>
    88f2:	2a 89       	ldd	r18, Y+18	; 0x12
    88f4:	3b 89       	ldd	r19, Y+19	; 0x13
    88f6:	d1 cf       	rjmp	.-94     	; 0x889a <vfprintf+0x2e0>
    88f8:	24 14       	cp	r2, r4
    88fa:	35 04       	cpc	r3, r5
    88fc:	39 f4       	brne	.+14     	; 0x890c <vfprintf+0x352>
    88fe:	9a 81       	ldd	r25, Y+2	; 0x02
    8900:	96 33       	cpi	r25, 0x36	; 54
    8902:	18 f4       	brcc	.+6      	; 0x890a <vfprintf+0x350>
    8904:	95 33       	cpi	r25, 0x35	; 53
    8906:	11 f4       	brne	.+4      	; 0x890c <vfprintf+0x352>
    8908:	04 ff       	sbrs	r16, 4
    890a:	81 e3       	ldi	r24, 0x31	; 49
    890c:	b6 01       	movw	r22, r12
    890e:	90 e0       	ldi	r25, 0x00	; 0
    8910:	45 c0       	rjmp	.+138    	; 0x899c <vfprintf+0x3e2>
    8912:	8a 81       	ldd	r24, Y+2	; 0x02
    8914:	81 33       	cpi	r24, 0x31	; 49
    8916:	09 f0       	breq	.+2      	; 0x891a <vfprintf+0x360>
    8918:	0f 7e       	andi	r16, 0xEF	; 239
    891a:	b6 01       	movw	r22, r12
    891c:	90 e0       	ldi	r25, 0x00	; 0
    891e:	65 d4       	rcall	.+2250   	; 0x91ea <fputc>
    8920:	11 11       	cpse	r17, r1
    8922:	05 c0       	rjmp	.+10     	; 0x892e <vfprintf+0x374>
    8924:	34 fc       	sbrc	r3, 4
    8926:	16 c0       	rjmp	.+44     	; 0x8954 <vfprintf+0x39a>
    8928:	85 e6       	ldi	r24, 0x65	; 101
    892a:	90 e0       	ldi	r25, 0x00	; 0
    892c:	15 c0       	rjmp	.+42     	; 0x8958 <vfprintf+0x39e>
    892e:	b6 01       	movw	r22, r12
    8930:	8e e2       	ldi	r24, 0x2E	; 46
    8932:	90 e0       	ldi	r25, 0x00	; 0
    8934:	5a d4       	rcall	.+2228   	; 0x91ea <fputc>
    8936:	82 e0       	ldi	r24, 0x02	; 2
    8938:	ee 24       	eor	r14, r14
    893a:	e3 94       	inc	r14
    893c:	e8 0e       	add	r14, r24
    893e:	f3 01       	movw	r30, r6
    8940:	e8 0f       	add	r30, r24
    8942:	f1 1d       	adc	r31, r1
    8944:	80 81       	ld	r24, Z
    8946:	b6 01       	movw	r22, r12
    8948:	90 e0       	ldi	r25, 0x00	; 0
    894a:	4f d4       	rcall	.+2206   	; 0x91ea <fputc>
    894c:	11 50       	subi	r17, 0x01	; 1
    894e:	8e 2d       	mov	r24, r14
    8950:	99 f7       	brne	.-26     	; 0x8938 <vfprintf+0x37e>
    8952:	e8 cf       	rjmp	.-48     	; 0x8924 <vfprintf+0x36a>
    8954:	85 e4       	ldi	r24, 0x45	; 69
    8956:	90 e0       	ldi	r25, 0x00	; 0
    8958:	b6 01       	movw	r22, r12
    895a:	47 d4       	rcall	.+2190   	; 0x91ea <fputc>
    895c:	57 fc       	sbrc	r5, 7
    895e:	05 c0       	rjmp	.+10     	; 0x896a <vfprintf+0x3b0>
    8960:	41 14       	cp	r4, r1
    8962:	51 04       	cpc	r5, r1
    8964:	39 f4       	brne	.+14     	; 0x8974 <vfprintf+0x3ba>
    8966:	04 ff       	sbrs	r16, 4
    8968:	05 c0       	rjmp	.+10     	; 0x8974 <vfprintf+0x3ba>
    896a:	51 94       	neg	r5
    896c:	41 94       	neg	r4
    896e:	51 08       	sbc	r5, r1
    8970:	8d e2       	ldi	r24, 0x2D	; 45
    8972:	01 c0       	rjmp	.+2      	; 0x8976 <vfprintf+0x3bc>
    8974:	8b e2       	ldi	r24, 0x2B	; 43
    8976:	b6 01       	movw	r22, r12
    8978:	90 e0       	ldi	r25, 0x00	; 0
    897a:	37 d4       	rcall	.+2158   	; 0x91ea <fputc>
    897c:	80 e3       	ldi	r24, 0x30	; 48
    897e:	9a e0       	ldi	r25, 0x0A	; 10
    8980:	49 16       	cp	r4, r25
    8982:	51 04       	cpc	r5, r1
    8984:	2c f0       	brlt	.+10     	; 0x8990 <vfprintf+0x3d6>
    8986:	8f 5f       	subi	r24, 0xFF	; 255
    8988:	5a e0       	ldi	r21, 0x0A	; 10
    898a:	45 1a       	sub	r4, r21
    898c:	51 08       	sbc	r5, r1
    898e:	f7 cf       	rjmp	.-18     	; 0x897e <vfprintf+0x3c4>
    8990:	b6 01       	movw	r22, r12
    8992:	90 e0       	ldi	r25, 0x00	; 0
    8994:	2a d4       	rcall	.+2132   	; 0x91ea <fputc>
    8996:	b6 01       	movw	r22, r12
    8998:	c2 01       	movw	r24, r4
    899a:	c0 96       	adiw	r24, 0x30	; 48
    899c:	26 d4       	rcall	.+2124   	; 0x91ea <fputc>
    899e:	4c c1       	rjmp	.+664    	; 0x8c38 <vfprintf+0x67e>
    89a0:	83 36       	cpi	r24, 0x63	; 99
    89a2:	31 f0       	breq	.+12     	; 0x89b0 <vfprintf+0x3f6>
    89a4:	83 37       	cpi	r24, 0x73	; 115
    89a6:	79 f0       	breq	.+30     	; 0x89c6 <vfprintf+0x40c>
    89a8:	83 35       	cpi	r24, 0x53	; 83
    89aa:	09 f0       	breq	.+2      	; 0x89ae <vfprintf+0x3f4>
    89ac:	54 c0       	rjmp	.+168    	; 0x8a56 <vfprintf+0x49c>
    89ae:	20 c0       	rjmp	.+64     	; 0x89f0 <vfprintf+0x436>
    89b0:	52 01       	movw	r10, r4
    89b2:	e2 e0       	ldi	r30, 0x02	; 2
    89b4:	ae 0e       	add	r10, r30
    89b6:	b1 1c       	adc	r11, r1
    89b8:	f2 01       	movw	r30, r4
    89ba:	80 81       	ld	r24, Z
    89bc:	89 83       	std	Y+1, r24	; 0x01
    89be:	01 e0       	ldi	r16, 0x01	; 1
    89c0:	10 e0       	ldi	r17, 0x00	; 0
    89c2:	23 01       	movw	r4, r6
    89c4:	13 c0       	rjmp	.+38     	; 0x89ec <vfprintf+0x432>
    89c6:	52 01       	movw	r10, r4
    89c8:	f2 e0       	ldi	r31, 0x02	; 2
    89ca:	af 0e       	add	r10, r31
    89cc:	b1 1c       	adc	r11, r1
    89ce:	f2 01       	movw	r30, r4
    89d0:	40 80       	ld	r4, Z
    89d2:	51 80       	ldd	r5, Z+1	; 0x01
    89d4:	26 ff       	sbrs	r18, 6
    89d6:	03 c0       	rjmp	.+6      	; 0x89de <vfprintf+0x424>
    89d8:	61 2f       	mov	r22, r17
    89da:	70 e0       	ldi	r23, 0x00	; 0
    89dc:	02 c0       	rjmp	.+4      	; 0x89e2 <vfprintf+0x428>
    89de:	6f ef       	ldi	r22, 0xFF	; 255
    89e0:	7f ef       	ldi	r23, 0xFF	; 255
    89e2:	c2 01       	movw	r24, r4
    89e4:	2a 8b       	std	Y+18, r18	; 0x12
    89e6:	f6 d3       	rcall	.+2028   	; 0x91d4 <strnlen>
    89e8:	8c 01       	movw	r16, r24
    89ea:	2a 89       	ldd	r18, Y+18	; 0x12
    89ec:	2f 77       	andi	r18, 0x7F	; 127
    89ee:	14 c0       	rjmp	.+40     	; 0x8a18 <vfprintf+0x45e>
    89f0:	52 01       	movw	r10, r4
    89f2:	f2 e0       	ldi	r31, 0x02	; 2
    89f4:	af 0e       	add	r10, r31
    89f6:	b1 1c       	adc	r11, r1
    89f8:	f2 01       	movw	r30, r4
    89fa:	40 80       	ld	r4, Z
    89fc:	51 80       	ldd	r5, Z+1	; 0x01
    89fe:	26 ff       	sbrs	r18, 6
    8a00:	03 c0       	rjmp	.+6      	; 0x8a08 <vfprintf+0x44e>
    8a02:	61 2f       	mov	r22, r17
    8a04:	70 e0       	ldi	r23, 0x00	; 0
    8a06:	02 c0       	rjmp	.+4      	; 0x8a0c <vfprintf+0x452>
    8a08:	6f ef       	ldi	r22, 0xFF	; 255
    8a0a:	7f ef       	ldi	r23, 0xFF	; 255
    8a0c:	c2 01       	movw	r24, r4
    8a0e:	2a 8b       	std	Y+18, r18	; 0x12
    8a10:	d6 d3       	rcall	.+1964   	; 0x91be <strnlen_P>
    8a12:	8c 01       	movw	r16, r24
    8a14:	2a 89       	ldd	r18, Y+18	; 0x12
    8a16:	20 68       	ori	r18, 0x80	; 128
    8a18:	32 2e       	mov	r3, r18
    8a1a:	23 fd       	sbrc	r18, 3
    8a1c:	18 c0       	rjmp	.+48     	; 0x8a4e <vfprintf+0x494>
    8a1e:	8f 2d       	mov	r24, r15
    8a20:	90 e0       	ldi	r25, 0x00	; 0
    8a22:	08 17       	cp	r16, r24
    8a24:	19 07       	cpc	r17, r25
    8a26:	98 f4       	brcc	.+38     	; 0x8a4e <vfprintf+0x494>
    8a28:	b6 01       	movw	r22, r12
    8a2a:	80 e2       	ldi	r24, 0x20	; 32
    8a2c:	90 e0       	ldi	r25, 0x00	; 0
    8a2e:	dd d3       	rcall	.+1978   	; 0x91ea <fputc>
    8a30:	fa 94       	dec	r15
    8a32:	f5 cf       	rjmp	.-22     	; 0x8a1e <vfprintf+0x464>
    8a34:	f2 01       	movw	r30, r4
    8a36:	37 fc       	sbrc	r3, 7
    8a38:	85 91       	lpm	r24, Z+
    8a3a:	37 fe       	sbrs	r3, 7
    8a3c:	81 91       	ld	r24, Z+
    8a3e:	2f 01       	movw	r4, r30
    8a40:	b6 01       	movw	r22, r12
    8a42:	90 e0       	ldi	r25, 0x00	; 0
    8a44:	d2 d3       	rcall	.+1956   	; 0x91ea <fputc>
    8a46:	f1 10       	cpse	r15, r1
    8a48:	fa 94       	dec	r15
    8a4a:	01 50       	subi	r16, 0x01	; 1
    8a4c:	11 09       	sbc	r17, r1
    8a4e:	01 15       	cp	r16, r1
    8a50:	11 05       	cpc	r17, r1
    8a52:	81 f7       	brne	.-32     	; 0x8a34 <vfprintf+0x47a>
    8a54:	f1 c0       	rjmp	.+482    	; 0x8c38 <vfprintf+0x67e>
    8a56:	84 36       	cpi	r24, 0x64	; 100
    8a58:	11 f0       	breq	.+4      	; 0x8a5e <vfprintf+0x4a4>
    8a5a:	89 36       	cpi	r24, 0x69	; 105
    8a5c:	51 f5       	brne	.+84     	; 0x8ab2 <vfprintf+0x4f8>
    8a5e:	52 01       	movw	r10, r4
    8a60:	27 ff       	sbrs	r18, 7
    8a62:	09 c0       	rjmp	.+18     	; 0x8a76 <vfprintf+0x4bc>
    8a64:	f4 e0       	ldi	r31, 0x04	; 4
    8a66:	af 0e       	add	r10, r31
    8a68:	b1 1c       	adc	r11, r1
    8a6a:	f2 01       	movw	r30, r4
    8a6c:	60 81       	ld	r22, Z
    8a6e:	71 81       	ldd	r23, Z+1	; 0x01
    8a70:	82 81       	ldd	r24, Z+2	; 0x02
    8a72:	93 81       	ldd	r25, Z+3	; 0x03
    8a74:	0a c0       	rjmp	.+20     	; 0x8a8a <vfprintf+0x4d0>
    8a76:	f2 e0       	ldi	r31, 0x02	; 2
    8a78:	af 0e       	add	r10, r31
    8a7a:	b1 1c       	adc	r11, r1
    8a7c:	f2 01       	movw	r30, r4
    8a7e:	60 81       	ld	r22, Z
    8a80:	71 81       	ldd	r23, Z+1	; 0x01
    8a82:	07 2e       	mov	r0, r23
    8a84:	00 0c       	add	r0, r0
    8a86:	88 0b       	sbc	r24, r24
    8a88:	99 0b       	sbc	r25, r25
    8a8a:	2f 76       	andi	r18, 0x6F	; 111
    8a8c:	32 2e       	mov	r3, r18
    8a8e:	97 ff       	sbrs	r25, 7
    8a90:	09 c0       	rjmp	.+18     	; 0x8aa4 <vfprintf+0x4ea>
    8a92:	90 95       	com	r25
    8a94:	80 95       	com	r24
    8a96:	70 95       	com	r23
    8a98:	61 95       	neg	r22
    8a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    8a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    8a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    8aa0:	20 68       	ori	r18, 0x80	; 128
    8aa2:	32 2e       	mov	r3, r18
    8aa4:	2a e0       	ldi	r18, 0x0A	; 10
    8aa6:	30 e0       	ldi	r19, 0x00	; 0
    8aa8:	a3 01       	movw	r20, r6
    8aaa:	06 d4       	rcall	.+2060   	; 0x92b8 <__ultoa_invert>
    8aac:	e8 2e       	mov	r14, r24
    8aae:	e6 18       	sub	r14, r6
    8ab0:	3e c0       	rjmp	.+124    	; 0x8b2e <vfprintf+0x574>
    8ab2:	02 2f       	mov	r16, r18
    8ab4:	85 37       	cpi	r24, 0x75	; 117
    8ab6:	21 f4       	brne	.+8      	; 0x8ac0 <vfprintf+0x506>
    8ab8:	0f 7e       	andi	r16, 0xEF	; 239
    8aba:	2a e0       	ldi	r18, 0x0A	; 10
    8abc:	30 e0       	ldi	r19, 0x00	; 0
    8abe:	1d c0       	rjmp	.+58     	; 0x8afa <vfprintf+0x540>
    8ac0:	09 7f       	andi	r16, 0xF9	; 249
    8ac2:	8f 36       	cpi	r24, 0x6F	; 111
    8ac4:	91 f0       	breq	.+36     	; 0x8aea <vfprintf+0x530>
    8ac6:	18 f4       	brcc	.+6      	; 0x8ace <vfprintf+0x514>
    8ac8:	88 35       	cpi	r24, 0x58	; 88
    8aca:	59 f0       	breq	.+22     	; 0x8ae2 <vfprintf+0x528>
    8acc:	be c0       	rjmp	.+380    	; 0x8c4a <vfprintf+0x690>
    8ace:	80 37       	cpi	r24, 0x70	; 112
    8ad0:	19 f0       	breq	.+6      	; 0x8ad8 <vfprintf+0x51e>
    8ad2:	88 37       	cpi	r24, 0x78	; 120
    8ad4:	11 f0       	breq	.+4      	; 0x8ada <vfprintf+0x520>
    8ad6:	b9 c0       	rjmp	.+370    	; 0x8c4a <vfprintf+0x690>
    8ad8:	00 61       	ori	r16, 0x10	; 16
    8ada:	04 ff       	sbrs	r16, 4
    8adc:	09 c0       	rjmp	.+18     	; 0x8af0 <vfprintf+0x536>
    8ade:	04 60       	ori	r16, 0x04	; 4
    8ae0:	07 c0       	rjmp	.+14     	; 0x8af0 <vfprintf+0x536>
    8ae2:	24 ff       	sbrs	r18, 4
    8ae4:	08 c0       	rjmp	.+16     	; 0x8af6 <vfprintf+0x53c>
    8ae6:	06 60       	ori	r16, 0x06	; 6
    8ae8:	06 c0       	rjmp	.+12     	; 0x8af6 <vfprintf+0x53c>
    8aea:	28 e0       	ldi	r18, 0x08	; 8
    8aec:	30 e0       	ldi	r19, 0x00	; 0
    8aee:	05 c0       	rjmp	.+10     	; 0x8afa <vfprintf+0x540>
    8af0:	20 e1       	ldi	r18, 0x10	; 16
    8af2:	30 e0       	ldi	r19, 0x00	; 0
    8af4:	02 c0       	rjmp	.+4      	; 0x8afa <vfprintf+0x540>
    8af6:	20 e1       	ldi	r18, 0x10	; 16
    8af8:	32 e0       	ldi	r19, 0x02	; 2
    8afa:	52 01       	movw	r10, r4
    8afc:	07 ff       	sbrs	r16, 7
    8afe:	09 c0       	rjmp	.+18     	; 0x8b12 <vfprintf+0x558>
    8b00:	f4 e0       	ldi	r31, 0x04	; 4
    8b02:	af 0e       	add	r10, r31
    8b04:	b1 1c       	adc	r11, r1
    8b06:	f2 01       	movw	r30, r4
    8b08:	60 81       	ld	r22, Z
    8b0a:	71 81       	ldd	r23, Z+1	; 0x01
    8b0c:	82 81       	ldd	r24, Z+2	; 0x02
    8b0e:	93 81       	ldd	r25, Z+3	; 0x03
    8b10:	08 c0       	rjmp	.+16     	; 0x8b22 <vfprintf+0x568>
    8b12:	f2 e0       	ldi	r31, 0x02	; 2
    8b14:	af 0e       	add	r10, r31
    8b16:	b1 1c       	adc	r11, r1
    8b18:	f2 01       	movw	r30, r4
    8b1a:	60 81       	ld	r22, Z
    8b1c:	71 81       	ldd	r23, Z+1	; 0x01
    8b1e:	80 e0       	ldi	r24, 0x00	; 0
    8b20:	90 e0       	ldi	r25, 0x00	; 0
    8b22:	a3 01       	movw	r20, r6
    8b24:	c9 d3       	rcall	.+1938   	; 0x92b8 <__ultoa_invert>
    8b26:	e8 2e       	mov	r14, r24
    8b28:	e6 18       	sub	r14, r6
    8b2a:	0f 77       	andi	r16, 0x7F	; 127
    8b2c:	30 2e       	mov	r3, r16
    8b2e:	36 fe       	sbrs	r3, 6
    8b30:	0b c0       	rjmp	.+22     	; 0x8b48 <vfprintf+0x58e>
    8b32:	33 2d       	mov	r19, r3
    8b34:	3e 7f       	andi	r19, 0xFE	; 254
    8b36:	e1 16       	cp	r14, r17
    8b38:	50 f4       	brcc	.+20     	; 0x8b4e <vfprintf+0x594>
    8b3a:	34 fe       	sbrs	r3, 4
    8b3c:	0a c0       	rjmp	.+20     	; 0x8b52 <vfprintf+0x598>
    8b3e:	32 fc       	sbrc	r3, 2
    8b40:	08 c0       	rjmp	.+16     	; 0x8b52 <vfprintf+0x598>
    8b42:	33 2d       	mov	r19, r3
    8b44:	3e 7e       	andi	r19, 0xEE	; 238
    8b46:	05 c0       	rjmp	.+10     	; 0x8b52 <vfprintf+0x598>
    8b48:	0e 2d       	mov	r16, r14
    8b4a:	33 2d       	mov	r19, r3
    8b4c:	03 c0       	rjmp	.+6      	; 0x8b54 <vfprintf+0x59a>
    8b4e:	0e 2d       	mov	r16, r14
    8b50:	01 c0       	rjmp	.+2      	; 0x8b54 <vfprintf+0x59a>
    8b52:	01 2f       	mov	r16, r17
    8b54:	34 ff       	sbrs	r19, 4
    8b56:	0c c0       	rjmp	.+24     	; 0x8b70 <vfprintf+0x5b6>
    8b58:	fe 01       	movw	r30, r28
    8b5a:	ee 0d       	add	r30, r14
    8b5c:	f1 1d       	adc	r31, r1
    8b5e:	80 81       	ld	r24, Z
    8b60:	80 33       	cpi	r24, 0x30	; 48
    8b62:	11 f4       	brne	.+4      	; 0x8b68 <vfprintf+0x5ae>
    8b64:	39 7e       	andi	r19, 0xE9	; 233
    8b66:	08 c0       	rjmp	.+16     	; 0x8b78 <vfprintf+0x5be>
    8b68:	32 ff       	sbrs	r19, 2
    8b6a:	05 c0       	rjmp	.+10     	; 0x8b76 <vfprintf+0x5bc>
    8b6c:	0e 5f       	subi	r16, 0xFE	; 254
    8b6e:	04 c0       	rjmp	.+8      	; 0x8b78 <vfprintf+0x5be>
    8b70:	83 2f       	mov	r24, r19
    8b72:	86 78       	andi	r24, 0x86	; 134
    8b74:	09 f0       	breq	.+2      	; 0x8b78 <vfprintf+0x5be>
    8b76:	0f 5f       	subi	r16, 0xFF	; 255
    8b78:	33 fd       	sbrc	r19, 3
    8b7a:	12 c0       	rjmp	.+36     	; 0x8ba0 <vfprintf+0x5e6>
    8b7c:	30 ff       	sbrs	r19, 0
    8b7e:	06 c0       	rjmp	.+12     	; 0x8b8c <vfprintf+0x5d2>
    8b80:	1e 2d       	mov	r17, r14
    8b82:	0f 15       	cp	r16, r15
    8b84:	18 f4       	brcc	.+6      	; 0x8b8c <vfprintf+0x5d2>
    8b86:	1f 0d       	add	r17, r15
    8b88:	10 1b       	sub	r17, r16
    8b8a:	0f 2d       	mov	r16, r15
    8b8c:	0f 15       	cp	r16, r15
    8b8e:	60 f4       	brcc	.+24     	; 0x8ba8 <vfprintf+0x5ee>
    8b90:	b6 01       	movw	r22, r12
    8b92:	80 e2       	ldi	r24, 0x20	; 32
    8b94:	90 e0       	ldi	r25, 0x00	; 0
    8b96:	3b 8b       	std	Y+19, r19	; 0x13
    8b98:	28 d3       	rcall	.+1616   	; 0x91ea <fputc>
    8b9a:	0f 5f       	subi	r16, 0xFF	; 255
    8b9c:	3b 89       	ldd	r19, Y+19	; 0x13
    8b9e:	f6 cf       	rjmp	.-20     	; 0x8b8c <vfprintf+0x5d2>
    8ba0:	0f 15       	cp	r16, r15
    8ba2:	10 f4       	brcc	.+4      	; 0x8ba8 <vfprintf+0x5ee>
    8ba4:	f0 1a       	sub	r15, r16
    8ba6:	01 c0       	rjmp	.+2      	; 0x8baa <vfprintf+0x5f0>
    8ba8:	f1 2c       	mov	r15, r1
    8baa:	34 ff       	sbrs	r19, 4
    8bac:	11 c0       	rjmp	.+34     	; 0x8bd0 <vfprintf+0x616>
    8bae:	b6 01       	movw	r22, r12
    8bb0:	80 e3       	ldi	r24, 0x30	; 48
    8bb2:	90 e0       	ldi	r25, 0x00	; 0
    8bb4:	3b 8b       	std	Y+19, r19	; 0x13
    8bb6:	19 d3       	rcall	.+1586   	; 0x91ea <fputc>
    8bb8:	3b 89       	ldd	r19, Y+19	; 0x13
    8bba:	32 ff       	sbrs	r19, 2
    8bbc:	16 c0       	rjmp	.+44     	; 0x8bea <vfprintf+0x630>
    8bbe:	31 fd       	sbrc	r19, 1
    8bc0:	03 c0       	rjmp	.+6      	; 0x8bc8 <vfprintf+0x60e>
    8bc2:	88 e7       	ldi	r24, 0x78	; 120
    8bc4:	90 e0       	ldi	r25, 0x00	; 0
    8bc6:	02 c0       	rjmp	.+4      	; 0x8bcc <vfprintf+0x612>
    8bc8:	88 e5       	ldi	r24, 0x58	; 88
    8bca:	90 e0       	ldi	r25, 0x00	; 0
    8bcc:	b6 01       	movw	r22, r12
    8bce:	0c c0       	rjmp	.+24     	; 0x8be8 <vfprintf+0x62e>
    8bd0:	83 2f       	mov	r24, r19
    8bd2:	86 78       	andi	r24, 0x86	; 134
    8bd4:	51 f0       	breq	.+20     	; 0x8bea <vfprintf+0x630>
    8bd6:	31 ff       	sbrs	r19, 1
    8bd8:	02 c0       	rjmp	.+4      	; 0x8bde <vfprintf+0x624>
    8bda:	8b e2       	ldi	r24, 0x2B	; 43
    8bdc:	01 c0       	rjmp	.+2      	; 0x8be0 <vfprintf+0x626>
    8bde:	80 e2       	ldi	r24, 0x20	; 32
    8be0:	37 fd       	sbrc	r19, 7
    8be2:	8d e2       	ldi	r24, 0x2D	; 45
    8be4:	b6 01       	movw	r22, r12
    8be6:	90 e0       	ldi	r25, 0x00	; 0
    8be8:	00 d3       	rcall	.+1536   	; 0x91ea <fputc>
    8bea:	e1 16       	cp	r14, r17
    8bec:	30 f4       	brcc	.+12     	; 0x8bfa <vfprintf+0x640>
    8bee:	b6 01       	movw	r22, r12
    8bf0:	80 e3       	ldi	r24, 0x30	; 48
    8bf2:	90 e0       	ldi	r25, 0x00	; 0
    8bf4:	fa d2       	rcall	.+1524   	; 0x91ea <fputc>
    8bf6:	11 50       	subi	r17, 0x01	; 1
    8bf8:	f8 cf       	rjmp	.-16     	; 0x8bea <vfprintf+0x630>
    8bfa:	ea 94       	dec	r14
    8bfc:	f3 01       	movw	r30, r6
    8bfe:	ee 0d       	add	r30, r14
    8c00:	f1 1d       	adc	r31, r1
    8c02:	80 81       	ld	r24, Z
    8c04:	b6 01       	movw	r22, r12
    8c06:	90 e0       	ldi	r25, 0x00	; 0
    8c08:	f0 d2       	rcall	.+1504   	; 0x91ea <fputc>
    8c0a:	e1 10       	cpse	r14, r1
    8c0c:	f6 cf       	rjmp	.-20     	; 0x8bfa <vfprintf+0x640>
    8c0e:	14 c0       	rjmp	.+40     	; 0x8c38 <vfprintf+0x67e>
    8c10:	f4 e0       	ldi	r31, 0x04	; 4
    8c12:	ff 15       	cp	r31, r15
    8c14:	48 f5       	brcc	.+82     	; 0x8c68 <vfprintf+0x6ae>
    8c16:	84 e0       	ldi	r24, 0x04	; 4
    8c18:	f8 1a       	sub	r15, r24
    8c1a:	33 fe       	sbrs	r3, 3
    8c1c:	1d c0       	rjmp	.+58     	; 0x8c58 <vfprintf+0x69e>
    8c1e:	21 10       	cpse	r2, r1
    8c20:	24 c0       	rjmp	.+72     	; 0x8c6a <vfprintf+0x6b0>
    8c22:	03 ff       	sbrs	r16, 3
    8c24:	27 c0       	rjmp	.+78     	; 0x8c74 <vfprintf+0x6ba>
    8c26:	0c ea       	ldi	r16, 0xAC	; 172
    8c28:	15 e0       	ldi	r17, 0x05	; 5
    8c2a:	f3 2d       	mov	r31, r3
    8c2c:	f0 71       	andi	r31, 0x10	; 16
    8c2e:	3f 2e       	mov	r3, r31
    8c30:	f8 01       	movw	r30, r16
    8c32:	84 91       	lpm	r24, Z
    8c34:	81 11       	cpse	r24, r1
    8c36:	21 c0       	rjmp	.+66     	; 0x8c7a <vfprintf+0x6c0>
    8c38:	ff 20       	and	r15, r15
    8c3a:	09 f4       	brne	.+2      	; 0x8c3e <vfprintf+0x684>
    8c3c:	fd cc       	rjmp	.-1542   	; 0x8638 <vfprintf+0x7e>
    8c3e:	b6 01       	movw	r22, r12
    8c40:	80 e2       	ldi	r24, 0x20	; 32
    8c42:	90 e0       	ldi	r25, 0x00	; 0
    8c44:	d2 d2       	rcall	.+1444   	; 0x91ea <fputc>
    8c46:	fa 94       	dec	r15
    8c48:	f7 cf       	rjmp	.-18     	; 0x8c38 <vfprintf+0x67e>
    8c4a:	f6 01       	movw	r30, r12
    8c4c:	86 81       	ldd	r24, Z+6	; 0x06
    8c4e:	97 81       	ldd	r25, Z+7	; 0x07
    8c50:	23 c0       	rjmp	.+70     	; 0x8c98 <vfprintf+0x6de>
    8c52:	8f ef       	ldi	r24, 0xFF	; 255
    8c54:	9f ef       	ldi	r25, 0xFF	; 255
    8c56:	20 c0       	rjmp	.+64     	; 0x8c98 <vfprintf+0x6de>
    8c58:	b6 01       	movw	r22, r12
    8c5a:	80 e2       	ldi	r24, 0x20	; 32
    8c5c:	90 e0       	ldi	r25, 0x00	; 0
    8c5e:	c5 d2       	rcall	.+1418   	; 0x91ea <fputc>
    8c60:	fa 94       	dec	r15
    8c62:	f1 10       	cpse	r15, r1
    8c64:	f9 cf       	rjmp	.-14     	; 0x8c58 <vfprintf+0x69e>
    8c66:	db cf       	rjmp	.-74     	; 0x8c1e <vfprintf+0x664>
    8c68:	f1 2c       	mov	r15, r1
    8c6a:	b6 01       	movw	r22, r12
    8c6c:	82 2d       	mov	r24, r2
    8c6e:	90 e0       	ldi	r25, 0x00	; 0
    8c70:	bc d2       	rcall	.+1400   	; 0x91ea <fputc>
    8c72:	d7 cf       	rjmp	.-82     	; 0x8c22 <vfprintf+0x668>
    8c74:	00 eb       	ldi	r16, 0xB0	; 176
    8c76:	15 e0       	ldi	r17, 0x05	; 5
    8c78:	d8 cf       	rjmp	.-80     	; 0x8c2a <vfprintf+0x670>
    8c7a:	31 10       	cpse	r3, r1
    8c7c:	80 52       	subi	r24, 0x20	; 32
    8c7e:	b6 01       	movw	r22, r12
    8c80:	90 e0       	ldi	r25, 0x00	; 0
    8c82:	b3 d2       	rcall	.+1382   	; 0x91ea <fputc>
    8c84:	0f 5f       	subi	r16, 0xFF	; 255
    8c86:	1f 4f       	sbci	r17, 0xFF	; 255
    8c88:	d3 cf       	rjmp	.-90     	; 0x8c30 <vfprintf+0x676>
    8c8a:	23 e0       	ldi	r18, 0x03	; 3
    8c8c:	2f 15       	cp	r18, r15
    8c8e:	10 f4       	brcc	.+4      	; 0x8c94 <vfprintf+0x6da>
    8c90:	83 e0       	ldi	r24, 0x03	; 3
    8c92:	c2 cf       	rjmp	.-124    	; 0x8c18 <vfprintf+0x65e>
    8c94:	f1 2c       	mov	r15, r1
    8c96:	c5 cf       	rjmp	.-118    	; 0x8c22 <vfprintf+0x668>
    8c98:	63 96       	adiw	r28, 0x13	; 19
    8c9a:	0f b6       	in	r0, 0x3f	; 63
    8c9c:	f8 94       	cli
    8c9e:	de bf       	out	0x3e, r29	; 62
    8ca0:	0f be       	out	0x3f, r0	; 63
    8ca2:	cd bf       	out	0x3d, r28	; 61
    8ca4:	df 91       	pop	r29
    8ca6:	cf 91       	pop	r28
    8ca8:	1f 91       	pop	r17
    8caa:	0f 91       	pop	r16
    8cac:	ff 90       	pop	r15
    8cae:	ef 90       	pop	r14
    8cb0:	df 90       	pop	r13
    8cb2:	cf 90       	pop	r12
    8cb4:	bf 90       	pop	r11
    8cb6:	af 90       	pop	r10
    8cb8:	9f 90       	pop	r9
    8cba:	8f 90       	pop	r8
    8cbc:	7f 90       	pop	r7
    8cbe:	6f 90       	pop	r6
    8cc0:	5f 90       	pop	r5
    8cc2:	4f 90       	pop	r4
    8cc4:	3f 90       	pop	r3
    8cc6:	2f 90       	pop	r2
    8cc8:	08 95       	ret

00008cca <__mulsi3>:
    8cca:	db 01       	movw	r26, r22
    8ccc:	8f 93       	push	r24
    8cce:	9f 93       	push	r25
    8cd0:	61 d0       	rcall	.+194    	; 0x8d94 <__muluhisi3>
    8cd2:	bf 91       	pop	r27
    8cd4:	af 91       	pop	r26
    8cd6:	a2 9f       	mul	r26, r18
    8cd8:	80 0d       	add	r24, r0
    8cda:	91 1d       	adc	r25, r1
    8cdc:	a3 9f       	mul	r26, r19
    8cde:	90 0d       	add	r25, r0
    8ce0:	b2 9f       	mul	r27, r18
    8ce2:	90 0d       	add	r25, r0
    8ce4:	11 24       	eor	r1, r1
    8ce6:	08 95       	ret

00008ce8 <__udivmodsi4>:
    8ce8:	a1 e2       	ldi	r26, 0x21	; 33
    8cea:	1a 2e       	mov	r1, r26
    8cec:	aa 1b       	sub	r26, r26
    8cee:	bb 1b       	sub	r27, r27
    8cf0:	fd 01       	movw	r30, r26
    8cf2:	0d c0       	rjmp	.+26     	; 0x8d0e <__udivmodsi4_ep>

00008cf4 <__udivmodsi4_loop>:
    8cf4:	aa 1f       	adc	r26, r26
    8cf6:	bb 1f       	adc	r27, r27
    8cf8:	ee 1f       	adc	r30, r30
    8cfa:	ff 1f       	adc	r31, r31
    8cfc:	a2 17       	cp	r26, r18
    8cfe:	b3 07       	cpc	r27, r19
    8d00:	e4 07       	cpc	r30, r20
    8d02:	f5 07       	cpc	r31, r21
    8d04:	20 f0       	brcs	.+8      	; 0x8d0e <__udivmodsi4_ep>
    8d06:	a2 1b       	sub	r26, r18
    8d08:	b3 0b       	sbc	r27, r19
    8d0a:	e4 0b       	sbc	r30, r20
    8d0c:	f5 0b       	sbc	r31, r21

00008d0e <__udivmodsi4_ep>:
    8d0e:	66 1f       	adc	r22, r22
    8d10:	77 1f       	adc	r23, r23
    8d12:	88 1f       	adc	r24, r24
    8d14:	99 1f       	adc	r25, r25
    8d16:	1a 94       	dec	r1
    8d18:	69 f7       	brne	.-38     	; 0x8cf4 <__udivmodsi4_loop>
    8d1a:	60 95       	com	r22
    8d1c:	70 95       	com	r23
    8d1e:	80 95       	com	r24
    8d20:	90 95       	com	r25
    8d22:	9b 01       	movw	r18, r22
    8d24:	ac 01       	movw	r20, r24
    8d26:	bd 01       	movw	r22, r26
    8d28:	cf 01       	movw	r24, r30
    8d2a:	08 95       	ret

00008d2c <__divmodsi4>:
    8d2c:	05 2e       	mov	r0, r21
    8d2e:	97 fb       	bst	r25, 7
    8d30:	16 f4       	brtc	.+4      	; 0x8d36 <__divmodsi4+0xa>
    8d32:	00 94       	com	r0
    8d34:	0f d0       	rcall	.+30     	; 0x8d54 <__negsi2>
    8d36:	57 fd       	sbrc	r21, 7
    8d38:	05 d0       	rcall	.+10     	; 0x8d44 <__divmodsi4_neg2>
    8d3a:	d6 df       	rcall	.-84     	; 0x8ce8 <__udivmodsi4>
    8d3c:	07 fc       	sbrc	r0, 7
    8d3e:	02 d0       	rcall	.+4      	; 0x8d44 <__divmodsi4_neg2>
    8d40:	46 f4       	brtc	.+16     	; 0x8d52 <__divmodsi4_exit>
    8d42:	08 c0       	rjmp	.+16     	; 0x8d54 <__negsi2>

00008d44 <__divmodsi4_neg2>:
    8d44:	50 95       	com	r21
    8d46:	40 95       	com	r20
    8d48:	30 95       	com	r19
    8d4a:	21 95       	neg	r18
    8d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    8d4e:	4f 4f       	sbci	r20, 0xFF	; 255
    8d50:	5f 4f       	sbci	r21, 0xFF	; 255

00008d52 <__divmodsi4_exit>:
    8d52:	08 95       	ret

00008d54 <__negsi2>:
    8d54:	90 95       	com	r25
    8d56:	80 95       	com	r24
    8d58:	70 95       	com	r23
    8d5a:	61 95       	neg	r22
    8d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    8d60:	9f 4f       	sbci	r25, 0xFF	; 255
    8d62:	08 95       	ret

00008d64 <__tablejump2__>:
    8d64:	ee 0f       	add	r30, r30
    8d66:	ff 1f       	adc	r31, r31
    8d68:	00 24       	eor	r0, r0
    8d6a:	00 1c       	adc	r0, r0
    8d6c:	0b be       	out	0x3b, r0	; 59
    8d6e:	07 90       	elpm	r0, Z+
    8d70:	f6 91       	elpm	r31, Z
    8d72:	e0 2d       	mov	r30, r0
    8d74:	09 94       	ijmp

00008d76 <__umulhisi3>:
    8d76:	a2 9f       	mul	r26, r18
    8d78:	b0 01       	movw	r22, r0
    8d7a:	b3 9f       	mul	r27, r19
    8d7c:	c0 01       	movw	r24, r0
    8d7e:	a3 9f       	mul	r26, r19
    8d80:	70 0d       	add	r23, r0
    8d82:	81 1d       	adc	r24, r1
    8d84:	11 24       	eor	r1, r1
    8d86:	91 1d       	adc	r25, r1
    8d88:	b2 9f       	mul	r27, r18
    8d8a:	70 0d       	add	r23, r0
    8d8c:	81 1d       	adc	r24, r1
    8d8e:	11 24       	eor	r1, r1
    8d90:	91 1d       	adc	r25, r1
    8d92:	08 95       	ret

00008d94 <__muluhisi3>:
    8d94:	f0 df       	rcall	.-32     	; 0x8d76 <__umulhisi3>
    8d96:	a5 9f       	mul	r26, r21
    8d98:	90 0d       	add	r25, r0
    8d9a:	b4 9f       	mul	r27, r20
    8d9c:	90 0d       	add	r25, r0
    8d9e:	a4 9f       	mul	r26, r20
    8da0:	80 0d       	add	r24, r0
    8da2:	91 1d       	adc	r25, r1
    8da4:	11 24       	eor	r1, r1
    8da6:	08 95       	ret

00008da8 <__mulshisi3>:
    8da8:	b7 ff       	sbrs	r27, 7
    8daa:	f4 cf       	rjmp	.-24     	; 0x8d94 <__muluhisi3>

00008dac <__mulohisi3>:
    8dac:	f3 df       	rcall	.-26     	; 0x8d94 <__muluhisi3>
    8dae:	82 1b       	sub	r24, r18
    8db0:	93 0b       	sbc	r25, r19
    8db2:	08 95       	ret

00008db4 <malloc>:
    8db4:	cf 93       	push	r28
    8db6:	df 93       	push	r29
    8db8:	82 30       	cpi	r24, 0x02	; 2
    8dba:	91 05       	cpc	r25, r1
    8dbc:	10 f4       	brcc	.+4      	; 0x8dc2 <malloc+0xe>
    8dbe:	82 e0       	ldi	r24, 0x02	; 2
    8dc0:	90 e0       	ldi	r25, 0x00	; 0
    8dc2:	e0 91 3d 0e 	lds	r30, 0x0E3D
    8dc6:	f0 91 3e 0e 	lds	r31, 0x0E3E
    8dca:	20 e0       	ldi	r18, 0x00	; 0
    8dcc:	30 e0       	ldi	r19, 0x00	; 0
    8dce:	c0 e0       	ldi	r28, 0x00	; 0
    8dd0:	d0 e0       	ldi	r29, 0x00	; 0
    8dd2:	30 97       	sbiw	r30, 0x00	; 0
    8dd4:	11 f1       	breq	.+68     	; 0x8e1a <malloc+0x66>
    8dd6:	40 81       	ld	r20, Z
    8dd8:	51 81       	ldd	r21, Z+1	; 0x01
    8dda:	48 17       	cp	r20, r24
    8ddc:	59 07       	cpc	r21, r25
    8dde:	c0 f0       	brcs	.+48     	; 0x8e10 <malloc+0x5c>
    8de0:	48 17       	cp	r20, r24
    8de2:	59 07       	cpc	r21, r25
    8de4:	61 f4       	brne	.+24     	; 0x8dfe <malloc+0x4a>
    8de6:	82 81       	ldd	r24, Z+2	; 0x02
    8de8:	93 81       	ldd	r25, Z+3	; 0x03
    8dea:	20 97       	sbiw	r28, 0x00	; 0
    8dec:	19 f0       	breq	.+6      	; 0x8df4 <malloc+0x40>
    8dee:	9b 83       	std	Y+3, r25	; 0x03
    8df0:	8a 83       	std	Y+2, r24	; 0x02
    8df2:	2b c0       	rjmp	.+86     	; 0x8e4a <malloc+0x96>
    8df4:	90 93 3e 0e 	sts	0x0E3E, r25
    8df8:	80 93 3d 0e 	sts	0x0E3D, r24
    8dfc:	26 c0       	rjmp	.+76     	; 0x8e4a <malloc+0x96>
    8dfe:	21 15       	cp	r18, r1
    8e00:	31 05       	cpc	r19, r1
    8e02:	19 f0       	breq	.+6      	; 0x8e0a <malloc+0x56>
    8e04:	42 17       	cp	r20, r18
    8e06:	53 07       	cpc	r21, r19
    8e08:	18 f4       	brcc	.+6      	; 0x8e10 <malloc+0x5c>
    8e0a:	9a 01       	movw	r18, r20
    8e0c:	be 01       	movw	r22, r28
    8e0e:	df 01       	movw	r26, r30
    8e10:	ef 01       	movw	r28, r30
    8e12:	02 80       	ldd	r0, Z+2	; 0x02
    8e14:	f3 81       	ldd	r31, Z+3	; 0x03
    8e16:	e0 2d       	mov	r30, r0
    8e18:	dc cf       	rjmp	.-72     	; 0x8dd2 <malloc+0x1e>
    8e1a:	21 15       	cp	r18, r1
    8e1c:	31 05       	cpc	r19, r1
    8e1e:	09 f1       	breq	.+66     	; 0x8e62 <malloc+0xae>
    8e20:	28 1b       	sub	r18, r24
    8e22:	39 0b       	sbc	r19, r25
    8e24:	24 30       	cpi	r18, 0x04	; 4
    8e26:	31 05       	cpc	r19, r1
    8e28:	90 f4       	brcc	.+36     	; 0x8e4e <malloc+0x9a>
    8e2a:	12 96       	adiw	r26, 0x02	; 2
    8e2c:	8d 91       	ld	r24, X+
    8e2e:	9c 91       	ld	r25, X
    8e30:	13 97       	sbiw	r26, 0x03	; 3
    8e32:	61 15       	cp	r22, r1
    8e34:	71 05       	cpc	r23, r1
    8e36:	21 f0       	breq	.+8      	; 0x8e40 <malloc+0x8c>
    8e38:	fb 01       	movw	r30, r22
    8e3a:	93 83       	std	Z+3, r25	; 0x03
    8e3c:	82 83       	std	Z+2, r24	; 0x02
    8e3e:	04 c0       	rjmp	.+8      	; 0x8e48 <malloc+0x94>
    8e40:	90 93 3e 0e 	sts	0x0E3E, r25
    8e44:	80 93 3d 0e 	sts	0x0E3D, r24
    8e48:	fd 01       	movw	r30, r26
    8e4a:	32 96       	adiw	r30, 0x02	; 2
    8e4c:	44 c0       	rjmp	.+136    	; 0x8ed6 <malloc+0x122>
    8e4e:	fd 01       	movw	r30, r26
    8e50:	e2 0f       	add	r30, r18
    8e52:	f3 1f       	adc	r31, r19
    8e54:	81 93       	st	Z+, r24
    8e56:	91 93       	st	Z+, r25
    8e58:	22 50       	subi	r18, 0x02	; 2
    8e5a:	31 09       	sbc	r19, r1
    8e5c:	2d 93       	st	X+, r18
    8e5e:	3c 93       	st	X, r19
    8e60:	3a c0       	rjmp	.+116    	; 0x8ed6 <malloc+0x122>
    8e62:	20 91 3b 0e 	lds	r18, 0x0E3B
    8e66:	30 91 3c 0e 	lds	r19, 0x0E3C
    8e6a:	23 2b       	or	r18, r19
    8e6c:	41 f4       	brne	.+16     	; 0x8e7e <malloc+0xca>
    8e6e:	20 91 02 01 	lds	r18, 0x0102
    8e72:	30 91 03 01 	lds	r19, 0x0103
    8e76:	30 93 3c 0e 	sts	0x0E3C, r19
    8e7a:	20 93 3b 0e 	sts	0x0E3B, r18
    8e7e:	20 91 00 01 	lds	r18, 0x0100
    8e82:	30 91 01 01 	lds	r19, 0x0101
    8e86:	21 15       	cp	r18, r1
    8e88:	31 05       	cpc	r19, r1
    8e8a:	41 f4       	brne	.+16     	; 0x8e9c <malloc+0xe8>
    8e8c:	2d b7       	in	r18, 0x3d	; 61
    8e8e:	3e b7       	in	r19, 0x3e	; 62
    8e90:	40 91 04 01 	lds	r20, 0x0104
    8e94:	50 91 05 01 	lds	r21, 0x0105
    8e98:	24 1b       	sub	r18, r20
    8e9a:	35 0b       	sbc	r19, r21
    8e9c:	e0 91 3b 0e 	lds	r30, 0x0E3B
    8ea0:	f0 91 3c 0e 	lds	r31, 0x0E3C
    8ea4:	e2 17       	cp	r30, r18
    8ea6:	f3 07       	cpc	r31, r19
    8ea8:	a0 f4       	brcc	.+40     	; 0x8ed2 <malloc+0x11e>
    8eaa:	2e 1b       	sub	r18, r30
    8eac:	3f 0b       	sbc	r19, r31
    8eae:	28 17       	cp	r18, r24
    8eb0:	39 07       	cpc	r19, r25
    8eb2:	78 f0       	brcs	.+30     	; 0x8ed2 <malloc+0x11e>
    8eb4:	ac 01       	movw	r20, r24
    8eb6:	4e 5f       	subi	r20, 0xFE	; 254
    8eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    8eba:	24 17       	cp	r18, r20
    8ebc:	35 07       	cpc	r19, r21
    8ebe:	48 f0       	brcs	.+18     	; 0x8ed2 <malloc+0x11e>
    8ec0:	4e 0f       	add	r20, r30
    8ec2:	5f 1f       	adc	r21, r31
    8ec4:	50 93 3c 0e 	sts	0x0E3C, r21
    8ec8:	40 93 3b 0e 	sts	0x0E3B, r20
    8ecc:	81 93       	st	Z+, r24
    8ece:	91 93       	st	Z+, r25
    8ed0:	02 c0       	rjmp	.+4      	; 0x8ed6 <malloc+0x122>
    8ed2:	e0 e0       	ldi	r30, 0x00	; 0
    8ed4:	f0 e0       	ldi	r31, 0x00	; 0
    8ed6:	cf 01       	movw	r24, r30
    8ed8:	df 91       	pop	r29
    8eda:	cf 91       	pop	r28
    8edc:	08 95       	ret

00008ede <free>:
    8ede:	0f 93       	push	r16
    8ee0:	1f 93       	push	r17
    8ee2:	cf 93       	push	r28
    8ee4:	df 93       	push	r29
    8ee6:	00 97       	sbiw	r24, 0x00	; 0
    8ee8:	09 f4       	brne	.+2      	; 0x8eec <free+0xe>
    8eea:	8c c0       	rjmp	.+280    	; 0x9004 <free+0x126>
    8eec:	fc 01       	movw	r30, r24
    8eee:	32 97       	sbiw	r30, 0x02	; 2
    8ef0:	13 82       	std	Z+3, r1	; 0x03
    8ef2:	12 82       	std	Z+2, r1	; 0x02
    8ef4:	00 91 3d 0e 	lds	r16, 0x0E3D
    8ef8:	10 91 3e 0e 	lds	r17, 0x0E3E
    8efc:	01 15       	cp	r16, r1
    8efe:	11 05       	cpc	r17, r1
    8f00:	81 f4       	brne	.+32     	; 0x8f22 <free+0x44>
    8f02:	20 81       	ld	r18, Z
    8f04:	31 81       	ldd	r19, Z+1	; 0x01
    8f06:	82 0f       	add	r24, r18
    8f08:	93 1f       	adc	r25, r19
    8f0a:	20 91 3b 0e 	lds	r18, 0x0E3B
    8f0e:	30 91 3c 0e 	lds	r19, 0x0E3C
    8f12:	28 17       	cp	r18, r24
    8f14:	39 07       	cpc	r19, r25
    8f16:	79 f5       	brne	.+94     	; 0x8f76 <free+0x98>
    8f18:	f0 93 3c 0e 	sts	0x0E3C, r31
    8f1c:	e0 93 3b 0e 	sts	0x0E3B, r30
    8f20:	71 c0       	rjmp	.+226    	; 0x9004 <free+0x126>
    8f22:	d8 01       	movw	r26, r16
    8f24:	40 e0       	ldi	r20, 0x00	; 0
    8f26:	50 e0       	ldi	r21, 0x00	; 0
    8f28:	ae 17       	cp	r26, r30
    8f2a:	bf 07       	cpc	r27, r31
    8f2c:	50 f4       	brcc	.+20     	; 0x8f42 <free+0x64>
    8f2e:	12 96       	adiw	r26, 0x02	; 2
    8f30:	2d 91       	ld	r18, X+
    8f32:	3c 91       	ld	r19, X
    8f34:	13 97       	sbiw	r26, 0x03	; 3
    8f36:	ad 01       	movw	r20, r26
    8f38:	21 15       	cp	r18, r1
    8f3a:	31 05       	cpc	r19, r1
    8f3c:	09 f1       	breq	.+66     	; 0x8f80 <free+0xa2>
    8f3e:	d9 01       	movw	r26, r18
    8f40:	f3 cf       	rjmp	.-26     	; 0x8f28 <free+0x4a>
    8f42:	9d 01       	movw	r18, r26
    8f44:	da 01       	movw	r26, r20
    8f46:	33 83       	std	Z+3, r19	; 0x03
    8f48:	22 83       	std	Z+2, r18	; 0x02
    8f4a:	60 81       	ld	r22, Z
    8f4c:	71 81       	ldd	r23, Z+1	; 0x01
    8f4e:	86 0f       	add	r24, r22
    8f50:	97 1f       	adc	r25, r23
    8f52:	82 17       	cp	r24, r18
    8f54:	93 07       	cpc	r25, r19
    8f56:	69 f4       	brne	.+26     	; 0x8f72 <free+0x94>
    8f58:	ec 01       	movw	r28, r24
    8f5a:	28 81       	ld	r18, Y
    8f5c:	39 81       	ldd	r19, Y+1	; 0x01
    8f5e:	26 0f       	add	r18, r22
    8f60:	37 1f       	adc	r19, r23
    8f62:	2e 5f       	subi	r18, 0xFE	; 254
    8f64:	3f 4f       	sbci	r19, 0xFF	; 255
    8f66:	31 83       	std	Z+1, r19	; 0x01
    8f68:	20 83       	st	Z, r18
    8f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    8f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    8f6e:	93 83       	std	Z+3, r25	; 0x03
    8f70:	82 83       	std	Z+2, r24	; 0x02
    8f72:	45 2b       	or	r20, r21
    8f74:	29 f4       	brne	.+10     	; 0x8f80 <free+0xa2>
    8f76:	f0 93 3e 0e 	sts	0x0E3E, r31
    8f7a:	e0 93 3d 0e 	sts	0x0E3D, r30
    8f7e:	42 c0       	rjmp	.+132    	; 0x9004 <free+0x126>
    8f80:	13 96       	adiw	r26, 0x03	; 3
    8f82:	fc 93       	st	X, r31
    8f84:	ee 93       	st	-X, r30
    8f86:	12 97       	sbiw	r26, 0x02	; 2
    8f88:	ed 01       	movw	r28, r26
    8f8a:	49 91       	ld	r20, Y+
    8f8c:	59 91       	ld	r21, Y+
    8f8e:	9e 01       	movw	r18, r28
    8f90:	24 0f       	add	r18, r20
    8f92:	35 1f       	adc	r19, r21
    8f94:	e2 17       	cp	r30, r18
    8f96:	f3 07       	cpc	r31, r19
    8f98:	71 f4       	brne	.+28     	; 0x8fb6 <free+0xd8>
    8f9a:	80 81       	ld	r24, Z
    8f9c:	91 81       	ldd	r25, Z+1	; 0x01
    8f9e:	84 0f       	add	r24, r20
    8fa0:	95 1f       	adc	r25, r21
    8fa2:	02 96       	adiw	r24, 0x02	; 2
    8fa4:	11 96       	adiw	r26, 0x01	; 1
    8fa6:	9c 93       	st	X, r25
    8fa8:	8e 93       	st	-X, r24
    8faa:	82 81       	ldd	r24, Z+2	; 0x02
    8fac:	93 81       	ldd	r25, Z+3	; 0x03
    8fae:	13 96       	adiw	r26, 0x03	; 3
    8fb0:	9c 93       	st	X, r25
    8fb2:	8e 93       	st	-X, r24
    8fb4:	12 97       	sbiw	r26, 0x02	; 2
    8fb6:	e0 e0       	ldi	r30, 0x00	; 0
    8fb8:	f0 e0       	ldi	r31, 0x00	; 0
    8fba:	d8 01       	movw	r26, r16
    8fbc:	12 96       	adiw	r26, 0x02	; 2
    8fbe:	8d 91       	ld	r24, X+
    8fc0:	9c 91       	ld	r25, X
    8fc2:	13 97       	sbiw	r26, 0x03	; 3
    8fc4:	00 97       	sbiw	r24, 0x00	; 0
    8fc6:	19 f0       	breq	.+6      	; 0x8fce <free+0xf0>
    8fc8:	f8 01       	movw	r30, r16
    8fca:	8c 01       	movw	r16, r24
    8fcc:	f6 cf       	rjmp	.-20     	; 0x8fba <free+0xdc>
    8fce:	8d 91       	ld	r24, X+
    8fd0:	9c 91       	ld	r25, X
    8fd2:	98 01       	movw	r18, r16
    8fd4:	2e 5f       	subi	r18, 0xFE	; 254
    8fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    8fd8:	82 0f       	add	r24, r18
    8fda:	93 1f       	adc	r25, r19
    8fdc:	20 91 3b 0e 	lds	r18, 0x0E3B
    8fe0:	30 91 3c 0e 	lds	r19, 0x0E3C
    8fe4:	28 17       	cp	r18, r24
    8fe6:	39 07       	cpc	r19, r25
    8fe8:	69 f4       	brne	.+26     	; 0x9004 <free+0x126>
    8fea:	30 97       	sbiw	r30, 0x00	; 0
    8fec:	29 f4       	brne	.+10     	; 0x8ff8 <free+0x11a>
    8fee:	10 92 3e 0e 	sts	0x0E3E, r1
    8ff2:	10 92 3d 0e 	sts	0x0E3D, r1
    8ff6:	02 c0       	rjmp	.+4      	; 0x8ffc <free+0x11e>
    8ff8:	13 82       	std	Z+3, r1	; 0x03
    8ffa:	12 82       	std	Z+2, r1	; 0x02
    8ffc:	10 93 3c 0e 	sts	0x0E3C, r17
    9000:	00 93 3b 0e 	sts	0x0E3B, r16
    9004:	df 91       	pop	r29
    9006:	cf 91       	pop	r28
    9008:	1f 91       	pop	r17
    900a:	0f 91       	pop	r16
    900c:	08 95       	ret

0000900e <__ftoa_engine>:
    900e:	28 30       	cpi	r18, 0x08	; 8
    9010:	08 f0       	brcs	.+2      	; 0x9014 <__ftoa_engine+0x6>
    9012:	27 e0       	ldi	r18, 0x07	; 7
    9014:	33 27       	eor	r19, r19
    9016:	da 01       	movw	r26, r20
    9018:	99 0f       	add	r25, r25
    901a:	31 1d       	adc	r19, r1
    901c:	87 fd       	sbrc	r24, 7
    901e:	91 60       	ori	r25, 0x01	; 1
    9020:	00 96       	adiw	r24, 0x00	; 0
    9022:	61 05       	cpc	r22, r1
    9024:	71 05       	cpc	r23, r1
    9026:	39 f4       	brne	.+14     	; 0x9036 <__ftoa_engine+0x28>
    9028:	32 60       	ori	r19, 0x02	; 2
    902a:	2e 5f       	subi	r18, 0xFE	; 254
    902c:	3d 93       	st	X+, r19
    902e:	30 e3       	ldi	r19, 0x30	; 48
    9030:	2a 95       	dec	r18
    9032:	e1 f7       	brne	.-8      	; 0x902c <__ftoa_engine+0x1e>
    9034:	08 95       	ret
    9036:	9f 3f       	cpi	r25, 0xFF	; 255
    9038:	30 f0       	brcs	.+12     	; 0x9046 <__ftoa_engine+0x38>
    903a:	80 38       	cpi	r24, 0x80	; 128
    903c:	71 05       	cpc	r23, r1
    903e:	61 05       	cpc	r22, r1
    9040:	09 f0       	breq	.+2      	; 0x9044 <__ftoa_engine+0x36>
    9042:	3c 5f       	subi	r19, 0xFC	; 252
    9044:	3c 5f       	subi	r19, 0xFC	; 252
    9046:	3d 93       	st	X+, r19
    9048:	91 30       	cpi	r25, 0x01	; 1
    904a:	08 f0       	brcs	.+2      	; 0x904e <__ftoa_engine+0x40>
    904c:	80 68       	ori	r24, 0x80	; 128
    904e:	91 1d       	adc	r25, r1
    9050:	df 93       	push	r29
    9052:	cf 93       	push	r28
    9054:	1f 93       	push	r17
    9056:	0f 93       	push	r16
    9058:	ff 92       	push	r15
    905a:	ef 92       	push	r14
    905c:	19 2f       	mov	r17, r25
    905e:	98 7f       	andi	r25, 0xF8	; 248
    9060:	96 95       	lsr	r25
    9062:	e9 2f       	mov	r30, r25
    9064:	96 95       	lsr	r25
    9066:	96 95       	lsr	r25
    9068:	e9 0f       	add	r30, r25
    906a:	ff 27       	eor	r31, r31
    906c:	e2 5f       	subi	r30, 0xF2	; 242
    906e:	f9 4f       	sbci	r31, 0xF9	; 249
    9070:	99 27       	eor	r25, r25
    9072:	33 27       	eor	r19, r19
    9074:	ee 24       	eor	r14, r14
    9076:	ff 24       	eor	r15, r15
    9078:	a7 01       	movw	r20, r14
    907a:	e7 01       	movw	r28, r14
    907c:	05 90       	lpm	r0, Z+
    907e:	08 94       	sec
    9080:	07 94       	ror	r0
    9082:	28 f4       	brcc	.+10     	; 0x908e <__ftoa_engine+0x80>
    9084:	36 0f       	add	r19, r22
    9086:	e7 1e       	adc	r14, r23
    9088:	f8 1e       	adc	r15, r24
    908a:	49 1f       	adc	r20, r25
    908c:	51 1d       	adc	r21, r1
    908e:	66 0f       	add	r22, r22
    9090:	77 1f       	adc	r23, r23
    9092:	88 1f       	adc	r24, r24
    9094:	99 1f       	adc	r25, r25
    9096:	06 94       	lsr	r0
    9098:	a1 f7       	brne	.-24     	; 0x9082 <__ftoa_engine+0x74>
    909a:	05 90       	lpm	r0, Z+
    909c:	07 94       	ror	r0
    909e:	28 f4       	brcc	.+10     	; 0x90aa <__ftoa_engine+0x9c>
    90a0:	e7 0e       	add	r14, r23
    90a2:	f8 1e       	adc	r15, r24
    90a4:	49 1f       	adc	r20, r25
    90a6:	56 1f       	adc	r21, r22
    90a8:	c1 1d       	adc	r28, r1
    90aa:	77 0f       	add	r23, r23
    90ac:	88 1f       	adc	r24, r24
    90ae:	99 1f       	adc	r25, r25
    90b0:	66 1f       	adc	r22, r22
    90b2:	06 94       	lsr	r0
    90b4:	a1 f7       	brne	.-24     	; 0x909e <__ftoa_engine+0x90>
    90b6:	05 90       	lpm	r0, Z+
    90b8:	07 94       	ror	r0
    90ba:	28 f4       	brcc	.+10     	; 0x90c6 <__ftoa_engine+0xb8>
    90bc:	f8 0e       	add	r15, r24
    90be:	49 1f       	adc	r20, r25
    90c0:	56 1f       	adc	r21, r22
    90c2:	c7 1f       	adc	r28, r23
    90c4:	d1 1d       	adc	r29, r1
    90c6:	88 0f       	add	r24, r24
    90c8:	99 1f       	adc	r25, r25
    90ca:	66 1f       	adc	r22, r22
    90cc:	77 1f       	adc	r23, r23
    90ce:	06 94       	lsr	r0
    90d0:	a1 f7       	brne	.-24     	; 0x90ba <__ftoa_engine+0xac>
    90d2:	05 90       	lpm	r0, Z+
    90d4:	07 94       	ror	r0
    90d6:	20 f4       	brcc	.+8      	; 0x90e0 <__ftoa_engine+0xd2>
    90d8:	49 0f       	add	r20, r25
    90da:	56 1f       	adc	r21, r22
    90dc:	c7 1f       	adc	r28, r23
    90de:	d8 1f       	adc	r29, r24
    90e0:	99 0f       	add	r25, r25
    90e2:	66 1f       	adc	r22, r22
    90e4:	77 1f       	adc	r23, r23
    90e6:	88 1f       	adc	r24, r24
    90e8:	06 94       	lsr	r0
    90ea:	a9 f7       	brne	.-22     	; 0x90d6 <__ftoa_engine+0xc8>
    90ec:	84 91       	lpm	r24, Z
    90ee:	10 95       	com	r17
    90f0:	17 70       	andi	r17, 0x07	; 7
    90f2:	41 f0       	breq	.+16     	; 0x9104 <__ftoa_engine+0xf6>
    90f4:	d6 95       	lsr	r29
    90f6:	c7 95       	ror	r28
    90f8:	57 95       	ror	r21
    90fa:	47 95       	ror	r20
    90fc:	f7 94       	ror	r15
    90fe:	e7 94       	ror	r14
    9100:	1a 95       	dec	r17
    9102:	c1 f7       	brne	.-16     	; 0x90f4 <__ftoa_engine+0xe6>
    9104:	e4 eb       	ldi	r30, 0xB4	; 180
    9106:	f5 e0       	ldi	r31, 0x05	; 5
    9108:	68 94       	set
    910a:	15 90       	lpm	r1, Z+
    910c:	15 91       	lpm	r17, Z+
    910e:	35 91       	lpm	r19, Z+
    9110:	65 91       	lpm	r22, Z+
    9112:	95 91       	lpm	r25, Z+
    9114:	05 90       	lpm	r0, Z+
    9116:	7f e2       	ldi	r23, 0x2F	; 47
    9118:	73 95       	inc	r23
    911a:	e1 18       	sub	r14, r1
    911c:	f1 0a       	sbc	r15, r17
    911e:	43 0b       	sbc	r20, r19
    9120:	56 0b       	sbc	r21, r22
    9122:	c9 0b       	sbc	r28, r25
    9124:	d0 09       	sbc	r29, r0
    9126:	c0 f7       	brcc	.-16     	; 0x9118 <__ftoa_engine+0x10a>
    9128:	e1 0c       	add	r14, r1
    912a:	f1 1e       	adc	r15, r17
    912c:	43 1f       	adc	r20, r19
    912e:	56 1f       	adc	r21, r22
    9130:	c9 1f       	adc	r28, r25
    9132:	d0 1d       	adc	r29, r0
    9134:	7e f4       	brtc	.+30     	; 0x9154 <__ftoa_engine+0x146>
    9136:	70 33       	cpi	r23, 0x30	; 48
    9138:	11 f4       	brne	.+4      	; 0x913e <__ftoa_engine+0x130>
    913a:	8a 95       	dec	r24
    913c:	e6 cf       	rjmp	.-52     	; 0x910a <__ftoa_engine+0xfc>
    913e:	e8 94       	clt
    9140:	01 50       	subi	r16, 0x01	; 1
    9142:	30 f0       	brcs	.+12     	; 0x9150 <__ftoa_engine+0x142>
    9144:	08 0f       	add	r16, r24
    9146:	0a f4       	brpl	.+2      	; 0x914a <__ftoa_engine+0x13c>
    9148:	00 27       	eor	r16, r16
    914a:	02 17       	cp	r16, r18
    914c:	08 f4       	brcc	.+2      	; 0x9150 <__ftoa_engine+0x142>
    914e:	20 2f       	mov	r18, r16
    9150:	23 95       	inc	r18
    9152:	02 2f       	mov	r16, r18
    9154:	7a 33       	cpi	r23, 0x3A	; 58
    9156:	28 f0       	brcs	.+10     	; 0x9162 <__ftoa_engine+0x154>
    9158:	79 e3       	ldi	r23, 0x39	; 57
    915a:	7d 93       	st	X+, r23
    915c:	2a 95       	dec	r18
    915e:	e9 f7       	brne	.-6      	; 0x915a <__ftoa_engine+0x14c>
    9160:	10 c0       	rjmp	.+32     	; 0x9182 <__ftoa_engine+0x174>
    9162:	7d 93       	st	X+, r23
    9164:	2a 95       	dec	r18
    9166:	89 f6       	brne	.-94     	; 0x910a <__ftoa_engine+0xfc>
    9168:	06 94       	lsr	r0
    916a:	97 95       	ror	r25
    916c:	67 95       	ror	r22
    916e:	37 95       	ror	r19
    9170:	17 95       	ror	r17
    9172:	17 94       	ror	r1
    9174:	e1 18       	sub	r14, r1
    9176:	f1 0a       	sbc	r15, r17
    9178:	43 0b       	sbc	r20, r19
    917a:	56 0b       	sbc	r21, r22
    917c:	c9 0b       	sbc	r28, r25
    917e:	d0 09       	sbc	r29, r0
    9180:	98 f0       	brcs	.+38     	; 0x91a8 <__ftoa_engine+0x19a>
    9182:	23 95       	inc	r18
    9184:	7e 91       	ld	r23, -X
    9186:	73 95       	inc	r23
    9188:	7a 33       	cpi	r23, 0x3A	; 58
    918a:	08 f0       	brcs	.+2      	; 0x918e <__ftoa_engine+0x180>
    918c:	70 e3       	ldi	r23, 0x30	; 48
    918e:	7c 93       	st	X, r23
    9190:	20 13       	cpse	r18, r16
    9192:	b8 f7       	brcc	.-18     	; 0x9182 <__ftoa_engine+0x174>
    9194:	7e 91       	ld	r23, -X
    9196:	70 61       	ori	r23, 0x10	; 16
    9198:	7d 93       	st	X+, r23
    919a:	30 f0       	brcs	.+12     	; 0x91a8 <__ftoa_engine+0x19a>
    919c:	83 95       	inc	r24
    919e:	71 e3       	ldi	r23, 0x31	; 49
    91a0:	7d 93       	st	X+, r23
    91a2:	70 e3       	ldi	r23, 0x30	; 48
    91a4:	2a 95       	dec	r18
    91a6:	e1 f7       	brne	.-8      	; 0x91a0 <__ftoa_engine+0x192>
    91a8:	11 24       	eor	r1, r1
    91aa:	ef 90       	pop	r14
    91ac:	ff 90       	pop	r15
    91ae:	0f 91       	pop	r16
    91b0:	1f 91       	pop	r17
    91b2:	cf 91       	pop	r28
    91b4:	df 91       	pop	r29
    91b6:	99 27       	eor	r25, r25
    91b8:	87 fd       	sbrc	r24, 7
    91ba:	90 95       	com	r25
    91bc:	08 95       	ret

000091be <strnlen_P>:
    91be:	fc 01       	movw	r30, r24
    91c0:	05 90       	lpm	r0, Z+
    91c2:	61 50       	subi	r22, 0x01	; 1
    91c4:	70 40       	sbci	r23, 0x00	; 0
    91c6:	01 10       	cpse	r0, r1
    91c8:	d8 f7       	brcc	.-10     	; 0x91c0 <strnlen_P+0x2>
    91ca:	80 95       	com	r24
    91cc:	90 95       	com	r25
    91ce:	8e 0f       	add	r24, r30
    91d0:	9f 1f       	adc	r25, r31
    91d2:	08 95       	ret

000091d4 <strnlen>:
    91d4:	fc 01       	movw	r30, r24
    91d6:	61 50       	subi	r22, 0x01	; 1
    91d8:	70 40       	sbci	r23, 0x00	; 0
    91da:	01 90       	ld	r0, Z+
    91dc:	01 10       	cpse	r0, r1
    91de:	d8 f7       	brcc	.-10     	; 0x91d6 <strnlen+0x2>
    91e0:	80 95       	com	r24
    91e2:	90 95       	com	r25
    91e4:	8e 0f       	add	r24, r30
    91e6:	9f 1f       	adc	r25, r31
    91e8:	08 95       	ret

000091ea <fputc>:
    91ea:	0f 93       	push	r16
    91ec:	1f 93       	push	r17
    91ee:	cf 93       	push	r28
    91f0:	df 93       	push	r29
    91f2:	fb 01       	movw	r30, r22
    91f4:	23 81       	ldd	r18, Z+3	; 0x03
    91f6:	21 fd       	sbrc	r18, 1
    91f8:	03 c0       	rjmp	.+6      	; 0x9200 <fputc+0x16>
    91fa:	8f ef       	ldi	r24, 0xFF	; 255
    91fc:	9f ef       	ldi	r25, 0xFF	; 255
    91fe:	28 c0       	rjmp	.+80     	; 0x9250 <fputc+0x66>
    9200:	22 ff       	sbrs	r18, 2
    9202:	16 c0       	rjmp	.+44     	; 0x9230 <fputc+0x46>
    9204:	46 81       	ldd	r20, Z+6	; 0x06
    9206:	57 81       	ldd	r21, Z+7	; 0x07
    9208:	24 81       	ldd	r18, Z+4	; 0x04
    920a:	35 81       	ldd	r19, Z+5	; 0x05
    920c:	42 17       	cp	r20, r18
    920e:	53 07       	cpc	r21, r19
    9210:	44 f4       	brge	.+16     	; 0x9222 <fputc+0x38>
    9212:	a0 81       	ld	r26, Z
    9214:	b1 81       	ldd	r27, Z+1	; 0x01
    9216:	9d 01       	movw	r18, r26
    9218:	2f 5f       	subi	r18, 0xFF	; 255
    921a:	3f 4f       	sbci	r19, 0xFF	; 255
    921c:	31 83       	std	Z+1, r19	; 0x01
    921e:	20 83       	st	Z, r18
    9220:	8c 93       	st	X, r24
    9222:	26 81       	ldd	r18, Z+6	; 0x06
    9224:	37 81       	ldd	r19, Z+7	; 0x07
    9226:	2f 5f       	subi	r18, 0xFF	; 255
    9228:	3f 4f       	sbci	r19, 0xFF	; 255
    922a:	37 83       	std	Z+7, r19	; 0x07
    922c:	26 83       	std	Z+6, r18	; 0x06
    922e:	10 c0       	rjmp	.+32     	; 0x9250 <fputc+0x66>
    9230:	eb 01       	movw	r28, r22
    9232:	09 2f       	mov	r16, r25
    9234:	18 2f       	mov	r17, r24
    9236:	00 84       	ldd	r0, Z+8	; 0x08
    9238:	f1 85       	ldd	r31, Z+9	; 0x09
    923a:	e0 2d       	mov	r30, r0
    923c:	09 95       	icall
    923e:	89 2b       	or	r24, r25
    9240:	e1 f6       	brne	.-72     	; 0x91fa <fputc+0x10>
    9242:	8e 81       	ldd	r24, Y+6	; 0x06
    9244:	9f 81       	ldd	r25, Y+7	; 0x07
    9246:	01 96       	adiw	r24, 0x01	; 1
    9248:	9f 83       	std	Y+7, r25	; 0x07
    924a:	8e 83       	std	Y+6, r24	; 0x06
    924c:	81 2f       	mov	r24, r17
    924e:	90 2f       	mov	r25, r16
    9250:	df 91       	pop	r29
    9252:	cf 91       	pop	r28
    9254:	1f 91       	pop	r17
    9256:	0f 91       	pop	r16
    9258:	08 95       	ret

0000925a <sprintf>:
    925a:	0f 93       	push	r16
    925c:	1f 93       	push	r17
    925e:	cf 93       	push	r28
    9260:	df 93       	push	r29
    9262:	cd b7       	in	r28, 0x3d	; 61
    9264:	de b7       	in	r29, 0x3e	; 62
    9266:	2e 97       	sbiw	r28, 0x0e	; 14
    9268:	0f b6       	in	r0, 0x3f	; 63
    926a:	f8 94       	cli
    926c:	de bf       	out	0x3e, r29	; 62
    926e:	0f be       	out	0x3f, r0	; 63
    9270:	cd bf       	out	0x3d, r28	; 61
    9272:	0d 89       	ldd	r16, Y+21	; 0x15
    9274:	1e 89       	ldd	r17, Y+22	; 0x16
    9276:	86 e0       	ldi	r24, 0x06	; 6
    9278:	8c 83       	std	Y+4, r24	; 0x04
    927a:	1a 83       	std	Y+2, r17	; 0x02
    927c:	09 83       	std	Y+1, r16	; 0x01
    927e:	8f ef       	ldi	r24, 0xFF	; 255
    9280:	9f e7       	ldi	r25, 0x7F	; 127
    9282:	9e 83       	std	Y+6, r25	; 0x06
    9284:	8d 83       	std	Y+5, r24	; 0x05
    9286:	ae 01       	movw	r20, r28
    9288:	47 5e       	subi	r20, 0xE7	; 231
    928a:	5f 4f       	sbci	r21, 0xFF	; 255
    928c:	6f 89       	ldd	r22, Y+23	; 0x17
    928e:	78 8d       	ldd	r23, Y+24	; 0x18
    9290:	ce 01       	movw	r24, r28
    9292:	01 96       	adiw	r24, 0x01	; 1
    9294:	92 d9       	rcall	.-3292   	; 0x85ba <vfprintf>
    9296:	2f 81       	ldd	r18, Y+7	; 0x07
    9298:	38 85       	ldd	r19, Y+8	; 0x08
    929a:	f8 01       	movw	r30, r16
    929c:	e2 0f       	add	r30, r18
    929e:	f3 1f       	adc	r31, r19
    92a0:	10 82       	st	Z, r1
    92a2:	2e 96       	adiw	r28, 0x0e	; 14
    92a4:	0f b6       	in	r0, 0x3f	; 63
    92a6:	f8 94       	cli
    92a8:	de bf       	out	0x3e, r29	; 62
    92aa:	0f be       	out	0x3f, r0	; 63
    92ac:	cd bf       	out	0x3d, r28	; 61
    92ae:	df 91       	pop	r29
    92b0:	cf 91       	pop	r28
    92b2:	1f 91       	pop	r17
    92b4:	0f 91       	pop	r16
    92b6:	08 95       	ret

000092b8 <__ultoa_invert>:
    92b8:	fa 01       	movw	r30, r20
    92ba:	aa 27       	eor	r26, r26
    92bc:	28 30       	cpi	r18, 0x08	; 8
    92be:	51 f1       	breq	.+84     	; 0x9314 <__ultoa_invert+0x5c>
    92c0:	20 31       	cpi	r18, 0x10	; 16
    92c2:	81 f1       	breq	.+96     	; 0x9324 <__ultoa_invert+0x6c>
    92c4:	e8 94       	clt
    92c6:	6f 93       	push	r22
    92c8:	6e 7f       	andi	r22, 0xFE	; 254
    92ca:	6e 5f       	subi	r22, 0xFE	; 254
    92cc:	7f 4f       	sbci	r23, 0xFF	; 255
    92ce:	8f 4f       	sbci	r24, 0xFF	; 255
    92d0:	9f 4f       	sbci	r25, 0xFF	; 255
    92d2:	af 4f       	sbci	r26, 0xFF	; 255
    92d4:	b1 e0       	ldi	r27, 0x01	; 1
    92d6:	3e d0       	rcall	.+124    	; 0x9354 <__ultoa_invert+0x9c>
    92d8:	b4 e0       	ldi	r27, 0x04	; 4
    92da:	3c d0       	rcall	.+120    	; 0x9354 <__ultoa_invert+0x9c>
    92dc:	67 0f       	add	r22, r23
    92de:	78 1f       	adc	r23, r24
    92e0:	89 1f       	adc	r24, r25
    92e2:	9a 1f       	adc	r25, r26
    92e4:	a1 1d       	adc	r26, r1
    92e6:	68 0f       	add	r22, r24
    92e8:	79 1f       	adc	r23, r25
    92ea:	8a 1f       	adc	r24, r26
    92ec:	91 1d       	adc	r25, r1
    92ee:	a1 1d       	adc	r26, r1
    92f0:	6a 0f       	add	r22, r26
    92f2:	71 1d       	adc	r23, r1
    92f4:	81 1d       	adc	r24, r1
    92f6:	91 1d       	adc	r25, r1
    92f8:	a1 1d       	adc	r26, r1
    92fa:	20 d0       	rcall	.+64     	; 0x933c <__ultoa_invert+0x84>
    92fc:	09 f4       	brne	.+2      	; 0x9300 <__ultoa_invert+0x48>
    92fe:	68 94       	set
    9300:	3f 91       	pop	r19
    9302:	2a e0       	ldi	r18, 0x0A	; 10
    9304:	26 9f       	mul	r18, r22
    9306:	11 24       	eor	r1, r1
    9308:	30 19       	sub	r19, r0
    930a:	30 5d       	subi	r19, 0xD0	; 208
    930c:	31 93       	st	Z+, r19
    930e:	de f6       	brtc	.-74     	; 0x92c6 <__ultoa_invert+0xe>
    9310:	cf 01       	movw	r24, r30
    9312:	08 95       	ret
    9314:	46 2f       	mov	r20, r22
    9316:	47 70       	andi	r20, 0x07	; 7
    9318:	40 5d       	subi	r20, 0xD0	; 208
    931a:	41 93       	st	Z+, r20
    931c:	b3 e0       	ldi	r27, 0x03	; 3
    931e:	0f d0       	rcall	.+30     	; 0x933e <__ultoa_invert+0x86>
    9320:	c9 f7       	brne	.-14     	; 0x9314 <__ultoa_invert+0x5c>
    9322:	f6 cf       	rjmp	.-20     	; 0x9310 <__ultoa_invert+0x58>
    9324:	46 2f       	mov	r20, r22
    9326:	4f 70       	andi	r20, 0x0F	; 15
    9328:	40 5d       	subi	r20, 0xD0	; 208
    932a:	4a 33       	cpi	r20, 0x3A	; 58
    932c:	18 f0       	brcs	.+6      	; 0x9334 <__ultoa_invert+0x7c>
    932e:	49 5d       	subi	r20, 0xD9	; 217
    9330:	31 fd       	sbrc	r19, 1
    9332:	40 52       	subi	r20, 0x20	; 32
    9334:	41 93       	st	Z+, r20
    9336:	02 d0       	rcall	.+4      	; 0x933c <__ultoa_invert+0x84>
    9338:	a9 f7       	brne	.-22     	; 0x9324 <__ultoa_invert+0x6c>
    933a:	ea cf       	rjmp	.-44     	; 0x9310 <__ultoa_invert+0x58>
    933c:	b4 e0       	ldi	r27, 0x04	; 4
    933e:	a6 95       	lsr	r26
    9340:	97 95       	ror	r25
    9342:	87 95       	ror	r24
    9344:	77 95       	ror	r23
    9346:	67 95       	ror	r22
    9348:	ba 95       	dec	r27
    934a:	c9 f7       	brne	.-14     	; 0x933e <__ultoa_invert+0x86>
    934c:	00 97       	sbiw	r24, 0x00	; 0
    934e:	61 05       	cpc	r22, r1
    9350:	71 05       	cpc	r23, r1
    9352:	08 95       	ret
    9354:	9b 01       	movw	r18, r22
    9356:	ac 01       	movw	r20, r24
    9358:	0a 2e       	mov	r0, r26
    935a:	06 94       	lsr	r0
    935c:	57 95       	ror	r21
    935e:	47 95       	ror	r20
    9360:	37 95       	ror	r19
    9362:	27 95       	ror	r18
    9364:	ba 95       	dec	r27
    9366:	c9 f7       	brne	.-14     	; 0x935a <__ultoa_invert+0xa2>
    9368:	62 0f       	add	r22, r18
    936a:	73 1f       	adc	r23, r19
    936c:	84 1f       	adc	r24, r20
    936e:	95 1f       	adc	r25, r21
    9370:	a0 1d       	adc	r26, r0
    9372:	08 95       	ret

00009374 <__do_global_dtors>:
    9374:	13 e0       	ldi	r17, 0x03	; 3
    9376:	c8 e5       	ldi	r28, 0x58	; 88
    9378:	d3 e0       	ldi	r29, 0x03	; 3
    937a:	03 c0       	rjmp	.+6      	; 0x9382 <__do_global_dtors+0xe>
    937c:	fe 01       	movw	r30, r28
    937e:	f2 dc       	rcall	.-1564   	; 0x8d64 <__tablejump2__>
    9380:	21 96       	adiw	r28, 0x01	; 1
    9382:	c9 35       	cpi	r28, 0x59	; 89
    9384:	d1 07       	cpc	r29, r17
    9386:	d1 f7       	brne	.-12     	; 0x937c <__do_global_dtors+0x8>
    9388:	f8 94       	cli

0000938a <__stop_program>:
    938a:	ff cf       	rjmp	.-2      	; 0x938a <__stop_program>
