
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800100  00005162  000051f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000597  008002bc  008002bc  000053b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000053b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00005450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000097b8  00000000  00000000  00005840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000191b  00000000  00000000  0000eff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003438  00000000  00000000  00010913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fbc  00000000  00000000  00013d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000137c  00000000  00000000  00014d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000694c  00000000  00000000  00016084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0001c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c9 c2       	rjmp	.+1426   	; 0x594 <__dtors_end>
       2:	00 00       	nop
       4:	f1 c2       	rjmp	.+1506   	; 0x5e8 <__bad_interrupt>
       6:	00 00       	nop
       8:	ef c2       	rjmp	.+1502   	; 0x5e8 <__bad_interrupt>
       a:	00 00       	nop
       c:	ed c2       	rjmp	.+1498   	; 0x5e8 <__bad_interrupt>
       e:	00 00       	nop
      10:	eb c2       	rjmp	.+1494   	; 0x5e8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e9 c2       	rjmp	.+1490   	; 0x5e8 <__bad_interrupt>
      16:	00 00       	nop
      18:	e7 c2       	rjmp	.+1486   	; 0x5e8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e5 c2       	rjmp	.+1482   	; 0x5e8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e3 c2       	rjmp	.+1478   	; 0x5e8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e1 c2       	rjmp	.+1474   	; 0x5e8 <__bad_interrupt>
      26:	00 00       	nop
      28:	df c2       	rjmp	.+1470   	; 0x5e8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__vector_11>
      30:	db c2       	rjmp	.+1462   	; 0x5e8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__vector_13>
      38:	d7 c2       	rjmp	.+1454   	; 0x5e8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c2       	rjmp	.+1450   	; 0x5e8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d3 c2       	rjmp	.+1446   	; 0x5e8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d1 c2       	rjmp	.+1442   	; 0x5e8 <__bad_interrupt>
      46:	00 00       	nop
      48:	cf c2       	rjmp	.+1438   	; 0x5e8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cd c2       	rjmp	.+1434   	; 0x5e8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__vector_20>
      54:	c9 c2       	rjmp	.+1426   	; 0x5e8 <__bad_interrupt>
      56:	00 00       	nop
      58:	c7 c2       	rjmp	.+1422   	; 0x5e8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c5 c2       	rjmp	.+1418   	; 0x5e8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c3 c2       	rjmp	.+1414   	; 0x5e8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c1 c2       	rjmp	.+1410   	; 0x5e8 <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c2       	rjmp	.+1406   	; 0x5e8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	bd c2       	rjmp	.+1402   	; 0x5e8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	bb c2       	rjmp	.+1398   	; 0x5e8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b9 c2       	rjmp	.+1394   	; 0x5e8 <__bad_interrupt>
      76:	00 00       	nop
      78:	b7 c2       	rjmp	.+1390   	; 0x5e8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b5 c2       	rjmp	.+1386   	; 0x5e8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c2       	rjmp	.+1382   	; 0x5e8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b1 c2       	rjmp	.+1378   	; 0x5e8 <__bad_interrupt>
      86:	00 00       	nop
      88:	af c2       	rjmp	.+1374   	; 0x5e8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f 08       	sbc	r6, r15
      8e:	71 08       	sbc	r7, r1
      90:	71 08       	sbc	r7, r1
      92:	71 08       	sbc	r7, r1
      94:	71 08       	sbc	r7, r1
      96:	71 08       	sbc	r7, r1
      98:	71 08       	sbc	r7, r1
      9a:	6d 08       	sbc	r6, r13
      9c:	71 08       	sbc	r7, r1
      9e:	71 08       	sbc	r7, r1
      a0:	71 08       	sbc	r7, r1
      a2:	71 08       	sbc	r7, r1
      a4:	71 08       	sbc	r7, r1
      a6:	74 08       	sbc	r7, r4
      a8:	73 08       	sbc	r7, r3
      aa:	5d 08       	sbc	r5, r13
      ac:	5f 08       	sbc	r5, r15
      ae:	61 08       	sbc	r6, r1
      b0:	63 08       	sbc	r6, r3
      b2:	65 08       	sbc	r6, r5
      b4:	67 08       	sbc	r6, r7
      b6:	69 08       	sbc	r6, r9
      b8:	6b 08       	sbc	r6, r11
      ba:	41 12       	cpse	r4, r17
      bc:	51 12       	cpse	r5, r17
      be:	51 12       	cpse	r5, r17
      c0:	51 12       	cpse	r5, r17
      c2:	51 12       	cpse	r5, r17
      c4:	51 12       	cpse	r5, r17
      c6:	51 12       	cpse	r5, r17
      c8:	51 12       	cpse	r5, r17
      ca:	51 12       	cpse	r5, r17
      cc:	51 12       	cpse	r5, r17
      ce:	51 12       	cpse	r5, r17
      d0:	51 12       	cpse	r5, r17
      d2:	51 12       	cpse	r5, r17
      d4:	51 12       	cpse	r5, r17
      d6:	51 12       	cpse	r5, r17
      d8:	51 12       	cpse	r5, r17
      da:	51 12       	cpse	r5, r17
      dc:	51 12       	cpse	r5, r17
      de:	51 12       	cpse	r5, r17
      e0:	51 12       	cpse	r5, r17
      e2:	51 12       	cpse	r5, r17
      e4:	51 12       	cpse	r5, r17
      e6:	51 12       	cpse	r5, r17
      e8:	51 12       	cpse	r5, r17
      ea:	51 12       	cpse	r5, r17
      ec:	51 12       	cpse	r5, r17
      ee:	51 12       	cpse	r5, r17
      f0:	51 12       	cpse	r5, r17
      f2:	51 12       	cpse	r5, r17
      f4:	51 12       	cpse	r5, r17
      f6:	51 12       	cpse	r5, r17
      f8:	51 12       	cpse	r5, r17
      fa:	51 12       	cpse	r5, r17
      fc:	51 12       	cpse	r5, r17
      fe:	51 12       	cpse	r5, r17
     100:	51 12       	cpse	r5, r17
     102:	51 12       	cpse	r5, r17
     104:	51 12       	cpse	r5, r17
     106:	51 12       	cpse	r5, r17
     108:	51 12       	cpse	r5, r17
     10a:	51 12       	cpse	r5, r17
     10c:	51 12       	cpse	r5, r17
     10e:	51 12       	cpse	r5, r17
     110:	51 12       	cpse	r5, r17
     112:	51 12       	cpse	r5, r17
     114:	51 12       	cpse	r5, r17
     116:	51 12       	cpse	r5, r17
     118:	51 12       	cpse	r5, r17
     11a:	51 12       	cpse	r5, r17
     11c:	51 12       	cpse	r5, r17
     11e:	51 12       	cpse	r5, r17
     120:	51 12       	cpse	r5, r17
     122:	1d 12       	cpse	r1, r29
     124:	51 12       	cpse	r5, r17
     126:	51 12       	cpse	r5, r17
     128:	51 12       	cpse	r5, r17
     12a:	51 12       	cpse	r5, r17
     12c:	51 12       	cpse	r5, r17
     12e:	51 12       	cpse	r5, r17
     130:	51 12       	cpse	r5, r17
     132:	ea 11       	cpse	r30, r10
     134:	e6 11       	cpse	r30, r6
     136:	51 12       	cpse	r5, r17
     138:	0a 12       	cpse	r0, r26
     13a:	51 12       	cpse	r5, r17
     13c:	51 12       	cpse	r5, r17
     13e:	f7 11       	cpse	r31, r7
     140:	51 12       	cpse	r5, r17
     142:	51 12       	cpse	r5, r17
     144:	32 12       	cpse	r3, r18
     146:	b1 18       	sub	r11, r1
     148:	d7 18       	sub	r13, r7
     14a:	fe 18       	sub	r15, r14
     14c:	26 19       	sub	r18, r6
     14e:	4d 19       	sub	r20, r13
     150:	77 19       	sub	r23, r7
     152:	a0 19       	sub	r26, r0
     154:	ca 19       	sub	r28, r10
     156:	41 1a       	sub	r4, r17
     158:	6b 1a       	sub	r6, r27
     15a:	05 a8       	ldd	r0, Z+53	; 0x35
     15c:	4c cd       	rjmp	.-1384   	; 0xfffffbf6 <__eeprom_end+0xff7efbf6>
     15e:	b2 d4       	rcall	.+2404   	; 0xac4 <_ZN7Display6analogEhhhh+0x11c>
     160:	4e b9       	out	0x0e, r20	; 14
     162:	38 36       	cpi	r19, 0x68	; 104
     164:	a9 02       	muls	r26, r25
     166:	0c 50       	subi	r16, 0x0C	; 12
     168:	b9 91       	ld	r27, Y+
     16a:	86 88       	ldd	r8, Z+22	; 0x16
     16c:	08 3c       	cpi	r16, 0xC8	; 200
     16e:	a6 aa       	std	Z+54, r10	; 0x36
     170:	aa 2a       	or	r10, r26
     172:	be 00       	.word	0x00be	; ????
     174:	00 00       	nop
     176:	80 3f       	cpi	r24, 0xF0	; 240

00000178 <__trampolines_end>:
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	f8 fc       	.word	0xfcf8	; ????
     17c:	fe 1e       	adc	r15, r30
     17e:	07 07       	cpc	r16, r23
     180:	07 07       	cpc	r16, r23
     182:	1e fe       	.word	0xfe1e	; ????
     184:	fc f8       	.word	0xf8fc	; ????
     186:	f0 00       	.word	0x00f0	; ????
     188:	00 07       	cpc	r16, r16
     18a:	0f 3f       	cpi	r16, 0xFF	; 255
     18c:	3f 7c       	andi	r19, 0xCF	; 207
     18e:	70 70       	andi	r23, 0x00	; 0
     190:	70 70       	andi	r23, 0x00	; 0
     192:	7c 3f       	cpi	r23, 0xFC	; 252
     194:	1f 1f       	adc	r17, r31
     196:	07 00       	.word	0x0007	; ????
     198:	00 00       	nop
     19a:	00 06       	cpc	r0, r16
     19c:	07 07       	cpc	r16, r23
     19e:	ff ff       	.word	0xffff	; ????
     1a0:	ff ff       	.word	0xffff	; ????
	...
     1ae:	7f 7f       	andi	r23, 0xFF	; 255
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	00 00       	nop
     1b8:	00 38       	cpi	r16, 0x80	; 128
     1ba:	3c 3e       	cpi	r19, 0xEC	; 236
     1bc:	3e 0f       	add	r19, r30
     1be:	07 07       	cpc	r16, r23
     1c0:	07 cf       	rjmp	.-498    	; 0xffffffd0 <__eeprom_end+0xff7effd0>
     1c2:	ff fe       	.word	0xfeff	; ????
     1c4:	fe 38       	cpi	r31, 0x8E	; 142
     1c6:	00 00       	nop
     1c8:	00 40       	sbci	r16, 0x00	; 0
     1ca:	40 60       	ori	r20, 0x00	; 0
     1cc:	70 78       	andi	r23, 0x80	; 128
     1ce:	7c 7e       	andi	r23, 0xEC	; 236
     1d0:	7f 77       	andi	r23, 0x7F	; 127
     1d2:	73 71       	andi	r23, 0x13	; 19
     1d4:	70 70       	andi	r23, 0x00	; 0
     1d6:	00 00       	nop
     1d8:	00 18       	sub	r0, r0
     1da:	1c 1e       	adc	r1, r28
     1dc:	1e 0f       	add	r17, r30
     1de:	c7 c7       	rjmp	.+3982   	; 0x116e <_ZN7LSM303DC1Ev+0x6>
     1e0:	e7 ff       	sbrs	r30, 7
     1e2:	fe be       	out	0x3e, r15	; 62
     1e4:	9c 00       	.word	0x009c	; ????
     1e6:	00 00       	nop
     1e8:	00 0c       	add	r0, r0
     1ea:	1c 3c       	cpi	r17, 0xCC	; 204
     1ec:	3c 78       	andi	r19, 0x8C	; 140
     1ee:	70 70       	andi	r23, 0x00	; 0
     1f0:	70 79       	andi	r23, 0x90	; 144
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	1f 0f       	add	r17, r31
     1f6:	00 00       	nop
     1f8:	00 00       	nop
     1fa:	80 c0       	rjmp	.+256    	; 0x2fc <_ZL7font5x8+0x44>
     1fc:	e0 70       	andi	r30, 0x00	; 0
     1fe:	38 1c       	adc	r3, r8
     200:	1e ff       	.word	0xff1e	; ????
     202:	ff ff       	.word	0xffff	; ????
     204:	ff 00       	.word	0x00ff	; ????
     206:	00 00       	nop
     208:	06 07       	cpc	r16, r22
     20a:	07 07       	cpc	r16, r23
     20c:	06 06       	cpc	r0, r22
     20e:	06 06       	cpc	r0, r22
     210:	06 7f       	andi	r16, 0xF6	; 246
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	7f 06       	cpc	r7, r31
     216:	06 00       	.word	0x0006	; ????
     218:	00 00       	nop
     21a:	00 00       	nop
     21c:	f0 ff       	sbrs	r31, 0
     21e:	ff ff       	.word	0xffff	; ????
     220:	e7 e7       	ldi	r30, 0x77	; 119
     222:	e7 e7       	ldi	r30, 0x77	; 119
     224:	c7 87       	std	Z+15, r28	; 0x0f
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	38 78       	andi	r19, 0x88	; 136
     22c:	71 70       	andi	r23, 0x01	; 1
     22e:	70 70       	andi	r23, 0x00	; 0
     230:	70 70       	andi	r23, 0x00	; 0
     232:	39 3f       	cpi	r19, 0xF9	; 249
     234:	3f 1f       	adc	r19, r31
     236:	0f 00       	.word	0x000f	; ????
     238:	00 80       	ld	r0, Z
     23a:	e0 f0       	brcs	.+56     	; 0x274 <__trampolines_end+0xfc>
     23c:	f8 fc       	.word	0xfcf8	; ????
     23e:	7f 7f       	andi	r23, 0xFF	; 255
     240:	6f 67       	ori	r22, 0x7F	; 127
     242:	e1 e1       	ldi	r30, 0x11	; 17
     244:	c0 80       	ld	r12, Z
     246:	00 00       	nop
     248:	00 0f       	add	r16, r16
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	3f 78       	andi	r19, 0x8F	; 143
     24e:	70 70       	andi	r23, 0x00	; 0
     250:	70 70       	andi	r23, 0x00	; 0
     252:	78 3f       	cpi	r23, 0xF8	; 248
     254:	3f 1f       	adc	r19, r31
     256:	0f 00       	.word	0x000f	; ????
     258:	00 07       	cpc	r16, r16
     25a:	07 07       	cpc	r16, r23
     25c:	07 07       	cpc	r16, r23
     25e:	c7 e7       	ldi	r28, 0x77	; 119
     260:	f7 ff       	sbrs	r31, 7
     262:	7f 3f       	cpi	r23, 0xFF	; 255
     264:	1f 07       	cpc	r17, r31
     266:	03 01       	movw	r0, r6
     268:	00 20       	and	r0, r0
     26a:	38 7c       	andi	r19, 0xC8	; 200
     26c:	7e 3f       	cpi	r23, 0xFE	; 254
     26e:	0f 07       	cpc	r16, r31
     270:	03 00       	.word	0x0003	; ????
	...
     27a:	00 1c       	adc	r0, r0
     27c:	be fe       	.word	0xfebe	; ????
     27e:	ff e7       	ldi	r31, 0x7F	; 127
     280:	c3 c3       	rjmp	.+1926   	; 0xa08 <_ZN7Display6analogEhhhh+0x60>
     282:	e7 ff       	sbrs	r30, 7
     284:	fe be       	out	0x3e, r15	; 62
     286:	1c 00       	.word	0x001c	; ????
     288:	00 00       	nop
     28a:	0e 3f       	cpi	r16, 0xFE	; 254
     28c:	3f 7f       	andi	r19, 0xFF	; 255
     28e:	71 60       	ori	r23, 0x01	; 1
     290:	60 60       	ori	r22, 0x00	; 0
     292:	71 7f       	andi	r23, 0xF1	; 241
     294:	3f 3f       	cpi	r19, 0xFF	; 255
     296:	0f 00       	.word	0x000f	; ????
     298:	00 78       	andi	r16, 0x80	; 128
     29a:	fc fe       	.word	0xfefc	; ????
     29c:	fe 8f       	std	Y+30, r31	; 0x1e
     29e:	07 07       	cpc	r16, r23
     2a0:	07 07       	cpc	r16, r23
     2a2:	8f fe       	.word	0xfe8f	; ????
     2a4:	fe fc       	.word	0xfcfe	; ????
     2a6:	f8 00       	.word	0x00f8	; ????
     2a8:	00 00       	nop
     2aa:	00 01       	movw	r0, r0
     2ac:	43 43       	sbci	r20, 0x33	; 51
     2ae:	73 7b       	andi	r23, 0xB3	; 179
     2b0:	7f 7f       	andi	r23, 0xFF	; 255
     2b2:	1f 0f       	add	r17, r31
     2b4:	07 03       	mulsu	r16, r23
	...

000002b8 <_ZL7font5x8>:
     2b8:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     2c8:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     2d8:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     2e8:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     2f8:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     308:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     318:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     328:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     338:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     348:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     358:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     368:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     378:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     388:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     398:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     3a8:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     3b8:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     3c8:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     3d8:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     3e8:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     3f8:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     408:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     418:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     428:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     438:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     448:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     458:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     468:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     478:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     488:	00 10 08 08 10 08                                   ......

0000048e <__c.2179>:
     48e:	6e 61 6e 00                                         nan.

00000492 <__c.2177>:
     492:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     4a2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     4b2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     4c2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     4d2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     4e2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     4f2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     502:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     512:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     522:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     532:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     542:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     552:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     562:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     572:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     582:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000590 <__ctors_start>:
     590:	ae 1c       	adc	r10, r14

00000592 <__ctors_end>:
     592:	d5 1c       	adc	r13, r5

00000594 <__dtors_end>:
     594:	11 24       	eor	r1, r1
     596:	1f be       	out	0x3f, r1	; 63
     598:	cf ef       	ldi	r28, 0xFF	; 255
     59a:	d0 e4       	ldi	r29, 0x40	; 64
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	cd bf       	out	0x3d, r28	; 61

000005a0 <__do_copy_data>:
     5a0:	12 e0       	ldi	r17, 0x02	; 2
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	b1 e0       	ldi	r27, 0x01	; 1
     5a6:	e2 e6       	ldi	r30, 0x62	; 98
     5a8:	f1 e5       	ldi	r31, 0x51	; 81
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	0b bf       	out	0x3b, r16	; 59
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__do_copy_data+0x14>
     5b0:	07 90       	elpm	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	ac 3b       	cpi	r26, 0xBC	; 188
     5b6:	b1 07       	cpc	r27, r17
     5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__do_copy_data+0x10>

000005ba <__do_clear_bss>:
     5ba:	28 e0       	ldi	r18, 0x08	; 8
     5bc:	ac eb       	ldi	r26, 0xBC	; 188
     5be:	b2 e0       	ldi	r27, 0x02	; 2
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <.do_clear_bss_start>

000005c2 <.do_clear_bss_loop>:
     5c2:	1d 92       	st	X+, r1

000005c4 <.do_clear_bss_start>:
     5c4:	a3 35       	cpi	r26, 0x53	; 83
     5c6:	b2 07       	cpc	r27, r18
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <.do_clear_bss_loop>

000005ca <__do_global_ctors>:
     5ca:	12 e0       	ldi	r17, 0x02	; 2
     5cc:	c9 ec       	ldi	r28, 0xC9	; 201
     5ce:	d2 e0       	ldi	r29, 0x02	; 2
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <__do_global_ctors+0x10>
     5d2:	21 97       	sbiw	r28, 0x01	; 1
     5d4:	fe 01       	movw	r30, r28
     5d6:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <__tablejump2__>
     5da:	c8 3c       	cpi	r28, 0xC8	; 200
     5dc:	d1 07       	cpc	r29, r17
     5de:	c9 f7       	brne	.-14     	; 0x5d2 <__do_global_ctors+0x8>
     5e0:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <main>
     5e4:	0c 94 a5 28 	jmp	0x514a	; 0x514a <__do_global_dtors>

000005e8 <__bad_interrupt>:
     5e8:	0b cd       	rjmp	.-1514   	; 0x0 <__vectors>

000005ea <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     5ea:	9c 5f       	subi	r25, 0xFC	; 252
     5ec:	5a c4       	rjmp	.+2228   	; 0xea2 <_ZN3I2CD1Ev>
     5ee:	08 95       	ret

000005f0 <_ZN7Display10clearFrameEv>:
     5f0:	fc 01       	movw	r30, r24
     5f2:	9c 5f       	subi	r25, 0xFC	; 252
     5f4:	11 92       	st	Z+, r1
     5f6:	e8 17       	cp	r30, r24
     5f8:	f9 07       	cpc	r31, r25
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <_ZN7Display10clearFrameEv+0x4>
     5fc:	08 95       	ret

000005fe <_ZN7Display15ssd1306_commandEh>:
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	16 2f       	mov	r17, r22
     606:	ec 01       	movw	r28, r24
     608:	dc 5f       	subi	r29, 0xFC	; 252
     60a:	ce 01       	movw	r24, r28
     60c:	4b d4       	rcall	.+2198   	; 0xea4 <_ZN3I2C9twi_startEv>
     60e:	68 e7       	ldi	r22, 0x78	; 120
     610:	ce 01       	movw	r24, r28
     612:	50 d4       	rcall	.+2208   	; 0xeb4 <_ZN3I2C9twi_writeEh>
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	ce 01       	movw	r24, r28
     618:	4d d4       	rcall	.+2202   	; 0xeb4 <_ZN3I2C9twi_writeEh>
     61a:	61 2f       	mov	r22, r17
     61c:	ce 01       	movw	r24, r28
     61e:	4a d4       	rcall	.+2196   	; 0xeb4 <_ZN3I2C9twi_writeEh>
     620:	ce 01       	movw	r24, r28
     622:	44 d4       	rcall	.+2184   	; 0xeac <_ZN3I2C8twi_stopEv>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	08 95       	ret

0000062c <_ZN7Display17InitializeDisplayEv>:
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
     632:	6e ea       	ldi	r22, 0xAE	; 174
     634:	e4 df       	rcall	.-56     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     636:	65 ed       	ldi	r22, 0xD5	; 213
     638:	ce 01       	movw	r24, r28
     63a:	e1 df       	rcall	.-62     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     63c:	60 e8       	ldi	r22, 0x80	; 128
     63e:	ce 01       	movw	r24, r28
     640:	de df       	rcall	.-68     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     642:	68 ea       	ldi	r22, 0xA8	; 168
     644:	ce 01       	movw	r24, r28
     646:	db df       	rcall	.-74     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     648:	6f e3       	ldi	r22, 0x3F	; 63
     64a:	ce 01       	movw	r24, r28
     64c:	d8 df       	rcall	.-80     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     64e:	63 ed       	ldi	r22, 0xD3	; 211
     650:	ce 01       	movw	r24, r28
     652:	d5 df       	rcall	.-86     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	ce 01       	movw	r24, r28
     658:	d2 df       	rcall	.-92     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     65a:	60 e4       	ldi	r22, 0x40	; 64
     65c:	ce 01       	movw	r24, r28
     65e:	cf df       	rcall	.-98     	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     660:	6d e8       	ldi	r22, 0x8D	; 141
     662:	ce 01       	movw	r24, r28
     664:	cc df       	rcall	.-104    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     666:	64 e1       	ldi	r22, 0x14	; 20
     668:	ce 01       	movw	r24, r28
     66a:	c9 df       	rcall	.-110    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     66c:	60 e2       	ldi	r22, 0x20	; 32
     66e:	ce 01       	movw	r24, r28
     670:	c6 df       	rcall	.-116    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	ce 01       	movw	r24, r28
     676:	c3 df       	rcall	.-122    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     678:	61 ea       	ldi	r22, 0xA1	; 161
     67a:	ce 01       	movw	r24, r28
     67c:	c0 df       	rcall	.-128    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     67e:	68 ec       	ldi	r22, 0xC8	; 200
     680:	ce 01       	movw	r24, r28
     682:	bd df       	rcall	.-134    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     684:	6a ed       	ldi	r22, 0xDA	; 218
     686:	ce 01       	movw	r24, r28
     688:	ba df       	rcall	.-140    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     68a:	62 e1       	ldi	r22, 0x12	; 18
     68c:	ce 01       	movw	r24, r28
     68e:	b7 df       	rcall	.-146    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     690:	61 e8       	ldi	r22, 0x81	; 129
     692:	ce 01       	movw	r24, r28
     694:	b4 df       	rcall	.-152    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     696:	6f ec       	ldi	r22, 0xCF	; 207
     698:	ce 01       	movw	r24, r28
     69a:	b1 df       	rcall	.-158    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     69c:	69 ed       	ldi	r22, 0xD9	; 217
     69e:	ce 01       	movw	r24, r28
     6a0:	ae df       	rcall	.-164    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6a2:	61 ef       	ldi	r22, 0xF1	; 241
     6a4:	ce 01       	movw	r24, r28
     6a6:	ab df       	rcall	.-170    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6a8:	6b ed       	ldi	r22, 0xDB	; 219
     6aa:	ce 01       	movw	r24, r28
     6ac:	a8 df       	rcall	.-176    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6ae:	60 e4       	ldi	r22, 0x40	; 64
     6b0:	ce 01       	movw	r24, r28
     6b2:	a5 df       	rcall	.-182    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6b4:	64 ea       	ldi	r22, 0xA4	; 164
     6b6:	ce 01       	movw	r24, r28
     6b8:	a2 df       	rcall	.-188    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6ba:	66 ea       	ldi	r22, 0xA6	; 166
     6bc:	ce 01       	movw	r24, r28
     6be:	9f df       	rcall	.-194    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6c0:	6f ea       	ldi	r22, 0xAF	; 175
     6c2:	ce 01       	movw	r24, r28
     6c4:	9c df       	rcall	.-200    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <_ZN7DisplayC1Ev>:
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
     6d2:	9c 5f       	subi	r25, 0xFC	; 252
     6d4:	e2 d3       	rcall	.+1988   	; 0xe9a <_ZN3I2CC1Ev>
     6d6:	ce 01       	movw	r24, r28
     6d8:	a9 df       	rcall	.-174    	; 0x62c <_ZN7Display17InitializeDisplayEv>
     6da:	ce 01       	movw	r24, r28
     6dc:	89 df       	rcall	.-238    	; 0x5f0 <_ZN7Display10clearFrameEv>
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <_ZN7Display9sendFrameEv>:
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	ec 01       	movw	r28, r24
     6f2:	61 e2       	ldi	r22, 0x21	; 33
     6f4:	84 df       	rcall	.-248    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	ce 01       	movw	r24, r28
     6fa:	81 df       	rcall	.-254    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     6fc:	6f e7       	ldi	r22, 0x7F	; 127
     6fe:	ce 01       	movw	r24, r28
     700:	7e df       	rcall	.-260    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     702:	62 e2       	ldi	r22, 0x22	; 34
     704:	ce 01       	movw	r24, r28
     706:	7b df       	rcall	.-266    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	ce 01       	movw	r24, r28
     70c:	78 df       	rcall	.-272    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     70e:	67 e0       	ldi	r22, 0x07	; 7
     710:	ce 01       	movw	r24, r28
     712:	75 df       	rcall	.-278    	; 0x5fe <_ZN7Display15ssd1306_commandEh>
     714:	8e 01       	movw	r16, r28
     716:	1c 5f       	subi	r17, 0xFC	; 252
     718:	c8 01       	movw	r24, r16
     71a:	c4 d3       	rcall	.+1928   	; 0xea4 <_ZN3I2C9twi_startEv>
     71c:	68 e7       	ldi	r22, 0x78	; 120
     71e:	c8 01       	movw	r24, r16
     720:	c9 d3       	rcall	.+1938   	; 0xeb4 <_ZN3I2C9twi_writeEh>
     722:	60 e4       	ldi	r22, 0x40	; 64
     724:	c8 01       	movw	r24, r16
     726:	c6 d3       	rcall	.+1932   	; 0xeb4 <_ZN3I2C9twi_writeEh>
     728:	78 01       	movw	r14, r16
     72a:	69 91       	ld	r22, Y+
     72c:	c8 01       	movw	r24, r16
     72e:	c2 d3       	rcall	.+1924   	; 0xeb4 <_ZN3I2C9twi_writeEh>
     730:	ce 15       	cp	r28, r14
     732:	df 05       	cpc	r29, r15
     734:	d1 f7       	brne	.-12     	; 0x72a <_ZN7Display9sendFrameEv+0x46>
     736:	c8 01       	movw	r24, r16
     738:	b9 d3       	rcall	.+1906   	; 0xeac <_ZN3I2C8twi_stopEv>
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	08 95       	ret

00000748 <_ZN7Display9drawPixelEhhh>:
     748:	66 23       	and	r22, r22
     74a:	ac f1       	brlt	.+106    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x6e>
     74c:	40 34       	cpi	r20, 0x40	; 64
     74e:	98 f5       	brcc	.+102    	; 0x7b6 <_ZN7Display9drawPixelEhhh+0x6e>
     750:	21 11       	cpse	r18, r1
     752:	19 c0       	rjmp	.+50     	; 0x786 <_ZN7Display9drawPixelEhhh+0x3e>
     754:	24 2f       	mov	r18, r20
     756:	26 95       	lsr	r18
     758:	26 95       	lsr	r18
     75a:	26 95       	lsr	r18
     75c:	50 e8       	ldi	r21, 0x80	; 128
     75e:	25 9f       	mul	r18, r21
     760:	90 01       	movw	r18, r0
     762:	11 24       	eor	r1, r1
     764:	26 0f       	add	r18, r22
     766:	31 1d       	adc	r19, r1
     768:	fc 01       	movw	r30, r24
     76a:	e2 0f       	add	r30, r18
     76c:	f3 1f       	adc	r31, r19
     76e:	47 70       	andi	r20, 0x07	; 7
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <_ZN7Display9drawPixelEhhh+0x32>
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	4a 95       	dec	r20
     77c:	e2 f7       	brpl	.-8      	; 0x776 <_ZN7Display9drawPixelEhhh+0x2e>
     77e:	90 81       	ld	r25, Z
     780:	89 2b       	or	r24, r25
     782:	80 83       	st	Z, r24
     784:	08 95       	ret
     786:	24 2f       	mov	r18, r20
     788:	26 95       	lsr	r18
     78a:	26 95       	lsr	r18
     78c:	26 95       	lsr	r18
     78e:	30 e8       	ldi	r19, 0x80	; 128
     790:	23 9f       	mul	r18, r19
     792:	f0 01       	movw	r30, r0
     794:	11 24       	eor	r1, r1
     796:	e6 0f       	add	r30, r22
     798:	f1 1d       	adc	r31, r1
     79a:	e8 0f       	add	r30, r24
     79c:	f9 1f       	adc	r31, r25
     79e:	47 70       	andi	r20, 0x07	; 7
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <_ZN7Display9drawPixelEhhh+0x62>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	4a 95       	dec	r20
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <_ZN7Display9drawPixelEhhh+0x5e>
     7ae:	80 95       	com	r24
     7b0:	90 81       	ld	r25, Z
     7b2:	89 23       	and	r24, r25
     7b4:	80 83       	st	Z, r24
     7b6:	08 95       	ret

000007b8 <_ZN7Display9drawVLineEhhh>:
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	22 23       	and	r18, r18
     7c4:	69 f0       	breq	.+26     	; 0x7e0 <_ZN7Display9drawVLineEhhh+0x28>
     7c6:	c4 2f       	mov	r28, r20
     7c8:	f6 2e       	mov	r15, r22
     7ca:	8c 01       	movw	r16, r24
     7cc:	d2 2f       	mov	r29, r18
     7ce:	d4 0f       	add	r29, r20
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	4c 2f       	mov	r20, r28
     7d4:	6f 2d       	mov	r22, r15
     7d6:	c8 01       	movw	r24, r16
     7d8:	b7 df       	rcall	.-146    	; 0x748 <_ZN7Display9drawPixelEhhh>
     7da:	cf 5f       	subi	r28, 0xFF	; 255
     7dc:	cd 13       	cpse	r28, r29
     7de:	f8 cf       	rjmp	.-16     	; 0x7d0 <_ZN7Display9drawVLineEhhh+0x18>
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	08 95       	ret

000007ec <_ZN7Display9drawHLineEhhh>:
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	22 23       	and	r18, r18
     7f8:	69 f0       	breq	.+26     	; 0x814 <_ZN7Display9drawHLineEhhh+0x28>
     7fa:	f4 2e       	mov	r15, r20
     7fc:	c6 2f       	mov	r28, r22
     7fe:	8c 01       	movw	r16, r24
     800:	d2 2f       	mov	r29, r18
     802:	d6 0f       	add	r29, r22
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	4f 2d       	mov	r20, r15
     808:	6c 2f       	mov	r22, r28
     80a:	c8 01       	movw	r24, r16
     80c:	9d df       	rcall	.-198    	; 0x748 <_ZN7Display9drawPixelEhhh>
     80e:	cf 5f       	subi	r28, 0xFF	; 255
     810:	cd 13       	cpse	r28, r29
     812:	f8 cf       	rjmp	.-16     	; 0x804 <_ZN7Display9drawHLineEhhh+0x18>
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	08 95       	ret

00000820 <_ZN7Display9draw_ASCIEhhh>:
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	61 32       	cpi	r22, 0x21	; 33
     82a:	08 f4       	brcc	.+2      	; 0x82e <_ZN7Display9draw_ASCIEhhh+0xe>
     82c:	3e c0       	rjmp	.+124    	; 0x8aa <_ZN7Display9draw_ASCIEhhh+0x8a>
     82e:	a4 2f       	mov	r26, r20
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	02 2f       	mov	r16, r18
     834:	06 95       	lsr	r16
     836:	06 95       	lsr	r16
     838:	06 95       	lsr	r16
     83a:	30 e8       	ldi	r19, 0x80	; 128
     83c:	03 9f       	mul	r16, r19
     83e:	80 01       	movw	r16, r0
     840:	11 24       	eor	r1, r1
     842:	61 52       	subi	r22, 0x21	; 33
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	fb 01       	movw	r30, r22
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	e6 0f       	add	r30, r22
     852:	f7 1f       	adc	r31, r23
     854:	e8 54       	subi	r30, 0x48	; 72
     856:	fd 4f       	sbci	r31, 0xFD	; 253
     858:	ad 01       	movw	r20, r26
     85a:	40 0f       	add	r20, r16
     85c:	51 1f       	adc	r21, r17
     85e:	ec 01       	movw	r28, r24
     860:	c4 0f       	add	r28, r20
     862:	d5 1f       	adc	r29, r21
     864:	00 58       	subi	r16, 0x80	; 128
     866:	1f 4f       	sbci	r17, 0xFF	; 255
     868:	a0 0f       	add	r26, r16
     86a:	b1 1f       	adc	r27, r17
     86c:	a8 0f       	add	r26, r24
     86e:	b9 1f       	adc	r27, r25
     870:	4b 5f       	subi	r20, 0xFB	; 251
     872:	5f 4f       	sbci	r21, 0xFF	; 255
     874:	48 0f       	add	r20, r24
     876:	59 1f       	adc	r21, r25
     878:	27 70       	andi	r18, 0x07	; 7
     87a:	64 91       	lpm	r22, Z
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	02 2e       	mov	r0, r18
     880:	02 c0       	rjmp	.+4      	; 0x886 <_ZN7Display9draw_ASCIEhhh+0x66>
     882:	66 0f       	add	r22, r22
     884:	77 1f       	adc	r23, r23
     886:	0a 94       	dec	r0
     888:	e2 f7       	brpl	.-8      	; 0x882 <_ZN7Display9draw_ASCIEhhh+0x62>
     88a:	98 81       	ld	r25, Y
     88c:	96 2b       	or	r25, r22
     88e:	99 93       	st	Y+, r25
     890:	67 2f       	mov	r22, r23
     892:	77 27       	eor	r23, r23
     894:	61 15       	cp	r22, r1
     896:	71 05       	cpc	r23, r1
     898:	19 f0       	breq	.+6      	; 0x8a0 <_ZN7Display9draw_ASCIEhhh+0x80>
     89a:	8c 91       	ld	r24, X
     89c:	68 2b       	or	r22, r24
     89e:	6c 93       	st	X, r22
     8a0:	31 96       	adiw	r30, 0x01	; 1
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	c4 17       	cp	r28, r20
     8a6:	d5 07       	cpc	r29, r21
     8a8:	41 f7       	brne	.-48     	; 0x87a <_ZN7Display9draw_ASCIEhhh+0x5a>
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	08 95       	ret

000008b4 <_ZN7Display16draw_number16x16Ehhh>:
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	6a 30       	cpi	r22, 0x0A	; 10
     8c6:	08 f0       	brcs	.+2      	; 0x8ca <_ZN7Display16draw_number16x16Ehhh+0x16>
     8c8:	66 c0       	rjmp	.+204    	; 0x996 <_ZN7Display16draw_number16x16Ehhh+0xe2>
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	02 2f       	mov	r16, r18
     8ce:	06 95       	lsr	r16
     8d0:	06 95       	lsr	r16
     8d2:	06 95       	lsr	r16
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	d8 01       	movw	r26, r16
     8d8:	b6 95       	lsr	r27
     8da:	ba 2f       	mov	r27, r26
     8dc:	aa 27       	eor	r26, r26
     8de:	b7 95       	ror	r27
     8e0:	a7 95       	ror	r26
     8e2:	0f 5f       	subi	r16, 0xFF	; 255
     8e4:	1f 4f       	sbci	r17, 0xFF	; 255
     8e6:	16 95       	lsr	r17
     8e8:	10 2f       	mov	r17, r16
     8ea:	00 27       	eor	r16, r16
     8ec:	17 95       	ror	r17
     8ee:	07 95       	ror	r16
     8f0:	7d 01       	movw	r14, r26
     8f2:	30 e8       	ldi	r19, 0x80	; 128
     8f4:	e3 0e       	add	r14, r19
     8f6:	f1 1c       	adc	r15, r1
     8f8:	e4 0e       	add	r14, r20
     8fa:	f5 1e       	adc	r15, r21
     8fc:	e8 0e       	add	r14, r24
     8fe:	f9 1e       	adc	r15, r25
     900:	ea 01       	movw	r28, r20
     902:	c0 0f       	add	r28, r16
     904:	d1 1f       	adc	r29, r17
     906:	60 97       	sbiw	r28, 0x10	; 16
     908:	c8 0f       	add	r28, r24
     90a:	d9 1f       	adc	r29, r25
     90c:	04 0f       	add	r16, r20
     90e:	15 1f       	adc	r17, r21
     910:	00 59       	subi	r16, 0x90	; 144
     912:	1f 4f       	sbci	r17, 0xFF	; 255
     914:	08 0f       	add	r16, r24
     916:	19 1f       	adc	r17, r25
     918:	a4 0f       	add	r26, r20
     91a:	b5 1f       	adc	r27, r21
     91c:	a8 0f       	add	r26, r24
     91e:	b9 1f       	adc	r27, r25
     920:	80 e2       	ldi	r24, 0x20	; 32
     922:	68 9f       	mul	r22, r24
     924:	b0 01       	movw	r22, r0
     926:	11 24       	eor	r1, r1
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	27 70       	andi	r18, 0x07	; 7
     92e:	fa 01       	movw	r30, r20
     930:	e6 0f       	add	r30, r22
     932:	f7 1f       	adc	r31, r23
     934:	e8 58       	subi	r30, 0x88	; 136
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	e4 91       	lpm	r30, Z
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	02 2e       	mov	r0, r18
     93e:	02 c0       	rjmp	.+4      	; 0x944 <_ZN7Display16draw_number16x16Ehhh+0x90>
     940:	ee 0f       	add	r30, r30
     942:	ff 1f       	adc	r31, r31
     944:	0a 94       	dec	r0
     946:	e2 f7       	brpl	.-8      	; 0x940 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     948:	40 31       	cpi	r20, 0x10	; 16
     94a:	68 f4       	brcc	.+26     	; 0x966 <_ZN7Display16draw_number16x16Ehhh+0xb2>
     94c:	8c 91       	ld	r24, X
     94e:	8e 2b       	or	r24, r30
     950:	8c 93       	st	X, r24
     952:	cf 2e       	mov	r12, r31
     954:	dd 24       	eor	r13, r13
     956:	c1 14       	cp	r12, r1
     958:	d1 04       	cpc	r13, r1
     95a:	89 f0       	breq	.+34     	; 0x97e <_ZN7Display16draw_number16x16Ehhh+0xca>
     95c:	f7 01       	movw	r30, r14
     95e:	80 81       	ld	r24, Z
     960:	8c 29       	or	r24, r12
     962:	80 83       	st	Z, r24
     964:	0c c0       	rjmp	.+24     	; 0x97e <_ZN7Display16draw_number16x16Ehhh+0xca>
     966:	88 81       	ld	r24, Y
     968:	8e 2b       	or	r24, r30
     96a:	88 83       	st	Y, r24
     96c:	cf 2e       	mov	r12, r31
     96e:	dd 24       	eor	r13, r13
     970:	c1 14       	cp	r12, r1
     972:	d1 04       	cpc	r13, r1
     974:	21 f0       	breq	.+8      	; 0x97e <_ZN7Display16draw_number16x16Ehhh+0xca>
     976:	f8 01       	movw	r30, r16
     978:	80 81       	ld	r24, Z
     97a:	8c 29       	or	r24, r12
     97c:	80 83       	st	Z, r24
     97e:	4f 5f       	subi	r20, 0xFF	; 255
     980:	5f 4f       	sbci	r21, 0xFF	; 255
     982:	ff ef       	ldi	r31, 0xFF	; 255
     984:	ef 1a       	sub	r14, r31
     986:	ff 0a       	sbc	r15, r31
     988:	21 96       	adiw	r28, 0x01	; 1
     98a:	0f 5f       	subi	r16, 0xFF	; 255
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	11 96       	adiw	r26, 0x01	; 1
     990:	40 32       	cpi	r20, 0x20	; 32
     992:	51 05       	cpc	r21, r1
     994:	61 f6       	brne	.-104    	; 0x92e <_ZN7Display16draw_number16x16Ehhh+0x7a>
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	08 95       	ret

000009a8 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     9a8:	2f 92       	push	r2
     9aa:	3f 92       	push	r3
     9ac:	4f 92       	push	r4
     9ae:	5f 92       	push	r5
     9b0:	6f 92       	push	r6
     9b2:	7f 92       	push	r7
     9b4:	8f 92       	push	r8
     9b6:	9f 92       	push	r9
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	27 97       	sbiw	r28, 0x07	; 7
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	9f 83       	std	Y+7, r25	; 0x07
     9de:	8e 83       	std	Y+6, r24	; 0x06
     9e0:	6d 83       	std	Y+5, r22	; 0x05
     9e2:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     9e4:	00 23       	and	r16, r16
     9e6:	09 f4       	brne	.+2      	; 0x9ea <_ZN7Display6analogEhhhh+0x42>
     9e8:	26 c1       	rjmp	.+588    	; 0xc36 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     9ea:	62 2f       	mov	r22, r18
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 ec       	ldi	r20, 0xC0	; 192
     9fc:	50 e4       	ldi	r21, 0x40	; 64
     9fe:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     a02:	2b ed       	ldi	r18, 0xDB	; 219
     a04:	3f e0       	ldi	r19, 0x0F	; 15
     a06:	49 e4       	ldi	r20, 0x49	; 73
     a08:	50 e4       	ldi	r21, 0x40	; 64
     a0a:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	44 e3       	ldi	r20, 0x34	; 52
     a14:	53 e4       	ldi	r21, 0x43	; 67
     a16:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
     a1a:	2b ed       	ldi	r18, 0xDB	; 219
     a1c:	3f e0       	ldi	r19, 0x0F	; 15
     a1e:	49 ec       	ldi	r20, 0xC9	; 201
     a20:	5f e3       	ldi	r21, 0x3F	; 63
     a22:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     a2a:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <cos>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     a32:	c7 01       	movw	r24, r14
     a34:	b6 01       	movw	r22, r12
     a36:	0e 94 ed 21 	call	0x43da	; 0x43da <sin>
     a3a:	2b 01       	movw	r4, r22
     a3c:	3c 01       	movw	r6, r24
     a3e:	00 e0       	ldi	r16, 0x00	; 0
     a40:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     a42:	b8 01       	movw	r22, r16
     a44:	01 2e       	mov	r0, r17
     a46:	00 0c       	add	r0, r0
     a48:	88 0b       	sbc	r24, r24
     a4a:	99 0b       	sbc	r25, r25
     a4c:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     a50:	6b 01       	movw	r12, r22
     a52:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     a54:	a3 01       	movw	r20, r6
     a56:	92 01       	movw	r18, r4
     a58:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	48 ef       	ldi	r20, 0xF8	; 248
     a62:	51 e4       	ldi	r21, 0x41	; 65
     a64:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     a68:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
     a6c:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     a6e:	a5 01       	movw	r20, r10
     a70:	94 01       	movw	r18, r8
     a72:	c7 01       	movw	r24, r14
     a74:	b6 01       	movw	r22, r12
     a76:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	48 ef       	ldi	r20, 0xF8	; 248
     a80:	51 e4       	ldi	r21, 0x41	; 65
     a82:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     a86:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	42 2d       	mov	r20, r2
     a8e:	8e 81       	ldd	r24, Y+6	; 0x06
     a90:	9f 81       	ldd	r25, Y+7	; 0x07
     a92:	5a de       	rcall	.-844    	; 0x748 <_ZN7Display9drawPixelEhhh>
     a94:	0f 5f       	subi	r16, 0xFF	; 255
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     a98:	09 31       	cpi	r16, 0x19	; 25
     a9a:	11 05       	cpc	r17, r1
     a9c:	91 f6       	brne	.-92     	; 0xa42 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     a9e:	63 2d       	mov	r22, r3
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     aaa:	69 83       	std	Y+1, r22	; 0x01
     aac:	7a 83       	std	Y+2, r23	; 0x02
     aae:	8b 83       	std	Y+3, r24	; 0x03
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 ec       	ldi	r20, 0xC0	; 192
     ab8:	50 e4       	ldi	r21, 0x40	; 64
     aba:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     abe:	2b ed       	ldi	r18, 0xDB	; 219
     ac0:	3f e0       	ldi	r19, 0x0F	; 15
     ac2:	49 e4       	ldi	r20, 0x49	; 73
     ac4:	50 e4       	ldi	r21, 0x40	; 64
     ac6:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	44 e3       	ldi	r20, 0x34	; 52
     ad0:	53 e4       	ldi	r21, 0x43	; 67
     ad2:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
     ad6:	2b ed       	ldi	r18, 0xDB	; 219
     ad8:	3f e0       	ldi	r19, 0x0F	; 15
     ada:	49 ec       	ldi	r20, 0xC9	; 201
     adc:	5f e3       	ldi	r21, 0x3F	; 63
     ade:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     ae2:	6b 01       	movw	r12, r22
     ae4:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     ae6:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <cos>
     aea:	2b 01       	movw	r4, r22
     aec:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     aee:	c7 01       	movw	r24, r14
     af0:	b6 01       	movw	r22, r12
     af2:	0e 94 ed 21 	call	0x43da	; 0x43da <sin>
     af6:	4b 01       	movw	r8, r22
     af8:	5c 01       	movw	r10, r24
     afa:	00 e0       	ldi	r16, 0x00	; 0
     afc:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     afe:	b8 01       	movw	r22, r16
     b00:	01 2e       	mov	r0, r17
     b02:	00 0c       	add	r0, r0
     b04:	88 0b       	sbc	r24, r24
     b06:	99 0b       	sbc	r25, r25
     b08:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     b0c:	6b 01       	movw	r12, r22
     b0e:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     b10:	a5 01       	movw	r20, r10
     b12:	94 01       	movw	r18, r8
     b14:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	48 ef       	ldi	r20, 0xF8	; 248
     b1e:	51 e4       	ldi	r21, 0x41	; 65
     b20:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     b24:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
     b28:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     b2a:	a3 01       	movw	r20, r6
     b2c:	92 01       	movw	r18, r4
     b2e:	c7 01       	movw	r24, r14
     b30:	b6 01       	movw	r22, r12
     b32:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	48 ef       	ldi	r20, 0xF8	; 248
     b3c:	51 e4       	ldi	r21, 0x41	; 65
     b3e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     b42:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	43 2d       	mov	r20, r3
     b4a:	8e 81       	ldd	r24, Y+6	; 0x06
     b4c:	9f 81       	ldd	r25, Y+7	; 0x07
     b4e:	fc dd       	rcall	.-1032   	; 0x748 <_ZN7Display9drawPixelEhhh>
     b50:	0f 5f       	subi	r16, 0xFF	; 255
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     b54:	05 31       	cpi	r16, 0x15	; 21
     b56:	11 05       	cpc	r17, r1
     b58:	91 f6       	brne	.-92     	; 0xafe <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     b5a:	2d 81       	ldd	r18, Y+5	; 0x05
     b5c:	62 2f       	mov	r22, r18
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 ef       	ldi	r20, 0xF0	; 240
     b6e:	51 e4       	ldi	r21, 0x41	; 65
     b70:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	5f e3       	ldi	r21, 0x3F	; 63
     b80:	69 81       	ldd	r22, Y+1	; 0x01
     b82:	7a 81       	ldd	r23, Y+2	; 0x02
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     b8c:	9b 01       	movw	r18, r22
     b8e:	ac 01       	movw	r20, r24
     b90:	c7 01       	movw	r24, r14
     b92:	b6 01       	movw	r22, r12
     b94:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     b98:	2b ed       	ldi	r18, 0xDB	; 219
     b9a:	3f e0       	ldi	r19, 0x0F	; 15
     b9c:	49 e4       	ldi	r20, 0x49	; 73
     b9e:	50 e4       	ldi	r21, 0x40	; 64
     ba0:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	44 e3       	ldi	r20, 0x34	; 52
     baa:	53 e4       	ldi	r21, 0x43	; 67
     bac:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
     bb0:	2b ed       	ldi	r18, 0xDB	; 219
     bb2:	3f e0       	ldi	r19, 0x0F	; 15
     bb4:	49 ec       	ldi	r20, 0xC9	; 201
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     bbc:	6b 01       	movw	r12, r22
     bbe:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     bc0:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <cos>
     bc4:	4b 01       	movw	r8, r22
     bc6:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     bc8:	c7 01       	movw	r24, r14
     bca:	b6 01       	movw	r22, r12
     bcc:	0e 94 ed 21 	call	0x43da	; 0x43da <sin>
     bd0:	2b 01       	movw	r4, r22
     bd2:	3c 01       	movw	r6, r24
     bd4:	00 e0       	ldi	r16, 0x00	; 0
     bd6:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     bd8:	b8 01       	movw	r22, r16
     bda:	01 2e       	mov	r0, r17
     bdc:	00 0c       	add	r0, r0
     bde:	88 0b       	sbc	r24, r24
     be0:	99 0b       	sbc	r25, r25
     be2:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     be6:	6b 01       	movw	r12, r22
     be8:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     bea:	a3 01       	movw	r20, r6
     bec:	92 01       	movw	r18, r4
     bee:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	48 ef       	ldi	r20, 0xF8	; 248
     bf8:	51 e4       	ldi	r21, 0x41	; 65
     bfa:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     bfe:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
     c02:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     c04:	a5 01       	movw	r20, r10
     c06:	94 01       	movw	r18, r8
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	48 ef       	ldi	r20, 0xF8	; 248
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     c1c:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	43 2d       	mov	r20, r3
     c24:	8e 81       	ldd	r24, Y+6	; 0x06
     c26:	9f 81       	ldd	r25, Y+7	; 0x07
     c28:	8f dd       	rcall	.-1250   	; 0x748 <_ZN7Display9drawPixelEhhh>
     c2a:	0f 5f       	subi	r16, 0xFF	; 255
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     c2e:	0d 30       	cpi	r16, 0x0D	; 13
     c30:	11 05       	cpc	r17, r1
     c32:	91 f6       	brne	.-92     	; 0xbd8 <_ZN7Display6analogEhhhh+0x230>
     c34:	cb c0       	rjmp	.+406    	; 0xdcc <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     c36:	64 2f       	mov	r22, r20
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     c42:	69 83       	std	Y+1, r22	; 0x01
     c44:	7a 83       	std	Y+2, r23	; 0x02
     c46:	8b 83       	std	Y+3, r24	; 0x03
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 ec       	ldi	r20, 0xC0	; 192
     c50:	50 e4       	ldi	r21, 0x40	; 64
     c52:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     c56:	2b ed       	ldi	r18, 0xDB	; 219
     c58:	3f e0       	ldi	r19, 0x0F	; 15
     c5a:	49 e4       	ldi	r20, 0x49	; 73
     c5c:	50 e4       	ldi	r21, 0x40	; 64
     c5e:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	44 e3       	ldi	r20, 0x34	; 52
     c68:	53 e4       	ldi	r21, 0x43	; 67
     c6a:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
     c6e:	2b ed       	ldi	r18, 0xDB	; 219
     c70:	3f e0       	ldi	r19, 0x0F	; 15
     c72:	49 ec       	ldi	r20, 0xC9	; 201
     c74:	5f e3       	ldi	r21, 0x3F	; 63
     c76:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     c7a:	6b 01       	movw	r12, r22
     c7c:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     c7e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <cos>
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     c86:	c7 01       	movw	r24, r14
     c88:	b6 01       	movw	r22, r12
     c8a:	0e 94 ed 21 	call	0x43da	; 0x43da <sin>
     c8e:	4b 01       	movw	r8, r22
     c90:	5c 01       	movw	r10, r24
     c92:	00 e0       	ldi	r16, 0x00	; 0
     c94:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     c96:	b8 01       	movw	r22, r16
     c98:	01 2e       	mov	r0, r17
     c9a:	00 0c       	add	r0, r0
     c9c:	88 0b       	sbc	r24, r24
     c9e:	99 0b       	sbc	r25, r25
     ca0:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     ca4:	6b 01       	movw	r12, r22
     ca6:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ca8:	a5 01       	movw	r20, r10
     caa:	94 01       	movw	r18, r8
     cac:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	48 ef       	ldi	r20, 0xF8	; 248
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     cbc:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
     cc0:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     cc2:	a3 01       	movw	r20, r6
     cc4:	92 01       	movw	r18, r4
     cc6:	c7 01       	movw	r24, r14
     cc8:	b6 01       	movw	r22, r12
     cca:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	48 ef       	ldi	r20, 0xF8	; 248
     cd4:	51 e4       	ldi	r21, 0x41	; 65
     cd6:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     cda:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	43 2d       	mov	r20, r3
     ce2:	8e 81       	ldd	r24, Y+6	; 0x06
     ce4:	9f 81       	ldd	r25, Y+7	; 0x07
     ce6:	30 dd       	rcall	.-1440   	; 0x748 <_ZN7Display9drawPixelEhhh>
     ce8:	0f 5f       	subi	r16, 0xFF	; 255
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     cec:	09 31       	cpi	r16, 0x19	; 25
     cee:	11 05       	cpc	r17, r1
     cf0:	91 f6       	brne	.-92     	; 0xc96 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     cf2:	ed 81       	ldd	r30, Y+5	; 0x05
     cf4:	6e 2f       	mov	r22, r30
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 ef       	ldi	r20, 0xF0	; 240
     d06:	51 e4       	ldi	r21, 0x41	; 65
     d08:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     d0c:	6b 01       	movw	r12, r22
     d0e:	7c 01       	movw	r14, r24
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	69 81       	ldd	r22, Y+1	; 0x01
     d1a:	7a 81       	ldd	r23, Y+2	; 0x02
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     d24:	9b 01       	movw	r18, r22
     d26:	ac 01       	movw	r20, r24
     d28:	c7 01       	movw	r24, r14
     d2a:	b6 01       	movw	r22, r12
     d2c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     d30:	2b ed       	ldi	r18, 0xDB	; 219
     d32:	3f e0       	ldi	r19, 0x0F	; 15
     d34:	49 e4       	ldi	r20, 0x49	; 73
     d36:	50 e4       	ldi	r21, 0x40	; 64
     d38:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	44 e3       	ldi	r20, 0x34	; 52
     d42:	53 e4       	ldi	r21, 0x43	; 67
     d44:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
     d48:	2b ed       	ldi	r18, 0xDB	; 219
     d4a:	3f e0       	ldi	r19, 0x0F	; 15
     d4c:	49 ec       	ldi	r20, 0xC9	; 201
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
     d54:	6b 01       	movw	r12, r22
     d56:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     d58:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <cos>
     d5c:	4b 01       	movw	r8, r22
     d5e:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 ed 21 	call	0x43da	; 0x43da <sin>
     d68:	2b 01       	movw	r4, r22
     d6a:	3c 01       	movw	r6, r24
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     d70:	b8 01       	movw	r22, r16
     d72:	01 2e       	mov	r0, r17
     d74:	00 0c       	add	r0, r0
     d76:	88 0b       	sbc	r24, r24
     d78:	99 0b       	sbc	r25, r25
     d7a:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
     d7e:	6b 01       	movw	r12, r22
     d80:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     d82:	a3 01       	movw	r20, r6
     d84:	92 01       	movw	r18, r4
     d86:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	48 ef       	ldi	r20, 0xF8	; 248
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     d96:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
     d9a:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     d9c:	a5 01       	movw	r20, r10
     d9e:	94 01       	movw	r18, r8
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	48 ef       	ldi	r20, 0xF8	; 248
     dae:	51 e4       	ldi	r21, 0x41	; 65
     db0:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
     db4:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	43 2d       	mov	r20, r3
     dbc:	8e 81       	ldd	r24, Y+6	; 0x06
     dbe:	9f 81       	ldd	r25, Y+7	; 0x07
     dc0:	c3 dc       	rcall	.-1658   	; 0x748 <_ZN7Display9drawPixelEhhh>
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     dc6:	01 31       	cpi	r16, 0x11	; 17
     dc8:	11 05       	cpc	r17, r1
     dca:	91 f6       	brne	.-92     	; 0xd70 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	4a e1       	ldi	r20, 0x1A	; 26
     dd0:	61 e3       	ldi	r22, 0x31	; 49
     dd2:	8e 81       	ldd	r24, Y+6	; 0x06
     dd4:	9f 81       	ldd	r25, Y+7	; 0x07
     dd6:	24 dd       	rcall	.-1464   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	40 e2       	ldi	r20, 0x20	; 32
     ddc:	62 e3       	ldi	r22, 0x32	; 50
     dde:	8e 81       	ldd	r24, Y+6	; 0x06
     de0:	9f 81       	ldd	r25, Y+7	; 0x07
     de2:	1e dd       	rcall	.-1476   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     de4:	2c e1       	ldi	r18, 0x1C	; 28
     de6:	4a e3       	ldi	r20, 0x3A	; 58
     de8:	63 e3       	ldi	r22, 0x33	; 51
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	18 dd       	rcall	.-1488   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     df0:	28 e3       	ldi	r18, 0x38	; 56
     df2:	4d e1       	ldi	r20, 0x1D	; 29
     df4:	66 e3       	ldi	r22, 0x36	; 54
     df6:	8e 81       	ldd	r24, Y+6	; 0x06
     df8:	9f 81       	ldd	r25, Y+7	; 0x07
     dfa:	12 dd       	rcall	.-1500   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     dfc:	2c e1       	ldi	r18, 0x1C	; 28
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	69 e3       	ldi	r22, 0x39	; 57
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	0c dd       	rcall	.-1512   	; 0x820 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	48 e0       	ldi	r20, 0x08	; 8
     e0c:	6c e2       	ldi	r22, 0x2C	; 44
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
     e10:	9f 81       	ldd	r25, Y+7	; 0x07
     e12:	9a dc       	rcall	.-1740   	; 0x748 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	42 e1       	ldi	r20, 0x12	; 18
     e18:	65 e3       	ldi	r22, 0x35	; 53
     e1a:	8e 81       	ldd	r24, Y+6	; 0x06
     e1c:	9f 81       	ldd	r25, Y+7	; 0x07
     e1e:	94 dc       	rcall	.-1752   	; 0x748 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	4c e2       	ldi	r20, 0x2C	; 44
     e24:	65 e3       	ldi	r22, 0x35	; 53
     e26:	8e 81       	ldd	r24, Y+6	; 0x06
     e28:	9f 81       	ldd	r25, Y+7	; 0x07
     e2a:	8e dc       	rcall	.-1764   	; 0x748 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	45 e3       	ldi	r20, 0x35	; 53
     e30:	6b e2       	ldi	r22, 0x2B	; 43
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	9f 81       	ldd	r25, Y+7	; 0x07
     e36:	88 dc       	rcall	.-1776   	; 0x748 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	45 e3       	ldi	r20, 0x35	; 53
     e3c:	61 e1       	ldi	r22, 0x11	; 17
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	82 dc       	rcall	.-1788   	; 0x748 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	4c e2       	ldi	r20, 0x2C	; 44
     e48:	68 e0       	ldi	r22, 0x08	; 8
     e4a:	8e 81       	ldd	r24, Y+6	; 0x06
     e4c:	9f 81       	ldd	r25, Y+7	; 0x07
     e4e:	7c dc       	rcall	.-1800   	; 0x748 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	41 e1       	ldi	r20, 0x11	; 17
     e54:	68 e0       	ldi	r22, 0x08	; 8
     e56:	8e 81       	ldd	r24, Y+6	; 0x06
     e58:	9f 81       	ldd	r25, Y+7	; 0x07
     e5a:	76 dc       	rcall	.-1812   	; 0x748 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	48 e0       	ldi	r20, 0x08	; 8
     e60:	62 e1       	ldi	r22, 0x12	; 18
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	9f 81       	ldd	r25, Y+7	; 0x07
     e66:	70 dc       	rcall	.-1824   	; 0x748 <_ZN7Display9drawPixelEhhh>
}
     e68:	27 96       	adiw	r28, 0x07	; 7
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	3f 90       	pop	r3
     e96:	2f 90       	pop	r2
     e98:	08 95       	ret

00000e9a <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	80 93 b8 00 	sts	0x00B8, r24
     ea0:	08 95       	ret

00000ea2 <_ZN3I2CD1Ev>:
     ea2:	08 95       	ret

00000ea4 <_ZN3I2C9twi_startEv>:
     ea4:	84 ea       	ldi	r24, 0xA4	; 164
     ea6:	80 93 bc 00 	sts	0x00BC, r24
     eaa:	08 95       	ret

00000eac <_ZN3I2C8twi_stopEv>:
     eac:	84 e9       	ldi	r24, 0x94	; 148
     eae:	80 93 bc 00 	sts	0x00BC, r24
     eb2:	08 95       	ret

00000eb4 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
     eb4:	ec eb       	ldi	r30, 0xBC	; 188
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 23       	and	r24, r24
     ebc:	ec f7       	brge	.-6      	; 0xeb8 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
     ebe:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
     ec2:	84 e8       	ldi	r24, 0x84	; 132
     ec4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     ec8:	ec eb       	ldi	r30, 0xBC	; 188
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 23       	and	r24, r24
     ed0:	ec f7       	brge	.-6      	; 0xecc <_ZN3I2C9twi_writeEh+0x18>
}
     ed2:	08 95       	ret

00000ed4 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
     ed4:	2a b1       	in	r18, 0x0a	; 10
     ed6:	20 66       	ori	r18, 0x60	; 96
     ed8:	2a b9       	out	0x0a, r18	; 10
     eda:	28 b1       	in	r18, 0x08	; 8
     edc:	23 7f       	andi	r18, 0xF3	; 243
     ede:	28 b9       	out	0x08, r18	; 8
     ee0:	27 b1       	in	r18, 0x07	; 7
     ee2:	2c 60       	ori	r18, 0x0C	; 12
     ee4:	27 b9       	out	0x07, r18	; 7
     ee6:	2a b1       	in	r18, 0x0a	; 10
     ee8:	23 7e       	andi	r18, 0xE3	; 227
     eea:	2a b9       	out	0x0a, r18	; 10
     eec:	fc 01       	movw	r30, r24
     eee:	0c 96       	adiw	r24, 0x0c	; 12
     ef0:	11 92       	st	Z+, r1
     ef2:	e8 17       	cp	r30, r24
     ef4:	f9 07       	cpc	r31, r25
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <_ZN9InterfaceC1Ev+0x1c>
     ef8:	08 95       	ret

00000efa <_ZN9InterfaceD1Ev>:
     efa:	08 95       	ret

00000efc <_ZN9Interface7paradebEPVhhPh>:
     efc:	fb 01       	movw	r30, r22
     efe:	80 81       	ld	r24, Z
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	04 2e       	mov	r0, r20
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <_ZN9Interface7paradebEPVhhPh+0xe>
     f06:	95 95       	asr	r25
     f08:	87 95       	ror	r24
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <_ZN9Interface7paradebEPVhhPh+0xa>
     f0e:	80 ff       	sbrs	r24, 0
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <_ZN9Interface7paradebEPVhhPh+0x20>
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	f9 01       	movw	r30, r18
     f16:	80 83       	st	Z, r24
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret
     f1c:	f9 01       	movw	r30, r18
     f1e:	80 81       	ld	r24, Z
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	71 f4       	brne	.+28     	; 0xf40 <_ZN9Interface7paradebEPVhhPh+0x44>
     f24:	fb 01       	movw	r30, r22
     f26:	60 81       	ld	r22, Z
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	fb 01       	movw	r30, r22
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <_ZN9Interface7paradebEPVhhPh+0x36>
     f2e:	f5 95       	asr	r31
     f30:	e7 95       	ror	r30
     f32:	4a 95       	dec	r20
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <_ZN9Interface7paradebEPVhhPh+0x32>
     f36:	e0 fd       	sbrc	r30, 0
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <_ZN9Interface7paradebEPVhhPh+0x44>
     f3a:	f9 01       	movw	r30, r18
     f3c:	10 82       	st	Z, r1
     f3e:	08 95       	ret
     f40:	f9 01       	movw	r30, r18
     f42:	10 82       	st	Z, r1
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	08 95       	ret

00000f48 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
     f50:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	8a 95       	dec	r24
     f56:	f1 f7       	brne	.-4      	; 0xf54 <_ZN9Interface6TasterEv+0xc>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
     f5a:	9e 01       	movw	r18, r28
     f5c:	2e 5f       	subi	r18, 0xFE	; 254
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	44 e0       	ldi	r20, 0x04	; 4
     f62:	69 e2       	ldi	r22, 0x29	; 41
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	ce 01       	movw	r24, r28
     f68:	c9 df       	rcall	.-110    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
     f6a:	81 11       	cpse	r24, r1
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
     f6e:	9e 01       	movw	r18, r28
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	43 e0       	ldi	r20, 0x03	; 3
     f76:	69 e2       	ldi	r22, 0x29	; 41
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	ce 01       	movw	r24, r28
     f7c:	bf df       	rcall	.-130    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
     f7e:	81 11       	cpse	r24, r1
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
     f82:	9e 01       	movw	r18, r28
     f84:	42 e0       	ldi	r20, 0x02	; 2
     f86:	69 e2       	ldi	r22, 0x29	; 41
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	ce 01       	movw	r24, r28
     f8c:	b7 df       	rcall	.-146    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
     f8e:	88 23       	and	r24, r24
     f90:	31 f0       	breq	.+12     	; 0xf9e <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
     f92:	11 e3       	ldi	r17, 0x31	; 49
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
     f96:	13 e3       	ldi	r17, 0x33	; 51
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
     f9a:	12 e3       	ldi	r17, 0x32	; 50
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
     f9e:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
     fa0:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
     fa2:	42 9a       	sbi	0x08, 2	; 8
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	8a 95       	dec	r24
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <_ZN9Interface6TasterEv+0x5e>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
     fac:	9e 01       	movw	r18, r28
     fae:	2b 5f       	subi	r18, 0xFB	; 251
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	44 e0       	ldi	r20, 0x04	; 4
     fb4:	69 e2       	ldi	r22, 0x29	; 41
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	ce 01       	movw	r24, r28
     fba:	a0 df       	rcall	.-192    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
     fbc:	81 11       	cpse	r24, r1
     fbe:	16 c0       	rjmp	.+44     	; 0xfec <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
     fc0:	9e 01       	movw	r18, r28
     fc2:	2c 5f       	subi	r18, 0xFC	; 252
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	43 e0       	ldi	r20, 0x03	; 3
     fc8:	69 e2       	ldi	r22, 0x29	; 41
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	ce 01       	movw	r24, r28
     fce:	96 df       	rcall	.-212    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
     fd0:	81 11       	cpse	r24, r1
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
     fd4:	9e 01       	movw	r18, r28
     fd6:	2d 5f       	subi	r18, 0xFD	; 253
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	42 e0       	ldi	r20, 0x02	; 2
     fdc:	69 e2       	ldi	r22, 0x29	; 41
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	ce 01       	movw	r24, r28
     fe2:	8c df       	rcall	.-232    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
     fe4:	88 23       	and	r24, r24
     fe6:	29 f0       	breq	.+10     	; 0xff2 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
     fe8:	14 e3       	ldi	r17, 0x34	; 52
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
     fec:	16 e3       	ldi	r17, 0x36	; 54
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
     ff0:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
     ff2:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
     ff4:	5e 9a       	sbi	0x0b, 6	; 11
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	8a 95       	dec	r24
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <_ZN9Interface6TasterEv+0xb0>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
     ffe:	9e 01       	movw	r18, r28
    1000:	28 5f       	subi	r18, 0xF8	; 248
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	44 e0       	ldi	r20, 0x04	; 4
    1006:	69 e2       	ldi	r22, 0x29	; 41
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	ce 01       	movw	r24, r28
    100c:	77 df       	rcall	.-274    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
    100e:	81 11       	cpse	r24, r1
    1010:	16 c0       	rjmp	.+44     	; 0x103e <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    1012:	9e 01       	movw	r18, r28
    1014:	29 5f       	subi	r18, 0xF9	; 249
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	43 e0       	ldi	r20, 0x03	; 3
    101a:	69 e2       	ldi	r22, 0x29	; 41
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	6d df       	rcall	.-294    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
    1022:	81 11       	cpse	r24, r1
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    1026:	9e 01       	movw	r18, r28
    1028:	2a 5f       	subi	r18, 0xFA	; 250
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	42 e0       	ldi	r20, 0x02	; 2
    102e:	69 e2       	ldi	r22, 0x29	; 41
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	ce 01       	movw	r24, r28
    1034:	63 df       	rcall	.-314    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
    1036:	88 23       	and	r24, r24
    1038:	29 f0       	breq	.+10     	; 0x1044 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    103a:	17 e3       	ldi	r17, 0x37	; 55
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    103e:	19 e3       	ldi	r17, 0x39	; 57
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    1042:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    1044:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    1046:	5d 9a       	sbi	0x0b, 5	; 11
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	8a 95       	dec	r24
    104c:	f1 f7       	brne	.-4      	; 0x104a <_ZN9Interface6TasterEv+0x102>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    1050:	9e 01       	movw	r18, r28
    1052:	25 5f       	subi	r18, 0xF5	; 245
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	44 e0       	ldi	r20, 0x04	; 4
    1058:	69 e2       	ldi	r22, 0x29	; 41
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	ce 01       	movw	r24, r28
    105e:	4e df       	rcall	.-356    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
    1060:	81 11       	cpse	r24, r1
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    1064:	9e 01       	movw	r18, r28
    1066:	26 5f       	subi	r18, 0xF6	; 246
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	43 e0       	ldi	r20, 0x03	; 3
    106c:	69 e2       	ldi	r22, 0x29	; 41
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	ce 01       	movw	r24, r28
    1072:	44 df       	rcall	.-376    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
    1074:	81 11       	cpse	r24, r1
    1076:	0e c0       	rjmp	.+28     	; 0x1094 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    1078:	9e 01       	movw	r18, r28
    107a:	27 5f       	subi	r18, 0xF7	; 247
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	42 e0       	ldi	r20, 0x02	; 2
    1080:	69 e2       	ldi	r22, 0x29	; 41
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	ce 01       	movw	r24, r28
    1086:	3a df       	rcall	.-396    	; 0xefc <_ZN9Interface7paradebEPVhhPh>
    1088:	88 23       	and	r24, r24
    108a:	29 f0       	breq	.+10     	; 0x1096 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    108c:	1a e2       	ldi	r17, 0x2A	; 42
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    1090:	13 e2       	ldi	r17, 0x23	; 35
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    1094:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    1096:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    1098:	81 2f       	mov	r24, r17
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	08 95       	ret

000010a2 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    10a2:	52 df       	rcall	.-348    	; 0xf48 <_ZN9Interface6TasterEv>
    10a4:	48 2f       	mov	r20, r24
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	fa 01       	movw	r30, r20
    10aa:	b3 97       	sbiw	r30, 0x23	; 35
    10ac:	e7 31       	cpi	r30, 0x17	; 23
    10ae:	f1 05       	cpc	r31, r1
    10b0:	c0 f4       	brcc	.+48     	; 0x10e2 <_ZN9Interface7unifiedEv+0x40>
    10b2:	ea 5b       	subi	r30, 0xBA	; 186
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	0c 94 bc 25 	jmp	0x4b78	; 0x4b78 <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    10ba:	85 e7       	ldi	r24, 0x75	; 117
    10bc:	08 95       	ret
		break;
	case '3':
		return 'A';
    10be:	81 e4       	ldi	r24, 0x41	; 65
    10c0:	08 95       	ret
		break;
	case '4':
		return 'l';
    10c2:	8c e6       	ldi	r24, 0x6C	; 108
    10c4:	08 95       	ret
		break;
	case '5':
		return 'o';
    10c6:	8f e6       	ldi	r24, 0x6F	; 111
    10c8:	08 95       	ret
		break;
	case '6':
		return 'r';
    10ca:	82 e7       	ldi	r24, 0x72	; 114
    10cc:	08 95       	ret
		break;
	case '7':
		return 'Y';
    10ce:	89 e5       	ldi	r24, 0x59	; 89
    10d0:	08 95       	ret
		break;
	case '8':
		return 'd';
    10d2:	84 e6       	ldi	r24, 0x64	; 100
    10d4:	08 95       	ret
		break;
	case '9':
		return 'X';
    10d6:	88 e5       	ldi	r24, 0x58	; 88
    10d8:	08 95       	ret
		break;
	case '*':
		return 'e';
    10da:	85 e6       	ldi	r24, 0x65	; 101
    10dc:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    10de:	8d e6       	ldi	r24, 0x6D	; 109
    10e0:	08 95       	ret
		break;
	default:
		return ' ';
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    10e6:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    10e8:	08 95       	ret

000010ea <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    10f0:	ce 01       	movw	r24, r28
    10f2:	2a df       	rcall	.-428    	; 0xf48 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    10f4:	80 53       	subi	r24, 0x30	; 48
    10f6:	8a 30       	cpi	r24, 0x0A	; 10
    10f8:	d8 f7       	brcc	.-10     	; 0x10f0 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    1100:	46 96       	adiw	r24, 0x16	; 22
    1102:	cf ce       	rjmp	.-610    	; 0xea2 <_ZN3I2CD1Ev>
    1104:	08 95       	ret

00001106 <_ZN7LSM303D14LSM303_commandEhh>:
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	06 2f       	mov	r16, r22
    1110:	14 2f       	mov	r17, r20
    1112:	ec 01       	movw	r28, r24
    1114:	66 96       	adiw	r28, 0x16	; 22
    1116:	ce 01       	movw	r24, r28
    1118:	c5 de       	rcall	.-630    	; 0xea4 <_ZN3I2C9twi_startEv>
    111a:	6a e3       	ldi	r22, 0x3A	; 58
    111c:	ce 01       	movw	r24, r28
    111e:	ca de       	rcall	.-620    	; 0xeb4 <_ZN3I2C9twi_writeEh>
    1120:	60 2f       	mov	r22, r16
    1122:	ce 01       	movw	r24, r28
    1124:	c7 de       	rcall	.-626    	; 0xeb4 <_ZN3I2C9twi_writeEh>
    1126:	61 2f       	mov	r22, r17
    1128:	ce 01       	movw	r24, r28
    112a:	c4 de       	rcall	.-632    	; 0xeb4 <_ZN3I2C9twi_writeEh>
    112c:	ce 01       	movw	r24, r28
    112e:	be de       	rcall	.-644    	; 0xeac <_ZN3I2C8twi_stopEv>
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	6e e2       	ldi	r22, 0x2E	; 46
    113e:	e3 cf       	rjmp	.-58     	; 0x1106 <_ZN7LSM303D14LSM303_commandEhh>
    1140:	08 95       	ret

00001142 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    1148:	47 e4       	ldi	r20, 0x47	; 71
    114a:	60 e2       	ldi	r22, 0x20	; 32
    114c:	dc df       	rcall	.-72     	; 0x1106 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	61 e2       	ldi	r22, 0x21	; 33
    1152:	ce 01       	movw	r24, r28
    1154:	d8 df       	rcall	.-80     	; 0x1106 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	64 e2       	ldi	r22, 0x24	; 36
    115a:	ce 01       	movw	r24, r28
    115c:	d4 df       	rcall	.-88     	; 0x1106 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    115e:	ce 01       	movw	r24, r28
    1160:	ec df       	rcall	.-40     	; 0x113a <_ZN7LSM303D13ACCBypassmodeEv>
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	08 95       	ret

00001168 <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	ec 01       	movw	r28, r24
    116e:	46 96       	adiw	r24, 0x16	; 22
    1170:	94 de       	rcall	.-728    	; 0xe9a <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    1172:	1f 82       	std	Y+7, r1	; 0x07
    1174:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    1176:	18 86       	std	Y+8, r1	; 0x08
    1178:	19 86       	std	Y+9, r1	; 0x09
    117a:	1a 86       	std	Y+10, r1	; 0x0a
    117c:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    117e:	1c 86       	std	Y+12, r1	; 0x0c
    1180:	1d 86       	std	Y+13, r1	; 0x0d
    1182:	1e 86       	std	Y+14, r1	; 0x0e
    1184:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    1186:	19 8a       	std	Y+17, r1	; 0x11
    1188:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    118a:	1a 8a       	std	Y+18, r1	; 0x12
    118c:	1b 8a       	std	Y+19, r1	; 0x13
    118e:	1c 8a       	std	Y+20, r1	; 0x14
    1190:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    1192:	de 01       	movw	r26, r28
    1194:	a1 52       	subi	r26, 0x21	; 33
    1196:	bf 4f       	sbci	r27, 0xFF	; 255
    1198:	1d 92       	st	X+, r1
    119a:	1d 92       	st	X+, r1
    119c:	1d 92       	st	X+, r1
    119e:	1c 92       	st	X, r1
    11a0:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    11a2:	fe 01       	movw	r30, r28
    11a4:	ed 51       	subi	r30, 0x1D	; 29
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	10 82       	st	Z, r1
    11aa:	11 82       	std	Z+1, r1	; 0x01
    11ac:	12 82       	std	Z+2, r1	; 0x02
    11ae:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    11b0:	34 96       	adiw	r30, 0x04	; 4
    11b2:	8b e1       	ldi	r24, 0x1B	; 27
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    11ba:	19 82       	std	Y+1, r1	; 0x01
    11bc:	18 82       	st	Y, r1
    11be:	1b 82       	std	Y+3, r1	; 0x03
    11c0:	1a 82       	std	Y+2, r1	; 0x02
    11c2:	1d 82       	std	Y+5, r1	; 0x05
    11c4:	1c 82       	std	Y+4, r1	; 0x04
    11c6:	e0 5d       	subi	r30, 0xD0	; 208
    11c8:	f1 09       	sbc	r31, r1
    11ca:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    11cc:	11 92       	st	Z+, r1
    11ce:	11 92       	st	Z+, r1
    11d0:	11 92       	st	Z+, r1
    11d2:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    11d4:	e2 17       	cp	r30, r18
    11d6:	f3 07       	cpc	r31, r19
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    11da:	ce 01       	movw	r24, r28
    11dc:	b2 df       	rcall	.-156    	; 0x1142 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	08 95       	ret

000011e8 <_ZN3uhr11tastendruckEPh>:
    11e8:	fc 01       	movw	r30, r24
    11ea:	db 01       	movw	r26, r22
    11ec:	9c 91       	ld	r25, X
    11ee:	95 36       	cpi	r25, 0x65	; 101
    11f0:	39 f4       	brne	.+14     	; 0x1200 <_ZN3uhr11tastendruckEPh+0x18>
    11f2:	81 a5       	ldd	r24, Z+41	; 0x29
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	11 f4       	brne	.+4      	; 0x11fc <_ZN3uhr11tastendruckEPh+0x14>
    11f8:	11 a6       	std	Z+41, r1	; 0x29
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <_ZN3uhr11tastendruckEPh+0x18>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	81 a7       	std	Z+41, r24	; 0x29
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	08 95       	ret

00001204 <_ZN13einstellungen11tastendruckEPh>:
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret

00001208 <_ZN5menue11tastendruckEPh>:
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	08 95       	ret

0000120c <_ZN9offscreen4drawEv>:
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
    1212:	8f 89       	ldd	r24, Y+23	; 0x17
    1214:	98 8d       	ldd	r25, Y+24	; 0x18
    1216:	ec d9       	rcall	.-3112   	; 0x5f0 <_ZN7Display10clearFrameEv>
    1218:	8f 89       	ldd	r24, Y+23	; 0x17
    121a:	98 8d       	ldd	r25, Y+24	; 0x18
    121c:	63 da       	rcall	.-2874   	; 0x6e4 <_ZN7Display9sendFrameEv>
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <_ZN9wilkommen4drawEv>:
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
    1232:	8f 89       	ldd	r24, Y+23	; 0x17
    1234:	98 8d       	ldd	r25, Y+24	; 0x18
    1236:	dc d9       	rcall	.-3144   	; 0x5f0 <_ZN7Display10clearFrameEv>
    1238:	7e 01       	movw	r14, r28
    123a:	22 e0       	ldi	r18, 0x02	; 2
    123c:	e2 0e       	add	r14, r18
    123e:	f1 1c       	adc	r15, r1
    1240:	8f e0       	ldi	r24, 0x0F	; 15
    1242:	e6 e0       	ldi	r30, 0x06	; 6
    1244:	f1 e0       	ldi	r31, 0x01	; 1
    1246:	d7 01       	movw	r26, r14
    1248:	01 90       	ld	r0, Z+
    124a:	0d 92       	st	X+, r0
    124c:	8a 95       	dec	r24
    124e:	e1 f7       	brne	.-8      	; 0x1248 <_ZN9wilkommen4drawEv+0x24>
    1250:	8e e0       	ldi	r24, 0x0E	; 14
    1252:	8e 8b       	std	Y+22, r24	; 0x16
    1254:	00 e0       	ldi	r16, 0x00	; 0
    1256:	10 e0       	ldi	r17, 0x00	; 0
    1258:	fe 01       	movw	r30, r28
    125a:	e1 0f       	add	r30, r17
    125c:	f1 1d       	adc	r31, r1
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	40 2f       	mov	r20, r16
    1262:	62 81       	ldd	r22, Z+2	; 0x02
    1264:	8f 89       	ldd	r24, Y+23	; 0x17
    1266:	98 8d       	ldd	r25, Y+24	; 0x18
    1268:	db da       	rcall	.-2634   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    126a:	1f 5f       	subi	r17, 0xFF	; 255
    126c:	0a 5f       	subi	r16, 0xFA	; 250
    126e:	8e 89       	ldd	r24, Y+22	; 0x16
    1270:	18 17       	cp	r17, r24
    1272:	90 f3       	brcs	.-28     	; 0x1258 <_ZN9wilkommen4drawEv+0x34>
    1274:	8f e0       	ldi	r24, 0x0F	; 15
    1276:	e5 e1       	ldi	r30, 0x15	; 21
    1278:	f1 e0       	ldi	r31, 0x01	; 1
    127a:	d7 01       	movw	r26, r14
    127c:	01 90       	ld	r0, Z+
    127e:	0d 92       	st	X+, r0
    1280:	8a 95       	dec	r24
    1282:	e1 f7       	brne	.-8      	; 0x127c <_ZN9wilkommen4drawEv+0x58>
    1284:	8e e0       	ldi	r24, 0x0E	; 14
    1286:	8e 8b       	std	Y+22, r24	; 0x16
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	fe 01       	movw	r30, r28
    128e:	e1 0f       	add	r30, r17
    1290:	f1 1d       	adc	r31, r1
    1292:	28 e0       	ldi	r18, 0x08	; 8
    1294:	40 2f       	mov	r20, r16
    1296:	62 81       	ldd	r22, Z+2	; 0x02
    1298:	8f 89       	ldd	r24, Y+23	; 0x17
    129a:	98 8d       	ldd	r25, Y+24	; 0x18
    129c:	c1 da       	rcall	.-2686   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    129e:	1f 5f       	subi	r17, 0xFF	; 255
    12a0:	0a 5f       	subi	r16, 0xFA	; 250
    12a2:	8e 89       	ldd	r24, Y+22	; 0x16
    12a4:	18 17       	cp	r17, r24
    12a6:	90 f3       	brcs	.-28     	; 0x128c <_ZN9wilkommen4drawEv+0x68>
    12a8:	80 e4       	ldi	r24, 0x40	; 64
    12aa:	8f 93       	push	r24
    12ac:	81 e4       	ldi	r24, 0x41	; 65
    12ae:	8f 93       	push	r24
    12b0:	87 e4       	ldi	r24, 0x47	; 71
    12b2:	8f 93       	push	r24
    12b4:	8e ea       	ldi	r24, 0xAE	; 174
    12b6:	8f 93       	push	r24
    12b8:	84 e2       	ldi	r24, 0x24	; 36
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	9f 93       	push	r25
    12be:	8f 93       	push	r24
    12c0:	ff 92       	push	r15
    12c2:	ef 92       	push	r14
    12c4:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    12c8:	8e 8b       	std	Y+22, r24	; 0x16
    12ca:	2d b7       	in	r18, 0x3d	; 61
    12cc:	3e b7       	in	r19, 0x3e	; 62
    12ce:	28 5f       	subi	r18, 0xF8	; 248
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	3e bf       	out	0x3e, r19	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	2d bf       	out	0x3d, r18	; 61
    12dc:	88 23       	and	r24, r24
    12de:	81 f0       	breq	.+32     	; 0x1300 <_ZN9wilkommen4drawEv+0xdc>
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	fe 01       	movw	r30, r28
    12e6:	e1 0f       	add	r30, r17
    12e8:	f1 1d       	adc	r31, r1
    12ea:	20 e2       	ldi	r18, 0x20	; 32
    12ec:	40 2f       	mov	r20, r16
    12ee:	62 81       	ldd	r22, Z+2	; 0x02
    12f0:	8f 89       	ldd	r24, Y+23	; 0x17
    12f2:	98 8d       	ldd	r25, Y+24	; 0x18
    12f4:	95 da       	rcall	.-2774   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    12f6:	1f 5f       	subi	r17, 0xFF	; 255
    12f8:	0a 5f       	subi	r16, 0xFA	; 250
    12fa:	8e 89       	ldd	r24, Y+22	; 0x16
    12fc:	18 17       	cp	r17, r24
    12fe:	90 f3       	brcs	.-28     	; 0x12e4 <_ZN9wilkommen4drawEv+0xc0>
    1300:	8f 89       	ldd	r24, Y+23	; 0x17
    1302:	98 8d       	ldd	r25, Y+24	; 0x18
    1304:	ef d9       	rcall	.-3106   	; 0x6e4 <_ZN7Display9sendFrameEv>
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	08 95       	ret

00001314 <_Z8ADC_Readh>:
    1314:	ec e7       	ldi	r30, 0x7C	; 124
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	90 81       	ld	r25, Z
    131a:	8f 71       	andi	r24, 0x1F	; 31
    131c:	90 7e       	andi	r25, 0xE0	; 224
    131e:	89 2b       	or	r24, r25
    1320:	80 83       	st	Z, r24
    1322:	ea e7       	ldi	r30, 0x7A	; 122
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 64       	ori	r24, 0x40	; 64
    132a:	80 83       	st	Z, r24
    132c:	80 81       	ld	r24, Z
    132e:	86 fd       	sbrc	r24, 6
    1330:	fd cf       	rjmp	.-6      	; 0x132c <_Z8ADC_Readh+0x18>
    1332:	80 91 78 00 	lds	r24, 0x0078
    1336:	90 91 79 00 	lds	r25, 0x0079
    133a:	08 95       	ret

0000133c <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	e6 df       	rcall	.-52     	; 0x1314 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    1348:	bc 01       	movw	r22, r24
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 76 20 	call	0x40ec	; 0x40ec <__floatunsisf>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 ec       	ldi	r19, 0xC0	; 192
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	54 e4       	ldi	r21, 0x44	; 68
    135a:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    135e:	2c e5       	ldi	r18, 0x5C	; 92
    1360:	3f e8       	ldi	r19, 0x8F	; 143
    1362:	42 e5       	ldi	r20, 0x52	; 82
    1364:	50 e4       	ldi	r21, 0x40	; 64
    1366:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    136a:	2d e0       	ldi	r18, 0x0D	; 13
    136c:	31 e7       	ldi	r19, 0x71	; 113
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e4       	ldi	r21, 0x40	; 64
    1372:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    1376:	60 93 34 03 	sts	0x0334, r22
    137a:	70 93 35 03 	sts	0x0335, r23
    137e:	80 93 36 03 	sts	0x0336, r24
    1382:	90 93 37 03 	sts	0x0337, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    1386:	26 e6       	ldi	r18, 0x66	; 102
    1388:	36 e6       	ldi	r19, 0x66	; 102
    138a:	46 e6       	ldi	r20, 0x66	; 102
    138c:	50 e4       	ldi	r21, 0x40	; 64
    138e:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__subsf3>
    1392:	28 e9       	ldi	r18, 0x98	; 152
    1394:	39 e9       	ldi	r19, 0x99	; 153
    1396:	49 e1       	ldi	r20, 0x19	; 25
    1398:	5f e3       	ldi	r21, 0x3F	; 63
    139a:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	48 ec       	ldi	r20, 0xC8	; 200
    13a4:	52 e4       	ldi	r21, 0x42	; 66
    13a6:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    13aa:	6b 01       	movw	r12, r22
    13ac:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    13ba:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
	if (temp%10>=5)
    13be:	8d ec       	ldi	r24, 0xCD	; 205
    13c0:	68 9f       	mul	r22, r24
    13c2:	81 2d       	mov	r24, r1
    13c4:	11 24       	eor	r1, r1
    13c6:	86 95       	lsr	r24
    13c8:	86 95       	lsr	r24
    13ca:	86 95       	lsr	r24
    13cc:	88 0f       	add	r24, r24
    13ce:	28 2f       	mov	r18, r24
    13d0:	22 0f       	add	r18, r18
    13d2:	22 0f       	add	r18, r18
    13d4:	82 0f       	add	r24, r18
    13d6:	96 2f       	mov	r25, r22
    13d8:	98 1b       	sub	r25, r24
    13da:	95 30       	cpi	r25, 0x05	; 5
    13dc:	70 f0       	brcs	.+28     	; 0x13fa <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    13de:	c7 01       	movw	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	07 2e       	mov	r0, r23
    13ee:	00 0c       	add	r0, r0
    13f0:	88 0b       	sbc	r24, r24
    13f2:	99 0b       	sbc	r25, r25
    13f4:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    13fa:	c7 01       	movw	r24, r14
    13fc:	b6 01       	movw	r22, r12
    13fe:	0e 94 4a 20 	call	0x4094	; 0x4094 <__fixunssfsi>
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 76 20 	call	0x40ec	; 0x40ec <__floatunsisf>
	}
	return stat;
    140c:	0e 94 45 20 	call	0x408a	; 0x408a <__fixsfsi>
    1410:	86 2f       	mov	r24, r22
}
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
    141a:	08 95       	ret

0000141c <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    142e:	8f 89       	ldd	r24, Y+23	; 0x17
    1430:	98 8d       	ldd	r25, Y+24	; 0x18
    1432:	de d8       	rcall	.-3652   	; 0x5f0 <_ZN7Display10clearFrameEv>
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	e1 2c       	mov	r14, r1
    1438:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    143a:	e9 8d       	ldd	r30, Y+25	; 0x19
    143c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    143e:	ee 0d       	add	r30, r14
    1440:	ff 1d       	adc	r31, r15
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	41 2f       	mov	r20, r17
    1446:	60 81       	ld	r22, Z
    1448:	8f 89       	ldd	r24, Y+23	; 0x17
    144a:	98 8d       	ldd	r25, Y+24	; 0x18
    144c:	e9 d9       	rcall	.-3118   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	e8 1a       	sub	r14, r24
    1452:	f8 0a       	sbc	r15, r24
    1454:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    1456:	10 33       	cpi	r17, 0x30	; 48
    1458:	81 f7       	brne	.-32     	; 0x143a <_ZN5menue4drawEv+0x1e>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    145a:	70 df       	rcall	.-288    	; 0x133c <_Z14Batteriestatusv>
    145c:	7e 01       	movw	r14, r28
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	e9 0e       	add	r14, r25
    1462:	f1 1c       	adc	r15, r1
    1464:	28 2f       	mov	r18, r24
    1466:	08 2e       	mov	r0, r24
    1468:	00 0c       	add	r0, r0
    146a:	33 0b       	sbc	r19, r19
    146c:	3f 93       	push	r19
    146e:	8f 93       	push	r24
    1470:	82 e3       	ldi	r24, 0x32	; 50
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	9f 93       	push	r25
    1476:	8f 93       	push	r24
    1478:	ff 92       	push	r15
    147a:	ef 92       	push	r14
    147c:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1480:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1482:	15 e1       	ldi	r17, 0x15	; 21
    1484:	18 1b       	sub	r17, r24
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	15 31       	cpi	r17, 0x15	; 21
    1494:	08 f0       	brcs	.+2      	; 0x1498 <_ZN5menue4drawEv+0x7c>
    1496:	b6 c0       	rjmp	.+364    	; 0x1604 <_ZN5menue4drawEv+0x1e8>
    1498:	01 2f       	mov	r16, r17
    149a:	00 0f       	add	r16, r16
    149c:	01 0f       	add	r16, r17
    149e:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    14a0:	8e 89       	ldd	r24, Y+22	; 0x16
    14a2:	fe 01       	movw	r30, r28
    14a4:	e1 0f       	add	r30, r17
    14a6:	f1 1d       	adc	r31, r1
    14a8:	e8 0f       	add	r30, r24
    14aa:	f1 1d       	adc	r31, r1
    14ac:	73 97       	sbiw	r30, 0x13	; 19
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	40 2f       	mov	r20, r16
    14b2:	60 81       	ld	r22, Z
    14b4:	8f 89       	ldd	r24, Y+23	; 0x17
    14b6:	98 8d       	ldd	r25, Y+24	; 0x18
    14b8:	b3 d9       	rcall	.-3226   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    14ba:	1f 5f       	subi	r17, 0xFF	; 255
    14bc:	0a 5f       	subi	r16, 0xFA	; 250
    14be:	15 31       	cpi	r17, 0x15	; 21
    14c0:	79 f7       	brne	.-34     	; 0x14a0 <_ZN5menue4drawEv+0x84>
    14c2:	a0 c0       	rjmp	.+320    	; 0x1604 <_ZN5menue4drawEv+0x1e8>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    14c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    14c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    14c8:	ec 0d       	add	r30, r12
    14ca:	fd 1d       	adc	r31, r13
    14cc:	28 e3       	ldi	r18, 0x38	; 56
    14ce:	41 2f       	mov	r20, r17
    14d0:	60 85       	ldd	r22, Z+8	; 0x08
    14d2:	8f 89       	ldd	r24, Y+23	; 0x17
    14d4:	98 8d       	ldd	r25, Y+24	; 0x18
    14d6:	a4 d9       	rcall	.-3256   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	c8 1a       	sub	r12, r24
    14dc:	d8 0a       	sbc	r13, r24
    14de:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    14e0:	10 38       	cpi	r17, 0x80	; 128
    14e2:	81 f7       	brne	.-32     	; 0x14c4 <_ZN5menue4drawEv+0xa8>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    14e4:	85 e5       	ldi	r24, 0x55	; 85
    14e6:	98 e6       	ldi	r25, 0x68	; 104
    14e8:	a2 e7       	ldi	r26, 0x72	; 114
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	9b 83       	std	Y+3, r25	; 0x03
    14f0:	ac 83       	std	Y+4, r26	; 0x04
    14f2:	bd 83       	std	Y+5, r27	; 0x05
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	8e 8b       	std	Y+22, r24	; 0x16
    14f8:	0c e0       	ldi	r16, 0x0C	; 12
    14fa:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    14fc:	fe 01       	movw	r30, r28
    14fe:	e1 0f       	add	r30, r17
    1500:	f1 1d       	adc	r31, r1
    1502:	20 e1       	ldi	r18, 0x10	; 16
    1504:	40 2f       	mov	r20, r16
    1506:	62 81       	ldd	r22, Z+2	; 0x02
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	89 d9       	rcall	.-3310   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    150e:	1f 5f       	subi	r17, 0xFF	; 255
    1510:	0a 5f       	subi	r16, 0xFA	; 250
    1512:	8e 89       	ldd	r24, Y+22	; 0x16
    1514:	18 17       	cp	r17, r24
    1516:	90 f3       	brcs	.-28     	; 0x14fc <_ZN5menue4drawEv+0xe0>
		buffersize=sprintf(buffer,"Tacho");
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	ec e3       	ldi	r30, 0x3C	; 60
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	d7 01       	movw	r26, r14
    1520:	01 90       	ld	r0, Z+
    1522:	0d 92       	st	X+, r0
    1524:	8a 95       	dec	r24
    1526:	e1 f7       	brne	.-8      	; 0x1520 <_ZN5menue4drawEv+0x104>
    1528:	85 e0       	ldi	r24, 0x05	; 5
    152a:	8e 8b       	std	Y+22, r24	; 0x16
    152c:	0c e0       	ldi	r16, 0x0C	; 12
    152e:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    1530:	fe 01       	movw	r30, r28
    1532:	e1 0f       	add	r30, r17
    1534:	f1 1d       	adc	r31, r1
    1536:	28 e1       	ldi	r18, 0x18	; 24
    1538:	40 2f       	mov	r20, r16
    153a:	62 81       	ldd	r22, Z+2	; 0x02
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	6f d9       	rcall	.-3362   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1542:	1f 5f       	subi	r17, 0xFF	; 255
    1544:	0a 5f       	subi	r16, 0xFA	; 250
    1546:	8e 89       	ldd	r24, Y+22	; 0x16
    1548:	18 17       	cp	r17, r24
    154a:	90 f3       	brcs	.-28     	; 0x1530 <_ZN5menue4drawEv+0x114>
		buffersize=sprintf(buffer,"Wandern");
    154c:	88 e0       	ldi	r24, 0x08	; 8
    154e:	e2 e4       	ldi	r30, 0x42	; 66
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	d7 01       	movw	r26, r14
    1554:	01 90       	ld	r0, Z+
    1556:	0d 92       	st	X+, r0
    1558:	8a 95       	dec	r24
    155a:	e1 f7       	brne	.-8      	; 0x1554 <_ZN5menue4drawEv+0x138>
    155c:	87 e0       	ldi	r24, 0x07	; 7
    155e:	8e 8b       	std	Y+22, r24	; 0x16
    1560:	0c e0       	ldi	r16, 0x0C	; 12
    1562:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    1564:	fe 01       	movw	r30, r28
    1566:	e1 0f       	add	r30, r17
    1568:	f1 1d       	adc	r31, r1
    156a:	20 e2       	ldi	r18, 0x20	; 32
    156c:	40 2f       	mov	r20, r16
    156e:	62 81       	ldd	r22, Z+2	; 0x02
    1570:	8f 89       	ldd	r24, Y+23	; 0x17
    1572:	98 8d       	ldd	r25, Y+24	; 0x18
    1574:	55 d9       	rcall	.-3414   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1576:	1f 5f       	subi	r17, 0xFF	; 255
    1578:	0a 5f       	subi	r16, 0xFA	; 250
    157a:	8e 89       	ldd	r24, Y+22	; 0x16
    157c:	18 17       	cp	r17, r24
    157e:	90 f3       	brcs	.-28     	; 0x1564 <_ZN5menue4drawEv+0x148>
		buffersize=sprintf(buffer,"Einstellungen");
    1580:	8e e0       	ldi	r24, 0x0E	; 14
    1582:	ea e4       	ldi	r30, 0x4A	; 74
    1584:	f1 e0       	ldi	r31, 0x01	; 1
    1586:	d7 01       	movw	r26, r14
    1588:	01 90       	ld	r0, Z+
    158a:	0d 92       	st	X+, r0
    158c:	8a 95       	dec	r24
    158e:	e1 f7       	brne	.-8      	; 0x1588 <_ZN5menue4drawEv+0x16c>
    1590:	8d e0       	ldi	r24, 0x0D	; 13
    1592:	8e 8b       	std	Y+22, r24	; 0x16
    1594:	0c e0       	ldi	r16, 0x0C	; 12
    1596:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    1598:	fe 01       	movw	r30, r28
    159a:	e1 0f       	add	r30, r17
    159c:	f1 1d       	adc	r31, r1
    159e:	28 e2       	ldi	r18, 0x28	; 40
    15a0:	40 2f       	mov	r20, r16
    15a2:	62 81       	ldd	r22, Z+2	; 0x02
    15a4:	8f 89       	ldd	r24, Y+23	; 0x17
    15a6:	98 8d       	ldd	r25, Y+24	; 0x18
    15a8:	3b d9       	rcall	.-3466   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    15aa:	1f 5f       	subi	r17, 0xFF	; 255
    15ac:	0a 5f       	subi	r16, 0xFA	; 250
    15ae:	8e 89       	ldd	r24, Y+22	; 0x16
    15b0:	18 17       	cp	r17, r24
    15b2:	90 f3       	brcs	.-28     	; 0x1598 <_ZN5menue4drawEv+0x17c>
		buffersize=sprintf(buffer,"Display aus");
    15b4:	8c e0       	ldi	r24, 0x0C	; 12
    15b6:	e8 e5       	ldi	r30, 0x58	; 88
    15b8:	f1 e0       	ldi	r31, 0x01	; 1
    15ba:	d7 01       	movw	r26, r14
    15bc:	01 90       	ld	r0, Z+
    15be:	0d 92       	st	X+, r0
    15c0:	8a 95       	dec	r24
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <_ZN5menue4drawEv+0x1a0>
    15c4:	8b e0       	ldi	r24, 0x0B	; 11
    15c6:	8e 8b       	std	Y+22, r24	; 0x16
    15c8:	0c e0       	ldi	r16, 0x0C	; 12
    15ca:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    15cc:	fe 01       	movw	r30, r28
    15ce:	e1 0f       	add	r30, r17
    15d0:	f1 1d       	adc	r31, r1
    15d2:	20 e3       	ldi	r18, 0x30	; 48
    15d4:	40 2f       	mov	r20, r16
    15d6:	62 81       	ldd	r22, Z+2	; 0x02
    15d8:	8f 89       	ldd	r24, Y+23	; 0x17
    15da:	98 8d       	ldd	r25, Y+24	; 0x18
    15dc:	21 d9       	rcall	.-3518   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    15de:	1f 5f       	subi	r17, 0xFF	; 255
    15e0:	0a 5f       	subi	r16, 0xFA	; 250
    15e2:	8e 89       	ldd	r24, Y+22	; 0x16
    15e4:	18 17       	cp	r17, r24
    15e6:	90 f3       	brcs	.-28     	; 0x15cc <_ZN5menue4drawEv+0x1b0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    15e8:	2d a1       	ldd	r18, Y+37	; 0x25
    15ea:	22 0f       	add	r18, r18
    15ec:	22 0f       	add	r18, r18
    15ee:	22 0f       	add	r18, r18
    15f0:	20 5f       	subi	r18, 0xF0	; 240
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	6e e3       	ldi	r22, 0x3E	; 62
    15f6:	8f 89       	ldd	r24, Y+23	; 0x17
    15f8:	98 8d       	ldd	r25, Y+24	; 0x18
    15fa:	12 d9       	rcall	.-3548   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    15fc:	8f 89       	ldd	r24, Y+23	; 0x17
    15fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1600:	71 d8       	rcall	.-3870   	; 0x6e4 <_ZN7Display9sendFrameEv>
    1602:	04 c0       	rjmp	.+8      	; 0x160c <_ZN5menue4drawEv+0x1f0>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1604:	10 e5       	ldi	r17, 0x50	; 80
    1606:	c1 2c       	mov	r12, r1
    1608:	d1 2c       	mov	r13, r1
    160a:	5c cf       	rjmp	.-328    	; 0x14c4 <_ZN5menue4drawEv+0xa8>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	08 95       	ret

0000161e <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    161e:	af 92       	push	r10
    1620:	bf 92       	push	r11
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1634:	8f 89       	ldd	r24, Y+23	; 0x17
    1636:	98 8d       	ldd	r25, Y+24	; 0x18
    1638:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    163c:	7f de       	rcall	.-770    	; 0x133c <_Z14Batteriestatusv>
    163e:	5e 01       	movw	r10, r28
    1640:	22 e0       	ldi	r18, 0x02	; 2
    1642:	a2 0e       	add	r10, r18
    1644:	b1 1c       	adc	r11, r1
    1646:	28 2f       	mov	r18, r24
    1648:	08 2e       	mov	r0, r24
    164a:	00 0c       	add	r0, r0
    164c:	33 0b       	sbc	r19, r19
    164e:	3f 93       	push	r19
    1650:	8f 93       	push	r24
    1652:	84 e6       	ldi	r24, 0x64	; 100
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	9f 93       	push	r25
    1658:	8f 93       	push	r24
    165a:	bf 92       	push	r11
    165c:	af 92       	push	r10
    165e:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1662:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1664:	95 e1       	ldi	r25, 0x15	; 21
    1666:	09 2f       	mov	r16, r25
    1668:	08 1b       	sub	r16, r24
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	05 31       	cpi	r16, 0x15	; 21
    1678:	08 f0       	brcs	.+2      	; 0x167c <_ZN5tacho4drawEv+0x5e>
    167a:	c5 c1       	rjmp	.+906    	; 0x1a06 <_ZN5tacho4drawEv+0x3e8>
    167c:	e0 2e       	mov	r14, r16
    167e:	ee 0c       	add	r14, r14
    1680:	e0 0e       	add	r14, r16
    1682:	1e 2d       	mov	r17, r14
    1684:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1686:	8e 89       	ldd	r24, Y+22	; 0x16
    1688:	fe 01       	movw	r30, r28
    168a:	e0 0f       	add	r30, r16
    168c:	f1 1d       	adc	r31, r1
    168e:	e8 0f       	add	r30, r24
    1690:	f1 1d       	adc	r31, r1
    1692:	73 97       	sbiw	r30, 0x13	; 19
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	41 2f       	mov	r20, r17
    1698:	60 81       	ld	r22, Z
    169a:	8f 89       	ldd	r24, Y+23	; 0x17
    169c:	98 8d       	ldd	r25, Y+24	; 0x18
    169e:	c0 d8       	rcall	.-3712   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16a0:	0f 5f       	subi	r16, 0xFF	; 255
    16a2:	1a 5f       	subi	r17, 0xFA	; 250
    16a4:	05 31       	cpi	r16, 0x15	; 21
    16a6:	79 f7       	brne	.-34     	; 0x1686 <_ZN5tacho4drawEv+0x68>
    16a8:	ae c1       	rjmp	.+860    	; 0x1a06 <_ZN5tacho4drawEv+0x3e8>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    16aa:	e9 8d       	ldd	r30, Y+25	; 0x19
    16ac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    16ae:	ec 0d       	add	r30, r12
    16b0:	fd 1d       	adc	r31, r13
    16b2:	28 e3       	ldi	r18, 0x38	; 56
    16b4:	41 2f       	mov	r20, r17
    16b6:	60 85       	ldd	r22, Z+8	; 0x08
    16b8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ba:	98 8d       	ldd	r25, Y+24	; 0x18
    16bc:	b1 d8       	rcall	.-3742   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	c3 1a       	sub	r12, r19
    16c2:	d3 0a       	sbc	r13, r19
    16c4:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    16c6:	10 38       	cpi	r17, 0x80	; 128
    16c8:	81 f7       	brne	.-32     	; 0x16aa <_ZN5tacho4drawEv+0x8c>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    16ca:	20 e8       	ldi	r18, 0x80	; 128
    16cc:	47 e3       	ldi	r20, 0x37	; 55
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 8d       	ldd	r25, Y+24	; 0x18
    16d4:	8b d8       	rcall	.-3818   	; 0x7ec <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    16d6:	25 e4       	ldi	r18, 0x45	; 69
    16d8:	4f e0       	ldi	r20, 0x0F	; 15
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	85 d8       	rcall	.-3830   	; 0x7ec <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    16e2:	2b e3       	ldi	r18, 0x3B	; 59
    16e4:	47 e0       	ldi	r20, 0x07	; 7
    16e6:	65 e4       	ldi	r22, 0x45	; 69
    16e8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ea:	98 8d       	ldd	r25, Y+24	; 0x18
    16ec:	7f d8       	rcall	.-3842   	; 0x7ec <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    16ee:	20 e1       	ldi	r18, 0x10	; 16
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	65 e4       	ldi	r22, 0x45	; 69
    16f4:	8f 89       	ldd	r24, Y+23	; 0x17
    16f6:	98 8d       	ldd	r25, Y+24	; 0x18
    16f8:	5f d8       	rcall	.-3906   	; 0x7b8 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    16fa:	21 e4       	ldi	r18, 0x41	; 65
    16fc:	47 e2       	ldi	r20, 0x27	; 39
    16fe:	6f e3       	ldi	r22, 0x3F	; 63
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	73 d8       	rcall	.-3866   	; 0x7ec <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    1706:	20 e3       	ldi	r18, 0x30	; 48
    1708:	40 e1       	ldi	r20, 0x10	; 16
    170a:	6f e3       	ldi	r22, 0x3F	; 63
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	53 d8       	rcall	.-3930   	; 0x7b8 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    1712:	21 e4       	ldi	r18, 0x41	; 65
    1714:	48 e1       	ldi	r20, 0x18	; 24
    1716:	6f e3       	ldi	r22, 0x3F	; 63
    1718:	8f 89       	ldd	r24, Y+23	; 0x17
    171a:	98 8d       	ldd	r25, Y+24	; 0x18
    171c:	67 d8       	rcall	.-3890   	; 0x7ec <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    171e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1720:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1722:	60 81       	ld	r22, Z
    1724:	60 53       	subi	r22, 0x30	; 48
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	8f 89       	ldd	r24, Y+23	; 0x17
    172c:	98 8d       	ldd	r25, Y+24	; 0x18
    172e:	c2 d8       	rcall	.-3708   	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    1730:	e9 8d       	ldd	r30, Y+25	; 0x19
    1732:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1734:	61 81       	ldd	r22, Z+1	; 0x01
    1736:	60 53       	subi	r22, 0x30	; 48
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	40 e1       	ldi	r20, 0x10	; 16
    173c:	8f 89       	ldd	r24, Y+23	; 0x17
    173e:	98 8d       	ldd	r25, Y+24	; 0x18
    1740:	b9 d8       	rcall	.-3726   	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    1742:	e9 8d       	ldd	r30, Y+25	; 0x19
    1744:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1746:	63 81       	ldd	r22, Z+3	; 0x03
    1748:	60 53       	subi	r22, 0x30	; 48
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	45 e2       	ldi	r20, 0x25	; 37
    174e:	8f 89       	ldd	r24, Y+23	; 0x17
    1750:	98 8d       	ldd	r25, Y+24	; 0x18
    1752:	b0 d8       	rcall	.-3744   	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    1754:	e9 8d       	ldd	r30, Y+25	; 0x19
    1756:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1758:	64 81       	ldd	r22, Z+4	; 0x04
    175a:	60 53       	subi	r22, 0x30	; 48
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	45 e3       	ldi	r20, 0x35	; 53
    1760:	8f 89       	ldd	r24, Y+23	; 0x17
    1762:	98 8d       	ldd	r25, Y+24	; 0x18
    1764:	a7 d8       	rcall	.-3762   	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    1766:	80 91 cb 02 	lds	r24, 0x02CB
    176a:	8f 93       	push	r24
    176c:	80 91 ca 02 	lds	r24, 0x02CA
    1770:	8f 93       	push	r24
    1772:	80 91 c9 02 	lds	r24, 0x02C9
    1776:	8f 93       	push	r24
    1778:	80 91 c8 02 	lds	r24, 0x02C8
    177c:	8f 93       	push	r24
    177e:	8f e6       	ldi	r24, 0x6F	; 111
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	9f 93       	push	r25
    1784:	8f 93       	push	r24
    1786:	bf 92       	push	r11
    1788:	af 92       	push	r10
    178a:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    178e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    1790:	98 e0       	ldi	r25, 0x08	; 8
    1792:	09 2f       	mov	r16, r25
    1794:	08 1b       	sub	r16, r24
    1796:	8d b7       	in	r24, 0x3d	; 61
    1798:	9e b7       	in	r25, 0x3e	; 62
    179a:	08 96       	adiw	r24, 0x08	; 8
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	9e bf       	out	0x3e, r25	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	8d bf       	out	0x3d, r24	; 61
    17a6:	08 30       	cpi	r16, 0x08	; 8
    17a8:	e8 f4       	brcc	.+58     	; 0x17e4 <_ZN5tacho4drawEv+0x1c6>
    17aa:	10 2f       	mov	r17, r16
    17ac:	12 95       	swap	r17
    17ae:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    17b0:	8e 89       	ldd	r24, Y+22	; 0x16
    17b2:	fe 01       	movw	r30, r28
    17b4:	e0 0f       	add	r30, r16
    17b6:	f1 1d       	adc	r31, r1
    17b8:	e8 0f       	add	r30, r24
    17ba:	f1 1d       	adc	r31, r1
    17bc:	36 97       	sbiw	r30, 0x06	; 6
    17be:	60 81       	ld	r22, Z
    17c0:	6e 32       	cpi	r22, 0x2E	; 46
    17c2:	31 f4       	brne	.+12     	; 0x17d0 <_ZN5tacho4drawEv+0x1b2>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    17c4:	20 e2       	ldi	r18, 0x20	; 32
    17c6:	41 2f       	mov	r20, r17
    17c8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ca:	98 8d       	ldd	r25, Y+24	; 0x18
    17cc:	29 d8       	rcall	.-4014   	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <_ZN5tacho4drawEv+0x1be>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    17d0:	60 53       	subi	r22, 0x30	; 48
    17d2:	28 e1       	ldi	r18, 0x18	; 24
    17d4:	41 2f       	mov	r20, r17
    17d6:	8f 89       	ldd	r24, Y+23	; 0x17
    17d8:	98 8d       	ldd	r25, Y+24	; 0x18
    17da:	6c d8       	rcall	.-3880   	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    17dc:	0f 5f       	subi	r16, 0xFF	; 255
    17de:	10 5f       	subi	r17, 0xF0	; 240
    17e0:	08 30       	cpi	r16, 0x08	; 8
    17e2:	31 f7       	brne	.-52     	; 0x17b0 <_ZN5tacho4drawEv+0x192>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a e7       	ldi	r20, 0x7A	; 122
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	60 91 c4 02 	lds	r22, 0x02C4
    17f0:	70 91 c5 02 	lds	r23, 0x02C5
    17f4:	80 91 c6 02 	lds	r24, 0x02C6
    17f8:	90 91 c7 02 	lds	r25, 0x02C7
    17fc:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    1800:	9f 93       	push	r25
    1802:	8f 93       	push	r24
    1804:	7f 93       	push	r23
    1806:	6f 93       	push	r22
    1808:	85 e7       	ldi	r24, 0x75	; 117
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	9f 93       	push	r25
    180e:	8f 93       	push	r24
    1810:	bf 92       	push	r11
    1812:	af 92       	push	r10
    1814:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1818:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    181a:	2d b7       	in	r18, 0x3d	; 61
    181c:	3e b7       	in	r19, 0x3e	; 62
    181e:	28 5f       	subi	r18, 0xF8	; 248
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	3e bf       	out	0x3e, r19	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	2d bf       	out	0x3d, r18	; 61
    182c:	88 23       	and	r24, r24
    182e:	89 f0       	breq	.+34     	; 0x1852 <_ZN5tacho4drawEv+0x234>
    1830:	16 e4       	ldi	r17, 0x46	; 70
    1832:	f1 2c       	mov	r15, r1
    1834:	fe 01       	movw	r30, r28
    1836:	ef 0d       	add	r30, r15
    1838:	f1 1d       	adc	r31, r1
    183a:	20 e1       	ldi	r18, 0x10	; 16
    183c:	41 2f       	mov	r20, r17
    183e:	62 81       	ldd	r22, Z+2	; 0x02
    1840:	8f 89       	ldd	r24, Y+23	; 0x17
    1842:	98 8d       	ldd	r25, Y+24	; 0x18
    1844:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1848:	f3 94       	inc	r15
    184a:	1a 5f       	subi	r17, 0xFA	; 250
    184c:	8e 89       	ldd	r24, Y+22	; 0x16
    184e:	f8 16       	cp	r15, r24
    1850:	88 f3       	brcs	.-30     	; 0x1834 <_ZN5tacho4drawEv+0x216>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    1852:	80 91 c3 02 	lds	r24, 0x02C3
    1856:	8f 93       	push	r24
    1858:	80 91 c2 02 	lds	r24, 0x02C2
    185c:	8f 93       	push	r24
    185e:	80 91 c1 02 	lds	r24, 0x02C1
    1862:	8f 93       	push	r24
    1864:	80 91 c0 02 	lds	r24, 0x02C0
    1868:	8f 93       	push	r24
    186a:	8c e7       	ldi	r24, 0x7C	; 124
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	9f 93       	push	r25
    1870:	8f 93       	push	r24
    1872:	bf 92       	push	r11
    1874:	af 92       	push	r10
    1876:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    187a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    187c:	2d b7       	in	r18, 0x3d	; 61
    187e:	3e b7       	in	r19, 0x3e	; 62
    1880:	28 5f       	subi	r18, 0xF8	; 248
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	3e bf       	out	0x3e, r19	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	2d bf       	out	0x3d, r18	; 61
    188e:	88 23       	and	r24, r24
    1890:	89 f0       	breq	.+34     	; 0x18b4 <_ZN5tacho4drawEv+0x296>
    1892:	16 e4       	ldi	r17, 0x46	; 70
    1894:	f1 2c       	mov	r15, r1
    1896:	fe 01       	movw	r30, r28
    1898:	ef 0d       	add	r30, r15
    189a:	f1 1d       	adc	r31, r1
    189c:	28 e2       	ldi	r18, 0x28	; 40
    189e:	41 2f       	mov	r20, r17
    18a0:	62 81       	ldd	r22, Z+2	; 0x02
    18a2:	8f 89       	ldd	r24, Y+23	; 0x17
    18a4:	98 8d       	ldd	r25, Y+24	; 0x18
    18a6:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    18aa:	f3 94       	inc	r15
    18ac:	1a 5f       	subi	r17, 0xFA	; 250
    18ae:	8e 89       	ldd	r24, Y+22	; 0x16
    18b0:	f8 16       	cp	r15, r24
    18b2:	88 f3       	brcs	.-30     	; 0x1896 <_ZN5tacho4drawEv+0x278>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    18b4:	c0 90 bc 02 	lds	r12, 0x02BC
    18b8:	d0 90 bd 02 	lds	r13, 0x02BD
    18bc:	e0 90 be 02 	lds	r14, 0x02BE
    18c0:	f0 90 bf 02 	lds	r15, 0x02BF
    18c4:	c7 01       	movw	r24, r14
    18c6:	b6 01       	movw	r22, r12
    18c8:	2c e3       	ldi	r18, 0x3C	; 60
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__udivmodsi4>
    18d4:	1f 92       	push	r1
    18d6:	6f 93       	push	r22
    18d8:	1f 92       	push	r1
    18da:	2f 93       	push	r18
    18dc:	c7 01       	movw	r24, r14
    18de:	b6 01       	movw	r22, r12
    18e0:	20 e1       	ldi	r18, 0x10	; 16
    18e2:	3e e0       	ldi	r19, 0x0E	; 14
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__udivmodsi4>
    18ec:	1f 92       	push	r1
    18ee:	2f 93       	push	r18
    18f0:	85 e8       	ldi	r24, 0x85	; 133
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	bf 92       	push	r11
    18fa:	af 92       	push	r10
    18fc:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1900:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    1902:	2d b7       	in	r18, 0x3d	; 61
    1904:	3e b7       	in	r19, 0x3e	; 62
    1906:	26 5f       	subi	r18, 0xF6	; 246
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	3e bf       	out	0x3e, r19	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	2d bf       	out	0x3d, r18	; 61
    1914:	88 23       	and	r24, r24
    1916:	89 f0       	breq	.+34     	; 0x193a <_ZN5tacho4drawEv+0x31c>
    1918:	16 e4       	ldi	r17, 0x46	; 70
    191a:	f1 2c       	mov	r15, r1
    191c:	fe 01       	movw	r30, r28
    191e:	ef 0d       	add	r30, r15
    1920:	f1 1d       	adc	r31, r1
    1922:	20 e3       	ldi	r18, 0x30	; 48
    1924:	41 2f       	mov	r20, r17
    1926:	62 81       	ldd	r22, Z+2	; 0x02
    1928:	8f 89       	ldd	r24, Y+23	; 0x17
    192a:	98 8d       	ldd	r25, Y+24	; 0x18
    192c:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1930:	f3 94       	inc	r15
    1932:	1a 5f       	subi	r17, 0xFA	; 250
    1934:	8e 89       	ldd	r24, Y+22	; 0x16
    1936:	f8 16       	cp	r15, r24
    1938:	88 f3       	brcs	.-30     	; 0x191c <_ZN5tacho4drawEv+0x2fe>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    193a:	60 91 bc 02 	lds	r22, 0x02BC
    193e:	70 91 bd 02 	lds	r23, 0x02BD
    1942:	80 91 be 02 	lds	r24, 0x02BE
    1946:	90 91 bf 02 	lds	r25, 0x02BF
    194a:	61 15       	cp	r22, r1
    194c:	71 05       	cpc	r23, r1
    194e:	81 05       	cpc	r24, r1
    1950:	91 05       	cpc	r25, r1
    1952:	b1 f4       	brne	.+44     	; 0x1980 <_ZN5tacho4drawEv+0x362>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    1954:	1f 92       	push	r1
    1956:	1f 92       	push	r1
    1958:	1f 92       	push	r1
    195a:	1f 92       	push	r1
    195c:	8c e7       	ldi	r24, 0x7C	; 124
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	9f 93       	push	r25
    1962:	8f 93       	push	r24
    1964:	bf 92       	push	r11
    1966:	af 92       	push	r10
    1968:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    196c:	8e 8b       	std	Y+22, r24	; 0x16
    196e:	8d b7       	in	r24, 0x3d	; 61
    1970:	9e b7       	in	r25, 0x3e	; 62
    1972:	08 96       	adiw	r24, 0x08	; 8
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	9e bf       	out	0x3e, r25	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	8d bf       	out	0x3d, r24	; 61
    197e:	2a c0       	rjmp	.+84     	; 0x19d4 <_ZN5tacho4drawEv+0x3b6>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    1980:	0e 94 76 20 	call	0x40ec	; 0x40ec <__floatunsisf>
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	60 91 c4 02 	lds	r22, 0x02C4
    198c:	70 91 c5 02 	lds	r23, 0x02C5
    1990:	80 91 c6 02 	lds	r24, 0x02C6
    1994:	90 91 c7 02 	lds	r25, 0x02C7
    1998:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    199c:	26 e6       	ldi	r18, 0x66	; 102
    199e:	36 e6       	ldi	r19, 0x66	; 102
    19a0:	46 e6       	ldi	r20, 0x66	; 102
    19a2:	50 e4       	ldi	r21, 0x40	; 64
    19a4:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    19a8:	9f 93       	push	r25
    19aa:	8f 93       	push	r24
    19ac:	7f 93       	push	r23
    19ae:	6f 93       	push	r22
    19b0:	8c e7       	ldi	r24, 0x7C	; 124
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	bf 92       	push	r11
    19ba:	af 92       	push	r10
    19bc:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    19c0:	8e 8b       	std	Y+22, r24	; 0x16
    19c2:	2d b7       	in	r18, 0x3d	; 61
    19c4:	3e b7       	in	r19, 0x3e	; 62
    19c6:	28 5f       	subi	r18, 0xF8	; 248
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	3e bf       	out	0x3e, r19	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    19d4:	8e 89       	ldd	r24, Y+22	; 0x16
    19d6:	88 23       	and	r24, r24
    19d8:	89 f0       	breq	.+34     	; 0x19fc <_ZN5tacho4drawEv+0x3de>
    19da:	0b e4       	ldi	r16, 0x4B	; 75
    19dc:	10 e0       	ldi	r17, 0x00	; 0
    19de:	fe 01       	movw	r30, r28
    19e0:	e1 0f       	add	r30, r17
    19e2:	f1 1d       	adc	r31, r1
    19e4:	28 e0       	ldi	r18, 0x08	; 8
    19e6:	40 2f       	mov	r20, r16
    19e8:	62 81       	ldd	r22, Z+2	; 0x02
    19ea:	8f 89       	ldd	r24, Y+23	; 0x17
    19ec:	98 8d       	ldd	r25, Y+24	; 0x18
    19ee:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    19f2:	1f 5f       	subi	r17, 0xFF	; 255
    19f4:	0a 5f       	subi	r16, 0xFA	; 250
    19f6:	8e 89       	ldd	r24, Y+22	; 0x16
    19f8:	18 17       	cp	r17, r24
    19fa:	88 f3       	brcs	.-30     	; 0x19de <_ZN5tacho4drawEv+0x3c0>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    19fc:	8f 89       	ldd	r24, Y+23	; 0x17
    19fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1a00:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN7Display9sendFrameEv>
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <_ZN5tacho4drawEv+0x3f0>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    1a06:	10 e5       	ldi	r17, 0x50	; 80
    1a08:	c1 2c       	mov	r12, r1
    1a0a:	d1 2c       	mov	r13, r1
    1a0c:	4e ce       	rjmp	.-868    	; 0x16aa <_ZN5tacho4drawEv+0x8c>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	bf 90       	pop	r11
    1a20:	af 90       	pop	r10
    1a22:	08 95       	ret

00001a24 <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1a32:	8f 89       	ldd	r24, Y+23	; 0x17
    1a34:	98 8d       	ldd	r25, Y+24	; 0x18
    1a36:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
    1a3a:	11 e4       	ldi	r17, 0x41	; 65
    1a3c:	e1 2c       	mov	r14, r1
    1a3e:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    1a40:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a42:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1a44:	ee 0d       	add	r30, r14
    1a46:	ff 1d       	adc	r31, r15
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	41 2f       	mov	r20, r17
    1a4c:	60 81       	ld	r22, Z
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1a56:	8f ef       	ldi	r24, 0xFF	; 255
    1a58:	e8 1a       	sub	r14, r24
    1a5a:	f8 0a       	sbc	r15, r24
    1a5c:	1a 5f       	subi	r17, 0xFA	; 250
    1a5e:	1f 35       	cpi	r17, 0x5F	; 95
    1a60:	79 f7       	brne	.-34     	; 0x1a40 <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    1a62:	6c dc       	rcall	.-1832   	; 0x133c <_Z14Batteriestatusv>
    1a64:	28 2f       	mov	r18, r24
    1a66:	08 2e       	mov	r0, r24
    1a68:	00 0c       	add	r0, r0
    1a6a:	33 0b       	sbc	r19, r19
    1a6c:	3f 93       	push	r19
    1a6e:	8f 93       	push	r24
    1a70:	8a e6       	ldi	r24, 0x6A	; 106
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	9f 93       	push	r25
    1a76:	8f 93       	push	r24
    1a78:	ce 01       	movw	r24, r28
    1a7a:	02 96       	adiw	r24, 0x02	; 2
    1a7c:	9f 93       	push	r25
    1a7e:	8f 93       	push	r24
    1a80:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1a84:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1a86:	15 e1       	ldi	r17, 0x15	; 21
    1a88:	18 1b       	sub	r17, r24
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	15 31       	cpi	r17, 0x15	; 21
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <_ZN3uhr4drawEv+0x78>
    1a9a:	5f c0       	rjmp	.+190    	; 0x1b5a <_ZN3uhr4drawEv+0x136>
    1a9c:	01 2f       	mov	r16, r17
    1a9e:	00 0f       	add	r16, r16
    1aa0:	01 0f       	add	r16, r17
    1aa2:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1aa4:	8e 89       	ldd	r24, Y+22	; 0x16
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e1 0f       	add	r30, r17
    1aaa:	f1 1d       	adc	r31, r1
    1aac:	e8 0f       	add	r30, r24
    1aae:	f1 1d       	adc	r31, r1
    1ab0:	73 97       	sbiw	r30, 0x13	; 19
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	40 2f       	mov	r20, r16
    1ab6:	60 81       	ld	r22, Z
    1ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aba:	98 8d       	ldd	r25, Y+24	; 0x18
    1abc:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1ac0:	1f 5f       	subi	r17, 0xFF	; 255
    1ac2:	0a 5f       	subi	r16, 0xFA	; 250
    1ac4:	15 31       	cpi	r17, 0x15	; 21
    1ac6:	71 f7       	brne	.-36     	; 0x1aa4 <_ZN3uhr4drawEv+0x80>
    1ac8:	48 c0       	rjmp	.+144    	; 0x1b5a <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    1aca:	e9 8d       	ldd	r30, Y+25	; 0x19
    1acc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ace:	ee 0d       	add	r30, r14
    1ad0:	ff 1d       	adc	r31, r15
    1ad2:	28 e3       	ldi	r18, 0x38	; 56
    1ad4:	41 2f       	mov	r20, r17
    1ad6:	60 85       	ldd	r22, Z+8	; 0x08
    1ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ada:	98 8d       	ldd	r25, Y+24	; 0x18
    1adc:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	e8 1a       	sub	r14, r24
    1ae4:	f8 0a       	sbc	r15, r24
    1ae6:	1a 5f       	subi	r17, 0xFA	; 250
    1ae8:	11 37       	cpi	r17, 0x71	; 113
    1aea:	79 f7       	brne	.-34     	; 0x1aca <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    1aec:	e9 8d       	ldd	r30, Y+25	; 0x19
    1aee:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1af0:	09 a5       	ldd	r16, Y+41	; 0x29
    1af2:	22 89       	ldd	r18, Z+18	; 0x12
    1af4:	41 89       	ldd	r20, Z+17	; 0x11
    1af6:	60 89       	ldd	r22, Z+16	; 0x10
    1af8:	8f 89       	ldd	r24, Y+23	; 0x17
    1afa:	98 8d       	ldd	r25, Y+24	; 0x18
    1afc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    1b00:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b02:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b04:	60 81       	ld	r22, Z
    1b06:	60 53       	subi	r22, 0x30	; 48
    1b08:	2d e0       	ldi	r18, 0x0D	; 13
    1b0a:	46 e4       	ldi	r20, 0x46	; 70
    1b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b10:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1b14:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b16:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b18:	61 81       	ldd	r22, Z+1	; 0x01
    1b1a:	60 53       	subi	r22, 0x30	; 48
    1b1c:	2d e0       	ldi	r18, 0x0D	; 13
    1b1e:	46 e5       	ldi	r20, 0x56	; 86
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    1b28:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b2a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b2c:	63 81       	ldd	r22, Z+3	; 0x03
    1b2e:	60 53       	subi	r22, 0x30	; 48
    1b30:	22 e2       	ldi	r18, 0x22	; 34
    1b32:	46 e4       	ldi	r20, 0x46	; 70
    1b34:	8f 89       	ldd	r24, Y+23	; 0x17
    1b36:	98 8d       	ldd	r25, Y+24	; 0x18
    1b38:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1b3c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b3e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b40:	64 81       	ldd	r22, Z+4	; 0x04
    1b42:	60 53       	subi	r22, 0x30	; 48
    1b44:	22 e2       	ldi	r18, 0x22	; 34
    1b46:	46 e5       	ldi	r20, 0x56	; 86
    1b48:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1b50:	8f 89       	ldd	r24, Y+23	; 0x17
    1b52:	98 8d       	ldd	r25, Y+24	; 0x18
    1b54:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN7Display9sendFrameEv>
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1b5a:	11 e4       	ldi	r17, 0x41	; 65
    1b5c:	e1 2c       	mov	r14, r1
    1b5e:	f1 2c       	mov	r15, r1
    1b60:	b4 cf       	rjmp	.-152    	; 0x1aca <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	08 95       	ret

00001b70 <_ZN7wandern4drawEv>:
			EEPROM_Write(EEJAHR,rtc->Jahr);
		}
		return 0;
	}
	
	void draw(){
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1b82:	8f 89       	ldd	r24, Y+23	; 0x17
    1b84:	98 8d       	ldd	r25, Y+24	; 0x18
    1b86:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
    1b8a:	10 e0       	ldi	r17, 0x00	; 0
    1b8c:	e1 2c       	mov	r14, r1
    1b8e:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    1b90:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b92:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b94:	ee 0d       	add	r30, r14
    1b96:	ff 1d       	adc	r31, r15
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	41 2f       	mov	r20, r17
    1b9c:	60 81       	ld	r22, Z
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1ba6:	2f ef       	ldi	r18, 0xFF	; 255
    1ba8:	e2 1a       	sub	r14, r18
    1baa:	f2 0a       	sbc	r15, r18
    1bac:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    1bae:	10 33       	cpi	r17, 0x30	; 48
    1bb0:	79 f7       	brne	.-34     	; 0x1b90 <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1bb2:	c4 db       	rcall	.-2168   	; 0x133c <_Z14Batteriestatusv>
    1bb4:	7e 01       	movw	r14, r28
    1bb6:	32 e0       	ldi	r19, 0x02	; 2
    1bb8:	e3 0e       	add	r14, r19
    1bba:	f1 1c       	adc	r15, r1
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	08 2e       	mov	r0, r24
    1bc0:	00 0c       	add	r0, r0
    1bc2:	33 0b       	sbc	r19, r19
    1bc4:	3f 93       	push	r19
    1bc6:	8f 93       	push	r24
    1bc8:	82 e3       	ldi	r24, 0x32	; 50
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	9f 93       	push	r25
    1bce:	8f 93       	push	r24
    1bd0:	ff 92       	push	r15
    1bd2:	ef 92       	push	r14
    1bd4:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1bd8:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1bda:	15 e1       	ldi	r17, 0x15	; 21
    1bdc:	18 1b       	sub	r17, r24
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	15 31       	cpi	r17, 0x15	; 21
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <_ZN7wandern4drawEv+0x80>
    1bee:	cc c0       	rjmp	.+408    	; 0x1d88 <_ZN7wandern4drawEv+0x218>
    1bf0:	01 2f       	mov	r16, r17
    1bf2:	00 0f       	add	r16, r16
    1bf4:	01 0f       	add	r16, r17
    1bf6:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1bf8:	8e 89       	ldd	r24, Y+22	; 0x16
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e1 0f       	add	r30, r17
    1bfe:	f1 1d       	adc	r31, r1
    1c00:	e8 0f       	add	r30, r24
    1c02:	f1 1d       	adc	r31, r1
    1c04:	73 97       	sbiw	r30, 0x13	; 19
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	40 2f       	mov	r20, r16
    1c0a:	60 81       	ld	r22, Z
    1c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c10:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1c14:	1f 5f       	subi	r17, 0xFF	; 255
    1c16:	0a 5f       	subi	r16, 0xFA	; 250
    1c18:	15 31       	cpi	r17, 0x15	; 21
    1c1a:	71 f7       	brne	.-36     	; 0x1bf8 <_ZN7wandern4drawEv+0x88>
    1c1c:	b5 c0       	rjmp	.+362    	; 0x1d88 <_ZN7wandern4drawEv+0x218>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1c1e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c20:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c22:	ec 0d       	add	r30, r12
    1c24:	fd 1d       	adc	r31, r13
    1c26:	28 e3       	ldi	r18, 0x38	; 56
    1c28:	41 2f       	mov	r20, r17
    1c2a:	60 85       	ldd	r22, Z+8	; 0x08
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	c8 1a       	sub	r12, r24
    1c38:	d8 0a       	sbc	r13, r24
    1c3a:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1c3c:	10 38       	cpi	r17, 0x80	; 128
    1c3e:	79 f7       	brne	.-34     	; 0x1c1e <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"Data: %c%c%c%c%c",gpsdata[0],gpsdata[1],gpsdata[2],gpsdata[3],gpsdata[4]);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
		*/
		
		//Latitude
		buffersize=sprintf(buffer,"Lat: %.5f",lat);
    1c40:	80 91 dd 02 	lds	r24, 0x02DD
    1c44:	8f 93       	push	r24
    1c46:	80 91 dc 02 	lds	r24, 0x02DC
    1c4a:	8f 93       	push	r24
    1c4c:	80 91 db 02 	lds	r24, 0x02DB
    1c50:	8f 93       	push	r24
    1c52:	80 91 da 02 	lds	r24, 0x02DA
    1c56:	8f 93       	push	r24
    1c58:	84 e9       	ldi	r24, 0x94	; 148
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	9f 93       	push	r25
    1c5e:	8f 93       	push	r24
    1c60:	ff 92       	push	r15
    1c62:	ef 92       	push	r14
    1c64:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1c68:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1c6a:	2d b7       	in	r18, 0x3d	; 61
    1c6c:	3e b7       	in	r19, 0x3e	; 62
    1c6e:	28 5f       	subi	r18, 0xF8	; 248
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	3e bf       	out	0x3e, r19	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	2d bf       	out	0x3d, r18	; 61
    1c7c:	88 23       	and	r24, r24
    1c7e:	89 f0       	breq	.+34     	; 0x1ca2 <_ZN7wandern4drawEv+0x132>
    1c80:	00 e0       	ldi	r16, 0x00	; 0
    1c82:	10 e0       	ldi	r17, 0x00	; 0
    1c84:	fe 01       	movw	r30, r28
    1c86:	e1 0f       	add	r30, r17
    1c88:	f1 1d       	adc	r31, r1
    1c8a:	20 e1       	ldi	r18, 0x10	; 16
    1c8c:	40 2f       	mov	r20, r16
    1c8e:	62 81       	ldd	r22, Z+2	; 0x02
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1c98:	1f 5f       	subi	r17, 0xFF	; 255
    1c9a:	0a 5f       	subi	r16, 0xFA	; 250
    1c9c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c9e:	18 17       	cp	r17, r24
    1ca0:	88 f3       	brcs	.-30     	; 0x1c84 <_ZN7wandern4drawEv+0x114>
			
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.5f",lon);
    1ca2:	80 91 d9 02 	lds	r24, 0x02D9
    1ca6:	8f 93       	push	r24
    1ca8:	80 91 d8 02 	lds	r24, 0x02D8
    1cac:	8f 93       	push	r24
    1cae:	80 91 d7 02 	lds	r24, 0x02D7
    1cb2:	8f 93       	push	r24
    1cb4:	80 91 d6 02 	lds	r24, 0x02D6
    1cb8:	8f 93       	push	r24
    1cba:	8e e9       	ldi	r24, 0x9E	; 158
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	9f 93       	push	r25
    1cc0:	8f 93       	push	r24
    1cc2:	ff 92       	push	r15
    1cc4:	ef 92       	push	r14
    1cc6:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1cca:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1ccc:	2d b7       	in	r18, 0x3d	; 61
    1cce:	3e b7       	in	r19, 0x3e	; 62
    1cd0:	28 5f       	subi	r18, 0xF8	; 248
    1cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	3e bf       	out	0x3e, r19	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	2d bf       	out	0x3d, r18	; 61
    1cde:	88 23       	and	r24, r24
    1ce0:	89 f0       	breq	.+34     	; 0x1d04 <_ZN7wandern4drawEv+0x194>
    1ce2:	00 e0       	ldi	r16, 0x00	; 0
    1ce4:	10 e0       	ldi	r17, 0x00	; 0
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e1 0f       	add	r30, r17
    1cea:	f1 1d       	adc	r31, r1
    1cec:	28 e1       	ldi	r18, 0x18	; 24
    1cee:	40 2f       	mov	r20, r16
    1cf0:	62 81       	ldd	r22, Z+2	; 0x02
    1cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf6:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1cfa:	1f 5f       	subi	r17, 0xFF	; 255
    1cfc:	0a 5f       	subi	r16, 0xFA	; 250
    1cfe:	8e 89       	ldd	r24, Y+22	; 0x16
    1d00:	18 17       	cp	r17, r24
    1d02:	88 f3       	brcs	.-30     	; 0x1ce6 <_ZN7wandern4drawEv+0x176>
		/*
		for(uint8_t i=18;i<35;i++){oled->draw_ASCI(gpsdata[i],(i-18)*charsize,4*charhighte);}
			*/
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    1d04:	80 91 cc 02 	lds	r24, 0x02CC
    1d08:	1f 92       	push	r1
    1d0a:	8f 93       	push	r24
    1d0c:	80 91 cd 02 	lds	r24, 0x02CD
    1d10:	1f 92       	push	r1
    1d12:	8f 93       	push	r24
    1d14:	80 91 ce 02 	lds	r24, 0x02CE
    1d18:	1f 92       	push	r1
    1d1a:	8f 93       	push	r24
    1d1c:	80 91 cf 02 	lds	r24, 0x02CF
    1d20:	1f 92       	push	r1
    1d22:	8f 93       	push	r24
    1d24:	80 91 d0 02 	lds	r24, 0x02D0
    1d28:	1f 92       	push	r1
    1d2a:	8f 93       	push	r24
    1d2c:	80 91 d1 02 	lds	r24, 0x02D1
    1d30:	1f 92       	push	r1
    1d32:	8f 93       	push	r24
    1d34:	88 ea       	ldi	r24, 0xA8	; 168
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	9f 93       	push	r25
    1d3a:	8f 93       	push	r24
    1d3c:	ff 92       	push	r15
    1d3e:	ef 92       	push	r14
    1d40:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    1d44:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1d46:	2d b7       	in	r18, 0x3d	; 61
    1d48:	3e b7       	in	r19, 0x3e	; 62
    1d4a:	20 5f       	subi	r18, 0xF0	; 240
    1d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	3e bf       	out	0x3e, r19	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	2d bf       	out	0x3d, r18	; 61
    1d58:	88 23       	and	r24, r24
    1d5a:	89 f0       	breq	.+34     	; 0x1d7e <_ZN7wandern4drawEv+0x20e>
    1d5c:	00 e0       	ldi	r16, 0x00	; 0
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
    1d60:	fe 01       	movw	r30, r28
    1d62:	e1 0f       	add	r30, r17
    1d64:	f1 1d       	adc	r31, r1
    1d66:	28 e2       	ldi	r18, 0x28	; 40
    1d68:	40 2f       	mov	r20, r16
    1d6a:	62 81       	ldd	r22, Z+2	; 0x02
    1d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d70:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    1d74:	1f 5f       	subi	r17, 0xFF	; 255
    1d76:	0a 5f       	subi	r16, 0xFA	; 250
    1d78:	8e 89       	ldd	r24, Y+22	; 0x16
    1d7a:	18 17       	cp	r17, r24
    1d7c:	88 f3       	brcs	.-30     	; 0x1d60 <_ZN7wandern4drawEv+0x1f0>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN7Display9sendFrameEv>
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <_ZN7wandern4drawEv+0x220>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1d88:	10 e5       	ldi	r17, 0x50	; 80
    1d8a:	c1 2c       	mov	r12, r1
    1d8c:	d1 2c       	mov	r13, r1
    1d8e:	47 cf       	rjmp	.-370    	; 0x1c1e <_ZN7wandern4drawEv+0xae>
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
		
		send();	
	}
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	08 95       	ret

00001da2 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    1da2:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1da4:	f9 99       	sbic	0x1f, 1	; 31
    1da6:	fe cf       	rjmp	.-4      	; 0x1da4 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    1da8:	92 bd       	out	0x22, r25	; 34
    1daa:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    1dac:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    1dae:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    1db0:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    1db2:	78 94       	sei
    1db4:	08 95       	ret

00001db6 <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	ec 01       	movw	r28, r24
		if (*tast=='e')
    1dbc:	fb 01       	movw	r30, r22
    1dbe:	90 81       	ld	r25, Z
    1dc0:	95 36       	cpi	r25, 0x65	; 101
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <_ZN7wandern11tastendruckEPh+0x10>
    1dc4:	40 c0       	rjmp	.+128    	; 0x1e46 <_ZN7wandern11tastendruckEPh+0x90>
		{
			rtc->Stunden	= gpsstunde;
    1dc6:	e9 8d       	ldd	r30, Y+25	; 0x19
    1dc8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1dca:	80 91 d1 02 	lds	r24, 0x02D1
    1dce:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    1dd0:	e9 8d       	ldd	r30, Y+25	; 0x19
    1dd2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1dd4:	80 91 d0 02 	lds	r24, 0x02D0
    1dd8:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    1dda:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ddc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1dde:	80 91 cf 02 	lds	r24, 0x02CF
    1de2:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    1de4:	e9 8d       	ldd	r30, Y+25	; 0x19
    1de6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1de8:	80 91 ce 02 	lds	r24, 0x02CE
    1dec:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    1dee:	e9 8d       	ldd	r30, Y+25	; 0x19
    1df0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1df2:	80 91 cd 02 	lds	r24, 0x02CD
    1df6:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    1df8:	e9 8d       	ldd	r30, Y+25	; 0x19
    1dfa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1dfc:	80 91 cc 02 	lds	r24, 0x02CC
    1e00:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    1e02:	89 8d       	ldd	r24, Y+25	; 0x19
    1e04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e06:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    1e0a:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e0c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e0e:	61 89       	ldd	r22, Z+17	; 0x11
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	c6 df       	rcall	.-116    	; 0x1da2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    1e16:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e18:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e1a:	60 89       	ldd	r22, Z+16	; 0x10
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	c0 df       	rcall	.-128    	; 0x1da2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    1e22:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e24:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e26:	64 89       	ldd	r22, Z+20	; 0x14
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	ba df       	rcall	.-140    	; 0x1da2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    1e2e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e30:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e32:	66 89       	ldd	r22, Z+22	; 0x16
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	b4 df       	rcall	.-152    	; 0x1da2 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    1e3a:	e9 8d       	ldd	r30, Y+25	; 0x19
    1e3c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1e3e:	67 89       	ldd	r22, Z+23	; 0x17
    1e40:	84 e0       	ldi	r24, 0x04	; 4
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	ae df       	rcall	.-164    	; 0x1da2 <_Z12EEPROM_Writejh>
		}
		return 0;
	}
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    1e4e:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1e50:	f9 99       	sbic	0x1f, 1	; 31
    1e52:	fe cf       	rjmp	.-4      	; 0x1e50 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    1e54:	92 bd       	out	0x22, r25	; 34
    1e56:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    1e58:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    1e5a:	78 94       	sei
	return EEDR;
    1e5c:	80 b5       	in	r24, 0x20	; 32
}
    1e5e:	08 95       	ret

00001e60 <__vector_11>:
uint8_t FPS;

//schlechte variante der Uhreinstellung
void uhreinstellen();

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    1e60:	1f 92       	push	r1
    1e62:	0f 92       	push	r0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	0b b6       	in	r0, 0x3b	; 59
    1e6c:	0f 92       	push	r0
    1e6e:	8f 93       	push	r24
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    1e74:	e0 e3       	ldi	r30, 0x30	; 48
    1e76:	f8 e0       	ldi	r31, 0x08	; 8
    1e78:	82 89       	ldd	r24, Z+18	; 0x12
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    1e7e:	80 8d       	ldd	r24, Z+24	; 0x18
    1e80:	82 60       	ori	r24, 0x02	; 2
    1e82:	80 8f       	std	Z+24, r24	; 0x18
	if (statusreg&(1<<powersavemode))
    1e84:	80 91 2a 03 	lds	r24, 0x032A
    1e88:	81 ff       	sbrs	r24, 1
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <__vector_11+0x32>
	{
		SMCR &= ~(1<<SE);
    1e8c:	83 b7       	in	r24, 0x33	; 51
    1e8e:	8e 7f       	andi	r24, 0xFE	; 254
    1e90:	83 bf       	out	0x33, r24	; 51
	}
}
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	8f 91       	pop	r24
    1e98:	0f 90       	pop	r0
    1e9a:	0b be       	out	0x3b, r0	; 59
    1e9c:	0f 90       	pop	r0
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	0f 90       	pop	r0
    1ea2:	1f 90       	pop	r1
    1ea4:	18 95       	reti

00001ea6 <__vector_13>:

ISR(TIMER1_COMPA_vect){
    1ea6:	1f 92       	push	r1
    1ea8:	0f 92       	push	r0
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	0f 92       	push	r0
    1eae:	11 24       	eor	r1, r1
    1eb0:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    1eb2:	80 91 2a 03 	lds	r24, 0x032A
    1eb6:	81 60       	ori	r24, 0x01	; 1
    1eb8:	80 93 2a 03 	sts	0x032A, r24
}
    1ebc:	8f 91       	pop	r24
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    1ec8:	1f 92       	push	r1
    1eca:	0f 92       	push	r0
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	0f 92       	push	r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	0b b6       	in	r0, 0x3b	; 59
    1ed4:	0f 92       	push	r0
    1ed6:	2f 93       	push	r18
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	ef 93       	push	r30
    1ede:	ff 93       	push	r31
	uint8_t temp = UDR0;
    1ee0:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    1ee4:	24 32       	cpi	r18, 0x24	; 36
    1ee6:	51 f4       	brne	.+20     	; 0x1efc <__vector_20+0x34>
    1ee8:	80 91 27 03 	lds	r24, 0x0327
    1eec:	98 2f       	mov	r25, r24
    1eee:	9c 70       	andi	r25, 0x0C	; 12
    1ef0:	29 f4       	brne	.+10     	; 0x1efc <__vector_20+0x34>
	{
		gpscounter = 0;
    1ef2:	10 92 de 02 	sts	0x02DE, r1
		gpsstatus |= (1<<message);
    1ef6:	81 60       	ori	r24, 0x01	; 1
    1ef8:	80 93 27 03 	sts	0x0327, r24
	}
	if ((gpsstatus&(1<<message)))
    1efc:	90 91 27 03 	lds	r25, 0x0327
    1f00:	90 ff       	sbrs	r25, 0
    1f02:	3c c0       	rjmp	.+120    	; 0x1f7c <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    1f04:	80 91 de 02 	lds	r24, 0x02DE
    1f08:	e8 2f       	mov	r30, r24
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	e1 52       	subi	r30, 0x21	; 33
    1f0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f10:	20 83       	st	Z, r18
		gpscounter++;
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	80 93 de 02 	sts	0x02DE, r24
		if (gpscounter>72)
    1f18:	89 34       	cpi	r24, 0x49	; 73
    1f1a:	20 f0       	brcs	.+8      	; 0x1f24 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    1f1c:	9e 7f       	andi	r25, 0xFE	; 254
    1f1e:	90 93 27 03 	sts	0x0327, r25
    1f22:	2c c0       	rjmp	.+88     	; 0x1f7c <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    1f24:	83 31       	cpi	r24, 0x13	; 19
    1f26:	c9 f4       	brne	.+50     	; 0x1f5a <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    1f28:	80 91 e3 02 	lds	r24, 0x02E3
    1f2c:	8d 34       	cpi	r24, 0x4D	; 77
    1f2e:	89 f4       	brne	.+34     	; 0x1f52 <__vector_20+0x8a>
    1f30:	80 91 e4 02 	lds	r24, 0x02E4
    1f34:	83 34       	cpi	r24, 0x43	; 67
    1f36:	69 f4       	brne	.+26     	; 0x1f52 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    1f38:	80 91 f1 02 	lds	r24, 0x02F1
    1f3c:	81 34       	cpi	r24, 0x41	; 65
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    1f40:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    1f42:	90 61       	ori	r25, 0x10	; 16
    1f44:	90 93 27 03 	sts	0x0327, r25
    1f48:	19 c0       	rjmp	.+50     	; 0x1f7c <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    1f4a:	92 60       	ori	r25, 0x02	; 2
    1f4c:	90 93 27 03 	sts	0x0327, r25
    1f50:	15 c0       	rjmp	.+42     	; 0x1f7c <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    1f52:	9c 7f       	andi	r25, 0xFC	; 252
    1f54:	90 93 27 03 	sts	0x0327, r25
    1f58:	11 c0       	rjmp	.+34     	; 0x1f7c <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    1f5a:	8a 32       	cpi	r24, 0x2A	; 42
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <__vector_20+0xa4>
    1f5e:	94 ff       	sbrs	r25, 4
    1f60:	0d c0       	rjmp	.+26     	; 0x1f7c <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~(1<<message);
    1f62:	9e 7f       	andi	r25, 0xFE	; 254
    1f64:	98 60       	ori	r25, 0x08	; 8
    1f66:	90 93 27 03 	sts	0x0327, r25
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    1f6c:	86 34       	cpi	r24, 0x46	; 70
    1f6e:	31 f4       	brne	.+12     	; 0x1f7c <__vector_20+0xb4>
    1f70:	91 ff       	sbrs	r25, 1
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    1f74:	9c 7f       	andi	r25, 0xFC	; 252
    1f76:	94 60       	ori	r25, 0x04	; 4
    1f78:	90 93 27 03 	sts	0x0327, r25
		}
	}
}
    1f7c:	ff 91       	pop	r31
    1f7e:	ef 91       	pop	r30
    1f80:	9f 91       	pop	r25
    1f82:	8f 91       	pop	r24
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	0b be       	out	0x3b, r0	; 59
    1f8a:	0f 90       	pop	r0
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	0f 90       	pop	r0
    1f90:	1f 90       	pop	r1
    1f92:	18 95       	reti

00001f94 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    1f94:	10 92 c8 02 	sts	0x02C8, r1
    1f98:	10 92 c9 02 	sts	0x02C9, r1
    1f9c:	10 92 ca 02 	sts	0x02CA, r1
    1fa0:	10 92 cb 02 	sts	0x02CB, r1
	strecke = 0;
    1fa4:	10 92 c4 02 	sts	0x02C4, r1
    1fa8:	10 92 c5 02 	sts	0x02C5, r1
    1fac:	10 92 c6 02 	sts	0x02C6, r1
    1fb0:	10 92 c7 02 	sts	0x02C7, r1
	maxgeschw = 0;
    1fb4:	10 92 c0 02 	sts	0x02C0, r1
    1fb8:	10 92 c1 02 	sts	0x02C1, r1
    1fbc:	10 92 c2 02 	sts	0x02C2, r1
    1fc0:	10 92 c3 02 	sts	0x02C3, r1
	Fahrtzeit = 0;
    1fc4:	10 92 bc 02 	sts	0x02BC, r1
    1fc8:	10 92 bd 02 	sts	0x02BD, r1
    1fcc:	10 92 be 02 	sts	0x02BE, r1
    1fd0:	10 92 bf 02 	sts	0x02BF, r1
    1fd4:	08 95       	ret

00001fd6 <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	80 81       	ld	r24, Z
    1fda:	85 36       	cpi	r24, 0x65	; 101
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    1fde:	da df       	rcall	.-76     	; 0x1f94 <_Z6nullenv>
		}
		return 0;
	}
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	08 95       	ret

00001fe4 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	20 81       	ld	r18, Z
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	06 2e       	mov	r0, r22
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <_Z13reed_debouncePVhh+0xe>
    1fee:	35 95       	asr	r19
    1ff0:	27 95       	ror	r18
    1ff2:	0a 94       	dec	r0
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <_Z13reed_debouncePVhh+0xa>
    1ff6:	20 ff       	sbrs	r18, 0
    1ff8:	16 c0       	rjmp	.+44     	; 0x2026 <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ffa:	ef e0       	ldi	r30, 0x0F	; 15
    1ffc:	f7 e2       	ldi	r31, 0x27	; 39
    1ffe:	31 97       	sbiw	r30, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <_Z13reed_debouncePVhh+0x1a>
    2002:	00 c0       	rjmp	.+0      	; 0x2004 <_Z13reed_debouncePVhh+0x20>
    2004:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    2006:	fc 01       	movw	r30, r24
    2008:	80 81       	ld	r24, Z
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <_Z13reed_debouncePVhh+0x2e>
    200e:	95 95       	asr	r25
    2010:	87 95       	ror	r24
    2012:	6a 95       	dec	r22
    2014:	e2 f7       	brpl	.-8      	; 0x200e <_Z13reed_debouncePVhh+0x2a>
    2016:	80 fd       	sbrc	r24, 0
    2018:	08 c0       	rjmp	.+16     	; 0x202a <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    201a:	f2 e0       	ldi	r31, 0x02	; 2
    201c:	fa 95       	dec	r31
    201e:	f1 f7       	brne	.-4      	; 0x201c <_Z13reed_debouncePVhh+0x38>
    2020:	00 c0       	rjmp	.+0      	; 0x2022 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	08 95       	ret
		}
	}
	return 0;
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	08 95       	ret
    202a:	80 e0       	ldi	r24, 0x00	; 0
}
    202c:	08 95       	ret

0000202e <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    202e:	cf 92       	push	r12
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    203a:	e4 e8       	ldi	r30, 0x84	; 132
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	c0 81       	ld	r28, Z
    2040:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    2042:	11 82       	std	Z+1, r1	; 0x01
    2044:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    2046:	2b ed       	ldi	r18, 0xDB	; 219
    2048:	3f e0       	ldi	r19, 0x0F	; 15
    204a:	49 e4       	ldi	r20, 0x49	; 73
    204c:	50 e4       	ldi	r21, 0x40	; 64
    204e:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    2052:	26 e6       	ldi	r18, 0x66	; 102
    2054:	36 e6       	ldi	r19, 0x66	; 102
    2056:	46 e6       	ldi	r20, 0x66	; 102
    2058:	50 e4       	ldi	r21, 0x40	; 64
    205a:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    205e:	6b 01       	movw	r12, r22
    2060:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    2062:	be 01       	movw	r22, r28
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 76 20 	call	0x40ec	; 0x40ec <__floatunsisf>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	5e e3       	ldi	r21, 0x3E	; 62
    2074:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    2078:	2d eb       	ldi	r18, 0xBD	; 189
    207a:	37 e3       	ldi	r19, 0x37	; 55
    207c:	46 e8       	ldi	r20, 0x86	; 134
    207e:	5a e3       	ldi	r21, 0x3A	; 58
    2080:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    2084:	2a e0       	ldi	r18, 0x0A	; 10
    2086:	37 ed       	ldi	r19, 0xD7	; 215
    2088:	43 ea       	ldi	r20, 0xA3	; 163
    208a:	5b e3       	ldi	r21, 0x3B	; 59
    208c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2090:	9b 01       	movw	r18, r22
    2092:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    2094:	c7 01       	movw	r24, r14
    2096:	b6 01       	movw	r22, r12
    2098:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    209c:	20 91 c8 02 	lds	r18, 0x02C8
    20a0:	30 91 c9 02 	lds	r19, 0x02C9
    20a4:	40 91 ca 02 	lds	r20, 0x02CA
    20a8:	50 91 cb 02 	lds	r21, 0x02CB
    20ac:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
	geschw /= 2.0;
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 8a 21 	call	0x4314	; 0x4314 <__mulsf3>
    20bc:	6b 01       	movw	r12, r22
    20be:	7c 01       	movw	r14, r24
	if (geschw >=160)
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	53 e4       	ldi	r21, 0x43	; 67
    20c8:	0e 94 86 21 	call	0x430c	; 0x430c <__gesf2>
    20cc:	88 23       	and	r24, r24
    20ce:	4c f4       	brge	.+18     	; 0x20e2 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    20d0:	c0 92 c8 02 	sts	0x02C8, r12
    20d4:	d0 92 c9 02 	sts	0x02C9, r13
    20d8:	e0 92 ca 02 	sts	0x02CA, r14
    20dc:	f0 92 cb 02 	sts	0x02CB, r15
    20e0:	08 c0       	rjmp	.+16     	; 0x20f2 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    20e2:	10 92 c8 02 	sts	0x02C8, r1
    20e6:	10 92 c9 02 	sts	0x02C9, r1
    20ea:	10 92 ca 02 	sts	0x02CA, r1
    20ee:	10 92 cb 02 	sts	0x02CB, r1
	}
}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	ff 90       	pop	r15
    20f8:	ef 90       	pop	r14
    20fa:	df 90       	pop	r13
    20fc:	cf 90       	pop	r12
    20fe:	08 95       	ret

00002100 <_Z15initialisierungv>:
			SMCR |= (1<<SE);
		}
    }
}

void initialisierung(){	
    2100:	ff 92       	push	r15
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	a9 97       	sbiw	r28, 0x29	; 41
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    211a:	10 92 2b 03 	sts	0x032B, r1
	statusreg=0;
    211e:	10 92 2a 03 	sts	0x032A, r1
	position=0;
    2122:	10 92 29 03 	sts	0x0329, r1
	FPS=0;
    2126:	10 92 28 03 	sts	0x0328, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    212a:	10 92 85 00 	sts	0x0085, r1
    212e:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    2132:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    2136:	85 e0       	ldi	r24, 0x05	; 5
    2138:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    213c:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    213e:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    2140:	80 e4       	ldi	r24, 0x40	; 64
    2142:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    2146:	ea e7       	ldi	r30, 0x7A	; 122
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	83 e0       	ldi	r24, 0x03	; 3
    214c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    214e:	80 81       	ld	r24, Z
    2150:	80 68       	ori	r24, 0x80	; 128
    2152:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    2154:	80 81       	ld	r24, Z
    2156:	80 64       	ori	r24, 0x40	; 64
    2158:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    215a:	80 81       	ld	r24, Z
    215c:	18 2f       	mov	r17, r24
    215e:	10 74       	andi	r17, 0x40	; 64
    2160:	86 fd       	sbrc	r24, 6
    2162:	fb cf       	rjmp	.-10     	; 0x215a <_Z15initialisierungv+0x5a>
	(void) ADCW;
    2164:	80 91 78 00 	lds	r24, 0x0078
    2168:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    216c:	89 b1       	in	r24, 0x09	; 9
    216e:	89 7f       	andi	r24, 0xF9	; 249
    2170:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    2172:	8a b1       	in	r24, 0x0a	; 10
    2174:	89 7f       	andi	r24, 0xF9	; 249
    2176:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    2178:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    217c:	83 e3       	ldi	r24, 0x33	; 51
    217e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    2182:	86 e0       	ldi	r24, 0x06	; 6
    2184:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    2188:	80 e8       	ldi	r24, 0x80	; 128
    218a:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    218e:	10 92 de 02 	sts	0x02DE, r1
	gpsstatus = (1<<fix);
    2192:	80 93 27 03 	sts	0x0327, r24
	lat = 0;
    2196:	10 92 da 02 	sts	0x02DA, r1
    219a:	10 92 db 02 	sts	0x02DB, r1
    219e:	10 92 dc 02 	sts	0x02DC, r1
    21a2:	10 92 dd 02 	sts	0x02DD, r1
	lon = 0;
    21a6:	10 92 d6 02 	sts	0x02D6, r1
    21aa:	10 92 d7 02 	sts	0x02D7, r1
    21ae:	10 92 d8 02 	sts	0x02D8, r1
    21b2:	10 92 d9 02 	sts	0x02D9, r1
	gpsspeed = 0;
    21b6:	10 92 d2 02 	sts	0x02D2, r1
    21ba:	10 92 d3 02 	sts	0x02D3, r1
    21be:	10 92 d4 02 	sts	0x02D4, r1
    21c2:	10 92 d5 02 	sts	0x02D5, r1
	gpsstunde = 0;
    21c6:	10 92 d1 02 	sts	0x02D1, r1
	gpsminute = 0;
    21ca:	10 92 d0 02 	sts	0x02D0, r1
	gpssekunde = 0;
    21ce:	10 92 cf 02 	sts	0x02CF, r1
	gpsTag = 0;
    21d2:	10 92 ce 02 	sts	0x02CE, r1
	gpsMonat = 0;
    21d6:	10 92 cd 02 	sts	0x02CD, r1
	gpsJahr = 0;
    21da:	10 92 cc 02 	sts	0x02CC, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    21de:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    21e0:	8f e2       	ldi	r24, 0x2F	; 47
    21e2:	94 e0       	ldi	r25, 0x04	; 4
    21e4:	99 8f       	std	Y+25, r25	; 0x19
    21e6:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    21e8:	80 e3       	ldi	r24, 0x30	; 48
    21ea:	98 e0       	ldi	r25, 0x08	; 8
    21ec:	9b 8f       	std	Y+27, r25	; 0x1b
    21ee:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    21f0:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    21f2:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    21f8:	88 ea       	ldi	r24, 0xA8	; 168
    21fa:	92 e0       	ldi	r25, 0x02	; 2
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    2200:	8f e2       	ldi	r24, 0x2F	; 47
    2202:	94 e0       	ldi	r25, 0x04	; 4
    2204:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    2208:	8f e0       	ldi	r24, 0x0F	; 15
    220a:	e6 e0       	ldi	r30, 0x06	; 6
    220c:	f1 e0       	ldi	r31, 0x01	; 1
    220e:	de 01       	movw	r26, r28
    2210:	13 96       	adiw	r26, 0x03	; 3
    2212:	01 90       	ld	r0, Z+
    2214:	0d 92       	st	X+, r0
    2216:	8a 95       	dec	r24
    2218:	e1 f7       	brne	.-8      	; 0x2212 <_Z15initialisierungv+0x112>
    221a:	8e e0       	ldi	r24, 0x0E	; 14
    221c:	8f 8b       	std	Y+23, r24	; 0x17
    221e:	f1 2e       	mov	r15, r17
    2220:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    2222:	e3 e0       	ldi	r30, 0x03	; 3
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	ec 0f       	add	r30, r28
    2228:	fd 1f       	adc	r31, r29
    222a:	e0 0f       	add	r30, r16
    222c:	f1 1d       	adc	r31, r1
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	4f 2d       	mov	r20, r15
    2232:	60 81       	ld	r22, Z
    2234:	88 8d       	ldd	r24, Y+24	; 0x18
    2236:	99 8d       	ldd	r25, Y+25	; 0x19
    2238:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    223c:	0f 5f       	subi	r16, 0xFF	; 255
    223e:	26 e0       	ldi	r18, 0x06	; 6
    2240:	f2 0e       	add	r15, r18
    2242:	8f 89       	ldd	r24, Y+23	; 0x17
    2244:	08 17       	cp	r16, r24
    2246:	68 f3       	brcs	.-38     	; 0x2222 <_Z15initialisierungv+0x122>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2248:	8f e0       	ldi	r24, 0x0F	; 15
    224a:	e5 e1       	ldi	r30, 0x15	; 21
    224c:	f1 e0       	ldi	r31, 0x01	; 1
    224e:	de 01       	movw	r26, r28
    2250:	13 96       	adiw	r26, 0x03	; 3
    2252:	01 90       	ld	r0, Z+
    2254:	0d 92       	st	X+, r0
    2256:	8a 95       	dec	r24
    2258:	e1 f7       	brne	.-8      	; 0x2252 <_Z15initialisierungv+0x152>
    225a:	8e e0       	ldi	r24, 0x0E	; 14
    225c:	8f 8b       	std	Y+23, r24	; 0x17
    225e:	f1 2e       	mov	r15, r17
    2260:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    2262:	e3 e0       	ldi	r30, 0x03	; 3
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ec 0f       	add	r30, r28
    2268:	fd 1f       	adc	r31, r29
    226a:	e0 0f       	add	r30, r16
    226c:	f1 1d       	adc	r31, r1
    226e:	28 e0       	ldi	r18, 0x08	; 8
    2270:	4f 2d       	mov	r20, r15
    2272:	60 81       	ld	r22, Z
    2274:	88 8d       	ldd	r24, Y+24	; 0x18
    2276:	99 8d       	ldd	r25, Y+25	; 0x19
    2278:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    227c:	0f 5f       	subi	r16, 0xFF	; 255
    227e:	36 e0       	ldi	r19, 0x06	; 6
    2280:	f3 0e       	add	r15, r19
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	08 17       	cp	r16, r24
    2286:	68 f3       	brcs	.-38     	; 0x2262 <_Z15initialisierungv+0x162>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    2288:	80 e4       	ldi	r24, 0x40	; 64
    228a:	8f 93       	push	r24
    228c:	81 e4       	ldi	r24, 0x41	; 65
    228e:	8f 93       	push	r24
    2290:	87 e4       	ldi	r24, 0x47	; 71
    2292:	8f 93       	push	r24
    2294:	8e ea       	ldi	r24, 0xAE	; 174
    2296:	8f 93       	push	r24
    2298:	84 e2       	ldi	r24, 0x24	; 36
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	9f 93       	push	r25
    229e:	8f 93       	push	r24
    22a0:	ce 01       	movw	r24, r28
    22a2:	03 96       	adiw	r24, 0x03	; 3
    22a4:	9f 93       	push	r25
    22a6:	8f 93       	push	r24
    22a8:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    22ac:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	88 23       	and	r24, r24
    22ba:	99 f0       	breq	.+38     	; 0x22e2 <_Z15initialisierungv+0x1e2>
    22bc:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    22be:	e3 e0       	ldi	r30, 0x03	; 3
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	ec 0f       	add	r30, r28
    22c4:	fd 1f       	adc	r31, r29
    22c6:	e0 0f       	add	r30, r16
    22c8:	f1 1d       	adc	r31, r1
    22ca:	20 e2       	ldi	r18, 0x20	; 32
    22cc:	41 2f       	mov	r20, r17
    22ce:	60 81       	ld	r22, Z
    22d0:	88 8d       	ldd	r24, Y+24	; 0x18
    22d2:	99 8d       	ldd	r25, Y+25	; 0x19
    22d4:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    22d8:	0f 5f       	subi	r16, 0xFF	; 255
    22da:	1a 5f       	subi	r17, 0xFA	; 250
    22dc:	8f 89       	ldd	r24, Y+23	; 0x17
    22de:	08 17       	cp	r16, r24
    22e0:	70 f3       	brcs	.-36     	; 0x22be <_Z15initialisierungv+0x1be>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    22e2:	88 8d       	ldd	r24, Y+24	; 0x18
    22e4:	99 8d       	ldd	r25, Y+25	; 0x19
    22e6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN7Display9sendFrameEv>
    22ea:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22ec:	ff e7       	ldi	r31, 0x7F	; 127
    22ee:	28 e3       	ldi	r18, 0x38	; 56
    22f0:	31 e0       	ldi	r19, 0x01	; 1
    22f2:	f1 50       	subi	r31, 0x01	; 1
    22f4:	20 40       	sbci	r18, 0x00	; 0
    22f6:	30 40       	sbci	r19, 0x00	; 0
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <_Z15initialisierungv+0x1f2>
    22fa:	00 c0       	rjmp	.+0      	; 0x22fc <_Z15initialisierungv+0x1fc>
    22fc:	00 00       	nop
    22fe:	9f e7       	ldi	r25, 0x7F	; 127
    2300:	e8 e3       	ldi	r30, 0x38	; 56
    2302:	f1 e0       	ldi	r31, 0x01	; 1
    2304:	91 50       	subi	r25, 0x01	; 1
    2306:	e0 40       	sbci	r30, 0x00	; 0
    2308:	f0 40       	sbci	r31, 0x00	; 0
    230a:	e1 f7       	brne	.-8      	; 0x2304 <_Z15initialisierungv+0x204>
    230c:	00 c0       	rjmp	.+0      	; 0x230e <_Z15initialisierungv+0x20e>
    230e:	00 00       	nop
    2310:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    2312:	61 f7       	brne	.-40     	; 0x22ec <_Z15initialisierungv+0x1ec>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    2314:	00 e3       	ldi	r16, 0x30	; 48
    2316:	18 e0       	ldi	r17, 0x08	; 8
    2318:	f8 01       	movw	r30, r16
    231a:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	96 dd       	rcall	.-1236   	; 0x1e4e <_Z11EEPROM_Readj>
    2322:	f8 01       	movw	r30, r16
    2324:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	91 dd       	rcall	.-1246   	; 0x1e4e <_Z11EEPROM_Readj>
    232c:	f8 01       	movw	r30, r16
    232e:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	8c dd       	rcall	.-1256   	; 0x1e4e <_Z11EEPROM_Readj>
    2336:	f8 01       	movw	r30, r16
    2338:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	87 dd       	rcall	.-1266   	; 0x1e4e <_Z11EEPROM_Readj>
    2340:	f8 01       	movw	r30, r16
    2342:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    2344:	84 e0       	ldi	r24, 0x04	; 4
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	82 dd       	rcall	.-1276   	; 0x1e4e <_Z11EEPROM_Readj>
    234a:	f8 01       	movw	r30, r16
    234c:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    234e:	c8 01       	movw	r24, r16
    2350:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    2354:	c8 01       	movw	r24, r16
    2356:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_ZN3RTC8RTCstartEv>
	
	//Sleepmode Grundeinstelung
	SMCR |= (1<<SM1) | (1<<SM0);
    235a:	83 b7       	in	r24, 0x33	; 51
    235c:	86 60       	ori	r24, 0x06	; 6
    235e:	83 bf       	out	0x33, r24	; 51
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    2360:	80 b7       	in	r24, 0x30	; 48
    2362:	80 68       	ori	r24, 0x80	; 128
    2364:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    2366:	e1 ec       	ldi	r30, 0xC1	; 193
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 61       	ori	r24, 0x10	; 16
    236e:	80 83       	st	Z, r24
	
	sei();
    2370:	78 94       	sei
}
    2372:	a9 96       	adiw	r28, 0x29	; 41
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	08 95       	ret

0000238a <_Z19maininterupthandlerP7monitorh>:

void maininterupthandler(monitor *mon, uint8_t taste){
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	1f 92       	push	r1
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	8c 01       	movw	r16, r24
    23a2:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    23a4:	60 32       	cpi	r22, 0x20	; 32
    23a6:	09 f4       	brne	.+2      	; 0x23aa <_Z19maininterupthandlerP7monitorh+0x20>
    23a8:	98 c0       	rjmp	.+304    	; 0x24da <_Z19maininterupthandlerP7monitorh+0x150>
	{
		anzeige |= (1<<refreshdisplay);
    23aa:	80 91 2b 03 	lds	r24, 0x032B
    23ae:	81 60       	ori	r24, 0x01	; 1
    23b0:	80 93 2b 03 	sts	0x032B, r24
		switch (taste)							//Tastendruck ueberpruefen
    23b4:	46 2f       	mov	r20, r22
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	fa 01       	movw	r30, r20
    23ba:	f0 97       	sbiw	r30, 0x30	; 48
    23bc:	e6 34       	cpi	r30, 0x46	; 70
    23be:	f1 05       	cpc	r31, r1
    23c0:	08 f0       	brcs	.+2      	; 0x23c4 <_Z19maininterupthandlerP7monitorh+0x3a>
    23c2:	6f c0       	rjmp	.+222    	; 0x24a2 <_Z19maininterupthandlerP7monitorh+0x118>
    23c4:	e3 5a       	subi	r30, 0xA3	; 163
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	0c 94 bc 25 	jmp	0x4b78	; 0x4b78 <__tablejump2__>
		{
			case 'm':
				position = numberofpages;
    23cc:	85 e0       	ldi	r24, 0x05	; 5
    23ce:	80 93 29 03 	sts	0x0329, r24
				break;
    23d2:	78 c0       	rjmp	.+240    	; 0x24c4 <_Z19maininterupthandlerP7monitorh+0x13a>
			case 'l':
				if (mon->posx==0)
    23d4:	d8 01       	movw	r26, r16
    23d6:	96 96       	adiw	r26, 0x26	; 38
    23d8:	8c 91       	ld	r24, X
    23da:	81 11       	cpse	r24, r1
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <_Z19maininterupthandlerP7monitorh+0x5c>
				{
					position = numberofpages;
    23de:	85 e0       	ldi	r24, 0x05	; 5
    23e0:	80 93 29 03 	sts	0x0329, r24
    23e4:	6f c0       	rjmp	.+222    	; 0x24c4 <_Z19maininterupthandlerP7monitorh+0x13a>
				}
				else{
					mon->posx--;
    23e6:	81 50       	subi	r24, 0x01	; 1
    23e8:	f8 01       	movw	r30, r16
    23ea:	86 a3       	std	Z+38, r24	; 0x26
    23ec:	65 c0       	rjmp	.+202    	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case 'r':
				if (position==numberofpages)
    23ee:	80 91 29 03 	lds	r24, 0x0329
    23f2:	85 30       	cpi	r24, 0x05	; 5
    23f4:	31 f4       	brne	.+12     	; 0x2402 <_Z19maininterupthandlerP7monitorh+0x78>
				{
					position=mon->posy;
    23f6:	d8 01       	movw	r26, r16
    23f8:	95 96       	adiw	r26, 0x25	; 37
    23fa:	8c 91       	ld	r24, X
    23fc:	80 93 29 03 	sts	0x0329, r24
    2400:	5b c0       	rjmp	.+182    	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    2402:	f8 01       	movw	r30, r16
    2404:	86 a1       	ldd	r24, Z+38	; 0x26
    2406:	90 a5       	ldd	r25, Z+40	; 0x28
    2408:	89 17       	cp	r24, r25
    240a:	08 f0       	brcs	.+2      	; 0x240e <_Z19maininterupthandlerP7monitorh+0x84>
    240c:	15 c1       	rjmp	.+554    	; 0x2638 <_Z19maininterupthandlerP7monitorh+0x2ae>
				{
					mon->posx++;
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	86 a3       	std	Z+38, r24	; 0x26
    2412:	52 c0       	rjmp	.+164    	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
				case 'o':
					if (position==numberofpages)
    2414:	80 91 29 03 	lds	r24, 0x0329
    2418:	85 30       	cpi	r24, 0x05	; 5
    241a:	31 f4       	brne	.+12     	; 0x2428 <_Z19maininterupthandlerP7monitorh+0x9e>
					{
						position=mon->posy;
    241c:	d8 01       	movw	r26, r16
    241e:	95 96       	adiw	r26, 0x25	; 37
    2420:	8c 91       	ld	r24, X
    2422:	80 93 29 03 	sts	0x0329, r24
    2426:	48 c0       	rjmp	.+144    	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
					}
					else if (!(mon->posx >= mon->maxentriesx))
    2428:	f8 01       	movw	r30, r16
    242a:	86 a1       	ldd	r24, Z+38	; 0x26
    242c:	90 a5       	ldd	r25, Z+40	; 0x28
    242e:	89 17       	cp	r24, r25
    2430:	08 f0       	brcs	.+2      	; 0x2434 <_Z19maininterupthandlerP7monitorh+0xaa>
    2432:	02 c1       	rjmp	.+516    	; 0x2638 <_Z19maininterupthandlerP7monitorh+0x2ae>
					{
						mon->posx++;
    2434:	8f 5f       	subi	r24, 0xFF	; 255
    2436:	86 a3       	std	Z+38, r24	; 0x26
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
					}
					break;
			case 'd':
				if (!(mon->posy >= mon->maxentries-1))
    243a:	d8 01       	movw	r26, r16
    243c:	95 96       	adiw	r26, 0x25	; 37
    243e:	2c 91       	ld	r18, X
    2440:	95 97       	sbiw	r26, 0x25	; 37
    2442:	42 2f       	mov	r20, r18
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	97 96       	adiw	r26, 0x27	; 39
    2448:	8c 91       	ld	r24, X
    244a:	97 97       	sbiw	r26, 0x27	; 39
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	48 17       	cp	r20, r24
    2452:	59 07       	cpc	r21, r25
    2454:	24 f4       	brge	.+8      	; 0x245e <_Z19maininterupthandlerP7monitorh+0xd4>
				{
					mon->posy++;
    2456:	2f 5f       	subi	r18, 0xFF	; 255
    2458:	95 96       	adiw	r26, 0x25	; 37
    245a:	2c 93       	st	X, r18
    245c:	2d c0       	rjmp	.+90     	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					mon->posy = 0;
    245e:	f8 01       	movw	r30, r16
    2460:	15 a2       	std	Z+37, r1	; 0x25
    2462:	2a c0       	rjmp	.+84     	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case 'u':
				if (!(mon->posy == 0))
    2464:	d8 01       	movw	r26, r16
    2466:	95 96       	adiw	r26, 0x25	; 37
    2468:	8c 91       	ld	r24, X
    246a:	95 97       	sbiw	r26, 0x25	; 37
    246c:	88 23       	and	r24, r24
    246e:	21 f0       	breq	.+8      	; 0x2478 <_Z19maininterupthandlerP7monitorh+0xee>
				{
					mon->posy--;
    2470:	81 50       	subi	r24, 0x01	; 1
    2472:	95 96       	adiw	r26, 0x25	; 37
    2474:	8c 93       	st	X, r24
    2476:	20 c0       	rjmp	.+64     	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					mon->posy=mon->maxentries-1;
    2478:	f8 01       	movw	r30, r16
    247a:	87 a1       	ldd	r24, Z+39	; 0x27
    247c:	81 50       	subi	r24, 0x01	; 1
    247e:	85 a3       	std	Z+37, r24	; 0x25
    2480:	1b c0       	rjmp	.+54     	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case '0':
				//Licht an/aus
				if (LED.ison())
    2482:	82 e3       	ldi	r24, 0x32	; 50
    2484:	93 e0       	ldi	r25, 0x03	; 3
    2486:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN6Output4isonEv>
    248a:	88 23       	and	r24, r24
    248c:	29 f0       	breq	.+10     	; 0x2498 <_Z19maininterupthandlerP7monitorh+0x10e>
				{
					LED.off();
    248e:	82 e3       	ldi	r24, 0x32	; 50
    2490:	93 e0       	ldi	r25, 0x03	; 3
    2492:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <_ZN6Output3offEv>
    2496:	10 c0       	rjmp	.+32     	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					LED.on();
    2498:	82 e3       	ldi	r24, 0x32	; 50
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <_ZN6Output2onEv>
    24a0:	0b c0       	rjmp	.+22     	; 0x24b8 <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    24a2:	d8 01       	movw	r26, r16
    24a4:	ed 91       	ld	r30, X+
    24a6:	fc 91       	ld	r31, X
    24a8:	01 90       	ld	r0, Z+
    24aa:	f0 81       	ld	r31, Z
    24ac:	e0 2d       	mov	r30, r0
    24ae:	be 01       	movw	r22, r28
    24b0:	6f 5f       	subi	r22, 0xFF	; 255
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	c8 01       	movw	r24, r16
    24b6:	09 95       	icall
				break;
		}
		if (position==0 || position==numberofpages)
    24b8:	80 91 29 03 	lds	r24, 0x0329
    24bc:	88 23       	and	r24, r24
    24be:	11 f0       	breq	.+4      	; 0x24c4 <_Z19maininterupthandlerP7monitorh+0x13a>
    24c0:	85 30       	cpi	r24, 0x05	; 5
    24c2:	31 f4       	brne	.+12     	; 0x24d0 <_Z19maininterupthandlerP7monitorh+0x146>
		{
			statusreg |= (1<<powersavemode);
    24c4:	80 91 2a 03 	lds	r24, 0x032A
    24c8:	82 60       	ori	r24, 0x02	; 2
    24ca:	80 93 2a 03 	sts	0x032A, r24
    24ce:	05 c0       	rjmp	.+10     	; 0x24da <_Z19maininterupthandlerP7monitorh+0x150>
		}
		else{
			statusreg &= ~(1<<powersavemode);
    24d0:	80 91 2a 03 	lds	r24, 0x032A
    24d4:	8d 7f       	andi	r24, 0xFD	; 253
    24d6:	80 93 2a 03 	sts	0x032A, r24
		}
	}
	
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    24da:	80 91 29 03 	lds	r24, 0x0329
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	f9 f4       	brne	.+62     	; 0x2520 <_Z19maininterupthandlerP7monitorh+0x196>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    24e2:	67 e0       	ldi	r22, 0x07	; 7
    24e4:	80 e2       	ldi	r24, 0x20	; 32
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	7d dd       	rcall	.-1286   	; 0x1fe4 <_Z13reed_debouncePVhh>
    24ea:	88 23       	and	r24, r24
    24ec:	31 f0       	breq	.+12     	; 0x24fa <_Z19maininterupthandlerP7monitorh+0x170>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    24ee:	63 e3       	ldi	r22, 0x33	; 51
    24f0:	71 e1       	ldi	r23, 0x11	; 17
    24f2:	86 e3       	ldi	r24, 0x36	; 54
    24f4:	9f e3       	ldi	r25, 0x3F	; 63
    24f6:	9b dd       	rcall	.-1226   	; 0x202e <_Z15geschwindigkeitf>
    24f8:	13 c0       	rjmp	.+38     	; 0x2520 <_Z19maininterupthandlerP7monitorh+0x196>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    24fa:	80 91 84 00 	lds	r24, 0x0084
    24fe:	90 91 85 00 	lds	r25, 0x0085
    2502:	8e 38       	cpi	r24, 0x8E	; 142
    2504:	9b 45       	sbci	r25, 0x5B	; 91
    2506:	60 f0       	brcs	.+24     	; 0x2520 <_Z19maininterupthandlerP7monitorh+0x196>
		{
			TCNT1=0;
    2508:	10 92 85 00 	sts	0x0085, r1
    250c:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    2510:	10 92 c8 02 	sts	0x02C8, r1
    2514:	10 92 c9 02 	sts	0x02C9, r1
    2518:	10 92 ca 02 	sts	0x02CA, r1
    251c:	10 92 cb 02 	sts	0x02CB, r1
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    2520:	80 91 48 08 	lds	r24, 0x0848
    2524:	81 ff       	sbrs	r24, 1
    2526:	6a c0       	rjmp	.+212    	; 0x25fc <_Z19maininterupthandlerP7monitorh+0x272>
	{
		rtc.zeit();
    2528:	80 e3       	ldi	r24, 0x30	; 48
    252a:	98 e0       	ldi	r25, 0x08	; 8
    252c:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN3RTC4zeitEv>
		if (position==1)
    2530:	80 91 29 03 	lds	r24, 0x0329
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	09 f0       	breq	.+2      	; 0x253a <_Z19maininterupthandlerP7monitorh+0x1b0>
    2538:	57 c0       	rjmp	.+174    	; 0x25e8 <_Z19maininterupthandlerP7monitorh+0x25e>
		{
			if (geschw>maxgeschw)
    253a:	c0 90 c8 02 	lds	r12, 0x02C8
    253e:	d0 90 c9 02 	lds	r13, 0x02C9
    2542:	e0 90 ca 02 	lds	r14, 0x02CA
    2546:	f0 90 cb 02 	lds	r15, 0x02CB
    254a:	20 91 c0 02 	lds	r18, 0x02C0
    254e:	30 91 c1 02 	lds	r19, 0x02C1
    2552:	40 91 c2 02 	lds	r20, 0x02C2
    2556:	50 91 c3 02 	lds	r21, 0x02C3
    255a:	c7 01       	movw	r24, r14
    255c:	b6 01       	movw	r22, r12
    255e:	0e 94 86 21 	call	0x430c	; 0x430c <__gesf2>
    2562:	18 16       	cp	r1, r24
    2564:	44 f4       	brge	.+16     	; 0x2576 <_Z19maininterupthandlerP7monitorh+0x1ec>
			{
				maxgeschw=geschw;
    2566:	c0 92 c0 02 	sts	0x02C0, r12
    256a:	d0 92 c1 02 	sts	0x02C1, r13
    256e:	e0 92 c2 02 	sts	0x02C2, r14
    2572:	f0 92 c3 02 	sts	0x02C3, r15
			}
			if (geschw >= 1.0)
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	c7 01       	movw	r24, r14
    2580:	b6 01       	movw	r22, r12
    2582:	0e 94 86 21 	call	0x430c	; 0x430c <__gesf2>
    2586:	88 23       	and	r24, r24
    2588:	9c f0       	brlt	.+38     	; 0x25b0 <_Z19maininterupthandlerP7monitorh+0x226>
			{
				Fahrtzeit++;
    258a:	80 91 bc 02 	lds	r24, 0x02BC
    258e:	90 91 bd 02 	lds	r25, 0x02BD
    2592:	a0 91 be 02 	lds	r26, 0x02BE
    2596:	b0 91 bf 02 	lds	r27, 0x02BF
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	a1 1d       	adc	r26, r1
    259e:	b1 1d       	adc	r27, r1
    25a0:	80 93 bc 02 	sts	0x02BC, r24
    25a4:	90 93 bd 02 	sts	0x02BD, r25
    25a8:	a0 93 be 02 	sts	0x02BE, r26
    25ac:	b0 93 bf 02 	sts	0x02BF, r27
			}
			strecke+=geschw/3.6;
    25b0:	26 e6       	ldi	r18, 0x66	; 102
    25b2:	36 e6       	ldi	r19, 0x66	; 102
    25b4:	46 e6       	ldi	r20, 0x66	; 102
    25b6:	50 e4       	ldi	r21, 0x40	; 64
    25b8:	c7 01       	movw	r24, r14
    25ba:	b6 01       	movw	r22, r12
    25bc:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    25c0:	9b 01       	movw	r18, r22
    25c2:	ac 01       	movw	r20, r24
    25c4:	60 91 c4 02 	lds	r22, 0x02C4
    25c8:	70 91 c5 02 	lds	r23, 0x02C5
    25cc:	80 91 c6 02 	lds	r24, 0x02C6
    25d0:	90 91 c7 02 	lds	r25, 0x02C7
    25d4:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    25d8:	60 93 c4 02 	sts	0x02C4, r22
    25dc:	70 93 c5 02 	sts	0x02C5, r23
    25e0:	80 93 c6 02 	sts	0x02C6, r24
    25e4:	90 93 c7 02 	sts	0x02C7, r25
		}
		
		anzeige |= (1<<refreshdisplay);
    25e8:	80 91 2b 03 	lds	r24, 0x032B
    25ec:	81 60       	ori	r24, 0x01	; 1
    25ee:	80 93 2b 03 	sts	0x032B, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    25f2:	e0 e3       	ldi	r30, 0x30	; 48
    25f4:	f8 e0       	ldi	r31, 0x08	; 8
    25f6:	80 8d       	ldd	r24, Z+24	; 0x18
    25f8:	8d 7f       	andi	r24, 0xFD	; 253
    25fa:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    25fc:	80 91 48 08 	lds	r24, 0x0848
    2600:	82 ff       	sbrs	r24, 2
    2602:	08 c0       	rjmp	.+16     	; 0x2614 <_Z19maininterupthandlerP7monitorh+0x28a>
	{
		anzeige |= (1<<refreshdisplay);
    2604:	90 91 2b 03 	lds	r25, 0x032B
    2608:	91 60       	ori	r25, 0x01	; 1
    260a:	90 93 2b 03 	sts	0x032B, r25
		rtc.interupts &= ~(1<<minuteninterupt);
    260e:	8b 7f       	andi	r24, 0xFB	; 251
    2610:	80 93 48 08 	sts	0x0848, r24
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    2614:	80 91 2b 03 	lds	r24, 0x032B
    2618:	80 ff       	sbrs	r24, 0
    261a:	14 c0       	rjmp	.+40     	; 0x2644 <_Z19maininterupthandlerP7monitorh+0x2ba>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    261c:	d8 01       	movw	r26, r16
    261e:	ed 91       	ld	r30, X+
    2620:	fc 91       	ld	r31, X
    2622:	02 80       	ldd	r0, Z+2	; 0x02
    2624:	f3 81       	ldd	r31, Z+3	; 0x03
    2626:	e0 2d       	mov	r30, r0
    2628:	c8 01       	movw	r24, r16
    262a:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    262c:	80 91 2b 03 	lds	r24, 0x032B
    2630:	8e 7f       	andi	r24, 0xFE	; 254
    2632:	80 93 2b 03 	sts	0x032B, r24
    2636:	06 c0       	rjmp	.+12     	; 0x2644 <_Z19maininterupthandlerP7monitorh+0x2ba>
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
				break;
		}
		if (position==0 || position==numberofpages)
    2638:	80 91 29 03 	lds	r24, 0x0329
    263c:	88 23       	and	r24, r24
    263e:	09 f4       	brne	.+2      	; 0x2642 <_Z19maininterupthandlerP7monitorh+0x2b8>
    2640:	41 cf       	rjmp	.-382    	; 0x24c4 <_Z19maininterupthandlerP7monitorh+0x13a>
    2642:	46 cf       	rjmp	.-372    	; 0x24d0 <_Z19maininterupthandlerP7monitorh+0x146>
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    2644:	0f 90       	pop	r0
    2646:	df 91       	pop	r29
    2648:	cf 91       	pop	r28
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	ff 90       	pop	r15
    2650:	ef 90       	pop	r14
    2652:	df 90       	pop	r13
    2654:	cf 90       	pop	r12
    2656:	08 95       	ret

00002658 <_Z10gpshandlerv>:

void gpshandler(){
    2658:	4f 92       	push	r4
    265a:	5f 92       	push	r5
    265c:	6f 92       	push	r6
    265e:	7f 92       	push	r7
    2660:	8f 92       	push	r8
    2662:	9f 92       	push	r9
    2664:	af 92       	push	r10
    2666:	bf 92       	push	r11
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	00 d0       	rcall	.+0      	; 0x2674 <_Z10gpshandlerv+0x1c>
    2674:	00 d0       	rcall	.+0      	; 0x2676 <_Z10gpshandlerv+0x1e>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    267a:	10 91 27 03 	lds	r17, 0x0327
    267e:	12 ff       	sbrs	r17, 2
    2680:	40 c2       	rjmp	.+1152   	; 0x2b02 <_Z10gpshandlerv+0x4aa>
    2682:	11 23       	and	r17, r17
    2684:	0c f0       	brlt	.+2      	; 0x2688 <_Z10gpshandlerv+0x30>
    2686:	c8 c2       	rjmp	.+1424   	; 0x2c18 <_Z10gpshandlerv+0x5c0>
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    2688:	0f 2e       	mov	r0, r31
    268a:	ff ed       	ldi	r31, 0xDF	; 223
    268c:	ef 2e       	mov	r14, r31
    268e:	f2 e0       	ldi	r31, 0x02	; 2
    2690:	ff 2e       	mov	r15, r31
    2692:	f0 2d       	mov	r31, r0
    2694:	f7 01       	movw	r30, r14
    2696:	80 85       	ldd	r24, Z+8	; 0x08
    2698:	21 ed       	ldi	r18, 0xD1	; 209
    269a:	28 0f       	add	r18, r24
void gpshandler(){
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    269c:	87 81       	ldd	r24, Z+7	; 0x07
    269e:	88 0f       	add	r24, r24
    26a0:	80 56       	subi	r24, 0x60	; 96
    26a2:	98 2f       	mov	r25, r24
    26a4:	99 0f       	add	r25, r25
    26a6:	99 0f       	add	r25, r25
    26a8:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    26aa:	82 0f       	add	r24, r18
    26ac:	80 93 d1 02 	sts	0x02D1, r24
    26b0:	82 85       	ldd	r24, Z+10	; 0x0a
    26b2:	20 ed       	ldi	r18, 0xD0	; 208
    26b4:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    26b6:	81 85       	ldd	r24, Z+9	; 0x09
    26b8:	88 0f       	add	r24, r24
    26ba:	80 56       	subi	r24, 0x60	; 96
    26bc:	98 2f       	mov	r25, r24
    26be:	99 0f       	add	r25, r25
    26c0:	99 0f       	add	r25, r25
    26c2:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    26c4:	82 0f       	add	r24, r18
    26c6:	80 93 d0 02 	sts	0x02D0, r24
    26ca:	84 85       	ldd	r24, Z+12	; 0x0c
    26cc:	20 ed       	ldi	r18, 0xD0	; 208
    26ce:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    26d0:	83 85       	ldd	r24, Z+11	; 0x0b
    26d2:	88 0f       	add	r24, r24
    26d4:	80 56       	subi	r24, 0x60	; 96
    26d6:	98 2f       	mov	r25, r24
    26d8:	99 0f       	add	r25, r25
    26da:	99 0f       	add	r25, r25
    26dc:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    26de:	82 0f       	add	r24, r18
    26e0:	80 93 cf 02 	sts	0x02CF, r24
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
		lat +=	(gpsdata[21] - '0');
		float latmin =	(gpsdata[22] - '0')*10;
    26e4:	86 89       	ldd	r24, Z+22	; 0x16
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	c0 97       	sbiw	r24, 0x30	; 48
    26ea:	bc 01       	movw	r22, r24
    26ec:	66 0f       	add	r22, r22
    26ee:	77 1f       	adc	r23, r23
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	68 0f       	add	r22, r24
    26fe:	79 1f       	adc	r23, r25
    2700:	07 2e       	mov	r0, r23
    2702:	00 0c       	add	r0, r0
    2704:	88 0b       	sbc	r24, r24
    2706:	99 0b       	sbc	r25, r25
    2708:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    270c:	4b 01       	movw	r8, r22
    270e:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[23] - '0');
    2710:	f7 01       	movw	r30, r14
    2712:	87 89       	ldd	r24, Z+23	; 0x17
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	c0 97       	sbiw	r24, 0x30	; 48
    2718:	bc 01       	movw	r22, r24
    271a:	99 0f       	add	r25, r25
    271c:	88 0b       	sbc	r24, r24
    271e:	99 0b       	sbc	r25, r25
    2720:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    2724:	a5 01       	movw	r20, r10
    2726:	94 01       	movw	r18, r8
    2728:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    272c:	4b 01       	movw	r8, r22
    272e:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[25] - '0')/10.0;
    2730:	f7 01       	movw	r30, r14
    2732:	81 8d       	ldd	r24, Z+25	; 0x19
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	c0 97       	sbiw	r24, 0x30	; 48
    2738:	bc 01       	movw	r22, r24
    273a:	99 0f       	add	r25, r25
    273c:	88 0b       	sbc	r24, r24
    273e:	99 0b       	sbc	r25, r25
    2740:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    2750:	a5 01       	movw	r20, r10
    2752:	94 01       	movw	r18, r8
    2754:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2758:	4b 01       	movw	r8, r22
    275a:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[26] - '0')/100.0;
    275c:	f7 01       	movw	r30, r14
    275e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	c0 97       	sbiw	r24, 0x30	; 48
    2764:	bc 01       	movw	r22, r24
    2766:	99 0f       	add	r25, r25
    2768:	88 0b       	sbc	r24, r24
    276a:	99 0b       	sbc	r25, r25
    276c:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	48 ec       	ldi	r20, 0xC8	; 200
    2776:	52 e4       	ldi	r21, 0x42	; 66
    2778:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    277c:	a5 01       	movw	r20, r10
    277e:	94 01       	movw	r18, r8
    2780:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2784:	4b 01       	movw	r8, r22
    2786:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[27] - '0')/1000.0;
    2788:	f7 01       	movw	r30, r14
    278a:	83 8d       	ldd	r24, Z+27	; 0x1b
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	c0 97       	sbiw	r24, 0x30	; 48
    2790:	bc 01       	movw	r22, r24
    2792:	99 0f       	add	r25, r25
    2794:	88 0b       	sbc	r24, r24
    2796:	99 0b       	sbc	r25, r25
    2798:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a e7       	ldi	r20, 0x7A	; 122
    27a2:	54 e4       	ldi	r21, 0x44	; 68
    27a4:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    27a8:	a5 01       	movw	r20, r10
    27aa:	94 01       	movw	r18, r8
    27ac:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    27b0:	4b 01       	movw	r8, r22
    27b2:	5c 01       	movw	r10, r24
		gpsminute +=	(gpsdata[10] - '0');
		gpssekunde =	(gpsdata[11] - '0')*10;
		gpssekunde +=	(gpsdata[12] - '0');
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
    27b4:	f7 01       	movw	r30, r14
    27b6:	44 89       	ldd	r20, Z+20	; 0x14
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	40 53       	subi	r20, 0x30	; 48
    27bc:	51 09       	sbc	r21, r1
    27be:	ca 01       	movw	r24, r20
    27c0:	88 0f       	add	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	44 0f       	add	r20, r20
    27c6:	55 1f       	adc	r21, r21
    27c8:	44 0f       	add	r20, r20
    27ca:	55 1f       	adc	r21, r21
    27cc:	44 0f       	add	r20, r20
    27ce:	55 1f       	adc	r21, r21
    27d0:	84 0f       	add	r24, r20
    27d2:	95 1f       	adc	r25, r21
    27d4:	bc 01       	movw	r22, r24
    27d6:	99 0f       	add	r25, r25
    27d8:	88 0b       	sbc	r24, r24
    27da:	99 0b       	sbc	r25, r25
    27dc:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    27e0:	2b 01       	movw	r4, r22
    27e2:	3c 01       	movw	r6, r24
		lat +=	(gpsdata[21] - '0');
    27e4:	f7 01       	movw	r30, r14
    27e6:	85 89       	ldd	r24, Z+21	; 0x15
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	c0 97       	sbiw	r24, 0x30	; 48
    27ec:	bc 01       	movw	r22, r24
    27ee:	99 0f       	add	r25, r25
    27f0:	88 0b       	sbc	r24, r24
    27f2:	99 0b       	sbc	r25, r25
    27f4:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    27f8:	9b 01       	movw	r18, r22
    27fa:	ac 01       	movw	r20, r24
    27fc:	c3 01       	movw	r24, r6
    27fe:	b2 01       	movw	r22, r4
    2800:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2804:	2b 01       	movw	r4, r22
    2806:	3c 01       	movw	r6, r24
		float latmin =	(gpsdata[22] - '0')*10;
		latmin +=		(gpsdata[23] - '0');
		latmin +=		(gpsdata[25] - '0')/10.0;
		latmin +=		(gpsdata[26] - '0')/100.0;
		latmin +=		(gpsdata[27] - '0')/1000.0;
		latmin +=		(gpsdata[28] - '0')/10000.0;
    2808:	f7 01       	movw	r30, r14
    280a:	84 8d       	ldd	r24, Z+28	; 0x1c
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	c0 97       	sbiw	r24, 0x30	; 48
    2810:	bc 01       	movw	r22, r24
    2812:	99 0f       	add	r25, r25
    2814:	88 0b       	sbc	r24, r24
    2816:	99 0b       	sbc	r25, r25
    2818:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e4       	ldi	r19, 0x40	; 64
    2820:	4c e1       	ldi	r20, 0x1C	; 28
    2822:	56 e4       	ldi	r21, 0x46	; 70
    2824:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    2828:	a5 01       	movw	r20, r10
    282a:	94 01       	movw	r18, r8
    282c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
		lat +=	latmin/60.0;
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e7       	ldi	r20, 0x70	; 112
    2836:	52 e4       	ldi	r21, 0x42	; 66
    2838:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    283c:	9b 01       	movw	r18, r22
    283e:	ac 01       	movw	r20, r24
    2840:	c3 01       	movw	r24, r6
    2842:	b2 01       	movw	r22, r4
    2844:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2848:	60 93 da 02 	sts	0x02DA, r22
    284c:	70 93 db 02 	sts	0x02DB, r23
    2850:	80 93 dc 02 	sts	0x02DC, r24
    2854:	90 93 dd 02 	sts	0x02DD, r25
		if (gpsdata[30] != 'N')
    2858:	f7 01       	movw	r30, r14
    285a:	26 8d       	ldd	r18, Z+30	; 0x1e
    285c:	2e 34       	cpi	r18, 0x4E	; 78
    285e:	59 f0       	breq	.+22     	; 0x2876 <_Z10gpshandlerv+0x21e>
		{
			lat *= -1;
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	b0 58       	subi	r27, 0x80	; 128
    2866:	80 93 da 02 	sts	0x02DA, r24
    286a:	90 93 db 02 	sts	0x02DB, r25
    286e:	a0 93 dc 02 	sts	0x02DC, r26
    2872:	b0 93 dd 02 	sts	0x02DD, r27
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
		lon +=	(gpsdata[33] - '0')*10;
		lon +=	(gpsdata[34] - '0');
		float lonmin =	(gpsdata[35] - '0')*10;
    2876:	0f 2e       	mov	r0, r31
    2878:	ff ed       	ldi	r31, 0xDF	; 223
    287a:	ef 2e       	mov	r14, r31
    287c:	f2 e0       	ldi	r31, 0x02	; 2
    287e:	ff 2e       	mov	r15, r31
    2880:	f0 2d       	mov	r31, r0
    2882:	f7 01       	movw	r30, r14
    2884:	83 a1       	ldd	r24, Z+35	; 0x23
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	c0 97       	sbiw	r24, 0x30	; 48
    288a:	bc 01       	movw	r22, r24
    288c:	66 0f       	add	r22, r22
    288e:	77 1f       	adc	r23, r23
    2890:	88 0f       	add	r24, r24
    2892:	99 1f       	adc	r25, r25
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	68 0f       	add	r22, r24
    289e:	79 1f       	adc	r23, r25
    28a0:	07 2e       	mov	r0, r23
    28a2:	00 0c       	add	r0, r0
    28a4:	88 0b       	sbc	r24, r24
    28a6:	99 0b       	sbc	r25, r25
    28a8:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    28ac:	4b 01       	movw	r8, r22
    28ae:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[36] - '0');
    28b0:	f7 01       	movw	r30, r14
    28b2:	84 a1       	ldd	r24, Z+36	; 0x24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	c0 97       	sbiw	r24, 0x30	; 48
    28b8:	bc 01       	movw	r22, r24
    28ba:	99 0f       	add	r25, r25
    28bc:	88 0b       	sbc	r24, r24
    28be:	99 0b       	sbc	r25, r25
    28c0:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    28c4:	a5 01       	movw	r20, r10
    28c6:	94 01       	movw	r18, r8
    28c8:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    28cc:	4b 01       	movw	r8, r22
    28ce:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[38] - '0')/10.0;
    28d0:	f7 01       	movw	r30, r14
    28d2:	86 a1       	ldd	r24, Z+38	; 0x26
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	c0 97       	sbiw	r24, 0x30	; 48
    28d8:	bc 01       	movw	r22, r24
    28da:	99 0f       	add	r25, r25
    28dc:	88 0b       	sbc	r24, r24
    28de:	99 0b       	sbc	r25, r25
    28e0:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e2       	ldi	r20, 0x20	; 32
    28ea:	51 e4       	ldi	r21, 0x41	; 65
    28ec:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    28f0:	a5 01       	movw	r20, r10
    28f2:	94 01       	movw	r18, r8
    28f4:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    28f8:	4b 01       	movw	r8, r22
    28fa:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[39] - '0')/100.0;
    28fc:	f7 01       	movw	r30, r14
    28fe:	87 a1       	ldd	r24, Z+39	; 0x27
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	c0 97       	sbiw	r24, 0x30	; 48
    2904:	bc 01       	movw	r22, r24
    2906:	99 0f       	add	r25, r25
    2908:	88 0b       	sbc	r24, r24
    290a:	99 0b       	sbc	r25, r25
    290c:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	48 ec       	ldi	r20, 0xC8	; 200
    2916:	52 e4       	ldi	r21, 0x42	; 66
    2918:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    291c:	a5 01       	movw	r20, r10
    291e:	94 01       	movw	r18, r8
    2920:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2924:	4b 01       	movw	r8, r22
    2926:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[40] - '0')/1000.0;
    2928:	f7 01       	movw	r30, r14
    292a:	80 a5       	ldd	r24, Z+40	; 0x28
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	c0 97       	sbiw	r24, 0x30	; 48
    2930:	bc 01       	movw	r22, r24
    2932:	99 0f       	add	r25, r25
    2934:	88 0b       	sbc	r24, r24
    2936:	99 0b       	sbc	r25, r25
    2938:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a e7       	ldi	r20, 0x7A	; 122
    2942:	54 e4       	ldi	r21, 0x44	; 68
    2944:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    2948:	a5 01       	movw	r20, r10
    294a:	94 01       	movw	r18, r8
    294c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2950:	4b 01       	movw	r8, r22
    2952:	5c 01       	movw	r10, r24
		{
			lat *= -1;
		}
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
    2954:	f7 01       	movw	r30, r14
    2956:	80 a1       	ldd	r24, Z+32	; 0x20
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	c0 97       	sbiw	r24, 0x30	; 48
    295c:	24 e6       	ldi	r18, 0x64	; 100
    295e:	28 9f       	mul	r18, r24
    2960:	b0 01       	movw	r22, r0
    2962:	29 9f       	mul	r18, r25
    2964:	70 0d       	add	r23, r0
    2966:	11 24       	eor	r1, r1
    2968:	07 2e       	mov	r0, r23
    296a:	00 0c       	add	r0, r0
    296c:	88 0b       	sbc	r24, r24
    296e:	99 0b       	sbc	r25, r25
    2970:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    2974:	2b 01       	movw	r4, r22
    2976:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[33] - '0')*10;
    2978:	f7 01       	movw	r30, r14
    297a:	21 a1       	ldd	r18, Z+33	; 0x21
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	20 53       	subi	r18, 0x30	; 48
    2980:	31 09       	sbc	r19, r1
    2982:	c9 01       	movw	r24, r18
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	22 0f       	add	r18, r18
    298a:	33 1f       	adc	r19, r19
    298c:	22 0f       	add	r18, r18
    298e:	33 1f       	adc	r19, r19
    2990:	22 0f       	add	r18, r18
    2992:	33 1f       	adc	r19, r19
    2994:	82 0f       	add	r24, r18
    2996:	93 1f       	adc	r25, r19
    2998:	bc 01       	movw	r22, r24
    299a:	99 0f       	add	r25, r25
    299c:	88 0b       	sbc	r24, r24
    299e:	99 0b       	sbc	r25, r25
    29a0:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    29a4:	9b 01       	movw	r18, r22
    29a6:	ac 01       	movw	r20, r24
    29a8:	c3 01       	movw	r24, r6
    29aa:	b2 01       	movw	r22, r4
    29ac:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    29b0:	2b 01       	movw	r4, r22
    29b2:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[34] - '0');
    29b4:	f7 01       	movw	r30, r14
    29b6:	82 a1       	ldd	r24, Z+34	; 0x22
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	c0 97       	sbiw	r24, 0x30	; 48
    29bc:	bc 01       	movw	r22, r24
    29be:	99 0f       	add	r25, r25
    29c0:	88 0b       	sbc	r24, r24
    29c2:	99 0b       	sbc	r25, r25
    29c4:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    29c8:	9b 01       	movw	r18, r22
    29ca:	ac 01       	movw	r20, r24
    29cc:	c3 01       	movw	r24, r6
    29ce:	b2 01       	movw	r22, r4
    29d0:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    29d4:	2b 01       	movw	r4, r22
    29d6:	3c 01       	movw	r6, r24
		float lonmin =	(gpsdata[35] - '0')*10;
		lonmin +=		(gpsdata[36] - '0');
		lonmin +=		(gpsdata[38] - '0')/10.0;
		lonmin +=		(gpsdata[39] - '0')/100.0;
		lonmin +=		(gpsdata[40] - '0')/1000.0;
		lonmin +=		(gpsdata[41] - '0')/10000.0;
    29d8:	f7 01       	movw	r30, r14
    29da:	81 a5       	ldd	r24, Z+41	; 0x29
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	c0 97       	sbiw	r24, 0x30	; 48
    29e0:	bc 01       	movw	r22, r24
    29e2:	99 0f       	add	r25, r25
    29e4:	88 0b       	sbc	r24, r24
    29e6:	99 0b       	sbc	r25, r25
    29e8:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__floatsisf>
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e4       	ldi	r19, 0x40	; 64
    29f0:	4c e1       	ldi	r20, 0x1C	; 28
    29f2:	56 e4       	ldi	r21, 0x46	; 70
    29f4:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    29f8:	a5 01       	movw	r20, r10
    29fa:	94 01       	movw	r18, r8
    29fc:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
		lon +=			lonmin/60.0;
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e7       	ldi	r20, 0x70	; 112
    2a06:	52 e4       	ldi	r21, 0x42	; 66
    2a08:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__divsf3>
    2a0c:	9b 01       	movw	r18, r22
    2a0e:	ac 01       	movw	r20, r24
    2a10:	c3 01       	movw	r24, r6
    2a12:	b2 01       	movw	r22, r4
    2a14:	0e 94 76 1f 	call	0x3eec	; 0x3eec <__addsf3>
    2a18:	60 93 d6 02 	sts	0x02D6, r22
    2a1c:	70 93 d7 02 	sts	0x02D7, r23
    2a20:	80 93 d8 02 	sts	0x02D8, r24
    2a24:	90 93 d9 02 	sts	0x02D9, r25
		if (gpsdata[43] != 'E')
    2a28:	f7 01       	movw	r30, r14
    2a2a:	23 a5       	ldd	r18, Z+43	; 0x2b
    2a2c:	25 34       	cpi	r18, 0x45	; 69
    2a2e:	59 f0       	breq	.+22     	; 0x2a46 <_Z10gpshandlerv+0x3ee>
		{
			lon *= -1;
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	b0 58       	subi	r27, 0x80	; 128
    2a36:	80 93 d6 02 	sts	0x02D6, r24
    2a3a:	90 93 d7 02 	sts	0x02D7, r25
    2a3e:	a0 93 d8 02 	sts	0x02D8, r26
    2a42:	b0 93 d9 02 	sts	0x02D9, r27
		}
		//Speed and direktion ar discarted for now
		volatile uint8_t counter = 19;
    2a46:	83 e1       	ldi	r24, 0x13	; 19
    2a48:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    2a4a:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	87 30       	cpi	r24, 0x07	; 7
    2a50:	80 f4       	brcc	.+32     	; 0x2a72 <_Z10gpshandlerv+0x41a>
		{
			if (gpsdata[counter] == ',')
    2a52:	ec 81       	ldd	r30, Y+4	; 0x04
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	e1 52       	subi	r30, 0x21	; 33
    2a58:	fd 4f       	sbci	r31, 0xFD	; 253
    2a5a:	80 81       	ld	r24, Z
    2a5c:	8c 32       	cpi	r24, 0x2C	; 44
    2a5e:	19 f4       	brne	.+6      	; 0x2a66 <_Z10gpshandlerv+0x40e>
			{
				nichterreicht++;
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	8f 5f       	subi	r24, 0xFF	; 255
    2a64:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    2a66:	8c 81       	ldd	r24, Y+4	; 0x04
    2a68:	8f 5f       	subi	r24, 0xFF	; 255
    2a6a:	8c 83       	std	Y+4, r24	; 0x04
		}
		//Speed and direktion ar discarted for now
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	87 30       	cpi	r24, 0x07	; 7
    2a70:	80 f3       	brcs	.-32     	; 0x2a52 <_Z10gpshandlerv+0x3fa>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2a72:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    2a74:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	a1 52       	subi	r26, 0x21	; 33
    2a7a:	bd 4f       	sbci	r27, 0xFD	; 253
    2a7c:	8c 91       	ld	r24, X
    2a7e:	88 0f       	add	r24, r24
    2a80:	80 56       	subi	r24, 0x60	; 96
    2a82:	28 2f       	mov	r18, r24
    2a84:	22 0f       	add	r18, r18
    2a86:	22 0f       	add	r18, r18
    2a88:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	e1 52       	subi	r30, 0x21	; 33
    2a8e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a90:	81 81       	ldd	r24, Z+1	; 0x01
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	c0 97       	sbiw	r24, 0x30	; 48
    2a96:	82 0f       	add	r24, r18
    2a98:	91 1d       	adc	r25, r1
    2a9a:	80 93 ce 02 	sts	0x02CE, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2a9e:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2aa0:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	a1 52       	subi	r26, 0x21	; 33
    2aa6:	bd 4f       	sbci	r27, 0xFD	; 253
    2aa8:	12 96       	adiw	r26, 0x02	; 2
    2aaa:	8c 91       	ld	r24, X
    2aac:	88 0f       	add	r24, r24
    2aae:	80 56       	subi	r24, 0x60	; 96
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	22 0f       	add	r18, r18
    2ab4:	22 0f       	add	r18, r18
    2ab6:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	e1 52       	subi	r30, 0x21	; 33
    2abc:	fd 4f       	sbci	r31, 0xFD	; 253
    2abe:	83 81       	ldd	r24, Z+3	; 0x03
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	c0 97       	sbiw	r24, 0x30	; 48
    2ac4:	82 0f       	add	r24, r18
    2ac6:	91 1d       	adc	r25, r1
    2ac8:	80 93 cd 02 	sts	0x02CD, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2acc:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2ace:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	a1 52       	subi	r26, 0x21	; 33
    2ad4:	bd 4f       	sbci	r27, 0xFD	; 253
    2ad6:	14 96       	adiw	r26, 0x04	; 4
    2ad8:	8c 91       	ld	r24, X
    2ada:	88 0f       	add	r24, r24
    2adc:	80 56       	subi	r24, 0x60	; 96
    2ade:	28 2f       	mov	r18, r24
    2ae0:	22 0f       	add	r18, r18
    2ae2:	22 0f       	add	r18, r18
    2ae4:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	e1 52       	subi	r30, 0x21	; 33
    2aea:	fd 4f       	sbci	r31, 0xFD	; 253
    2aec:	85 81       	ldd	r24, Z+5	; 0x05
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	c0 97       	sbiw	r24, 0x30	; 48
    2af2:	82 0f       	add	r24, r18
    2af4:	91 1d       	adc	r25, r1
    2af6:	80 93 cc 02 	sts	0x02CC, r24
		
		gpsstatus &= ~(1<<complete);
    2afa:	1b 7f       	andi	r17, 0xFB	; 251
    2afc:	10 93 27 03 	sts	0x0327, r17
    2b00:	8b c0       	rjmp	.+278    	; 0x2c18 <_Z10gpshandlerv+0x5c0>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    2b02:	13 ff       	sbrs	r17, 3
    2b04:	89 c0       	rjmp	.+274    	; 0x2c18 <_Z10gpshandlerv+0x5c0>
    2b06:	11 23       	and	r17, r17
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <_Z10gpshandlerv+0x4b4>
    2b0a:	86 c0       	rjmp	.+268    	; 0x2c18 <_Z10gpshandlerv+0x5c0>
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    2b0c:	ef ed       	ldi	r30, 0xDF	; 223
    2b0e:	f2 e0       	ldi	r31, 0x02	; 2
    2b10:	80 85       	ldd	r24, Z+8	; 0x08
    2b12:	21 ed       	ldi	r18, 0xD1	; 209
    2b14:	28 0f       	add	r18, r24
		gpsstatus &= ~(1<<complete);
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    2b16:	87 81       	ldd	r24, Z+7	; 0x07
    2b18:	88 0f       	add	r24, r24
    2b1a:	80 56       	subi	r24, 0x60	; 96
    2b1c:	98 2f       	mov	r25, r24
    2b1e:	99 0f       	add	r25, r25
    2b20:	99 0f       	add	r25, r25
    2b22:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    2b24:	82 0f       	add	r24, r18
    2b26:	80 93 d1 02 	sts	0x02D1, r24
    2b2a:	82 85       	ldd	r24, Z+10	; 0x0a
    2b2c:	20 ed       	ldi	r18, 0xD0	; 208
    2b2e:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    2b30:	81 85       	ldd	r24, Z+9	; 0x09
    2b32:	88 0f       	add	r24, r24
    2b34:	80 56       	subi	r24, 0x60	; 96
    2b36:	98 2f       	mov	r25, r24
    2b38:	99 0f       	add	r25, r25
    2b3a:	99 0f       	add	r25, r25
    2b3c:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    2b3e:	82 0f       	add	r24, r18
    2b40:	80 93 d0 02 	sts	0x02D0, r24
    2b44:	84 85       	ldd	r24, Z+12	; 0x0c
    2b46:	20 ed       	ldi	r18, 0xD0	; 208
    2b48:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    2b4a:	83 85       	ldd	r24, Z+11	; 0x0b
    2b4c:	88 0f       	add	r24, r24
    2b4e:	80 56       	subi	r24, 0x60	; 96
    2b50:	98 2f       	mov	r25, r24
    2b52:	99 0f       	add	r25, r25
    2b54:	99 0f       	add	r25, r25
    2b56:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    2b58:	82 0f       	add	r24, r18
    2b5a:	80 93 cf 02 	sts	0x02CF, r24
		
		volatile uint8_t counter = 19;
    2b5e:	83 e1       	ldi	r24, 0x13	; 19
    2b60:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    2b62:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	87 30       	cpi	r24, 0x07	; 7
    2b68:	80 f4       	brcc	.+32     	; 0x2b8a <_Z10gpshandlerv+0x532>
		{
			if (gpsdata[counter] == ',')
    2b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	e1 52       	subi	r30, 0x21	; 33
    2b70:	fd 4f       	sbci	r31, 0xFD	; 253
    2b72:	80 81       	ld	r24, Z
    2b74:	8c 32       	cpi	r24, 0x2C	; 44
    2b76:	19 f4       	brne	.+6      	; 0x2b7e <_Z10gpshandlerv+0x526>
			{
				nichterreicht++;
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	8f 5f       	subi	r24, 0xFF	; 255
    2b7c:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	8f 5f       	subi	r24, 0xFF	; 255
    2b82:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	87 30       	cpi	r24, 0x07	; 7
    2b88:	80 f3       	brcs	.-32     	; 0x2b6a <_Z10gpshandlerv+0x512>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2b8a:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    2b8c:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	a1 52       	subi	r26, 0x21	; 33
    2b92:	bd 4f       	sbci	r27, 0xFD	; 253
    2b94:	8c 91       	ld	r24, X
    2b96:	88 0f       	add	r24, r24
    2b98:	80 56       	subi	r24, 0x60	; 96
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	22 0f       	add	r18, r18
    2b9e:	22 0f       	add	r18, r18
    2ba0:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	e1 52       	subi	r30, 0x21	; 33
    2ba6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba8:	81 81       	ldd	r24, Z+1	; 0x01
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	c0 97       	sbiw	r24, 0x30	; 48
    2bae:	82 0f       	add	r24, r18
    2bb0:	91 1d       	adc	r25, r1
    2bb2:	80 93 ce 02 	sts	0x02CE, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2bb6:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2bb8:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	a1 52       	subi	r26, 0x21	; 33
    2bbe:	bd 4f       	sbci	r27, 0xFD	; 253
    2bc0:	12 96       	adiw	r26, 0x02	; 2
    2bc2:	8c 91       	ld	r24, X
    2bc4:	88 0f       	add	r24, r24
    2bc6:	80 56       	subi	r24, 0x60	; 96
    2bc8:	28 2f       	mov	r18, r24
    2bca:	22 0f       	add	r18, r18
    2bcc:	22 0f       	add	r18, r18
    2bce:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	e1 52       	subi	r30, 0x21	; 33
    2bd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd6:	83 81       	ldd	r24, Z+3	; 0x03
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	c0 97       	sbiw	r24, 0x30	; 48
    2bdc:	82 0f       	add	r24, r18
    2bde:	91 1d       	adc	r25, r1
    2be0:	80 93 cd 02 	sts	0x02CD, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2be4:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2be6:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	a1 52       	subi	r26, 0x21	; 33
    2bec:	bd 4f       	sbci	r27, 0xFD	; 253
    2bee:	14 96       	adiw	r26, 0x04	; 4
    2bf0:	8c 91       	ld	r24, X
    2bf2:	88 0f       	add	r24, r24
    2bf4:	80 56       	subi	r24, 0x60	; 96
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	22 0f       	add	r18, r18
    2bfa:	22 0f       	add	r18, r18
    2bfc:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	e1 52       	subi	r30, 0x21	; 33
    2c02:	fd 4f       	sbci	r31, 0xFD	; 253
    2c04:	85 81       	ldd	r24, Z+5	; 0x05
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	c0 97       	sbiw	r24, 0x30	; 48
    2c0a:	82 0f       	add	r24, r18
    2c0c:	91 1d       	adc	r25, r1
    2c0e:	80 93 cc 02 	sts	0x02CC, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    2c12:	17 7f       	andi	r17, 0xF7	; 247
    2c14:	10 93 27 03 	sts	0x0327, r17
	}
	//fix status pruefen, wenn implementiert
}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	8f 90       	pop	r8
    2c32:	7f 90       	pop	r7
    2c34:	6f 90       	pop	r6
    2c36:	5f 90       	pop	r5
    2c38:	4f 90       	pop	r4
    2c3a:	08 95       	ret

00002c3c <main>:
void initialisierung();
void maininterupthandler(monitor *mon, uint8_t taste);
void gpshandler();

int main(void)
{
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	65 97       	sbiw	r28, 0x15	; 21
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    2c50:	57 da       	rcall	.-2898   	; 0x2100 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2c52:	8a e2       	ldi	r24, 0x2A	; 42
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <malloc>
    2c5a:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2c5c:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2c5e:	8f e2       	ldi	r24, 0x2F	; 47
    2c60:	94 e0       	ldi	r25, 0x04	; 4
    2c62:	90 8f       	std	Z+24, r25	; 0x18
    2c64:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    2c66:	80 e3       	ldi	r24, 0x30	; 48
    2c68:	98 e0       	ldi	r25, 0x08	; 8
    2c6a:	92 8f       	std	Z+26, r25	; 0x1a
    2c6c:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2c6e:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2c70:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    2c76:	88 e8       	ldi	r24, 0x88	; 136
    2c78:	92 e0       	ldi	r25, 0x02	; 2
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    2c7e:	85 e5       	ldi	r24, 0x55	; 85
    2c80:	98 e6       	ldi	r25, 0x68	; 104
    2c82:	a2 e7       	ldi	r26, 0x72	; 114
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	ab 83       	std	Y+3, r26	; 0x03
    2c8c:	bc 83       	std	Y+4, r27	; 0x04
    2c8e:	9e 01       	movw	r18, r28
    2c90:	2f 5f       	subi	r18, 0xFF	; 255
    2c92:	3f 4f       	sbci	r19, 0xFF	; 255
    2c94:	cf 01       	movw	r24, r30
    2c96:	4b 96       	adiw	r24, 0x1b	; 27
    2c98:	be 01       	movw	r22, r28
    2c9a:	65 5f       	subi	r22, 0xF5	; 245
    2c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9e:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	50 2f       	mov	r21, r16
    2ca4:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2ca6:	54 30       	cpi	r21, 0x04	; 4
    2ca8:	28 f4       	brcc	.+10     	; 0x2cb4 <main+0x78>
			{
				name[i] = na[i];
    2caa:	d8 01       	movw	r26, r16
    2cac:	5c 91       	ld	r21, X
    2cae:	dc 01       	movw	r26, r24
    2cb0:	5c 93       	st	X, r21
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	4c 93       	st	X, r20
    2cb8:	0f 5f       	subi	r16, 0xFF	; 255
    2cba:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbc:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    2cbe:	06 17       	cp	r16, r22
    2cc0:	17 07       	cpc	r17, r23
    2cc2:	79 f7       	brne	.-34     	; 0x2ca2 <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 1;
    2cc4:	ff 24       	eor	r15, r15
    2cc6:	f3 94       	inc	r15
    2cc8:	f1 a6       	std	Z+41, r15	; 0x29
		maxentries = 3;
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2cce:	fa 83       	std	Y+2, r31	; 0x02
    2cd0:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2cd2:	89 e2       	ldi	r24, 0x29	; 41
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <malloc>
    2cda:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2cdc:	fc 01       	movw	r30, r24
    2cde:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2ce0:	8f e2       	ldi	r24, 0x2F	; 47
    2ce2:	94 e0       	ldi	r25, 0x04	; 4
    2ce4:	90 8f       	std	Z+24, r25	; 0x18
    2ce6:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    2ce8:	80 e3       	ldi	r24, 0x30	; 48
    2cea:	98 e0       	ldi	r25, 0x08	; 8
    2cec:	92 8f       	std	Z+26, r25	; 0x1a
    2cee:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2cf0:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2cf2:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2cf4:	f0 a6       	std	Z+40, r15	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    2cf6:	80 e9       	ldi	r24, 0x90	; 144
    2cf8:	92 e0       	ldi	r25, 0x02	; 2
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    2cfe:	86 e0       	ldi	r24, 0x06	; 6
    2d00:	ec e3       	ldi	r30, 0x3C	; 60
    2d02:	f1 e0       	ldi	r31, 0x01	; 1
    2d04:	de 01       	movw	r26, r28
    2d06:	1d 96       	adiw	r26, 0x0d	; 13
    2d08:	01 90       	ld	r0, Z+
    2d0a:	0d 92       	st	X+, r0
    2d0c:	8a 95       	dec	r24
    2d0e:	e1 f7       	brne	.-8      	; 0x2d08 <main+0xcc>
    2d10:	ce 01       	movw	r24, r28
    2d12:	0d 96       	adiw	r24, 0x0d	; 13
    2d14:	d8 01       	movw	r26, r16
    2d16:	5b 96       	adiw	r26, 0x1b	; 27
    2d18:	ae 01       	movw	r20, r28
    2d1a:	49 5e       	subi	r20, 0xE9	; 233
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1e:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2d20:	20 e2       	ldi	r18, 0x20	; 32
    2d22:	3e 2f       	mov	r19, r30
    2d24:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2d26:	36 30       	cpi	r19, 0x06	; 6
    2d28:	18 f4       	brcc	.+6      	; 0x2d30 <main+0xf4>
			{
				name[i] = na[i];
    2d2a:	30 81       	ld	r19, Z
    2d2c:	3c 93       	st	X, r19
    2d2e:	01 c0       	rjmp	.+2      	; 0x2d32 <main+0xf6>
			}
			else
			{
				name[i] = ' ';
    2d30:	2c 93       	st	X, r18
    2d32:	31 96       	adiw	r30, 0x01	; 1
    2d34:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    2d36:	e4 17       	cp	r30, r20
    2d38:	f5 07       	cpc	r31, r21
    2d3a:	99 f7       	brne	.-26     	; 0x2d22 <main+0xe6>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    2d3c:	2b d9       	rcall	.-3498   	; 0x1f94 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2d3e:	1c 83       	std	Y+4, r17	; 0x04
    2d40:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2d42:	89 e2       	ldi	r24, 0x29	; 41
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	56 96       	adiw	r26, 0x16	; 22
    2d4e:	1c 92       	st	X, r1
    2d50:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    2d52:	2f e2       	ldi	r18, 0x2F	; 47
    2d54:	34 e0       	ldi	r19, 0x04	; 4
    2d56:	58 96       	adiw	r26, 0x18	; 24
    2d58:	3c 93       	st	X, r19
    2d5a:	2e 93       	st	-X, r18
    2d5c:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    2d5e:	20 e3       	ldi	r18, 0x30	; 48
    2d60:	38 e0       	ldi	r19, 0x08	; 8
    2d62:	5a 96       	adiw	r26, 0x1a	; 26
    2d64:	3c 93       	st	X, r19
    2d66:	2e 93       	st	-X, r18
    2d68:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    2d6a:	95 96       	adiw	r26, 0x25	; 37
    2d6c:	1c 92       	st	X, r1
    2d6e:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    2d70:	96 96       	adiw	r26, 0x26	; 38
    2d72:	1c 92       	st	X, r1
    2d74:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    2d76:	21 e0       	ldi	r18, 0x01	; 1
    2d78:	98 96       	adiw	r26, 0x28	; 40
    2d7a:	2c 93       	st	X, r18
    2d7c:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    2d7e:	28 e9       	ldi	r18, 0x98	; 152
    2d80:	32 e0       	ldi	r19, 0x02	; 2
    2d82:	2d 93       	st	X+, r18
    2d84:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    2d86:	28 e0       	ldi	r18, 0x08	; 8
    2d88:	e2 e4       	ldi	r30, 0x42	; 66
    2d8a:	f1 e0       	ldi	r31, 0x01	; 1
    2d8c:	de 01       	movw	r26, r28
    2d8e:	1d 96       	adiw	r26, 0x0d	; 13
    2d90:	01 90       	ld	r0, Z+
    2d92:	0d 92       	st	X+, r0
    2d94:	2a 95       	dec	r18
    2d96:	e1 f7       	brne	.-8      	; 0x2d90 <main+0x154>
    2d98:	9e 01       	movw	r18, r28
    2d9a:	23 5f       	subi	r18, 0xF3	; 243
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9e:	dc 01       	movw	r26, r24
    2da0:	5b 96       	adiw	r26, 0x1b	; 27
    2da2:	be 01       	movw	r22, r28
    2da4:	69 5e       	subi	r22, 0xE9	; 233
    2da6:	7f 4f       	sbci	r23, 0xFF	; 255
    2da8:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2daa:	40 e2       	ldi	r20, 0x20	; 32
    2dac:	5e 2f       	mov	r21, r30
    2dae:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2db0:	58 30       	cpi	r21, 0x08	; 8
    2db2:	18 f4       	brcc	.+6      	; 0x2dba <main+0x17e>
			{
				name[i] = na[i];
    2db4:	50 81       	ld	r21, Z
    2db6:	5c 93       	st	X, r21
    2db8:	01 c0       	rjmp	.+2      	; 0x2dbc <main+0x180>
			}
			else
			{
				name[i] = ' ';
    2dba:	4c 93       	st	X, r20
    2dbc:	31 96       	adiw	r30, 0x01	; 1
    2dbe:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    2dc0:	e6 17       	cp	r30, r22
    2dc2:	f7 07       	cpc	r31, r23
    2dc4:	99 f7       	brne	.-26     	; 0x2dac <main+0x170>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2dca:	89 e2       	ldi	r24, 0x29	; 41
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2dd6:	2f e2       	ldi	r18, 0x2F	; 47
    2dd8:	34 e0       	ldi	r19, 0x04	; 4
    2dda:	30 8f       	std	Z+24, r19	; 0x18
    2ddc:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    2dde:	20 e3       	ldi	r18, 0x30	; 48
    2de0:	38 e0       	ldi	r19, 0x08	; 8
    2de2:	32 8f       	std	Z+26, r19	; 0x1a
    2de4:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    2de6:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2de8:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2dea:	21 e0       	ldi	r18, 0x01	; 1
    2dec:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    2dee:	20 ea       	ldi	r18, 0xA0	; 160
    2df0:	32 e0       	ldi	r19, 0x02	; 2
    2df2:	31 83       	std	Z+1, r19	; 0x01
    2df4:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    2df6:	29 e0       	ldi	r18, 0x09	; 9
    2df8:	e6 ec       	ldi	r30, 0xC6	; 198
    2dfa:	f1 e0       	ldi	r31, 0x01	; 1
    2dfc:	de 01       	movw	r26, r28
    2dfe:	1d 96       	adiw	r26, 0x0d	; 13
    2e00:	01 90       	ld	r0, Z+
    2e02:	0d 92       	st	X+, r0
    2e04:	2a 95       	dec	r18
    2e06:	e1 f7       	brne	.-8      	; 0x2e00 <main+0x1c4>
    2e08:	9e 01       	movw	r18, r28
    2e0a:	23 5f       	subi	r18, 0xF3	; 243
    2e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0e:	dc 01       	movw	r26, r24
    2e10:	5b 96       	adiw	r26, 0x1b	; 27
    2e12:	be 01       	movw	r22, r28
    2e14:	69 5e       	subi	r22, 0xE9	; 233
    2e16:	7f 4f       	sbci	r23, 0xFF	; 255
    2e18:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2e1a:	40 e2       	ldi	r20, 0x20	; 32
    2e1c:	5e 2f       	mov	r21, r30
    2e1e:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2e20:	59 30       	cpi	r21, 0x09	; 9
    2e22:	18 f4       	brcc	.+6      	; 0x2e2a <main+0x1ee>
			{
				name[i] = na[i];
    2e24:	50 81       	ld	r21, Z
    2e26:	5c 93       	st	X, r21
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <main+0x1f0>
			}
			else
			{
				name[i] = ' ';
    2e2a:	4c 93       	st	X, r20
    2e2c:	31 96       	adiw	r30, 0x01	; 1
    2e2e:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    2e30:	e6 17       	cp	r30, r22
    2e32:	f7 07       	cpc	r31, r23
    2e34:	99 f7       	brne	.-26     	; 0x2e1c <main+0x1e0>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 3;
    2e36:	23 e0       	ldi	r18, 0x03	; 3
    2e38:	dc 01       	movw	r26, r24
    2e3a:	97 96       	adiw	r26, 0x27	; 39
    2e3c:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2e3e:	98 87       	std	Y+8, r25	; 0x08
    2e40:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2e42:	89 e2       	ldi	r24, 0x29	; 41
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <malloc>
    2e4a:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2e4c:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2e4e:	0f 2e       	mov	r0, r31
    2e50:	ff e2       	ldi	r31, 0x2F	; 47
    2e52:	cf 2e       	mov	r12, r31
    2e54:	f4 e0       	ldi	r31, 0x04	; 4
    2e56:	df 2e       	mov	r13, r31
    2e58:	f0 2d       	mov	r31, r0
    2e5a:	d0 8e       	std	Z+24, r13	; 0x18
    2e5c:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    2e5e:	0f 2e       	mov	r0, r31
    2e60:	f0 e3       	ldi	r31, 0x30	; 48
    2e62:	ef 2e       	mov	r14, r31
    2e64:	f8 e0       	ldi	r31, 0x08	; 8
    2e66:	ff 2e       	mov	r15, r31
    2e68:	f0 2d       	mov	r31, r0
    2e6a:	f2 8e       	std	Z+26, r15	; 0x1a
    2e6c:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    2e6e:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2e70:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2e72:	11 e0       	ldi	r17, 0x01	; 1
    2e74:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    2e76:	88 eb       	ldi	r24, 0xB8	; 184
    2e78:	92 e0       	ldi	r25, 0x02	; 2
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2e7e:	fa 87       	std	Y+10, r31	; 0x0a
    2e80:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2e82:	89 e2       	ldi	r24, 0x29	; 41
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2e8e:	d0 8e       	std	Z+24, r13	; 0x18
    2e90:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    2e92:	f2 8e       	std	Z+26, r15	; 0x1a
    2e94:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    2e96:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2e98:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2e9a:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    2e9c:	20 eb       	ldi	r18, 0xB0	; 176
    2e9e:	32 e0       	ldi	r19, 0x02	; 2
    2ea0:	31 83       	std	Z+1, r19	; 0x01
    2ea2:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    2ea4:	26 e0       	ldi	r18, 0x06	; 6
    2ea6:	ef ec       	ldi	r30, 0xCF	; 207
    2ea8:	f1 e0       	ldi	r31, 0x01	; 1
    2eaa:	de 01       	movw	r26, r28
    2eac:	1d 96       	adiw	r26, 0x0d	; 13
    2eae:	01 90       	ld	r0, Z+
    2eb0:	0d 92       	st	X+, r0
    2eb2:	2a 95       	dec	r18
    2eb4:	e1 f7       	brne	.-8      	; 0x2eae <main+0x272>
    2eb6:	9e 01       	movw	r18, r28
    2eb8:	23 5f       	subi	r18, 0xF3	; 243
    2eba:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	5b 96       	adiw	r26, 0x1b	; 27
    2ec0:	be 01       	movw	r22, r28
    2ec2:	69 5e       	subi	r22, 0xE9	; 233
    2ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec6:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2ec8:	40 e2       	ldi	r20, 0x20	; 32
    2eca:	5e 2f       	mov	r21, r30
    2ecc:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    2ece:	56 30       	cpi	r21, 0x06	; 6
    2ed0:	18 f4       	brcc	.+6      	; 0x2ed8 <main+0x29c>
			{
				name[i] = na[i];
    2ed2:	50 81       	ld	r21, Z
    2ed4:	5c 93       	st	X, r21
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <main+0x29e>
			}
			else
			{
				name[i] = ' ';
    2ed8:	4c 93       	st	X, r20
    2eda:	31 96       	adiw	r30, 0x01	; 1
    2edc:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    2ede:	e6 17       	cp	r30, r22
    2ee0:	f7 07       	cpc	r31, r23
    2ee2:	99 f7       	brne	.-26     	; 0x2eca <main+0x28e>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	98 96       	adiw	r26, 0x28	; 40
    2ee8:	1c 92       	st	X, r1
    2eea:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    2eec:	25 e0       	ldi	r18, 0x05	; 5
    2eee:	97 96       	adiw	r26, 0x27	; 39
    2ef0:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2ef2:	9c 87       	std	Y+12, r25	; 0x0c
    2ef4:	8b 87       	std	Y+11, r24	; 0x0b
	
	

	while (1) 
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    2ef6:	83 e2       	ldi	r24, 0x23	; 35
    2ef8:	94 e0       	ldi	r25, 0x04	; 4
    2efa:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_ZN9Interface7unifiedEv>
    2efe:	e0 91 29 03 	lds	r30, 0x0329
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	ee 0f       	add	r30, r30
    2f06:	ff 1f       	adc	r31, r31
    2f08:	21 e0       	ldi	r18, 0x01	; 1
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	2c 0f       	add	r18, r28
    2f0e:	3d 1f       	adc	r19, r29
    2f10:	e2 0f       	add	r30, r18
    2f12:	f3 1f       	adc	r31, r19
    2f14:	68 2f       	mov	r22, r24
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	37 da       	rcall	.-2962   	; 0x238a <_Z19maininterupthandlerP7monitorh>
		gpshandler();
    2f1c:	9d db       	rcall	.-2246   	; 0x2658 <_Z10gpshandlerv>
		if (statusreg&(1<<powersavemode))
    2f1e:	80 91 2a 03 	lds	r24, 0x032A
    2f22:	81 ff       	sbrs	r24, 1
    2f24:	e8 cf       	rjmp	.-48     	; 0x2ef6 <main+0x2ba>
		{
			SMCR |= (1<<SE);
    2f26:	83 b7       	in	r24, 0x33	; 51
    2f28:	81 60       	ori	r24, 0x01	; 1
    2f2a:	83 bf       	out	0x33, r24	; 51
    2f2c:	e4 cf       	rjmp	.-56     	; 0x2ef6 <main+0x2ba>

00002f2e <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    2f2e:	2f 92       	push	r2
    2f30:	3f 92       	push	r3
    2f32:	4f 92       	push	r4
    2f34:	5f 92       	push	r5
    2f36:	6f 92       	push	r6
    2f38:	7f 92       	push	r7
    2f3a:	8f 92       	push	r8
    2f3c:	9f 92       	push	r9
    2f3e:	af 92       	push	r10
    2f40:	bf 92       	push	r11
    2f42:	cf 92       	push	r12
    2f44:	df 92       	push	r13
    2f46:	ef 92       	push	r14
    2f48:	ff 92       	push	r15
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	66 97       	sbiw	r28, 0x16	; 22
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    2f62:	80 e3       	ldi	r24, 0x30	; 48
    2f64:	98 e0       	ldi	r25, 0x08	; 8
    2f66:	7a d7       	rcall	.+3828   	; 0x3e5c <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2f68:	8f e2       	ldi	r24, 0x2F	; 47
    2f6a:	94 e0       	ldi	r25, 0x04	; 4
    2f6c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2f70:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2f72:	0f 2e       	mov	r0, r31
    2f74:	ff e0       	ldi	r31, 0x0F	; 15
    2f76:	7f 2e       	mov	r7, r31
    2f78:	f0 2d       	mov	r31, r0
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	2c 01       	movw	r4, r24
    2f80:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2f82:	8d 8b       	std	Y+21, r24	; 0x15
    2f84:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    2f86:	0f 2e       	mov	r0, r31
    2f88:	f0 e3       	ldi	r31, 0x30	; 48
    2f8a:	cf 2e       	mov	r12, r31
    2f8c:	f8 e0       	ldi	r31, 0x08	; 8
    2f8e:	df 2e       	mov	r13, r31
    2f90:	f0 2d       	mov	r31, r0
    2f92:	0f 2e       	mov	r0, r31
    2f94:	fd ec       	ldi	r31, 0xCD	; 205
    2f96:	8f 2e       	mov	r8, r31
    2f98:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    2f9a:	68 94       	set
    2f9c:	ee 24       	eor	r14, r14
    2f9e:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    2fa0:	0f 2e       	mov	r0, r31
    2fa2:	fe e2       	ldi	r31, 0x2E	; 46
    2fa4:	6f 2e       	mov	r6, r31
    2fa6:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2fa8:	e5 ed       	ldi	r30, 0xD5	; 213
    2faa:	f1 e0       	ldi	r31, 0x01	; 1
    2fac:	d2 01       	movw	r26, r4
    2fae:	87 2d       	mov	r24, r7
    2fb0:	01 90       	ld	r0, Z+
    2fb2:	0d 92       	st	X+, r0
    2fb4:	8a 95       	dec	r24
    2fb6:	e1 f7       	brne	.-8      	; 0x2fb0 <_Z13uhreinstellenv+0x82>
    2fb8:	52 01       	movw	r10, r4
    2fba:	12 01       	movw	r2, r4
    2fbc:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2fbe:	f1 01       	movw	r30, r2
    2fc0:	61 91       	ld	r22, Z+
    2fc2:	1f 01       	movw	r2, r30
    2fc4:	2f 2d       	mov	r18, r15
    2fc6:	41 2f       	mov	r20, r17
    2fc8:	8f e2       	ldi	r24, 0x2F	; 47
    2fca:	94 e0       	ldi	r25, 0x04	; 4
    2fcc:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    2fd0:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    2fd2:	14 35       	cpi	r17, 0x54	; 84
    2fd4:	a1 f7       	brne	.-24     	; 0x2fbe <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    2fd6:	e5 e1       	ldi	r30, 0x15	; 21
    2fd8:	f1 e0       	ldi	r31, 0x01	; 1
    2fda:	d2 01       	movw	r26, r4
    2fdc:	87 2d       	mov	r24, r7
    2fde:	01 90       	ld	r0, Z+
    2fe0:	0d 92       	st	X+, r0
    2fe2:	8a 95       	dec	r24
    2fe4:	e1 f7       	brne	.-8      	; 0x2fde <_Z13uhreinstellenv+0xb0>
    2fe6:	2d 88       	ldd	r2, Y+21	; 0x15
    2fe8:	3e 88       	ldd	r3, Y+22	; 0x16
    2fea:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2fec:	f1 01       	movw	r30, r2
    2fee:	61 91       	ld	r22, Z+
    2ff0:	1f 01       	movw	r2, r30
    2ff2:	28 e0       	ldi	r18, 0x08	; 8
    2ff4:	41 2f       	mov	r20, r17
    2ff6:	8f e2       	ldi	r24, 0x2F	; 47
    2ff8:	94 e0       	ldi	r25, 0x04	; 4
    2ffa:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    2ffe:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    3000:	14 35       	cpi	r17, 0x54	; 84
    3002:	a1 f7       	brne	.-24     	; 0x2fec <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    3004:	f6 01       	movw	r30, r12
    3006:	90 89       	ldd	r25, Z+16	; 0x10
    3008:	98 9d       	mul	r25, r8
    300a:	81 2d       	mov	r24, r1
    300c:	11 24       	eor	r1, r1
    300e:	86 95       	lsr	r24
    3010:	86 95       	lsr	r24
    3012:	86 95       	lsr	r24
    3014:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    3016:	88 0f       	add	r24, r24
    3018:	28 2f       	mov	r18, r24
    301a:	22 0f       	add	r18, r18
    301c:	22 0f       	add	r18, r18
    301e:	82 0f       	add	r24, r18
    3020:	98 1b       	sub	r25, r24
    3022:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    3024:	fa e3       	ldi	r31, 0x3A	; 58
    3026:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    3028:	f6 01       	movw	r30, r12
    302a:	91 89       	ldd	r25, Z+17	; 0x11
    302c:	98 9d       	mul	r25, r8
    302e:	81 2d       	mov	r24, r1
    3030:	11 24       	eor	r1, r1
    3032:	86 95       	lsr	r24
    3034:	86 95       	lsr	r24
    3036:	86 95       	lsr	r24
    3038:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    303a:	88 0f       	add	r24, r24
    303c:	28 2f       	mov	r18, r24
    303e:	22 0f       	add	r18, r18
    3040:	22 0f       	add	r18, r18
    3042:	82 0f       	add	r24, r18
    3044:	98 1b       	sub	r25, r24
    3046:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    3048:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    304a:	94 89       	ldd	r25, Z+20	; 0x14
    304c:	98 9d       	mul	r25, r8
    304e:	81 2d       	mov	r24, r1
    3050:	11 24       	eor	r1, r1
    3052:	86 95       	lsr	r24
    3054:	86 95       	lsr	r24
    3056:	86 95       	lsr	r24
    3058:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    305a:	88 0f       	add	r24, r24
    305c:	28 2f       	mov	r18, r24
    305e:	22 0f       	add	r18, r18
    3060:	22 0f       	add	r18, r18
    3062:	82 0f       	add	r24, r18
    3064:	98 1b       	sub	r25, r24
    3066:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    3068:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    306a:	96 89       	ldd	r25, Z+22	; 0x16
    306c:	98 9d       	mul	r25, r8
    306e:	81 2d       	mov	r24, r1
    3070:	11 24       	eor	r1, r1
    3072:	86 95       	lsr	r24
    3074:	86 95       	lsr	r24
    3076:	86 95       	lsr	r24
    3078:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    307a:	88 0f       	add	r24, r24
    307c:	28 2f       	mov	r18, r24
    307e:	22 0f       	add	r18, r18
    3080:	22 0f       	add	r18, r18
    3082:	82 0f       	add	r24, r18
    3084:	98 1b       	sub	r25, r24
    3086:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    3088:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    308a:	97 89       	ldd	r25, Z+23	; 0x17
    308c:	98 9d       	mul	r25, r8
    308e:	81 2d       	mov	r24, r1
    3090:	11 24       	eor	r1, r1
    3092:	86 95       	lsr	r24
    3094:	86 95       	lsr	r24
    3096:	86 95       	lsr	r24
    3098:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    309a:	88 0f       	add	r24, r24
    309c:	28 2f       	mov	r18, r24
    309e:	22 0f       	add	r18, r18
    30a0:	22 0f       	add	r18, r18
    30a2:	82 0f       	add	r24, r18
    30a4:	98 1b       	sub	r25, r24
    30a6:	9e 87       	std	Y+14, r25	; 0x0e
    30a8:	0d 89       	ldd	r16, Y+21	; 0x15
    30aa:	1e 89       	ldd	r17, Y+22	; 0x16
    30ac:	2f 2c       	mov	r2, r15
    30ae:	33 24       	eor	r3, r3
    30b0:	33 94       	inc	r3
    30b2:	05 c0       	rjmp	.+10     	; 0x30be <_Z13uhreinstellenv+0x190>
    30b4:	33 94       	inc	r3
    30b6:	0f 5f       	subi	r16, 0xFF	; 255
    30b8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ba:	f0 e1       	ldi	r31, 0x10	; 16
    30bc:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    30be:	83 e0       	ldi	r24, 0x03	; 3
    30c0:	38 16       	cp	r3, r24
    30c2:	61 f0       	breq	.+24     	; 0x30dc <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    30c4:	20 e1       	ldi	r18, 0x10	; 16
    30c6:	42 2d       	mov	r20, r2
    30c8:	f8 01       	movw	r30, r16
    30ca:	60 81       	ld	r22, Z
    30cc:	8f e2       	ldi	r24, 0x2F	; 47
    30ce:	94 e0       	ldi	r25, 0x04	; 4
    30d0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    30d4:	f4 e0       	ldi	r31, 0x04	; 4
    30d6:	f3 15       	cp	r31, r3
    30d8:	68 f7       	brcc	.-38     	; 0x30b4 <_Z13uhreinstellenv+0x186>
    30da:	08 c0       	rjmp	.+16     	; 0x30ec <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    30dc:	24 e1       	ldi	r18, 0x14	; 20
    30de:	48 e2       	ldi	r20, 0x28	; 40
    30e0:	6b 81       	ldd	r22, Y+3	; 0x03
    30e2:	8f e2       	ldi	r24, 0x2F	; 47
    30e4:	94 e0       	ldi	r25, 0x04	; 4
    30e6:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    30ea:	e4 cf       	rjmp	.-56     	; 0x30b4 <_Z13uhreinstellenv+0x186>
    30ec:	8e 01       	movw	r16, r28
    30ee:	09 5f       	subi	r16, 0xF9	; 249
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    30f2:	2f 2c       	mov	r2, r15
    30f4:	0f 2e       	mov	r0, r31
    30f6:	f6 e0       	ldi	r31, 0x06	; 6
    30f8:	3f 2e       	mov	r3, r31
    30fa:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    30fc:	88 e0       	ldi	r24, 0x08	; 8
    30fe:	38 16       	cp	r3, r24
    3100:	61 f0       	breq	.+24     	; 0x311a <_Z13uhreinstellenv+0x1ec>
    3102:	9b e0       	ldi	r25, 0x0B	; 11
    3104:	39 16       	cp	r3, r25
    3106:	49 f0       	breq	.+18     	; 0x311a <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    3108:	2e 2d       	mov	r18, r14
    310a:	42 2d       	mov	r20, r2
    310c:	f8 01       	movw	r30, r16
    310e:	60 81       	ld	r22, Z
    3110:	8f e2       	ldi	r24, 0x2F	; 47
    3112:	94 e0       	ldi	r25, 0x04	; 4
    3114:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7Display16draw_number16x16Ehhh>
    3118:	09 c0       	rjmp	.+18     	; 0x312c <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    311a:	28 e2       	ldi	r18, 0x28	; 40
    311c:	48 e0       	ldi	r20, 0x08	; 8
    311e:	42 0d       	add	r20, r2
    3120:	f8 01       	movw	r30, r16
    3122:	60 81       	ld	r22, Z
    3124:	8f e2       	ldi	r24, 0x2F	; 47
    3126:	94 e0       	ldi	r25, 0x04	; 4
    3128:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    312c:	33 94       	inc	r3
    312e:	0f 5f       	subi	r16, 0xFF	; 255
    3130:	1f 4f       	sbci	r17, 0xFF	; 255
    3132:	f0 e1       	ldi	r31, 0x10	; 16
    3134:	2f 0e       	add	r2, r31
    3136:	8e e0       	ldi	r24, 0x0E	; 14
    3138:	38 12       	cpse	r3, r24
    313a:	e0 cf       	rjmp	.-64     	; 0x30fc <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    313c:	8f e2       	ldi	r24, 0x2F	; 47
    313e:	94 e0       	ldi	r25, 0x04	; 4
    3140:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    3144:	8f e2       	ldi	r24, 0x2F	; 47
    3146:	94 e0       	ldi	r25, 0x04	; 4
    3148:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
		switch (pos) {
    314c:	89 2d       	mov	r24, r9
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	8a 30       	cpi	r24, 0x0A	; 10
    3152:	91 05       	cpc	r25, r1
    3154:	08 f0       	brcs	.+2      	; 0x3158 <_Z13uhreinstellenv+0x22a>
    3156:	2c c2       	rjmp	.+1112   	; 0x35b0 <_Z13uhreinstellenv+0x682>
    3158:	fc 01       	movw	r30, r24
    315a:	ed 55       	subi	r30, 0x5D	; 93
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	0c 94 bc 25 	jmp	0x4b78	; 0x4b78 <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    3162:	83 e2       	ldi	r24, 0x23	; 35
    3164:	94 e0       	ldi	r25, 0x04	; 4
    3166:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    316a:	88 0f       	add	r24, r24
    316c:	98 2f       	mov	r25, r24
    316e:	99 0f       	add	r25, r25
    3170:	99 0f       	add	r25, r25
    3172:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    3174:	88 31       	cpi	r24, 0x18	; 24
    3176:	08 f4       	brcc	.+2      	; 0x317a <_Z13uhreinstellenv+0x24c>
    3178:	57 c2       	rjmp	.+1198   	; 0x3628 <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    317a:	f6 01       	movw	r30, r12
    317c:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    317e:	e4 ee       	ldi	r30, 0xE4	; 228
    3180:	f1 e0       	ldi	r31, 0x01	; 1
    3182:	d2 01       	movw	r26, r4
    3184:	87 2d       	mov	r24, r7
    3186:	01 90       	ld	r0, Z+
    3188:	0d 92       	st	X+, r0
    318a:	8a 95       	dec	r24
    318c:	e1 f7       	brne	.-8      	; 0x3186 <_Z13uhreinstellenv+0x258>
    318e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3190:	f5 01       	movw	r30, r10
    3192:	61 91       	ld	r22, Z+
    3194:	5f 01       	movw	r10, r30
    3196:	28 e3       	ldi	r18, 0x38	; 56
    3198:	41 2f       	mov	r20, r17
    319a:	8f e2       	ldi	r24, 0x2F	; 47
    319c:	94 e0       	ldi	r25, 0x04	; 4
    319e:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    31a2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    31a4:	14 35       	cpi	r17, 0x54	; 84
    31a6:	a1 f7       	brne	.-24     	; 0x3190 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    31a8:	99 24       	eor	r9, r9
    31aa:	9a 94       	dec	r9
    31ac:	3f c2       	rjmp	.+1150   	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    31ae:	83 e2       	ldi	r24, 0x23	; 35
    31b0:	94 e0       	ldi	r25, 0x04	; 4
    31b2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    31b6:	f6 01       	movw	r30, r12
    31b8:	20 89       	ldd	r18, Z+16	; 0x10
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	82 0f       	add	r24, r18
    31be:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    31c0:	88 31       	cpi	r24, 0x18	; 24
    31c2:	10 f4       	brcc	.+4      	; 0x31c8 <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    31c4:	80 8b       	std	Z+16, r24	; 0x10
    31c6:	32 c2       	rjmp	.+1124   	; 0x362c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    31c8:	f6 01       	movw	r30, r12
    31ca:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    31cc:	e4 ee       	ldi	r30, 0xE4	; 228
    31ce:	f1 e0       	ldi	r31, 0x01	; 1
    31d0:	d2 01       	movw	r26, r4
    31d2:	87 2d       	mov	r24, r7
    31d4:	01 90       	ld	r0, Z+
    31d6:	0d 92       	st	X+, r0
    31d8:	8a 95       	dec	r24
    31da:	e1 f7       	brne	.-8      	; 0x31d4 <_Z13uhreinstellenv+0x2a6>
    31dc:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    31de:	f5 01       	movw	r30, r10
    31e0:	61 91       	ld	r22, Z+
    31e2:	5f 01       	movw	r10, r30
    31e4:	28 e3       	ldi	r18, 0x38	; 56
    31e6:	41 2f       	mov	r20, r17
    31e8:	8f e2       	ldi	r24, 0x2F	; 47
    31ea:	94 e0       	ldi	r25, 0x04	; 4
    31ec:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    31f0:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    31f2:	14 35       	cpi	r17, 0x54	; 84
    31f4:	a1 f7       	brne	.-24     	; 0x31de <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    31f6:	99 24       	eor	r9, r9
    31f8:	9a 94       	dec	r9
    31fa:	18 c2       	rjmp	.+1072   	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    31fc:	83 e2       	ldi	r24, 0x23	; 35
    31fe:	94 e0       	ldi	r25, 0x04	; 4
    3200:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    3204:	88 0f       	add	r24, r24
    3206:	98 2f       	mov	r25, r24
    3208:	99 0f       	add	r25, r25
    320a:	99 0f       	add	r25, r25
    320c:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    320e:	8c 33       	cpi	r24, 0x3C	; 60
    3210:	18 f4       	brcc	.+6      	; 0x3218 <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    3212:	f6 01       	movw	r30, r12
    3214:	81 8b       	std	Z+17, r24	; 0x11
    3216:	0a c2       	rjmp	.+1044   	; 0x362c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    3218:	f6 01       	movw	r30, r12
    321a:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    321c:	e3 ef       	ldi	r30, 0xF3	; 243
    321e:	f1 e0       	ldi	r31, 0x01	; 1
    3220:	d2 01       	movw	r26, r4
    3222:	87 2d       	mov	r24, r7
    3224:	01 90       	ld	r0, Z+
    3226:	0d 92       	st	X+, r0
    3228:	8a 95       	dec	r24
    322a:	e1 f7       	brne	.-8      	; 0x3224 <_Z13uhreinstellenv+0x2f6>
    322c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    322e:	f5 01       	movw	r30, r10
    3230:	61 91       	ld	r22, Z+
    3232:	5f 01       	movw	r10, r30
    3234:	28 e3       	ldi	r18, 0x38	; 56
    3236:	41 2f       	mov	r20, r17
    3238:	8f e2       	ldi	r24, 0x2F	; 47
    323a:	94 e0       	ldi	r25, 0x04	; 4
    323c:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3240:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3242:	14 35       	cpi	r17, 0x54	; 84
    3244:	a1 f7       	brne	.-24     	; 0x322e <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    3246:	99 24       	eor	r9, r9
    3248:	93 94       	inc	r9
    324a:	f0 c1       	rjmp	.+992    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    324c:	83 e2       	ldi	r24, 0x23	; 35
    324e:	94 e0       	ldi	r25, 0x04	; 4
    3250:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    3254:	f6 01       	movw	r30, r12
    3256:	21 89       	ldd	r18, Z+17	; 0x11
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	82 0f       	add	r24, r18
    325c:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    325e:	8c 33       	cpi	r24, 0x3C	; 60
    3260:	10 f4       	brcc	.+4      	; 0x3266 <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    3262:	81 8b       	std	Z+17, r24	; 0x11
    3264:	e3 c1       	rjmp	.+966    	; 0x362c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    3266:	f6 01       	movw	r30, r12
    3268:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    326a:	e3 ef       	ldi	r30, 0xF3	; 243
    326c:	f1 e0       	ldi	r31, 0x01	; 1
    326e:	d2 01       	movw	r26, r4
    3270:	87 2d       	mov	r24, r7
    3272:	01 90       	ld	r0, Z+
    3274:	0d 92       	st	X+, r0
    3276:	8a 95       	dec	r24
    3278:	e1 f7       	brne	.-8      	; 0x3272 <_Z13uhreinstellenv+0x344>
    327a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    327c:	f5 01       	movw	r30, r10
    327e:	61 91       	ld	r22, Z+
    3280:	5f 01       	movw	r10, r30
    3282:	28 e3       	ldi	r18, 0x38	; 56
    3284:	41 2f       	mov	r20, r17
    3286:	8f e2       	ldi	r24, 0x2F	; 47
    3288:	94 e0       	ldi	r25, 0x04	; 4
    328a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    328e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3290:	14 35       	cpi	r17, 0x54	; 84
    3292:	a1 f7       	brne	.-24     	; 0x327c <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    3294:	99 24       	eor	r9, r9
    3296:	93 94       	inc	r9
    3298:	c9 c1       	rjmp	.+914    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    329a:	83 e2       	ldi	r24, 0x23	; 35
    329c:	94 e0       	ldi	r25, 0x04	; 4
    329e:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    32a2:	88 0f       	add	r24, r24
    32a4:	98 2f       	mov	r25, r24
    32a6:	99 0f       	add	r25, r25
    32a8:	99 0f       	add	r25, r25
    32aa:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    32ac:	80 32       	cpi	r24, 0x20	; 32
    32ae:	18 f4       	brcc	.+6      	; 0x32b6 <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    32b0:	f6 01       	movw	r30, r12
    32b2:	84 8b       	std	Z+20, r24	; 0x14
    32b4:	bb c1       	rjmp	.+886    	; 0x362c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    32b6:	f6 01       	movw	r30, r12
    32b8:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    32ba:	8b e0       	ldi	r24, 0x0B	; 11
    32bc:	e2 e0       	ldi	r30, 0x02	; 2
    32be:	f2 e0       	ldi	r31, 0x02	; 2
    32c0:	d2 01       	movw	r26, r4
    32c2:	01 90       	ld	r0, Z+
    32c4:	0d 92       	st	X+, r0
    32c6:	8a 95       	dec	r24
    32c8:	e1 f7       	brne	.-8      	; 0x32c2 <_Z13uhreinstellenv+0x394>
    32ca:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    32cc:	f5 01       	movw	r30, r10
    32ce:	61 91       	ld	r22, Z+
    32d0:	5f 01       	movw	r10, r30
    32d2:	28 e3       	ldi	r18, 0x38	; 56
    32d4:	41 2f       	mov	r20, r17
    32d6:	8f e2       	ldi	r24, 0x2F	; 47
    32d8:	94 e0       	ldi	r25, 0x04	; 4
    32da:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    32de:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    32e0:	1c 33       	cpi	r17, 0x3C	; 60
    32e2:	a1 f7       	brne	.-24     	; 0x32cc <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    32e4:	0f 2e       	mov	r0, r31
    32e6:	f3 e0       	ldi	r31, 0x03	; 3
    32e8:	9f 2e       	mov	r9, r31
    32ea:	f0 2d       	mov	r31, r0
    32ec:	9f c1       	rjmp	.+830    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    32ee:	83 e2       	ldi	r24, 0x23	; 35
    32f0:	94 e0       	ldi	r25, 0x04	; 4
    32f2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    32f6:	f6 01       	movw	r30, r12
    32f8:	24 89       	ldd	r18, Z+20	; 0x14
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	82 0f       	add	r24, r18
    32fe:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    3300:	80 32       	cpi	r24, 0x20	; 32
    3302:	10 f4       	brcc	.+4      	; 0x3308 <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    3304:	84 8b       	std	Z+20, r24	; 0x14
    3306:	92 c1       	rjmp	.+804    	; 0x362c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    3308:	f6 01       	movw	r30, r12
    330a:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    330c:	8b e0       	ldi	r24, 0x0B	; 11
    330e:	e2 e0       	ldi	r30, 0x02	; 2
    3310:	f2 e0       	ldi	r31, 0x02	; 2
    3312:	d2 01       	movw	r26, r4
    3314:	01 90       	ld	r0, Z+
    3316:	0d 92       	st	X+, r0
    3318:	8a 95       	dec	r24
    331a:	e1 f7       	brne	.-8      	; 0x3314 <_Z13uhreinstellenv+0x3e6>
    331c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    331e:	f5 01       	movw	r30, r10
    3320:	61 91       	ld	r22, Z+
    3322:	5f 01       	movw	r10, r30
    3324:	28 e3       	ldi	r18, 0x38	; 56
    3326:	41 2f       	mov	r20, r17
    3328:	8f e2       	ldi	r24, 0x2F	; 47
    332a:	94 e0       	ldi	r25, 0x04	; 4
    332c:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3330:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3332:	1c 33       	cpi	r17, 0x3C	; 60
    3334:	a1 f7       	brne	.-24     	; 0x331e <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    3336:	0f 2e       	mov	r0, r31
    3338:	f3 e0       	ldi	r31, 0x03	; 3
    333a:	9f 2e       	mov	r9, r31
    333c:	f0 2d       	mov	r31, r0
    333e:	76 c1       	rjmp	.+748    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    3340:	83 e2       	ldi	r24, 0x23	; 35
    3342:	94 e0       	ldi	r25, 0x04	; 4
    3344:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    3348:	88 0f       	add	r24, r24
    334a:	98 2f       	mov	r25, r24
    334c:	99 0f       	add	r25, r25
    334e:	99 0f       	add	r25, r25
    3350:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    3352:	8d 30       	cpi	r24, 0x0D	; 13
    3354:	18 f4       	brcc	.+6      	; 0x335c <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    3356:	f6 01       	movw	r30, r12
    3358:	86 8b       	std	Z+22, r24	; 0x16
    335a:	68 c1       	rjmp	.+720    	; 0x362c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    335c:	f6 01       	movw	r30, r12
    335e:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    3360:	8d e0       	ldi	r24, 0x0D	; 13
    3362:	ed e0       	ldi	r30, 0x0D	; 13
    3364:	f2 e0       	ldi	r31, 0x02	; 2
    3366:	d2 01       	movw	r26, r4
    3368:	01 90       	ld	r0, Z+
    336a:	0d 92       	st	X+, r0
    336c:	8a 95       	dec	r24
    336e:	e1 f7       	brne	.-8      	; 0x3368 <_Z13uhreinstellenv+0x43a>
    3370:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3372:	f5 01       	movw	r30, r10
    3374:	61 91       	ld	r22, Z+
    3376:	5f 01       	movw	r10, r30
    3378:	28 e3       	ldi	r18, 0x38	; 56
    337a:	41 2f       	mov	r20, r17
    337c:	8f e2       	ldi	r24, 0x2F	; 47
    337e:	94 e0       	ldi	r25, 0x04	; 4
    3380:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3384:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3386:	18 34       	cpi	r17, 0x48	; 72
    3388:	a1 f7       	brne	.-24     	; 0x3372 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    338a:	0f 2e       	mov	r0, r31
    338c:	f5 e0       	ldi	r31, 0x05	; 5
    338e:	9f 2e       	mov	r9, r31
    3390:	f0 2d       	mov	r31, r0
    3392:	4c c1       	rjmp	.+664    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    3394:	83 e2       	ldi	r24, 0x23	; 35
    3396:	94 e0       	ldi	r25, 0x04	; 4
    3398:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    339c:	f6 01       	movw	r30, r12
    339e:	26 89       	ldd	r18, Z+22	; 0x16
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	82 0f       	add	r24, r18
    33a4:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    33a6:	8d 30       	cpi	r24, 0x0D	; 13
    33a8:	10 f4       	brcc	.+4      	; 0x33ae <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    33aa:	86 8b       	std	Z+22, r24	; 0x16
    33ac:	1d c0       	rjmp	.+58     	; 0x33e8 <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    33ae:	f6 01       	movw	r30, r12
    33b0:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    33b2:	8d e0       	ldi	r24, 0x0D	; 13
    33b4:	ed e0       	ldi	r30, 0x0D	; 13
    33b6:	f2 e0       	ldi	r31, 0x02	; 2
    33b8:	d2 01       	movw	r26, r4
    33ba:	01 90       	ld	r0, Z+
    33bc:	0d 92       	st	X+, r0
    33be:	8a 95       	dec	r24
    33c0:	e1 f7       	brne	.-8      	; 0x33ba <_Z13uhreinstellenv+0x48c>
    33c2:	2d 88       	ldd	r2, Y+21	; 0x15
    33c4:	3e 88       	ldd	r3, Y+22	; 0x16
    33c6:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    33c8:	f1 01       	movw	r30, r2
    33ca:	61 91       	ld	r22, Z+
    33cc:	1f 01       	movw	r2, r30
    33ce:	28 e3       	ldi	r18, 0x38	; 56
    33d0:	41 2f       	mov	r20, r17
    33d2:	8f e2       	ldi	r24, 0x2F	; 47
    33d4:	94 e0       	ldi	r25, 0x04	; 4
    33d6:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    33da:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    33dc:	18 34       	cpi	r17, 0x48	; 72
    33de:	a1 f7       	brne	.-24     	; 0x33c8 <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    33e0:	0f 2e       	mov	r0, r31
    33e2:	f5 e0       	ldi	r31, 0x05	; 5
    33e4:	9f 2e       	mov	r9, r31
    33e6:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    33e8:	f6 01       	movw	r30, r12
    33ea:	96 89       	ldd	r25, Z+22	; 0x16
    33ec:	89 2f       	mov	r24, r25
    33ee:	8d 7f       	andi	r24, 0xFD	; 253
    33f0:	84 30       	cpi	r24, 0x04	; 4
    33f2:	11 f0       	breq	.+4      	; 0x33f8 <_Z13uhreinstellenv+0x4ca>
    33f4:	89 30       	cpi	r24, 0x09	; 9
    33f6:	09 f5       	brne	.+66     	; 0x343a <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    33f8:	f6 01       	movw	r30, r12
    33fa:	84 89       	ldd	r24, Z+20	; 0x14
    33fc:	8f 31       	cpi	r24, 0x1F	; 31
    33fe:	08 f4       	brcc	.+2      	; 0x3402 <_Z13uhreinstellenv+0x4d4>
    3400:	d8 c0       	rjmp	.+432    	; 0x35b2 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    3402:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    3404:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    3406:	8b e0       	ldi	r24, 0x0B	; 11
    3408:	e2 e0       	ldi	r30, 0x02	; 2
    340a:	f2 e0       	ldi	r31, 0x02	; 2
    340c:	d2 01       	movw	r26, r4
    340e:	01 90       	ld	r0, Z+
    3410:	0d 92       	st	X+, r0
    3412:	8a 95       	dec	r24
    3414:	e1 f7       	brne	.-8      	; 0x340e <_Z13uhreinstellenv+0x4e0>
    3416:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3418:	f5 01       	movw	r30, r10
    341a:	61 91       	ld	r22, Z+
    341c:	5f 01       	movw	r10, r30
    341e:	28 e3       	ldi	r18, 0x38	; 56
    3420:	41 2f       	mov	r20, r17
    3422:	8f e2       	ldi	r24, 0x2F	; 47
    3424:	94 e0       	ldi	r25, 0x04	; 4
    3426:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    342a:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    342c:	1c 33       	cpi	r17, 0x3C	; 60
    342e:	a1 f7       	brne	.-24     	; 0x3418 <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    3430:	0f 2e       	mov	r0, r31
    3432:	f3 e0       	ldi	r31, 0x03	; 3
    3434:	9f 2e       	mov	r9, r31
    3436:	f0 2d       	mov	r31, r0
    3438:	f9 c0       	rjmp	.+498    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    343a:	92 30       	cpi	r25, 0x02	; 2
    343c:	09 f0       	breq	.+2      	; 0x3440 <_Z13uhreinstellenv+0x512>
    343e:	b9 c0       	rjmp	.+370    	; 0x35b2 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    3440:	f6 01       	movw	r30, r12
    3442:	84 89       	ldd	r24, Z+20	; 0x14
    3444:	8e 31       	cpi	r24, 0x1E	; 30
    3446:	08 f4       	brcc	.+2      	; 0x344a <_Z13uhreinstellenv+0x51c>
    3448:	b4 c0       	rjmp	.+360    	; 0x35b2 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    344a:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    344c:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    344e:	8b e0       	ldi	r24, 0x0B	; 11
    3450:	e2 e0       	ldi	r30, 0x02	; 2
    3452:	f2 e0       	ldi	r31, 0x02	; 2
    3454:	d2 01       	movw	r26, r4
    3456:	01 90       	ld	r0, Z+
    3458:	0d 92       	st	X+, r0
    345a:	8a 95       	dec	r24
    345c:	e1 f7       	brne	.-8      	; 0x3456 <_Z13uhreinstellenv+0x528>
    345e:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3460:	f5 01       	movw	r30, r10
    3462:	61 91       	ld	r22, Z+
    3464:	5f 01       	movw	r10, r30
    3466:	28 e3       	ldi	r18, 0x38	; 56
    3468:	41 2f       	mov	r20, r17
    346a:	8f e2       	ldi	r24, 0x2F	; 47
    346c:	94 e0       	ldi	r25, 0x04	; 4
    346e:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3472:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    3474:	1c 33       	cpi	r17, 0x3C	; 60
    3476:	a1 f7       	brne	.-24     	; 0x3460 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    3478:	0f 2e       	mov	r0, r31
    347a:	f3 e0       	ldi	r31, 0x03	; 3
    347c:	9f 2e       	mov	r9, r31
    347e:	f0 2d       	mov	r31, r0
    3480:	d5 c0       	rjmp	.+426    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    3482:	83 e2       	ldi	r24, 0x23	; 35
    3484:	94 e0       	ldi	r25, 0x04	; 4
    3486:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    348a:	88 0f       	add	r24, r24
    348c:	98 2f       	mov	r25, r24
    348e:	99 0f       	add	r25, r25
    3490:	99 0f       	add	r25, r25
    3492:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    3494:	82 33       	cpi	r24, 0x32	; 50
    3496:	18 f4       	brcc	.+6      	; 0x349e <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    3498:	f6 01       	movw	r30, r12
    349a:	87 8b       	std	Z+23, r24	; 0x17
    349c:	c7 c0       	rjmp	.+398    	; 0x362c <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    349e:	f6 01       	movw	r30, r12
    34a0:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    34a2:	8c e0       	ldi	r24, 0x0C	; 12
    34a4:	ea e1       	ldi	r30, 0x1A	; 26
    34a6:	f2 e0       	ldi	r31, 0x02	; 2
    34a8:	d2 01       	movw	r26, r4
    34aa:	01 90       	ld	r0, Z+
    34ac:	0d 92       	st	X+, r0
    34ae:	8a 95       	dec	r24
    34b0:	e1 f7       	brne	.-8      	; 0x34aa <_Z13uhreinstellenv+0x57c>
    34b2:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    34b4:	f5 01       	movw	r30, r10
    34b6:	61 91       	ld	r22, Z+
    34b8:	5f 01       	movw	r10, r30
    34ba:	28 e3       	ldi	r18, 0x38	; 56
    34bc:	41 2f       	mov	r20, r17
    34be:	8f e2       	ldi	r24, 0x2F	; 47
    34c0:	94 e0       	ldi	r25, 0x04	; 4
    34c2:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    34c6:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    34c8:	12 34       	cpi	r17, 0x42	; 66
    34ca:	a1 f7       	brne	.-24     	; 0x34b4 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    34cc:	0f 2e       	mov	r0, r31
    34ce:	f7 e0       	ldi	r31, 0x07	; 7
    34d0:	9f 2e       	mov	r9, r31
    34d2:	f0 2d       	mov	r31, r0
    34d4:	ab c0       	rjmp	.+342    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    34d6:	83 e2       	ldi	r24, 0x23	; 35
    34d8:	94 e0       	ldi	r25, 0x04	; 4
    34da:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN9Interface17ZahlenausTastaturEv>
    34de:	f6 01       	movw	r30, r12
    34e0:	27 89       	ldd	r18, Z+23	; 0x17
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	82 0f       	add	r24, r18
    34e6:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    34e8:	82 33       	cpi	r24, 0x32	; 50
    34ea:	08 f4       	brcc	.+2      	; 0x34ee <_Z13uhreinstellenv+0x5c0>
    34ec:	96 c0       	rjmp	.+300    	; 0x361a <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    34ee:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    34f0:	8c e0       	ldi	r24, 0x0C	; 12
    34f2:	ea e1       	ldi	r30, 0x1A	; 26
    34f4:	f2 e0       	ldi	r31, 0x02	; 2
    34f6:	d2 01       	movw	r26, r4
    34f8:	01 90       	ld	r0, Z+
    34fa:	0d 92       	st	X+, r0
    34fc:	8a 95       	dec	r24
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <_Z13uhreinstellenv+0x5ca>
    3500:	2d 88       	ldd	r2, Y+21	; 0x15
    3502:	3e 88       	ldd	r3, Y+22	; 0x16
    3504:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3506:	f1 01       	movw	r30, r2
    3508:	61 91       	ld	r22, Z+
    350a:	1f 01       	movw	r2, r30
    350c:	28 e3       	ldi	r18, 0x38	; 56
    350e:	41 2f       	mov	r20, r17
    3510:	8f e2       	ldi	r24, 0x2F	; 47
    3512:	94 e0       	ldi	r25, 0x04	; 4
    3514:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3518:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    351a:	12 34       	cpi	r17, 0x42	; 66
    351c:	a1 f7       	brne	.-24     	; 0x3506 <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    351e:	0f 2e       	mov	r0, r31
    3520:	f7 e0       	ldi	r31, 0x07	; 7
    3522:	9f 2e       	mov	r9, r31
    3524:	f0 2d       	mov	r31, r0
    3526:	7b c0       	rjmp	.+246    	; 0x361e <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    3528:	f6 01       	movw	r30, r12
    352a:	17 89       	ldd	r17, Z+23	; 0x17
    352c:	13 70       	andi	r17, 0x03	; 3
    352e:	f9 f4       	brne	.+62     	; 0x356e <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    3530:	84 89       	ldd	r24, Z+20	; 0x14
    3532:	8e 31       	cpi	r24, 0x1E	; 30
    3534:	f0 f1       	brcs	.+124    	; 0x35b2 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    3536:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    3538:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    353a:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    353c:	8b e0       	ldi	r24, 0x0B	; 11
    353e:	e2 e0       	ldi	r30, 0x02	; 2
    3540:	f2 e0       	ldi	r31, 0x02	; 2
    3542:	d2 01       	movw	r26, r4
    3544:	01 90       	ld	r0, Z+
    3546:	0d 92       	st	X+, r0
    3548:	8a 95       	dec	r24
    354a:	e1 f7       	brne	.-8      	; 0x3544 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    354c:	f5 01       	movw	r30, r10
    354e:	61 91       	ld	r22, Z+
    3550:	5f 01       	movw	r10, r30
    3552:	28 e3       	ldi	r18, 0x38	; 56
    3554:	41 2f       	mov	r20, r17
    3556:	8f e2       	ldi	r24, 0x2F	; 47
    3558:	94 e0       	ldi	r25, 0x04	; 4
    355a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    355e:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    3560:	1c 33       	cpi	r17, 0x3C	; 60
    3562:	a1 f7       	brne	.-24     	; 0x354c <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    3564:	0f 2e       	mov	r0, r31
    3566:	f3 e0       	ldi	r31, 0x03	; 3
    3568:	9f 2e       	mov	r9, r31
    356a:	f0 2d       	mov	r31, r0
    356c:	5f c0       	rjmp	.+190    	; 0x362c <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    356e:	f6 01       	movw	r30, r12
    3570:	84 89       	ldd	r24, Z+20	; 0x14
    3572:	8d 31       	cpi	r24, 0x1D	; 29
    3574:	f0 f0       	brcs	.+60     	; 0x35b2 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    3576:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    3578:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    357a:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    357c:	8b e0       	ldi	r24, 0x0B	; 11
    357e:	e2 e0       	ldi	r30, 0x02	; 2
    3580:	f2 e0       	ldi	r31, 0x02	; 2
    3582:	d2 01       	movw	r26, r4
    3584:	01 90       	ld	r0, Z+
    3586:	0d 92       	st	X+, r0
    3588:	8a 95       	dec	r24
    358a:	e1 f7       	brne	.-8      	; 0x3584 <_Z13uhreinstellenv+0x656>
    358c:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    358e:	f5 01       	movw	r30, r10
    3590:	61 91       	ld	r22, Z+
    3592:	5f 01       	movw	r10, r30
    3594:	28 e3       	ldi	r18, 0x38	; 56
    3596:	41 2f       	mov	r20, r17
    3598:	8f e2       	ldi	r24, 0x2F	; 47
    359a:	94 e0       	ldi	r25, 0x04	; 4
    359c:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    35a0:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    35a2:	1c 33       	cpi	r17, 0x3C	; 60
    35a4:	a1 f7       	brne	.-24     	; 0x358e <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    35a6:	0f 2e       	mov	r0, r31
    35a8:	f3 e0       	ldi	r31, 0x03	; 3
    35aa:	9f 2e       	mov	r9, r31
    35ac:	f0 2d       	mov	r31, r0
    35ae:	3e c0       	rjmp	.+124    	; 0x362c <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    35b0:	93 94       	inc	r9
			break;
		}
		pos++;
    35b2:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    35b4:	fa e0       	ldi	r31, 0x0A	; 10
    35b6:	f9 15       	cp	r31, r9
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <_Z13uhreinstellenv+0x68e>
    35ba:	f6 cc       	rjmp	.-1556   	; 0x2fa8 <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    35bc:	00 e3       	ldi	r16, 0x30	; 48
    35be:	18 e0       	ldi	r17, 0x08	; 8
    35c0:	f8 01       	movw	r30, r16
    35c2:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    35c4:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    35c6:	61 89       	ldd	r22, Z+17	; 0x11
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    35d0:	f8 01       	movw	r30, r16
    35d2:	60 89       	ldd	r22, Z+16	; 0x10
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    35dc:	f8 01       	movw	r30, r16
    35de:	64 89       	ldd	r22, Z+20	; 0x14
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    35e8:	f8 01       	movw	r30, r16
    35ea:	66 89       	ldd	r22, Z+22	; 0x16
    35ec:	83 e0       	ldi	r24, 0x03	; 3
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    35f4:	f8 01       	movw	r30, r16
    35f6:	67 89       	ldd	r22, Z+23	; 0x17
    35f8:	84 e0       	ldi	r24, 0x04	; 4
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    3600:	8f e2       	ldi	r24, 0x2F	; 47
    3602:	94 e0       	ldi	r25, 0x04	; 4
    3604:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    3608:	c8 01       	movw	r24, r16
    360a:	2d d3       	rcall	.+1626   	; 0x3c66 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    360c:	c8 01       	movw	r24, r16
    360e:	f2 d2       	rcall	.+1508   	; 0x3bf4 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    3610:	c8 01       	movw	r24, r16
    3612:	0a d4       	rcall	.+2068   	; 0x3e28 <_ZN3RTC8RTCstartEv>
    3614:	0d c0       	rjmp	.+26     	; 0x3630 <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    3616:	93 94       	inc	r9
    3618:	c7 cc       	rjmp	.-1650   	; 0x2fa8 <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    361a:	f6 01       	movw	r30, r12
    361c:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    361e:	f6 01       	movw	r30, r12
    3620:	86 89       	ldd	r24, Z+22	; 0x16
    3622:	82 30       	cpi	r24, 0x02	; 2
    3624:	c1 f7       	brne	.-16     	; 0x3616 <_Z13uhreinstellenv+0x6e8>
    3626:	80 cf       	rjmp	.-256    	; 0x3528 <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    3628:	f6 01       	movw	r30, r12
    362a:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    362c:	93 94       	inc	r9
    362e:	bc cc       	rjmp	.-1672   	; 0x2fa8 <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    3630:	66 96       	adiw	r28, 0x16	; 22
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	df 91       	pop	r29
    363e:	cf 91       	pop	r28
    3640:	1f 91       	pop	r17
    3642:	0f 91       	pop	r16
    3644:	ff 90       	pop	r15
    3646:	ef 90       	pop	r14
    3648:	df 90       	pop	r13
    364a:	cf 90       	pop	r12
    364c:	bf 90       	pop	r11
    364e:	af 90       	pop	r10
    3650:	9f 90       	pop	r9
    3652:	8f 90       	pop	r8
    3654:	7f 90       	pop	r7
    3656:	6f 90       	pop	r6
    3658:	5f 90       	pop	r5
    365a:	4f 90       	pop	r4
    365c:	3f 90       	pop	r3
    365e:	2f 90       	pop	r2
    3660:	08 95       	ret

00003662 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    3662:	cf 92       	push	r12
    3664:	df 92       	push	r13
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    3674:	8f 89       	ldd	r24, Y+23	; 0x17
    3676:	98 8d       	ldd	r25, Y+24	; 0x18
    3678:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Display10clearFrameEv>
    367c:	10 e0       	ldi	r17, 0x00	; 0
    367e:	e1 2c       	mov	r14, r1
    3680:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    3682:	e9 8d       	ldd	r30, Y+25	; 0x19
    3684:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3686:	ee 0d       	add	r30, r14
    3688:	ff 1d       	adc	r31, r15
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	41 2f       	mov	r20, r17
    368e:	60 81       	ld	r22, Z
    3690:	8f 89       	ldd	r24, Y+23	; 0x17
    3692:	98 8d       	ldd	r25, Y+24	; 0x18
    3694:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3698:	2f ef       	ldi	r18, 0xFF	; 255
    369a:	e2 1a       	sub	r14, r18
    369c:	f2 0a       	sbc	r15, r18
    369e:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    36a0:	10 33       	cpi	r17, 0x30	; 48
    36a2:	79 f7       	brne	.-34     	; 0x3682 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    36a4:	0e 94 9e 09 	call	0x133c	; 0x133c <_Z14Batteriestatusv>
    36a8:	7e 01       	movw	r14, r28
    36aa:	32 e0       	ldi	r19, 0x02	; 2
    36ac:	e3 0e       	add	r14, r19
    36ae:	f1 1c       	adc	r15, r1
    36b0:	28 2f       	mov	r18, r24
    36b2:	08 2e       	mov	r0, r24
    36b4:	00 0c       	add	r0, r0
    36b6:	33 0b       	sbc	r19, r19
    36b8:	3f 93       	push	r19
    36ba:	8f 93       	push	r24
    36bc:	82 e3       	ldi	r24, 0x32	; 50
    36be:	91 e0       	ldi	r25, 0x01	; 1
    36c0:	9f 93       	push	r25
    36c2:	8f 93       	push	r24
    36c4:	ff 92       	push	r15
    36c6:	ef 92       	push	r14
    36c8:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    36cc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    36ce:	15 e1       	ldi	r17, 0x15	; 21
    36d0:	18 1b       	sub	r17, r24
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	15 31       	cpi	r17, 0x15	; 21
    36e0:	08 f0       	brcs	.+2      	; 0x36e4 <_ZN13einstellungen4drawEv+0x82>
    36e2:	2f c1       	rjmp	.+606    	; 0x3942 <_ZN13einstellungen4drawEv+0x2e0>
    36e4:	01 2f       	mov	r16, r17
    36e6:	00 0f       	add	r16, r16
    36e8:	01 0f       	add	r16, r17
    36ea:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    36ec:	8e 89       	ldd	r24, Y+22	; 0x16
    36ee:	fe 01       	movw	r30, r28
    36f0:	e1 0f       	add	r30, r17
    36f2:	f1 1d       	adc	r31, r1
    36f4:	e8 0f       	add	r30, r24
    36f6:	f1 1d       	adc	r31, r1
    36f8:	73 97       	sbiw	r30, 0x13	; 19
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	40 2f       	mov	r20, r16
    36fe:	60 81       	ld	r22, Z
    3700:	8f 89       	ldd	r24, Y+23	; 0x17
    3702:	98 8d       	ldd	r25, Y+24	; 0x18
    3704:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    3708:	1f 5f       	subi	r17, 0xFF	; 255
    370a:	0a 5f       	subi	r16, 0xFA	; 250
    370c:	15 31       	cpi	r17, 0x15	; 21
    370e:	71 f7       	brne	.-36     	; 0x36ec <_ZN13einstellungen4drawEv+0x8a>
    3710:	18 c1       	rjmp	.+560    	; 0x3942 <_ZN13einstellungen4drawEv+0x2e0>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    3712:	e9 8d       	ldd	r30, Y+25	; 0x19
    3714:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3716:	ec 0d       	add	r30, r12
    3718:	fd 1d       	adc	r31, r13
    371a:	28 e3       	ldi	r18, 0x38	; 56
    371c:	41 2f       	mov	r20, r17
    371e:	60 85       	ldd	r22, Z+8	; 0x08
    3720:	8f 89       	ldd	r24, Y+23	; 0x17
    3722:	98 8d       	ldd	r25, Y+24	; 0x18
    3724:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3728:	8f ef       	ldi	r24, 0xFF	; 255
    372a:	c8 1a       	sub	r12, r24
    372c:	d8 0a       	sbc	r13, r24
    372e:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    3730:	10 38       	cpi	r17, 0x80	; 128
    3732:	79 f7       	brne	.-34     	; 0x3712 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    3734:	8e a1       	ldd	r24, Y+38	; 0x26
    3736:	81 11       	cpse	r24, r1
    3738:	5d c0       	rjmp	.+186    	; 0x37f4 <_ZN13einstellungen4drawEv+0x192>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    373a:	80 e1       	ldi	r24, 0x10	; 16
    373c:	e6 e2       	ldi	r30, 0x26	; 38
    373e:	f2 e0       	ldi	r31, 0x02	; 2
    3740:	d7 01       	movw	r26, r14
    3742:	01 90       	ld	r0, Z+
    3744:	0d 92       	st	X+, r0
    3746:	8a 95       	dec	r24
    3748:	e1 f7       	brne	.-8      	; 0x3742 <_ZN13einstellungen4drawEv+0xe0>
    374a:	8f e0       	ldi	r24, 0x0F	; 15
    374c:	8e 8b       	std	Y+22, r24	; 0x16
    374e:	0c e0       	ldi	r16, 0x0C	; 12
    3750:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    3752:	fe 01       	movw	r30, r28
    3754:	e1 0f       	add	r30, r17
    3756:	f1 1d       	adc	r31, r1
    3758:	20 e1       	ldi	r18, 0x10	; 16
    375a:	40 2f       	mov	r20, r16
    375c:	62 81       	ldd	r22, Z+2	; 0x02
    375e:	8f 89       	ldd	r24, Y+23	; 0x17
    3760:	98 8d       	ldd	r25, Y+24	; 0x18
    3762:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3766:	1f 5f       	subi	r17, 0xFF	; 255
    3768:	0a 5f       	subi	r16, 0xFA	; 250
    376a:	8e 89       	ldd	r24, Y+22	; 0x16
    376c:	18 17       	cp	r17, r24
    376e:	88 f3       	brcs	.-30     	; 0x3752 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    3770:	8c e0       	ldi	r24, 0x0C	; 12
    3772:	e6 e3       	ldi	r30, 0x36	; 54
    3774:	f2 e0       	ldi	r31, 0x02	; 2
    3776:	d7 01       	movw	r26, r14
    3778:	01 90       	ld	r0, Z+
    377a:	0d 92       	st	X+, r0
    377c:	8a 95       	dec	r24
    377e:	e1 f7       	brne	.-8      	; 0x3778 <_ZN13einstellungen4drawEv+0x116>
    3780:	8b e0       	ldi	r24, 0x0B	; 11
    3782:	8e 8b       	std	Y+22, r24	; 0x16
    3784:	0c e0       	ldi	r16, 0x0C	; 12
    3786:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    3788:	fe 01       	movw	r30, r28
    378a:	e1 0f       	add	r30, r17
    378c:	f1 1d       	adc	r31, r1
    378e:	28 e1       	ldi	r18, 0x18	; 24
    3790:	40 2f       	mov	r20, r16
    3792:	62 81       	ldd	r22, Z+2	; 0x02
    3794:	8f 89       	ldd	r24, Y+23	; 0x17
    3796:	98 8d       	ldd	r25, Y+24	; 0x18
    3798:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    379c:	1f 5f       	subi	r17, 0xFF	; 255
    379e:	0a 5f       	subi	r16, 0xFA	; 250
    37a0:	8e 89       	ldd	r24, Y+22	; 0x16
    37a2:	18 17       	cp	r17, r24
    37a4:	88 f3       	brcs	.-30     	; 0x3788 <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    37a6:	8f e0       	ldi	r24, 0x0F	; 15
    37a8:	e2 e4       	ldi	r30, 0x42	; 66
    37aa:	f2 e0       	ldi	r31, 0x02	; 2
    37ac:	d7 01       	movw	r26, r14
    37ae:	01 90       	ld	r0, Z+
    37b0:	0d 92       	st	X+, r0
    37b2:	8a 95       	dec	r24
    37b4:	e1 f7       	brne	.-8      	; 0x37ae <_ZN13einstellungen4drawEv+0x14c>
    37b6:	8e e0       	ldi	r24, 0x0E	; 14
    37b8:	8e 8b       	std	Y+22, r24	; 0x16
    37ba:	0c e0       	ldi	r16, 0x0C	; 12
    37bc:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    37be:	fe 01       	movw	r30, r28
    37c0:	e1 0f       	add	r30, r17
    37c2:	f1 1d       	adc	r31, r1
    37c4:	20 e2       	ldi	r18, 0x20	; 32
    37c6:	40 2f       	mov	r20, r16
    37c8:	62 81       	ldd	r22, Z+2	; 0x02
    37ca:	8f 89       	ldd	r24, Y+23	; 0x17
    37cc:	98 8d       	ldd	r25, Y+24	; 0x18
    37ce:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    37d2:	1f 5f       	subi	r17, 0xFF	; 255
    37d4:	0a 5f       	subi	r16, 0xFA	; 250
    37d6:	8e 89       	ldd	r24, Y+22	; 0x16
    37d8:	18 17       	cp	r17, r24
    37da:	88 f3       	brcs	.-30     	; 0x37be <_ZN13einstellungen4drawEv+0x15c>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    37dc:	2d a1       	ldd	r18, Y+37	; 0x25
    37de:	22 0f       	add	r18, r18
    37e0:	22 0f       	add	r18, r18
    37e2:	22 0f       	add	r18, r18
    37e4:	20 5f       	subi	r18, 0xF0	; 240
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	6e e3       	ldi	r22, 0x3E	; 62
    37ea:	8f 89       	ldd	r24, Y+23	; 0x17
    37ec:	98 8d       	ldd	r25, Y+24	; 0x18
    37ee:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    37f2:	a2 c0       	rjmp	.+324    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
		}
		else if (posy==0 && posx==1)
    37f4:	9d a1       	ldd	r25, Y+37	; 0x25
    37f6:	91 11       	cpse	r25, r1
    37f8:	06 c0       	rjmp	.+12     	; 0x3806 <_ZN13einstellungen4drawEv+0x1a4>
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	09 f0       	breq	.+2      	; 0x3800 <_ZN13einstellungen4drawEv+0x19e>
    37fe:	9c c0       	rjmp	.+312    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    3800:	96 db       	rcall	.-2260   	; 0x2f2e <_Z13uhreinstellenv>
			posx=0;
    3802:	1e a2       	std	Y+38, r1	; 0x26
    3804:	99 c0       	rjmp	.+306    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
		}
		else if (posy==1 && posx==1)
    3806:	91 30       	cpi	r25, 0x01	; 1
    3808:	09 f0       	breq	.+2      	; 0x380c <_ZN13einstellungen4drawEv+0x1aa>
    380a:	60 c0       	rjmp	.+192    	; 0x38cc <_ZN13einstellungen4drawEv+0x26a>
    380c:	81 30       	cpi	r24, 0x01	; 1
    380e:	09 f0       	breq	.+2      	; 0x3812 <_ZN13einstellungen4drawEv+0x1b0>
    3810:	93 c0       	rjmp	.+294    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    3812:	85 e1       	ldi	r24, 0x15	; 21
    3814:	e1 e5       	ldi	r30, 0x51	; 81
    3816:	f2 e0       	ldi	r31, 0x02	; 2
    3818:	d7 01       	movw	r26, r14
    381a:	01 90       	ld	r0, Z+
    381c:	0d 92       	st	X+, r0
    381e:	8a 95       	dec	r24
    3820:	e1 f7       	brne	.-8      	; 0x381a <_ZN13einstellungen4drawEv+0x1b8>
    3822:	84 e1       	ldi	r24, 0x14	; 20
    3824:	8e 8b       	std	Y+22, r24	; 0x16
    3826:	00 e0       	ldi	r16, 0x00	; 0
    3828:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    382a:	fe 01       	movw	r30, r28
    382c:	e1 0f       	add	r30, r17
    382e:	f1 1d       	adc	r31, r1
    3830:	20 e1       	ldi	r18, 0x10	; 16
    3832:	40 2f       	mov	r20, r16
    3834:	62 81       	ldd	r22, Z+2	; 0x02
    3836:	8f 89       	ldd	r24, Y+23	; 0x17
    3838:	98 8d       	ldd	r25, Y+24	; 0x18
    383a:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    383e:	1f 5f       	subi	r17, 0xFF	; 255
    3840:	0a 5f       	subi	r16, 0xFA	; 250
    3842:	8e 89       	ldd	r24, Y+22	; 0x16
    3844:	18 17       	cp	r17, r24
    3846:	88 f3       	brcs	.-30     	; 0x382a <_ZN13einstellungen4drawEv+0x1c8>
			buffersize=sprintf(buffer,"* fuer start");
    3848:	8d e0       	ldi	r24, 0x0D	; 13
    384a:	e6 e6       	ldi	r30, 0x66	; 102
    384c:	f2 e0       	ldi	r31, 0x02	; 2
    384e:	d7 01       	movw	r26, r14
    3850:	01 90       	ld	r0, Z+
    3852:	0d 92       	st	X+, r0
    3854:	8a 95       	dec	r24
    3856:	e1 f7       	brne	.-8      	; 0x3850 <_ZN13einstellungen4drawEv+0x1ee>
    3858:	8c e0       	ldi	r24, 0x0C	; 12
    385a:	8e 8b       	std	Y+22, r24	; 0x16
    385c:	00 e0       	ldi	r16, 0x00	; 0
    385e:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    3860:	fe 01       	movw	r30, r28
    3862:	e1 0f       	add	r30, r17
    3864:	f1 1d       	adc	r31, r1
    3866:	28 e1       	ldi	r18, 0x18	; 24
    3868:	40 2f       	mov	r20, r16
    386a:	62 81       	ldd	r22, Z+2	; 0x02
    386c:	8f 89       	ldd	r24, Y+23	; 0x17
    386e:	98 8d       	ldd	r25, Y+24	; 0x18
    3870:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    3874:	1f 5f       	subi	r17, 0xFF	; 255
    3876:	0a 5f       	subi	r16, 0xFA	; 250
    3878:	8e 89       	ldd	r24, Y+22	; 0x16
    387a:	18 17       	cp	r17, r24
    387c:	88 f3       	brcs	.-30     	; 0x3860 <_ZN13einstellungen4drawEv+0x1fe>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    387e:	1f 92       	push	r1
    3880:	85 e0       	ldi	r24, 0x05	; 5
    3882:	8f 93       	push	r24
    3884:	83 e7       	ldi	r24, 0x73	; 115
    3886:	92 e0       	ldi	r25, 0x02	; 2
    3888:	9f 93       	push	r25
    388a:	8f 93       	push	r24
    388c:	ff 92       	push	r15
    388e:	ef 92       	push	r14
    3890:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    3894:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	88 23       	and	r24, r24
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <_ZN13einstellungen4drawEv+0x246>
    38a6:	48 c0       	rjmp	.+144    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
    38a8:	00 e0       	ldi	r16, 0x00	; 0
    38aa:	10 e0       	ldi	r17, 0x00	; 0
    38ac:	fe 01       	movw	r30, r28
    38ae:	e1 0f       	add	r30, r17
    38b0:	f1 1d       	adc	r31, r1
    38b2:	28 e2       	ldi	r18, 0x28	; 40
    38b4:	40 2f       	mov	r20, r16
    38b6:	62 81       	ldd	r22, Z+2	; 0x02
    38b8:	8f 89       	ldd	r24, Y+23	; 0x17
    38ba:	98 8d       	ldd	r25, Y+24	; 0x18
    38bc:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
    38c0:	1f 5f       	subi	r17, 0xFF	; 255
    38c2:	0a 5f       	subi	r16, 0xFA	; 250
    38c4:	8e 89       	ldd	r24, Y+22	; 0x16
    38c6:	18 17       	cp	r17, r24
    38c8:	88 f3       	brcs	.-30     	; 0x38ac <_ZN13einstellungen4drawEv+0x24a>
    38ca:	36 c0       	rjmp	.+108    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    38cc:	92 30       	cpi	r25, 0x02	; 2
    38ce:	a1 f5       	brne	.+104    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
    38d0:	81 30       	cpi	r24, 0x01	; 1
    38d2:	91 f5       	brne	.+100    	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    38d4:	80 e4       	ldi	r24, 0x40	; 64
    38d6:	8f 93       	push	r24
    38d8:	81 e4       	ldi	r24, 0x41	; 65
    38da:	8f 93       	push	r24
    38dc:	87 e4       	ldi	r24, 0x47	; 71
    38de:	8f 93       	push	r24
    38e0:	8e ea       	ldi	r24, 0xAE	; 174
    38e2:	8f 93       	push	r24
    38e4:	84 e2       	ldi	r24, 0x24	; 36
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	9f 93       	push	r25
    38ea:	8f 93       	push	r24
    38ec:	ff 92       	push	r15
    38ee:	ef 92       	push	r14
    38f0:	0e 94 18 28 	call	0x5030	; 0x5030 <sprintf>
    38f4:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    38f6:	2d b7       	in	r18, 0x3d	; 61
    38f8:	3e b7       	in	r19, 0x3e	; 62
    38fa:	28 5f       	subi	r18, 0xF8	; 248
    38fc:	3f 4f       	sbci	r19, 0xFF	; 255
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	3e bf       	out	0x3e, r19	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	2d bf       	out	0x3d, r18	; 61
    3908:	88 23       	and	r24, r24
    390a:	b1 f0       	breq	.+44     	; 0x3938 <_ZN13einstellungen4drawEv+0x2d6>
    390c:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    390e:	21 2f       	mov	r18, r17
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	c9 01       	movw	r24, r18
    3914:	02 96       	adiw	r24, 0x02	; 2
    3916:	48 2f       	mov	r20, r24
    3918:	44 0f       	add	r20, r20
    391a:	48 0f       	add	r20, r24
    391c:	44 0f       	add	r20, r20
    391e:	fe 01       	movw	r30, r28
    3920:	e2 0f       	add	r30, r18
    3922:	f3 1f       	adc	r31, r19
    3924:	2c e1       	ldi	r18, 0x1C	; 28
    3926:	62 81       	ldd	r22, Z+2	; 0x02
    3928:	8f 89       	ldd	r24, Y+23	; 0x17
    392a:	98 8d       	ldd	r25, Y+24	; 0x18
    392c:	0e 94 10 04 	call	0x820	; 0x820 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    3930:	1f 5f       	subi	r17, 0xFF	; 255
    3932:	8e 89       	ldd	r24, Y+22	; 0x16
    3934:	18 17       	cp	r17, r24
    3936:	58 f3       	brcs	.-42     	; 0x390e <_ZN13einstellungen4drawEv+0x2ac>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    3938:	8f 89       	ldd	r24, Y+23	; 0x17
    393a:	98 8d       	ldd	r25, Y+24	; 0x18
    393c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN7Display9sendFrameEv>
    3940:	04 c0       	rjmp	.+8      	; 0x394a <_ZN13einstellungen4drawEv+0x2e8>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    3942:	10 e5       	ldi	r17, 0x50	; 80
    3944:	c1 2c       	mov	r12, r1
    3946:	d1 2c       	mov	r13, r1
    3948:	e4 ce       	rjmp	.-568    	; 0x3712 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    394a:	df 91       	pop	r29
    394c:	cf 91       	pop	r28
    394e:	1f 91       	pop	r17
    3950:	0f 91       	pop	r16
    3952:	ff 90       	pop	r15
    3954:	ef 90       	pop	r14
    3956:	df 90       	pop	r13
    3958:	cf 90       	pop	r12
    395a:	08 95       	ret

0000395c <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    395c:	80 e3       	ldi	r24, 0x30	; 48
    395e:	98 e0       	ldi	r25, 0x08	; 8
    3960:	bb d1       	rcall	.+886    	; 0x3cd8 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    3962:	8f e2       	ldi	r24, 0x2F	; 47
    3964:	94 e0       	ldi	r25, 0x04	; 4
    3966:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    396a:	83 e2       	ldi	r24, 0x23	; 35
    396c:	94 e0       	ldi	r25, 0x04	; 4
    396e:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN9InterfaceC1Ev>

#include "SOUND.h"
SOUND Lautsprecher;
    3972:	81 e2       	ldi	r24, 0x21	; 33
    3974:	94 e0       	ldi	r25, 0x04	; 4
    3976:	a2 d2       	rcall	.+1348   	; 0x3ebc <_ZN5SOUNDC1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;
    3978:	88 e3       	ldi	r24, 0x38	; 56
    397a:	93 e0       	ldi	r25, 0x03	; 3
    397c:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN7LSM303DC1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    3980:	41 e0       	ldi	r20, 0x01	; 1
    3982:	62 e4       	ldi	r22, 0x42	; 66
    3984:	82 e3       	ldi	r24, 0x32	; 50
    3986:	93 e0       	ldi	r25, 0x03	; 3
    3988:	2f d0       	rcall	.+94     	; 0x39e8 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    398a:	42 e0       	ldi	r20, 0x02	; 2
    398c:	62 e4       	ldi	r22, 0x42	; 66
    398e:	80 e3       	ldi	r24, 0x30	; 48
    3990:	93 e0       	ldi	r25, 0x03	; 3
    3992:	2a d0       	rcall	.+84     	; 0x39e8 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    3994:	47 e0       	ldi	r20, 0x07	; 7
    3996:	64 e4       	ldi	r22, 0x44	; 68
    3998:	8e e2       	ldi	r24, 0x2E	; 46
    399a:	93 e0       	ldi	r25, 0x03	; 3
    399c:	25 d0       	rcall	.+74     	; 0x39e8 <_ZN6OutputC1Ehh>
Output Sound('B',PORTB3);
    399e:	43 e0       	ldi	r20, 0x03	; 3
    39a0:	62 e4       	ldi	r22, 0x42	; 66
    39a2:	8c e2       	ldi	r24, 0x2C	; 44
    39a4:	93 e0       	ldi	r25, 0x03	; 3
    39a6:	20 c0       	rjmp	.+64     	; 0x39e8 <_ZN6OutputC1Ehh>
    39a8:	08 95       	ret

000039aa <_GLOBAL__sub_D__Znwj>:
    39aa:	8c e2       	ldi	r24, 0x2C	; 44
    39ac:	93 e0       	ldi	r25, 0x03	; 3
    39ae:	56 d0       	rcall	.+172    	; 0x3a5c <_ZN6OutputD1Ev>
#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
    39b0:	8e e2       	ldi	r24, 0x2E	; 46
    39b2:	93 e0       	ldi	r25, 0x03	; 3
    39b4:	53 d0       	rcall	.+166    	; 0x3a5c <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    39b6:	80 e3       	ldi	r24, 0x30	; 48
    39b8:	93 e0       	ldi	r25, 0x03	; 3
    39ba:	50 d0       	rcall	.+160    	; 0x3a5c <_ZN6OutputD1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    39bc:	82 e3       	ldi	r24, 0x32	; 50
    39be:	93 e0       	ldi	r25, 0x03	; 3
    39c0:	4d d0       	rcall	.+154    	; 0x3a5c <_ZN6OutputD1Ev>

#include "SOUND.h"
SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    39c2:	88 e3       	ldi	r24, 0x38	; 56
    39c4:	93 e0       	ldi	r25, 0x03	; 3
    39c6:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN7LSM303DD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "SOUND.h"
SOUND Lautsprecher;
    39ca:	81 e2       	ldi	r24, 0x21	; 33
    39cc:	94 e0       	ldi	r25, 0x04	; 4
    39ce:	4c d2       	rcall	.+1176   	; 0x3e68 <_ZN5SOUNDD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    39d0:	83 e2       	ldi	r24, 0x23	; 35
    39d2:	94 e0       	ldi	r25, 0x04	; 4
    39d4:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    39d8:	8f e2       	ldi	r24, 0x2F	; 47
    39da:	94 e0       	ldi	r25, 0x04	; 4
    39dc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    39e0:	80 e3       	ldi	r24, 0x30	; 48
    39e2:	98 e0       	ldi	r25, 0x08	; 8
    39e4:	f5 c0       	rjmp	.+490    	; 0x3bd0 <_ZN3RTCD1Ev>
    39e6:	08 95       	ret

000039e8 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    39e8:	fc 01       	movw	r30, r24
    39ea:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    39ec:	60 83       	st	Z, r22
	switch (Portpraefix)
    39ee:	62 34       	cpi	r22, 0x42	; 66
    39f0:	a1 f0       	breq	.+40     	; 0x3a1a <_ZN6OutputC1Ehh+0x32>
    39f2:	18 f4       	brcc	.+6      	; 0x39fa <_ZN6OutputC1Ehh+0x12>
    39f4:	61 34       	cpi	r22, 0x41	; 65
    39f6:	31 f0       	breq	.+12     	; 0x3a04 <_ZN6OutputC1Ehh+0x1c>
    39f8:	08 95       	ret
    39fa:	63 34       	cpi	r22, 0x43	; 67
    39fc:	c9 f0       	breq	.+50     	; 0x3a30 <_ZN6OutputC1Ehh+0x48>
    39fe:	64 34       	cpi	r22, 0x44	; 68
    3a00:	11 f1       	breq	.+68     	; 0x3a46 <_ZN6OutputC1Ehh+0x5e>
    3a02:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    3a04:	21 b1       	in	r18, 0x01	; 1
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <_ZN6OutputC1Ehh+0x28>
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	4a 95       	dec	r20
    3a12:	e2 f7       	brpl	.-8      	; 0x3a0c <_ZN6OutputC1Ehh+0x24>
    3a14:	82 2b       	or	r24, r18
    3a16:	81 b9       	out	0x01, r24	; 1
			break;
    3a18:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    3a1a:	24 b1       	in	r18, 0x04	; 4
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <_ZN6OutputC1Ehh+0x3e>
    3a22:	88 0f       	add	r24, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	4a 95       	dec	r20
    3a28:	e2 f7       	brpl	.-8      	; 0x3a22 <_ZN6OutputC1Ehh+0x3a>
    3a2a:	82 2b       	or	r24, r18
    3a2c:	84 b9       	out	0x04, r24	; 4
			break;
    3a2e:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    3a30:	27 b1       	in	r18, 0x07	; 7
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <_ZN6OutputC1Ehh+0x54>
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	4a 95       	dec	r20
    3a3e:	e2 f7       	brpl	.-8      	; 0x3a38 <_ZN6OutputC1Ehh+0x50>
    3a40:	82 2b       	or	r24, r18
    3a42:	87 b9       	out	0x07, r24	; 7
			break;
    3a44:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    3a46:	2a b1       	in	r18, 0x0a	; 10
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	02 c0       	rjmp	.+4      	; 0x3a52 <_ZN6OutputC1Ehh+0x6a>
    3a4e:	88 0f       	add	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	4a 95       	dec	r20
    3a54:	e2 f7       	brpl	.-8      	; 0x3a4e <_ZN6OutputC1Ehh+0x66>
    3a56:	82 2b       	or	r24, r18
    3a58:	8a b9       	out	0x0a, r24	; 10
    3a5a:	08 95       	ret

00003a5c <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    3a5c:	08 95       	ret

00003a5e <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    3a5e:	fc 01       	movw	r30, r24
	switch (Port)
    3a60:	90 81       	ld	r25, Z
    3a62:	92 34       	cpi	r25, 0x42	; 66
    3a64:	a9 f0       	breq	.+42     	; 0x3a90 <_ZN6Output2onEv+0x32>
    3a66:	18 f4       	brcc	.+6      	; 0x3a6e <_ZN6Output2onEv+0x10>
    3a68:	91 34       	cpi	r25, 0x41	; 65
    3a6a:	31 f0       	breq	.+12     	; 0x3a78 <_ZN6Output2onEv+0x1a>
    3a6c:	08 95       	ret
    3a6e:	93 34       	cpi	r25, 0x43	; 67
    3a70:	d9 f0       	breq	.+54     	; 0x3aa8 <_ZN6Output2onEv+0x4a>
    3a72:	94 34       	cpi	r25, 0x44	; 68
    3a74:	29 f1       	breq	.+74     	; 0x3ac0 <_ZN6Output2onEv+0x62>
    3a76:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    3a78:	22 b1       	in	r18, 0x02	; 2
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	01 80       	ldd	r0, Z+1	; 0x01
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <_ZN6Output2onEv+0x28>
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	0a 94       	dec	r0
    3a88:	e2 f7       	brpl	.-8      	; 0x3a82 <_ZN6Output2onEv+0x24>
    3a8a:	82 2b       	or	r24, r18
    3a8c:	82 b9       	out	0x02, r24	; 2
			break;
    3a8e:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    3a90:	25 b1       	in	r18, 0x05	; 5
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	01 80       	ldd	r0, Z+1	; 0x01
    3a98:	02 c0       	rjmp	.+4      	; 0x3a9e <_ZN6Output2onEv+0x40>
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	0a 94       	dec	r0
    3aa0:	e2 f7       	brpl	.-8      	; 0x3a9a <_ZN6Output2onEv+0x3c>
    3aa2:	82 2b       	or	r24, r18
    3aa4:	85 b9       	out	0x05, r24	; 5
			break;
    3aa6:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    3aa8:	28 b1       	in	r18, 0x08	; 8
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	01 80       	ldd	r0, Z+1	; 0x01
    3ab0:	02 c0       	rjmp	.+4      	; 0x3ab6 <_ZN6Output2onEv+0x58>
    3ab2:	88 0f       	add	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	0a 94       	dec	r0
    3ab8:	e2 f7       	brpl	.-8      	; 0x3ab2 <_ZN6Output2onEv+0x54>
    3aba:	82 2b       	or	r24, r18
    3abc:	88 b9       	out	0x08, r24	; 8
			break;
    3abe:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    3ac0:	2b b1       	in	r18, 0x0b	; 11
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	01 80       	ldd	r0, Z+1	; 0x01
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <_ZN6Output2onEv+0x70>
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	0a 94       	dec	r0
    3ad0:	e2 f7       	brpl	.-8      	; 0x3aca <_ZN6Output2onEv+0x6c>
    3ad2:	82 2b       	or	r24, r18
    3ad4:	8b b9       	out	0x0b, r24	; 11
    3ad6:	08 95       	ret

00003ad8 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    3ad8:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    3ada:	90 81       	ld	r25, Z
    3adc:	92 34       	cpi	r25, 0x42	; 66
    3ade:	a1 f0       	breq	.+40     	; 0x3b08 <_ZN6Output4isonEv+0x30>
    3ae0:	18 f4       	brcc	.+6      	; 0x3ae8 <_ZN6Output4isonEv+0x10>
    3ae2:	91 34       	cpi	r25, 0x41	; 65
    3ae4:	31 f0       	breq	.+12     	; 0x3af2 <_ZN6Output4isonEv+0x1a>
    3ae6:	31 c0       	rjmp	.+98     	; 0x3b4a <_ZN6Output4isonEv+0x72>
    3ae8:	93 34       	cpi	r25, 0x43	; 67
    3aea:	c9 f0       	breq	.+50     	; 0x3b1e <_ZN6Output4isonEv+0x46>
    3aec:	94 34       	cpi	r25, 0x44	; 68
    3aee:	11 f1       	breq	.+68     	; 0x3b34 <_ZN6Output4isonEv+0x5c>
    3af0:	2c c0       	rjmp	.+88     	; 0x3b4a <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    3af2:	22 b1       	in	r18, 0x02	; 2
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	c9 01       	movw	r24, r18
    3af8:	01 80       	ldd	r0, Z+1	; 0x01
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <_ZN6Output4isonEv+0x28>
    3afc:	95 95       	asr	r25
    3afe:	87 95       	ror	r24
    3b00:	0a 94       	dec	r0
    3b02:	e2 f7       	brpl	.-8      	; 0x3afc <_ZN6Output4isonEv+0x24>
    3b04:	81 70       	andi	r24, 0x01	; 1
    3b06:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    3b08:	25 b1       	in	r18, 0x05	; 5
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	c9 01       	movw	r24, r18
    3b0e:	01 80       	ldd	r0, Z+1	; 0x01
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <_ZN6Output4isonEv+0x3e>
    3b12:	95 95       	asr	r25
    3b14:	87 95       	ror	r24
    3b16:	0a 94       	dec	r0
    3b18:	e2 f7       	brpl	.-8      	; 0x3b12 <_ZN6Output4isonEv+0x3a>
    3b1a:	81 70       	andi	r24, 0x01	; 1
    3b1c:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    3b1e:	28 b1       	in	r18, 0x08	; 8
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	c9 01       	movw	r24, r18
    3b24:	01 80       	ldd	r0, Z+1	; 0x01
    3b26:	02 c0       	rjmp	.+4      	; 0x3b2c <_ZN6Output4isonEv+0x54>
    3b28:	95 95       	asr	r25
    3b2a:	87 95       	ror	r24
    3b2c:	0a 94       	dec	r0
    3b2e:	e2 f7       	brpl	.-8      	; 0x3b28 <_ZN6Output4isonEv+0x50>
    3b30:	81 70       	andi	r24, 0x01	; 1
    3b32:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    3b34:	2b b1       	in	r18, 0x0b	; 11
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	c9 01       	movw	r24, r18
    3b3a:	01 80       	ldd	r0, Z+1	; 0x01
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <_ZN6Output4isonEv+0x6a>
    3b3e:	95 95       	asr	r25
    3b40:	87 95       	ror	r24
    3b42:	0a 94       	dec	r0
    3b44:	e2 f7       	brpl	.-8      	; 0x3b3e <_ZN6Output4isonEv+0x66>
    3b46:	81 70       	andi	r24, 0x01	; 1
    3b48:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    3b4a:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    3b4c:	08 95       	ret

00003b4e <_ZN6Output3offEv>:

void Output::off(){
    3b4e:	fc 01       	movw	r30, r24
	switch (Port)
    3b50:	90 81       	ld	r25, Z
    3b52:	92 34       	cpi	r25, 0x42	; 66
    3b54:	b1 f0       	breq	.+44     	; 0x3b82 <_ZN6Output3offEv+0x34>
    3b56:	18 f4       	brcc	.+6      	; 0x3b5e <_ZN6Output3offEv+0x10>
    3b58:	91 34       	cpi	r25, 0x41	; 65
    3b5a:	31 f0       	breq	.+12     	; 0x3b68 <_ZN6Output3offEv+0x1a>
    3b5c:	08 95       	ret
    3b5e:	93 34       	cpi	r25, 0x43	; 67
    3b60:	e9 f0       	breq	.+58     	; 0x3b9c <_ZN6Output3offEv+0x4e>
    3b62:	94 34       	cpi	r25, 0x44	; 68
    3b64:	41 f1       	breq	.+80     	; 0x3bb6 <_ZN6Output3offEv+0x68>
    3b66:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    3b68:	22 b1       	in	r18, 0x02	; 2
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	01 80       	ldd	r0, Z+1	; 0x01
    3b70:	02 c0       	rjmp	.+4      	; 0x3b76 <_ZN6Output3offEv+0x28>
    3b72:	88 0f       	add	r24, r24
    3b74:	99 1f       	adc	r25, r25
    3b76:	0a 94       	dec	r0
    3b78:	e2 f7       	brpl	.-8      	; 0x3b72 <_ZN6Output3offEv+0x24>
    3b7a:	80 95       	com	r24
    3b7c:	82 23       	and	r24, r18
    3b7e:	82 b9       	out	0x02, r24	; 2
			break;
    3b80:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    3b82:	25 b1       	in	r18, 0x05	; 5
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	01 80       	ldd	r0, Z+1	; 0x01
    3b8a:	02 c0       	rjmp	.+4      	; 0x3b90 <_ZN6Output3offEv+0x42>
    3b8c:	88 0f       	add	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	0a 94       	dec	r0
    3b92:	e2 f7       	brpl	.-8      	; 0x3b8c <_ZN6Output3offEv+0x3e>
    3b94:	80 95       	com	r24
    3b96:	82 23       	and	r24, r18
    3b98:	85 b9       	out	0x05, r24	; 5
			break;
    3b9a:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    3b9c:	28 b1       	in	r18, 0x08	; 8
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	01 80       	ldd	r0, Z+1	; 0x01
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <_ZN6Output3offEv+0x5c>
    3ba6:	88 0f       	add	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	0a 94       	dec	r0
    3bac:	e2 f7       	brpl	.-8      	; 0x3ba6 <_ZN6Output3offEv+0x58>
    3bae:	80 95       	com	r24
    3bb0:	82 23       	and	r24, r18
    3bb2:	88 b9       	out	0x08, r24	; 8
			break;
    3bb4:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    3bb6:	2b b1       	in	r18, 0x0b	; 11
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	01 80       	ldd	r0, Z+1	; 0x01
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <_ZN6Output3offEv+0x76>
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	0a 94       	dec	r0
    3bc6:	e2 f7       	brpl	.-8      	; 0x3bc0 <_ZN6Output3offEv+0x72>
    3bc8:	80 95       	com	r24
    3bca:	82 23       	and	r24, r18
    3bcc:	8b b9       	out	0x0b, r24	; 11
    3bce:	08 95       	ret

00003bd0 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    3bd0:	08 95       	ret

00003bd2 <_ZN3RTC6WeckerEv>:
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	80 8d       	ldd	r24, Z+24	; 0x18
    3bd6:	83 ff       	sbrs	r24, 3
    3bd8:	0c c0       	rjmp	.+24     	; 0x3bf2 <_ZN3RTC6WeckerEv+0x20>
    3bda:	84 fd       	sbrc	r24, 4
    3bdc:	0a c0       	rjmp	.+20     	; 0x3bf2 <_ZN3RTC6WeckerEv+0x20>
    3bde:	22 8d       	ldd	r18, Z+26	; 0x1a
    3be0:	90 89       	ldd	r25, Z+16	; 0x10
    3be2:	29 13       	cpse	r18, r25
    3be4:	06 c0       	rjmp	.+12     	; 0x3bf2 <_ZN3RTC6WeckerEv+0x20>
    3be6:	21 8d       	ldd	r18, Z+25	; 0x19
    3be8:	91 89       	ldd	r25, Z+17	; 0x11
    3bea:	29 13       	cpse	r18, r25
    3bec:	02 c0       	rjmp	.+4      	; 0x3bf2 <_ZN3RTC6WeckerEv+0x20>
    3bee:	80 61       	ori	r24, 0x10	; 16
    3bf0:	80 8f       	std	Z+24, r24	; 0x18
    3bf2:	08 95       	ret

00003bf4 <_ZN3RTC14ausgabezeitneuEv>:
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	20 89       	ldd	r18, Z+16	; 0x10
    3bf8:	9d ec       	ldi	r25, 0xCD	; 205
    3bfa:	29 9f       	mul	r18, r25
    3bfc:	81 2d       	mov	r24, r1
    3bfe:	11 24       	eor	r1, r1
    3c00:	86 95       	lsr	r24
    3c02:	86 95       	lsr	r24
    3c04:	86 95       	lsr	r24
    3c06:	30 e3       	ldi	r19, 0x30	; 48
    3c08:	38 0f       	add	r19, r24
    3c0a:	30 83       	st	Z, r19
    3c0c:	88 0f       	add	r24, r24
    3c0e:	38 2f       	mov	r19, r24
    3c10:	33 0f       	add	r19, r19
    3c12:	33 0f       	add	r19, r19
    3c14:	83 0f       	add	r24, r19
    3c16:	28 1b       	sub	r18, r24
    3c18:	20 5d       	subi	r18, 0xD0	; 208
    3c1a:	21 83       	std	Z+1, r18	; 0x01
    3c1c:	21 89       	ldd	r18, Z+17	; 0x11
    3c1e:	29 9f       	mul	r18, r25
    3c20:	81 2d       	mov	r24, r1
    3c22:	11 24       	eor	r1, r1
    3c24:	86 95       	lsr	r24
    3c26:	86 95       	lsr	r24
    3c28:	86 95       	lsr	r24
    3c2a:	30 e3       	ldi	r19, 0x30	; 48
    3c2c:	38 0f       	add	r19, r24
    3c2e:	33 83       	std	Z+3, r19	; 0x03
    3c30:	88 0f       	add	r24, r24
    3c32:	38 2f       	mov	r19, r24
    3c34:	33 0f       	add	r19, r19
    3c36:	33 0f       	add	r19, r19
    3c38:	83 0f       	add	r24, r19
    3c3a:	28 1b       	sub	r18, r24
    3c3c:	20 5d       	subi	r18, 0xD0	; 208
    3c3e:	24 83       	std	Z+4, r18	; 0x04
    3c40:	82 89       	ldd	r24, Z+18	; 0x12
    3c42:	89 9f       	mul	r24, r25
    3c44:	91 2d       	mov	r25, r1
    3c46:	11 24       	eor	r1, r1
    3c48:	96 95       	lsr	r25
    3c4a:	96 95       	lsr	r25
    3c4c:	96 95       	lsr	r25
    3c4e:	20 e3       	ldi	r18, 0x30	; 48
    3c50:	29 0f       	add	r18, r25
    3c52:	26 83       	std	Z+6, r18	; 0x06
    3c54:	99 0f       	add	r25, r25
    3c56:	29 2f       	mov	r18, r25
    3c58:	22 0f       	add	r18, r18
    3c5a:	22 0f       	add	r18, r18
    3c5c:	92 0f       	add	r25, r18
    3c5e:	89 1b       	sub	r24, r25
    3c60:	80 5d       	subi	r24, 0xD0	; 208
    3c62:	87 83       	std	Z+7, r24	; 0x07
    3c64:	08 95       	ret

00003c66 <_ZN3RTC15ausgabedatumneuEv>:
    3c66:	fc 01       	movw	r30, r24
    3c68:	24 89       	ldd	r18, Z+20	; 0x14
    3c6a:	9d ec       	ldi	r25, 0xCD	; 205
    3c6c:	29 9f       	mul	r18, r25
    3c6e:	81 2d       	mov	r24, r1
    3c70:	11 24       	eor	r1, r1
    3c72:	86 95       	lsr	r24
    3c74:	86 95       	lsr	r24
    3c76:	86 95       	lsr	r24
    3c78:	30 e3       	ldi	r19, 0x30	; 48
    3c7a:	38 0f       	add	r19, r24
    3c7c:	30 87       	std	Z+8, r19	; 0x08
    3c7e:	88 0f       	add	r24, r24
    3c80:	38 2f       	mov	r19, r24
    3c82:	33 0f       	add	r19, r19
    3c84:	33 0f       	add	r19, r19
    3c86:	83 0f       	add	r24, r19
    3c88:	28 1b       	sub	r18, r24
    3c8a:	20 5d       	subi	r18, 0xD0	; 208
    3c8c:	21 87       	std	Z+9, r18	; 0x09
    3c8e:	26 89       	ldd	r18, Z+22	; 0x16
    3c90:	29 9f       	mul	r18, r25
    3c92:	81 2d       	mov	r24, r1
    3c94:	11 24       	eor	r1, r1
    3c96:	86 95       	lsr	r24
    3c98:	86 95       	lsr	r24
    3c9a:	86 95       	lsr	r24
    3c9c:	30 e3       	ldi	r19, 0x30	; 48
    3c9e:	38 0f       	add	r19, r24
    3ca0:	33 87       	std	Z+11, r19	; 0x0b
    3ca2:	88 0f       	add	r24, r24
    3ca4:	38 2f       	mov	r19, r24
    3ca6:	33 0f       	add	r19, r19
    3ca8:	33 0f       	add	r19, r19
    3caa:	83 0f       	add	r24, r19
    3cac:	28 1b       	sub	r18, r24
    3cae:	20 5d       	subi	r18, 0xD0	; 208
    3cb0:	24 87       	std	Z+12, r18	; 0x0c
    3cb2:	87 89       	ldd	r24, Z+23	; 0x17
    3cb4:	89 9f       	mul	r24, r25
    3cb6:	91 2d       	mov	r25, r1
    3cb8:	11 24       	eor	r1, r1
    3cba:	96 95       	lsr	r25
    3cbc:	96 95       	lsr	r25
    3cbe:	96 95       	lsr	r25
    3cc0:	20 e3       	ldi	r18, 0x30	; 48
    3cc2:	29 0f       	add	r18, r25
    3cc4:	26 87       	std	Z+14, r18	; 0x0e
    3cc6:	99 0f       	add	r25, r25
    3cc8:	29 2f       	mov	r18, r25
    3cca:	22 0f       	add	r18, r18
    3ccc:	22 0f       	add	r18, r18
    3cce:	92 0f       	add	r25, r18
    3cd0:	89 1b       	sub	r24, r25
    3cd2:	80 5d       	subi	r24, 0xD0	; 208
    3cd4:	87 87       	std	Z+15, r24	; 0x0f
    3cd6:	08 95       	ret

00003cd8 <_ZN3RTCC1Ev>:
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	ec 01       	movw	r28, r24
    3cde:	1a 8a       	std	Y+18, r1	; 0x12
    3ce0:	1b 8a       	std	Y+19, r1	; 0x13
    3ce2:	19 8a       	std	Y+17, r1	; 0x11
    3ce4:	18 8a       	std	Y+16, r1	; 0x10
    3ce6:	1c 8a       	std	Y+20, r1	; 0x14
    3ce8:	1e 8a       	std	Y+22, r1	; 0x16
    3cea:	1f 8a       	std	Y+23, r1	; 0x17
    3cec:	1d 8a       	std	Y+21, r1	; 0x15
    3cee:	88 e2       	ldi	r24, 0x28	; 40
    3cf0:	89 8f       	std	Y+25, r24	; 0x19
    3cf2:	8a e0       	ldi	r24, 0x0A	; 10
    3cf4:	8a 8f       	std	Y+26, r24	; 0x1a
    3cf6:	1c 8e       	std	Y+28, r1	; 0x1c
    3cf8:	1b 8e       	std	Y+27, r1	; 0x1b
    3cfa:	1e 8e       	std	Y+30, r1	; 0x1e
    3cfc:	1d 8e       	std	Y+29, r1	; 0x1d
    3cfe:	fe 01       	movw	r30, r28
    3d00:	ce 01       	movw	r24, r28
    3d02:	08 96       	adiw	r24, 0x08	; 8
    3d04:	dc 01       	movw	r26, r24
    3d06:	11 92       	st	Z+, r1
    3d08:	1d 92       	st	X+, r1
    3d0a:	e8 17       	cp	r30, r24
    3d0c:	f9 07       	cpc	r31, r25
    3d0e:	d9 f7       	brne	.-10     	; 0x3d06 <_ZN3RTCC1Ev+0x2e>
    3d10:	8a e3       	ldi	r24, 0x3A	; 58
    3d12:	8a 83       	std	Y+2, r24	; 0x02
    3d14:	8d 83       	std	Y+5, r24	; 0x05
    3d16:	8e e2       	ldi	r24, 0x2E	; 46
    3d18:	8a 87       	std	Y+10, r24	; 0x0a
    3d1a:	8d 87       	std	Y+13, r24	; 0x0d
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	6a df       	rcall	.-300    	; 0x3bf4 <_ZN3RTC14ausgabezeitneuEv>
    3d20:	ce 01       	movw	r24, r28
    3d22:	a1 df       	rcall	.-190    	; 0x3c66 <_ZN3RTC15ausgabedatumneuEv>
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	08 95       	ret

00003d2a <_ZN3RTC8kalenderEv>:
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	26 89       	ldd	r18, Z+22	; 0x16
    3d2e:	32 2f       	mov	r19, r18
    3d30:	3d 7f       	andi	r19, 0xFD	; 253
    3d32:	34 30       	cpi	r19, 0x04	; 4
    3d34:	11 f0       	breq	.+4      	; 0x3d3a <_ZN3RTC8kalenderEv+0x10>
    3d36:	39 30       	cpi	r19, 0x09	; 9
    3d38:	91 f4       	brne	.+36     	; 0x3d5e <_ZN3RTC8kalenderEv+0x34>
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	34 89       	ldd	r19, Z+20	; 0x14
    3d3e:	3f 31       	cpi	r19, 0x1F	; 31
    3d40:	b0 f1       	brcs	.+108    	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d42:	31 e0       	ldi	r19, 0x01	; 1
    3d44:	34 8b       	std	Z+20, r19	; 0x14
    3d46:	2f 5f       	subi	r18, 0xFF	; 255
    3d48:	2d 30       	cpi	r18, 0x0D	; 13
    3d4a:	10 f4       	brcc	.+4      	; 0x3d50 <_ZN3RTC8kalenderEv+0x26>
    3d4c:	26 8b       	std	Z+22, r18	; 0x16
    3d4e:	2f c0       	rjmp	.+94     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d50:	21 e0       	ldi	r18, 0x01	; 1
    3d52:	fc 01       	movw	r30, r24
    3d54:	26 8b       	std	Z+22, r18	; 0x16
    3d56:	27 89       	ldd	r18, Z+23	; 0x17
    3d58:	2f 5f       	subi	r18, 0xFF	; 255
    3d5a:	27 8b       	std	Z+23, r18	; 0x17
    3d5c:	28 c0       	rjmp	.+80     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d5e:	22 30       	cpi	r18, 0x02	; 2
    3d60:	a9 f4       	brne	.+42     	; 0x3d8c <_ZN3RTC8kalenderEv+0x62>
    3d62:	fc 01       	movw	r30, r24
    3d64:	27 89       	ldd	r18, Z+23	; 0x17
    3d66:	23 70       	andi	r18, 0x03	; 3
    3d68:	41 f4       	brne	.+16     	; 0x3d7a <_ZN3RTC8kalenderEv+0x50>
    3d6a:	24 89       	ldd	r18, Z+20	; 0x14
    3d6c:	2e 31       	cpi	r18, 0x1E	; 30
    3d6e:	f8 f0       	brcs	.+62     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d70:	21 e0       	ldi	r18, 0x01	; 1
    3d72:	24 8b       	std	Z+20, r18	; 0x14
    3d74:	23 e0       	ldi	r18, 0x03	; 3
    3d76:	26 8b       	std	Z+22, r18	; 0x16
    3d78:	1a c0       	rjmp	.+52     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	24 89       	ldd	r18, Z+20	; 0x14
    3d7e:	2d 31       	cpi	r18, 0x1D	; 29
    3d80:	b0 f0       	brcs	.+44     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d82:	21 e0       	ldi	r18, 0x01	; 1
    3d84:	24 8b       	std	Z+20, r18	; 0x14
    3d86:	23 e0       	ldi	r18, 0x03	; 3
    3d88:	26 8b       	std	Z+22, r18	; 0x16
    3d8a:	11 c0       	rjmp	.+34     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	34 89       	ldd	r19, Z+20	; 0x14
    3d90:	30 32       	cpi	r19, 0x20	; 32
    3d92:	68 f0       	brcs	.+26     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3d94:	31 e0       	ldi	r19, 0x01	; 1
    3d96:	34 8b       	std	Z+20, r19	; 0x14
    3d98:	2f 5f       	subi	r18, 0xFF	; 255
    3d9a:	2d 30       	cpi	r18, 0x0D	; 13
    3d9c:	10 f4       	brcc	.+4      	; 0x3da2 <_ZN3RTC8kalenderEv+0x78>
    3d9e:	26 8b       	std	Z+22, r18	; 0x16
    3da0:	06 c0       	rjmp	.+12     	; 0x3dae <_ZN3RTC8kalenderEv+0x84>
    3da2:	21 e0       	ldi	r18, 0x01	; 1
    3da4:	fc 01       	movw	r30, r24
    3da6:	26 8b       	std	Z+22, r18	; 0x16
    3da8:	27 89       	ldd	r18, Z+23	; 0x17
    3daa:	2f 5f       	subi	r18, 0xFF	; 255
    3dac:	27 8b       	std	Z+23, r18	; 0x17
    3dae:	5b cf       	rjmp	.-330    	; 0x3c66 <_ZN3RTC15ausgabedatumneuEv>
    3db0:	08 95       	ret

00003db2 <_ZN3RTC4zeitEv>:
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	ec 01       	movw	r28, r24
    3db8:	8a 89       	ldd	r24, Y+18	; 0x12
    3dba:	8c 53       	subi	r24, 0x3C	; 60
    3dbc:	8d 38       	cpi	r24, 0x8D	; 141
    3dbe:	c0 f4       	brcc	.+48     	; 0x3df0 <_ZN3RTC4zeitEv+0x3e>
    3dc0:	1a 8a       	std	Y+18, r1	; 0x12
    3dc2:	89 89       	ldd	r24, Y+17	; 0x11
    3dc4:	8f 5f       	subi	r24, 0xFF	; 255
    3dc6:	89 8b       	std	Y+17, r24	; 0x11
    3dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dca:	94 60       	ori	r25, 0x04	; 4
    3dcc:	98 8f       	std	Y+24, r25	; 0x18
    3dce:	8c 33       	cpi	r24, 0x3C	; 60
    3dd0:	68 f0       	brcs	.+26     	; 0x3dec <_ZN3RTC4zeitEv+0x3a>
    3dd2:	19 8a       	std	Y+17, r1	; 0x11
    3dd4:	88 89       	ldd	r24, Y+16	; 0x10
    3dd6:	8f 5f       	subi	r24, 0xFF	; 255
    3dd8:	88 31       	cpi	r24, 0x18	; 24
    3dda:	10 f4       	brcc	.+4      	; 0x3de0 <_ZN3RTC4zeitEv+0x2e>
    3ddc:	88 8b       	std	Y+16, r24	; 0x10
    3dde:	06 c0       	rjmp	.+12     	; 0x3dec <_ZN3RTC4zeitEv+0x3a>
    3de0:	18 8a       	std	Y+16, r1	; 0x10
    3de2:	8c 89       	ldd	r24, Y+20	; 0x14
    3de4:	8f 5f       	subi	r24, 0xFF	; 255
    3de6:	8c 8b       	std	Y+20, r24	; 0x14
    3de8:	ce 01       	movw	r24, r28
    3dea:	9f df       	rcall	.-194    	; 0x3d2a <_ZN3RTC8kalenderEv>
    3dec:	ce 01       	movw	r24, r28
    3dee:	f1 de       	rcall	.-542    	; 0x3bd2 <_ZN3RTC6WeckerEv>
    3df0:	ce 01       	movw	r24, r28
    3df2:	00 df       	rcall	.-512    	; 0x3bf4 <_ZN3RTC14ausgabezeitneuEv>
    3df4:	88 8d       	ldd	r24, Y+24	; 0x18
    3df6:	85 ff       	sbrs	r24, 5
    3df8:	0b c0       	rjmp	.+22     	; 0x3e10 <_ZN3RTC4zeitEv+0x5e>
    3dfa:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3dfc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3dfe:	21 50       	subi	r18, 0x01	; 1
    3e00:	31 09       	sbc	r19, r1
    3e02:	3c 8f       	std	Y+28, r19	; 0x1c
    3e04:	2b 8f       	std	Y+27, r18	; 0x1b
    3e06:	23 2b       	or	r18, r19
    3e08:	19 f4       	brne	.+6      	; 0x3e10 <_ZN3RTC4zeitEv+0x5e>
    3e0a:	8f 7d       	andi	r24, 0xDF	; 223
    3e0c:	81 60       	ori	r24, 0x01	; 1
    3e0e:	88 8f       	std	Y+24, r24	; 0x18
    3e10:	88 8d       	ldd	r24, Y+24	; 0x18
    3e12:	86 ff       	sbrs	r24, 6
    3e14:	05 c0       	rjmp	.+10     	; 0x3e20 <_ZN3RTC4zeitEv+0x6e>
    3e16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e1a:	01 96       	adiw	r24, 0x01	; 1
    3e1c:	9e 8f       	std	Y+30, r25	; 0x1e
    3e1e:	8d 8f       	std	Y+29, r24	; 0x1d
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	08 95       	ret

00003e28 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    3e28:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    3e2a:	80 e3       	ldi	r24, 0x30	; 48
    3e2c:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    3e2e:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    3e30:	9a e3       	ldi	r25, 0x3A	; 58
    3e32:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    3e34:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    3e36:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    3e38:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    3e3a:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    3e3c:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    3e3e:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    3e40:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    3e44:	e6 eb       	ldi	r30, 0xB6	; 182
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	80 81       	ld	r24, Z
    3e4a:	80 62       	ori	r24, 0x20	; 32
    3e4c:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    3e54:	85 e0       	ldi	r24, 0x05	; 5
    3e56:	80 93 b1 00 	sts	0x00B1, r24
    3e5a:	08 95       	ret

00003e5c <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    3e5c:	e1 eb       	ldi	r30, 0xB1	; 177
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	80 81       	ld	r24, Z
    3e62:	89 7f       	andi	r24, 0xF9	; 249
    3e64:	80 83       	st	Z, r24
    3e66:	08 95       	ret

00003e68 <_ZN5SOUNDD1Ev>:
	setfrequenci(1000);//1KHz
	off();
} //SOUND

// default destructor
SOUND::~SOUND()
    3e68:	08 95       	ret

00003e6a <_ZN5SOUND2onEv>:
	TCNT0 = 0;
	on();
}

void SOUND::on(){
	if ((interupts&(1<<Soundactiv)))
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	20 81       	ld	r18, Z
    3e6e:	20 ff       	sbrs	r18, 0
    3e70:	04 c0       	rjmp	.+8      	; 0x3e7a <_ZN5SOUND2onEv+0x10>
	{
		TCCR0B |= prescaler;
    3e72:	25 b5       	in	r18, 0x25	; 37
    3e74:	81 81       	ldd	r24, Z+1	; 0x01
    3e76:	82 2b       	or	r24, r18
    3e78:	85 bd       	out	0x25, r24	; 37
    3e7a:	08 95       	ret

00003e7c <_ZN5SOUND3offEv>:
	}
}

void SOUND::off(){
	TCCR0B &= ~((1<<CS00)|(1<<CS01)|(1<<CS02));
    3e7c:	85 b5       	in	r24, 0x25	; 37
    3e7e:	88 7f       	andi	r24, 0xF8	; 248
    3e80:	85 bd       	out	0x25, r24	; 37
    3e82:	08 95       	ret

00003e84 <_ZN5SOUND12setfrequenciEj>:
{
} //~SOUND


//WERT = f_CPU/(f*1024)
void SOUND::setfrequenci(uint16_t frequenz){
    3e84:	0f 93       	push	r16
    3e86:	1f 93       	push	r17
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
    3e8c:	8c 01       	movw	r16, r24
    3e8e:	eb 01       	movw	r28, r22
	off();
    3e90:	f5 df       	rcall	.-22     	; 0x3e7c <_ZN5SOUND3offEv>
	float WERT = F_CPU/256.0;
	WERT /= (frequenz);
    3e92:	be 01       	movw	r22, r28
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	29 d1       	rcall	.+594    	; 0x40ec <__floatunsisf>
    3e9a:	9b 01       	movw	r18, r22
    3e9c:	ac 01       	movw	r20, r24
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	74 e2       	ldi	r23, 0x24	; 36
    3ea2:	84 ef       	ldi	r24, 0xF4	; 244
    3ea4:	96 e4       	ldi	r25, 0x46	; 70
    3ea6:	89 d0       	rcall	.+274    	; 0x3fba <__divsf3>
	OCR0A = (uint8_t)WERT;
    3ea8:	f5 d0       	rcall	.+490    	; 0x4094 <__fixunssfsi>
    3eaa:	67 bd       	out	0x27, r22	; 39
	TCNT0 = 0;
    3eac:	16 bc       	out	0x26, r1	; 38
	on();
    3eae:	c8 01       	movw	r24, r16
    3eb0:	dc df       	rcall	.-72     	; 0x3e6a <_ZN5SOUND2onEv>
}
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	1f 91       	pop	r17
    3eb8:	0f 91       	pop	r16
    3eba:	08 95       	ret

00003ebc <_ZN5SOUNDC1Ev>:


#include "SOUND.h"

// default constructor
SOUND::SOUND()
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	ec 01       	movw	r28, r24
{
	//interuptregister initialisieren
	interupts = 0;
    3ec2:	18 82       	st	Y, r1
	PORTB &= ~(1<<PORTB3); //Pullups ausschalten
    3ec4:	2b 98       	cbi	0x05, 3	; 5
	DDRB |= (1<<PORTB3); //Ausgang schalten
    3ec6:	23 9a       	sbi	0x04, 3	; 4
	//Not inverting PWM, Phase correct
	TCCR0A |= (1<<COM0A0) | (1<<WGM00);
    3ec8:	84 b5       	in	r24, 0x24	; 36
    3eca:	81 64       	ori	r24, 0x41	; 65
    3ecc:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
    3ece:	85 b5       	in	r24, 0x25	; 37
    3ed0:	88 60       	ori	r24, 0x08	; 8
    3ed2:	85 bd       	out	0x25, r24	; 37
	fuer	8		1MHz		3.90625KHz
			64		125KHz		488.28Hz
			256		31.25KHz	122.07Hz
			1024	7.8125KHz	30.52Hz
*/
	prescaler = (1<<CS02); //256
    3ed4:	84 e0       	ldi	r24, 0x04	; 4
    3ed6:	89 83       	std	Y+1, r24	; 0x01
	setfrequenci(1000);//1KHz
    3ed8:	68 ee       	ldi	r22, 0xE8	; 232
    3eda:	73 e0       	ldi	r23, 0x03	; 3
    3edc:	ce 01       	movw	r24, r28
    3ede:	d2 df       	rcall	.-92     	; 0x3e84 <_ZN5SOUND12setfrequenciEj>
	off();
    3ee0:	ce 01       	movw	r24, r28
    3ee2:	cc df       	rcall	.-104    	; 0x3e7c <_ZN5SOUND3offEv>
} //SOUND
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <__subsf3>:
    3eea:	50 58       	subi	r21, 0x80	; 128

00003eec <__addsf3>:
    3eec:	bb 27       	eor	r27, r27
    3eee:	aa 27       	eor	r26, r26
    3ef0:	0e d0       	rcall	.+28     	; 0x3f0e <__addsf3x>
    3ef2:	c1 c1       	rjmp	.+898    	; 0x4276 <__fp_round>
    3ef4:	8a d1       	rcall	.+788    	; 0x420a <__fp_pscA>
    3ef6:	30 f0       	brcs	.+12     	; 0x3f04 <__addsf3+0x18>
    3ef8:	8f d1       	rcall	.+798    	; 0x4218 <__fp_pscB>
    3efa:	20 f0       	brcs	.+8      	; 0x3f04 <__addsf3+0x18>
    3efc:	31 f4       	brne	.+12     	; 0x3f0a <__addsf3+0x1e>
    3efe:	9f 3f       	cpi	r25, 0xFF	; 255
    3f00:	11 f4       	brne	.+4      	; 0x3f06 <__addsf3+0x1a>
    3f02:	1e f4       	brtc	.+6      	; 0x3f0a <__addsf3+0x1e>
    3f04:	5a c1       	rjmp	.+692    	; 0x41ba <__fp_nan>
    3f06:	0e f4       	brtc	.+2      	; 0x3f0a <__addsf3+0x1e>
    3f08:	e0 95       	com	r30
    3f0a:	e7 fb       	bst	r30, 7
    3f0c:	50 c1       	rjmp	.+672    	; 0x41ae <__fp_inf>

00003f0e <__addsf3x>:
    3f0e:	e9 2f       	mov	r30, r25
    3f10:	d4 d1       	rcall	.+936    	; 0x42ba <__fp_split3>
    3f12:	80 f3       	brcs	.-32     	; 0x3ef4 <__addsf3+0x8>
    3f14:	ba 17       	cp	r27, r26
    3f16:	62 07       	cpc	r22, r18
    3f18:	73 07       	cpc	r23, r19
    3f1a:	84 07       	cpc	r24, r20
    3f1c:	95 07       	cpc	r25, r21
    3f1e:	18 f0       	brcs	.+6      	; 0x3f26 <__addsf3x+0x18>
    3f20:	71 f4       	brne	.+28     	; 0x3f3e <__addsf3x+0x30>
    3f22:	9e f5       	brtc	.+102    	; 0x3f8a <__addsf3x+0x7c>
    3f24:	ec c1       	rjmp	.+984    	; 0x42fe <__fp_zero>
    3f26:	0e f4       	brtc	.+2      	; 0x3f2a <__addsf3x+0x1c>
    3f28:	e0 95       	com	r30
    3f2a:	0b 2e       	mov	r0, r27
    3f2c:	ba 2f       	mov	r27, r26
    3f2e:	a0 2d       	mov	r26, r0
    3f30:	0b 01       	movw	r0, r22
    3f32:	b9 01       	movw	r22, r18
    3f34:	90 01       	movw	r18, r0
    3f36:	0c 01       	movw	r0, r24
    3f38:	ca 01       	movw	r24, r20
    3f3a:	a0 01       	movw	r20, r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	ff 27       	eor	r31, r31
    3f40:	59 1b       	sub	r21, r25
    3f42:	99 f0       	breq	.+38     	; 0x3f6a <__addsf3x+0x5c>
    3f44:	59 3f       	cpi	r21, 0xF9	; 249
    3f46:	50 f4       	brcc	.+20     	; 0x3f5c <__addsf3x+0x4e>
    3f48:	50 3e       	cpi	r21, 0xE0	; 224
    3f4a:	68 f1       	brcs	.+90     	; 0x3fa6 <__addsf3x+0x98>
    3f4c:	1a 16       	cp	r1, r26
    3f4e:	f0 40       	sbci	r31, 0x00	; 0
    3f50:	a2 2f       	mov	r26, r18
    3f52:	23 2f       	mov	r18, r19
    3f54:	34 2f       	mov	r19, r20
    3f56:	44 27       	eor	r20, r20
    3f58:	58 5f       	subi	r21, 0xF8	; 248
    3f5a:	f3 cf       	rjmp	.-26     	; 0x3f42 <__addsf3x+0x34>
    3f5c:	46 95       	lsr	r20
    3f5e:	37 95       	ror	r19
    3f60:	27 95       	ror	r18
    3f62:	a7 95       	ror	r26
    3f64:	f0 40       	sbci	r31, 0x00	; 0
    3f66:	53 95       	inc	r21
    3f68:	c9 f7       	brne	.-14     	; 0x3f5c <__addsf3x+0x4e>
    3f6a:	7e f4       	brtc	.+30     	; 0x3f8a <__addsf3x+0x7c>
    3f6c:	1f 16       	cp	r1, r31
    3f6e:	ba 0b       	sbc	r27, r26
    3f70:	62 0b       	sbc	r22, r18
    3f72:	73 0b       	sbc	r23, r19
    3f74:	84 0b       	sbc	r24, r20
    3f76:	ba f0       	brmi	.+46     	; 0x3fa6 <__addsf3x+0x98>
    3f78:	91 50       	subi	r25, 0x01	; 1
    3f7a:	a1 f0       	breq	.+40     	; 0x3fa4 <__addsf3x+0x96>
    3f7c:	ff 0f       	add	r31, r31
    3f7e:	bb 1f       	adc	r27, r27
    3f80:	66 1f       	adc	r22, r22
    3f82:	77 1f       	adc	r23, r23
    3f84:	88 1f       	adc	r24, r24
    3f86:	c2 f7       	brpl	.-16     	; 0x3f78 <__addsf3x+0x6a>
    3f88:	0e c0       	rjmp	.+28     	; 0x3fa6 <__addsf3x+0x98>
    3f8a:	ba 0f       	add	r27, r26
    3f8c:	62 1f       	adc	r22, r18
    3f8e:	73 1f       	adc	r23, r19
    3f90:	84 1f       	adc	r24, r20
    3f92:	48 f4       	brcc	.+18     	; 0x3fa6 <__addsf3x+0x98>
    3f94:	87 95       	ror	r24
    3f96:	77 95       	ror	r23
    3f98:	67 95       	ror	r22
    3f9a:	b7 95       	ror	r27
    3f9c:	f7 95       	ror	r31
    3f9e:	9e 3f       	cpi	r25, 0xFE	; 254
    3fa0:	08 f0       	brcs	.+2      	; 0x3fa4 <__addsf3x+0x96>
    3fa2:	b3 cf       	rjmp	.-154    	; 0x3f0a <__addsf3+0x1e>
    3fa4:	93 95       	inc	r25
    3fa6:	88 0f       	add	r24, r24
    3fa8:	08 f0       	brcs	.+2      	; 0x3fac <__addsf3x+0x9e>
    3faa:	99 27       	eor	r25, r25
    3fac:	ee 0f       	add	r30, r30
    3fae:	97 95       	ror	r25
    3fb0:	87 95       	ror	r24
    3fb2:	08 95       	ret

00003fb4 <cos>:
    3fb4:	39 d1       	rcall	.+626    	; 0x4228 <__fp_rempio2>
    3fb6:	e3 95       	inc	r30
    3fb8:	6f c1       	rjmp	.+734    	; 0x4298 <__fp_sinus>

00003fba <__divsf3>:
    3fba:	0c d0       	rcall	.+24     	; 0x3fd4 <__divsf3x>
    3fbc:	5c c1       	rjmp	.+696    	; 0x4276 <__fp_round>
    3fbe:	2c d1       	rcall	.+600    	; 0x4218 <__fp_pscB>
    3fc0:	40 f0       	brcs	.+16     	; 0x3fd2 <__divsf3+0x18>
    3fc2:	23 d1       	rcall	.+582    	; 0x420a <__fp_pscA>
    3fc4:	30 f0       	brcs	.+12     	; 0x3fd2 <__divsf3+0x18>
    3fc6:	21 f4       	brne	.+8      	; 0x3fd0 <__divsf3+0x16>
    3fc8:	5f 3f       	cpi	r21, 0xFF	; 255
    3fca:	19 f0       	breq	.+6      	; 0x3fd2 <__divsf3+0x18>
    3fcc:	f0 c0       	rjmp	.+480    	; 0x41ae <__fp_inf>
    3fce:	51 11       	cpse	r21, r1
    3fd0:	97 c1       	rjmp	.+814    	; 0x4300 <__fp_szero>
    3fd2:	f3 c0       	rjmp	.+486    	; 0x41ba <__fp_nan>

00003fd4 <__divsf3x>:
    3fd4:	72 d1       	rcall	.+740    	; 0x42ba <__fp_split3>
    3fd6:	98 f3       	brcs	.-26     	; 0x3fbe <__divsf3+0x4>

00003fd8 <__divsf3_pse>:
    3fd8:	99 23       	and	r25, r25
    3fda:	c9 f3       	breq	.-14     	; 0x3fce <__divsf3+0x14>
    3fdc:	55 23       	and	r21, r21
    3fde:	b1 f3       	breq	.-20     	; 0x3fcc <__divsf3+0x12>
    3fe0:	95 1b       	sub	r25, r21
    3fe2:	55 0b       	sbc	r21, r21
    3fe4:	bb 27       	eor	r27, r27
    3fe6:	aa 27       	eor	r26, r26
    3fe8:	62 17       	cp	r22, r18
    3fea:	73 07       	cpc	r23, r19
    3fec:	84 07       	cpc	r24, r20
    3fee:	38 f0       	brcs	.+14     	; 0x3ffe <__divsf3_pse+0x26>
    3ff0:	9f 5f       	subi	r25, 0xFF	; 255
    3ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ff4:	22 0f       	add	r18, r18
    3ff6:	33 1f       	adc	r19, r19
    3ff8:	44 1f       	adc	r20, r20
    3ffa:	aa 1f       	adc	r26, r26
    3ffc:	a9 f3       	breq	.-22     	; 0x3fe8 <__divsf3_pse+0x10>
    3ffe:	33 d0       	rcall	.+102    	; 0x4066 <__divsf3_pse+0x8e>
    4000:	0e 2e       	mov	r0, r30
    4002:	3a f0       	brmi	.+14     	; 0x4012 <__divsf3_pse+0x3a>
    4004:	e0 e8       	ldi	r30, 0x80	; 128
    4006:	30 d0       	rcall	.+96     	; 0x4068 <__divsf3_pse+0x90>
    4008:	91 50       	subi	r25, 0x01	; 1
    400a:	50 40       	sbci	r21, 0x00	; 0
    400c:	e6 95       	lsr	r30
    400e:	00 1c       	adc	r0, r0
    4010:	ca f7       	brpl	.-14     	; 0x4004 <__divsf3_pse+0x2c>
    4012:	29 d0       	rcall	.+82     	; 0x4066 <__divsf3_pse+0x8e>
    4014:	fe 2f       	mov	r31, r30
    4016:	27 d0       	rcall	.+78     	; 0x4066 <__divsf3_pse+0x8e>
    4018:	66 0f       	add	r22, r22
    401a:	77 1f       	adc	r23, r23
    401c:	88 1f       	adc	r24, r24
    401e:	bb 1f       	adc	r27, r27
    4020:	26 17       	cp	r18, r22
    4022:	37 07       	cpc	r19, r23
    4024:	48 07       	cpc	r20, r24
    4026:	ab 07       	cpc	r26, r27
    4028:	b0 e8       	ldi	r27, 0x80	; 128
    402a:	09 f0       	breq	.+2      	; 0x402e <__divsf3_pse+0x56>
    402c:	bb 0b       	sbc	r27, r27
    402e:	80 2d       	mov	r24, r0
    4030:	bf 01       	movw	r22, r30
    4032:	ff 27       	eor	r31, r31
    4034:	93 58       	subi	r25, 0x83	; 131
    4036:	5f 4f       	sbci	r21, 0xFF	; 255
    4038:	2a f0       	brmi	.+10     	; 0x4044 <__divsf3_pse+0x6c>
    403a:	9e 3f       	cpi	r25, 0xFE	; 254
    403c:	51 05       	cpc	r21, r1
    403e:	68 f0       	brcs	.+26     	; 0x405a <__divsf3_pse+0x82>
    4040:	b6 c0       	rjmp	.+364    	; 0x41ae <__fp_inf>
    4042:	5e c1       	rjmp	.+700    	; 0x4300 <__fp_szero>
    4044:	5f 3f       	cpi	r21, 0xFF	; 255
    4046:	ec f3       	brlt	.-6      	; 0x4042 <__divsf3_pse+0x6a>
    4048:	98 3e       	cpi	r25, 0xE8	; 232
    404a:	dc f3       	brlt	.-10     	; 0x4042 <__divsf3_pse+0x6a>
    404c:	86 95       	lsr	r24
    404e:	77 95       	ror	r23
    4050:	67 95       	ror	r22
    4052:	b7 95       	ror	r27
    4054:	f7 95       	ror	r31
    4056:	9f 5f       	subi	r25, 0xFF	; 255
    4058:	c9 f7       	brne	.-14     	; 0x404c <__divsf3_pse+0x74>
    405a:	88 0f       	add	r24, r24
    405c:	91 1d       	adc	r25, r1
    405e:	96 95       	lsr	r25
    4060:	87 95       	ror	r24
    4062:	97 f9       	bld	r25, 7
    4064:	08 95       	ret
    4066:	e1 e0       	ldi	r30, 0x01	; 1
    4068:	66 0f       	add	r22, r22
    406a:	77 1f       	adc	r23, r23
    406c:	88 1f       	adc	r24, r24
    406e:	bb 1f       	adc	r27, r27
    4070:	62 17       	cp	r22, r18
    4072:	73 07       	cpc	r23, r19
    4074:	84 07       	cpc	r24, r20
    4076:	ba 07       	cpc	r27, r26
    4078:	20 f0       	brcs	.+8      	; 0x4082 <__divsf3_pse+0xaa>
    407a:	62 1b       	sub	r22, r18
    407c:	73 0b       	sbc	r23, r19
    407e:	84 0b       	sbc	r24, r20
    4080:	ba 0b       	sbc	r27, r26
    4082:	ee 1f       	adc	r30, r30
    4084:	88 f7       	brcc	.-30     	; 0x4068 <__divsf3_pse+0x90>
    4086:	e0 95       	com	r30
    4088:	08 95       	ret

0000408a <__fixsfsi>:
    408a:	04 d0       	rcall	.+8      	; 0x4094 <__fixunssfsi>
    408c:	68 94       	set
    408e:	b1 11       	cpse	r27, r1
    4090:	37 c1       	rjmp	.+622    	; 0x4300 <__fp_szero>
    4092:	08 95       	ret

00004094 <__fixunssfsi>:
    4094:	1a d1       	rcall	.+564    	; 0x42ca <__fp_splitA>
    4096:	88 f0       	brcs	.+34     	; 0x40ba <__fixunssfsi+0x26>
    4098:	9f 57       	subi	r25, 0x7F	; 127
    409a:	90 f0       	brcs	.+36     	; 0x40c0 <__fixunssfsi+0x2c>
    409c:	b9 2f       	mov	r27, r25
    409e:	99 27       	eor	r25, r25
    40a0:	b7 51       	subi	r27, 0x17	; 23
    40a2:	a0 f0       	brcs	.+40     	; 0x40cc <__fixunssfsi+0x38>
    40a4:	d1 f0       	breq	.+52     	; 0x40da <__fixunssfsi+0x46>
    40a6:	66 0f       	add	r22, r22
    40a8:	77 1f       	adc	r23, r23
    40aa:	88 1f       	adc	r24, r24
    40ac:	99 1f       	adc	r25, r25
    40ae:	1a f0       	brmi	.+6      	; 0x40b6 <__fixunssfsi+0x22>
    40b0:	ba 95       	dec	r27
    40b2:	c9 f7       	brne	.-14     	; 0x40a6 <__fixunssfsi+0x12>
    40b4:	12 c0       	rjmp	.+36     	; 0x40da <__fixunssfsi+0x46>
    40b6:	b1 30       	cpi	r27, 0x01	; 1
    40b8:	81 f0       	breq	.+32     	; 0x40da <__fixunssfsi+0x46>
    40ba:	21 d1       	rcall	.+578    	; 0x42fe <__fp_zero>
    40bc:	b1 e0       	ldi	r27, 0x01	; 1
    40be:	08 95       	ret
    40c0:	1e c1       	rjmp	.+572    	; 0x42fe <__fp_zero>
    40c2:	67 2f       	mov	r22, r23
    40c4:	78 2f       	mov	r23, r24
    40c6:	88 27       	eor	r24, r24
    40c8:	b8 5f       	subi	r27, 0xF8	; 248
    40ca:	39 f0       	breq	.+14     	; 0x40da <__fixunssfsi+0x46>
    40cc:	b9 3f       	cpi	r27, 0xF9	; 249
    40ce:	cc f3       	brlt	.-14     	; 0x40c2 <__fixunssfsi+0x2e>
    40d0:	86 95       	lsr	r24
    40d2:	77 95       	ror	r23
    40d4:	67 95       	ror	r22
    40d6:	b3 95       	inc	r27
    40d8:	d9 f7       	brne	.-10     	; 0x40d0 <__fixunssfsi+0x3c>
    40da:	3e f4       	brtc	.+14     	; 0x40ea <__fixunssfsi+0x56>
    40dc:	90 95       	com	r25
    40de:	80 95       	com	r24
    40e0:	70 95       	com	r23
    40e2:	61 95       	neg	r22
    40e4:	7f 4f       	sbci	r23, 0xFF	; 255
    40e6:	8f 4f       	sbci	r24, 0xFF	; 255
    40e8:	9f 4f       	sbci	r25, 0xFF	; 255
    40ea:	08 95       	ret

000040ec <__floatunsisf>:
    40ec:	e8 94       	clt
    40ee:	09 c0       	rjmp	.+18     	; 0x4102 <__stack+0x3>

000040f0 <__floatsisf>:
    40f0:	97 fb       	bst	r25, 7
    40f2:	3e f4       	brtc	.+14     	; 0x4102 <__stack+0x3>
    40f4:	90 95       	com	r25
    40f6:	80 95       	com	r24
    40f8:	70 95       	com	r23
    40fa:	61 95       	neg	r22
    40fc:	7f 4f       	sbci	r23, 0xFF	; 255
    40fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4100:	9f 4f       	sbci	r25, 0xFF	; 255
    4102:	99 23       	and	r25, r25
    4104:	a9 f0       	breq	.+42     	; 0x4130 <__stack+0x31>
    4106:	f9 2f       	mov	r31, r25
    4108:	96 e9       	ldi	r25, 0x96	; 150
    410a:	bb 27       	eor	r27, r27
    410c:	93 95       	inc	r25
    410e:	f6 95       	lsr	r31
    4110:	87 95       	ror	r24
    4112:	77 95       	ror	r23
    4114:	67 95       	ror	r22
    4116:	b7 95       	ror	r27
    4118:	f1 11       	cpse	r31, r1
    411a:	f8 cf       	rjmp	.-16     	; 0x410c <__stack+0xd>
    411c:	fa f4       	brpl	.+62     	; 0x415c <__stack+0x5d>
    411e:	bb 0f       	add	r27, r27
    4120:	11 f4       	brne	.+4      	; 0x4126 <__stack+0x27>
    4122:	60 ff       	sbrs	r22, 0
    4124:	1b c0       	rjmp	.+54     	; 0x415c <__stack+0x5d>
    4126:	6f 5f       	subi	r22, 0xFF	; 255
    4128:	7f 4f       	sbci	r23, 0xFF	; 255
    412a:	8f 4f       	sbci	r24, 0xFF	; 255
    412c:	9f 4f       	sbci	r25, 0xFF	; 255
    412e:	16 c0       	rjmp	.+44     	; 0x415c <__stack+0x5d>
    4130:	88 23       	and	r24, r24
    4132:	11 f0       	breq	.+4      	; 0x4138 <__stack+0x39>
    4134:	96 e9       	ldi	r25, 0x96	; 150
    4136:	11 c0       	rjmp	.+34     	; 0x415a <__stack+0x5b>
    4138:	77 23       	and	r23, r23
    413a:	21 f0       	breq	.+8      	; 0x4144 <__stack+0x45>
    413c:	9e e8       	ldi	r25, 0x8E	; 142
    413e:	87 2f       	mov	r24, r23
    4140:	76 2f       	mov	r23, r22
    4142:	05 c0       	rjmp	.+10     	; 0x414e <__stack+0x4f>
    4144:	66 23       	and	r22, r22
    4146:	71 f0       	breq	.+28     	; 0x4164 <__stack+0x65>
    4148:	96 e8       	ldi	r25, 0x86	; 134
    414a:	86 2f       	mov	r24, r22
    414c:	70 e0       	ldi	r23, 0x00	; 0
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	2a f0       	brmi	.+10     	; 0x415c <__stack+0x5d>
    4152:	9a 95       	dec	r25
    4154:	66 0f       	add	r22, r22
    4156:	77 1f       	adc	r23, r23
    4158:	88 1f       	adc	r24, r24
    415a:	da f7       	brpl	.-10     	; 0x4152 <__stack+0x53>
    415c:	88 0f       	add	r24, r24
    415e:	96 95       	lsr	r25
    4160:	87 95       	ror	r24
    4162:	97 f9       	bld	r25, 7
    4164:	08 95       	ret

00004166 <__fp_cmp>:
    4166:	99 0f       	add	r25, r25
    4168:	00 08       	sbc	r0, r0
    416a:	55 0f       	add	r21, r21
    416c:	aa 0b       	sbc	r26, r26
    416e:	e0 e8       	ldi	r30, 0x80	; 128
    4170:	fe ef       	ldi	r31, 0xFE	; 254
    4172:	16 16       	cp	r1, r22
    4174:	17 06       	cpc	r1, r23
    4176:	e8 07       	cpc	r30, r24
    4178:	f9 07       	cpc	r31, r25
    417a:	c0 f0       	brcs	.+48     	; 0x41ac <__fp_cmp+0x46>
    417c:	12 16       	cp	r1, r18
    417e:	13 06       	cpc	r1, r19
    4180:	e4 07       	cpc	r30, r20
    4182:	f5 07       	cpc	r31, r21
    4184:	98 f0       	brcs	.+38     	; 0x41ac <__fp_cmp+0x46>
    4186:	62 1b       	sub	r22, r18
    4188:	73 0b       	sbc	r23, r19
    418a:	84 0b       	sbc	r24, r20
    418c:	95 0b       	sbc	r25, r21
    418e:	39 f4       	brne	.+14     	; 0x419e <__fp_cmp+0x38>
    4190:	0a 26       	eor	r0, r26
    4192:	61 f0       	breq	.+24     	; 0x41ac <__fp_cmp+0x46>
    4194:	23 2b       	or	r18, r19
    4196:	24 2b       	or	r18, r20
    4198:	25 2b       	or	r18, r21
    419a:	21 f4       	brne	.+8      	; 0x41a4 <__fp_cmp+0x3e>
    419c:	08 95       	ret
    419e:	0a 26       	eor	r0, r26
    41a0:	09 f4       	brne	.+2      	; 0x41a4 <__fp_cmp+0x3e>
    41a2:	a1 40       	sbci	r26, 0x01	; 1
    41a4:	a6 95       	lsr	r26
    41a6:	8f ef       	ldi	r24, 0xFF	; 255
    41a8:	81 1d       	adc	r24, r1
    41aa:	81 1d       	adc	r24, r1
    41ac:	08 95       	ret

000041ae <__fp_inf>:
    41ae:	97 f9       	bld	r25, 7
    41b0:	9f 67       	ori	r25, 0x7F	; 127
    41b2:	80 e8       	ldi	r24, 0x80	; 128
    41b4:	70 e0       	ldi	r23, 0x00	; 0
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	08 95       	ret

000041ba <__fp_nan>:
    41ba:	9f ef       	ldi	r25, 0xFF	; 255
    41bc:	80 ec       	ldi	r24, 0xC0	; 192
    41be:	08 95       	ret

000041c0 <__fp_powser>:
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	1f 93       	push	r17
    41c6:	0f 93       	push	r16
    41c8:	ff 92       	push	r15
    41ca:	ef 92       	push	r14
    41cc:	df 92       	push	r13
    41ce:	7b 01       	movw	r14, r22
    41d0:	8c 01       	movw	r16, r24
    41d2:	68 94       	set
    41d4:	05 c0       	rjmp	.+10     	; 0x41e0 <__fp_powser+0x20>
    41d6:	da 2e       	mov	r13, r26
    41d8:	ef 01       	movw	r28, r30
    41da:	a8 d0       	rcall	.+336    	; 0x432c <__mulsf3x>
    41dc:	fe 01       	movw	r30, r28
    41de:	e8 94       	clt
    41e0:	a5 91       	lpm	r26, Z+
    41e2:	25 91       	lpm	r18, Z+
    41e4:	35 91       	lpm	r19, Z+
    41e6:	45 91       	lpm	r20, Z+
    41e8:	55 91       	lpm	r21, Z+
    41ea:	ae f3       	brts	.-22     	; 0x41d6 <__fp_powser+0x16>
    41ec:	ef 01       	movw	r28, r30
    41ee:	8f de       	rcall	.-738    	; 0x3f0e <__addsf3x>
    41f0:	fe 01       	movw	r30, r28
    41f2:	97 01       	movw	r18, r14
    41f4:	a8 01       	movw	r20, r16
    41f6:	da 94       	dec	r13
    41f8:	79 f7       	brne	.-34     	; 0x41d8 <__fp_powser+0x18>
    41fa:	df 90       	pop	r13
    41fc:	ef 90       	pop	r14
    41fe:	ff 90       	pop	r15
    4200:	0f 91       	pop	r16
    4202:	1f 91       	pop	r17
    4204:	cf 91       	pop	r28
    4206:	df 91       	pop	r29
    4208:	08 95       	ret

0000420a <__fp_pscA>:
    420a:	00 24       	eor	r0, r0
    420c:	0a 94       	dec	r0
    420e:	16 16       	cp	r1, r22
    4210:	17 06       	cpc	r1, r23
    4212:	18 06       	cpc	r1, r24
    4214:	09 06       	cpc	r0, r25
    4216:	08 95       	ret

00004218 <__fp_pscB>:
    4218:	00 24       	eor	r0, r0
    421a:	0a 94       	dec	r0
    421c:	12 16       	cp	r1, r18
    421e:	13 06       	cpc	r1, r19
    4220:	14 06       	cpc	r1, r20
    4222:	05 06       	cpc	r0, r21
    4224:	08 95       	ret
    4226:	c9 cf       	rjmp	.-110    	; 0x41ba <__fp_nan>

00004228 <__fp_rempio2>:
    4228:	50 d0       	rcall	.+160    	; 0x42ca <__fp_splitA>
    422a:	e8 f3       	brcs	.-6      	; 0x4226 <__fp_pscB+0xe>
    422c:	e8 94       	clt
    422e:	e0 e0       	ldi	r30, 0x00	; 0
    4230:	bb 27       	eor	r27, r27
    4232:	9f 57       	subi	r25, 0x7F	; 127
    4234:	f0 f0       	brcs	.+60     	; 0x4272 <__fp_rempio2+0x4a>
    4236:	2a ed       	ldi	r18, 0xDA	; 218
    4238:	3f e0       	ldi	r19, 0x0F	; 15
    423a:	49 ec       	ldi	r20, 0xC9	; 201
    423c:	06 c0       	rjmp	.+12     	; 0x424a <__fp_rempio2+0x22>
    423e:	ee 0f       	add	r30, r30
    4240:	bb 0f       	add	r27, r27
    4242:	66 1f       	adc	r22, r22
    4244:	77 1f       	adc	r23, r23
    4246:	88 1f       	adc	r24, r24
    4248:	28 f0       	brcs	.+10     	; 0x4254 <__fp_rempio2+0x2c>
    424a:	b2 3a       	cpi	r27, 0xA2	; 162
    424c:	62 07       	cpc	r22, r18
    424e:	73 07       	cpc	r23, r19
    4250:	84 07       	cpc	r24, r20
    4252:	28 f0       	brcs	.+10     	; 0x425e <__fp_rempio2+0x36>
    4254:	b2 5a       	subi	r27, 0xA2	; 162
    4256:	62 0b       	sbc	r22, r18
    4258:	73 0b       	sbc	r23, r19
    425a:	84 0b       	sbc	r24, r20
    425c:	e3 95       	inc	r30
    425e:	9a 95       	dec	r25
    4260:	72 f7       	brpl	.-36     	; 0x423e <__fp_rempio2+0x16>
    4262:	80 38       	cpi	r24, 0x80	; 128
    4264:	30 f4       	brcc	.+12     	; 0x4272 <__fp_rempio2+0x4a>
    4266:	9a 95       	dec	r25
    4268:	bb 0f       	add	r27, r27
    426a:	66 1f       	adc	r22, r22
    426c:	77 1f       	adc	r23, r23
    426e:	88 1f       	adc	r24, r24
    4270:	d2 f7       	brpl	.-12     	; 0x4266 <__fp_rempio2+0x3e>
    4272:	90 48       	sbci	r25, 0x80	; 128
    4274:	ba c0       	rjmp	.+372    	; 0x43ea <__fp_mpack_finite>

00004276 <__fp_round>:
    4276:	09 2e       	mov	r0, r25
    4278:	03 94       	inc	r0
    427a:	00 0c       	add	r0, r0
    427c:	11 f4       	brne	.+4      	; 0x4282 <__fp_round+0xc>
    427e:	88 23       	and	r24, r24
    4280:	52 f0       	brmi	.+20     	; 0x4296 <__fp_round+0x20>
    4282:	bb 0f       	add	r27, r27
    4284:	40 f4       	brcc	.+16     	; 0x4296 <__fp_round+0x20>
    4286:	bf 2b       	or	r27, r31
    4288:	11 f4       	brne	.+4      	; 0x428e <__fp_round+0x18>
    428a:	60 ff       	sbrs	r22, 0
    428c:	04 c0       	rjmp	.+8      	; 0x4296 <__fp_round+0x20>
    428e:	6f 5f       	subi	r22, 0xFF	; 255
    4290:	7f 4f       	sbci	r23, 0xFF	; 255
    4292:	8f 4f       	sbci	r24, 0xFF	; 255
    4294:	9f 4f       	sbci	r25, 0xFF	; 255
    4296:	08 95       	ret

00004298 <__fp_sinus>:
    4298:	ef 93       	push	r30
    429a:	e0 ff       	sbrs	r30, 0
    429c:	06 c0       	rjmp	.+12     	; 0x42aa <__fp_sinus+0x12>
    429e:	a2 ea       	ldi	r26, 0xA2	; 162
    42a0:	2a ed       	ldi	r18, 0xDA	; 218
    42a2:	3f e0       	ldi	r19, 0x0F	; 15
    42a4:	49 ec       	ldi	r20, 0xC9	; 201
    42a6:	5f eb       	ldi	r21, 0xBF	; 191
    42a8:	32 de       	rcall	.-924    	; 0x3f0e <__addsf3x>
    42aa:	e5 df       	rcall	.-54     	; 0x4276 <__fp_round>
    42ac:	0f 90       	pop	r0
    42ae:	03 94       	inc	r0
    42b0:	01 fc       	sbrc	r0, 1
    42b2:	90 58       	subi	r25, 0x80	; 128
    42b4:	ea e5       	ldi	r30, 0x5A	; 90
    42b6:	f1 e0       	ldi	r31, 0x01	; 1
    42b8:	a4 c0       	rjmp	.+328    	; 0x4402 <__fp_powsodd>

000042ba <__fp_split3>:
    42ba:	57 fd       	sbrc	r21, 7
    42bc:	90 58       	subi	r25, 0x80	; 128
    42be:	44 0f       	add	r20, r20
    42c0:	55 1f       	adc	r21, r21
    42c2:	59 f0       	breq	.+22     	; 0x42da <__fp_splitA+0x10>
    42c4:	5f 3f       	cpi	r21, 0xFF	; 255
    42c6:	71 f0       	breq	.+28     	; 0x42e4 <__fp_splitA+0x1a>
    42c8:	47 95       	ror	r20

000042ca <__fp_splitA>:
    42ca:	88 0f       	add	r24, r24
    42cc:	97 fb       	bst	r25, 7
    42ce:	99 1f       	adc	r25, r25
    42d0:	61 f0       	breq	.+24     	; 0x42ea <__fp_splitA+0x20>
    42d2:	9f 3f       	cpi	r25, 0xFF	; 255
    42d4:	79 f0       	breq	.+30     	; 0x42f4 <__fp_splitA+0x2a>
    42d6:	87 95       	ror	r24
    42d8:	08 95       	ret
    42da:	12 16       	cp	r1, r18
    42dc:	13 06       	cpc	r1, r19
    42de:	14 06       	cpc	r1, r20
    42e0:	55 1f       	adc	r21, r21
    42e2:	f2 cf       	rjmp	.-28     	; 0x42c8 <__fp_split3+0xe>
    42e4:	46 95       	lsr	r20
    42e6:	f1 df       	rcall	.-30     	; 0x42ca <__fp_splitA>
    42e8:	08 c0       	rjmp	.+16     	; 0x42fa <__fp_splitA+0x30>
    42ea:	16 16       	cp	r1, r22
    42ec:	17 06       	cpc	r1, r23
    42ee:	18 06       	cpc	r1, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	f1 cf       	rjmp	.-30     	; 0x42d6 <__fp_splitA+0xc>
    42f4:	86 95       	lsr	r24
    42f6:	71 05       	cpc	r23, r1
    42f8:	61 05       	cpc	r22, r1
    42fa:	08 94       	sec
    42fc:	08 95       	ret

000042fe <__fp_zero>:
    42fe:	e8 94       	clt

00004300 <__fp_szero>:
    4300:	bb 27       	eor	r27, r27
    4302:	66 27       	eor	r22, r22
    4304:	77 27       	eor	r23, r23
    4306:	cb 01       	movw	r24, r22
    4308:	97 f9       	bld	r25, 7
    430a:	08 95       	ret

0000430c <__gesf2>:
    430c:	2c df       	rcall	.-424    	; 0x4166 <__fp_cmp>
    430e:	08 f4       	brcc	.+2      	; 0x4312 <__gesf2+0x6>
    4310:	8f ef       	ldi	r24, 0xFF	; 255
    4312:	08 95       	ret

00004314 <__mulsf3>:
    4314:	0b d0       	rcall	.+22     	; 0x432c <__mulsf3x>
    4316:	af cf       	rjmp	.-162    	; 0x4276 <__fp_round>
    4318:	78 df       	rcall	.-272    	; 0x420a <__fp_pscA>
    431a:	28 f0       	brcs	.+10     	; 0x4326 <__mulsf3+0x12>
    431c:	7d df       	rcall	.-262    	; 0x4218 <__fp_pscB>
    431e:	18 f0       	brcs	.+6      	; 0x4326 <__mulsf3+0x12>
    4320:	95 23       	and	r25, r21
    4322:	09 f0       	breq	.+2      	; 0x4326 <__mulsf3+0x12>
    4324:	44 cf       	rjmp	.-376    	; 0x41ae <__fp_inf>
    4326:	49 cf       	rjmp	.-366    	; 0x41ba <__fp_nan>
    4328:	11 24       	eor	r1, r1
    432a:	ea cf       	rjmp	.-44     	; 0x4300 <__fp_szero>

0000432c <__mulsf3x>:
    432c:	c6 df       	rcall	.-116    	; 0x42ba <__fp_split3>
    432e:	a0 f3       	brcs	.-24     	; 0x4318 <__mulsf3+0x4>

00004330 <__mulsf3_pse>:
    4330:	95 9f       	mul	r25, r21
    4332:	d1 f3       	breq	.-12     	; 0x4328 <__mulsf3+0x14>
    4334:	95 0f       	add	r25, r21
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	55 1f       	adc	r21, r21
    433a:	62 9f       	mul	r22, r18
    433c:	f0 01       	movw	r30, r0
    433e:	72 9f       	mul	r23, r18
    4340:	bb 27       	eor	r27, r27
    4342:	f0 0d       	add	r31, r0
    4344:	b1 1d       	adc	r27, r1
    4346:	63 9f       	mul	r22, r19
    4348:	aa 27       	eor	r26, r26
    434a:	f0 0d       	add	r31, r0
    434c:	b1 1d       	adc	r27, r1
    434e:	aa 1f       	adc	r26, r26
    4350:	64 9f       	mul	r22, r20
    4352:	66 27       	eor	r22, r22
    4354:	b0 0d       	add	r27, r0
    4356:	a1 1d       	adc	r26, r1
    4358:	66 1f       	adc	r22, r22
    435a:	82 9f       	mul	r24, r18
    435c:	22 27       	eor	r18, r18
    435e:	b0 0d       	add	r27, r0
    4360:	a1 1d       	adc	r26, r1
    4362:	62 1f       	adc	r22, r18
    4364:	73 9f       	mul	r23, r19
    4366:	b0 0d       	add	r27, r0
    4368:	a1 1d       	adc	r26, r1
    436a:	62 1f       	adc	r22, r18
    436c:	83 9f       	mul	r24, r19
    436e:	a0 0d       	add	r26, r0
    4370:	61 1d       	adc	r22, r1
    4372:	22 1f       	adc	r18, r18
    4374:	74 9f       	mul	r23, r20
    4376:	33 27       	eor	r19, r19
    4378:	a0 0d       	add	r26, r0
    437a:	61 1d       	adc	r22, r1
    437c:	23 1f       	adc	r18, r19
    437e:	84 9f       	mul	r24, r20
    4380:	60 0d       	add	r22, r0
    4382:	21 1d       	adc	r18, r1
    4384:	82 2f       	mov	r24, r18
    4386:	76 2f       	mov	r23, r22
    4388:	6a 2f       	mov	r22, r26
    438a:	11 24       	eor	r1, r1
    438c:	9f 57       	subi	r25, 0x7F	; 127
    438e:	50 40       	sbci	r21, 0x00	; 0
    4390:	8a f0       	brmi	.+34     	; 0x43b4 <__mulsf3_pse+0x84>
    4392:	e1 f0       	breq	.+56     	; 0x43cc <__mulsf3_pse+0x9c>
    4394:	88 23       	and	r24, r24
    4396:	4a f0       	brmi	.+18     	; 0x43aa <__mulsf3_pse+0x7a>
    4398:	ee 0f       	add	r30, r30
    439a:	ff 1f       	adc	r31, r31
    439c:	bb 1f       	adc	r27, r27
    439e:	66 1f       	adc	r22, r22
    43a0:	77 1f       	adc	r23, r23
    43a2:	88 1f       	adc	r24, r24
    43a4:	91 50       	subi	r25, 0x01	; 1
    43a6:	50 40       	sbci	r21, 0x00	; 0
    43a8:	a9 f7       	brne	.-22     	; 0x4394 <__mulsf3_pse+0x64>
    43aa:	9e 3f       	cpi	r25, 0xFE	; 254
    43ac:	51 05       	cpc	r21, r1
    43ae:	70 f0       	brcs	.+28     	; 0x43cc <__mulsf3_pse+0x9c>
    43b0:	fe ce       	rjmp	.-516    	; 0x41ae <__fp_inf>
    43b2:	a6 cf       	rjmp	.-180    	; 0x4300 <__fp_szero>
    43b4:	5f 3f       	cpi	r21, 0xFF	; 255
    43b6:	ec f3       	brlt	.-6      	; 0x43b2 <__mulsf3_pse+0x82>
    43b8:	98 3e       	cpi	r25, 0xE8	; 232
    43ba:	dc f3       	brlt	.-10     	; 0x43b2 <__mulsf3_pse+0x82>
    43bc:	86 95       	lsr	r24
    43be:	77 95       	ror	r23
    43c0:	67 95       	ror	r22
    43c2:	b7 95       	ror	r27
    43c4:	f7 95       	ror	r31
    43c6:	e7 95       	ror	r30
    43c8:	9f 5f       	subi	r25, 0xFF	; 255
    43ca:	c1 f7       	brne	.-16     	; 0x43bc <__mulsf3_pse+0x8c>
    43cc:	fe 2b       	or	r31, r30
    43ce:	88 0f       	add	r24, r24
    43d0:	91 1d       	adc	r25, r1
    43d2:	96 95       	lsr	r25
    43d4:	87 95       	ror	r24
    43d6:	97 f9       	bld	r25, 7
    43d8:	08 95       	ret

000043da <sin>:
    43da:	9f 93       	push	r25
    43dc:	25 df       	rcall	.-438    	; 0x4228 <__fp_rempio2>
    43de:	0f 90       	pop	r0
    43e0:	07 fc       	sbrc	r0, 7
    43e2:	ee 5f       	subi	r30, 0xFE	; 254
    43e4:	59 cf       	rjmp	.-334    	; 0x4298 <__fp_sinus>

000043e6 <__fp_mpack>:
    43e6:	9f 3f       	cpi	r25, 0xFF	; 255
    43e8:	31 f0       	breq	.+12     	; 0x43f6 <__fp_mpack_finite+0xc>

000043ea <__fp_mpack_finite>:
    43ea:	91 50       	subi	r25, 0x01	; 1
    43ec:	20 f4       	brcc	.+8      	; 0x43f6 <__fp_mpack_finite+0xc>
    43ee:	87 95       	ror	r24
    43f0:	77 95       	ror	r23
    43f2:	67 95       	ror	r22
    43f4:	b7 95       	ror	r27
    43f6:	88 0f       	add	r24, r24
    43f8:	91 1d       	adc	r25, r1
    43fa:	96 95       	lsr	r25
    43fc:	87 95       	ror	r24
    43fe:	97 f9       	bld	r25, 7
    4400:	08 95       	ret

00004402 <__fp_powsodd>:
    4402:	9f 93       	push	r25
    4404:	8f 93       	push	r24
    4406:	7f 93       	push	r23
    4408:	6f 93       	push	r22
    440a:	ff 93       	push	r31
    440c:	ef 93       	push	r30
    440e:	9b 01       	movw	r18, r22
    4410:	ac 01       	movw	r20, r24
    4412:	80 df       	rcall	.-256    	; 0x4314 <__mulsf3>
    4414:	ef 91       	pop	r30
    4416:	ff 91       	pop	r31
    4418:	d3 de       	rcall	.-602    	; 0x41c0 <__fp_powser>
    441a:	2f 91       	pop	r18
    441c:	3f 91       	pop	r19
    441e:	4f 91       	pop	r20
    4420:	5f 91       	pop	r21
    4422:	78 cf       	rjmp	.-272    	; 0x4314 <__mulsf3>

00004424 <vfprintf>:
    4424:	2f 92       	push	r2
    4426:	3f 92       	push	r3
    4428:	4f 92       	push	r4
    442a:	5f 92       	push	r5
    442c:	6f 92       	push	r6
    442e:	7f 92       	push	r7
    4430:	8f 92       	push	r8
    4432:	9f 92       	push	r9
    4434:	af 92       	push	r10
    4436:	bf 92       	push	r11
    4438:	cf 92       	push	r12
    443a:	df 92       	push	r13
    443c:	ef 92       	push	r14
    443e:	ff 92       	push	r15
    4440:	0f 93       	push	r16
    4442:	1f 93       	push	r17
    4444:	cf 93       	push	r28
    4446:	df 93       	push	r29
    4448:	cd b7       	in	r28, 0x3d	; 61
    444a:	de b7       	in	r29, 0x3e	; 62
    444c:	63 97       	sbiw	r28, 0x13	; 19
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	de bf       	out	0x3e, r29	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	cd bf       	out	0x3d, r28	; 61
    4458:	6c 01       	movw	r12, r24
    445a:	4b 01       	movw	r8, r22
    445c:	2a 01       	movw	r4, r20
    445e:	fc 01       	movw	r30, r24
    4460:	17 82       	std	Z+7, r1	; 0x07
    4462:	16 82       	std	Z+6, r1	; 0x06
    4464:	83 81       	ldd	r24, Z+3	; 0x03
    4466:	81 ff       	sbrs	r24, 1
    4468:	29 c3       	rjmp	.+1618   	; 0x4abc <vfprintf+0x698>
    446a:	ae 01       	movw	r20, r28
    446c:	4f 5f       	subi	r20, 0xFF	; 255
    446e:	5f 4f       	sbci	r21, 0xFF	; 255
    4470:	3a 01       	movw	r6, r20
    4472:	f6 01       	movw	r30, r12
    4474:	93 81       	ldd	r25, Z+3	; 0x03
    4476:	f4 01       	movw	r30, r8
    4478:	93 fd       	sbrc	r25, 3
    447a:	85 91       	lpm	r24, Z+
    447c:	93 ff       	sbrs	r25, 3
    447e:	81 91       	ld	r24, Z+
    4480:	4f 01       	movw	r8, r30
    4482:	88 23       	and	r24, r24
    4484:	09 f4       	brne	.+2      	; 0x4488 <vfprintf+0x64>
    4486:	16 c3       	rjmp	.+1580   	; 0x4ab4 <vfprintf+0x690>
    4488:	85 32       	cpi	r24, 0x25	; 37
    448a:	39 f4       	brne	.+14     	; 0x449a <vfprintf+0x76>
    448c:	93 fd       	sbrc	r25, 3
    448e:	85 91       	lpm	r24, Z+
    4490:	93 ff       	sbrs	r25, 3
    4492:	81 91       	ld	r24, Z+
    4494:	4f 01       	movw	r8, r30
    4496:	85 32       	cpi	r24, 0x25	; 37
    4498:	31 f4       	brne	.+12     	; 0x44a6 <vfprintf+0x82>
    449a:	b6 01       	movw	r22, r12
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	90 d5       	rcall	.+2848   	; 0x4fc0 <fputc>
    44a0:	52 01       	movw	r10, r4
    44a2:	25 01       	movw	r4, r10
    44a4:	e6 cf       	rjmp	.-52     	; 0x4472 <vfprintf+0x4e>
    44a6:	10 e0       	ldi	r17, 0x00	; 0
    44a8:	f1 2c       	mov	r15, r1
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	20 32       	cpi	r18, 0x20	; 32
    44ae:	a0 f4       	brcc	.+40     	; 0x44d8 <vfprintf+0xb4>
    44b0:	8b 32       	cpi	r24, 0x2B	; 43
    44b2:	69 f0       	breq	.+26     	; 0x44ce <vfprintf+0xaa>
    44b4:	30 f4       	brcc	.+12     	; 0x44c2 <vfprintf+0x9e>
    44b6:	80 32       	cpi	r24, 0x20	; 32
    44b8:	59 f0       	breq	.+22     	; 0x44d0 <vfprintf+0xac>
    44ba:	83 32       	cpi	r24, 0x23	; 35
    44bc:	69 f4       	brne	.+26     	; 0x44d8 <vfprintf+0xb4>
    44be:	20 61       	ori	r18, 0x10	; 16
    44c0:	2c c0       	rjmp	.+88     	; 0x451a <vfprintf+0xf6>
    44c2:	8d 32       	cpi	r24, 0x2D	; 45
    44c4:	39 f0       	breq	.+14     	; 0x44d4 <vfprintf+0xb0>
    44c6:	80 33       	cpi	r24, 0x30	; 48
    44c8:	39 f4       	brne	.+14     	; 0x44d8 <vfprintf+0xb4>
    44ca:	21 60       	ori	r18, 0x01	; 1
    44cc:	26 c0       	rjmp	.+76     	; 0x451a <vfprintf+0xf6>
    44ce:	22 60       	ori	r18, 0x02	; 2
    44d0:	24 60       	ori	r18, 0x04	; 4
    44d2:	23 c0       	rjmp	.+70     	; 0x451a <vfprintf+0xf6>
    44d4:	28 60       	ori	r18, 0x08	; 8
    44d6:	21 c0       	rjmp	.+66     	; 0x451a <vfprintf+0xf6>
    44d8:	27 fd       	sbrc	r18, 7
    44da:	27 c0       	rjmp	.+78     	; 0x452a <vfprintf+0x106>
    44dc:	30 ed       	ldi	r19, 0xD0	; 208
    44de:	38 0f       	add	r19, r24
    44e0:	3a 30       	cpi	r19, 0x0A	; 10
    44e2:	78 f4       	brcc	.+30     	; 0x4502 <vfprintf+0xde>
    44e4:	26 ff       	sbrs	r18, 6
    44e6:	06 c0       	rjmp	.+12     	; 0x44f4 <vfprintf+0xd0>
    44e8:	fa e0       	ldi	r31, 0x0A	; 10
    44ea:	1f 9f       	mul	r17, r31
    44ec:	30 0d       	add	r19, r0
    44ee:	11 24       	eor	r1, r1
    44f0:	13 2f       	mov	r17, r19
    44f2:	13 c0       	rjmp	.+38     	; 0x451a <vfprintf+0xf6>
    44f4:	4a e0       	ldi	r20, 0x0A	; 10
    44f6:	f4 9e       	mul	r15, r20
    44f8:	30 0d       	add	r19, r0
    44fa:	11 24       	eor	r1, r1
    44fc:	f3 2e       	mov	r15, r19
    44fe:	20 62       	ori	r18, 0x20	; 32
    4500:	0c c0       	rjmp	.+24     	; 0x451a <vfprintf+0xf6>
    4502:	8e 32       	cpi	r24, 0x2E	; 46
    4504:	21 f4       	brne	.+8      	; 0x450e <vfprintf+0xea>
    4506:	26 fd       	sbrc	r18, 6
    4508:	d5 c2       	rjmp	.+1450   	; 0x4ab4 <vfprintf+0x690>
    450a:	20 64       	ori	r18, 0x40	; 64
    450c:	06 c0       	rjmp	.+12     	; 0x451a <vfprintf+0xf6>
    450e:	8c 36       	cpi	r24, 0x6C	; 108
    4510:	11 f4       	brne	.+4      	; 0x4516 <vfprintf+0xf2>
    4512:	20 68       	ori	r18, 0x80	; 128
    4514:	02 c0       	rjmp	.+4      	; 0x451a <vfprintf+0xf6>
    4516:	88 36       	cpi	r24, 0x68	; 104
    4518:	41 f4       	brne	.+16     	; 0x452a <vfprintf+0x106>
    451a:	f4 01       	movw	r30, r8
    451c:	93 fd       	sbrc	r25, 3
    451e:	85 91       	lpm	r24, Z+
    4520:	93 ff       	sbrs	r25, 3
    4522:	81 91       	ld	r24, Z+
    4524:	4f 01       	movw	r8, r30
    4526:	81 11       	cpse	r24, r1
    4528:	c1 cf       	rjmp	.-126    	; 0x44ac <vfprintf+0x88>
    452a:	9b eb       	ldi	r25, 0xBB	; 187
    452c:	98 0f       	add	r25, r24
    452e:	93 30       	cpi	r25, 0x03	; 3
    4530:	18 f4       	brcc	.+6      	; 0x4538 <vfprintf+0x114>
    4532:	20 61       	ori	r18, 0x10	; 16
    4534:	80 5e       	subi	r24, 0xE0	; 224
    4536:	06 c0       	rjmp	.+12     	; 0x4544 <vfprintf+0x120>
    4538:	9b e9       	ldi	r25, 0x9B	; 155
    453a:	98 0f       	add	r25, r24
    453c:	93 30       	cpi	r25, 0x03	; 3
    453e:	08 f0       	brcs	.+2      	; 0x4542 <vfprintf+0x11e>
    4540:	64 c1       	rjmp	.+712    	; 0x480a <vfprintf+0x3e6>
    4542:	2f 7e       	andi	r18, 0xEF	; 239
    4544:	26 ff       	sbrs	r18, 6
    4546:	16 e0       	ldi	r17, 0x06	; 6
    4548:	2f 73       	andi	r18, 0x3F	; 63
    454a:	32 2e       	mov	r3, r18
    454c:	85 36       	cpi	r24, 0x65	; 101
    454e:	19 f4       	brne	.+6      	; 0x4556 <vfprintf+0x132>
    4550:	20 64       	ori	r18, 0x40	; 64
    4552:	32 2e       	mov	r3, r18
    4554:	08 c0       	rjmp	.+16     	; 0x4566 <vfprintf+0x142>
    4556:	86 36       	cpi	r24, 0x66	; 102
    4558:	21 f4       	brne	.+8      	; 0x4562 <vfprintf+0x13e>
    455a:	f2 2f       	mov	r31, r18
    455c:	f0 68       	ori	r31, 0x80	; 128
    455e:	3f 2e       	mov	r3, r31
    4560:	02 c0       	rjmp	.+4      	; 0x4566 <vfprintf+0x142>
    4562:	11 11       	cpse	r17, r1
    4564:	11 50       	subi	r17, 0x01	; 1
    4566:	37 fe       	sbrs	r3, 7
    4568:	07 c0       	rjmp	.+14     	; 0x4578 <vfprintf+0x154>
    456a:	1c 33       	cpi	r17, 0x3C	; 60
    456c:	50 f4       	brcc	.+20     	; 0x4582 <vfprintf+0x15e>
    456e:	ee 24       	eor	r14, r14
    4570:	e3 94       	inc	r14
    4572:	e1 0e       	add	r14, r17
    4574:	27 e0       	ldi	r18, 0x07	; 7
    4576:	0b c0       	rjmp	.+22     	; 0x458e <vfprintf+0x16a>
    4578:	18 30       	cpi	r17, 0x08	; 8
    457a:	38 f0       	brcs	.+14     	; 0x458a <vfprintf+0x166>
    457c:	27 e0       	ldi	r18, 0x07	; 7
    457e:	17 e0       	ldi	r17, 0x07	; 7
    4580:	05 c0       	rjmp	.+10     	; 0x458c <vfprintf+0x168>
    4582:	27 e0       	ldi	r18, 0x07	; 7
    4584:	4c e3       	ldi	r20, 0x3C	; 60
    4586:	e4 2e       	mov	r14, r20
    4588:	02 c0       	rjmp	.+4      	; 0x458e <vfprintf+0x16a>
    458a:	21 2f       	mov	r18, r17
    458c:	e1 2c       	mov	r14, r1
    458e:	52 01       	movw	r10, r4
    4590:	44 e0       	ldi	r20, 0x04	; 4
    4592:	a4 0e       	add	r10, r20
    4594:	b1 1c       	adc	r11, r1
    4596:	f2 01       	movw	r30, r4
    4598:	60 81       	ld	r22, Z
    459a:	71 81       	ldd	r23, Z+1	; 0x01
    459c:	82 81       	ldd	r24, Z+2	; 0x02
    459e:	93 81       	ldd	r25, Z+3	; 0x03
    45a0:	0e 2d       	mov	r16, r14
    45a2:	a3 01       	movw	r20, r6
    45a4:	1f d4       	rcall	.+2110   	; 0x4de4 <__ftoa_engine>
    45a6:	2c 01       	movw	r4, r24
    45a8:	09 81       	ldd	r16, Y+1	; 0x01
    45aa:	00 ff       	sbrs	r16, 0
    45ac:	02 c0       	rjmp	.+4      	; 0x45b2 <vfprintf+0x18e>
    45ae:	03 ff       	sbrs	r16, 3
    45b0:	07 c0       	rjmp	.+14     	; 0x45c0 <vfprintf+0x19c>
    45b2:	31 fc       	sbrc	r3, 1
    45b4:	08 c0       	rjmp	.+16     	; 0x45c6 <vfprintf+0x1a2>
    45b6:	32 fe       	sbrs	r3, 2
    45b8:	09 c0       	rjmp	.+18     	; 0x45cc <vfprintf+0x1a8>
    45ba:	30 e2       	ldi	r19, 0x20	; 32
    45bc:	23 2e       	mov	r2, r19
    45be:	07 c0       	rjmp	.+14     	; 0x45ce <vfprintf+0x1aa>
    45c0:	2d e2       	ldi	r18, 0x2D	; 45
    45c2:	22 2e       	mov	r2, r18
    45c4:	04 c0       	rjmp	.+8      	; 0x45ce <vfprintf+0x1aa>
    45c6:	9b e2       	ldi	r25, 0x2B	; 43
    45c8:	29 2e       	mov	r2, r25
    45ca:	01 c0       	rjmp	.+2      	; 0x45ce <vfprintf+0x1aa>
    45cc:	21 2c       	mov	r2, r1
    45ce:	80 2f       	mov	r24, r16
    45d0:	8c 70       	andi	r24, 0x0C	; 12
    45d2:	19 f0       	breq	.+6      	; 0x45da <vfprintf+0x1b6>
    45d4:	21 10       	cpse	r2, r1
    45d6:	51 c2       	rjmp	.+1186   	; 0x4a7a <vfprintf+0x656>
    45d8:	8d c2       	rjmp	.+1306   	; 0x4af4 <vfprintf+0x6d0>
    45da:	37 fe       	sbrs	r3, 7
    45dc:	0f c0       	rjmp	.+30     	; 0x45fc <vfprintf+0x1d8>
    45de:	e4 0c       	add	r14, r4
    45e0:	04 ff       	sbrs	r16, 4
    45e2:	04 c0       	rjmp	.+8      	; 0x45ec <vfprintf+0x1c8>
    45e4:	8a 81       	ldd	r24, Y+2	; 0x02
    45e6:	81 33       	cpi	r24, 0x31	; 49
    45e8:	09 f4       	brne	.+2      	; 0x45ec <vfprintf+0x1c8>
    45ea:	ea 94       	dec	r14
    45ec:	1e 14       	cp	r1, r14
    45ee:	74 f5       	brge	.+92     	; 0x464c <vfprintf+0x228>
    45f0:	f8 e0       	ldi	r31, 0x08	; 8
    45f2:	fe 15       	cp	r31, r14
    45f4:	78 f5       	brcc	.+94     	; 0x4654 <vfprintf+0x230>
    45f6:	88 e0       	ldi	r24, 0x08	; 8
    45f8:	e8 2e       	mov	r14, r24
    45fa:	2c c0       	rjmp	.+88     	; 0x4654 <vfprintf+0x230>
    45fc:	36 fc       	sbrc	r3, 6
    45fe:	2a c0       	rjmp	.+84     	; 0x4654 <vfprintf+0x230>
    4600:	81 2f       	mov	r24, r17
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	84 15       	cp	r24, r4
    4606:	95 05       	cpc	r25, r5
    4608:	9c f0       	brlt	.+38     	; 0x4630 <vfprintf+0x20c>
    460a:	2c ef       	ldi	r18, 0xFC	; 252
    460c:	42 16       	cp	r4, r18
    460e:	2f ef       	ldi	r18, 0xFF	; 255
    4610:	52 06       	cpc	r5, r18
    4612:	74 f0       	brlt	.+28     	; 0x4630 <vfprintf+0x20c>
    4614:	43 2d       	mov	r20, r3
    4616:	40 68       	ori	r20, 0x80	; 128
    4618:	34 2e       	mov	r3, r20
    461a:	0a c0       	rjmp	.+20     	; 0x4630 <vfprintf+0x20c>
    461c:	e2 e0       	ldi	r30, 0x02	; 2
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	ec 0f       	add	r30, r28
    4622:	fd 1f       	adc	r31, r29
    4624:	e1 0f       	add	r30, r17
    4626:	f1 1d       	adc	r31, r1
    4628:	80 81       	ld	r24, Z
    462a:	80 33       	cpi	r24, 0x30	; 48
    462c:	19 f4       	brne	.+6      	; 0x4634 <vfprintf+0x210>
    462e:	11 50       	subi	r17, 0x01	; 1
    4630:	11 11       	cpse	r17, r1
    4632:	f4 cf       	rjmp	.-24     	; 0x461c <vfprintf+0x1f8>
    4634:	37 fe       	sbrs	r3, 7
    4636:	0e c0       	rjmp	.+28     	; 0x4654 <vfprintf+0x230>
    4638:	ee 24       	eor	r14, r14
    463a:	e3 94       	inc	r14
    463c:	e1 0e       	add	r14, r17
    463e:	81 2f       	mov	r24, r17
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	48 16       	cp	r4, r24
    4644:	59 06       	cpc	r5, r25
    4646:	2c f4       	brge	.+10     	; 0x4652 <vfprintf+0x22e>
    4648:	14 19       	sub	r17, r4
    464a:	04 c0       	rjmp	.+8      	; 0x4654 <vfprintf+0x230>
    464c:	ee 24       	eor	r14, r14
    464e:	e3 94       	inc	r14
    4650:	01 c0       	rjmp	.+2      	; 0x4654 <vfprintf+0x230>
    4652:	10 e0       	ldi	r17, 0x00	; 0
    4654:	37 fe       	sbrs	r3, 7
    4656:	06 c0       	rjmp	.+12     	; 0x4664 <vfprintf+0x240>
    4658:	14 14       	cp	r1, r4
    465a:	15 04       	cpc	r1, r5
    465c:	34 f4       	brge	.+12     	; 0x466a <vfprintf+0x246>
    465e:	c2 01       	movw	r24, r4
    4660:	01 96       	adiw	r24, 0x01	; 1
    4662:	05 c0       	rjmp	.+10     	; 0x466e <vfprintf+0x24a>
    4664:	85 e0       	ldi	r24, 0x05	; 5
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	02 c0       	rjmp	.+4      	; 0x466e <vfprintf+0x24a>
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	21 10       	cpse	r2, r1
    4670:	01 96       	adiw	r24, 0x01	; 1
    4672:	11 23       	and	r17, r17
    4674:	31 f0       	breq	.+12     	; 0x4682 <vfprintf+0x25e>
    4676:	21 2f       	mov	r18, r17
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	2f 5f       	subi	r18, 0xFF	; 255
    467c:	3f 4f       	sbci	r19, 0xFF	; 255
    467e:	82 0f       	add	r24, r18
    4680:	93 1f       	adc	r25, r19
    4682:	2f 2d       	mov	r18, r15
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	82 17       	cp	r24, r18
    4688:	93 07       	cpc	r25, r19
    468a:	14 f4       	brge	.+4      	; 0x4690 <vfprintf+0x26c>
    468c:	f8 1a       	sub	r15, r24
    468e:	01 c0       	rjmp	.+2      	; 0x4692 <vfprintf+0x26e>
    4690:	f1 2c       	mov	r15, r1
    4692:	83 2d       	mov	r24, r3
    4694:	89 70       	andi	r24, 0x09	; 9
    4696:	41 f4       	brne	.+16     	; 0x46a8 <vfprintf+0x284>
    4698:	ff 20       	and	r15, r15
    469a:	31 f0       	breq	.+12     	; 0x46a8 <vfprintf+0x284>
    469c:	b6 01       	movw	r22, r12
    469e:	80 e2       	ldi	r24, 0x20	; 32
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	8e d4       	rcall	.+2332   	; 0x4fc0 <fputc>
    46a4:	fa 94       	dec	r15
    46a6:	f8 cf       	rjmp	.-16     	; 0x4698 <vfprintf+0x274>
    46a8:	22 20       	and	r2, r2
    46aa:	21 f0       	breq	.+8      	; 0x46b4 <vfprintf+0x290>
    46ac:	b6 01       	movw	r22, r12
    46ae:	82 2d       	mov	r24, r2
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	86 d4       	rcall	.+2316   	; 0x4fc0 <fputc>
    46b4:	33 fc       	sbrc	r3, 3
    46b6:	08 c0       	rjmp	.+16     	; 0x46c8 <vfprintf+0x2a4>
    46b8:	ff 20       	and	r15, r15
    46ba:	31 f0       	breq	.+12     	; 0x46c8 <vfprintf+0x2a4>
    46bc:	b6 01       	movw	r22, r12
    46be:	80 e3       	ldi	r24, 0x30	; 48
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	7e d4       	rcall	.+2300   	; 0x4fc0 <fputc>
    46c4:	fa 94       	dec	r15
    46c6:	f8 cf       	rjmp	.-16     	; 0x46b8 <vfprintf+0x294>
    46c8:	37 fe       	sbrs	r3, 7
    46ca:	58 c0       	rjmp	.+176    	; 0x477c <vfprintf+0x358>
    46cc:	94 2d       	mov	r25, r4
    46ce:	85 2d       	mov	r24, r5
    46d0:	57 fe       	sbrs	r5, 7
    46d2:	02 c0       	rjmp	.+4      	; 0x46d8 <vfprintf+0x2b4>
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	29 2e       	mov	r2, r25
    46da:	38 2e       	mov	r3, r24
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	a2 01       	movw	r20, r4
    46e2:	4e 19       	sub	r20, r14
    46e4:	51 09       	sbc	r21, r1
    46e6:	5d 87       	std	Y+13, r21	; 0x0d
    46e8:	4c 87       	std	Y+12, r20	; 0x0c
    46ea:	a2 01       	movw	r20, r4
    46ec:	42 19       	sub	r20, r2
    46ee:	53 09       	sbc	r21, r3
    46f0:	5f 87       	std	Y+15, r21	; 0x0f
    46f2:	4e 87       	std	Y+14, r20	; 0x0e
    46f4:	61 2f       	mov	r22, r17
    46f6:	70 e0       	ldi	r23, 0x00	; 0
    46f8:	44 27       	eor	r20, r20
    46fa:	55 27       	eor	r21, r21
    46fc:	46 1b       	sub	r20, r22
    46fe:	57 0b       	sbc	r21, r23
    4700:	59 8b       	std	Y+17, r21	; 0x11
    4702:	48 8b       	std	Y+16, r20	; 0x10
    4704:	5f ef       	ldi	r21, 0xFF	; 255
    4706:	25 16       	cp	r2, r21
    4708:	35 06       	cpc	r3, r21
    470a:	41 f4       	brne	.+16     	; 0x471c <vfprintf+0x2f8>
    470c:	b6 01       	movw	r22, r12
    470e:	8e e2       	ldi	r24, 0x2E	; 46
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	2a 8b       	std	Y+18, r18	; 0x12
    4714:	3b 8b       	std	Y+19, r19	; 0x13
    4716:	54 d4       	rcall	.+2216   	; 0x4fc0 <fputc>
    4718:	3b 89       	ldd	r19, Y+19	; 0x13
    471a:	2a 89       	ldd	r18, Y+18	; 0x12
    471c:	42 14       	cp	r4, r2
    471e:	53 04       	cpc	r5, r3
    4720:	6c f0       	brlt	.+26     	; 0x473c <vfprintf+0x318>
    4722:	4c 85       	ldd	r20, Y+12	; 0x0c
    4724:	5d 85       	ldd	r21, Y+13	; 0x0d
    4726:	42 15       	cp	r20, r2
    4728:	53 05       	cpc	r21, r3
    472a:	44 f4       	brge	.+16     	; 0x473c <vfprintf+0x318>
    472c:	ee 85       	ldd	r30, Y+14	; 0x0e
    472e:	ff 85       	ldd	r31, Y+15	; 0x0f
    4730:	e2 0f       	add	r30, r18
    4732:	f3 1f       	adc	r31, r19
    4734:	e6 0d       	add	r30, r6
    4736:	f7 1d       	adc	r31, r7
    4738:	81 81       	ldd	r24, Z+1	; 0x01
    473a:	01 c0       	rjmp	.+2      	; 0x473e <vfprintf+0x31a>
    473c:	80 e3       	ldi	r24, 0x30	; 48
    473e:	51 e0       	ldi	r21, 0x01	; 1
    4740:	25 1a       	sub	r2, r21
    4742:	31 08       	sbc	r3, r1
    4744:	2f 5f       	subi	r18, 0xFF	; 255
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	48 89       	ldd	r20, Y+16	; 0x10
    474a:	59 89       	ldd	r21, Y+17	; 0x11
    474c:	24 16       	cp	r2, r20
    474e:	35 06       	cpc	r3, r21
    4750:	44 f0       	brlt	.+16     	; 0x4762 <vfprintf+0x33e>
    4752:	b6 01       	movw	r22, r12
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	2a 8b       	std	Y+18, r18	; 0x12
    4758:	3b 8b       	std	Y+19, r19	; 0x13
    475a:	32 d4       	rcall	.+2148   	; 0x4fc0 <fputc>
    475c:	2a 89       	ldd	r18, Y+18	; 0x12
    475e:	3b 89       	ldd	r19, Y+19	; 0x13
    4760:	d1 cf       	rjmp	.-94     	; 0x4704 <vfprintf+0x2e0>
    4762:	24 14       	cp	r2, r4
    4764:	35 04       	cpc	r3, r5
    4766:	39 f4       	brne	.+14     	; 0x4776 <vfprintf+0x352>
    4768:	9a 81       	ldd	r25, Y+2	; 0x02
    476a:	96 33       	cpi	r25, 0x36	; 54
    476c:	18 f4       	brcc	.+6      	; 0x4774 <vfprintf+0x350>
    476e:	95 33       	cpi	r25, 0x35	; 53
    4770:	11 f4       	brne	.+4      	; 0x4776 <vfprintf+0x352>
    4772:	04 ff       	sbrs	r16, 4
    4774:	81 e3       	ldi	r24, 0x31	; 49
    4776:	b6 01       	movw	r22, r12
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	45 c0       	rjmp	.+138    	; 0x4806 <vfprintf+0x3e2>
    477c:	8a 81       	ldd	r24, Y+2	; 0x02
    477e:	81 33       	cpi	r24, 0x31	; 49
    4780:	09 f0       	breq	.+2      	; 0x4784 <vfprintf+0x360>
    4782:	0f 7e       	andi	r16, 0xEF	; 239
    4784:	b6 01       	movw	r22, r12
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	1b d4       	rcall	.+2102   	; 0x4fc0 <fputc>
    478a:	11 11       	cpse	r17, r1
    478c:	05 c0       	rjmp	.+10     	; 0x4798 <vfprintf+0x374>
    478e:	34 fc       	sbrc	r3, 4
    4790:	16 c0       	rjmp	.+44     	; 0x47be <vfprintf+0x39a>
    4792:	85 e6       	ldi	r24, 0x65	; 101
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	15 c0       	rjmp	.+42     	; 0x47c2 <vfprintf+0x39e>
    4798:	b6 01       	movw	r22, r12
    479a:	8e e2       	ldi	r24, 0x2E	; 46
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	10 d4       	rcall	.+2080   	; 0x4fc0 <fputc>
    47a0:	82 e0       	ldi	r24, 0x02	; 2
    47a2:	ee 24       	eor	r14, r14
    47a4:	e3 94       	inc	r14
    47a6:	e8 0e       	add	r14, r24
    47a8:	f3 01       	movw	r30, r6
    47aa:	e8 0f       	add	r30, r24
    47ac:	f1 1d       	adc	r31, r1
    47ae:	80 81       	ld	r24, Z
    47b0:	b6 01       	movw	r22, r12
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	05 d4       	rcall	.+2058   	; 0x4fc0 <fputc>
    47b6:	11 50       	subi	r17, 0x01	; 1
    47b8:	8e 2d       	mov	r24, r14
    47ba:	99 f7       	brne	.-26     	; 0x47a2 <vfprintf+0x37e>
    47bc:	e8 cf       	rjmp	.-48     	; 0x478e <vfprintf+0x36a>
    47be:	85 e4       	ldi	r24, 0x45	; 69
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	b6 01       	movw	r22, r12
    47c4:	fd d3       	rcall	.+2042   	; 0x4fc0 <fputc>
    47c6:	57 fc       	sbrc	r5, 7
    47c8:	05 c0       	rjmp	.+10     	; 0x47d4 <vfprintf+0x3b0>
    47ca:	41 14       	cp	r4, r1
    47cc:	51 04       	cpc	r5, r1
    47ce:	39 f4       	brne	.+14     	; 0x47de <vfprintf+0x3ba>
    47d0:	04 ff       	sbrs	r16, 4
    47d2:	05 c0       	rjmp	.+10     	; 0x47de <vfprintf+0x3ba>
    47d4:	51 94       	neg	r5
    47d6:	41 94       	neg	r4
    47d8:	51 08       	sbc	r5, r1
    47da:	8d e2       	ldi	r24, 0x2D	; 45
    47dc:	01 c0       	rjmp	.+2      	; 0x47e0 <vfprintf+0x3bc>
    47de:	8b e2       	ldi	r24, 0x2B	; 43
    47e0:	b6 01       	movw	r22, r12
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	ed d3       	rcall	.+2010   	; 0x4fc0 <fputc>
    47e6:	80 e3       	ldi	r24, 0x30	; 48
    47e8:	9a e0       	ldi	r25, 0x0A	; 10
    47ea:	49 16       	cp	r4, r25
    47ec:	51 04       	cpc	r5, r1
    47ee:	2c f0       	brlt	.+10     	; 0x47fa <vfprintf+0x3d6>
    47f0:	8f 5f       	subi	r24, 0xFF	; 255
    47f2:	5a e0       	ldi	r21, 0x0A	; 10
    47f4:	45 1a       	sub	r4, r21
    47f6:	51 08       	sbc	r5, r1
    47f8:	f7 cf       	rjmp	.-18     	; 0x47e8 <vfprintf+0x3c4>
    47fa:	b6 01       	movw	r22, r12
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	e0 d3       	rcall	.+1984   	; 0x4fc0 <fputc>
    4800:	b6 01       	movw	r22, r12
    4802:	c2 01       	movw	r24, r4
    4804:	c0 96       	adiw	r24, 0x30	; 48
    4806:	dc d3       	rcall	.+1976   	; 0x4fc0 <fputc>
    4808:	4c c1       	rjmp	.+664    	; 0x4aa2 <vfprintf+0x67e>
    480a:	83 36       	cpi	r24, 0x63	; 99
    480c:	31 f0       	breq	.+12     	; 0x481a <vfprintf+0x3f6>
    480e:	83 37       	cpi	r24, 0x73	; 115
    4810:	79 f0       	breq	.+30     	; 0x4830 <vfprintf+0x40c>
    4812:	83 35       	cpi	r24, 0x53	; 83
    4814:	09 f0       	breq	.+2      	; 0x4818 <vfprintf+0x3f4>
    4816:	54 c0       	rjmp	.+168    	; 0x48c0 <vfprintf+0x49c>
    4818:	20 c0       	rjmp	.+64     	; 0x485a <vfprintf+0x436>
    481a:	52 01       	movw	r10, r4
    481c:	e2 e0       	ldi	r30, 0x02	; 2
    481e:	ae 0e       	add	r10, r30
    4820:	b1 1c       	adc	r11, r1
    4822:	f2 01       	movw	r30, r4
    4824:	80 81       	ld	r24, Z
    4826:	89 83       	std	Y+1, r24	; 0x01
    4828:	01 e0       	ldi	r16, 0x01	; 1
    482a:	10 e0       	ldi	r17, 0x00	; 0
    482c:	23 01       	movw	r4, r6
    482e:	13 c0       	rjmp	.+38     	; 0x4856 <vfprintf+0x432>
    4830:	52 01       	movw	r10, r4
    4832:	f2 e0       	ldi	r31, 0x02	; 2
    4834:	af 0e       	add	r10, r31
    4836:	b1 1c       	adc	r11, r1
    4838:	f2 01       	movw	r30, r4
    483a:	40 80       	ld	r4, Z
    483c:	51 80       	ldd	r5, Z+1	; 0x01
    483e:	26 ff       	sbrs	r18, 6
    4840:	03 c0       	rjmp	.+6      	; 0x4848 <vfprintf+0x424>
    4842:	61 2f       	mov	r22, r17
    4844:	70 e0       	ldi	r23, 0x00	; 0
    4846:	02 c0       	rjmp	.+4      	; 0x484c <vfprintf+0x428>
    4848:	6f ef       	ldi	r22, 0xFF	; 255
    484a:	7f ef       	ldi	r23, 0xFF	; 255
    484c:	c2 01       	movw	r24, r4
    484e:	2a 8b       	std	Y+18, r18	; 0x12
    4850:	ac d3       	rcall	.+1880   	; 0x4faa <strnlen>
    4852:	8c 01       	movw	r16, r24
    4854:	2a 89       	ldd	r18, Y+18	; 0x12
    4856:	2f 77       	andi	r18, 0x7F	; 127
    4858:	14 c0       	rjmp	.+40     	; 0x4882 <vfprintf+0x45e>
    485a:	52 01       	movw	r10, r4
    485c:	f2 e0       	ldi	r31, 0x02	; 2
    485e:	af 0e       	add	r10, r31
    4860:	b1 1c       	adc	r11, r1
    4862:	f2 01       	movw	r30, r4
    4864:	40 80       	ld	r4, Z
    4866:	51 80       	ldd	r5, Z+1	; 0x01
    4868:	26 ff       	sbrs	r18, 6
    486a:	03 c0       	rjmp	.+6      	; 0x4872 <vfprintf+0x44e>
    486c:	61 2f       	mov	r22, r17
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	02 c0       	rjmp	.+4      	; 0x4876 <vfprintf+0x452>
    4872:	6f ef       	ldi	r22, 0xFF	; 255
    4874:	7f ef       	ldi	r23, 0xFF	; 255
    4876:	c2 01       	movw	r24, r4
    4878:	2a 8b       	std	Y+18, r18	; 0x12
    487a:	8c d3       	rcall	.+1816   	; 0x4f94 <strnlen_P>
    487c:	8c 01       	movw	r16, r24
    487e:	2a 89       	ldd	r18, Y+18	; 0x12
    4880:	20 68       	ori	r18, 0x80	; 128
    4882:	32 2e       	mov	r3, r18
    4884:	23 fd       	sbrc	r18, 3
    4886:	18 c0       	rjmp	.+48     	; 0x48b8 <vfprintf+0x494>
    4888:	8f 2d       	mov	r24, r15
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	08 17       	cp	r16, r24
    488e:	19 07       	cpc	r17, r25
    4890:	98 f4       	brcc	.+38     	; 0x48b8 <vfprintf+0x494>
    4892:	b6 01       	movw	r22, r12
    4894:	80 e2       	ldi	r24, 0x20	; 32
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	93 d3       	rcall	.+1830   	; 0x4fc0 <fputc>
    489a:	fa 94       	dec	r15
    489c:	f5 cf       	rjmp	.-22     	; 0x4888 <vfprintf+0x464>
    489e:	f2 01       	movw	r30, r4
    48a0:	37 fc       	sbrc	r3, 7
    48a2:	85 91       	lpm	r24, Z+
    48a4:	37 fe       	sbrs	r3, 7
    48a6:	81 91       	ld	r24, Z+
    48a8:	2f 01       	movw	r4, r30
    48aa:	b6 01       	movw	r22, r12
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	88 d3       	rcall	.+1808   	; 0x4fc0 <fputc>
    48b0:	f1 10       	cpse	r15, r1
    48b2:	fa 94       	dec	r15
    48b4:	01 50       	subi	r16, 0x01	; 1
    48b6:	11 09       	sbc	r17, r1
    48b8:	01 15       	cp	r16, r1
    48ba:	11 05       	cpc	r17, r1
    48bc:	81 f7       	brne	.-32     	; 0x489e <vfprintf+0x47a>
    48be:	f1 c0       	rjmp	.+482    	; 0x4aa2 <vfprintf+0x67e>
    48c0:	84 36       	cpi	r24, 0x64	; 100
    48c2:	11 f0       	breq	.+4      	; 0x48c8 <vfprintf+0x4a4>
    48c4:	89 36       	cpi	r24, 0x69	; 105
    48c6:	51 f5       	brne	.+84     	; 0x491c <vfprintf+0x4f8>
    48c8:	52 01       	movw	r10, r4
    48ca:	27 ff       	sbrs	r18, 7
    48cc:	09 c0       	rjmp	.+18     	; 0x48e0 <vfprintf+0x4bc>
    48ce:	f4 e0       	ldi	r31, 0x04	; 4
    48d0:	af 0e       	add	r10, r31
    48d2:	b1 1c       	adc	r11, r1
    48d4:	f2 01       	movw	r30, r4
    48d6:	60 81       	ld	r22, Z
    48d8:	71 81       	ldd	r23, Z+1	; 0x01
    48da:	82 81       	ldd	r24, Z+2	; 0x02
    48dc:	93 81       	ldd	r25, Z+3	; 0x03
    48de:	0a c0       	rjmp	.+20     	; 0x48f4 <vfprintf+0x4d0>
    48e0:	f2 e0       	ldi	r31, 0x02	; 2
    48e2:	af 0e       	add	r10, r31
    48e4:	b1 1c       	adc	r11, r1
    48e6:	f2 01       	movw	r30, r4
    48e8:	60 81       	ld	r22, Z
    48ea:	71 81       	ldd	r23, Z+1	; 0x01
    48ec:	07 2e       	mov	r0, r23
    48ee:	00 0c       	add	r0, r0
    48f0:	88 0b       	sbc	r24, r24
    48f2:	99 0b       	sbc	r25, r25
    48f4:	2f 76       	andi	r18, 0x6F	; 111
    48f6:	32 2e       	mov	r3, r18
    48f8:	97 ff       	sbrs	r25, 7
    48fa:	09 c0       	rjmp	.+18     	; 0x490e <vfprintf+0x4ea>
    48fc:	90 95       	com	r25
    48fe:	80 95       	com	r24
    4900:	70 95       	com	r23
    4902:	61 95       	neg	r22
    4904:	7f 4f       	sbci	r23, 0xFF	; 255
    4906:	8f 4f       	sbci	r24, 0xFF	; 255
    4908:	9f 4f       	sbci	r25, 0xFF	; 255
    490a:	20 68       	ori	r18, 0x80	; 128
    490c:	32 2e       	mov	r3, r18
    490e:	2a e0       	ldi	r18, 0x0A	; 10
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	a3 01       	movw	r20, r6
    4914:	bc d3       	rcall	.+1912   	; 0x508e <__ultoa_invert>
    4916:	e8 2e       	mov	r14, r24
    4918:	e6 18       	sub	r14, r6
    491a:	3e c0       	rjmp	.+124    	; 0x4998 <vfprintf+0x574>
    491c:	02 2f       	mov	r16, r18
    491e:	85 37       	cpi	r24, 0x75	; 117
    4920:	21 f4       	brne	.+8      	; 0x492a <vfprintf+0x506>
    4922:	0f 7e       	andi	r16, 0xEF	; 239
    4924:	2a e0       	ldi	r18, 0x0A	; 10
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	1d c0       	rjmp	.+58     	; 0x4964 <vfprintf+0x540>
    492a:	09 7f       	andi	r16, 0xF9	; 249
    492c:	8f 36       	cpi	r24, 0x6F	; 111
    492e:	91 f0       	breq	.+36     	; 0x4954 <vfprintf+0x530>
    4930:	18 f4       	brcc	.+6      	; 0x4938 <vfprintf+0x514>
    4932:	88 35       	cpi	r24, 0x58	; 88
    4934:	59 f0       	breq	.+22     	; 0x494c <vfprintf+0x528>
    4936:	be c0       	rjmp	.+380    	; 0x4ab4 <vfprintf+0x690>
    4938:	80 37       	cpi	r24, 0x70	; 112
    493a:	19 f0       	breq	.+6      	; 0x4942 <vfprintf+0x51e>
    493c:	88 37       	cpi	r24, 0x78	; 120
    493e:	11 f0       	breq	.+4      	; 0x4944 <vfprintf+0x520>
    4940:	b9 c0       	rjmp	.+370    	; 0x4ab4 <vfprintf+0x690>
    4942:	00 61       	ori	r16, 0x10	; 16
    4944:	04 ff       	sbrs	r16, 4
    4946:	09 c0       	rjmp	.+18     	; 0x495a <vfprintf+0x536>
    4948:	04 60       	ori	r16, 0x04	; 4
    494a:	07 c0       	rjmp	.+14     	; 0x495a <vfprintf+0x536>
    494c:	24 ff       	sbrs	r18, 4
    494e:	08 c0       	rjmp	.+16     	; 0x4960 <vfprintf+0x53c>
    4950:	06 60       	ori	r16, 0x06	; 6
    4952:	06 c0       	rjmp	.+12     	; 0x4960 <vfprintf+0x53c>
    4954:	28 e0       	ldi	r18, 0x08	; 8
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	05 c0       	rjmp	.+10     	; 0x4964 <vfprintf+0x540>
    495a:	20 e1       	ldi	r18, 0x10	; 16
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	02 c0       	rjmp	.+4      	; 0x4964 <vfprintf+0x540>
    4960:	20 e1       	ldi	r18, 0x10	; 16
    4962:	32 e0       	ldi	r19, 0x02	; 2
    4964:	52 01       	movw	r10, r4
    4966:	07 ff       	sbrs	r16, 7
    4968:	09 c0       	rjmp	.+18     	; 0x497c <vfprintf+0x558>
    496a:	f4 e0       	ldi	r31, 0x04	; 4
    496c:	af 0e       	add	r10, r31
    496e:	b1 1c       	adc	r11, r1
    4970:	f2 01       	movw	r30, r4
    4972:	60 81       	ld	r22, Z
    4974:	71 81       	ldd	r23, Z+1	; 0x01
    4976:	82 81       	ldd	r24, Z+2	; 0x02
    4978:	93 81       	ldd	r25, Z+3	; 0x03
    497a:	08 c0       	rjmp	.+16     	; 0x498c <vfprintf+0x568>
    497c:	f2 e0       	ldi	r31, 0x02	; 2
    497e:	af 0e       	add	r10, r31
    4980:	b1 1c       	adc	r11, r1
    4982:	f2 01       	movw	r30, r4
    4984:	60 81       	ld	r22, Z
    4986:	71 81       	ldd	r23, Z+1	; 0x01
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	a3 01       	movw	r20, r6
    498e:	7f d3       	rcall	.+1790   	; 0x508e <__ultoa_invert>
    4990:	e8 2e       	mov	r14, r24
    4992:	e6 18       	sub	r14, r6
    4994:	0f 77       	andi	r16, 0x7F	; 127
    4996:	30 2e       	mov	r3, r16
    4998:	36 fe       	sbrs	r3, 6
    499a:	0b c0       	rjmp	.+22     	; 0x49b2 <vfprintf+0x58e>
    499c:	33 2d       	mov	r19, r3
    499e:	3e 7f       	andi	r19, 0xFE	; 254
    49a0:	e1 16       	cp	r14, r17
    49a2:	50 f4       	brcc	.+20     	; 0x49b8 <vfprintf+0x594>
    49a4:	34 fe       	sbrs	r3, 4
    49a6:	0a c0       	rjmp	.+20     	; 0x49bc <vfprintf+0x598>
    49a8:	32 fc       	sbrc	r3, 2
    49aa:	08 c0       	rjmp	.+16     	; 0x49bc <vfprintf+0x598>
    49ac:	33 2d       	mov	r19, r3
    49ae:	3e 7e       	andi	r19, 0xEE	; 238
    49b0:	05 c0       	rjmp	.+10     	; 0x49bc <vfprintf+0x598>
    49b2:	0e 2d       	mov	r16, r14
    49b4:	33 2d       	mov	r19, r3
    49b6:	03 c0       	rjmp	.+6      	; 0x49be <vfprintf+0x59a>
    49b8:	0e 2d       	mov	r16, r14
    49ba:	01 c0       	rjmp	.+2      	; 0x49be <vfprintf+0x59a>
    49bc:	01 2f       	mov	r16, r17
    49be:	34 ff       	sbrs	r19, 4
    49c0:	0c c0       	rjmp	.+24     	; 0x49da <vfprintf+0x5b6>
    49c2:	fe 01       	movw	r30, r28
    49c4:	ee 0d       	add	r30, r14
    49c6:	f1 1d       	adc	r31, r1
    49c8:	80 81       	ld	r24, Z
    49ca:	80 33       	cpi	r24, 0x30	; 48
    49cc:	11 f4       	brne	.+4      	; 0x49d2 <vfprintf+0x5ae>
    49ce:	39 7e       	andi	r19, 0xE9	; 233
    49d0:	08 c0       	rjmp	.+16     	; 0x49e2 <vfprintf+0x5be>
    49d2:	32 ff       	sbrs	r19, 2
    49d4:	05 c0       	rjmp	.+10     	; 0x49e0 <vfprintf+0x5bc>
    49d6:	0e 5f       	subi	r16, 0xFE	; 254
    49d8:	04 c0       	rjmp	.+8      	; 0x49e2 <vfprintf+0x5be>
    49da:	83 2f       	mov	r24, r19
    49dc:	86 78       	andi	r24, 0x86	; 134
    49de:	09 f0       	breq	.+2      	; 0x49e2 <vfprintf+0x5be>
    49e0:	0f 5f       	subi	r16, 0xFF	; 255
    49e2:	33 fd       	sbrc	r19, 3
    49e4:	12 c0       	rjmp	.+36     	; 0x4a0a <vfprintf+0x5e6>
    49e6:	30 ff       	sbrs	r19, 0
    49e8:	06 c0       	rjmp	.+12     	; 0x49f6 <vfprintf+0x5d2>
    49ea:	1e 2d       	mov	r17, r14
    49ec:	0f 15       	cp	r16, r15
    49ee:	18 f4       	brcc	.+6      	; 0x49f6 <vfprintf+0x5d2>
    49f0:	1f 0d       	add	r17, r15
    49f2:	10 1b       	sub	r17, r16
    49f4:	0f 2d       	mov	r16, r15
    49f6:	0f 15       	cp	r16, r15
    49f8:	60 f4       	brcc	.+24     	; 0x4a12 <vfprintf+0x5ee>
    49fa:	b6 01       	movw	r22, r12
    49fc:	80 e2       	ldi	r24, 0x20	; 32
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	3b 8b       	std	Y+19, r19	; 0x13
    4a02:	de d2       	rcall	.+1468   	; 0x4fc0 <fputc>
    4a04:	0f 5f       	subi	r16, 0xFF	; 255
    4a06:	3b 89       	ldd	r19, Y+19	; 0x13
    4a08:	f6 cf       	rjmp	.-20     	; 0x49f6 <vfprintf+0x5d2>
    4a0a:	0f 15       	cp	r16, r15
    4a0c:	10 f4       	brcc	.+4      	; 0x4a12 <vfprintf+0x5ee>
    4a0e:	f0 1a       	sub	r15, r16
    4a10:	01 c0       	rjmp	.+2      	; 0x4a14 <vfprintf+0x5f0>
    4a12:	f1 2c       	mov	r15, r1
    4a14:	34 ff       	sbrs	r19, 4
    4a16:	11 c0       	rjmp	.+34     	; 0x4a3a <vfprintf+0x616>
    4a18:	b6 01       	movw	r22, r12
    4a1a:	80 e3       	ldi	r24, 0x30	; 48
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	3b 8b       	std	Y+19, r19	; 0x13
    4a20:	cf d2       	rcall	.+1438   	; 0x4fc0 <fputc>
    4a22:	3b 89       	ldd	r19, Y+19	; 0x13
    4a24:	32 ff       	sbrs	r19, 2
    4a26:	16 c0       	rjmp	.+44     	; 0x4a54 <vfprintf+0x630>
    4a28:	31 fd       	sbrc	r19, 1
    4a2a:	03 c0       	rjmp	.+6      	; 0x4a32 <vfprintf+0x60e>
    4a2c:	88 e7       	ldi	r24, 0x78	; 120
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	02 c0       	rjmp	.+4      	; 0x4a36 <vfprintf+0x612>
    4a32:	88 e5       	ldi	r24, 0x58	; 88
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	b6 01       	movw	r22, r12
    4a38:	0c c0       	rjmp	.+24     	; 0x4a52 <vfprintf+0x62e>
    4a3a:	83 2f       	mov	r24, r19
    4a3c:	86 78       	andi	r24, 0x86	; 134
    4a3e:	51 f0       	breq	.+20     	; 0x4a54 <vfprintf+0x630>
    4a40:	31 ff       	sbrs	r19, 1
    4a42:	02 c0       	rjmp	.+4      	; 0x4a48 <vfprintf+0x624>
    4a44:	8b e2       	ldi	r24, 0x2B	; 43
    4a46:	01 c0       	rjmp	.+2      	; 0x4a4a <vfprintf+0x626>
    4a48:	80 e2       	ldi	r24, 0x20	; 32
    4a4a:	37 fd       	sbrc	r19, 7
    4a4c:	8d e2       	ldi	r24, 0x2D	; 45
    4a4e:	b6 01       	movw	r22, r12
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	b6 d2       	rcall	.+1388   	; 0x4fc0 <fputc>
    4a54:	e1 16       	cp	r14, r17
    4a56:	30 f4       	brcc	.+12     	; 0x4a64 <vfprintf+0x640>
    4a58:	b6 01       	movw	r22, r12
    4a5a:	80 e3       	ldi	r24, 0x30	; 48
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	b0 d2       	rcall	.+1376   	; 0x4fc0 <fputc>
    4a60:	11 50       	subi	r17, 0x01	; 1
    4a62:	f8 cf       	rjmp	.-16     	; 0x4a54 <vfprintf+0x630>
    4a64:	ea 94       	dec	r14
    4a66:	f3 01       	movw	r30, r6
    4a68:	ee 0d       	add	r30, r14
    4a6a:	f1 1d       	adc	r31, r1
    4a6c:	80 81       	ld	r24, Z
    4a6e:	b6 01       	movw	r22, r12
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	a6 d2       	rcall	.+1356   	; 0x4fc0 <fputc>
    4a74:	e1 10       	cpse	r14, r1
    4a76:	f6 cf       	rjmp	.-20     	; 0x4a64 <vfprintf+0x640>
    4a78:	14 c0       	rjmp	.+40     	; 0x4aa2 <vfprintf+0x67e>
    4a7a:	f4 e0       	ldi	r31, 0x04	; 4
    4a7c:	ff 15       	cp	r31, r15
    4a7e:	48 f5       	brcc	.+82     	; 0x4ad2 <vfprintf+0x6ae>
    4a80:	84 e0       	ldi	r24, 0x04	; 4
    4a82:	f8 1a       	sub	r15, r24
    4a84:	33 fe       	sbrs	r3, 3
    4a86:	1d c0       	rjmp	.+58     	; 0x4ac2 <vfprintf+0x69e>
    4a88:	21 10       	cpse	r2, r1
    4a8a:	24 c0       	rjmp	.+72     	; 0x4ad4 <vfprintf+0x6b0>
    4a8c:	03 ff       	sbrs	r16, 3
    4a8e:	27 c0       	rjmp	.+78     	; 0x4ade <vfprintf+0x6ba>
    4a90:	0e e8       	ldi	r16, 0x8E	; 142
    4a92:	14 e0       	ldi	r17, 0x04	; 4
    4a94:	f3 2d       	mov	r31, r3
    4a96:	f0 71       	andi	r31, 0x10	; 16
    4a98:	3f 2e       	mov	r3, r31
    4a9a:	f8 01       	movw	r30, r16
    4a9c:	84 91       	lpm	r24, Z
    4a9e:	81 11       	cpse	r24, r1
    4aa0:	21 c0       	rjmp	.+66     	; 0x4ae4 <vfprintf+0x6c0>
    4aa2:	ff 20       	and	r15, r15
    4aa4:	09 f4       	brne	.+2      	; 0x4aa8 <vfprintf+0x684>
    4aa6:	fd cc       	rjmp	.-1542   	; 0x44a2 <vfprintf+0x7e>
    4aa8:	b6 01       	movw	r22, r12
    4aaa:	80 e2       	ldi	r24, 0x20	; 32
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	88 d2       	rcall	.+1296   	; 0x4fc0 <fputc>
    4ab0:	fa 94       	dec	r15
    4ab2:	f7 cf       	rjmp	.-18     	; 0x4aa2 <vfprintf+0x67e>
    4ab4:	f6 01       	movw	r30, r12
    4ab6:	86 81       	ldd	r24, Z+6	; 0x06
    4ab8:	97 81       	ldd	r25, Z+7	; 0x07
    4aba:	23 c0       	rjmp	.+70     	; 0x4b02 <vfprintf+0x6de>
    4abc:	8f ef       	ldi	r24, 0xFF	; 255
    4abe:	9f ef       	ldi	r25, 0xFF	; 255
    4ac0:	20 c0       	rjmp	.+64     	; 0x4b02 <vfprintf+0x6de>
    4ac2:	b6 01       	movw	r22, r12
    4ac4:	80 e2       	ldi	r24, 0x20	; 32
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	7b d2       	rcall	.+1270   	; 0x4fc0 <fputc>
    4aca:	fa 94       	dec	r15
    4acc:	f1 10       	cpse	r15, r1
    4ace:	f9 cf       	rjmp	.-14     	; 0x4ac2 <vfprintf+0x69e>
    4ad0:	db cf       	rjmp	.-74     	; 0x4a88 <vfprintf+0x664>
    4ad2:	f1 2c       	mov	r15, r1
    4ad4:	b6 01       	movw	r22, r12
    4ad6:	82 2d       	mov	r24, r2
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	72 d2       	rcall	.+1252   	; 0x4fc0 <fputc>
    4adc:	d7 cf       	rjmp	.-82     	; 0x4a8c <vfprintf+0x668>
    4ade:	02 e9       	ldi	r16, 0x92	; 146
    4ae0:	14 e0       	ldi	r17, 0x04	; 4
    4ae2:	d8 cf       	rjmp	.-80     	; 0x4a94 <vfprintf+0x670>
    4ae4:	31 10       	cpse	r3, r1
    4ae6:	80 52       	subi	r24, 0x20	; 32
    4ae8:	b6 01       	movw	r22, r12
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	69 d2       	rcall	.+1234   	; 0x4fc0 <fputc>
    4aee:	0f 5f       	subi	r16, 0xFF	; 255
    4af0:	1f 4f       	sbci	r17, 0xFF	; 255
    4af2:	d3 cf       	rjmp	.-90     	; 0x4a9a <vfprintf+0x676>
    4af4:	23 e0       	ldi	r18, 0x03	; 3
    4af6:	2f 15       	cp	r18, r15
    4af8:	10 f4       	brcc	.+4      	; 0x4afe <vfprintf+0x6da>
    4afa:	83 e0       	ldi	r24, 0x03	; 3
    4afc:	c2 cf       	rjmp	.-124    	; 0x4a82 <vfprintf+0x65e>
    4afe:	f1 2c       	mov	r15, r1
    4b00:	c5 cf       	rjmp	.-118    	; 0x4a8c <vfprintf+0x668>
    4b02:	63 96       	adiw	r28, 0x13	; 19
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	de bf       	out	0x3e, r29	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	cd bf       	out	0x3d, r28	; 61
    4b0e:	df 91       	pop	r29
    4b10:	cf 91       	pop	r28
    4b12:	1f 91       	pop	r17
    4b14:	0f 91       	pop	r16
    4b16:	ff 90       	pop	r15
    4b18:	ef 90       	pop	r14
    4b1a:	df 90       	pop	r13
    4b1c:	cf 90       	pop	r12
    4b1e:	bf 90       	pop	r11
    4b20:	af 90       	pop	r10
    4b22:	9f 90       	pop	r9
    4b24:	8f 90       	pop	r8
    4b26:	7f 90       	pop	r7
    4b28:	6f 90       	pop	r6
    4b2a:	5f 90       	pop	r5
    4b2c:	4f 90       	pop	r4
    4b2e:	3f 90       	pop	r3
    4b30:	2f 90       	pop	r2
    4b32:	08 95       	ret

00004b34 <__udivmodsi4>:
    4b34:	a1 e2       	ldi	r26, 0x21	; 33
    4b36:	1a 2e       	mov	r1, r26
    4b38:	aa 1b       	sub	r26, r26
    4b3a:	bb 1b       	sub	r27, r27
    4b3c:	fd 01       	movw	r30, r26
    4b3e:	0d c0       	rjmp	.+26     	; 0x4b5a <__udivmodsi4_ep>

00004b40 <__udivmodsi4_loop>:
    4b40:	aa 1f       	adc	r26, r26
    4b42:	bb 1f       	adc	r27, r27
    4b44:	ee 1f       	adc	r30, r30
    4b46:	ff 1f       	adc	r31, r31
    4b48:	a2 17       	cp	r26, r18
    4b4a:	b3 07       	cpc	r27, r19
    4b4c:	e4 07       	cpc	r30, r20
    4b4e:	f5 07       	cpc	r31, r21
    4b50:	20 f0       	brcs	.+8      	; 0x4b5a <__udivmodsi4_ep>
    4b52:	a2 1b       	sub	r26, r18
    4b54:	b3 0b       	sbc	r27, r19
    4b56:	e4 0b       	sbc	r30, r20
    4b58:	f5 0b       	sbc	r31, r21

00004b5a <__udivmodsi4_ep>:
    4b5a:	66 1f       	adc	r22, r22
    4b5c:	77 1f       	adc	r23, r23
    4b5e:	88 1f       	adc	r24, r24
    4b60:	99 1f       	adc	r25, r25
    4b62:	1a 94       	dec	r1
    4b64:	69 f7       	brne	.-38     	; 0x4b40 <__udivmodsi4_loop>
    4b66:	60 95       	com	r22
    4b68:	70 95       	com	r23
    4b6a:	80 95       	com	r24
    4b6c:	90 95       	com	r25
    4b6e:	9b 01       	movw	r18, r22
    4b70:	ac 01       	movw	r20, r24
    4b72:	bd 01       	movw	r22, r26
    4b74:	cf 01       	movw	r24, r30
    4b76:	08 95       	ret

00004b78 <__tablejump2__>:
    4b78:	ee 0f       	add	r30, r30
    4b7a:	ff 1f       	adc	r31, r31
    4b7c:	00 24       	eor	r0, r0
    4b7e:	00 1c       	adc	r0, r0
    4b80:	0b be       	out	0x3b, r0	; 59
    4b82:	07 90       	elpm	r0, Z+
    4b84:	f6 91       	elpm	r31, Z
    4b86:	e0 2d       	mov	r30, r0
    4b88:	09 94       	ijmp

00004b8a <malloc>:
    4b8a:	cf 93       	push	r28
    4b8c:	df 93       	push	r29
    4b8e:	82 30       	cpi	r24, 0x02	; 2
    4b90:	91 05       	cpc	r25, r1
    4b92:	10 f4       	brcc	.+4      	; 0x4b98 <malloc+0xe>
    4b94:	82 e0       	ldi	r24, 0x02	; 2
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	e0 91 51 08 	lds	r30, 0x0851
    4b9c:	f0 91 52 08 	lds	r31, 0x0852
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	c0 e0       	ldi	r28, 0x00	; 0
    4ba6:	d0 e0       	ldi	r29, 0x00	; 0
    4ba8:	30 97       	sbiw	r30, 0x00	; 0
    4baa:	11 f1       	breq	.+68     	; 0x4bf0 <malloc+0x66>
    4bac:	40 81       	ld	r20, Z
    4bae:	51 81       	ldd	r21, Z+1	; 0x01
    4bb0:	48 17       	cp	r20, r24
    4bb2:	59 07       	cpc	r21, r25
    4bb4:	c0 f0       	brcs	.+48     	; 0x4be6 <malloc+0x5c>
    4bb6:	48 17       	cp	r20, r24
    4bb8:	59 07       	cpc	r21, r25
    4bba:	61 f4       	brne	.+24     	; 0x4bd4 <malloc+0x4a>
    4bbc:	82 81       	ldd	r24, Z+2	; 0x02
    4bbe:	93 81       	ldd	r25, Z+3	; 0x03
    4bc0:	20 97       	sbiw	r28, 0x00	; 0
    4bc2:	19 f0       	breq	.+6      	; 0x4bca <malloc+0x40>
    4bc4:	9b 83       	std	Y+3, r25	; 0x03
    4bc6:	8a 83       	std	Y+2, r24	; 0x02
    4bc8:	2b c0       	rjmp	.+86     	; 0x4c20 <malloc+0x96>
    4bca:	90 93 52 08 	sts	0x0852, r25
    4bce:	80 93 51 08 	sts	0x0851, r24
    4bd2:	26 c0       	rjmp	.+76     	; 0x4c20 <malloc+0x96>
    4bd4:	21 15       	cp	r18, r1
    4bd6:	31 05       	cpc	r19, r1
    4bd8:	19 f0       	breq	.+6      	; 0x4be0 <malloc+0x56>
    4bda:	42 17       	cp	r20, r18
    4bdc:	53 07       	cpc	r21, r19
    4bde:	18 f4       	brcc	.+6      	; 0x4be6 <malloc+0x5c>
    4be0:	9a 01       	movw	r18, r20
    4be2:	be 01       	movw	r22, r28
    4be4:	df 01       	movw	r26, r30
    4be6:	ef 01       	movw	r28, r30
    4be8:	02 80       	ldd	r0, Z+2	; 0x02
    4bea:	f3 81       	ldd	r31, Z+3	; 0x03
    4bec:	e0 2d       	mov	r30, r0
    4bee:	dc cf       	rjmp	.-72     	; 0x4ba8 <malloc+0x1e>
    4bf0:	21 15       	cp	r18, r1
    4bf2:	31 05       	cpc	r19, r1
    4bf4:	09 f1       	breq	.+66     	; 0x4c38 <malloc+0xae>
    4bf6:	28 1b       	sub	r18, r24
    4bf8:	39 0b       	sbc	r19, r25
    4bfa:	24 30       	cpi	r18, 0x04	; 4
    4bfc:	31 05       	cpc	r19, r1
    4bfe:	90 f4       	brcc	.+36     	; 0x4c24 <malloc+0x9a>
    4c00:	12 96       	adiw	r26, 0x02	; 2
    4c02:	8d 91       	ld	r24, X+
    4c04:	9c 91       	ld	r25, X
    4c06:	13 97       	sbiw	r26, 0x03	; 3
    4c08:	61 15       	cp	r22, r1
    4c0a:	71 05       	cpc	r23, r1
    4c0c:	21 f0       	breq	.+8      	; 0x4c16 <malloc+0x8c>
    4c0e:	fb 01       	movw	r30, r22
    4c10:	93 83       	std	Z+3, r25	; 0x03
    4c12:	82 83       	std	Z+2, r24	; 0x02
    4c14:	04 c0       	rjmp	.+8      	; 0x4c1e <malloc+0x94>
    4c16:	90 93 52 08 	sts	0x0852, r25
    4c1a:	80 93 51 08 	sts	0x0851, r24
    4c1e:	fd 01       	movw	r30, r26
    4c20:	32 96       	adiw	r30, 0x02	; 2
    4c22:	44 c0       	rjmp	.+136    	; 0x4cac <malloc+0x122>
    4c24:	fd 01       	movw	r30, r26
    4c26:	e2 0f       	add	r30, r18
    4c28:	f3 1f       	adc	r31, r19
    4c2a:	81 93       	st	Z+, r24
    4c2c:	91 93       	st	Z+, r25
    4c2e:	22 50       	subi	r18, 0x02	; 2
    4c30:	31 09       	sbc	r19, r1
    4c32:	2d 93       	st	X+, r18
    4c34:	3c 93       	st	X, r19
    4c36:	3a c0       	rjmp	.+116    	; 0x4cac <malloc+0x122>
    4c38:	20 91 4f 08 	lds	r18, 0x084F
    4c3c:	30 91 50 08 	lds	r19, 0x0850
    4c40:	23 2b       	or	r18, r19
    4c42:	41 f4       	brne	.+16     	; 0x4c54 <malloc+0xca>
    4c44:	20 91 02 01 	lds	r18, 0x0102
    4c48:	30 91 03 01 	lds	r19, 0x0103
    4c4c:	30 93 50 08 	sts	0x0850, r19
    4c50:	20 93 4f 08 	sts	0x084F, r18
    4c54:	20 91 00 01 	lds	r18, 0x0100
    4c58:	30 91 01 01 	lds	r19, 0x0101
    4c5c:	21 15       	cp	r18, r1
    4c5e:	31 05       	cpc	r19, r1
    4c60:	41 f4       	brne	.+16     	; 0x4c72 <malloc+0xe8>
    4c62:	2d b7       	in	r18, 0x3d	; 61
    4c64:	3e b7       	in	r19, 0x3e	; 62
    4c66:	40 91 04 01 	lds	r20, 0x0104
    4c6a:	50 91 05 01 	lds	r21, 0x0105
    4c6e:	24 1b       	sub	r18, r20
    4c70:	35 0b       	sbc	r19, r21
    4c72:	e0 91 4f 08 	lds	r30, 0x084F
    4c76:	f0 91 50 08 	lds	r31, 0x0850
    4c7a:	e2 17       	cp	r30, r18
    4c7c:	f3 07       	cpc	r31, r19
    4c7e:	a0 f4       	brcc	.+40     	; 0x4ca8 <malloc+0x11e>
    4c80:	2e 1b       	sub	r18, r30
    4c82:	3f 0b       	sbc	r19, r31
    4c84:	28 17       	cp	r18, r24
    4c86:	39 07       	cpc	r19, r25
    4c88:	78 f0       	brcs	.+30     	; 0x4ca8 <malloc+0x11e>
    4c8a:	ac 01       	movw	r20, r24
    4c8c:	4e 5f       	subi	r20, 0xFE	; 254
    4c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c90:	24 17       	cp	r18, r20
    4c92:	35 07       	cpc	r19, r21
    4c94:	48 f0       	brcs	.+18     	; 0x4ca8 <malloc+0x11e>
    4c96:	4e 0f       	add	r20, r30
    4c98:	5f 1f       	adc	r21, r31
    4c9a:	50 93 50 08 	sts	0x0850, r21
    4c9e:	40 93 4f 08 	sts	0x084F, r20
    4ca2:	81 93       	st	Z+, r24
    4ca4:	91 93       	st	Z+, r25
    4ca6:	02 c0       	rjmp	.+4      	; 0x4cac <malloc+0x122>
    4ca8:	e0 e0       	ldi	r30, 0x00	; 0
    4caa:	f0 e0       	ldi	r31, 0x00	; 0
    4cac:	cf 01       	movw	r24, r30
    4cae:	df 91       	pop	r29
    4cb0:	cf 91       	pop	r28
    4cb2:	08 95       	ret

00004cb4 <free>:
    4cb4:	0f 93       	push	r16
    4cb6:	1f 93       	push	r17
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	00 97       	sbiw	r24, 0x00	; 0
    4cbe:	09 f4       	brne	.+2      	; 0x4cc2 <free+0xe>
    4cc0:	8c c0       	rjmp	.+280    	; 0x4dda <free+0x126>
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	32 97       	sbiw	r30, 0x02	; 2
    4cc6:	13 82       	std	Z+3, r1	; 0x03
    4cc8:	12 82       	std	Z+2, r1	; 0x02
    4cca:	00 91 51 08 	lds	r16, 0x0851
    4cce:	10 91 52 08 	lds	r17, 0x0852
    4cd2:	01 15       	cp	r16, r1
    4cd4:	11 05       	cpc	r17, r1
    4cd6:	81 f4       	brne	.+32     	; 0x4cf8 <free+0x44>
    4cd8:	20 81       	ld	r18, Z
    4cda:	31 81       	ldd	r19, Z+1	; 0x01
    4cdc:	82 0f       	add	r24, r18
    4cde:	93 1f       	adc	r25, r19
    4ce0:	20 91 4f 08 	lds	r18, 0x084F
    4ce4:	30 91 50 08 	lds	r19, 0x0850
    4ce8:	28 17       	cp	r18, r24
    4cea:	39 07       	cpc	r19, r25
    4cec:	79 f5       	brne	.+94     	; 0x4d4c <free+0x98>
    4cee:	f0 93 50 08 	sts	0x0850, r31
    4cf2:	e0 93 4f 08 	sts	0x084F, r30
    4cf6:	71 c0       	rjmp	.+226    	; 0x4dda <free+0x126>
    4cf8:	d8 01       	movw	r26, r16
    4cfa:	40 e0       	ldi	r20, 0x00	; 0
    4cfc:	50 e0       	ldi	r21, 0x00	; 0
    4cfe:	ae 17       	cp	r26, r30
    4d00:	bf 07       	cpc	r27, r31
    4d02:	50 f4       	brcc	.+20     	; 0x4d18 <free+0x64>
    4d04:	12 96       	adiw	r26, 0x02	; 2
    4d06:	2d 91       	ld	r18, X+
    4d08:	3c 91       	ld	r19, X
    4d0a:	13 97       	sbiw	r26, 0x03	; 3
    4d0c:	ad 01       	movw	r20, r26
    4d0e:	21 15       	cp	r18, r1
    4d10:	31 05       	cpc	r19, r1
    4d12:	09 f1       	breq	.+66     	; 0x4d56 <free+0xa2>
    4d14:	d9 01       	movw	r26, r18
    4d16:	f3 cf       	rjmp	.-26     	; 0x4cfe <free+0x4a>
    4d18:	9d 01       	movw	r18, r26
    4d1a:	da 01       	movw	r26, r20
    4d1c:	33 83       	std	Z+3, r19	; 0x03
    4d1e:	22 83       	std	Z+2, r18	; 0x02
    4d20:	60 81       	ld	r22, Z
    4d22:	71 81       	ldd	r23, Z+1	; 0x01
    4d24:	86 0f       	add	r24, r22
    4d26:	97 1f       	adc	r25, r23
    4d28:	82 17       	cp	r24, r18
    4d2a:	93 07       	cpc	r25, r19
    4d2c:	69 f4       	brne	.+26     	; 0x4d48 <free+0x94>
    4d2e:	ec 01       	movw	r28, r24
    4d30:	28 81       	ld	r18, Y
    4d32:	39 81       	ldd	r19, Y+1	; 0x01
    4d34:	26 0f       	add	r18, r22
    4d36:	37 1f       	adc	r19, r23
    4d38:	2e 5f       	subi	r18, 0xFE	; 254
    4d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3c:	31 83       	std	Z+1, r19	; 0x01
    4d3e:	20 83       	st	Z, r18
    4d40:	8a 81       	ldd	r24, Y+2	; 0x02
    4d42:	9b 81       	ldd	r25, Y+3	; 0x03
    4d44:	93 83       	std	Z+3, r25	; 0x03
    4d46:	82 83       	std	Z+2, r24	; 0x02
    4d48:	45 2b       	or	r20, r21
    4d4a:	29 f4       	brne	.+10     	; 0x4d56 <free+0xa2>
    4d4c:	f0 93 52 08 	sts	0x0852, r31
    4d50:	e0 93 51 08 	sts	0x0851, r30
    4d54:	42 c0       	rjmp	.+132    	; 0x4dda <free+0x126>
    4d56:	13 96       	adiw	r26, 0x03	; 3
    4d58:	fc 93       	st	X, r31
    4d5a:	ee 93       	st	-X, r30
    4d5c:	12 97       	sbiw	r26, 0x02	; 2
    4d5e:	ed 01       	movw	r28, r26
    4d60:	49 91       	ld	r20, Y+
    4d62:	59 91       	ld	r21, Y+
    4d64:	9e 01       	movw	r18, r28
    4d66:	24 0f       	add	r18, r20
    4d68:	35 1f       	adc	r19, r21
    4d6a:	e2 17       	cp	r30, r18
    4d6c:	f3 07       	cpc	r31, r19
    4d6e:	71 f4       	brne	.+28     	; 0x4d8c <free+0xd8>
    4d70:	80 81       	ld	r24, Z
    4d72:	91 81       	ldd	r25, Z+1	; 0x01
    4d74:	84 0f       	add	r24, r20
    4d76:	95 1f       	adc	r25, r21
    4d78:	02 96       	adiw	r24, 0x02	; 2
    4d7a:	11 96       	adiw	r26, 0x01	; 1
    4d7c:	9c 93       	st	X, r25
    4d7e:	8e 93       	st	-X, r24
    4d80:	82 81       	ldd	r24, Z+2	; 0x02
    4d82:	93 81       	ldd	r25, Z+3	; 0x03
    4d84:	13 96       	adiw	r26, 0x03	; 3
    4d86:	9c 93       	st	X, r25
    4d88:	8e 93       	st	-X, r24
    4d8a:	12 97       	sbiw	r26, 0x02	; 2
    4d8c:	e0 e0       	ldi	r30, 0x00	; 0
    4d8e:	f0 e0       	ldi	r31, 0x00	; 0
    4d90:	d8 01       	movw	r26, r16
    4d92:	12 96       	adiw	r26, 0x02	; 2
    4d94:	8d 91       	ld	r24, X+
    4d96:	9c 91       	ld	r25, X
    4d98:	13 97       	sbiw	r26, 0x03	; 3
    4d9a:	00 97       	sbiw	r24, 0x00	; 0
    4d9c:	19 f0       	breq	.+6      	; 0x4da4 <free+0xf0>
    4d9e:	f8 01       	movw	r30, r16
    4da0:	8c 01       	movw	r16, r24
    4da2:	f6 cf       	rjmp	.-20     	; 0x4d90 <free+0xdc>
    4da4:	8d 91       	ld	r24, X+
    4da6:	9c 91       	ld	r25, X
    4da8:	98 01       	movw	r18, r16
    4daa:	2e 5f       	subi	r18, 0xFE	; 254
    4dac:	3f 4f       	sbci	r19, 0xFF	; 255
    4dae:	82 0f       	add	r24, r18
    4db0:	93 1f       	adc	r25, r19
    4db2:	20 91 4f 08 	lds	r18, 0x084F
    4db6:	30 91 50 08 	lds	r19, 0x0850
    4dba:	28 17       	cp	r18, r24
    4dbc:	39 07       	cpc	r19, r25
    4dbe:	69 f4       	brne	.+26     	; 0x4dda <free+0x126>
    4dc0:	30 97       	sbiw	r30, 0x00	; 0
    4dc2:	29 f4       	brne	.+10     	; 0x4dce <free+0x11a>
    4dc4:	10 92 52 08 	sts	0x0852, r1
    4dc8:	10 92 51 08 	sts	0x0851, r1
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <free+0x11e>
    4dce:	13 82       	std	Z+3, r1	; 0x03
    4dd0:	12 82       	std	Z+2, r1	; 0x02
    4dd2:	10 93 50 08 	sts	0x0850, r17
    4dd6:	00 93 4f 08 	sts	0x084F, r16
    4dda:	df 91       	pop	r29
    4ddc:	cf 91       	pop	r28
    4dde:	1f 91       	pop	r17
    4de0:	0f 91       	pop	r16
    4de2:	08 95       	ret

00004de4 <__ftoa_engine>:
    4de4:	28 30       	cpi	r18, 0x08	; 8
    4de6:	08 f0       	brcs	.+2      	; 0x4dea <__ftoa_engine+0x6>
    4de8:	27 e0       	ldi	r18, 0x07	; 7
    4dea:	33 27       	eor	r19, r19
    4dec:	da 01       	movw	r26, r20
    4dee:	99 0f       	add	r25, r25
    4df0:	31 1d       	adc	r19, r1
    4df2:	87 fd       	sbrc	r24, 7
    4df4:	91 60       	ori	r25, 0x01	; 1
    4df6:	00 96       	adiw	r24, 0x00	; 0
    4df8:	61 05       	cpc	r22, r1
    4dfa:	71 05       	cpc	r23, r1
    4dfc:	39 f4       	brne	.+14     	; 0x4e0c <__ftoa_engine+0x28>
    4dfe:	32 60       	ori	r19, 0x02	; 2
    4e00:	2e 5f       	subi	r18, 0xFE	; 254
    4e02:	3d 93       	st	X+, r19
    4e04:	30 e3       	ldi	r19, 0x30	; 48
    4e06:	2a 95       	dec	r18
    4e08:	e1 f7       	brne	.-8      	; 0x4e02 <__ftoa_engine+0x1e>
    4e0a:	08 95       	ret
    4e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    4e0e:	30 f0       	brcs	.+12     	; 0x4e1c <__ftoa_engine+0x38>
    4e10:	80 38       	cpi	r24, 0x80	; 128
    4e12:	71 05       	cpc	r23, r1
    4e14:	61 05       	cpc	r22, r1
    4e16:	09 f0       	breq	.+2      	; 0x4e1a <__ftoa_engine+0x36>
    4e18:	3c 5f       	subi	r19, 0xFC	; 252
    4e1a:	3c 5f       	subi	r19, 0xFC	; 252
    4e1c:	3d 93       	st	X+, r19
    4e1e:	91 30       	cpi	r25, 0x01	; 1
    4e20:	08 f0       	brcs	.+2      	; 0x4e24 <__ftoa_engine+0x40>
    4e22:	80 68       	ori	r24, 0x80	; 128
    4e24:	91 1d       	adc	r25, r1
    4e26:	df 93       	push	r29
    4e28:	cf 93       	push	r28
    4e2a:	1f 93       	push	r17
    4e2c:	0f 93       	push	r16
    4e2e:	ff 92       	push	r15
    4e30:	ef 92       	push	r14
    4e32:	19 2f       	mov	r17, r25
    4e34:	98 7f       	andi	r25, 0xF8	; 248
    4e36:	96 95       	lsr	r25
    4e38:	e9 2f       	mov	r30, r25
    4e3a:	96 95       	lsr	r25
    4e3c:	96 95       	lsr	r25
    4e3e:	e9 0f       	add	r30, r25
    4e40:	ff 27       	eor	r31, r31
    4e42:	e0 51       	subi	r30, 0x10	; 16
    4e44:	fb 4f       	sbci	r31, 0xFB	; 251
    4e46:	99 27       	eor	r25, r25
    4e48:	33 27       	eor	r19, r19
    4e4a:	ee 24       	eor	r14, r14
    4e4c:	ff 24       	eor	r15, r15
    4e4e:	a7 01       	movw	r20, r14
    4e50:	e7 01       	movw	r28, r14
    4e52:	05 90       	lpm	r0, Z+
    4e54:	08 94       	sec
    4e56:	07 94       	ror	r0
    4e58:	28 f4       	brcc	.+10     	; 0x4e64 <__ftoa_engine+0x80>
    4e5a:	36 0f       	add	r19, r22
    4e5c:	e7 1e       	adc	r14, r23
    4e5e:	f8 1e       	adc	r15, r24
    4e60:	49 1f       	adc	r20, r25
    4e62:	51 1d       	adc	r21, r1
    4e64:	66 0f       	add	r22, r22
    4e66:	77 1f       	adc	r23, r23
    4e68:	88 1f       	adc	r24, r24
    4e6a:	99 1f       	adc	r25, r25
    4e6c:	06 94       	lsr	r0
    4e6e:	a1 f7       	brne	.-24     	; 0x4e58 <__ftoa_engine+0x74>
    4e70:	05 90       	lpm	r0, Z+
    4e72:	07 94       	ror	r0
    4e74:	28 f4       	brcc	.+10     	; 0x4e80 <__ftoa_engine+0x9c>
    4e76:	e7 0e       	add	r14, r23
    4e78:	f8 1e       	adc	r15, r24
    4e7a:	49 1f       	adc	r20, r25
    4e7c:	56 1f       	adc	r21, r22
    4e7e:	c1 1d       	adc	r28, r1
    4e80:	77 0f       	add	r23, r23
    4e82:	88 1f       	adc	r24, r24
    4e84:	99 1f       	adc	r25, r25
    4e86:	66 1f       	adc	r22, r22
    4e88:	06 94       	lsr	r0
    4e8a:	a1 f7       	brne	.-24     	; 0x4e74 <__ftoa_engine+0x90>
    4e8c:	05 90       	lpm	r0, Z+
    4e8e:	07 94       	ror	r0
    4e90:	28 f4       	brcc	.+10     	; 0x4e9c <__ftoa_engine+0xb8>
    4e92:	f8 0e       	add	r15, r24
    4e94:	49 1f       	adc	r20, r25
    4e96:	56 1f       	adc	r21, r22
    4e98:	c7 1f       	adc	r28, r23
    4e9a:	d1 1d       	adc	r29, r1
    4e9c:	88 0f       	add	r24, r24
    4e9e:	99 1f       	adc	r25, r25
    4ea0:	66 1f       	adc	r22, r22
    4ea2:	77 1f       	adc	r23, r23
    4ea4:	06 94       	lsr	r0
    4ea6:	a1 f7       	brne	.-24     	; 0x4e90 <__ftoa_engine+0xac>
    4ea8:	05 90       	lpm	r0, Z+
    4eaa:	07 94       	ror	r0
    4eac:	20 f4       	brcc	.+8      	; 0x4eb6 <__ftoa_engine+0xd2>
    4eae:	49 0f       	add	r20, r25
    4eb0:	56 1f       	adc	r21, r22
    4eb2:	c7 1f       	adc	r28, r23
    4eb4:	d8 1f       	adc	r29, r24
    4eb6:	99 0f       	add	r25, r25
    4eb8:	66 1f       	adc	r22, r22
    4eba:	77 1f       	adc	r23, r23
    4ebc:	88 1f       	adc	r24, r24
    4ebe:	06 94       	lsr	r0
    4ec0:	a9 f7       	brne	.-22     	; 0x4eac <__ftoa_engine+0xc8>
    4ec2:	84 91       	lpm	r24, Z
    4ec4:	10 95       	com	r17
    4ec6:	17 70       	andi	r17, 0x07	; 7
    4ec8:	41 f0       	breq	.+16     	; 0x4eda <__ftoa_engine+0xf6>
    4eca:	d6 95       	lsr	r29
    4ecc:	c7 95       	ror	r28
    4ece:	57 95       	ror	r21
    4ed0:	47 95       	ror	r20
    4ed2:	f7 94       	ror	r15
    4ed4:	e7 94       	ror	r14
    4ed6:	1a 95       	dec	r17
    4ed8:	c1 f7       	brne	.-16     	; 0x4eca <__ftoa_engine+0xe6>
    4eda:	e6 e9       	ldi	r30, 0x96	; 150
    4edc:	f4 e0       	ldi	r31, 0x04	; 4
    4ede:	68 94       	set
    4ee0:	15 90       	lpm	r1, Z+
    4ee2:	15 91       	lpm	r17, Z+
    4ee4:	35 91       	lpm	r19, Z+
    4ee6:	65 91       	lpm	r22, Z+
    4ee8:	95 91       	lpm	r25, Z+
    4eea:	05 90       	lpm	r0, Z+
    4eec:	7f e2       	ldi	r23, 0x2F	; 47
    4eee:	73 95       	inc	r23
    4ef0:	e1 18       	sub	r14, r1
    4ef2:	f1 0a       	sbc	r15, r17
    4ef4:	43 0b       	sbc	r20, r19
    4ef6:	56 0b       	sbc	r21, r22
    4ef8:	c9 0b       	sbc	r28, r25
    4efa:	d0 09       	sbc	r29, r0
    4efc:	c0 f7       	brcc	.-16     	; 0x4eee <__ftoa_engine+0x10a>
    4efe:	e1 0c       	add	r14, r1
    4f00:	f1 1e       	adc	r15, r17
    4f02:	43 1f       	adc	r20, r19
    4f04:	56 1f       	adc	r21, r22
    4f06:	c9 1f       	adc	r28, r25
    4f08:	d0 1d       	adc	r29, r0
    4f0a:	7e f4       	brtc	.+30     	; 0x4f2a <__ftoa_engine+0x146>
    4f0c:	70 33       	cpi	r23, 0x30	; 48
    4f0e:	11 f4       	brne	.+4      	; 0x4f14 <__ftoa_engine+0x130>
    4f10:	8a 95       	dec	r24
    4f12:	e6 cf       	rjmp	.-52     	; 0x4ee0 <__ftoa_engine+0xfc>
    4f14:	e8 94       	clt
    4f16:	01 50       	subi	r16, 0x01	; 1
    4f18:	30 f0       	brcs	.+12     	; 0x4f26 <__ftoa_engine+0x142>
    4f1a:	08 0f       	add	r16, r24
    4f1c:	0a f4       	brpl	.+2      	; 0x4f20 <__ftoa_engine+0x13c>
    4f1e:	00 27       	eor	r16, r16
    4f20:	02 17       	cp	r16, r18
    4f22:	08 f4       	brcc	.+2      	; 0x4f26 <__ftoa_engine+0x142>
    4f24:	20 2f       	mov	r18, r16
    4f26:	23 95       	inc	r18
    4f28:	02 2f       	mov	r16, r18
    4f2a:	7a 33       	cpi	r23, 0x3A	; 58
    4f2c:	28 f0       	brcs	.+10     	; 0x4f38 <__ftoa_engine+0x154>
    4f2e:	79 e3       	ldi	r23, 0x39	; 57
    4f30:	7d 93       	st	X+, r23
    4f32:	2a 95       	dec	r18
    4f34:	e9 f7       	brne	.-6      	; 0x4f30 <__ftoa_engine+0x14c>
    4f36:	10 c0       	rjmp	.+32     	; 0x4f58 <__ftoa_engine+0x174>
    4f38:	7d 93       	st	X+, r23
    4f3a:	2a 95       	dec	r18
    4f3c:	89 f6       	brne	.-94     	; 0x4ee0 <__ftoa_engine+0xfc>
    4f3e:	06 94       	lsr	r0
    4f40:	97 95       	ror	r25
    4f42:	67 95       	ror	r22
    4f44:	37 95       	ror	r19
    4f46:	17 95       	ror	r17
    4f48:	17 94       	ror	r1
    4f4a:	e1 18       	sub	r14, r1
    4f4c:	f1 0a       	sbc	r15, r17
    4f4e:	43 0b       	sbc	r20, r19
    4f50:	56 0b       	sbc	r21, r22
    4f52:	c9 0b       	sbc	r28, r25
    4f54:	d0 09       	sbc	r29, r0
    4f56:	98 f0       	brcs	.+38     	; 0x4f7e <__ftoa_engine+0x19a>
    4f58:	23 95       	inc	r18
    4f5a:	7e 91       	ld	r23, -X
    4f5c:	73 95       	inc	r23
    4f5e:	7a 33       	cpi	r23, 0x3A	; 58
    4f60:	08 f0       	brcs	.+2      	; 0x4f64 <__ftoa_engine+0x180>
    4f62:	70 e3       	ldi	r23, 0x30	; 48
    4f64:	7c 93       	st	X, r23
    4f66:	20 13       	cpse	r18, r16
    4f68:	b8 f7       	brcc	.-18     	; 0x4f58 <__ftoa_engine+0x174>
    4f6a:	7e 91       	ld	r23, -X
    4f6c:	70 61       	ori	r23, 0x10	; 16
    4f6e:	7d 93       	st	X+, r23
    4f70:	30 f0       	brcs	.+12     	; 0x4f7e <__ftoa_engine+0x19a>
    4f72:	83 95       	inc	r24
    4f74:	71 e3       	ldi	r23, 0x31	; 49
    4f76:	7d 93       	st	X+, r23
    4f78:	70 e3       	ldi	r23, 0x30	; 48
    4f7a:	2a 95       	dec	r18
    4f7c:	e1 f7       	brne	.-8      	; 0x4f76 <__ftoa_engine+0x192>
    4f7e:	11 24       	eor	r1, r1
    4f80:	ef 90       	pop	r14
    4f82:	ff 90       	pop	r15
    4f84:	0f 91       	pop	r16
    4f86:	1f 91       	pop	r17
    4f88:	cf 91       	pop	r28
    4f8a:	df 91       	pop	r29
    4f8c:	99 27       	eor	r25, r25
    4f8e:	87 fd       	sbrc	r24, 7
    4f90:	90 95       	com	r25
    4f92:	08 95       	ret

00004f94 <strnlen_P>:
    4f94:	fc 01       	movw	r30, r24
    4f96:	05 90       	lpm	r0, Z+
    4f98:	61 50       	subi	r22, 0x01	; 1
    4f9a:	70 40       	sbci	r23, 0x00	; 0
    4f9c:	01 10       	cpse	r0, r1
    4f9e:	d8 f7       	brcc	.-10     	; 0x4f96 <strnlen_P+0x2>
    4fa0:	80 95       	com	r24
    4fa2:	90 95       	com	r25
    4fa4:	8e 0f       	add	r24, r30
    4fa6:	9f 1f       	adc	r25, r31
    4fa8:	08 95       	ret

00004faa <strnlen>:
    4faa:	fc 01       	movw	r30, r24
    4fac:	61 50       	subi	r22, 0x01	; 1
    4fae:	70 40       	sbci	r23, 0x00	; 0
    4fb0:	01 90       	ld	r0, Z+
    4fb2:	01 10       	cpse	r0, r1
    4fb4:	d8 f7       	brcc	.-10     	; 0x4fac <strnlen+0x2>
    4fb6:	80 95       	com	r24
    4fb8:	90 95       	com	r25
    4fba:	8e 0f       	add	r24, r30
    4fbc:	9f 1f       	adc	r25, r31
    4fbe:	08 95       	ret

00004fc0 <fputc>:
    4fc0:	0f 93       	push	r16
    4fc2:	1f 93       	push	r17
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	fb 01       	movw	r30, r22
    4fca:	23 81       	ldd	r18, Z+3	; 0x03
    4fcc:	21 fd       	sbrc	r18, 1
    4fce:	03 c0       	rjmp	.+6      	; 0x4fd6 <fputc+0x16>
    4fd0:	8f ef       	ldi	r24, 0xFF	; 255
    4fd2:	9f ef       	ldi	r25, 0xFF	; 255
    4fd4:	28 c0       	rjmp	.+80     	; 0x5026 <fputc+0x66>
    4fd6:	22 ff       	sbrs	r18, 2
    4fd8:	16 c0       	rjmp	.+44     	; 0x5006 <fputc+0x46>
    4fda:	46 81       	ldd	r20, Z+6	; 0x06
    4fdc:	57 81       	ldd	r21, Z+7	; 0x07
    4fde:	24 81       	ldd	r18, Z+4	; 0x04
    4fe0:	35 81       	ldd	r19, Z+5	; 0x05
    4fe2:	42 17       	cp	r20, r18
    4fe4:	53 07       	cpc	r21, r19
    4fe6:	44 f4       	brge	.+16     	; 0x4ff8 <fputc+0x38>
    4fe8:	a0 81       	ld	r26, Z
    4fea:	b1 81       	ldd	r27, Z+1	; 0x01
    4fec:	9d 01       	movw	r18, r26
    4fee:	2f 5f       	subi	r18, 0xFF	; 255
    4ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff2:	31 83       	std	Z+1, r19	; 0x01
    4ff4:	20 83       	st	Z, r18
    4ff6:	8c 93       	st	X, r24
    4ff8:	26 81       	ldd	r18, Z+6	; 0x06
    4ffa:	37 81       	ldd	r19, Z+7	; 0x07
    4ffc:	2f 5f       	subi	r18, 0xFF	; 255
    4ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    5000:	37 83       	std	Z+7, r19	; 0x07
    5002:	26 83       	std	Z+6, r18	; 0x06
    5004:	10 c0       	rjmp	.+32     	; 0x5026 <fputc+0x66>
    5006:	eb 01       	movw	r28, r22
    5008:	09 2f       	mov	r16, r25
    500a:	18 2f       	mov	r17, r24
    500c:	00 84       	ldd	r0, Z+8	; 0x08
    500e:	f1 85       	ldd	r31, Z+9	; 0x09
    5010:	e0 2d       	mov	r30, r0
    5012:	09 95       	icall
    5014:	89 2b       	or	r24, r25
    5016:	e1 f6       	brne	.-72     	; 0x4fd0 <fputc+0x10>
    5018:	8e 81       	ldd	r24, Y+6	; 0x06
    501a:	9f 81       	ldd	r25, Y+7	; 0x07
    501c:	01 96       	adiw	r24, 0x01	; 1
    501e:	9f 83       	std	Y+7, r25	; 0x07
    5020:	8e 83       	std	Y+6, r24	; 0x06
    5022:	81 2f       	mov	r24, r17
    5024:	90 2f       	mov	r25, r16
    5026:	df 91       	pop	r29
    5028:	cf 91       	pop	r28
    502a:	1f 91       	pop	r17
    502c:	0f 91       	pop	r16
    502e:	08 95       	ret

00005030 <sprintf>:
    5030:	0f 93       	push	r16
    5032:	1f 93       	push	r17
    5034:	cf 93       	push	r28
    5036:	df 93       	push	r29
    5038:	cd b7       	in	r28, 0x3d	; 61
    503a:	de b7       	in	r29, 0x3e	; 62
    503c:	2e 97       	sbiw	r28, 0x0e	; 14
    503e:	0f b6       	in	r0, 0x3f	; 63
    5040:	f8 94       	cli
    5042:	de bf       	out	0x3e, r29	; 62
    5044:	0f be       	out	0x3f, r0	; 63
    5046:	cd bf       	out	0x3d, r28	; 61
    5048:	0d 89       	ldd	r16, Y+21	; 0x15
    504a:	1e 89       	ldd	r17, Y+22	; 0x16
    504c:	86 e0       	ldi	r24, 0x06	; 6
    504e:	8c 83       	std	Y+4, r24	; 0x04
    5050:	1a 83       	std	Y+2, r17	; 0x02
    5052:	09 83       	std	Y+1, r16	; 0x01
    5054:	8f ef       	ldi	r24, 0xFF	; 255
    5056:	9f e7       	ldi	r25, 0x7F	; 127
    5058:	9e 83       	std	Y+6, r25	; 0x06
    505a:	8d 83       	std	Y+5, r24	; 0x05
    505c:	ae 01       	movw	r20, r28
    505e:	47 5e       	subi	r20, 0xE7	; 231
    5060:	5f 4f       	sbci	r21, 0xFF	; 255
    5062:	6f 89       	ldd	r22, Y+23	; 0x17
    5064:	78 8d       	ldd	r23, Y+24	; 0x18
    5066:	ce 01       	movw	r24, r28
    5068:	01 96       	adiw	r24, 0x01	; 1
    506a:	dc d9       	rcall	.-3144   	; 0x4424 <vfprintf>
    506c:	2f 81       	ldd	r18, Y+7	; 0x07
    506e:	38 85       	ldd	r19, Y+8	; 0x08
    5070:	f8 01       	movw	r30, r16
    5072:	e2 0f       	add	r30, r18
    5074:	f3 1f       	adc	r31, r19
    5076:	10 82       	st	Z, r1
    5078:	2e 96       	adiw	r28, 0x0e	; 14
    507a:	0f b6       	in	r0, 0x3f	; 63
    507c:	f8 94       	cli
    507e:	de bf       	out	0x3e, r29	; 62
    5080:	0f be       	out	0x3f, r0	; 63
    5082:	cd bf       	out	0x3d, r28	; 61
    5084:	df 91       	pop	r29
    5086:	cf 91       	pop	r28
    5088:	1f 91       	pop	r17
    508a:	0f 91       	pop	r16
    508c:	08 95       	ret

0000508e <__ultoa_invert>:
    508e:	fa 01       	movw	r30, r20
    5090:	aa 27       	eor	r26, r26
    5092:	28 30       	cpi	r18, 0x08	; 8
    5094:	51 f1       	breq	.+84     	; 0x50ea <__ultoa_invert+0x5c>
    5096:	20 31       	cpi	r18, 0x10	; 16
    5098:	81 f1       	breq	.+96     	; 0x50fa <__ultoa_invert+0x6c>
    509a:	e8 94       	clt
    509c:	6f 93       	push	r22
    509e:	6e 7f       	andi	r22, 0xFE	; 254
    50a0:	6e 5f       	subi	r22, 0xFE	; 254
    50a2:	7f 4f       	sbci	r23, 0xFF	; 255
    50a4:	8f 4f       	sbci	r24, 0xFF	; 255
    50a6:	9f 4f       	sbci	r25, 0xFF	; 255
    50a8:	af 4f       	sbci	r26, 0xFF	; 255
    50aa:	b1 e0       	ldi	r27, 0x01	; 1
    50ac:	3e d0       	rcall	.+124    	; 0x512a <__ultoa_invert+0x9c>
    50ae:	b4 e0       	ldi	r27, 0x04	; 4
    50b0:	3c d0       	rcall	.+120    	; 0x512a <__ultoa_invert+0x9c>
    50b2:	67 0f       	add	r22, r23
    50b4:	78 1f       	adc	r23, r24
    50b6:	89 1f       	adc	r24, r25
    50b8:	9a 1f       	adc	r25, r26
    50ba:	a1 1d       	adc	r26, r1
    50bc:	68 0f       	add	r22, r24
    50be:	79 1f       	adc	r23, r25
    50c0:	8a 1f       	adc	r24, r26
    50c2:	91 1d       	adc	r25, r1
    50c4:	a1 1d       	adc	r26, r1
    50c6:	6a 0f       	add	r22, r26
    50c8:	71 1d       	adc	r23, r1
    50ca:	81 1d       	adc	r24, r1
    50cc:	91 1d       	adc	r25, r1
    50ce:	a1 1d       	adc	r26, r1
    50d0:	20 d0       	rcall	.+64     	; 0x5112 <__ultoa_invert+0x84>
    50d2:	09 f4       	brne	.+2      	; 0x50d6 <__ultoa_invert+0x48>
    50d4:	68 94       	set
    50d6:	3f 91       	pop	r19
    50d8:	2a e0       	ldi	r18, 0x0A	; 10
    50da:	26 9f       	mul	r18, r22
    50dc:	11 24       	eor	r1, r1
    50de:	30 19       	sub	r19, r0
    50e0:	30 5d       	subi	r19, 0xD0	; 208
    50e2:	31 93       	st	Z+, r19
    50e4:	de f6       	brtc	.-74     	; 0x509c <__ultoa_invert+0xe>
    50e6:	cf 01       	movw	r24, r30
    50e8:	08 95       	ret
    50ea:	46 2f       	mov	r20, r22
    50ec:	47 70       	andi	r20, 0x07	; 7
    50ee:	40 5d       	subi	r20, 0xD0	; 208
    50f0:	41 93       	st	Z+, r20
    50f2:	b3 e0       	ldi	r27, 0x03	; 3
    50f4:	0f d0       	rcall	.+30     	; 0x5114 <__ultoa_invert+0x86>
    50f6:	c9 f7       	brne	.-14     	; 0x50ea <__ultoa_invert+0x5c>
    50f8:	f6 cf       	rjmp	.-20     	; 0x50e6 <__ultoa_invert+0x58>
    50fa:	46 2f       	mov	r20, r22
    50fc:	4f 70       	andi	r20, 0x0F	; 15
    50fe:	40 5d       	subi	r20, 0xD0	; 208
    5100:	4a 33       	cpi	r20, 0x3A	; 58
    5102:	18 f0       	brcs	.+6      	; 0x510a <__ultoa_invert+0x7c>
    5104:	49 5d       	subi	r20, 0xD9	; 217
    5106:	31 fd       	sbrc	r19, 1
    5108:	40 52       	subi	r20, 0x20	; 32
    510a:	41 93       	st	Z+, r20
    510c:	02 d0       	rcall	.+4      	; 0x5112 <__ultoa_invert+0x84>
    510e:	a9 f7       	brne	.-22     	; 0x50fa <__ultoa_invert+0x6c>
    5110:	ea cf       	rjmp	.-44     	; 0x50e6 <__ultoa_invert+0x58>
    5112:	b4 e0       	ldi	r27, 0x04	; 4
    5114:	a6 95       	lsr	r26
    5116:	97 95       	ror	r25
    5118:	87 95       	ror	r24
    511a:	77 95       	ror	r23
    511c:	67 95       	ror	r22
    511e:	ba 95       	dec	r27
    5120:	c9 f7       	brne	.-14     	; 0x5114 <__ultoa_invert+0x86>
    5122:	00 97       	sbiw	r24, 0x00	; 0
    5124:	61 05       	cpc	r22, r1
    5126:	71 05       	cpc	r23, r1
    5128:	08 95       	ret
    512a:	9b 01       	movw	r18, r22
    512c:	ac 01       	movw	r20, r24
    512e:	0a 2e       	mov	r0, r26
    5130:	06 94       	lsr	r0
    5132:	57 95       	ror	r21
    5134:	47 95       	ror	r20
    5136:	37 95       	ror	r19
    5138:	27 95       	ror	r18
    513a:	ba 95       	dec	r27
    513c:	c9 f7       	brne	.-14     	; 0x5130 <__ultoa_invert+0xa2>
    513e:	62 0f       	add	r22, r18
    5140:	73 1f       	adc	r23, r19
    5142:	84 1f       	adc	r24, r20
    5144:	95 1f       	adc	r25, r21
    5146:	a0 1d       	adc	r26, r0
    5148:	08 95       	ret

0000514a <__do_global_dtors>:
    514a:	12 e0       	ldi	r17, 0x02	; 2
    514c:	c9 ec       	ldi	r28, 0xC9	; 201
    514e:	d2 e0       	ldi	r29, 0x02	; 2
    5150:	03 c0       	rjmp	.+6      	; 0x5158 <__do_global_dtors+0xe>
    5152:	fe 01       	movw	r30, r28
    5154:	11 dd       	rcall	.-1502   	; 0x4b78 <__tablejump2__>
    5156:	21 96       	adiw	r28, 0x01	; 1
    5158:	ca 3c       	cpi	r28, 0xCA	; 202
    515a:	d1 07       	cpc	r29, r17
    515c:	d1 f7       	brne	.-12     	; 0x5152 <__do_global_dtors+0x8>
    515e:	f8 94       	cli

00005160 <__stop_program>:
    5160:	ff cf       	rjmp	.-2      	; 0x5160 <__stop_program>
