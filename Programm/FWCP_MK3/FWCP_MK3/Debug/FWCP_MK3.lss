
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c6  00800100  00005624  000056b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000597  008002c6  008002c6  0000587e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000587e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009857  00000000  00000000  00005d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001937  00000000  00000000  0000f563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034ce  00000000  00000000  00010e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fdc  00000000  00000000  00014368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001383  00000000  00000000  00015344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a52  00000000  00000000  000166c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  0001d119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0a c3       	rjmp	.+1556   	; 0x616 <__dtors_end>
       2:	00 00       	nop
       4:	32 c3       	rjmp	.+1636   	; 0x66a <__bad_interrupt>
       6:	00 00       	nop
       8:	30 c3       	rjmp	.+1632   	; 0x66a <__bad_interrupt>
       a:	00 00       	nop
       c:	2e c3       	rjmp	.+1628   	; 0x66a <__bad_interrupt>
       e:	00 00       	nop
      10:	2c c3       	rjmp	.+1624   	; 0x66a <__bad_interrupt>
      12:	00 00       	nop
      14:	2a c3       	rjmp	.+1620   	; 0x66a <__bad_interrupt>
      16:	00 00       	nop
      18:	28 c3       	rjmp	.+1616   	; 0x66a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	26 c3       	rjmp	.+1612   	; 0x66a <__bad_interrupt>
      1e:	00 00       	nop
      20:	24 c3       	rjmp	.+1608   	; 0x66a <__bad_interrupt>
      22:	00 00       	nop
      24:	22 c3       	rjmp	.+1604   	; 0x66a <__bad_interrupt>
      26:	00 00       	nop
      28:	20 c3       	rjmp	.+1600   	; 0x66a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__vector_11>
      30:	1c c3       	rjmp	.+1592   	; 0x66a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_13>
      38:	18 c3       	rjmp	.+1584   	; 0x66a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	16 c3       	rjmp	.+1580   	; 0x66a <__bad_interrupt>
      3e:	00 00       	nop
      40:	14 c3       	rjmp	.+1576   	; 0x66a <__bad_interrupt>
      42:	00 00       	nop
      44:	12 c3       	rjmp	.+1572   	; 0x66a <__bad_interrupt>
      46:	00 00       	nop
      48:	10 c3       	rjmp	.+1568   	; 0x66a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0e c3       	rjmp	.+1564   	; 0x66a <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__vector_20>
      54:	0a c3       	rjmp	.+1556   	; 0x66a <__bad_interrupt>
      56:	00 00       	nop
      58:	08 c3       	rjmp	.+1552   	; 0x66a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	06 c3       	rjmp	.+1548   	; 0x66a <__bad_interrupt>
      5e:	00 00       	nop
      60:	04 c3       	rjmp	.+1544   	; 0x66a <__bad_interrupt>
      62:	00 00       	nop
      64:	02 c3       	rjmp	.+1540   	; 0x66a <__bad_interrupt>
      66:	00 00       	nop
      68:	00 c3       	rjmp	.+1536   	; 0x66a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fe c2       	rjmp	.+1532   	; 0x66a <__bad_interrupt>
      6e:	00 00       	nop
      70:	fc c2       	rjmp	.+1528   	; 0x66a <__bad_interrupt>
      72:	00 00       	nop
      74:	fa c2       	rjmp	.+1524   	; 0x66a <__bad_interrupt>
      76:	00 00       	nop
      78:	f8 c2       	rjmp	.+1520   	; 0x66a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f6 c2       	rjmp	.+1516   	; 0x66a <__bad_interrupt>
      7e:	00 00       	nop
      80:	f4 c2       	rjmp	.+1512   	; 0x66a <__bad_interrupt>
      82:	00 00       	nop
      84:	f2 c2       	rjmp	.+1508   	; 0x66a <__bad_interrupt>
      86:	00 00       	nop
      88:	f0 c2       	rjmp	.+1504   	; 0x66a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b0 08       	sbc	r11, r0
      8e:	b2 08       	sbc	r11, r2
      90:	b2 08       	sbc	r11, r2
      92:	b2 08       	sbc	r11, r2
      94:	b2 08       	sbc	r11, r2
      96:	b2 08       	sbc	r11, r2
      98:	b2 08       	sbc	r11, r2
      9a:	ae 08       	sbc	r10, r14
      9c:	b2 08       	sbc	r11, r2
      9e:	b2 08       	sbc	r11, r2
      a0:	b2 08       	sbc	r11, r2
      a2:	b2 08       	sbc	r11, r2
      a4:	b2 08       	sbc	r11, r2
      a6:	b5 08       	sbc	r11, r5
      a8:	b4 08       	sbc	r11, r4
      aa:	9e 08       	sbc	r9, r14
      ac:	a0 08       	sbc	r10, r0
      ae:	a2 08       	sbc	r10, r2
      b0:	a4 08       	sbc	r10, r4
      b2:	a6 08       	sbc	r10, r6
      b4:	a8 08       	sbc	r10, r8
      b6:	aa 08       	sbc	r10, r10
      b8:	ac 08       	sbc	r10, r12
      ba:	b3 12       	cpse	r11, r19
      bc:	c3 12       	cpse	r12, r19
      be:	c3 12       	cpse	r12, r19
      c0:	c3 12       	cpse	r12, r19
      c2:	c3 12       	cpse	r12, r19
      c4:	c3 12       	cpse	r12, r19
      c6:	c3 12       	cpse	r12, r19
      c8:	c3 12       	cpse	r12, r19
      ca:	c3 12       	cpse	r12, r19
      cc:	c3 12       	cpse	r12, r19
      ce:	c3 12       	cpse	r12, r19
      d0:	c3 12       	cpse	r12, r19
      d2:	c3 12       	cpse	r12, r19
      d4:	c3 12       	cpse	r12, r19
      d6:	c3 12       	cpse	r12, r19
      d8:	c3 12       	cpse	r12, r19
      da:	c3 12       	cpse	r12, r19
      dc:	c3 12       	cpse	r12, r19
      de:	c3 12       	cpse	r12, r19
      e0:	c3 12       	cpse	r12, r19
      e2:	c3 12       	cpse	r12, r19
      e4:	c3 12       	cpse	r12, r19
      e6:	c3 12       	cpse	r12, r19
      e8:	c3 12       	cpse	r12, r19
      ea:	c3 12       	cpse	r12, r19
      ec:	c3 12       	cpse	r12, r19
      ee:	c3 12       	cpse	r12, r19
      f0:	c3 12       	cpse	r12, r19
      f2:	c3 12       	cpse	r12, r19
      f4:	c3 12       	cpse	r12, r19
      f6:	c3 12       	cpse	r12, r19
      f8:	c3 12       	cpse	r12, r19
      fa:	c3 12       	cpse	r12, r19
      fc:	c3 12       	cpse	r12, r19
      fe:	c3 12       	cpse	r12, r19
     100:	c3 12       	cpse	r12, r19
     102:	c3 12       	cpse	r12, r19
     104:	c3 12       	cpse	r12, r19
     106:	c3 12       	cpse	r12, r19
     108:	c3 12       	cpse	r12, r19
     10a:	c3 12       	cpse	r12, r19
     10c:	c3 12       	cpse	r12, r19
     10e:	c3 12       	cpse	r12, r19
     110:	c3 12       	cpse	r12, r19
     112:	c3 12       	cpse	r12, r19
     114:	c3 12       	cpse	r12, r19
     116:	c3 12       	cpse	r12, r19
     118:	c3 12       	cpse	r12, r19
     11a:	c3 12       	cpse	r12, r19
     11c:	c3 12       	cpse	r12, r19
     11e:	c3 12       	cpse	r12, r19
     120:	c3 12       	cpse	r12, r19
     122:	8f 12       	cpse	r8, r31
     124:	c3 12       	cpse	r12, r19
     126:	c3 12       	cpse	r12, r19
     128:	c3 12       	cpse	r12, r19
     12a:	c3 12       	cpse	r12, r19
     12c:	c3 12       	cpse	r12, r19
     12e:	c3 12       	cpse	r12, r19
     130:	c3 12       	cpse	r12, r19
     132:	5c 12       	cpse	r5, r28
     134:	58 12       	cpse	r5, r24
     136:	c3 12       	cpse	r12, r19
     138:	7c 12       	cpse	r7, r28
     13a:	c3 12       	cpse	r12, r19
     13c:	c3 12       	cpse	r12, r19
     13e:	69 12       	cpse	r6, r25
     140:	c3 12       	cpse	r12, r19
     142:	c3 12       	cpse	r12, r19
     144:	a4 12       	cpse	r10, r20
     146:	e0 19       	sub	r30, r0
     148:	06 1a       	sub	r0, r22
     14a:	2d 1a       	sub	r2, r29
     14c:	55 1a       	sub	r5, r21
     14e:	7c 1a       	sub	r7, r28
     150:	a6 1a       	sub	r10, r22
     152:	cf 1a       	sub	r12, r31
     154:	f9 1a       	sub	r15, r25
     156:	70 1b       	sub	r23, r16
     158:	9a 1b       	sub	r25, r26
     15a:	05 a8       	ldd	r0, Z+53	; 0x35
     15c:	4c cd       	rjmp	.-1384   	; 0xfffffbf6 <__eeprom_end+0xff7efbf6>
     15e:	b2 d4       	rcall	.+2404   	; 0xac4 <_ZN7Display6analogEhhhh+0x9a>
     160:	4e b9       	out	0x0e, r20	; 14
     162:	38 36       	cpi	r19, 0x68	; 104
     164:	a9 02       	muls	r26, r25
     166:	0c 50       	subi	r16, 0x0C	; 12
     168:	b9 91       	ld	r27, Y+
     16a:	86 88       	ldd	r8, Z+22	; 0x16
     16c:	08 3c       	cpi	r16, 0xC8	; 200
     16e:	a6 aa       	std	Z+54, r10	; 0x36
     170:	aa 2a       	or	r10, r26
     172:	be 00       	.word	0x00be	; ????
     174:	00 00       	nop
     176:	80 3f       	cpi	r24, 0xF0	; 240
     178:	07 63       	ori	r16, 0x37	; 55
     17a:	42 36       	cpi	r20, 0x62	; 98
     17c:	b7 9b       	sbis	0x16, 7	; 22
     17e:	d8 a7       	std	Y+40, r29	; 0x28
     180:	1a 39       	cpi	r17, 0x9A	; 154
     182:	68 56       	subi	r22, 0x68	; 104
     184:	18 ae       	std	Y+56, r1	; 0x38
     186:	ba ab       	std	Y+50, r27	; 0x32
     188:	55 8c       	ldd	r5, Z+29	; 0x1d
     18a:	1d 3c       	cpi	r17, 0xCD	; 205
     18c:	b7 cc       	rjmp	.-1682   	; 0xfffffafc <__eeprom_end+0xff7efafc>
     18e:	57 63       	ori	r21, 0x37	; 55
     190:	bd 6d       	ori	r27, 0xDD	; 221
     192:	ed fd       	.word	0xfded	; ????
     194:	75 3e       	cpi	r23, 0xE5	; 229
     196:	f6 17       	cp	r31, r22
     198:	72 31       	cpi	r23, 0x12	; 18
     19a:	bf 00       	.word	0x00bf	; ????
     19c:	00 00       	nop
     19e:	80 3f       	cpi	r24, 0xF0	; 240
     1a0:	08 00       	.word	0x0008	; ????
     1a2:	00 00       	nop
     1a4:	be 92       	st	-X, r11
     1a6:	24 49       	sbci	r18, 0x94	; 148
     1a8:	12 3e       	cpi	r17, 0xE2	; 226
     1aa:	ab aa       	std	Y+51, r10	; 0x33
     1ac:	aa 2a       	or	r10, r26
     1ae:	be cd       	rjmp	.-1156   	; 0xfffffd2c <__eeprom_end+0xff7efd2c>
     1b0:	cc cc       	rjmp	.-1640   	; 0xfffffb4a <__eeprom_end+0xff7efb4a>
     1b2:	4c 3e       	cpi	r20, 0xEC	; 236
     1b4:	00 00       	nop
     1b6:	00 80       	ld	r0, Z
     1b8:	be ab       	std	Y+54, r27	; 0x36
     1ba:	aa aa       	std	Y+50, r10	; 0x32
     1bc:	aa 3e       	cpi	r26, 0xEA	; 234
     1be:	00 00       	nop
     1c0:	00 00       	nop
     1c2:	bf 00       	.word	0x00bf	; ????
     1c4:	00 00       	nop
     1c6:	80 3f       	cpi	r24, 0xF0	; 240
     1c8:	00 00       	nop
     1ca:	00 00       	nop
     1cc:	00 08       	sbc	r0, r0
     1ce:	41 78       	andi	r20, 0x81	; 129
     1d0:	d3 bb       	out	0x13, r29	; 19
     1d2:	43 87       	std	Z+11, r20	; 0x0b
     1d4:	d1 13       	cpse	r29, r17
     1d6:	3d 19       	sub	r19, r13
     1d8:	0e 3c       	cpi	r16, 0xCE	; 206
     1da:	c3 bd       	out	0x23, r28	; 35
     1dc:	42 82       	std	Z+2, r4	; 0x02
     1de:	ad 2b       	or	r26, r29
     1e0:	3e 68       	ori	r19, 0x8E	; 142
     1e2:	ec 82       	std	Y+4, r14	; 0x04
     1e4:	76 be       	out	0x36, r7	; 54
     1e6:	d9 8f       	std	Y+25, r29	; 0x19
     1e8:	e1 a9       	ldd	r30, Z+49	; 0x31
     1ea:	3e 4c       	sbci	r19, 0xCE	; 206
     1ec:	80 ef       	ldi	r24, 0xF0	; 240
     1ee:	ff be       	out	0x3f, r15	; 63
     1f0:	01 c4       	rjmp	.+2050   	; 0x9f4 <_ZN7Display16draw_number16x16Ehhh+0xbe>
     1f2:	ff 7f       	andi	r31, 0xFF	; 255
     1f4:	3f 00       	.word	0x003f	; ????
     1f6:	00 00       	nop
	...

000001fa <__trampolines_end>:
     1fa:	00 e0       	ldi	r16, 0x00	; 0
     1fc:	f8 fc       	.word	0xfcf8	; ????
     1fe:	fe 1e       	adc	r15, r30
     200:	07 07       	cpc	r16, r23
     202:	07 07       	cpc	r16, r23
     204:	1e fe       	.word	0xfe1e	; ????
     206:	fc f8       	.word	0xf8fc	; ????
     208:	f0 00       	.word	0x00f0	; ????
     20a:	00 07       	cpc	r16, r16
     20c:	0f 3f       	cpi	r16, 0xFF	; 255
     20e:	3f 7c       	andi	r19, 0xCF	; 207
     210:	70 70       	andi	r23, 0x00	; 0
     212:	70 70       	andi	r23, 0x00	; 0
     214:	7c 3f       	cpi	r23, 0xFC	; 252
     216:	1f 1f       	adc	r17, r31
     218:	07 00       	.word	0x0007	; ????
     21a:	00 00       	nop
     21c:	00 06       	cpc	r0, r16
     21e:	07 07       	cpc	r16, r23
     220:	ff ff       	.word	0xffff	; ????
     222:	ff ff       	.word	0xffff	; ????
	...
     230:	7f 7f       	andi	r23, 0xFF	; 255
     232:	7f 7f       	andi	r23, 0xFF	; 255
     234:	00 00       	nop
     236:	00 00       	nop
     238:	00 00       	nop
     23a:	00 38       	cpi	r16, 0x80	; 128
     23c:	3c 3e       	cpi	r19, 0xEC	; 236
     23e:	3e 0f       	add	r19, r30
     240:	07 07       	cpc	r16, r23
     242:	07 cf       	rjmp	.-498    	; 0x52 <__SREG__+0x13>
     244:	ff fe       	.word	0xfeff	; ????
     246:	fe 38       	cpi	r31, 0x8E	; 142
     248:	00 00       	nop
     24a:	00 40       	sbci	r16, 0x00	; 0
     24c:	40 60       	ori	r20, 0x00	; 0
     24e:	70 78       	andi	r23, 0x80	; 128
     250:	7c 7e       	andi	r23, 0xEC	; 236
     252:	7f 77       	andi	r23, 0x7F	; 127
     254:	73 71       	andi	r23, 0x13	; 19
     256:	70 70       	andi	r23, 0x00	; 0
     258:	00 00       	nop
     25a:	00 18       	sub	r0, r0
     25c:	1c 1e       	adc	r1, r28
     25e:	1e 0f       	add	r17, r30
     260:	c7 c7       	rjmp	.+3982   	; 0x11f0 <_ZN7LSM303DC1Ev+0x6>
     262:	e7 ff       	sbrs	r30, 7
     264:	fe be       	out	0x3e, r15	; 62
     266:	9c 00       	.word	0x009c	; ????
     268:	00 00       	nop
     26a:	00 0c       	add	r0, r0
     26c:	1c 3c       	cpi	r17, 0xCC	; 204
     26e:	3c 78       	andi	r19, 0x8C	; 140
     270:	70 70       	andi	r23, 0x00	; 0
     272:	70 79       	andi	r23, 0x90	; 144
     274:	7f 3f       	cpi	r23, 0xFF	; 255
     276:	1f 0f       	add	r17, r31
     278:	00 00       	nop
     27a:	00 00       	nop
     27c:	80 c0       	rjmp	.+256    	; 0x37e <_ZL7font5x8+0x44>
     27e:	e0 70       	andi	r30, 0x00	; 0
     280:	38 1c       	adc	r3, r8
     282:	1e ff       	.word	0xff1e	; ????
     284:	ff ff       	.word	0xffff	; ????
     286:	ff 00       	.word	0x00ff	; ????
     288:	00 00       	nop
     28a:	06 07       	cpc	r16, r22
     28c:	07 07       	cpc	r16, r23
     28e:	06 06       	cpc	r0, r22
     290:	06 06       	cpc	r0, r22
     292:	06 7f       	andi	r16, 0xF6	; 246
     294:	7f 7f       	andi	r23, 0xFF	; 255
     296:	7f 06       	cpc	r7, r31
     298:	06 00       	.word	0x0006	; ????
     29a:	00 00       	nop
     29c:	00 00       	nop
     29e:	f0 ff       	sbrs	r31, 0
     2a0:	ff ff       	.word	0xffff	; ????
     2a2:	e7 e7       	ldi	r30, 0x77	; 119
     2a4:	e7 e7       	ldi	r30, 0x77	; 119
     2a6:	c7 87       	std	Z+15, r28	; 0x0f
     2a8:	00 00       	nop
     2aa:	00 00       	nop
     2ac:	38 78       	andi	r19, 0x88	; 136
     2ae:	71 70       	andi	r23, 0x01	; 1
     2b0:	70 70       	andi	r23, 0x00	; 0
     2b2:	70 70       	andi	r23, 0x00	; 0
     2b4:	39 3f       	cpi	r19, 0xF9	; 249
     2b6:	3f 1f       	adc	r19, r31
     2b8:	0f 00       	.word	0x000f	; ????
     2ba:	00 80       	ld	r0, Z
     2bc:	e0 f0       	brcs	.+56     	; 0x2f6 <__trampolines_end+0xfc>
     2be:	f8 fc       	.word	0xfcf8	; ????
     2c0:	7f 7f       	andi	r23, 0xFF	; 255
     2c2:	6f 67       	ori	r22, 0x7F	; 127
     2c4:	e1 e1       	ldi	r30, 0x11	; 17
     2c6:	c0 80       	ld	r12, Z
     2c8:	00 00       	nop
     2ca:	00 0f       	add	r16, r16
     2cc:	1f 3f       	cpi	r17, 0xFF	; 255
     2ce:	3f 78       	andi	r19, 0x8F	; 143
     2d0:	70 70       	andi	r23, 0x00	; 0
     2d2:	70 70       	andi	r23, 0x00	; 0
     2d4:	78 3f       	cpi	r23, 0xF8	; 248
     2d6:	3f 1f       	adc	r19, r31
     2d8:	0f 00       	.word	0x000f	; ????
     2da:	00 07       	cpc	r16, r16
     2dc:	07 07       	cpc	r16, r23
     2de:	07 07       	cpc	r16, r23
     2e0:	c7 e7       	ldi	r28, 0x77	; 119
     2e2:	f7 ff       	sbrs	r31, 7
     2e4:	7f 3f       	cpi	r23, 0xFF	; 255
     2e6:	1f 07       	cpc	r17, r31
     2e8:	03 01       	movw	r0, r6
     2ea:	00 20       	and	r0, r0
     2ec:	38 7c       	andi	r19, 0xC8	; 200
     2ee:	7e 3f       	cpi	r23, 0xFE	; 254
     2f0:	0f 07       	cpc	r16, r31
     2f2:	03 00       	.word	0x0003	; ????
	...
     2fc:	00 1c       	adc	r0, r0
     2fe:	be fe       	.word	0xfebe	; ????
     300:	ff e7       	ldi	r31, 0x7F	; 127
     302:	c3 c3       	rjmp	.+1926   	; 0xa8a <_ZN7Display6analogEhhhh+0x60>
     304:	e7 ff       	sbrs	r30, 7
     306:	fe be       	out	0x3e, r15	; 62
     308:	1c 00       	.word	0x001c	; ????
     30a:	00 00       	nop
     30c:	0e 3f       	cpi	r16, 0xFE	; 254
     30e:	3f 7f       	andi	r19, 0xFF	; 255
     310:	71 60       	ori	r23, 0x01	; 1
     312:	60 60       	ori	r22, 0x00	; 0
     314:	71 7f       	andi	r23, 0xF1	; 241
     316:	3f 3f       	cpi	r19, 0xFF	; 255
     318:	0f 00       	.word	0x000f	; ????
     31a:	00 78       	andi	r16, 0x80	; 128
     31c:	fc fe       	.word	0xfefc	; ????
     31e:	fe 8f       	std	Y+30, r31	; 0x1e
     320:	07 07       	cpc	r16, r23
     322:	07 07       	cpc	r16, r23
     324:	8f fe       	.word	0xfe8f	; ????
     326:	fe fc       	.word	0xfcfe	; ????
     328:	f8 00       	.word	0x00f8	; ????
     32a:	00 00       	nop
     32c:	00 01       	movw	r0, r0
     32e:	43 43       	sbci	r20, 0x33	; 51
     330:	73 7b       	andi	r23, 0xB3	; 179
     332:	7f 7f       	andi	r23, 0xFF	; 255
     334:	1f 0f       	add	r17, r31
     336:	07 03       	mulsu	r16, r23
	...

0000033a <_ZL7font5x8>:
     33a:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     34a:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     35a:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     36a:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     37a:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     38a:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     39a:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     3aa:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     3ba:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     3ca:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     3da:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     3ea:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     3fa:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     40a:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     41a:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     42a:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     43a:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     44a:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     45a:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     46a:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     47a:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     48a:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     49a:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     4aa:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     4ba:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     4ca:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     4da:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     4ea:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     4fa:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     50a:	00 10 08 08 10 08                                   ......

00000510 <__c.2179>:
     510:	6e 61 6e 00                                         nan.

00000514 <__c.2177>:
     514:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     524:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     534:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     544:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     554:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     564:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     574:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     584:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     594:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     5b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     5c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     5d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     5e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     5f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     604:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000612 <__ctors_start>:
     612:	dd 1d       	adc	r29, r13

00000614 <__ctors_end>:
     614:	04 1e       	adc	r0, r20

00000616 <__dtors_end>:
     616:	11 24       	eor	r1, r1
     618:	1f be       	out	0x3f, r1	; 63
     61a:	cf ef       	ldi	r28, 0xFF	; 255
     61c:	d0 e4       	ldi	r29, 0x40	; 64
     61e:	de bf       	out	0x3e, r29	; 62
     620:	cd bf       	out	0x3d, r28	; 61

00000622 <__do_copy_data>:
     622:	12 e0       	ldi	r17, 0x02	; 2
     624:	a0 e0       	ldi	r26, 0x00	; 0
     626:	b1 e0       	ldi	r27, 0x01	; 1
     628:	e4 e2       	ldi	r30, 0x24	; 36
     62a:	f6 e5       	ldi	r31, 0x56	; 86
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	0b bf       	out	0x3b, r16	; 59
     630:	02 c0       	rjmp	.+4      	; 0x636 <__do_copy_data+0x14>
     632:	07 90       	elpm	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	a6 3c       	cpi	r26, 0xC6	; 198
     638:	b1 07       	cpc	r27, r17
     63a:	d9 f7       	brne	.-10     	; 0x632 <__do_copy_data+0x10>

0000063c <__do_clear_bss>:
     63c:	28 e0       	ldi	r18, 0x08	; 8
     63e:	a6 ec       	ldi	r26, 0xC6	; 198
     640:	b2 e0       	ldi	r27, 0x02	; 2
     642:	01 c0       	rjmp	.+2      	; 0x646 <.do_clear_bss_start>

00000644 <.do_clear_bss_loop>:
     644:	1d 92       	st	X+, r1

00000646 <.do_clear_bss_start>:
     646:	ad 35       	cpi	r26, 0x5D	; 93
     648:	b2 07       	cpc	r27, r18
     64a:	e1 f7       	brne	.-8      	; 0x644 <.do_clear_bss_loop>

0000064c <__do_global_ctors>:
     64c:	13 e0       	ldi	r17, 0x03	; 3
     64e:	ca e0       	ldi	r28, 0x0A	; 10
     650:	d3 e0       	ldi	r29, 0x03	; 3
     652:	04 c0       	rjmp	.+8      	; 0x65c <__do_global_ctors+0x10>
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	fe 01       	movw	r30, r28
     658:	0e 94 1d 28 	call	0x503a	; 0x503a <__tablejump2__>
     65c:	c9 30       	cpi	r28, 0x09	; 9
     65e:	d1 07       	cpc	r29, r17
     660:	c9 f7       	brne	.-14     	; 0x654 <__do_global_ctors+0x8>
     662:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <main>
     666:	0c 94 06 2b 	jmp	0x560c	; 0x560c <__do_global_dtors>

0000066a <__bad_interrupt>:
     66a:	ca cc       	rjmp	.-1644   	; 0x0 <__vectors>

0000066c <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     66c:	9c 5f       	subi	r25, 0xFC	; 252
     66e:	5a c4       	rjmp	.+2228   	; 0xf24 <_ZN3I2CD1Ev>
     670:	08 95       	ret

00000672 <_ZN7Display10clearFrameEv>:
     672:	fc 01       	movw	r30, r24
     674:	9c 5f       	subi	r25, 0xFC	; 252
     676:	11 92       	st	Z+, r1
     678:	e8 17       	cp	r30, r24
     67a:	f9 07       	cpc	r31, r25
     67c:	e1 f7       	brne	.-8      	; 0x676 <_ZN7Display10clearFrameEv+0x4>
     67e:	08 95       	ret

00000680 <_ZN7Display15ssd1306_commandEh>:
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	16 2f       	mov	r17, r22
     688:	ec 01       	movw	r28, r24
     68a:	dc 5f       	subi	r29, 0xFC	; 252
     68c:	ce 01       	movw	r24, r28
     68e:	4b d4       	rcall	.+2198   	; 0xf26 <_ZN3I2C9twi_startEv>
     690:	68 e7       	ldi	r22, 0x78	; 120
     692:	ce 01       	movw	r24, r28
     694:	50 d4       	rcall	.+2208   	; 0xf36 <_ZN3I2C9twi_writeEh>
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	ce 01       	movw	r24, r28
     69a:	4d d4       	rcall	.+2202   	; 0xf36 <_ZN3I2C9twi_writeEh>
     69c:	61 2f       	mov	r22, r17
     69e:	ce 01       	movw	r24, r28
     6a0:	4a d4       	rcall	.+2196   	; 0xf36 <_ZN3I2C9twi_writeEh>
     6a2:	ce 01       	movw	r24, r28
     6a4:	44 d4       	rcall	.+2184   	; 0xf2e <_ZN3I2C8twi_stopEv>
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	08 95       	ret

000006ae <_ZN7Display17InitializeDisplayEv>:
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ec 01       	movw	r28, r24
     6b4:	6e ea       	ldi	r22, 0xAE	; 174
     6b6:	e4 df       	rcall	.-56     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6b8:	65 ed       	ldi	r22, 0xD5	; 213
     6ba:	ce 01       	movw	r24, r28
     6bc:	e1 df       	rcall	.-62     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6be:	60 e8       	ldi	r22, 0x80	; 128
     6c0:	ce 01       	movw	r24, r28
     6c2:	de df       	rcall	.-68     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6c4:	68 ea       	ldi	r22, 0xA8	; 168
     6c6:	ce 01       	movw	r24, r28
     6c8:	db df       	rcall	.-74     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6ca:	6f e3       	ldi	r22, 0x3F	; 63
     6cc:	ce 01       	movw	r24, r28
     6ce:	d8 df       	rcall	.-80     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6d0:	63 ed       	ldi	r22, 0xD3	; 211
     6d2:	ce 01       	movw	r24, r28
     6d4:	d5 df       	rcall	.-86     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	ce 01       	movw	r24, r28
     6da:	d2 df       	rcall	.-92     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6dc:	60 e4       	ldi	r22, 0x40	; 64
     6de:	ce 01       	movw	r24, r28
     6e0:	cf df       	rcall	.-98     	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6e2:	6d e8       	ldi	r22, 0x8D	; 141
     6e4:	ce 01       	movw	r24, r28
     6e6:	cc df       	rcall	.-104    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6e8:	64 e1       	ldi	r22, 0x14	; 20
     6ea:	ce 01       	movw	r24, r28
     6ec:	c9 df       	rcall	.-110    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6ee:	60 e2       	ldi	r22, 0x20	; 32
     6f0:	ce 01       	movw	r24, r28
     6f2:	c6 df       	rcall	.-116    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	ce 01       	movw	r24, r28
     6f8:	c3 df       	rcall	.-122    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     6fa:	61 ea       	ldi	r22, 0xA1	; 161
     6fc:	ce 01       	movw	r24, r28
     6fe:	c0 df       	rcall	.-128    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     700:	68 ec       	ldi	r22, 0xC8	; 200
     702:	ce 01       	movw	r24, r28
     704:	bd df       	rcall	.-134    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     706:	6a ed       	ldi	r22, 0xDA	; 218
     708:	ce 01       	movw	r24, r28
     70a:	ba df       	rcall	.-140    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     70c:	62 e1       	ldi	r22, 0x12	; 18
     70e:	ce 01       	movw	r24, r28
     710:	b7 df       	rcall	.-146    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     712:	61 e8       	ldi	r22, 0x81	; 129
     714:	ce 01       	movw	r24, r28
     716:	b4 df       	rcall	.-152    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     718:	6f ec       	ldi	r22, 0xCF	; 207
     71a:	ce 01       	movw	r24, r28
     71c:	b1 df       	rcall	.-158    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     71e:	69 ed       	ldi	r22, 0xD9	; 217
     720:	ce 01       	movw	r24, r28
     722:	ae df       	rcall	.-164    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     724:	61 ef       	ldi	r22, 0xF1	; 241
     726:	ce 01       	movw	r24, r28
     728:	ab df       	rcall	.-170    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     72a:	6b ed       	ldi	r22, 0xDB	; 219
     72c:	ce 01       	movw	r24, r28
     72e:	a8 df       	rcall	.-176    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     730:	60 e4       	ldi	r22, 0x40	; 64
     732:	ce 01       	movw	r24, r28
     734:	a5 df       	rcall	.-182    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     736:	64 ea       	ldi	r22, 0xA4	; 164
     738:	ce 01       	movw	r24, r28
     73a:	a2 df       	rcall	.-188    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     73c:	66 ea       	ldi	r22, 0xA6	; 166
     73e:	ce 01       	movw	r24, r28
     740:	9f df       	rcall	.-194    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     742:	6f ea       	ldi	r22, 0xAF	; 175
     744:	ce 01       	movw	r24, r28
     746:	9c df       	rcall	.-200    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <_ZN7DisplayC1Ev>:
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
     754:	9c 5f       	subi	r25, 0xFC	; 252
     756:	e2 d3       	rcall	.+1988   	; 0xf1c <_ZN3I2CC1Ev>
     758:	ce 01       	movw	r24, r28
     75a:	a9 df       	rcall	.-174    	; 0x6ae <_ZN7Display17InitializeDisplayEv>
     75c:	ce 01       	movw	r24, r28
     75e:	89 df       	rcall	.-238    	; 0x672 <_ZN7Display10clearFrameEv>
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <_ZN7Display9sendFrameEv>:
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	61 e2       	ldi	r22, 0x21	; 33
     776:	84 df       	rcall	.-248    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	ce 01       	movw	r24, r28
     77c:	81 df       	rcall	.-254    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     77e:	6f e7       	ldi	r22, 0x7F	; 127
     780:	ce 01       	movw	r24, r28
     782:	7e df       	rcall	.-260    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     784:	62 e2       	ldi	r22, 0x22	; 34
     786:	ce 01       	movw	r24, r28
     788:	7b df       	rcall	.-266    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	ce 01       	movw	r24, r28
     78e:	78 df       	rcall	.-272    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     790:	67 e0       	ldi	r22, 0x07	; 7
     792:	ce 01       	movw	r24, r28
     794:	75 df       	rcall	.-278    	; 0x680 <_ZN7Display15ssd1306_commandEh>
     796:	8e 01       	movw	r16, r28
     798:	1c 5f       	subi	r17, 0xFC	; 252
     79a:	c8 01       	movw	r24, r16
     79c:	c4 d3       	rcall	.+1928   	; 0xf26 <_ZN3I2C9twi_startEv>
     79e:	68 e7       	ldi	r22, 0x78	; 120
     7a0:	c8 01       	movw	r24, r16
     7a2:	c9 d3       	rcall	.+1938   	; 0xf36 <_ZN3I2C9twi_writeEh>
     7a4:	60 e4       	ldi	r22, 0x40	; 64
     7a6:	c8 01       	movw	r24, r16
     7a8:	c6 d3       	rcall	.+1932   	; 0xf36 <_ZN3I2C9twi_writeEh>
     7aa:	78 01       	movw	r14, r16
     7ac:	69 91       	ld	r22, Y+
     7ae:	c8 01       	movw	r24, r16
     7b0:	c2 d3       	rcall	.+1924   	; 0xf36 <_ZN3I2C9twi_writeEh>
     7b2:	ce 15       	cp	r28, r14
     7b4:	df 05       	cpc	r29, r15
     7b6:	d1 f7       	brne	.-12     	; 0x7ac <_ZN7Display9sendFrameEv+0x46>
     7b8:	c8 01       	movw	r24, r16
     7ba:	b9 d3       	rcall	.+1906   	; 0xf2e <_ZN3I2C8twi_stopEv>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	08 95       	ret

000007ca <_ZN7Display9drawPixelEhhh>:
     7ca:	66 23       	and	r22, r22
     7cc:	ac f1       	brlt	.+106    	; 0x838 <_ZN7Display9drawPixelEhhh+0x6e>
     7ce:	40 34       	cpi	r20, 0x40	; 64
     7d0:	98 f5       	brcc	.+102    	; 0x838 <_ZN7Display9drawPixelEhhh+0x6e>
     7d2:	21 11       	cpse	r18, r1
     7d4:	19 c0       	rjmp	.+50     	; 0x808 <_ZN7Display9drawPixelEhhh+0x3e>
     7d6:	24 2f       	mov	r18, r20
     7d8:	26 95       	lsr	r18
     7da:	26 95       	lsr	r18
     7dc:	26 95       	lsr	r18
     7de:	50 e8       	ldi	r21, 0x80	; 128
     7e0:	25 9f       	mul	r18, r21
     7e2:	90 01       	movw	r18, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	26 0f       	add	r18, r22
     7e8:	31 1d       	adc	r19, r1
     7ea:	fc 01       	movw	r30, r24
     7ec:	e2 0f       	add	r30, r18
     7ee:	f3 1f       	adc	r31, r19
     7f0:	47 70       	andi	r20, 0x07	; 7
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <_ZN7Display9drawPixelEhhh+0x32>
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	4a 95       	dec	r20
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <_ZN7Display9drawPixelEhhh+0x2e>
     800:	90 81       	ld	r25, Z
     802:	89 2b       	or	r24, r25
     804:	80 83       	st	Z, r24
     806:	08 95       	ret
     808:	24 2f       	mov	r18, r20
     80a:	26 95       	lsr	r18
     80c:	26 95       	lsr	r18
     80e:	26 95       	lsr	r18
     810:	30 e8       	ldi	r19, 0x80	; 128
     812:	23 9f       	mul	r18, r19
     814:	f0 01       	movw	r30, r0
     816:	11 24       	eor	r1, r1
     818:	e6 0f       	add	r30, r22
     81a:	f1 1d       	adc	r31, r1
     81c:	e8 0f       	add	r30, r24
     81e:	f9 1f       	adc	r31, r25
     820:	47 70       	andi	r20, 0x07	; 7
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <_ZN7Display9drawPixelEhhh+0x62>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	4a 95       	dec	r20
     82e:	e2 f7       	brpl	.-8      	; 0x828 <_ZN7Display9drawPixelEhhh+0x5e>
     830:	80 95       	com	r24
     832:	90 81       	ld	r25, Z
     834:	89 23       	and	r24, r25
     836:	80 83       	st	Z, r24
     838:	08 95       	ret

0000083a <_ZN7Display9drawVLineEhhh>:
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	22 23       	and	r18, r18
     846:	69 f0       	breq	.+26     	; 0x862 <_ZN7Display9drawVLineEhhh+0x28>
     848:	c4 2f       	mov	r28, r20
     84a:	f6 2e       	mov	r15, r22
     84c:	8c 01       	movw	r16, r24
     84e:	d2 2f       	mov	r29, r18
     850:	d4 0f       	add	r29, r20
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	4c 2f       	mov	r20, r28
     856:	6f 2d       	mov	r22, r15
     858:	c8 01       	movw	r24, r16
     85a:	b7 df       	rcall	.-146    	; 0x7ca <_ZN7Display9drawPixelEhhh>
     85c:	cf 5f       	subi	r28, 0xFF	; 255
     85e:	cd 13       	cpse	r28, r29
     860:	f8 cf       	rjmp	.-16     	; 0x852 <_ZN7Display9drawVLineEhhh+0x18>
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	08 95       	ret

0000086e <_ZN7Display9drawHLineEhhh>:
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	22 23       	and	r18, r18
     87a:	69 f0       	breq	.+26     	; 0x896 <_ZN7Display9drawHLineEhhh+0x28>
     87c:	f4 2e       	mov	r15, r20
     87e:	c6 2f       	mov	r28, r22
     880:	8c 01       	movw	r16, r24
     882:	d2 2f       	mov	r29, r18
     884:	d6 0f       	add	r29, r22
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	4f 2d       	mov	r20, r15
     88a:	6c 2f       	mov	r22, r28
     88c:	c8 01       	movw	r24, r16
     88e:	9d df       	rcall	.-198    	; 0x7ca <_ZN7Display9drawPixelEhhh>
     890:	cf 5f       	subi	r28, 0xFF	; 255
     892:	cd 13       	cpse	r28, r29
     894:	f8 cf       	rjmp	.-16     	; 0x886 <_ZN7Display9drawHLineEhhh+0x18>
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	08 95       	ret

000008a2 <_ZN7Display9draw_ASCIEhhh>:
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	61 32       	cpi	r22, 0x21	; 33
     8ac:	08 f4       	brcc	.+2      	; 0x8b0 <_ZN7Display9draw_ASCIEhhh+0xe>
     8ae:	3e c0       	rjmp	.+124    	; 0x92c <_ZN7Display9draw_ASCIEhhh+0x8a>
     8b0:	a4 2f       	mov	r26, r20
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	02 2f       	mov	r16, r18
     8b6:	06 95       	lsr	r16
     8b8:	06 95       	lsr	r16
     8ba:	06 95       	lsr	r16
     8bc:	30 e8       	ldi	r19, 0x80	; 128
     8be:	03 9f       	mul	r16, r19
     8c0:	80 01       	movw	r16, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	61 52       	subi	r22, 0x21	; 33
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	fb 01       	movw	r30, r22
     8ca:	ee 0f       	add	r30, r30
     8cc:	ff 1f       	adc	r31, r31
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	e6 0f       	add	r30, r22
     8d4:	f7 1f       	adc	r31, r23
     8d6:	e6 5c       	subi	r30, 0xC6	; 198
     8d8:	fc 4f       	sbci	r31, 0xFC	; 252
     8da:	ad 01       	movw	r20, r26
     8dc:	40 0f       	add	r20, r16
     8de:	51 1f       	adc	r21, r17
     8e0:	ec 01       	movw	r28, r24
     8e2:	c4 0f       	add	r28, r20
     8e4:	d5 1f       	adc	r29, r21
     8e6:	00 58       	subi	r16, 0x80	; 128
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	a0 0f       	add	r26, r16
     8ec:	b1 1f       	adc	r27, r17
     8ee:	a8 0f       	add	r26, r24
     8f0:	b9 1f       	adc	r27, r25
     8f2:	4b 5f       	subi	r20, 0xFB	; 251
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	48 0f       	add	r20, r24
     8f8:	59 1f       	adc	r21, r25
     8fa:	27 70       	andi	r18, 0x07	; 7
     8fc:	64 91       	lpm	r22, Z
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	02 2e       	mov	r0, r18
     902:	02 c0       	rjmp	.+4      	; 0x908 <_ZN7Display9draw_ASCIEhhh+0x66>
     904:	66 0f       	add	r22, r22
     906:	77 1f       	adc	r23, r23
     908:	0a 94       	dec	r0
     90a:	e2 f7       	brpl	.-8      	; 0x904 <_ZN7Display9draw_ASCIEhhh+0x62>
     90c:	98 81       	ld	r25, Y
     90e:	96 2b       	or	r25, r22
     910:	99 93       	st	Y+, r25
     912:	67 2f       	mov	r22, r23
     914:	77 27       	eor	r23, r23
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	19 f0       	breq	.+6      	; 0x922 <_ZN7Display9draw_ASCIEhhh+0x80>
     91c:	8c 91       	ld	r24, X
     91e:	68 2b       	or	r22, r24
     920:	6c 93       	st	X, r22
     922:	31 96       	adiw	r30, 0x01	; 1
     924:	11 96       	adiw	r26, 0x01	; 1
     926:	c4 17       	cp	r28, r20
     928:	d5 07       	cpc	r29, r21
     92a:	41 f7       	brne	.-48     	; 0x8fc <_ZN7Display9draw_ASCIEhhh+0x5a>
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <_ZN7Display16draw_number16x16Ehhh>:
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	6a 30       	cpi	r22, 0x0A	; 10
     948:	08 f0       	brcs	.+2      	; 0x94c <_ZN7Display16draw_number16x16Ehhh+0x16>
     94a:	66 c0       	rjmp	.+204    	; 0xa18 <_ZN7Display16draw_number16x16Ehhh+0xe2>
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	02 2f       	mov	r16, r18
     950:	06 95       	lsr	r16
     952:	06 95       	lsr	r16
     954:	06 95       	lsr	r16
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	d8 01       	movw	r26, r16
     95a:	b6 95       	lsr	r27
     95c:	ba 2f       	mov	r27, r26
     95e:	aa 27       	eor	r26, r26
     960:	b7 95       	ror	r27
     962:	a7 95       	ror	r26
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	16 95       	lsr	r17
     96a:	10 2f       	mov	r17, r16
     96c:	00 27       	eor	r16, r16
     96e:	17 95       	ror	r17
     970:	07 95       	ror	r16
     972:	7d 01       	movw	r14, r26
     974:	30 e8       	ldi	r19, 0x80	; 128
     976:	e3 0e       	add	r14, r19
     978:	f1 1c       	adc	r15, r1
     97a:	e4 0e       	add	r14, r20
     97c:	f5 1e       	adc	r15, r21
     97e:	e8 0e       	add	r14, r24
     980:	f9 1e       	adc	r15, r25
     982:	ea 01       	movw	r28, r20
     984:	c0 0f       	add	r28, r16
     986:	d1 1f       	adc	r29, r17
     988:	60 97       	sbiw	r28, 0x10	; 16
     98a:	c8 0f       	add	r28, r24
     98c:	d9 1f       	adc	r29, r25
     98e:	04 0f       	add	r16, r20
     990:	15 1f       	adc	r17, r21
     992:	00 59       	subi	r16, 0x90	; 144
     994:	1f 4f       	sbci	r17, 0xFF	; 255
     996:	08 0f       	add	r16, r24
     998:	19 1f       	adc	r17, r25
     99a:	a4 0f       	add	r26, r20
     99c:	b5 1f       	adc	r27, r21
     99e:	a8 0f       	add	r26, r24
     9a0:	b9 1f       	adc	r27, r25
     9a2:	80 e2       	ldi	r24, 0x20	; 32
     9a4:	68 9f       	mul	r22, r24
     9a6:	b0 01       	movw	r22, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	27 70       	andi	r18, 0x07	; 7
     9b0:	fa 01       	movw	r30, r20
     9b2:	e6 0f       	add	r30, r22
     9b4:	f7 1f       	adc	r31, r23
     9b6:	e6 50       	subi	r30, 0x06	; 6
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	e4 91       	lpm	r30, Z
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	02 2e       	mov	r0, r18
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <_ZN7Display16draw_number16x16Ehhh+0x90>
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	0a 94       	dec	r0
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     9ca:	40 31       	cpi	r20, 0x10	; 16
     9cc:	68 f4       	brcc	.+26     	; 0x9e8 <_ZN7Display16draw_number16x16Ehhh+0xb2>
     9ce:	8c 91       	ld	r24, X
     9d0:	8e 2b       	or	r24, r30
     9d2:	8c 93       	st	X, r24
     9d4:	cf 2e       	mov	r12, r31
     9d6:	dd 24       	eor	r13, r13
     9d8:	c1 14       	cp	r12, r1
     9da:	d1 04       	cpc	r13, r1
     9dc:	89 f0       	breq	.+34     	; 0xa00 <_ZN7Display16draw_number16x16Ehhh+0xca>
     9de:	f7 01       	movw	r30, r14
     9e0:	80 81       	ld	r24, Z
     9e2:	8c 29       	or	r24, r12
     9e4:	80 83       	st	Z, r24
     9e6:	0c c0       	rjmp	.+24     	; 0xa00 <_ZN7Display16draw_number16x16Ehhh+0xca>
     9e8:	88 81       	ld	r24, Y
     9ea:	8e 2b       	or	r24, r30
     9ec:	88 83       	st	Y, r24
     9ee:	cf 2e       	mov	r12, r31
     9f0:	dd 24       	eor	r13, r13
     9f2:	c1 14       	cp	r12, r1
     9f4:	d1 04       	cpc	r13, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <_ZN7Display16draw_number16x16Ehhh+0xca>
     9f8:	f8 01       	movw	r30, r16
     9fa:	80 81       	ld	r24, Z
     9fc:	8c 29       	or	r24, r12
     9fe:	80 83       	st	Z, r24
     a00:	4f 5f       	subi	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	ff ef       	ldi	r31, 0xFF	; 255
     a06:	ef 1a       	sub	r14, r31
     a08:	ff 0a       	sbc	r15, r31
     a0a:	21 96       	adiw	r28, 0x01	; 1
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	11 96       	adiw	r26, 0x01	; 1
     a12:	40 32       	cpi	r20, 0x20	; 32
     a14:	51 05       	cpc	r21, r1
     a16:	61 f6       	brne	.-104    	; 0x9b0 <_ZN7Display16draw_number16x16Ehhh+0x7a>
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	08 95       	ret

00000a2a <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     a2a:	2f 92       	push	r2
     a2c:	3f 92       	push	r3
     a2e:	4f 92       	push	r4
     a30:	5f 92       	push	r5
     a32:	6f 92       	push	r6
     a34:	7f 92       	push	r7
     a36:	8f 92       	push	r8
     a38:	9f 92       	push	r9
     a3a:	af 92       	push	r10
     a3c:	bf 92       	push	r11
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	27 97       	sbiw	r28, 0x07	; 7
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	9f 83       	std	Y+7, r25	; 0x07
     a60:	8e 83       	std	Y+6, r24	; 0x06
     a62:	6d 83       	std	Y+5, r22	; 0x05
     a64:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     a66:	00 23       	and	r16, r16
     a68:	09 f4       	brne	.+2      	; 0xa6c <_ZN7Display6analogEhhhh+0x42>
     a6a:	26 c1       	rjmp	.+588    	; 0xcb8 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     a6c:	62 2f       	mov	r22, r18
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 ec       	ldi	r20, 0xC0	; 192
     a7e:	50 e4       	ldi	r21, 0x40	; 64
     a80:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     a84:	2b ed       	ldi	r18, 0xDB	; 219
     a86:	3f e0       	ldi	r19, 0x0F	; 15
     a88:	49 e4       	ldi	r20, 0x49	; 73
     a8a:	50 e4       	ldi	r21, 0x40	; 64
     a8c:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	44 e3       	ldi	r20, 0x34	; 52
     a96:	53 e4       	ldi	r21, 0x43	; 67
     a98:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
     a9c:	2b ed       	ldi	r18, 0xDB	; 219
     a9e:	3f e0       	ldi	r19, 0x0F	; 15
     aa0:	49 ec       	ldi	r20, 0xC9	; 201
     aa2:	5f e3       	ldi	r21, 0x3F	; 63
     aa4:	0e 94 a4 20 	call	0x4148	; 0x4148 <__subsf3>
     aa8:	6b 01       	movw	r12, r22
     aaa:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     aac:	0e 94 09 21 	call	0x4212	; 0x4212 <cos>
     ab0:	4b 01       	movw	r8, r22
     ab2:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 01       	movw	r22, r12
     ab8:	0e 94 6f 23 	call	0x46de	; 0x46de <sin>
     abc:	2b 01       	movw	r4, r22
     abe:	3c 01       	movw	r6, r24
     ac0:	00 e0       	ldi	r16, 0x00	; 0
     ac2:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     ac4:	b8 01       	movw	r22, r16
     ac6:	01 2e       	mov	r0, r17
     ac8:	00 0c       	add	r0, r0
     aca:	88 0b       	sbc	r24, r24
     acc:	99 0b       	sbc	r25, r25
     ace:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     ad2:	6b 01       	movw	r12, r22
     ad4:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     ad6:	a3 01       	movw	r20, r6
     ad8:	92 01       	movw	r18, r4
     ada:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	48 ef       	ldi	r20, 0xF8	; 248
     ae4:	51 e4       	ldi	r21, 0x41	; 65
     ae6:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     aea:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
     aee:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     af0:	a5 01       	movw	r20, r10
     af2:	94 01       	movw	r18, r8
     af4:	c7 01       	movw	r24, r14
     af6:	b6 01       	movw	r22, r12
     af8:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	48 ef       	ldi	r20, 0xF8	; 248
     b02:	51 e4       	ldi	r21, 0x41	; 65
     b04:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     b08:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	42 2d       	mov	r20, r2
     b10:	8e 81       	ldd	r24, Y+6	; 0x06
     b12:	9f 81       	ldd	r25, Y+7	; 0x07
     b14:	5a de       	rcall	.-844    	; 0x7ca <_ZN7Display9drawPixelEhhh>
     b16:	0f 5f       	subi	r16, 0xFF	; 255
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     b1a:	09 31       	cpi	r16, 0x19	; 25
     b1c:	11 05       	cpc	r17, r1
     b1e:	91 f6       	brne	.-92     	; 0xac4 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     b20:	63 2d       	mov	r22, r3
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     b2c:	69 83       	std	Y+1, r22	; 0x01
     b2e:	7a 83       	std	Y+2, r23	; 0x02
     b30:	8b 83       	std	Y+3, r24	; 0x03
     b32:	9c 83       	std	Y+4, r25	; 0x04
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 ec       	ldi	r20, 0xC0	; 192
     b3a:	50 e4       	ldi	r21, 0x40	; 64
     b3c:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     b40:	2b ed       	ldi	r18, 0xDB	; 219
     b42:	3f e0       	ldi	r19, 0x0F	; 15
     b44:	49 e4       	ldi	r20, 0x49	; 73
     b46:	50 e4       	ldi	r21, 0x40	; 64
     b48:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	44 e3       	ldi	r20, 0x34	; 52
     b52:	53 e4       	ldi	r21, 0x43	; 67
     b54:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
     b58:	2b ed       	ldi	r18, 0xDB	; 219
     b5a:	3f e0       	ldi	r19, 0x0F	; 15
     b5c:	49 ec       	ldi	r20, 0xC9	; 201
     b5e:	5f e3       	ldi	r21, 0x3F	; 63
     b60:	0e 94 a4 20 	call	0x4148	; 0x4148 <__subsf3>
     b64:	6b 01       	movw	r12, r22
     b66:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     b68:	0e 94 09 21 	call	0x4212	; 0x4212 <cos>
     b6c:	2b 01       	movw	r4, r22
     b6e:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     b70:	c7 01       	movw	r24, r14
     b72:	b6 01       	movw	r22, r12
     b74:	0e 94 6f 23 	call	0x46de	; 0x46de <sin>
     b78:	4b 01       	movw	r8, r22
     b7a:	5c 01       	movw	r10, r24
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     b80:	b8 01       	movw	r22, r16
     b82:	01 2e       	mov	r0, r17
     b84:	00 0c       	add	r0, r0
     b86:	88 0b       	sbc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     b8e:	6b 01       	movw	r12, r22
     b90:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     b92:	a5 01       	movw	r20, r10
     b94:	94 01       	movw	r18, r8
     b96:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	48 ef       	ldi	r20, 0xF8	; 248
     ba0:	51 e4       	ldi	r21, 0x41	; 65
     ba2:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     ba6:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
     baa:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     bac:	a3 01       	movw	r20, r6
     bae:	92 01       	movw	r18, r4
     bb0:	c7 01       	movw	r24, r14
     bb2:	b6 01       	movw	r22, r12
     bb4:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	48 ef       	ldi	r20, 0xF8	; 248
     bbe:	51 e4       	ldi	r21, 0x41	; 65
     bc0:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     bc4:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	43 2d       	mov	r20, r3
     bcc:	8e 81       	ldd	r24, Y+6	; 0x06
     bce:	9f 81       	ldd	r25, Y+7	; 0x07
     bd0:	fc dd       	rcall	.-1032   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     bd6:	05 31       	cpi	r16, 0x15	; 21
     bd8:	11 05       	cpc	r17, r1
     bda:	91 f6       	brne	.-92     	; 0xb80 <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     bdc:	2d 81       	ldd	r18, Y+5	; 0x05
     bde:	62 2f       	mov	r22, r18
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 ef       	ldi	r20, 0xF0	; 240
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     bf6:	6b 01       	movw	r12, r22
     bf8:	7c 01       	movw	r14, r24
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	69 81       	ldd	r22, Y+1	; 0x01
     c04:	7a 81       	ldd	r23, Y+2	; 0x02
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c7 01       	movw	r24, r14
     c14:	b6 01       	movw	r22, r12
     c16:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     c1a:	2b ed       	ldi	r18, 0xDB	; 219
     c1c:	3f e0       	ldi	r19, 0x0F	; 15
     c1e:	49 e4       	ldi	r20, 0x49	; 73
     c20:	50 e4       	ldi	r21, 0x40	; 64
     c22:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	44 e3       	ldi	r20, 0x34	; 52
     c2c:	53 e4       	ldi	r21, 0x43	; 67
     c2e:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
     c32:	2b ed       	ldi	r18, 0xDB	; 219
     c34:	3f e0       	ldi	r19, 0x0F	; 15
     c36:	49 ec       	ldi	r20, 0xC9	; 201
     c38:	5f e3       	ldi	r21, 0x3F	; 63
     c3a:	0e 94 a4 20 	call	0x4148	; 0x4148 <__subsf3>
     c3e:	6b 01       	movw	r12, r22
     c40:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     c42:	0e 94 09 21 	call	0x4212	; 0x4212 <cos>
     c46:	4b 01       	movw	r8, r22
     c48:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     c4a:	c7 01       	movw	r24, r14
     c4c:	b6 01       	movw	r22, r12
     c4e:	0e 94 6f 23 	call	0x46de	; 0x46de <sin>
     c52:	2b 01       	movw	r4, r22
     c54:	3c 01       	movw	r6, r24
     c56:	00 e0       	ldi	r16, 0x00	; 0
     c58:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     c5a:	b8 01       	movw	r22, r16
     c5c:	01 2e       	mov	r0, r17
     c5e:	00 0c       	add	r0, r0
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     c68:	6b 01       	movw	r12, r22
     c6a:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     c6c:	a3 01       	movw	r20, r6
     c6e:	92 01       	movw	r18, r4
     c70:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	48 ef       	ldi	r20, 0xF8	; 248
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     c80:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
     c84:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     c86:	a5 01       	movw	r20, r10
     c88:	94 01       	movw	r18, r8
     c8a:	c7 01       	movw	r24, r14
     c8c:	b6 01       	movw	r22, r12
     c8e:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	48 ef       	ldi	r20, 0xF8	; 248
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     c9e:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	43 2d       	mov	r20, r3
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	8f dd       	rcall	.-1250   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     cac:	0f 5f       	subi	r16, 0xFF	; 255
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     cb0:	0d 30       	cpi	r16, 0x0D	; 13
     cb2:	11 05       	cpc	r17, r1
     cb4:	91 f6       	brne	.-92     	; 0xc5a <_ZN7Display6analogEhhhh+0x230>
     cb6:	cb c0       	rjmp	.+406    	; 0xe4e <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     cb8:	64 2f       	mov	r22, r20
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     cc4:	69 83       	std	Y+1, r22	; 0x01
     cc6:	7a 83       	std	Y+2, r23	; 0x02
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	9c 83       	std	Y+4, r25	; 0x04
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 ec       	ldi	r20, 0xC0	; 192
     cd2:	50 e4       	ldi	r21, 0x40	; 64
     cd4:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     cd8:	2b ed       	ldi	r18, 0xDB	; 219
     cda:	3f e0       	ldi	r19, 0x0F	; 15
     cdc:	49 e4       	ldi	r20, 0x49	; 73
     cde:	50 e4       	ldi	r21, 0x40	; 64
     ce0:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	44 e3       	ldi	r20, 0x34	; 52
     cea:	53 e4       	ldi	r21, 0x43	; 67
     cec:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
     cf0:	2b ed       	ldi	r18, 0xDB	; 219
     cf2:	3f e0       	ldi	r19, 0x0F	; 15
     cf4:	49 ec       	ldi	r20, 0xC9	; 201
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 a4 20 	call	0x4148	; 0x4148 <__subsf3>
     cfc:	6b 01       	movw	r12, r22
     cfe:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     d00:	0e 94 09 21 	call	0x4212	; 0x4212 <cos>
     d04:	2b 01       	movw	r4, r22
     d06:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     d08:	c7 01       	movw	r24, r14
     d0a:	b6 01       	movw	r22, r12
     d0c:	0e 94 6f 23 	call	0x46de	; 0x46de <sin>
     d10:	4b 01       	movw	r8, r22
     d12:	5c 01       	movw	r10, r24
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     d18:	b8 01       	movw	r22, r16
     d1a:	01 2e       	mov	r0, r17
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     d26:	6b 01       	movw	r12, r22
     d28:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     d2a:	a5 01       	movw	r20, r10
     d2c:	94 01       	movw	r18, r8
     d2e:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	48 ef       	ldi	r20, 0xF8	; 248
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     d3e:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
     d42:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     d44:	a3 01       	movw	r20, r6
     d46:	92 01       	movw	r18, r4
     d48:	c7 01       	movw	r24, r14
     d4a:	b6 01       	movw	r22, r12
     d4c:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	48 ef       	ldi	r20, 0xF8	; 248
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     d5c:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	43 2d       	mov	r20, r3
     d64:	8e 81       	ldd	r24, Y+6	; 0x06
     d66:	9f 81       	ldd	r25, Y+7	; 0x07
     d68:	30 dd       	rcall	.-1440   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     d6a:	0f 5f       	subi	r16, 0xFF	; 255
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     d6e:	09 31       	cpi	r16, 0x19	; 25
     d70:	11 05       	cpc	r17, r1
     d72:	91 f6       	brne	.-92     	; 0xd18 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     d74:	ed 81       	ldd	r30, Y+5	; 0x05
     d76:	6e 2f       	mov	r22, r30
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 ef       	ldi	r20, 0xF0	; 240
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     d8e:	6b 01       	movw	r12, r22
     d90:	7c 01       	movw	r14, r24
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	69 81       	ldd	r22, Y+1	; 0x01
     d9c:	7a 81       	ldd	r23, Y+2	; 0x02
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	c7 01       	movw	r24, r14
     dac:	b6 01       	movw	r22, r12
     dae:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     db2:	2b ed       	ldi	r18, 0xDB	; 219
     db4:	3f e0       	ldi	r19, 0x0F	; 15
     db6:	49 e4       	ldi	r20, 0x49	; 73
     db8:	50 e4       	ldi	r21, 0x40	; 64
     dba:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	44 e3       	ldi	r20, 0x34	; 52
     dc4:	53 e4       	ldi	r21, 0x43	; 67
     dc6:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
     dca:	2b ed       	ldi	r18, 0xDB	; 219
     dcc:	3f e0       	ldi	r19, 0x0F	; 15
     dce:	49 ec       	ldi	r20, 0xC9	; 201
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 a4 20 	call	0x4148	; 0x4148 <__subsf3>
     dd6:	6b 01       	movw	r12, r22
     dd8:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     dda:	0e 94 09 21 	call	0x4212	; 0x4212 <cos>
     dde:	4b 01       	movw	r8, r22
     de0:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     de2:	c7 01       	movw	r24, r14
     de4:	b6 01       	movw	r22, r12
     de6:	0e 94 6f 23 	call	0x46de	; 0x46de <sin>
     dea:	2b 01       	movw	r4, r22
     dec:	3c 01       	movw	r6, r24
     dee:	00 e0       	ldi	r16, 0x00	; 0
     df0:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     df2:	b8 01       	movw	r22, r16
     df4:	01 2e       	mov	r0, r17
     df6:	00 0c       	add	r0, r0
     df8:	88 0b       	sbc	r24, r24
     dfa:	99 0b       	sbc	r25, r25
     dfc:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
     e00:	6b 01       	movw	r12, r22
     e02:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     e04:	a3 01       	movw	r20, r6
     e06:	92 01       	movw	r18, r4
     e08:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	48 ef       	ldi	r20, 0xF8	; 248
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     e18:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
     e1c:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     e1e:	a5 01       	movw	r20, r10
     e20:	94 01       	movw	r18, r8
     e22:	c7 01       	movw	r24, r14
     e24:	b6 01       	movw	r22, r12
     e26:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	48 ef       	ldi	r20, 0xF8	; 248
     e30:	51 e4       	ldi	r21, 0x41	; 65
     e32:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
     e36:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	43 2d       	mov	r20, r3
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	c3 dc       	rcall	.-1658   	; 0x7ca <_ZN7Display9drawPixelEhhh>
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     e48:	01 31       	cpi	r16, 0x11	; 17
     e4a:	11 05       	cpc	r17, r1
     e4c:	91 f6       	brne	.-92     	; 0xdf2 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	4a e1       	ldi	r20, 0x1A	; 26
     e52:	61 e3       	ldi	r22, 0x31	; 49
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	24 dd       	rcall	.-1464   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	62 e3       	ldi	r22, 0x32	; 50
     e60:	8e 81       	ldd	r24, Y+6	; 0x06
     e62:	9f 81       	ldd	r25, Y+7	; 0x07
     e64:	1e dd       	rcall	.-1476   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     e66:	2c e1       	ldi	r18, 0x1C	; 28
     e68:	4a e3       	ldi	r20, 0x3A	; 58
     e6a:	63 e3       	ldi	r22, 0x33	; 51
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	9f 81       	ldd	r25, Y+7	; 0x07
     e70:	18 dd       	rcall	.-1488   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     e72:	28 e3       	ldi	r18, 0x38	; 56
     e74:	4d e1       	ldi	r20, 0x1D	; 29
     e76:	66 e3       	ldi	r22, 0x36	; 54
     e78:	8e 81       	ldd	r24, Y+6	; 0x06
     e7a:	9f 81       	ldd	r25, Y+7	; 0x07
     e7c:	12 dd       	rcall	.-1500   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     e7e:	2c e1       	ldi	r18, 0x1C	; 28
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	69 e3       	ldi	r22, 0x39	; 57
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	0c dd       	rcall	.-1512   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	48 e0       	ldi	r20, 0x08	; 8
     e8e:	6c e2       	ldi	r22, 0x2C	; 44
     e90:	8e 81       	ldd	r24, Y+6	; 0x06
     e92:	9f 81       	ldd	r25, Y+7	; 0x07
     e94:	9a dc       	rcall	.-1740   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	42 e1       	ldi	r20, 0x12	; 18
     e9a:	65 e3       	ldi	r22, 0x35	; 53
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ea0:	94 dc       	rcall	.-1752   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	4c e2       	ldi	r20, 0x2C	; 44
     ea6:	65 e3       	ldi	r22, 0x35	; 53
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	9f 81       	ldd	r25, Y+7	; 0x07
     eac:	8e dc       	rcall	.-1764   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	45 e3       	ldi	r20, 0x35	; 53
     eb2:	6b e2       	ldi	r22, 0x2B	; 43
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	88 dc       	rcall	.-1776   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	45 e3       	ldi	r20, 0x35	; 53
     ebe:	61 e1       	ldi	r22, 0x11	; 17
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	9f 81       	ldd	r25, Y+7	; 0x07
     ec4:	82 dc       	rcall	.-1788   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	4c e2       	ldi	r20, 0x2C	; 44
     eca:	68 e0       	ldi	r22, 0x08	; 8
     ecc:	8e 81       	ldd	r24, Y+6	; 0x06
     ece:	9f 81       	ldd	r25, Y+7	; 0x07
     ed0:	7c dc       	rcall	.-1800   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	41 e1       	ldi	r20, 0x11	; 17
     ed6:	68 e0       	ldi	r22, 0x08	; 8
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	76 dc       	rcall	.-1812   	; 0x7ca <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	48 e0       	ldi	r20, 0x08	; 8
     ee2:	62 e1       	ldi	r22, 0x12	; 18
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	70 dc       	rcall	.-1824   	; 0x7ca <_ZN7Display9drawPixelEhhh>
}
     eea:	27 96       	adiw	r28, 0x07	; 7
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	08 95       	ret

00000f1c <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	80 93 b8 00 	sts	0x00B8, r24
     f22:	08 95       	ret

00000f24 <_ZN3I2CD1Ev>:
     f24:	08 95       	ret

00000f26 <_ZN3I2C9twi_startEv>:
     f26:	84 ea       	ldi	r24, 0xA4	; 164
     f28:	80 93 bc 00 	sts	0x00BC, r24
     f2c:	08 95       	ret

00000f2e <_ZN3I2C8twi_stopEv>:
     f2e:	84 e9       	ldi	r24, 0x94	; 148
     f30:	80 93 bc 00 	sts	0x00BC, r24
     f34:	08 95       	ret

00000f36 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
     f36:	ec eb       	ldi	r30, 0xBC	; 188
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	ec f7       	brge	.-6      	; 0xf3a <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
     f40:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
     f44:	84 e8       	ldi	r24, 0x84	; 132
     f46:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     f4a:	ec eb       	ldi	r30, 0xBC	; 188
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 23       	and	r24, r24
     f52:	ec f7       	brge	.-6      	; 0xf4e <_ZN3I2C9twi_writeEh+0x18>
}
     f54:	08 95       	ret

00000f56 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
     f56:	2a b1       	in	r18, 0x0a	; 10
     f58:	20 66       	ori	r18, 0x60	; 96
     f5a:	2a b9       	out	0x0a, r18	; 10
     f5c:	28 b1       	in	r18, 0x08	; 8
     f5e:	23 7f       	andi	r18, 0xF3	; 243
     f60:	28 b9       	out	0x08, r18	; 8
     f62:	27 b1       	in	r18, 0x07	; 7
     f64:	2c 60       	ori	r18, 0x0C	; 12
     f66:	27 b9       	out	0x07, r18	; 7
     f68:	2a b1       	in	r18, 0x0a	; 10
     f6a:	23 7e       	andi	r18, 0xE3	; 227
     f6c:	2a b9       	out	0x0a, r18	; 10
     f6e:	fc 01       	movw	r30, r24
     f70:	0c 96       	adiw	r24, 0x0c	; 12
     f72:	11 92       	st	Z+, r1
     f74:	e8 17       	cp	r30, r24
     f76:	f9 07       	cpc	r31, r25
     f78:	e1 f7       	brne	.-8      	; 0xf72 <_ZN9InterfaceC1Ev+0x1c>
     f7a:	08 95       	ret

00000f7c <_ZN9InterfaceD1Ev>:
     f7c:	08 95       	ret

00000f7e <_ZN9Interface7paradebEPVhhPh>:
     f7e:	fb 01       	movw	r30, r22
     f80:	80 81       	ld	r24, Z
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	04 2e       	mov	r0, r20
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <_ZN9Interface7paradebEPVhhPh+0xe>
     f88:	95 95       	asr	r25
     f8a:	87 95       	ror	r24
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <_ZN9Interface7paradebEPVhhPh+0xa>
     f90:	80 ff       	sbrs	r24, 0
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <_ZN9Interface7paradebEPVhhPh+0x20>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	f9 01       	movw	r30, r18
     f98:	80 83       	st	Z, r24
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
     f9e:	f9 01       	movw	r30, r18
     fa0:	80 81       	ld	r24, Z
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	71 f4       	brne	.+28     	; 0xfc2 <_ZN9Interface7paradebEPVhhPh+0x44>
     fa6:	fb 01       	movw	r30, r22
     fa8:	60 81       	ld	r22, Z
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	fb 01       	movw	r30, r22
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <_ZN9Interface7paradebEPVhhPh+0x36>
     fb0:	f5 95       	asr	r31
     fb2:	e7 95       	ror	r30
     fb4:	4a 95       	dec	r20
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <_ZN9Interface7paradebEPVhhPh+0x32>
     fb8:	e0 fd       	sbrc	r30, 0
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <_ZN9Interface7paradebEPVhhPh+0x44>
     fbc:	f9 01       	movw	r30, r18
     fbe:	10 82       	st	Z, r1
     fc0:	08 95       	ret
     fc2:	f9 01       	movw	r30, r18
     fc4:	10 82       	st	Z, r1
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 95       	ret

00000fca <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
     fd2:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	8a 95       	dec	r24
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <_ZN9Interface6TasterEv+0xc>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
     fdc:	9e 01       	movw	r18, r28
     fde:	2e 5f       	subi	r18, 0xFE	; 254
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	44 e0       	ldi	r20, 0x04	; 4
     fe4:	69 e2       	ldi	r22, 0x29	; 41
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	ce 01       	movw	r24, r28
     fea:	c9 df       	rcall	.-110    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
     fec:	81 11       	cpse	r24, r1
     fee:	14 c0       	rjmp	.+40     	; 0x1018 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
     ff0:	9e 01       	movw	r18, r28
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	43 e0       	ldi	r20, 0x03	; 3
     ff8:	69 e2       	ldi	r22, 0x29	; 41
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	ce 01       	movw	r24, r28
     ffe:	bf df       	rcall	.-130    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1000:	81 11       	cpse	r24, r1
    1002:	0c c0       	rjmp	.+24     	; 0x101c <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    1004:	9e 01       	movw	r18, r28
    1006:	42 e0       	ldi	r20, 0x02	; 2
    1008:	69 e2       	ldi	r22, 0x29	; 41
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	b7 df       	rcall	.-146    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1010:	88 23       	and	r24, r24
    1012:	31 f0       	breq	.+12     	; 0x1020 <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    1014:	11 e3       	ldi	r17, 0x31	; 49
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    1018:	13 e3       	ldi	r17, 0x33	; 51
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    101c:	12 e3       	ldi	r17, 0x32	; 50
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    1020:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    1022:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    1024:	42 9a       	sbi	0x08, 2	; 8
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	8a 95       	dec	r24
    102a:	f1 f7       	brne	.-4      	; 0x1028 <_ZN9Interface6TasterEv+0x5e>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    102e:	9e 01       	movw	r18, r28
    1030:	2b 5f       	subi	r18, 0xFB	; 251
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	44 e0       	ldi	r20, 0x04	; 4
    1036:	69 e2       	ldi	r22, 0x29	; 41
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	ce 01       	movw	r24, r28
    103c:	a0 df       	rcall	.-192    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    103e:	81 11       	cpse	r24, r1
    1040:	16 c0       	rjmp	.+44     	; 0x106e <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    1042:	9e 01       	movw	r18, r28
    1044:	2c 5f       	subi	r18, 0xFC	; 252
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	43 e0       	ldi	r20, 0x03	; 3
    104a:	69 e2       	ldi	r22, 0x29	; 41
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	ce 01       	movw	r24, r28
    1050:	96 df       	rcall	.-212    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1052:	81 11       	cpse	r24, r1
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    1056:	9e 01       	movw	r18, r28
    1058:	2d 5f       	subi	r18, 0xFD	; 253
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	42 e0       	ldi	r20, 0x02	; 2
    105e:	69 e2       	ldi	r22, 0x29	; 41
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	ce 01       	movw	r24, r28
    1064:	8c df       	rcall	.-232    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1066:	88 23       	and	r24, r24
    1068:	29 f0       	breq	.+10     	; 0x1074 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    106a:	14 e3       	ldi	r17, 0x34	; 52
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    106e:	16 e3       	ldi	r17, 0x36	; 54
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    1072:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    1074:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    1076:	5e 9a       	sbi	0x0b, 6	; 11
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	8a 95       	dec	r24
    107c:	f1 f7       	brne	.-4      	; 0x107a <_ZN9Interface6TasterEv+0xb0>
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    1080:	9e 01       	movw	r18, r28
    1082:	28 5f       	subi	r18, 0xF8	; 248
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	44 e0       	ldi	r20, 0x04	; 4
    1088:	69 e2       	ldi	r22, 0x29	; 41
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	ce 01       	movw	r24, r28
    108e:	77 df       	rcall	.-274    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    1090:	81 11       	cpse	r24, r1
    1092:	16 c0       	rjmp	.+44     	; 0x10c0 <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    1094:	9e 01       	movw	r18, r28
    1096:	29 5f       	subi	r18, 0xF9	; 249
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	43 e0       	ldi	r20, 0x03	; 3
    109c:	69 e2       	ldi	r22, 0x29	; 41
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	ce 01       	movw	r24, r28
    10a2:	6d df       	rcall	.-294    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10a4:	81 11       	cpse	r24, r1
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    10a8:	9e 01       	movw	r18, r28
    10aa:	2a 5f       	subi	r18, 0xFA	; 250
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	42 e0       	ldi	r20, 0x02	; 2
    10b0:	69 e2       	ldi	r22, 0x29	; 41
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	ce 01       	movw	r24, r28
    10b6:	63 df       	rcall	.-314    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10b8:	88 23       	and	r24, r24
    10ba:	29 f0       	breq	.+10     	; 0x10c6 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    10bc:	17 e3       	ldi	r17, 0x37	; 55
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    10c0:	19 e3       	ldi	r17, 0x39	; 57
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    10c4:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    10c6:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    10c8:	5d 9a       	sbi	0x0b, 5	; 11
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	8a 95       	dec	r24
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <_ZN9Interface6TasterEv+0x102>
    10d0:	00 c0       	rjmp	.+0      	; 0x10d2 <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    10d2:	9e 01       	movw	r18, r28
    10d4:	25 5f       	subi	r18, 0xF5	; 245
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	44 e0       	ldi	r20, 0x04	; 4
    10da:	69 e2       	ldi	r22, 0x29	; 41
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	ce 01       	movw	r24, r28
    10e0:	4e df       	rcall	.-356    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10e2:	81 11       	cpse	r24, r1
    10e4:	16 c0       	rjmp	.+44     	; 0x1112 <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    10e6:	9e 01       	movw	r18, r28
    10e8:	26 5f       	subi	r18, 0xF6	; 246
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	43 e0       	ldi	r20, 0x03	; 3
    10ee:	69 e2       	ldi	r22, 0x29	; 41
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	ce 01       	movw	r24, r28
    10f4:	44 df       	rcall	.-376    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    10f6:	81 11       	cpse	r24, r1
    10f8:	0e c0       	rjmp	.+28     	; 0x1116 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    10fa:	9e 01       	movw	r18, r28
    10fc:	27 5f       	subi	r18, 0xF7	; 247
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	69 e2       	ldi	r22, 0x29	; 41
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	ce 01       	movw	r24, r28
    1108:	3a df       	rcall	.-396    	; 0xf7e <_ZN9Interface7paradebEPVhhPh>
    110a:	88 23       	and	r24, r24
    110c:	29 f0       	breq	.+10     	; 0x1118 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    110e:	1a e2       	ldi	r17, 0x2A	; 42
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    1112:	13 e2       	ldi	r17, 0x23	; 35
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    1116:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    1118:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    111a:	81 2f       	mov	r24, r17
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	08 95       	ret

00001124 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    1124:	52 df       	rcall	.-348    	; 0xfca <_ZN9Interface6TasterEv>
    1126:	48 2f       	mov	r20, r24
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	fa 01       	movw	r30, r20
    112c:	b3 97       	sbiw	r30, 0x23	; 35
    112e:	e7 31       	cpi	r30, 0x17	; 23
    1130:	f1 05       	cpc	r31, r1
    1132:	c0 f4       	brcc	.+48     	; 0x1164 <_ZN9Interface7unifiedEv+0x40>
    1134:	ea 5b       	subi	r30, 0xBA	; 186
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	0c 94 1d 28 	jmp	0x503a	; 0x503a <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    113c:	85 e7       	ldi	r24, 0x75	; 117
    113e:	08 95       	ret
		break;
	case '3':
		return 'A';
    1140:	81 e4       	ldi	r24, 0x41	; 65
    1142:	08 95       	ret
		break;
	case '4':
		return 'l';
    1144:	8c e6       	ldi	r24, 0x6C	; 108
    1146:	08 95       	ret
		break;
	case '5':
		return 'o';
    1148:	8f e6       	ldi	r24, 0x6F	; 111
    114a:	08 95       	ret
		break;
	case '6':
		return 'r';
    114c:	82 e7       	ldi	r24, 0x72	; 114
    114e:	08 95       	ret
		break;
	case '7':
		return 'Y';
    1150:	89 e5       	ldi	r24, 0x59	; 89
    1152:	08 95       	ret
		break;
	case '8':
		return 'd';
    1154:	84 e6       	ldi	r24, 0x64	; 100
    1156:	08 95       	ret
		break;
	case '9':
		return 'X';
    1158:	88 e5       	ldi	r24, 0x58	; 88
    115a:	08 95       	ret
		break;
	case '*':
		return 'e';
    115c:	85 e6       	ldi	r24, 0x65	; 101
    115e:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    1160:	8d e6       	ldi	r24, 0x6D	; 109
    1162:	08 95       	ret
		break;
	default:
		return ' ';
    1164:	80 e2       	ldi	r24, 0x20	; 32
    1166:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    1168:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    116a:	08 95       	ret

0000116c <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    1172:	ce 01       	movw	r24, r28
    1174:	2a df       	rcall	.-428    	; 0xfca <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    1176:	80 53       	subi	r24, 0x30	; 48
    1178:	8a 30       	cpi	r24, 0x0A	; 10
    117a:	d8 f7       	brcc	.-10     	; 0x1172 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    1182:	46 96       	adiw	r24, 0x16	; 22
    1184:	cf ce       	rjmp	.-610    	; 0xf24 <_ZN3I2CD1Ev>
    1186:	08 95       	ret

00001188 <_ZN7LSM303D14LSM303_commandEhh>:
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	06 2f       	mov	r16, r22
    1192:	14 2f       	mov	r17, r20
    1194:	ec 01       	movw	r28, r24
    1196:	66 96       	adiw	r28, 0x16	; 22
    1198:	ce 01       	movw	r24, r28
    119a:	c5 de       	rcall	.-630    	; 0xf26 <_ZN3I2C9twi_startEv>
    119c:	6a e3       	ldi	r22, 0x3A	; 58
    119e:	ce 01       	movw	r24, r28
    11a0:	ca de       	rcall	.-620    	; 0xf36 <_ZN3I2C9twi_writeEh>
    11a2:	60 2f       	mov	r22, r16
    11a4:	ce 01       	movw	r24, r28
    11a6:	c7 de       	rcall	.-626    	; 0xf36 <_ZN3I2C9twi_writeEh>
    11a8:	61 2f       	mov	r22, r17
    11aa:	ce 01       	movw	r24, r28
    11ac:	c4 de       	rcall	.-632    	; 0xf36 <_ZN3I2C9twi_writeEh>
    11ae:	ce 01       	movw	r24, r28
    11b0:	be de       	rcall	.-644    	; 0xf2e <_ZN3I2C8twi_stopEv>
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	6e e2       	ldi	r22, 0x2E	; 46
    11c0:	e3 cf       	rjmp	.-58     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
    11c2:	08 95       	ret

000011c4 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    11ca:	47 e4       	ldi	r20, 0x47	; 71
    11cc:	60 e2       	ldi	r22, 0x20	; 32
    11ce:	dc df       	rcall	.-72     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	61 e2       	ldi	r22, 0x21	; 33
    11d4:	ce 01       	movw	r24, r28
    11d6:	d8 df       	rcall	.-80     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    11d8:	40 e8       	ldi	r20, 0x80	; 128
    11da:	64 e2       	ldi	r22, 0x24	; 36
    11dc:	ce 01       	movw	r24, r28
    11de:	d4 df       	rcall	.-88     	; 0x1188 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    11e0:	ce 01       	movw	r24, r28
    11e2:	ec df       	rcall	.-40     	; 0x11bc <_ZN7LSM303D13ACCBypassmodeEv>
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	46 96       	adiw	r24, 0x16	; 22
    11f2:	94 de       	rcall	.-728    	; 0xf1c <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    11f4:	1f 82       	std	Y+7, r1	; 0x07
    11f6:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    11f8:	18 86       	std	Y+8, r1	; 0x08
    11fa:	19 86       	std	Y+9, r1	; 0x09
    11fc:	1a 86       	std	Y+10, r1	; 0x0a
    11fe:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    1200:	1c 86       	std	Y+12, r1	; 0x0c
    1202:	1d 86       	std	Y+13, r1	; 0x0d
    1204:	1e 86       	std	Y+14, r1	; 0x0e
    1206:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    1208:	19 8a       	std	Y+17, r1	; 0x11
    120a:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    120c:	1a 8a       	std	Y+18, r1	; 0x12
    120e:	1b 8a       	std	Y+19, r1	; 0x13
    1210:	1c 8a       	std	Y+20, r1	; 0x14
    1212:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    1214:	de 01       	movw	r26, r28
    1216:	a1 52       	subi	r26, 0x21	; 33
    1218:	bf 4f       	sbci	r27, 0xFF	; 255
    121a:	1d 92       	st	X+, r1
    121c:	1d 92       	st	X+, r1
    121e:	1d 92       	st	X+, r1
    1220:	1c 92       	st	X, r1
    1222:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    1224:	fe 01       	movw	r30, r28
    1226:	ed 51       	subi	r30, 0x1D	; 29
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	10 82       	st	Z, r1
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	12 82       	std	Z+2, r1	; 0x02
    1230:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    1232:	34 96       	adiw	r30, 0x04	; 4
    1234:	8b e1       	ldi	r24, 0x1B	; 27
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	18 82       	st	Y, r1
    1240:	1b 82       	std	Y+3, r1	; 0x03
    1242:	1a 82       	std	Y+2, r1	; 0x02
    1244:	1d 82       	std	Y+5, r1	; 0x05
    1246:	1c 82       	std	Y+4, r1	; 0x04
    1248:	e0 5d       	subi	r30, 0xD0	; 208
    124a:	f1 09       	sbc	r31, r1
    124c:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    124e:	11 92       	st	Z+, r1
    1250:	11 92       	st	Z+, r1
    1252:	11 92       	st	Z+, r1
    1254:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    1256:	e2 17       	cp	r30, r18
    1258:	f3 07       	cpc	r31, r19
    125a:	c9 f7       	brne	.-14     	; 0x124e <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    125c:	ce 01       	movw	r24, r28
    125e:	b2 df       	rcall	.-156    	; 0x11c4 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 95       	ret

0000126a <_ZN3uhr11tastendruckEPh>:
    126a:	fc 01       	movw	r30, r24
    126c:	db 01       	movw	r26, r22
    126e:	9c 91       	ld	r25, X
    1270:	95 36       	cpi	r25, 0x65	; 101
    1272:	39 f4       	brne	.+14     	; 0x1282 <_ZN3uhr11tastendruckEPh+0x18>
    1274:	81 a5       	ldd	r24, Z+41	; 0x29
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	11 f4       	brne	.+4      	; 0x127e <_ZN3uhr11tastendruckEPh+0x14>
    127a:	11 a6       	std	Z+41, r1	; 0x29
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <_ZN3uhr11tastendruckEPh+0x18>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	81 a7       	std	Z+41, r24	; 0x29
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret

00001286 <_ZN13einstellungen11tastendruckEPh>:
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	08 95       	ret

0000128a <_ZN5menue11tastendruckEPh>:
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	08 95       	ret

0000128e <_ZN9offscreen4drawEv>:
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	8f 89       	ldd	r24, Y+23	; 0x17
    1296:	98 8d       	ldd	r25, Y+24	; 0x18
    1298:	ec d9       	rcall	.-3112   	; 0x672 <_ZN7Display10clearFrameEv>
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	63 da       	rcall	.-2874   	; 0x766 <_ZN7Display9sendFrameEv>
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <_ZN9wilkommen4drawEv>:
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	8f 89       	ldd	r24, Y+23	; 0x17
    12b6:	98 8d       	ldd	r25, Y+24	; 0x18
    12b8:	dc d9       	rcall	.-3144   	; 0x672 <_ZN7Display10clearFrameEv>
    12ba:	7e 01       	movw	r14, r28
    12bc:	22 e0       	ldi	r18, 0x02	; 2
    12be:	e2 0e       	add	r14, r18
    12c0:	f1 1c       	adc	r15, r1
    12c2:	8f e0       	ldi	r24, 0x0F	; 15
    12c4:	e6 e0       	ldi	r30, 0x06	; 6
    12c6:	f1 e0       	ldi	r31, 0x01	; 1
    12c8:	d7 01       	movw	r26, r14
    12ca:	01 90       	ld	r0, Z+
    12cc:	0d 92       	st	X+, r0
    12ce:	8a 95       	dec	r24
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <_ZN9wilkommen4drawEv+0x24>
    12d2:	8e e0       	ldi	r24, 0x0E	; 14
    12d4:	8e 8b       	std	Y+22, r24	; 0x16
    12d6:	00 e0       	ldi	r16, 0x00	; 0
    12d8:	10 e0       	ldi	r17, 0x00	; 0
    12da:	fe 01       	movw	r30, r28
    12dc:	e1 0f       	add	r30, r17
    12de:	f1 1d       	adc	r31, r1
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	40 2f       	mov	r20, r16
    12e4:	62 81       	ldd	r22, Z+2	; 0x02
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	db da       	rcall	.-2634   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    12ec:	1f 5f       	subi	r17, 0xFF	; 255
    12ee:	0a 5f       	subi	r16, 0xFA	; 250
    12f0:	8e 89       	ldd	r24, Y+22	; 0x16
    12f2:	18 17       	cp	r17, r24
    12f4:	90 f3       	brcs	.-28     	; 0x12da <_ZN9wilkommen4drawEv+0x34>
    12f6:	8f e0       	ldi	r24, 0x0F	; 15
    12f8:	e5 e1       	ldi	r30, 0x15	; 21
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	d7 01       	movw	r26, r14
    12fe:	01 90       	ld	r0, Z+
    1300:	0d 92       	st	X+, r0
    1302:	8a 95       	dec	r24
    1304:	e1 f7       	brne	.-8      	; 0x12fe <_ZN9wilkommen4drawEv+0x58>
    1306:	8e e0       	ldi	r24, 0x0E	; 14
    1308:	8e 8b       	std	Y+22, r24	; 0x16
    130a:	00 e0       	ldi	r16, 0x00	; 0
    130c:	10 e0       	ldi	r17, 0x00	; 0
    130e:	fe 01       	movw	r30, r28
    1310:	e1 0f       	add	r30, r17
    1312:	f1 1d       	adc	r31, r1
    1314:	28 e0       	ldi	r18, 0x08	; 8
    1316:	40 2f       	mov	r20, r16
    1318:	62 81       	ldd	r22, Z+2	; 0x02
    131a:	8f 89       	ldd	r24, Y+23	; 0x17
    131c:	98 8d       	ldd	r25, Y+24	; 0x18
    131e:	c1 da       	rcall	.-2686   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1320:	1f 5f       	subi	r17, 0xFF	; 255
    1322:	0a 5f       	subi	r16, 0xFA	; 250
    1324:	8e 89       	ldd	r24, Y+22	; 0x16
    1326:	18 17       	cp	r17, r24
    1328:	90 f3       	brcs	.-28     	; 0x130e <_ZN9wilkommen4drawEv+0x68>
    132a:	80 e4       	ldi	r24, 0x40	; 64
    132c:	8f 93       	push	r24
    132e:	81 e4       	ldi	r24, 0x41	; 65
    1330:	8f 93       	push	r24
    1332:	87 e4       	ldi	r24, 0x47	; 71
    1334:	8f 93       	push	r24
    1336:	8e ea       	ldi	r24, 0xAE	; 174
    1338:	8f 93       	push	r24
    133a:	84 e2       	ldi	r24, 0x24	; 36
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	ff 92       	push	r15
    1344:	ef 92       	push	r14
    1346:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    134a:	8e 8b       	std	Y+22, r24	; 0x16
    134c:	2d b7       	in	r18, 0x3d	; 61
    134e:	3e b7       	in	r19, 0x3e	; 62
    1350:	28 5f       	subi	r18, 0xF8	; 248
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	3e bf       	out	0x3e, r19	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	2d bf       	out	0x3d, r18	; 61
    135e:	88 23       	and	r24, r24
    1360:	81 f0       	breq	.+32     	; 0x1382 <_ZN9wilkommen4drawEv+0xdc>
    1362:	00 e0       	ldi	r16, 0x00	; 0
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	fe 01       	movw	r30, r28
    1368:	e1 0f       	add	r30, r17
    136a:	f1 1d       	adc	r31, r1
    136c:	20 e2       	ldi	r18, 0x20	; 32
    136e:	40 2f       	mov	r20, r16
    1370:	62 81       	ldd	r22, Z+2	; 0x02
    1372:	8f 89       	ldd	r24, Y+23	; 0x17
    1374:	98 8d       	ldd	r25, Y+24	; 0x18
    1376:	95 da       	rcall	.-2774   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1378:	1f 5f       	subi	r17, 0xFF	; 255
    137a:	0a 5f       	subi	r16, 0xFA	; 250
    137c:	8e 89       	ldd	r24, Y+22	; 0x16
    137e:	18 17       	cp	r17, r24
    1380:	90 f3       	brcs	.-28     	; 0x1366 <_ZN9wilkommen4drawEv+0xc0>
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	ef d9       	rcall	.-3106   	; 0x766 <_ZN7Display9sendFrameEv>
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	08 95       	ret

00001396 <_Z8ADC_Readh>:
    1396:	ec e7       	ldi	r30, 0x7C	; 124
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	90 81       	ld	r25, Z
    139c:	8f 71       	andi	r24, 0x1F	; 31
    139e:	90 7e       	andi	r25, 0xE0	; 224
    13a0:	89 2b       	or	r24, r25
    13a2:	80 83       	st	Z, r24
    13a4:	ea e7       	ldi	r30, 0x7A	; 122
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 64       	ori	r24, 0x40	; 64
    13ac:	80 83       	st	Z, r24
    13ae:	80 81       	ld	r24, Z
    13b0:	86 fd       	sbrc	r24, 6
    13b2:	fd cf       	rjmp	.-6      	; 0x13ae <_Z8ADC_Readh+0x18>
    13b4:	80 91 78 00 	lds	r24, 0x0078
    13b8:	90 91 79 00 	lds	r25, 0x0079
    13bc:	08 95       	ret

000013be <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	e6 df       	rcall	.-52     	; 0x1396 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    13ca:	bc 01       	movw	r22, r24
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 a5 21 	call	0x434a	; 0x434a <__floatunsisf>
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 ec       	ldi	r19, 0xC0	; 192
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	54 e4       	ldi	r21, 0x44	; 68
    13dc:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    13e0:	2c e5       	ldi	r18, 0x5C	; 92
    13e2:	3f e8       	ldi	r19, 0x8F	; 143
    13e4:	42 e5       	ldi	r20, 0x52	; 82
    13e6:	50 e4       	ldi	r21, 0x40	; 64
    13e8:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    13ec:	2d e0       	ldi	r18, 0x0D	; 13
    13ee:	31 e7       	ldi	r19, 0x71	; 113
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	50 e4       	ldi	r21, 0x40	; 64
    13f4:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    13f8:	60 93 3e 03 	sts	0x033E, r22
    13fc:	70 93 3f 03 	sts	0x033F, r23
    1400:	80 93 40 03 	sts	0x0340, r24
    1404:	90 93 41 03 	sts	0x0341, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    1408:	26 e6       	ldi	r18, 0x66	; 102
    140a:	36 e6       	ldi	r19, 0x66	; 102
    140c:	46 e6       	ldi	r20, 0x66	; 102
    140e:	50 e4       	ldi	r21, 0x40	; 64
    1410:	0e 94 a4 20 	call	0x4148	; 0x4148 <__subsf3>
    1414:	28 e9       	ldi	r18, 0x98	; 152
    1416:	39 e9       	ldi	r19, 0x99	; 153
    1418:	49 e1       	ldi	r20, 0x19	; 25
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	48 ec       	ldi	r20, 0xC8	; 200
    1426:	52 e4       	ldi	r21, 0x42	; 66
    1428:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    142c:	6b 01       	movw	r12, r22
    142e:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    143c:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
	if (temp%10>=5)
    1440:	8d ec       	ldi	r24, 0xCD	; 205
    1442:	68 9f       	mul	r22, r24
    1444:	81 2d       	mov	r24, r1
    1446:	11 24       	eor	r1, r1
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	86 95       	lsr	r24
    144e:	88 0f       	add	r24, r24
    1450:	28 2f       	mov	r18, r24
    1452:	22 0f       	add	r18, r18
    1454:	22 0f       	add	r18, r18
    1456:	82 0f       	add	r24, r18
    1458:	96 2f       	mov	r25, r22
    145a:	98 1b       	sub	r25, r24
    145c:	95 30       	cpi	r25, 0x05	; 5
    145e:	70 f0       	brcs	.+28     	; 0x147c <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    1460:	c7 01       	movw	r24, r14
    1462:	b6 01       	movw	r22, r12
    1464:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	6f 5f       	subi	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	07 2e       	mov	r0, r23
    1470:	00 0c       	add	r0, r0
    1472:	88 0b       	sbc	r24, r24
    1474:	99 0b       	sbc	r25, r25
    1476:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    147a:	09 c0       	rjmp	.+18     	; 0x148e <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    147c:	c7 01       	movw	r24, r14
    147e:	b6 01       	movw	r22, r12
    1480:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__fixunssfsi>
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 a5 21 	call	0x434a	; 0x434a <__floatunsisf>
	}
	return stat;
    148e:	0e 94 74 21 	call	0x42e8	; 0x42e8 <__fixsfsi>
    1492:	86 2f       	mov	r24, r22
}
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	08 95       	ret

0000149e <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	de d8       	rcall	.-3652   	; 0x672 <_ZN7Display10clearFrameEv>
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	e1 2c       	mov	r14, r1
    14ba:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    14bc:	e9 8d       	ldd	r30, Y+25	; 0x19
    14be:	fa 8d       	ldd	r31, Y+26	; 0x1a
    14c0:	ee 0d       	add	r30, r14
    14c2:	ff 1d       	adc	r31, r15
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	41 2f       	mov	r20, r17
    14c8:	60 81       	ld	r22, Z
    14ca:	8f 89       	ldd	r24, Y+23	; 0x17
    14cc:	98 8d       	ldd	r25, Y+24	; 0x18
    14ce:	e9 d9       	rcall	.-3118   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	e8 1a       	sub	r14, r24
    14d4:	f8 0a       	sbc	r15, r24
    14d6:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    14d8:	10 33       	cpi	r17, 0x30	; 48
    14da:	81 f7       	brne	.-32     	; 0x14bc <_ZN5menue4drawEv+0x1e>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    14dc:	70 df       	rcall	.-288    	; 0x13be <_Z14Batteriestatusv>
    14de:	7e 01       	movw	r14, r28
    14e0:	92 e0       	ldi	r25, 0x02	; 2
    14e2:	e9 0e       	add	r14, r25
    14e4:	f1 1c       	adc	r15, r1
    14e6:	28 2f       	mov	r18, r24
    14e8:	08 2e       	mov	r0, r24
    14ea:	00 0c       	add	r0, r0
    14ec:	33 0b       	sbc	r19, r19
    14ee:	3f 93       	push	r19
    14f0:	8f 93       	push	r24
    14f2:	82 e3       	ldi	r24, 0x32	; 50
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	9f 93       	push	r25
    14f8:	8f 93       	push	r24
    14fa:	ff 92       	push	r15
    14fc:	ef 92       	push	r14
    14fe:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1502:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1504:	15 e1       	ldi	r17, 0x15	; 21
    1506:	18 1b       	sub	r17, r24
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	15 31       	cpi	r17, 0x15	; 21
    1516:	08 f0       	brcs	.+2      	; 0x151a <_ZN5menue4drawEv+0x7c>
    1518:	b6 c0       	rjmp	.+364    	; 0x1686 <_ZN5menue4drawEv+0x1e8>
    151a:	01 2f       	mov	r16, r17
    151c:	00 0f       	add	r16, r16
    151e:	01 0f       	add	r16, r17
    1520:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1522:	8e 89       	ldd	r24, Y+22	; 0x16
    1524:	fe 01       	movw	r30, r28
    1526:	e1 0f       	add	r30, r17
    1528:	f1 1d       	adc	r31, r1
    152a:	e8 0f       	add	r30, r24
    152c:	f1 1d       	adc	r31, r1
    152e:	73 97       	sbiw	r30, 0x13	; 19
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	40 2f       	mov	r20, r16
    1534:	60 81       	ld	r22, Z
    1536:	8f 89       	ldd	r24, Y+23	; 0x17
    1538:	98 8d       	ldd	r25, Y+24	; 0x18
    153a:	b3 d9       	rcall	.-3226   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    153c:	1f 5f       	subi	r17, 0xFF	; 255
    153e:	0a 5f       	subi	r16, 0xFA	; 250
    1540:	15 31       	cpi	r17, 0x15	; 21
    1542:	79 f7       	brne	.-34     	; 0x1522 <_ZN5menue4drawEv+0x84>
    1544:	a0 c0       	rjmp	.+320    	; 0x1686 <_ZN5menue4drawEv+0x1e8>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1546:	e9 8d       	ldd	r30, Y+25	; 0x19
    1548:	fa 8d       	ldd	r31, Y+26	; 0x1a
    154a:	ec 0d       	add	r30, r12
    154c:	fd 1d       	adc	r31, r13
    154e:	28 e3       	ldi	r18, 0x38	; 56
    1550:	41 2f       	mov	r20, r17
    1552:	60 85       	ldd	r22, Z+8	; 0x08
    1554:	8f 89       	ldd	r24, Y+23	; 0x17
    1556:	98 8d       	ldd	r25, Y+24	; 0x18
    1558:	a4 d9       	rcall	.-3256   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	c8 1a       	sub	r12, r24
    155e:	d8 0a       	sbc	r13, r24
    1560:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1562:	10 38       	cpi	r17, 0x80	; 128
    1564:	81 f7       	brne	.-32     	; 0x1546 <_ZN5menue4drawEv+0xa8>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    1566:	85 e5       	ldi	r24, 0x55	; 85
    1568:	98 e6       	ldi	r25, 0x68	; 104
    156a:	a2 e7       	ldi	r26, 0x72	; 114
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	9b 83       	std	Y+3, r25	; 0x03
    1572:	ac 83       	std	Y+4, r26	; 0x04
    1574:	bd 83       	std	Y+5, r27	; 0x05
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	8e 8b       	std	Y+22, r24	; 0x16
    157a:	0c e0       	ldi	r16, 0x0C	; 12
    157c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    157e:	fe 01       	movw	r30, r28
    1580:	e1 0f       	add	r30, r17
    1582:	f1 1d       	adc	r31, r1
    1584:	20 e1       	ldi	r18, 0x10	; 16
    1586:	40 2f       	mov	r20, r16
    1588:	62 81       	ldd	r22, Z+2	; 0x02
    158a:	8f 89       	ldd	r24, Y+23	; 0x17
    158c:	98 8d       	ldd	r25, Y+24	; 0x18
    158e:	89 d9       	rcall	.-3310   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1590:	1f 5f       	subi	r17, 0xFF	; 255
    1592:	0a 5f       	subi	r16, 0xFA	; 250
    1594:	8e 89       	ldd	r24, Y+22	; 0x16
    1596:	18 17       	cp	r17, r24
    1598:	90 f3       	brcs	.-28     	; 0x157e <_ZN5menue4drawEv+0xe0>
		buffersize=sprintf(buffer,"Tacho");
    159a:	86 e0       	ldi	r24, 0x06	; 6
    159c:	ec e3       	ldi	r30, 0x3C	; 60
    159e:	f1 e0       	ldi	r31, 0x01	; 1
    15a0:	d7 01       	movw	r26, r14
    15a2:	01 90       	ld	r0, Z+
    15a4:	0d 92       	st	X+, r0
    15a6:	8a 95       	dec	r24
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <_ZN5menue4drawEv+0x104>
    15aa:	85 e0       	ldi	r24, 0x05	; 5
    15ac:	8e 8b       	std	Y+22, r24	; 0x16
    15ae:	0c e0       	ldi	r16, 0x0C	; 12
    15b0:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    15b2:	fe 01       	movw	r30, r28
    15b4:	e1 0f       	add	r30, r17
    15b6:	f1 1d       	adc	r31, r1
    15b8:	28 e1       	ldi	r18, 0x18	; 24
    15ba:	40 2f       	mov	r20, r16
    15bc:	62 81       	ldd	r22, Z+2	; 0x02
    15be:	8f 89       	ldd	r24, Y+23	; 0x17
    15c0:	98 8d       	ldd	r25, Y+24	; 0x18
    15c2:	6f d9       	rcall	.-3362   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    15c4:	1f 5f       	subi	r17, 0xFF	; 255
    15c6:	0a 5f       	subi	r16, 0xFA	; 250
    15c8:	8e 89       	ldd	r24, Y+22	; 0x16
    15ca:	18 17       	cp	r17, r24
    15cc:	90 f3       	brcs	.-28     	; 0x15b2 <_ZN5menue4drawEv+0x114>
		buffersize=sprintf(buffer,"Wandern");
    15ce:	88 e0       	ldi	r24, 0x08	; 8
    15d0:	e2 e4       	ldi	r30, 0x42	; 66
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	d7 01       	movw	r26, r14
    15d6:	01 90       	ld	r0, Z+
    15d8:	0d 92       	st	X+, r0
    15da:	8a 95       	dec	r24
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <_ZN5menue4drawEv+0x138>
    15de:	87 e0       	ldi	r24, 0x07	; 7
    15e0:	8e 8b       	std	Y+22, r24	; 0x16
    15e2:	0c e0       	ldi	r16, 0x0C	; 12
    15e4:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    15e6:	fe 01       	movw	r30, r28
    15e8:	e1 0f       	add	r30, r17
    15ea:	f1 1d       	adc	r31, r1
    15ec:	20 e2       	ldi	r18, 0x20	; 32
    15ee:	40 2f       	mov	r20, r16
    15f0:	62 81       	ldd	r22, Z+2	; 0x02
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	55 d9       	rcall	.-3414   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    15f8:	1f 5f       	subi	r17, 0xFF	; 255
    15fa:	0a 5f       	subi	r16, 0xFA	; 250
    15fc:	8e 89       	ldd	r24, Y+22	; 0x16
    15fe:	18 17       	cp	r17, r24
    1600:	90 f3       	brcs	.-28     	; 0x15e6 <_ZN5menue4drawEv+0x148>
		buffersize=sprintf(buffer,"Einstellungen");
    1602:	8e e0       	ldi	r24, 0x0E	; 14
    1604:	ea e4       	ldi	r30, 0x4A	; 74
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	d7 01       	movw	r26, r14
    160a:	01 90       	ld	r0, Z+
    160c:	0d 92       	st	X+, r0
    160e:	8a 95       	dec	r24
    1610:	e1 f7       	brne	.-8      	; 0x160a <_ZN5menue4drawEv+0x16c>
    1612:	8d e0       	ldi	r24, 0x0D	; 13
    1614:	8e 8b       	std	Y+22, r24	; 0x16
    1616:	0c e0       	ldi	r16, 0x0C	; 12
    1618:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    161a:	fe 01       	movw	r30, r28
    161c:	e1 0f       	add	r30, r17
    161e:	f1 1d       	adc	r31, r1
    1620:	28 e2       	ldi	r18, 0x28	; 40
    1622:	40 2f       	mov	r20, r16
    1624:	62 81       	ldd	r22, Z+2	; 0x02
    1626:	8f 89       	ldd	r24, Y+23	; 0x17
    1628:	98 8d       	ldd	r25, Y+24	; 0x18
    162a:	3b d9       	rcall	.-3466   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    162c:	1f 5f       	subi	r17, 0xFF	; 255
    162e:	0a 5f       	subi	r16, 0xFA	; 250
    1630:	8e 89       	ldd	r24, Y+22	; 0x16
    1632:	18 17       	cp	r17, r24
    1634:	90 f3       	brcs	.-28     	; 0x161a <_ZN5menue4drawEv+0x17c>
		buffersize=sprintf(buffer,"Display aus");
    1636:	8c e0       	ldi	r24, 0x0C	; 12
    1638:	e8 e5       	ldi	r30, 0x58	; 88
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	d7 01       	movw	r26, r14
    163e:	01 90       	ld	r0, Z+
    1640:	0d 92       	st	X+, r0
    1642:	8a 95       	dec	r24
    1644:	e1 f7       	brne	.-8      	; 0x163e <_ZN5menue4drawEv+0x1a0>
    1646:	8b e0       	ldi	r24, 0x0B	; 11
    1648:	8e 8b       	std	Y+22, r24	; 0x16
    164a:	0c e0       	ldi	r16, 0x0C	; 12
    164c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    164e:	fe 01       	movw	r30, r28
    1650:	e1 0f       	add	r30, r17
    1652:	f1 1d       	adc	r31, r1
    1654:	20 e3       	ldi	r18, 0x30	; 48
    1656:	40 2f       	mov	r20, r16
    1658:	62 81       	ldd	r22, Z+2	; 0x02
    165a:	8f 89       	ldd	r24, Y+23	; 0x17
    165c:	98 8d       	ldd	r25, Y+24	; 0x18
    165e:	21 d9       	rcall	.-3518   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1660:	1f 5f       	subi	r17, 0xFF	; 255
    1662:	0a 5f       	subi	r16, 0xFA	; 250
    1664:	8e 89       	ldd	r24, Y+22	; 0x16
    1666:	18 17       	cp	r17, r24
    1668:	90 f3       	brcs	.-28     	; 0x164e <_ZN5menue4drawEv+0x1b0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    166a:	2d a1       	ldd	r18, Y+37	; 0x25
    166c:	22 0f       	add	r18, r18
    166e:	22 0f       	add	r18, r18
    1670:	22 0f       	add	r18, r18
    1672:	20 5f       	subi	r18, 0xF0	; 240
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	6e e3       	ldi	r22, 0x3E	; 62
    1678:	8f 89       	ldd	r24, Y+23	; 0x17
    167a:	98 8d       	ldd	r25, Y+24	; 0x18
    167c:	12 d9       	rcall	.-3548   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    167e:	8f 89       	ldd	r24, Y+23	; 0x17
    1680:	98 8d       	ldd	r25, Y+24	; 0x18
    1682:	71 d8       	rcall	.-3870   	; 0x766 <_ZN7Display9sendFrameEv>
    1684:	04 c0       	rjmp	.+8      	; 0x168e <_ZN5menue4drawEv+0x1f0>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1686:	10 e5       	ldi	r17, 0x50	; 80
    1688:	c1 2c       	mov	r12, r1
    168a:	d1 2c       	mov	r13, r1
    168c:	5c cf       	rjmp	.-328    	; 0x1546 <_ZN5menue4drawEv+0xa8>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	08 95       	ret

000016a0 <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    16b6:	8f 89       	ldd	r24, Y+23	; 0x17
    16b8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ba:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    16be:	7f de       	rcall	.-770    	; 0x13be <_Z14Batteriestatusv>
    16c0:	5e 01       	movw	r10, r28
    16c2:	22 e0       	ldi	r18, 0x02	; 2
    16c4:	a2 0e       	add	r10, r18
    16c6:	b1 1c       	adc	r11, r1
    16c8:	28 2f       	mov	r18, r24
    16ca:	08 2e       	mov	r0, r24
    16cc:	00 0c       	add	r0, r0
    16ce:	33 0b       	sbc	r19, r19
    16d0:	3f 93       	push	r19
    16d2:	8f 93       	push	r24
    16d4:	84 e6       	ldi	r24, 0x64	; 100
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	9f 93       	push	r25
    16da:	8f 93       	push	r24
    16dc:	bf 92       	push	r11
    16de:	af 92       	push	r10
    16e0:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    16e4:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16e6:	95 e1       	ldi	r25, 0x15	; 21
    16e8:	09 2f       	mov	r16, r25
    16ea:	08 1b       	sub	r16, r24
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	05 31       	cpi	r16, 0x15	; 21
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <_ZN5tacho4drawEv+0x5e>
    16fc:	c5 c1       	rjmp	.+906    	; 0x1a88 <_ZN5tacho4drawEv+0x3e8>
    16fe:	e0 2e       	mov	r14, r16
    1700:	ee 0c       	add	r14, r14
    1702:	e0 0e       	add	r14, r16
    1704:	1e 2d       	mov	r17, r14
    1706:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1708:	8e 89       	ldd	r24, Y+22	; 0x16
    170a:	fe 01       	movw	r30, r28
    170c:	e0 0f       	add	r30, r16
    170e:	f1 1d       	adc	r31, r1
    1710:	e8 0f       	add	r30, r24
    1712:	f1 1d       	adc	r31, r1
    1714:	73 97       	sbiw	r30, 0x13	; 19
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	41 2f       	mov	r20, r17
    171a:	60 81       	ld	r22, Z
    171c:	8f 89       	ldd	r24, Y+23	; 0x17
    171e:	98 8d       	ldd	r25, Y+24	; 0x18
    1720:	c0 d8       	rcall	.-3712   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1722:	0f 5f       	subi	r16, 0xFF	; 255
    1724:	1a 5f       	subi	r17, 0xFA	; 250
    1726:	05 31       	cpi	r16, 0x15	; 21
    1728:	79 f7       	brne	.-34     	; 0x1708 <_ZN5tacho4drawEv+0x68>
    172a:	ae c1       	rjmp	.+860    	; 0x1a88 <_ZN5tacho4drawEv+0x3e8>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    172c:	e9 8d       	ldd	r30, Y+25	; 0x19
    172e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1730:	ec 0d       	add	r30, r12
    1732:	fd 1d       	adc	r31, r13
    1734:	28 e3       	ldi	r18, 0x38	; 56
    1736:	41 2f       	mov	r20, r17
    1738:	60 85       	ldd	r22, Z+8	; 0x08
    173a:	8f 89       	ldd	r24, Y+23	; 0x17
    173c:	98 8d       	ldd	r25, Y+24	; 0x18
    173e:	b1 d8       	rcall	.-3742   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	c3 1a       	sub	r12, r19
    1744:	d3 0a       	sbc	r13, r19
    1746:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1748:	10 38       	cpi	r17, 0x80	; 128
    174a:	81 f7       	brne	.-32     	; 0x172c <_ZN5tacho4drawEv+0x8c>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    174c:	20 e8       	ldi	r18, 0x80	; 128
    174e:	47 e3       	ldi	r20, 0x37	; 55
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	8b d8       	rcall	.-3818   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    1758:	25 e4       	ldi	r18, 0x45	; 69
    175a:	4f e0       	ldi	r20, 0x0F	; 15
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	85 d8       	rcall	.-3830   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    1764:	2b e3       	ldi	r18, 0x3B	; 59
    1766:	47 e0       	ldi	r20, 0x07	; 7
    1768:	65 e4       	ldi	r22, 0x45	; 69
    176a:	8f 89       	ldd	r24, Y+23	; 0x17
    176c:	98 8d       	ldd	r25, Y+24	; 0x18
    176e:	7f d8       	rcall	.-3842   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	65 e4       	ldi	r22, 0x45	; 69
    1776:	8f 89       	ldd	r24, Y+23	; 0x17
    1778:	98 8d       	ldd	r25, Y+24	; 0x18
    177a:	5f d8       	rcall	.-3906   	; 0x83a <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    177c:	21 e4       	ldi	r18, 0x41	; 65
    177e:	47 e2       	ldi	r20, 0x27	; 39
    1780:	6f e3       	ldi	r22, 0x3F	; 63
    1782:	8f 89       	ldd	r24, Y+23	; 0x17
    1784:	98 8d       	ldd	r25, Y+24	; 0x18
    1786:	73 d8       	rcall	.-3866   	; 0x86e <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    1788:	20 e3       	ldi	r18, 0x30	; 48
    178a:	40 e1       	ldi	r20, 0x10	; 16
    178c:	6f e3       	ldi	r22, 0x3F	; 63
    178e:	8f 89       	ldd	r24, Y+23	; 0x17
    1790:	98 8d       	ldd	r25, Y+24	; 0x18
    1792:	53 d8       	rcall	.-3930   	; 0x83a <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    1794:	21 e4       	ldi	r18, 0x41	; 65
    1796:	48 e1       	ldi	r20, 0x18	; 24
    1798:	6f e3       	ldi	r22, 0x3F	; 63
    179a:	8f 89       	ldd	r24, Y+23	; 0x17
    179c:	98 8d       	ldd	r25, Y+24	; 0x18
    179e:	67 d8       	rcall	.-3890   	; 0x86e <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    17a0:	e9 8d       	ldd	r30, Y+25	; 0x19
    17a2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17a4:	60 81       	ld	r22, Z
    17a6:	60 53       	subi	r22, 0x30	; 48
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	8f 89       	ldd	r24, Y+23	; 0x17
    17ae:	98 8d       	ldd	r25, Y+24	; 0x18
    17b0:	c2 d8       	rcall	.-3708   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    17b2:	e9 8d       	ldd	r30, Y+25	; 0x19
    17b4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17b6:	61 81       	ldd	r22, Z+1	; 0x01
    17b8:	60 53       	subi	r22, 0x30	; 48
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	40 e1       	ldi	r20, 0x10	; 16
    17be:	8f 89       	ldd	r24, Y+23	; 0x17
    17c0:	98 8d       	ldd	r25, Y+24	; 0x18
    17c2:	b9 d8       	rcall	.-3726   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    17c4:	e9 8d       	ldd	r30, Y+25	; 0x19
    17c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17c8:	63 81       	ldd	r22, Z+3	; 0x03
    17ca:	60 53       	subi	r22, 0x30	; 48
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	45 e2       	ldi	r20, 0x25	; 37
    17d0:	8f 89       	ldd	r24, Y+23	; 0x17
    17d2:	98 8d       	ldd	r25, Y+24	; 0x18
    17d4:	b0 d8       	rcall	.-3744   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    17d6:	e9 8d       	ldd	r30, Y+25	; 0x19
    17d8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17da:	64 81       	ldd	r22, Z+4	; 0x04
    17dc:	60 53       	subi	r22, 0x30	; 48
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	45 e3       	ldi	r20, 0x35	; 53
    17e2:	8f 89       	ldd	r24, Y+23	; 0x17
    17e4:	98 8d       	ldd	r25, Y+24	; 0x18
    17e6:	a7 d8       	rcall	.-3762   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    17e8:	80 91 d5 02 	lds	r24, 0x02D5
    17ec:	8f 93       	push	r24
    17ee:	80 91 d4 02 	lds	r24, 0x02D4
    17f2:	8f 93       	push	r24
    17f4:	80 91 d3 02 	lds	r24, 0x02D3
    17f8:	8f 93       	push	r24
    17fa:	80 91 d2 02 	lds	r24, 0x02D2
    17fe:	8f 93       	push	r24
    1800:	8f e6       	ldi	r24, 0x6F	; 111
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	9f 93       	push	r25
    1806:	8f 93       	push	r24
    1808:	bf 92       	push	r11
    180a:	af 92       	push	r10
    180c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1810:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    1812:	98 e0       	ldi	r25, 0x08	; 8
    1814:	09 2f       	mov	r16, r25
    1816:	08 1b       	sub	r16, r24
    1818:	8d b7       	in	r24, 0x3d	; 61
    181a:	9e b7       	in	r25, 0x3e	; 62
    181c:	08 96       	adiw	r24, 0x08	; 8
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	9e bf       	out	0x3e, r25	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	8d bf       	out	0x3d, r24	; 61
    1828:	08 30       	cpi	r16, 0x08	; 8
    182a:	e8 f4       	brcc	.+58     	; 0x1866 <_ZN5tacho4drawEv+0x1c6>
    182c:	10 2f       	mov	r17, r16
    182e:	12 95       	swap	r17
    1830:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    1832:	8e 89       	ldd	r24, Y+22	; 0x16
    1834:	fe 01       	movw	r30, r28
    1836:	e0 0f       	add	r30, r16
    1838:	f1 1d       	adc	r31, r1
    183a:	e8 0f       	add	r30, r24
    183c:	f1 1d       	adc	r31, r1
    183e:	36 97       	sbiw	r30, 0x06	; 6
    1840:	60 81       	ld	r22, Z
    1842:	6e 32       	cpi	r22, 0x2E	; 46
    1844:	31 f4       	brne	.+12     	; 0x1852 <_ZN5tacho4drawEv+0x1b2>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    1846:	20 e2       	ldi	r18, 0x20	; 32
    1848:	41 2f       	mov	r20, r17
    184a:	8f 89       	ldd	r24, Y+23	; 0x17
    184c:	98 8d       	ldd	r25, Y+24	; 0x18
    184e:	29 d8       	rcall	.-4014   	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1850:	06 c0       	rjmp	.+12     	; 0x185e <_ZN5tacho4drawEv+0x1be>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    1852:	60 53       	subi	r22, 0x30	; 48
    1854:	28 e1       	ldi	r18, 0x18	; 24
    1856:	41 2f       	mov	r20, r17
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	98 8d       	ldd	r25, Y+24	; 0x18
    185c:	6c d8       	rcall	.-3880   	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    185e:	0f 5f       	subi	r16, 0xFF	; 255
    1860:	10 5f       	subi	r17, 0xF0	; 240
    1862:	08 30       	cpi	r16, 0x08	; 8
    1864:	31 f7       	brne	.-52     	; 0x1832 <_ZN5tacho4drawEv+0x192>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a e7       	ldi	r20, 0x7A	; 122
    186c:	54 e4       	ldi	r21, 0x44	; 68
    186e:	60 91 ce 02 	lds	r22, 0x02CE
    1872:	70 91 cf 02 	lds	r23, 0x02CF
    1876:	80 91 d0 02 	lds	r24, 0x02D0
    187a:	90 91 d1 02 	lds	r25, 0x02D1
    187e:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    1882:	9f 93       	push	r25
    1884:	8f 93       	push	r24
    1886:	7f 93       	push	r23
    1888:	6f 93       	push	r22
    188a:	85 e7       	ldi	r24, 0x75	; 117
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	9f 93       	push	r25
    1890:	8f 93       	push	r24
    1892:	bf 92       	push	r11
    1894:	af 92       	push	r10
    1896:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    189a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    189c:	2d b7       	in	r18, 0x3d	; 61
    189e:	3e b7       	in	r19, 0x3e	; 62
    18a0:	28 5f       	subi	r18, 0xF8	; 248
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	3e bf       	out	0x3e, r19	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	2d bf       	out	0x3d, r18	; 61
    18ae:	88 23       	and	r24, r24
    18b0:	89 f0       	breq	.+34     	; 0x18d4 <_ZN5tacho4drawEv+0x234>
    18b2:	16 e4       	ldi	r17, 0x46	; 70
    18b4:	f1 2c       	mov	r15, r1
    18b6:	fe 01       	movw	r30, r28
    18b8:	ef 0d       	add	r30, r15
    18ba:	f1 1d       	adc	r31, r1
    18bc:	20 e1       	ldi	r18, 0x10	; 16
    18be:	41 2f       	mov	r20, r17
    18c0:	62 81       	ldd	r22, Z+2	; 0x02
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    18ca:	f3 94       	inc	r15
    18cc:	1a 5f       	subi	r17, 0xFA	; 250
    18ce:	8e 89       	ldd	r24, Y+22	; 0x16
    18d0:	f8 16       	cp	r15, r24
    18d2:	88 f3       	brcs	.-30     	; 0x18b6 <_ZN5tacho4drawEv+0x216>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    18d4:	80 91 cd 02 	lds	r24, 0x02CD
    18d8:	8f 93       	push	r24
    18da:	80 91 cc 02 	lds	r24, 0x02CC
    18de:	8f 93       	push	r24
    18e0:	80 91 cb 02 	lds	r24, 0x02CB
    18e4:	8f 93       	push	r24
    18e6:	80 91 ca 02 	lds	r24, 0x02CA
    18ea:	8f 93       	push	r24
    18ec:	8c e7       	ldi	r24, 0x7C	; 124
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	9f 93       	push	r25
    18f2:	8f 93       	push	r24
    18f4:	bf 92       	push	r11
    18f6:	af 92       	push	r10
    18f8:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    18fc:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    18fe:	2d b7       	in	r18, 0x3d	; 61
    1900:	3e b7       	in	r19, 0x3e	; 62
    1902:	28 5f       	subi	r18, 0xF8	; 248
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	3e bf       	out	0x3e, r19	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	2d bf       	out	0x3d, r18	; 61
    1910:	88 23       	and	r24, r24
    1912:	89 f0       	breq	.+34     	; 0x1936 <_ZN5tacho4drawEv+0x296>
    1914:	16 e4       	ldi	r17, 0x46	; 70
    1916:	f1 2c       	mov	r15, r1
    1918:	fe 01       	movw	r30, r28
    191a:	ef 0d       	add	r30, r15
    191c:	f1 1d       	adc	r31, r1
    191e:	28 e2       	ldi	r18, 0x28	; 40
    1920:	41 2f       	mov	r20, r17
    1922:	62 81       	ldd	r22, Z+2	; 0x02
    1924:	8f 89       	ldd	r24, Y+23	; 0x17
    1926:	98 8d       	ldd	r25, Y+24	; 0x18
    1928:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    192c:	f3 94       	inc	r15
    192e:	1a 5f       	subi	r17, 0xFA	; 250
    1930:	8e 89       	ldd	r24, Y+22	; 0x16
    1932:	f8 16       	cp	r15, r24
    1934:	88 f3       	brcs	.-30     	; 0x1918 <_ZN5tacho4drawEv+0x278>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    1936:	c0 90 c6 02 	lds	r12, 0x02C6
    193a:	d0 90 c7 02 	lds	r13, 0x02C7
    193e:	e0 90 c8 02 	lds	r14, 0x02C8
    1942:	f0 90 c9 02 	lds	r15, 0x02C9
    1946:	c7 01       	movw	r24, r14
    1948:	b6 01       	movw	r22, r12
    194a:	2c e3       	ldi	r18, 0x3C	; 60
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <__udivmodsi4>
    1956:	1f 92       	push	r1
    1958:	6f 93       	push	r22
    195a:	1f 92       	push	r1
    195c:	2f 93       	push	r18
    195e:	c7 01       	movw	r24, r14
    1960:	b6 01       	movw	r22, r12
    1962:	20 e1       	ldi	r18, 0x10	; 16
    1964:	3e e0       	ldi	r19, 0x0E	; 14
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <__udivmodsi4>
    196e:	1f 92       	push	r1
    1970:	2f 93       	push	r18
    1972:	85 e8       	ldi	r24, 0x85	; 133
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	bf 92       	push	r11
    197c:	af 92       	push	r10
    197e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1982:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    1984:	2d b7       	in	r18, 0x3d	; 61
    1986:	3e b7       	in	r19, 0x3e	; 62
    1988:	26 5f       	subi	r18, 0xF6	; 246
    198a:	3f 4f       	sbci	r19, 0xFF	; 255
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	3e bf       	out	0x3e, r19	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	2d bf       	out	0x3d, r18	; 61
    1996:	88 23       	and	r24, r24
    1998:	89 f0       	breq	.+34     	; 0x19bc <_ZN5tacho4drawEv+0x31c>
    199a:	16 e4       	ldi	r17, 0x46	; 70
    199c:	f1 2c       	mov	r15, r1
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 0d       	add	r30, r15
    19a2:	f1 1d       	adc	r31, r1
    19a4:	20 e3       	ldi	r18, 0x30	; 48
    19a6:	41 2f       	mov	r20, r17
    19a8:	62 81       	ldd	r22, Z+2	; 0x02
    19aa:	8f 89       	ldd	r24, Y+23	; 0x17
    19ac:	98 8d       	ldd	r25, Y+24	; 0x18
    19ae:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    19b2:	f3 94       	inc	r15
    19b4:	1a 5f       	subi	r17, 0xFA	; 250
    19b6:	8e 89       	ldd	r24, Y+22	; 0x16
    19b8:	f8 16       	cp	r15, r24
    19ba:	88 f3       	brcs	.-30     	; 0x199e <_ZN5tacho4drawEv+0x2fe>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    19bc:	60 91 c6 02 	lds	r22, 0x02C6
    19c0:	70 91 c7 02 	lds	r23, 0x02C7
    19c4:	80 91 c8 02 	lds	r24, 0x02C8
    19c8:	90 91 c9 02 	lds	r25, 0x02C9
    19cc:	61 15       	cp	r22, r1
    19ce:	71 05       	cpc	r23, r1
    19d0:	81 05       	cpc	r24, r1
    19d2:	91 05       	cpc	r25, r1
    19d4:	b1 f4       	brne	.+44     	; 0x1a02 <_ZN5tacho4drawEv+0x362>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    19d6:	1f 92       	push	r1
    19d8:	1f 92       	push	r1
    19da:	1f 92       	push	r1
    19dc:	1f 92       	push	r1
    19de:	8c e7       	ldi	r24, 0x7C	; 124
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	9f 93       	push	r25
    19e4:	8f 93       	push	r24
    19e6:	bf 92       	push	r11
    19e8:	af 92       	push	r10
    19ea:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    19ee:	8e 8b       	std	Y+22, r24	; 0x16
    19f0:	8d b7       	in	r24, 0x3d	; 61
    19f2:	9e b7       	in	r25, 0x3e	; 62
    19f4:	08 96       	adiw	r24, 0x08	; 8
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	9e bf       	out	0x3e, r25	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	8d bf       	out	0x3d, r24	; 61
    1a00:	2a c0       	rjmp	.+84     	; 0x1a56 <_ZN5tacho4drawEv+0x3b6>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    1a02:	0e 94 a5 21 	call	0x434a	; 0x434a <__floatunsisf>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	60 91 ce 02 	lds	r22, 0x02CE
    1a0e:	70 91 cf 02 	lds	r23, 0x02CF
    1a12:	80 91 d0 02 	lds	r24, 0x02D0
    1a16:	90 91 d1 02 	lds	r25, 0x02D1
    1a1a:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    1a1e:	26 e6       	ldi	r18, 0x66	; 102
    1a20:	36 e6       	ldi	r19, 0x66	; 102
    1a22:	46 e6       	ldi	r20, 0x66	; 102
    1a24:	50 e4       	ldi	r21, 0x40	; 64
    1a26:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    1a2a:	9f 93       	push	r25
    1a2c:	8f 93       	push	r24
    1a2e:	7f 93       	push	r23
    1a30:	6f 93       	push	r22
    1a32:	8c e7       	ldi	r24, 0x7C	; 124
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	9f 93       	push	r25
    1a38:	8f 93       	push	r24
    1a3a:	bf 92       	push	r11
    1a3c:	af 92       	push	r10
    1a3e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1a42:	8e 8b       	std	Y+22, r24	; 0x16
    1a44:	2d b7       	in	r18, 0x3d	; 61
    1a46:	3e b7       	in	r19, 0x3e	; 62
    1a48:	28 5f       	subi	r18, 0xF8	; 248
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	3e bf       	out	0x3e, r19	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    1a56:	8e 89       	ldd	r24, Y+22	; 0x16
    1a58:	88 23       	and	r24, r24
    1a5a:	89 f0       	breq	.+34     	; 0x1a7e <_ZN5tacho4drawEv+0x3de>
    1a5c:	0b e4       	ldi	r16, 0x4B	; 75
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
    1a60:	fe 01       	movw	r30, r28
    1a62:	e1 0f       	add	r30, r17
    1a64:	f1 1d       	adc	r31, r1
    1a66:	28 e0       	ldi	r18, 0x08	; 8
    1a68:	40 2f       	mov	r20, r16
    1a6a:	62 81       	ldd	r22, Z+2	; 0x02
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1a74:	1f 5f       	subi	r17, 0xFF	; 255
    1a76:	0a 5f       	subi	r16, 0xFA	; 250
    1a78:	8e 89       	ldd	r24, Y+22	; 0x16
    1a7a:	18 17       	cp	r17, r24
    1a7c:	88 f3       	brcs	.-30     	; 0x1a60 <_ZN5tacho4drawEv+0x3c0>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a80:	98 8d       	ldd	r25, Y+24	; 0x18
    1a82:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <_ZN5tacho4drawEv+0x3f0>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    1a88:	10 e5       	ldi	r17, 0x50	; 80
    1a8a:	c1 2c       	mov	r12, r1
    1a8c:	d1 2c       	mov	r13, r1
    1a8e:	4e ce       	rjmp	.-868    	; 0x172c <_ZN5tacho4drawEv+0x8c>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	08 95       	ret

00001aa6 <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
    1abc:	11 e4       	ldi	r17, 0x41	; 65
    1abe:	e1 2c       	mov	r14, r1
    1ac0:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    1ac2:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ac4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ac6:	ee 0d       	add	r30, r14
    1ac8:	ff 1d       	adc	r31, r15
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	41 2f       	mov	r20, r17
    1ace:	60 81       	ld	r22, Z
    1ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1ad8:	8f ef       	ldi	r24, 0xFF	; 255
    1ada:	e8 1a       	sub	r14, r24
    1adc:	f8 0a       	sbc	r15, r24
    1ade:	1a 5f       	subi	r17, 0xFA	; 250
    1ae0:	1f 35       	cpi	r17, 0x5F	; 95
    1ae2:	79 f7       	brne	.-34     	; 0x1ac2 <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    1ae4:	6c dc       	rcall	.-1832   	; 0x13be <_Z14Batteriestatusv>
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	08 2e       	mov	r0, r24
    1aea:	00 0c       	add	r0, r0
    1aec:	33 0b       	sbc	r19, r19
    1aee:	3f 93       	push	r19
    1af0:	8f 93       	push	r24
    1af2:	8a e6       	ldi	r24, 0x6A	; 106
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	9f 93       	push	r25
    1af8:	8f 93       	push	r24
    1afa:	ce 01       	movw	r24, r28
    1afc:	02 96       	adiw	r24, 0x02	; 2
    1afe:	9f 93       	push	r25
    1b00:	8f 93       	push	r24
    1b02:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1b06:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1b08:	15 e1       	ldi	r17, 0x15	; 21
    1b0a:	18 1b       	sub	r17, r24
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	15 31       	cpi	r17, 0x15	; 21
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <_ZN3uhr4drawEv+0x78>
    1b1c:	5f c0       	rjmp	.+190    	; 0x1bdc <_ZN3uhr4drawEv+0x136>
    1b1e:	01 2f       	mov	r16, r17
    1b20:	00 0f       	add	r16, r16
    1b22:	01 0f       	add	r16, r17
    1b24:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1b26:	8e 89       	ldd	r24, Y+22	; 0x16
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e1 0f       	add	r30, r17
    1b2c:	f1 1d       	adc	r31, r1
    1b2e:	e8 0f       	add	r30, r24
    1b30:	f1 1d       	adc	r31, r1
    1b32:	73 97       	sbiw	r30, 0x13	; 19
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	40 2f       	mov	r20, r16
    1b38:	60 81       	ld	r22, Z
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1b42:	1f 5f       	subi	r17, 0xFF	; 255
    1b44:	0a 5f       	subi	r16, 0xFA	; 250
    1b46:	15 31       	cpi	r17, 0x15	; 21
    1b48:	71 f7       	brne	.-36     	; 0x1b26 <_ZN3uhr4drawEv+0x80>
    1b4a:	48 c0       	rjmp	.+144    	; 0x1bdc <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    1b4c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b4e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b50:	ee 0d       	add	r30, r14
    1b52:	ff 1d       	adc	r31, r15
    1b54:	28 e3       	ldi	r18, 0x38	; 56
    1b56:	41 2f       	mov	r20, r17
    1b58:	60 85       	ldd	r22, Z+8	; 0x08
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	e8 1a       	sub	r14, r24
    1b66:	f8 0a       	sbc	r15, r24
    1b68:	1a 5f       	subi	r17, 0xFA	; 250
    1b6a:	11 37       	cpi	r17, 0x71	; 113
    1b6c:	79 f7       	brne	.-34     	; 0x1b4c <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    1b6e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b70:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b72:	09 a5       	ldd	r16, Y+41	; 0x29
    1b74:	22 89       	ldd	r18, Z+18	; 0x12
    1b76:	41 89       	ldd	r20, Z+17	; 0x11
    1b78:	60 89       	ldd	r22, Z+16	; 0x10
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    1b82:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b84:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b86:	60 81       	ld	r22, Z
    1b88:	60 53       	subi	r22, 0x30	; 48
    1b8a:	2d e0       	ldi	r18, 0x0D	; 13
    1b8c:	46 e4       	ldi	r20, 0x46	; 70
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1b96:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b98:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b9a:	61 81       	ldd	r22, Z+1	; 0x01
    1b9c:	60 53       	subi	r22, 0x30	; 48
    1b9e:	2d e0       	ldi	r18, 0x0D	; 13
    1ba0:	46 e5       	ldi	r20, 0x56	; 86
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    1baa:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bae:	63 81       	ldd	r22, Z+3	; 0x03
    1bb0:	60 53       	subi	r22, 0x30	; 48
    1bb2:	22 e2       	ldi	r18, 0x22	; 34
    1bb4:	46 e4       	ldi	r20, 0x46	; 70
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1bbe:	e9 8d       	ldd	r30, Y+25	; 0x19
    1bc0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1bc2:	64 81       	ldd	r22, Z+4	; 0x04
    1bc4:	60 53       	subi	r22, 0x30	; 48
    1bc6:	22 e2       	ldi	r18, 0x22	; 34
    1bc8:	46 e5       	ldi	r20, 0x56	; 86
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd6:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1bdc:	11 e4       	ldi	r17, 0x41	; 65
    1bde:	e1 2c       	mov	r14, r1
    1be0:	f1 2c       	mov	r15, r1
    1be2:	b4 cf       	rjmp	.-152    	; 0x1b4c <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	08 95       	ret

00001bf2 <_ZN7wandern4drawEv>:
			EEPROM_Write(EEJAHR,rtc->Jahr);
		}
		return 0;
	}
	
	void draw(){
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1c04:	8f 89       	ldd	r24, Y+23	; 0x17
    1c06:	98 8d       	ldd	r25, Y+24	; 0x18
    1c08:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
    1c0e:	e1 2c       	mov	r14, r1
    1c10:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    1c12:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c14:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1c16:	ee 0d       	add	r30, r14
    1c18:	ff 1d       	adc	r31, r15
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	41 2f       	mov	r20, r17
    1c1e:	60 81       	ld	r22, Z
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1c28:	2f ef       	ldi	r18, 0xFF	; 255
    1c2a:	e2 1a       	sub	r14, r18
    1c2c:	f2 0a       	sbc	r15, r18
    1c2e:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    1c30:	10 33       	cpi	r17, 0x30	; 48
    1c32:	79 f7       	brne	.-34     	; 0x1c12 <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    1c34:	c4 db       	rcall	.-2168   	; 0x13be <_Z14Batteriestatusv>
    1c36:	7e 01       	movw	r14, r28
    1c38:	32 e0       	ldi	r19, 0x02	; 2
    1c3a:	e3 0e       	add	r14, r19
    1c3c:	f1 1c       	adc	r15, r1
    1c3e:	28 2f       	mov	r18, r24
    1c40:	08 2e       	mov	r0, r24
    1c42:	00 0c       	add	r0, r0
    1c44:	33 0b       	sbc	r19, r19
    1c46:	3f 93       	push	r19
    1c48:	8f 93       	push	r24
    1c4a:	82 e3       	ldi	r24, 0x32	; 50
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	ff 92       	push	r15
    1c54:	ef 92       	push	r14
    1c56:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1c5a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1c5c:	15 e1       	ldi	r17, 0x15	; 21
    1c5e:	18 1b       	sub	r17, r24
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	15 31       	cpi	r17, 0x15	; 21
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <_ZN7wandern4drawEv+0x80>
    1c70:	fd c0       	rjmp	.+506    	; 0x1e6c <_ZN7wandern4drawEv+0x27a>
    1c72:	01 2f       	mov	r16, r17
    1c74:	00 0f       	add	r16, r16
    1c76:	01 0f       	add	r16, r17
    1c78:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1c7a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e1 0f       	add	r30, r17
    1c80:	f1 1d       	adc	r31, r1
    1c82:	e8 0f       	add	r30, r24
    1c84:	f1 1d       	adc	r31, r1
    1c86:	73 97       	sbiw	r30, 0x13	; 19
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	40 2f       	mov	r20, r16
    1c8c:	60 81       	ld	r22, Z
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1c96:	1f 5f       	subi	r17, 0xFF	; 255
    1c98:	0a 5f       	subi	r16, 0xFA	; 250
    1c9a:	15 31       	cpi	r17, 0x15	; 21
    1c9c:	71 f7       	brne	.-36     	; 0x1c7a <_ZN7wandern4drawEv+0x88>
    1c9e:	e6 c0       	rjmp	.+460    	; 0x1e6c <_ZN7wandern4drawEv+0x27a>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1ca0:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ca2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ca4:	ec 0d       	add	r30, r12
    1ca6:	fd 1d       	adc	r31, r13
    1ca8:	28 e3       	ldi	r18, 0x38	; 56
    1caa:	41 2f       	mov	r20, r17
    1cac:	60 85       	ldd	r22, Z+8	; 0x08
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	c8 1a       	sub	r12, r24
    1cba:	d8 0a       	sbc	r13, r24
    1cbc:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1cbe:	10 38       	cpi	r17, 0x80	; 128
    1cc0:	79 f7       	brne	.-34     	; 0x1ca0 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"Data: %c%c%c%c%c",gpsdata[0],gpsdata[1],gpsdata[2],gpsdata[3],gpsdata[4]);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
		*/
		
		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    1cc2:	80 91 e7 02 	lds	r24, 0x02E7
    1cc6:	8f 93       	push	r24
    1cc8:	80 91 e6 02 	lds	r24, 0x02E6
    1ccc:	8f 93       	push	r24
    1cce:	80 91 e5 02 	lds	r24, 0x02E5
    1cd2:	8f 93       	push	r24
    1cd4:	80 91 e4 02 	lds	r24, 0x02E4
    1cd8:	8f 93       	push	r24
    1cda:	84 e9       	ldi	r24, 0x94	; 148
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	9f 93       	push	r25
    1ce0:	8f 93       	push	r24
    1ce2:	ff 92       	push	r15
    1ce4:	ef 92       	push	r14
    1ce6:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1cea:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    1cec:	2d b7       	in	r18, 0x3d	; 61
    1cee:	3e b7       	in	r19, 0x3e	; 62
    1cf0:	28 5f       	subi	r18, 0xF8	; 248
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	3e bf       	out	0x3e, r19	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	2d bf       	out	0x3d, r18	; 61
    1cfe:	88 23       	and	r24, r24
    1d00:	89 f0       	breq	.+34     	; 0x1d24 <_ZN7wandern4drawEv+0x132>
    1d02:	00 e0       	ldi	r16, 0x00	; 0
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	fe 01       	movw	r30, r28
    1d08:	e1 0f       	add	r30, r17
    1d0a:	f1 1d       	adc	r31, r1
    1d0c:	20 e1       	ldi	r18, 0x10	; 16
    1d0e:	40 2f       	mov	r20, r16
    1d10:	62 81       	ldd	r22, Z+2	; 0x02
    1d12:	8f 89       	ldd	r24, Y+23	; 0x17
    1d14:	98 8d       	ldd	r25, Y+24	; 0x18
    1d16:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1d1a:	1f 5f       	subi	r17, 0xFF	; 255
    1d1c:	0a 5f       	subi	r16, 0xFA	; 250
    1d1e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d20:	18 17       	cp	r17, r24
    1d22:	88 f3       	brcs	.-30     	; 0x1d06 <_ZN7wandern4drawEv+0x114>
			
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    1d24:	80 91 e3 02 	lds	r24, 0x02E3
    1d28:	8f 93       	push	r24
    1d2a:	80 91 e2 02 	lds	r24, 0x02E2
    1d2e:	8f 93       	push	r24
    1d30:	80 91 e1 02 	lds	r24, 0x02E1
    1d34:	8f 93       	push	r24
    1d36:	80 91 e0 02 	lds	r24, 0x02E0
    1d3a:	8f 93       	push	r24
    1d3c:	8e e9       	ldi	r24, 0x9E	; 158
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	9f 93       	push	r25
    1d42:	8f 93       	push	r24
    1d44:	ff 92       	push	r15
    1d46:	ef 92       	push	r14
    1d48:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1d4c:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    1d4e:	2d b7       	in	r18, 0x3d	; 61
    1d50:	3e b7       	in	r19, 0x3e	; 62
    1d52:	28 5f       	subi	r18, 0xF8	; 248
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	3e bf       	out	0x3e, r19	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	2d bf       	out	0x3d, r18	; 61
    1d60:	88 23       	and	r24, r24
    1d62:	89 f0       	breq	.+34     	; 0x1d86 <_ZN7wandern4drawEv+0x194>
    1d64:	00 e0       	ldi	r16, 0x00	; 0
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e1 0f       	add	r30, r17
    1d6c:	f1 1d       	adc	r31, r1
    1d6e:	28 e1       	ldi	r18, 0x18	; 24
    1d70:	40 2f       	mov	r20, r16
    1d72:	62 81       	ldd	r22, Z+2	; 0x02
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1d7c:	1f 5f       	subi	r17, 0xFF	; 255
    1d7e:	0a 5f       	subi	r16, 0xFA	; 250
    1d80:	8e 89       	ldd	r24, Y+22	; 0x16
    1d82:	18 17       	cp	r17, r24
    1d84:	88 f3       	brcs	.-30     	; 0x1d68 <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.4f",gpsspeed);
    1d86:	80 91 df 02 	lds	r24, 0x02DF
    1d8a:	8f 93       	push	r24
    1d8c:	80 91 de 02 	lds	r24, 0x02DE
    1d90:	8f 93       	push	r24
    1d92:	80 91 dd 02 	lds	r24, 0x02DD
    1d96:	8f 93       	push	r24
    1d98:	80 91 dc 02 	lds	r24, 0x02DC
    1d9c:	8f 93       	push	r24
    1d9e:	88 ea       	ldi	r24, 0xA8	; 168
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	9f 93       	push	r25
    1da4:	8f 93       	push	r24
    1da6:	ff 92       	push	r15
    1da8:	ef 92       	push	r14
    1daa:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1dae:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    1db0:	2d b7       	in	r18, 0x3d	; 61
    1db2:	3e b7       	in	r19, 0x3e	; 62
    1db4:	28 5f       	subi	r18, 0xF8	; 248
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	3e bf       	out	0x3e, r19	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	2d bf       	out	0x3d, r18	; 61
    1dc2:	88 23       	and	r24, r24
    1dc4:	89 f0       	breq	.+34     	; 0x1de8 <_ZN7wandern4drawEv+0x1f6>
    1dc6:	00 e0       	ldi	r16, 0x00	; 0
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e1 0f       	add	r30, r17
    1dce:	f1 1d       	adc	r31, r1
    1dd0:	20 e2       	ldi	r18, 0x20	; 32
    1dd2:	40 2f       	mov	r20, r16
    1dd4:	62 81       	ldd	r22, Z+2	; 0x02
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1dde:	1f 5f       	subi	r17, 0xFF	; 255
    1de0:	0a 5f       	subi	r16, 0xFA	; 250
    1de2:	8e 89       	ldd	r24, Y+22	; 0x16
    1de4:	18 17       	cp	r17, r24
    1de6:	88 f3       	brcs	.-30     	; 0x1dca <_ZN7wandern4drawEv+0x1d8>
		/*
		for(uint8_t i=18;i<35;i++){oled->draw_ASCI(gpsdata[i],(i-18)*charsize,4*charhighte);}
			*/
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    1de8:	80 91 d6 02 	lds	r24, 0x02D6
    1dec:	1f 92       	push	r1
    1dee:	8f 93       	push	r24
    1df0:	80 91 d7 02 	lds	r24, 0x02D7
    1df4:	1f 92       	push	r1
    1df6:	8f 93       	push	r24
    1df8:	80 91 d8 02 	lds	r24, 0x02D8
    1dfc:	1f 92       	push	r1
    1dfe:	8f 93       	push	r24
    1e00:	80 91 d9 02 	lds	r24, 0x02D9
    1e04:	1f 92       	push	r1
    1e06:	8f 93       	push	r24
    1e08:	80 91 da 02 	lds	r24, 0x02DA
    1e0c:	1f 92       	push	r1
    1e0e:	8f 93       	push	r24
    1e10:	80 91 db 02 	lds	r24, 0x02DB
    1e14:	1f 92       	push	r1
    1e16:	8f 93       	push	r24
    1e18:	82 eb       	ldi	r24, 0xB2	; 178
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	9f 93       	push	r25
    1e1e:	8f 93       	push	r24
    1e20:	ff 92       	push	r15
    1e22:	ef 92       	push	r14
    1e24:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    1e28:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    1e2a:	2d b7       	in	r18, 0x3d	; 61
    1e2c:	3e b7       	in	r19, 0x3e	; 62
    1e2e:	20 5f       	subi	r18, 0xF0	; 240
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	3e bf       	out	0x3e, r19	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	2d bf       	out	0x3d, r18	; 61
    1e3c:	88 23       	and	r24, r24
    1e3e:	89 f0       	breq	.+34     	; 0x1e62 <_ZN7wandern4drawEv+0x270>
    1e40:	00 e0       	ldi	r16, 0x00	; 0
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	fe 01       	movw	r30, r28
    1e46:	e1 0f       	add	r30, r17
    1e48:	f1 1d       	adc	r31, r1
    1e4a:	28 e2       	ldi	r18, 0x28	; 40
    1e4c:	40 2f       	mov	r20, r16
    1e4e:	62 81       	ldd	r22, Z+2	; 0x02
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	98 8d       	ldd	r25, Y+24	; 0x18
    1e54:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    1e58:	1f 5f       	subi	r17, 0xFF	; 255
    1e5a:	0a 5f       	subi	r16, 0xFA	; 250
    1e5c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e5e:	18 17       	cp	r17, r24
    1e60:	88 f3       	brcs	.-30     	; 0x1e44 <_ZN7wandern4drawEv+0x252>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <_ZN7wandern4drawEv+0x282>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1e6c:	10 e5       	ldi	r17, 0x50	; 80
    1e6e:	c1 2c       	mov	r12, r1
    1e70:	d1 2c       	mov	r13, r1
    1e72:	16 cf       	rjmp	.-468    	; 0x1ca0 <_ZN7wandern4drawEv+0xae>
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
		
		send();	
	}
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	cf 90       	pop	r12
    1e84:	08 95       	ret

00001e86 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    1e86:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1e88:	f9 99       	sbic	0x1f, 1	; 31
    1e8a:	fe cf       	rjmp	.-4      	; 0x1e88 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    1e8c:	92 bd       	out	0x22, r25	; 34
    1e8e:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    1e90:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    1e92:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    1e94:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    1e96:	78 94       	sei
    1e98:	08 95       	ret

00001e9a <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	ec 01       	movw	r28, r24
		if (*tast=='e')
    1ea0:	fb 01       	movw	r30, r22
    1ea2:	90 81       	ld	r25, Z
    1ea4:	95 36       	cpi	r25, 0x65	; 101
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <_ZN7wandern11tastendruckEPh+0x10>
    1ea8:	40 c0       	rjmp	.+128    	; 0x1f2a <_ZN7wandern11tastendruckEPh+0x90>
		{
			rtc->Stunden	= gpsstunde;
    1eaa:	e9 8d       	ldd	r30, Y+25	; 0x19
    1eac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1eae:	80 91 db 02 	lds	r24, 0x02DB
    1eb2:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    1eb4:	e9 8d       	ldd	r30, Y+25	; 0x19
    1eb6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1eb8:	80 91 da 02 	lds	r24, 0x02DA
    1ebc:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    1ebe:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ec0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ec2:	80 91 d9 02 	lds	r24, 0x02D9
    1ec6:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    1ec8:	e9 8d       	ldd	r30, Y+25	; 0x19
    1eca:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ecc:	80 91 d8 02 	lds	r24, 0x02D8
    1ed0:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    1ed2:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ed4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ed6:	80 91 d7 02 	lds	r24, 0x02D7
    1eda:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    1edc:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ede:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ee0:	80 91 d6 02 	lds	r24, 0x02D6
    1ee4:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    1ee6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ee8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eea:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    1eee:	e9 8d       	ldd	r30, Y+25	; 0x19
    1ef0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1ef2:	61 89       	ldd	r22, Z+17	; 0x11
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	c6 df       	rcall	.-116    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    1efa:	e9 8d       	ldd	r30, Y+25	; 0x19
    1efc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1efe:	60 89       	ldd	r22, Z+16	; 0x10
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	c0 df       	rcall	.-128    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    1f06:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f08:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f0a:	64 89       	ldd	r22, Z+20	; 0x14
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	ba df       	rcall	.-140    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    1f12:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f14:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f16:	66 89       	ldd	r22, Z+22	; 0x16
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	b4 df       	rcall	.-152    	; 0x1e86 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    1f1e:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f20:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f22:	67 89       	ldd	r22, Z+23	; 0x17
    1f24:	84 e0       	ldi	r24, 0x04	; 4
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	ae df       	rcall	.-164    	; 0x1e86 <_Z12EEPROM_Writejh>
		}
		return 0;
	}
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	08 95       	ret

00001f32 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    1f32:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1f34:	f9 99       	sbic	0x1f, 1	; 31
    1f36:	fe cf       	rjmp	.-4      	; 0x1f34 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    1f38:	92 bd       	out	0x22, r25	; 34
    1f3a:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    1f3c:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    1f3e:	78 94       	sei
	return EEDR;
    1f40:	80 b5       	in	r24, 0x20	; 32
}
    1f42:	08 95       	ret

00001f44 <__vector_11>:
uint8_t FPS;

//schlechte variante der Uhreinstellung
void uhreinstellen();

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    1f44:	1f 92       	push	r1
    1f46:	0f 92       	push	r0
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	0f 92       	push	r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	0b b6       	in	r0, 0x3b	; 59
    1f50:	0f 92       	push	r0
    1f52:	8f 93       	push	r24
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    1f58:	ea e3       	ldi	r30, 0x3A	; 58
    1f5a:	f8 e0       	ldi	r31, 0x08	; 8
    1f5c:	82 89       	ldd	r24, Z+18	; 0x12
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    1f62:	80 8d       	ldd	r24, Z+24	; 0x18
    1f64:	82 60       	ori	r24, 0x02	; 2
    1f66:	80 8f       	std	Z+24, r24	; 0x18
	if (statusreg&(1<<powersavemode))
    1f68:	80 91 34 03 	lds	r24, 0x0334
    1f6c:	81 ff       	sbrs	r24, 1
    1f6e:	03 c0       	rjmp	.+6      	; 0x1f76 <__vector_11+0x32>
	{
		SMCR &= ~(1<<SE);
    1f70:	83 b7       	in	r24, 0x33	; 51
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	83 bf       	out	0x33, r24	; 51
	}
}
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	8f 91       	pop	r24
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_13>:

ISR(TIMER1_COMPA_vect){
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    1f96:	80 91 34 03 	lds	r24, 0x0334
    1f9a:	81 60       	ori	r24, 0x01	; 1
    1f9c:	80 93 34 03 	sts	0x0334, r24
}
    1fa0:	8f 91       	pop	r24
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	0f 90       	pop	r0
    1fa8:	1f 90       	pop	r1
    1faa:	18 95       	reti

00001fac <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    1fac:	1f 92       	push	r1
    1fae:	0f 92       	push	r0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	0f 92       	push	r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	0b b6       	in	r0, 0x3b	; 59
    1fb8:	0f 92       	push	r0
    1fba:	2f 93       	push	r18
    1fbc:	8f 93       	push	r24
    1fbe:	9f 93       	push	r25
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
	uint8_t temp = UDR0;
    1fc4:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    1fc8:	24 32       	cpi	r18, 0x24	; 36
    1fca:	51 f4       	brne	.+20     	; 0x1fe0 <__vector_20+0x34>
    1fcc:	80 91 31 03 	lds	r24, 0x0331
    1fd0:	98 2f       	mov	r25, r24
    1fd2:	9c 70       	andi	r25, 0x0C	; 12
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <__vector_20+0x34>
	{
		gpscounter = 0;
    1fd6:	10 92 e8 02 	sts	0x02E8, r1
		gpsstatus |= (1<<message);
    1fda:	81 60       	ori	r24, 0x01	; 1
    1fdc:	80 93 31 03 	sts	0x0331, r24
	}
	if ((gpsstatus&(1<<message)))
    1fe0:	90 91 31 03 	lds	r25, 0x0331
    1fe4:	90 ff       	sbrs	r25, 0
    1fe6:	3c c0       	rjmp	.+120    	; 0x2060 <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    1fe8:	80 91 e8 02 	lds	r24, 0x02E8
    1fec:	e8 2f       	mov	r30, r24
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	e7 51       	subi	r30, 0x17	; 23
    1ff2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff4:	20 83       	st	Z, r18
		gpscounter++;
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	80 93 e8 02 	sts	0x02E8, r24
		if (gpscounter>72)
    1ffc:	89 34       	cpi	r24, 0x49	; 73
    1ffe:	20 f0       	brcs	.+8      	; 0x2008 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    2000:	9e 7f       	andi	r25, 0xFE	; 254
    2002:	90 93 31 03 	sts	0x0331, r25
    2006:	2c c0       	rjmp	.+88     	; 0x2060 <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    2008:	83 31       	cpi	r24, 0x13	; 19
    200a:	c9 f4       	brne	.+50     	; 0x203e <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    200c:	80 91 ed 02 	lds	r24, 0x02ED
    2010:	8d 34       	cpi	r24, 0x4D	; 77
    2012:	89 f4       	brne	.+34     	; 0x2036 <__vector_20+0x8a>
    2014:	80 91 ee 02 	lds	r24, 0x02EE
    2018:	83 34       	cpi	r24, 0x43	; 67
    201a:	69 f4       	brne	.+26     	; 0x2036 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    201c:	80 91 fb 02 	lds	r24, 0x02FB
    2020:	81 34       	cpi	r24, 0x41	; 65
    2022:	29 f0       	breq	.+10     	; 0x202e <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    2024:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    2026:	90 61       	ori	r25, 0x10	; 16
    2028:	90 93 31 03 	sts	0x0331, r25
    202c:	19 c0       	rjmp	.+50     	; 0x2060 <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    202e:	92 60       	ori	r25, 0x02	; 2
    2030:	90 93 31 03 	sts	0x0331, r25
    2034:	15 c0       	rjmp	.+42     	; 0x2060 <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    2036:	9c 7f       	andi	r25, 0xFC	; 252
    2038:	90 93 31 03 	sts	0x0331, r25
    203c:	11 c0       	rjmp	.+34     	; 0x2060 <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    203e:	8a 32       	cpi	r24, 0x2A	; 42
    2040:	39 f4       	brne	.+14     	; 0x2050 <__vector_20+0xa4>
    2042:	94 ff       	sbrs	r25, 4
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    2046:	9e 7e       	andi	r25, 0xEE	; 238
    2048:	98 60       	ori	r25, 0x08	; 8
    204a:	90 93 31 03 	sts	0x0331, r25
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    2050:	86 34       	cpi	r24, 0x46	; 70
    2052:	31 f4       	brne	.+12     	; 0x2060 <__vector_20+0xb4>
    2054:	91 ff       	sbrs	r25, 1
    2056:	04 c0       	rjmp	.+8      	; 0x2060 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    2058:	9c 7f       	andi	r25, 0xFC	; 252
    205a:	94 60       	ori	r25, 0x04	; 4
    205c:	90 93 31 03 	sts	0x0331, r25
		}
	}
}
    2060:	ff 91       	pop	r31
    2062:	ef 91       	pop	r30
    2064:	9f 91       	pop	r25
    2066:	8f 91       	pop	r24
    2068:	2f 91       	pop	r18
    206a:	0f 90       	pop	r0
    206c:	0b be       	out	0x3b, r0	; 59
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    2078:	10 92 d2 02 	sts	0x02D2, r1
    207c:	10 92 d3 02 	sts	0x02D3, r1
    2080:	10 92 d4 02 	sts	0x02D4, r1
    2084:	10 92 d5 02 	sts	0x02D5, r1
	strecke = 0;
    2088:	10 92 ce 02 	sts	0x02CE, r1
    208c:	10 92 cf 02 	sts	0x02CF, r1
    2090:	10 92 d0 02 	sts	0x02D0, r1
    2094:	10 92 d1 02 	sts	0x02D1, r1
	maxgeschw = 0;
    2098:	10 92 ca 02 	sts	0x02CA, r1
    209c:	10 92 cb 02 	sts	0x02CB, r1
    20a0:	10 92 cc 02 	sts	0x02CC, r1
    20a4:	10 92 cd 02 	sts	0x02CD, r1
	Fahrtzeit = 0;
    20a8:	10 92 c6 02 	sts	0x02C6, r1
    20ac:	10 92 c7 02 	sts	0x02C7, r1
    20b0:	10 92 c8 02 	sts	0x02C8, r1
    20b4:	10 92 c9 02 	sts	0x02C9, r1
    20b8:	08 95       	ret

000020ba <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    20ba:	fb 01       	movw	r30, r22
    20bc:	80 81       	ld	r24, Z
    20be:	85 36       	cpi	r24, 0x65	; 101
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    20c2:	da df       	rcall	.-76     	; 0x2078 <_Z6nullenv>
		}
		return 0;
	}
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	08 95       	ret

000020c8 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 81       	ld	r18, Z
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	06 2e       	mov	r0, r22
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <_Z13reed_debouncePVhh+0xe>
    20d2:	35 95       	asr	r19
    20d4:	27 95       	ror	r18
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <_Z13reed_debouncePVhh+0xa>
    20da:	20 ff       	sbrs	r18, 0
    20dc:	16 c0       	rjmp	.+44     	; 0x210a <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20de:	ef e0       	ldi	r30, 0x0F	; 15
    20e0:	f7 e2       	ldi	r31, 0x27	; 39
    20e2:	31 97       	sbiw	r30, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <_Z13reed_debouncePVhh+0x1a>
    20e6:	00 c0       	rjmp	.+0      	; 0x20e8 <_Z13reed_debouncePVhh+0x20>
    20e8:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    20ea:	fc 01       	movw	r30, r24
    20ec:	80 81       	ld	r24, Z
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <_Z13reed_debouncePVhh+0x2e>
    20f2:	95 95       	asr	r25
    20f4:	87 95       	ror	r24
    20f6:	6a 95       	dec	r22
    20f8:	e2 f7       	brpl	.-8      	; 0x20f2 <_Z13reed_debouncePVhh+0x2a>
    20fa:	80 fd       	sbrc	r24, 0
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20fe:	f2 e0       	ldi	r31, 0x02	; 2
    2100:	fa 95       	dec	r31
    2102:	f1 f7       	brne	.-4      	; 0x2100 <_Z13reed_debouncePVhh+0x38>
    2104:	00 c0       	rjmp	.+0      	; 0x2106 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	08 95       	ret
		}
	}
	return 0;
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	08 95       	ret
    210e:	80 e0       	ldi	r24, 0x00	; 0
}
    2110:	08 95       	ret

00002112 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    211e:	e4 e8       	ldi	r30, 0x84	; 132
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	c0 81       	ld	r28, Z
    2124:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    2126:	11 82       	std	Z+1, r1	; 0x01
    2128:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    212a:	2b ed       	ldi	r18, 0xDB	; 219
    212c:	3f e0       	ldi	r19, 0x0F	; 15
    212e:	49 e4       	ldi	r20, 0x49	; 73
    2130:	50 e4       	ldi	r21, 0x40	; 64
    2132:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    2136:	26 e6       	ldi	r18, 0x66	; 102
    2138:	36 e6       	ldi	r19, 0x66	; 102
    213a:	46 e6       	ldi	r20, 0x66	; 102
    213c:	50 e4       	ldi	r21, 0x40	; 64
    213e:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    2142:	6b 01       	movw	r12, r22
    2144:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    2146:	be 01       	movw	r22, r28
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 a5 21 	call	0x434a	; 0x434a <__floatunsisf>
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	5e e3       	ldi	r21, 0x3E	; 62
    2158:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    215c:	2d eb       	ldi	r18, 0xBD	; 189
    215e:	37 e3       	ldi	r19, 0x37	; 55
    2160:	46 e8       	ldi	r20, 0x86	; 134
    2162:	5a e3       	ldi	r21, 0x3A	; 58
    2164:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    2168:	2a e0       	ldi	r18, 0x0A	; 10
    216a:	37 ed       	ldi	r19, 0xD7	; 215
    216c:	43 ea       	ldi	r20, 0xA3	; 163
    216e:	5b e3       	ldi	r21, 0x3B	; 59
    2170:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2174:	9b 01       	movw	r18, r22
    2176:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    2178:	c7 01       	movw	r24, r14
    217a:	b6 01       	movw	r22, r12
    217c:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    2180:	20 91 d2 02 	lds	r18, 0x02D2
    2184:	30 91 d3 02 	lds	r19, 0x02D3
    2188:	40 91 d4 02 	lds	r20, 0x02D4
    218c:	50 91 d5 02 	lds	r21, 0x02D5
    2190:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
	geschw /= 2.0;
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    21a0:	6b 01       	movw	r12, r22
    21a2:	7c 01       	movw	r14, r24
	if (geschw >=160)
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	53 e4       	ldi	r21, 0x43	; 67
    21ac:	0e 94 b5 22 	call	0x456a	; 0x456a <__gesf2>
    21b0:	88 23       	and	r24, r24
    21b2:	4c f4       	brge	.+18     	; 0x21c6 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    21b4:	c0 92 d2 02 	sts	0x02D2, r12
    21b8:	d0 92 d3 02 	sts	0x02D3, r13
    21bc:	e0 92 d4 02 	sts	0x02D4, r14
    21c0:	f0 92 d5 02 	sts	0x02D5, r15
    21c4:	08 c0       	rjmp	.+16     	; 0x21d6 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    21c6:	10 92 d2 02 	sts	0x02D2, r1
    21ca:	10 92 d3 02 	sts	0x02D3, r1
    21ce:	10 92 d4 02 	sts	0x02D4, r1
    21d2:	10 92 d5 02 	sts	0x02D5, r1
	}
}
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	ff 90       	pop	r15
    21dc:	ef 90       	pop	r14
    21de:	df 90       	pop	r13
    21e0:	cf 90       	pop	r12
    21e2:	08 95       	ret

000021e4 <_Z15initialisierungv>:
			SMCR |= (1<<SE);
		}
    }
}

void initialisierung(){	
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	a9 97       	sbiw	r28, 0x29	; 41
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    21fe:	10 92 35 03 	sts	0x0335, r1
	statusreg=0;
    2202:	10 92 34 03 	sts	0x0334, r1
	position=0;
    2206:	10 92 33 03 	sts	0x0333, r1
	FPS=0;
    220a:	10 92 32 03 	sts	0x0332, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    220e:	10 92 85 00 	sts	0x0085, r1
    2212:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    2216:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    221a:	85 e0       	ldi	r24, 0x05	; 5
    221c:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    2220:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    2222:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    2224:	80 e4       	ldi	r24, 0x40	; 64
    2226:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    222a:	ea e7       	ldi	r30, 0x7A	; 122
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    2232:	80 81       	ld	r24, Z
    2234:	80 68       	ori	r24, 0x80	; 128
    2236:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    2238:	80 81       	ld	r24, Z
    223a:	80 64       	ori	r24, 0x40	; 64
    223c:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    223e:	80 81       	ld	r24, Z
    2240:	18 2f       	mov	r17, r24
    2242:	10 74       	andi	r17, 0x40	; 64
    2244:	86 fd       	sbrc	r24, 6
    2246:	fb cf       	rjmp	.-10     	; 0x223e <_Z15initialisierungv+0x5a>
	(void) ADCW;
    2248:	80 91 78 00 	lds	r24, 0x0078
    224c:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    2250:	89 b1       	in	r24, 0x09	; 9
    2252:	89 7f       	andi	r24, 0xF9	; 249
    2254:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    2256:	8a b1       	in	r24, 0x0a	; 10
    2258:	89 7f       	andi	r24, 0xF9	; 249
    225a:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    225c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    2260:	83 e3       	ldi	r24, 0x33	; 51
    2262:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    2266:	86 e0       	ldi	r24, 0x06	; 6
    2268:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    226c:	80 e8       	ldi	r24, 0x80	; 128
    226e:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    2272:	10 92 e8 02 	sts	0x02E8, r1
	gpsstatus = (1<<fix);
    2276:	80 93 31 03 	sts	0x0331, r24
	lat = 0;
    227a:	10 92 e4 02 	sts	0x02E4, r1
    227e:	10 92 e5 02 	sts	0x02E5, r1
    2282:	10 92 e6 02 	sts	0x02E6, r1
    2286:	10 92 e7 02 	sts	0x02E7, r1
	lon = 0;
    228a:	10 92 e0 02 	sts	0x02E0, r1
    228e:	10 92 e1 02 	sts	0x02E1, r1
    2292:	10 92 e2 02 	sts	0x02E2, r1
    2296:	10 92 e3 02 	sts	0x02E3, r1
	gpsspeed = 0;
    229a:	10 92 dc 02 	sts	0x02DC, r1
    229e:	10 92 dd 02 	sts	0x02DD, r1
    22a2:	10 92 de 02 	sts	0x02DE, r1
    22a6:	10 92 df 02 	sts	0x02DF, r1
	gpsstunde = 0;
    22aa:	10 92 db 02 	sts	0x02DB, r1
	gpsminute = 0;
    22ae:	10 92 da 02 	sts	0x02DA, r1
	gpssekunde = 0;
    22b2:	10 92 d9 02 	sts	0x02D9, r1
	gpsTag = 0;
    22b6:	10 92 d8 02 	sts	0x02D8, r1
	gpsMonat = 0;
    22ba:	10 92 d7 02 	sts	0x02D7, r1
	gpsJahr = 0;
    22be:	10 92 d6 02 	sts	0x02D6, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    22c2:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    22c4:	89 e3       	ldi	r24, 0x39	; 57
    22c6:	94 e0       	ldi	r25, 0x04	; 4
    22c8:	99 8f       	std	Y+25, r25	; 0x19
    22ca:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    22cc:	8a e3       	ldi	r24, 0x3A	; 58
    22ce:	98 e0       	ldi	r25, 0x08	; 8
    22d0:	9b 8f       	std	Y+27, r25	; 0x1b
    22d2:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    22d4:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    22d6:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    22dc:	82 eb       	ldi	r24, 0xB2	; 178
    22de:	92 e0       	ldi	r25, 0x02	; 2
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    22e4:	89 e3       	ldi	r24, 0x39	; 57
    22e6:	94 e0       	ldi	r25, 0x04	; 4
    22e8:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    22ec:	8f e0       	ldi	r24, 0x0F	; 15
    22ee:	e6 e0       	ldi	r30, 0x06	; 6
    22f0:	f1 e0       	ldi	r31, 0x01	; 1
    22f2:	de 01       	movw	r26, r28
    22f4:	13 96       	adiw	r26, 0x03	; 3
    22f6:	01 90       	ld	r0, Z+
    22f8:	0d 92       	st	X+, r0
    22fa:	8a 95       	dec	r24
    22fc:	e1 f7       	brne	.-8      	; 0x22f6 <_Z15initialisierungv+0x112>
    22fe:	8e e0       	ldi	r24, 0x0E	; 14
    2300:	8f 8b       	std	Y+23, r24	; 0x17
    2302:	f1 2e       	mov	r15, r17
    2304:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    2306:	e3 e0       	ldi	r30, 0x03	; 3
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	ec 0f       	add	r30, r28
    230c:	fd 1f       	adc	r31, r29
    230e:	e0 0f       	add	r30, r16
    2310:	f1 1d       	adc	r31, r1
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	4f 2d       	mov	r20, r15
    2316:	60 81       	ld	r22, Z
    2318:	88 8d       	ldd	r24, Y+24	; 0x18
    231a:	99 8d       	ldd	r25, Y+25	; 0x19
    231c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    2320:	0f 5f       	subi	r16, 0xFF	; 255
    2322:	26 e0       	ldi	r18, 0x06	; 6
    2324:	f2 0e       	add	r15, r18
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	08 17       	cp	r16, r24
    232a:	68 f3       	brcs	.-38     	; 0x2306 <_Z15initialisierungv+0x122>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    232c:	8f e0       	ldi	r24, 0x0F	; 15
    232e:	e5 e1       	ldi	r30, 0x15	; 21
    2330:	f1 e0       	ldi	r31, 0x01	; 1
    2332:	de 01       	movw	r26, r28
    2334:	13 96       	adiw	r26, 0x03	; 3
    2336:	01 90       	ld	r0, Z+
    2338:	0d 92       	st	X+, r0
    233a:	8a 95       	dec	r24
    233c:	e1 f7       	brne	.-8      	; 0x2336 <_Z15initialisierungv+0x152>
    233e:	8e e0       	ldi	r24, 0x0E	; 14
    2340:	8f 8b       	std	Y+23, r24	; 0x17
    2342:	f1 2e       	mov	r15, r17
    2344:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    2346:	e3 e0       	ldi	r30, 0x03	; 3
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	ec 0f       	add	r30, r28
    234c:	fd 1f       	adc	r31, r29
    234e:	e0 0f       	add	r30, r16
    2350:	f1 1d       	adc	r31, r1
    2352:	28 e0       	ldi	r18, 0x08	; 8
    2354:	4f 2d       	mov	r20, r15
    2356:	60 81       	ld	r22, Z
    2358:	88 8d       	ldd	r24, Y+24	; 0x18
    235a:	99 8d       	ldd	r25, Y+25	; 0x19
    235c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    2360:	0f 5f       	subi	r16, 0xFF	; 255
    2362:	36 e0       	ldi	r19, 0x06	; 6
    2364:	f3 0e       	add	r15, r19
    2366:	8f 89       	ldd	r24, Y+23	; 0x17
    2368:	08 17       	cp	r16, r24
    236a:	68 f3       	brcs	.-38     	; 0x2346 <_Z15initialisierungv+0x162>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    236c:	80 e4       	ldi	r24, 0x40	; 64
    236e:	8f 93       	push	r24
    2370:	81 e4       	ldi	r24, 0x41	; 65
    2372:	8f 93       	push	r24
    2374:	87 e4       	ldi	r24, 0x47	; 71
    2376:	8f 93       	push	r24
    2378:	8e ea       	ldi	r24, 0xAE	; 174
    237a:	8f 93       	push	r24
    237c:	84 e2       	ldi	r24, 0x24	; 36
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	9f 93       	push	r25
    2382:	8f 93       	push	r24
    2384:	ce 01       	movw	r24, r28
    2386:	03 96       	adiw	r24, 0x03	; 3
    2388:	9f 93       	push	r25
    238a:	8f 93       	push	r24
    238c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    2390:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	88 23       	and	r24, r24
    239e:	99 f0       	breq	.+38     	; 0x23c6 <_Z15initialisierungv+0x1e2>
    23a0:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    23a2:	e3 e0       	ldi	r30, 0x03	; 3
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	ec 0f       	add	r30, r28
    23a8:	fd 1f       	adc	r31, r29
    23aa:	e0 0f       	add	r30, r16
    23ac:	f1 1d       	adc	r31, r1
    23ae:	20 e2       	ldi	r18, 0x20	; 32
    23b0:	41 2f       	mov	r20, r17
    23b2:	60 81       	ld	r22, Z
    23b4:	88 8d       	ldd	r24, Y+24	; 0x18
    23b6:	99 8d       	ldd	r25, Y+25	; 0x19
    23b8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    23bc:	0f 5f       	subi	r16, 0xFF	; 255
    23be:	1a 5f       	subi	r17, 0xFA	; 250
    23c0:	8f 89       	ldd	r24, Y+23	; 0x17
    23c2:	08 17       	cp	r16, r24
    23c4:	70 f3       	brcs	.-36     	; 0x23a2 <_Z15initialisierungv+0x1be>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    23c6:	88 8d       	ldd	r24, Y+24	; 0x18
    23c8:	99 8d       	ldd	r25, Y+25	; 0x19
    23ca:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    23ce:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23d0:	ff e7       	ldi	r31, 0x7F	; 127
    23d2:	28 e3       	ldi	r18, 0x38	; 56
    23d4:	31 e0       	ldi	r19, 0x01	; 1
    23d6:	f1 50       	subi	r31, 0x01	; 1
    23d8:	20 40       	sbci	r18, 0x00	; 0
    23da:	30 40       	sbci	r19, 0x00	; 0
    23dc:	e1 f7       	brne	.-8      	; 0x23d6 <_Z15initialisierungv+0x1f2>
    23de:	00 c0       	rjmp	.+0      	; 0x23e0 <_Z15initialisierungv+0x1fc>
    23e0:	00 00       	nop
    23e2:	9f e7       	ldi	r25, 0x7F	; 127
    23e4:	e8 e3       	ldi	r30, 0x38	; 56
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
    23e8:	91 50       	subi	r25, 0x01	; 1
    23ea:	e0 40       	sbci	r30, 0x00	; 0
    23ec:	f0 40       	sbci	r31, 0x00	; 0
    23ee:	e1 f7       	brne	.-8      	; 0x23e8 <_Z15initialisierungv+0x204>
    23f0:	00 c0       	rjmp	.+0      	; 0x23f2 <_Z15initialisierungv+0x20e>
    23f2:	00 00       	nop
    23f4:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    23f6:	61 f7       	brne	.-40     	; 0x23d0 <_Z15initialisierungv+0x1ec>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    23f8:	0a e3       	ldi	r16, 0x3A	; 58
    23fa:	18 e0       	ldi	r17, 0x08	; 8
    23fc:	f8 01       	movw	r30, r16
    23fe:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	96 dd       	rcall	.-1236   	; 0x1f32 <_Z11EEPROM_Readj>
    2406:	f8 01       	movw	r30, r16
    2408:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	91 dd       	rcall	.-1246   	; 0x1f32 <_Z11EEPROM_Readj>
    2410:	f8 01       	movw	r30, r16
    2412:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	8c dd       	rcall	.-1256   	; 0x1f32 <_Z11EEPROM_Readj>
    241a:	f8 01       	movw	r30, r16
    241c:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    241e:	83 e0       	ldi	r24, 0x03	; 3
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	87 dd       	rcall	.-1266   	; 0x1f32 <_Z11EEPROM_Readj>
    2424:	f8 01       	movw	r30, r16
    2426:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    2428:	84 e0       	ldi	r24, 0x04	; 4
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	82 dd       	rcall	.-1276   	; 0x1f32 <_Z11EEPROM_Readj>
    242e:	f8 01       	movw	r30, r16
    2430:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    2432:	c8 01       	movw	r24, r16
    2434:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    2438:	c8 01       	movw	r24, r16
    243a:	0e 94 43 20 	call	0x4086	; 0x4086 <_ZN3RTC8RTCstartEv>
	
	//Sleepmode Grundeinstelung
	SMCR |= (1<<SM1) | (1<<SM0);
    243e:	83 b7       	in	r24, 0x33	; 51
    2440:	86 60       	ori	r24, 0x06	; 6
    2442:	83 bf       	out	0x33, r24	; 51
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    2444:	80 b7       	in	r24, 0x30	; 48
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    244a:	e1 ec       	ldi	r30, 0xC1	; 193
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	80 61       	ori	r24, 0x10	; 16
    2452:	80 83       	st	Z, r24
	
	sei();
    2454:	78 94       	sei
}
    2456:	a9 96       	adiw	r28, 0x29	; 41
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	ff 90       	pop	r15
    246c:	08 95       	ret

0000246e <_Z19maininterupthandlerP7monitorh>:

void maininterupthandler(monitor *mon, uint8_t taste){
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	1f 92       	push	r1
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	8c 01       	movw	r16, r24
    2486:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    2488:	60 32       	cpi	r22, 0x20	; 32
    248a:	09 f4       	brne	.+2      	; 0x248e <_Z19maininterupthandlerP7monitorh+0x20>
    248c:	98 c0       	rjmp	.+304    	; 0x25be <_Z19maininterupthandlerP7monitorh+0x150>
	{
		anzeige |= (1<<refreshdisplay);
    248e:	80 91 35 03 	lds	r24, 0x0335
    2492:	81 60       	ori	r24, 0x01	; 1
    2494:	80 93 35 03 	sts	0x0335, r24
		switch (taste)							//Tastendruck ueberpruefen
    2498:	46 2f       	mov	r20, r22
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	fa 01       	movw	r30, r20
    249e:	f0 97       	sbiw	r30, 0x30	; 48
    24a0:	e6 34       	cpi	r30, 0x46	; 70
    24a2:	f1 05       	cpc	r31, r1
    24a4:	08 f0       	brcs	.+2      	; 0x24a8 <_Z19maininterupthandlerP7monitorh+0x3a>
    24a6:	6f c0       	rjmp	.+222    	; 0x2586 <_Z19maininterupthandlerP7monitorh+0x118>
    24a8:	e3 5a       	subi	r30, 0xA3	; 163
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	0c 94 1d 28 	jmp	0x503a	; 0x503a <__tablejump2__>
		{
			case 'm':
				position = numberofpages;
    24b0:	85 e0       	ldi	r24, 0x05	; 5
    24b2:	80 93 33 03 	sts	0x0333, r24
				break;
    24b6:	78 c0       	rjmp	.+240    	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
			case 'l':
				if (mon->posx==0)
    24b8:	d8 01       	movw	r26, r16
    24ba:	96 96       	adiw	r26, 0x26	; 38
    24bc:	8c 91       	ld	r24, X
    24be:	81 11       	cpse	r24, r1
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <_Z19maininterupthandlerP7monitorh+0x5c>
				{
					position = numberofpages;
    24c2:	85 e0       	ldi	r24, 0x05	; 5
    24c4:	80 93 33 03 	sts	0x0333, r24
    24c8:	6f c0       	rjmp	.+222    	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
				}
				else{
					mon->posx--;
    24ca:	81 50       	subi	r24, 0x01	; 1
    24cc:	f8 01       	movw	r30, r16
    24ce:	86 a3       	std	Z+38, r24	; 0x26
    24d0:	65 c0       	rjmp	.+202    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case 'r':
				if (position==numberofpages)
    24d2:	80 91 33 03 	lds	r24, 0x0333
    24d6:	85 30       	cpi	r24, 0x05	; 5
    24d8:	31 f4       	brne	.+12     	; 0x24e6 <_Z19maininterupthandlerP7monitorh+0x78>
				{
					position=mon->posy;
    24da:	d8 01       	movw	r26, r16
    24dc:	95 96       	adiw	r26, 0x25	; 37
    24de:	8c 91       	ld	r24, X
    24e0:	80 93 33 03 	sts	0x0333, r24
    24e4:	5b c0       	rjmp	.+182    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    24e6:	f8 01       	movw	r30, r16
    24e8:	86 a1       	ldd	r24, Z+38	; 0x26
    24ea:	90 a5       	ldd	r25, Z+40	; 0x28
    24ec:	89 17       	cp	r24, r25
    24ee:	08 f0       	brcs	.+2      	; 0x24f2 <_Z19maininterupthandlerP7monitorh+0x84>
    24f0:	15 c1       	rjmp	.+554    	; 0x271c <_Z19maininterupthandlerP7monitorh+0x2ae>
				{
					mon->posx++;
    24f2:	8f 5f       	subi	r24, 0xFF	; 255
    24f4:	86 a3       	std	Z+38, r24	; 0x26
    24f6:	52 c0       	rjmp	.+164    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
				case 'o':
					if (position==numberofpages)
    24f8:	80 91 33 03 	lds	r24, 0x0333
    24fc:	85 30       	cpi	r24, 0x05	; 5
    24fe:	31 f4       	brne	.+12     	; 0x250c <_Z19maininterupthandlerP7monitorh+0x9e>
					{
						position=mon->posy;
    2500:	d8 01       	movw	r26, r16
    2502:	95 96       	adiw	r26, 0x25	; 37
    2504:	8c 91       	ld	r24, X
    2506:	80 93 33 03 	sts	0x0333, r24
    250a:	48 c0       	rjmp	.+144    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
					}
					else if (!(mon->posx >= mon->maxentriesx))
    250c:	f8 01       	movw	r30, r16
    250e:	86 a1       	ldd	r24, Z+38	; 0x26
    2510:	90 a5       	ldd	r25, Z+40	; 0x28
    2512:	89 17       	cp	r24, r25
    2514:	08 f0       	brcs	.+2      	; 0x2518 <_Z19maininterupthandlerP7monitorh+0xaa>
    2516:	02 c1       	rjmp	.+516    	; 0x271c <_Z19maininterupthandlerP7monitorh+0x2ae>
					{
						mon->posx++;
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	86 a3       	std	Z+38, r24	; 0x26
    251c:	3f c0       	rjmp	.+126    	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
					}
					break;
			case 'd':
				if (!(mon->posy >= mon->maxentries-1))
    251e:	d8 01       	movw	r26, r16
    2520:	95 96       	adiw	r26, 0x25	; 37
    2522:	2c 91       	ld	r18, X
    2524:	95 97       	sbiw	r26, 0x25	; 37
    2526:	42 2f       	mov	r20, r18
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	97 96       	adiw	r26, 0x27	; 39
    252c:	8c 91       	ld	r24, X
    252e:	97 97       	sbiw	r26, 0x27	; 39
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	48 17       	cp	r20, r24
    2536:	59 07       	cpc	r21, r25
    2538:	24 f4       	brge	.+8      	; 0x2542 <_Z19maininterupthandlerP7monitorh+0xd4>
				{
					mon->posy++;
    253a:	2f 5f       	subi	r18, 0xFF	; 255
    253c:	95 96       	adiw	r26, 0x25	; 37
    253e:	2c 93       	st	X, r18
    2540:	2d c0       	rjmp	.+90     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					mon->posy = 0;
    2542:	f8 01       	movw	r30, r16
    2544:	15 a2       	std	Z+37, r1	; 0x25
    2546:	2a c0       	rjmp	.+84     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case 'u':
				if (!(mon->posy == 0))
    2548:	d8 01       	movw	r26, r16
    254a:	95 96       	adiw	r26, 0x25	; 37
    254c:	8c 91       	ld	r24, X
    254e:	95 97       	sbiw	r26, 0x25	; 37
    2550:	88 23       	and	r24, r24
    2552:	21 f0       	breq	.+8      	; 0x255c <_Z19maininterupthandlerP7monitorh+0xee>
				{
					mon->posy--;
    2554:	81 50       	subi	r24, 0x01	; 1
    2556:	95 96       	adiw	r26, 0x25	; 37
    2558:	8c 93       	st	X, r24
    255a:	20 c0       	rjmp	.+64     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					mon->posy=mon->maxentries-1;
    255c:	f8 01       	movw	r30, r16
    255e:	87 a1       	ldd	r24, Z+39	; 0x27
    2560:	81 50       	subi	r24, 0x01	; 1
    2562:	85 a3       	std	Z+37, r24	; 0x25
    2564:	1b c0       	rjmp	.+54     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			case '0':
				//Licht an/aus
				if (LED.ison())
    2566:	8c e3       	ldi	r24, 0x3C	; 60
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <_ZN6Output4isonEv>
    256e:	88 23       	and	r24, r24
    2570:	29 f0       	breq	.+10     	; 0x257c <_Z19maininterupthandlerP7monitorh+0x10e>
				{
					LED.off();
    2572:	8c e3       	ldi	r24, 0x3C	; 60
    2574:	93 e0       	ldi	r25, 0x03	; 3
    2576:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <_ZN6Output3offEv>
    257a:	10 c0       	rjmp	.+32     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				else{
					LED.on();
    257c:	8c e3       	ldi	r24, 0x3C	; 60
    257e:	93 e0       	ldi	r25, 0x03	; 3
    2580:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <_ZN6Output2onEv>
    2584:	0b c0       	rjmp	.+22     	; 0x259c <_Z19maininterupthandlerP7monitorh+0x12e>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    2586:	d8 01       	movw	r26, r16
    2588:	ed 91       	ld	r30, X+
    258a:	fc 91       	ld	r31, X
    258c:	01 90       	ld	r0, Z+
    258e:	f0 81       	ld	r31, Z
    2590:	e0 2d       	mov	r30, r0
    2592:	be 01       	movw	r22, r28
    2594:	6f 5f       	subi	r22, 0xFF	; 255
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	c8 01       	movw	r24, r16
    259a:	09 95       	icall
				break;
		}
		if (position==0 || position==numberofpages)
    259c:	80 91 33 03 	lds	r24, 0x0333
    25a0:	88 23       	and	r24, r24
    25a2:	11 f0       	breq	.+4      	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
    25a4:	85 30       	cpi	r24, 0x05	; 5
    25a6:	31 f4       	brne	.+12     	; 0x25b4 <_Z19maininterupthandlerP7monitorh+0x146>
		{
			statusreg |= (1<<powersavemode);
    25a8:	80 91 34 03 	lds	r24, 0x0334
    25ac:	82 60       	ori	r24, 0x02	; 2
    25ae:	80 93 34 03 	sts	0x0334, r24
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <_Z19maininterupthandlerP7monitorh+0x150>
		}
		else{
			statusreg &= ~(1<<powersavemode);
    25b4:	80 91 34 03 	lds	r24, 0x0334
    25b8:	8d 7f       	andi	r24, 0xFD	; 253
    25ba:	80 93 34 03 	sts	0x0334, r24
		}
	}
	
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    25be:	80 91 33 03 	lds	r24, 0x0333
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	f9 f4       	brne	.+62     	; 0x2604 <_Z19maininterupthandlerP7monitorh+0x196>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    25c6:	67 e0       	ldi	r22, 0x07	; 7
    25c8:	80 e2       	ldi	r24, 0x20	; 32
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	7d dd       	rcall	.-1286   	; 0x20c8 <_Z13reed_debouncePVhh>
    25ce:	88 23       	and	r24, r24
    25d0:	31 f0       	breq	.+12     	; 0x25de <_Z19maininterupthandlerP7monitorh+0x170>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    25d2:	63 e3       	ldi	r22, 0x33	; 51
    25d4:	71 e1       	ldi	r23, 0x11	; 17
    25d6:	86 e3       	ldi	r24, 0x36	; 54
    25d8:	9f e3       	ldi	r25, 0x3F	; 63
    25da:	9b dd       	rcall	.-1226   	; 0x2112 <_Z15geschwindigkeitf>
    25dc:	13 c0       	rjmp	.+38     	; 0x2604 <_Z19maininterupthandlerP7monitorh+0x196>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    25de:	80 91 84 00 	lds	r24, 0x0084
    25e2:	90 91 85 00 	lds	r25, 0x0085
    25e6:	8e 38       	cpi	r24, 0x8E	; 142
    25e8:	9b 45       	sbci	r25, 0x5B	; 91
    25ea:	60 f0       	brcs	.+24     	; 0x2604 <_Z19maininterupthandlerP7monitorh+0x196>
		{
			TCNT1=0;
    25ec:	10 92 85 00 	sts	0x0085, r1
    25f0:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    25f4:	10 92 d2 02 	sts	0x02D2, r1
    25f8:	10 92 d3 02 	sts	0x02D3, r1
    25fc:	10 92 d4 02 	sts	0x02D4, r1
    2600:	10 92 d5 02 	sts	0x02D5, r1
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    2604:	80 91 52 08 	lds	r24, 0x0852
    2608:	81 ff       	sbrs	r24, 1
    260a:	6a c0       	rjmp	.+212    	; 0x26e0 <_Z19maininterupthandlerP7monitorh+0x272>
	{
		rtc.zeit();
    260c:	8a e3       	ldi	r24, 0x3A	; 58
    260e:	98 e0       	ldi	r25, 0x08	; 8
    2610:	0e 94 08 20 	call	0x4010	; 0x4010 <_ZN3RTC4zeitEv>
		if (position==1)
    2614:	80 91 33 03 	lds	r24, 0x0333
    2618:	81 30       	cpi	r24, 0x01	; 1
    261a:	09 f0       	breq	.+2      	; 0x261e <_Z19maininterupthandlerP7monitorh+0x1b0>
    261c:	57 c0       	rjmp	.+174    	; 0x26cc <_Z19maininterupthandlerP7monitorh+0x25e>
		{
			if (geschw>maxgeschw)
    261e:	c0 90 d2 02 	lds	r12, 0x02D2
    2622:	d0 90 d3 02 	lds	r13, 0x02D3
    2626:	e0 90 d4 02 	lds	r14, 0x02D4
    262a:	f0 90 d5 02 	lds	r15, 0x02D5
    262e:	20 91 ca 02 	lds	r18, 0x02CA
    2632:	30 91 cb 02 	lds	r19, 0x02CB
    2636:	40 91 cc 02 	lds	r20, 0x02CC
    263a:	50 91 cd 02 	lds	r21, 0x02CD
    263e:	c7 01       	movw	r24, r14
    2640:	b6 01       	movw	r22, r12
    2642:	0e 94 b5 22 	call	0x456a	; 0x456a <__gesf2>
    2646:	18 16       	cp	r1, r24
    2648:	44 f4       	brge	.+16     	; 0x265a <_Z19maininterupthandlerP7monitorh+0x1ec>
			{
				maxgeschw=geschw;
    264a:	c0 92 ca 02 	sts	0x02CA, r12
    264e:	d0 92 cb 02 	sts	0x02CB, r13
    2652:	e0 92 cc 02 	sts	0x02CC, r14
    2656:	f0 92 cd 02 	sts	0x02CD, r15
			}
			if (geschw >= 1.0)
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	c7 01       	movw	r24, r14
    2664:	b6 01       	movw	r22, r12
    2666:	0e 94 b5 22 	call	0x456a	; 0x456a <__gesf2>
    266a:	88 23       	and	r24, r24
    266c:	9c f0       	brlt	.+38     	; 0x2694 <_Z19maininterupthandlerP7monitorh+0x226>
			{
				Fahrtzeit++;
    266e:	80 91 c6 02 	lds	r24, 0x02C6
    2672:	90 91 c7 02 	lds	r25, 0x02C7
    2676:	a0 91 c8 02 	lds	r26, 0x02C8
    267a:	b0 91 c9 02 	lds	r27, 0x02C9
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	a1 1d       	adc	r26, r1
    2682:	b1 1d       	adc	r27, r1
    2684:	80 93 c6 02 	sts	0x02C6, r24
    2688:	90 93 c7 02 	sts	0x02C7, r25
    268c:	a0 93 c8 02 	sts	0x02C8, r26
    2690:	b0 93 c9 02 	sts	0x02C9, r27
			}
			strecke+=geschw/3.6;
    2694:	26 e6       	ldi	r18, 0x66	; 102
    2696:	36 e6       	ldi	r19, 0x66	; 102
    2698:	46 e6       	ldi	r20, 0x66	; 102
    269a:	50 e4       	ldi	r21, 0x40	; 64
    269c:	c7 01       	movw	r24, r14
    269e:	b6 01       	movw	r22, r12
    26a0:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    26a4:	9b 01       	movw	r18, r22
    26a6:	ac 01       	movw	r20, r24
    26a8:	60 91 ce 02 	lds	r22, 0x02CE
    26ac:	70 91 cf 02 	lds	r23, 0x02CF
    26b0:	80 91 d0 02 	lds	r24, 0x02D0
    26b4:	90 91 d1 02 	lds	r25, 0x02D1
    26b8:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    26bc:	60 93 ce 02 	sts	0x02CE, r22
    26c0:	70 93 cf 02 	sts	0x02CF, r23
    26c4:	80 93 d0 02 	sts	0x02D0, r24
    26c8:	90 93 d1 02 	sts	0x02D1, r25
		}
		
		anzeige |= (1<<refreshdisplay);
    26cc:	80 91 35 03 	lds	r24, 0x0335
    26d0:	81 60       	ori	r24, 0x01	; 1
    26d2:	80 93 35 03 	sts	0x0335, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    26d6:	ea e3       	ldi	r30, 0x3A	; 58
    26d8:	f8 e0       	ldi	r31, 0x08	; 8
    26da:	80 8d       	ldd	r24, Z+24	; 0x18
    26dc:	8d 7f       	andi	r24, 0xFD	; 253
    26de:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    26e0:	80 91 52 08 	lds	r24, 0x0852
    26e4:	82 ff       	sbrs	r24, 2
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <_Z19maininterupthandlerP7monitorh+0x28a>
	{
		anzeige |= (1<<refreshdisplay);
    26e8:	90 91 35 03 	lds	r25, 0x0335
    26ec:	91 60       	ori	r25, 0x01	; 1
    26ee:	90 93 35 03 	sts	0x0335, r25
		rtc.interupts &= ~(1<<minuteninterupt);
    26f2:	8b 7f       	andi	r24, 0xFB	; 251
    26f4:	80 93 52 08 	sts	0x0852, r24
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    26f8:	80 91 35 03 	lds	r24, 0x0335
    26fc:	80 ff       	sbrs	r24, 0
    26fe:	14 c0       	rjmp	.+40     	; 0x2728 <_Z19maininterupthandlerP7monitorh+0x2ba>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    2700:	d8 01       	movw	r26, r16
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	02 80       	ldd	r0, Z+2	; 0x02
    2708:	f3 81       	ldd	r31, Z+3	; 0x03
    270a:	e0 2d       	mov	r30, r0
    270c:	c8 01       	movw	r24, r16
    270e:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    2710:	80 91 35 03 	lds	r24, 0x0335
    2714:	8e 7f       	andi	r24, 0xFE	; 254
    2716:	80 93 35 03 	sts	0x0335, r24
    271a:	06 c0       	rjmp	.+12     	; 0x2728 <_Z19maininterupthandlerP7monitorh+0x2ba>
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
				break;
		}
		if (position==0 || position==numberofpages)
    271c:	80 91 33 03 	lds	r24, 0x0333
    2720:	88 23       	and	r24, r24
    2722:	09 f4       	brne	.+2      	; 0x2726 <_Z19maininterupthandlerP7monitorh+0x2b8>
    2724:	41 cf       	rjmp	.-382    	; 0x25a8 <_Z19maininterupthandlerP7monitorh+0x13a>
    2726:	46 cf       	rjmp	.-372    	; 0x25b4 <_Z19maininterupthandlerP7monitorh+0x146>
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    2728:	0f 90       	pop	r0
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	df 90       	pop	r13
    2738:	cf 90       	pop	r12
    273a:	08 95       	ret

0000273c <_Z10gpshandlerv>:

void gpshandler(){
    273c:	4f 92       	push	r4
    273e:	5f 92       	push	r5
    2740:	6f 92       	push	r6
    2742:	7f 92       	push	r7
    2744:	8f 92       	push	r8
    2746:	9f 92       	push	r9
    2748:	af 92       	push	r10
    274a:	bf 92       	push	r11
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	00 d0       	rcall	.+0      	; 0x275a <_Z10gpshandlerv+0x1e>
    275a:	00 d0       	rcall	.+0      	; 0x275c <_Z10gpshandlerv+0x20>
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    2760:	e0 90 31 03 	lds	r14, 0x0331
    2764:	e2 fe       	sbrs	r14, 2
    2766:	e3 c2       	rjmp	.+1478   	; 0x2d2e <_Z10gpshandlerv+0x5f2>
    2768:	ee 20       	and	r14, r14
    276a:	0c f0       	brlt	.+2      	; 0x276e <_Z10gpshandlerv+0x32>
    276c:	84 c3       	rjmp	.+1800   	; 0x2e76 <_Z10gpshandlerv+0x73a>
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    276e:	09 ee       	ldi	r16, 0xE9	; 233
    2770:	12 e0       	ldi	r17, 0x02	; 2
    2772:	f8 01       	movw	r30, r16
    2774:	80 85       	ldd	r24, Z+8	; 0x08
    2776:	21 ed       	ldi	r18, 0xD1	; 209
    2778:	28 0f       	add	r18, r24
void gpshandler(){
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    277a:	87 81       	ldd	r24, Z+7	; 0x07
    277c:	88 0f       	add	r24, r24
    277e:	80 56       	subi	r24, 0x60	; 96
    2780:	98 2f       	mov	r25, r24
    2782:	99 0f       	add	r25, r25
    2784:	99 0f       	add	r25, r25
    2786:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    2788:	82 0f       	add	r24, r18
    278a:	80 93 db 02 	sts	0x02DB, r24
    278e:	82 85       	ldd	r24, Z+10	; 0x0a
    2790:	20 ed       	ldi	r18, 0xD0	; 208
    2792:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    2794:	81 85       	ldd	r24, Z+9	; 0x09
    2796:	88 0f       	add	r24, r24
    2798:	80 56       	subi	r24, 0x60	; 96
    279a:	98 2f       	mov	r25, r24
    279c:	99 0f       	add	r25, r25
    279e:	99 0f       	add	r25, r25
    27a0:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    27a2:	82 0f       	add	r24, r18
    27a4:	80 93 da 02 	sts	0x02DA, r24
    27a8:	84 85       	ldd	r24, Z+12	; 0x0c
    27aa:	20 ed       	ldi	r18, 0xD0	; 208
    27ac:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    27ae:	83 85       	ldd	r24, Z+11	; 0x0b
    27b0:	88 0f       	add	r24, r24
    27b2:	80 56       	subi	r24, 0x60	; 96
    27b4:	98 2f       	mov	r25, r24
    27b6:	99 0f       	add	r25, r25
    27b8:	99 0f       	add	r25, r25
    27ba:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    27bc:	82 0f       	add	r24, r18
    27be:	80 93 d9 02 	sts	0x02D9, r24
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
		lat +=	(gpsdata[21] - '0');
		float latmin =	(gpsdata[22] - '0')*10;
    27c2:	86 89       	ldd	r24, Z+22	; 0x16
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	c0 97       	sbiw	r24, 0x30	; 48
    27c8:	bc 01       	movw	r22, r24
    27ca:	66 0f       	add	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	68 0f       	add	r22, r24
    27dc:	79 1f       	adc	r23, r25
    27de:	07 2e       	mov	r0, r23
    27e0:	00 0c       	add	r0, r0
    27e2:	88 0b       	sbc	r24, r24
    27e4:	99 0b       	sbc	r25, r25
    27e6:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    27ea:	4b 01       	movw	r8, r22
    27ec:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[23] - '0');
    27ee:	f8 01       	movw	r30, r16
    27f0:	87 89       	ldd	r24, Z+23	; 0x17
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	c0 97       	sbiw	r24, 0x30	; 48
    27f6:	bc 01       	movw	r22, r24
    27f8:	99 0f       	add	r25, r25
    27fa:	88 0b       	sbc	r24, r24
    27fc:	99 0b       	sbc	r25, r25
    27fe:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2802:	a5 01       	movw	r20, r10
    2804:	94 01       	movw	r18, r8
    2806:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    280a:	4b 01       	movw	r8, r22
    280c:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[25] - '0')/10.0;
    280e:	f8 01       	movw	r30, r16
    2810:	81 8d       	ldd	r24, Z+25	; 0x19
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	c0 97       	sbiw	r24, 0x30	; 48
    2816:	bc 01       	movw	r22, r24
    2818:	99 0f       	add	r25, r25
    281a:	88 0b       	sbc	r24, r24
    281c:	99 0b       	sbc	r25, r25
    281e:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e2       	ldi	r20, 0x20	; 32
    2828:	51 e4       	ldi	r21, 0x41	; 65
    282a:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    282e:	a5 01       	movw	r20, r10
    2830:	94 01       	movw	r18, r8
    2832:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2836:	4b 01       	movw	r8, r22
    2838:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[26] - '0')/100.0;
    283a:	f8 01       	movw	r30, r16
    283c:	82 8d       	ldd	r24, Z+26	; 0x1a
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	c0 97       	sbiw	r24, 0x30	; 48
    2842:	bc 01       	movw	r22, r24
    2844:	99 0f       	add	r25, r25
    2846:	88 0b       	sbc	r24, r24
    2848:	99 0b       	sbc	r25, r25
    284a:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	48 ec       	ldi	r20, 0xC8	; 200
    2854:	52 e4       	ldi	r21, 0x42	; 66
    2856:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    285a:	a5 01       	movw	r20, r10
    285c:	94 01       	movw	r18, r8
    285e:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2862:	4b 01       	movw	r8, r22
    2864:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[27] - '0')/1000.0;
    2866:	f8 01       	movw	r30, r16
    2868:	83 8d       	ldd	r24, Z+27	; 0x1b
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	c0 97       	sbiw	r24, 0x30	; 48
    286e:	bc 01       	movw	r22, r24
    2870:	99 0f       	add	r25, r25
    2872:	88 0b       	sbc	r24, r24
    2874:	99 0b       	sbc	r25, r25
    2876:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	4a e7       	ldi	r20, 0x7A	; 122
    2880:	54 e4       	ldi	r21, 0x44	; 68
    2882:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    2886:	a5 01       	movw	r20, r10
    2888:	94 01       	movw	r18, r8
    288a:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    288e:	4b 01       	movw	r8, r22
    2890:	5c 01       	movw	r10, r24
		gpsminute +=	(gpsdata[10] - '0');
		gpssekunde =	(gpsdata[11] - '0')*10;
		gpssekunde +=	(gpsdata[12] - '0');
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
    2892:	f8 01       	movw	r30, r16
    2894:	44 89       	ldd	r20, Z+20	; 0x14
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	40 53       	subi	r20, 0x30	; 48
    289a:	51 09       	sbc	r21, r1
    289c:	ca 01       	movw	r24, r20
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	44 0f       	add	r20, r20
    28a4:	55 1f       	adc	r21, r21
    28a6:	44 0f       	add	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	44 0f       	add	r20, r20
    28ac:	55 1f       	adc	r21, r21
    28ae:	84 0f       	add	r24, r20
    28b0:	95 1f       	adc	r25, r21
    28b2:	bc 01       	movw	r22, r24
    28b4:	99 0f       	add	r25, r25
    28b6:	88 0b       	sbc	r24, r24
    28b8:	99 0b       	sbc	r25, r25
    28ba:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    28be:	2b 01       	movw	r4, r22
    28c0:	3c 01       	movw	r6, r24
		lat +=	(gpsdata[21] - '0');
    28c2:	f8 01       	movw	r30, r16
    28c4:	85 89       	ldd	r24, Z+21	; 0x15
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	c0 97       	sbiw	r24, 0x30	; 48
    28ca:	bc 01       	movw	r22, r24
    28cc:	99 0f       	add	r25, r25
    28ce:	88 0b       	sbc	r24, r24
    28d0:	99 0b       	sbc	r25, r25
    28d2:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	c3 01       	movw	r24, r6
    28dc:	b2 01       	movw	r22, r4
    28de:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    28e2:	2b 01       	movw	r4, r22
    28e4:	3c 01       	movw	r6, r24
		float latmin =	(gpsdata[22] - '0')*10;
		latmin +=		(gpsdata[23] - '0');
		latmin +=		(gpsdata[25] - '0')/10.0;
		latmin +=		(gpsdata[26] - '0')/100.0;
		latmin +=		(gpsdata[27] - '0')/1000.0;
		latmin +=		(gpsdata[28] - '0')/10000.0;
    28e6:	f8 01       	movw	r30, r16
    28e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	c0 97       	sbiw	r24, 0x30	; 48
    28ee:	bc 01       	movw	r22, r24
    28f0:	99 0f       	add	r25, r25
    28f2:	88 0b       	sbc	r24, r24
    28f4:	99 0b       	sbc	r25, r25
    28f6:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e4       	ldi	r19, 0x40	; 64
    28fe:	4c e1       	ldi	r20, 0x1C	; 28
    2900:	56 e4       	ldi	r21, 0x46	; 70
    2902:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    2906:	a5 01       	movw	r20, r10
    2908:	94 01       	movw	r18, r8
    290a:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
		lat +=	latmin/60.0;
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e7       	ldi	r20, 0x70	; 112
    2914:	52 e4       	ldi	r21, 0x42	; 66
    2916:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	c3 01       	movw	r24, r6
    2920:	b2 01       	movw	r22, r4
    2922:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2926:	60 93 e4 02 	sts	0x02E4, r22
    292a:	70 93 e5 02 	sts	0x02E5, r23
    292e:	80 93 e6 02 	sts	0x02E6, r24
    2932:	90 93 e7 02 	sts	0x02E7, r25
		if (gpsdata[30] != 'N')
    2936:	f8 01       	movw	r30, r16
    2938:	26 8d       	ldd	r18, Z+30	; 0x1e
    293a:	2e 34       	cpi	r18, 0x4E	; 78
    293c:	59 f0       	breq	.+22     	; 0x2954 <_Z10gpshandlerv+0x218>
		{
			lat *= -1;
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	b0 58       	subi	r27, 0x80	; 128
    2944:	80 93 e4 02 	sts	0x02E4, r24
    2948:	90 93 e5 02 	sts	0x02E5, r25
    294c:	a0 93 e6 02 	sts	0x02E6, r26
    2950:	b0 93 e7 02 	sts	0x02E7, r27
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
		lon +=	(gpsdata[33] - '0')*10;
		lon +=	(gpsdata[34] - '0');
		float lonmin =	(gpsdata[35] - '0')*10;
    2954:	09 ee       	ldi	r16, 0xE9	; 233
    2956:	12 e0       	ldi	r17, 0x02	; 2
    2958:	f8 01       	movw	r30, r16
    295a:	83 a1       	ldd	r24, Z+35	; 0x23
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	c0 97       	sbiw	r24, 0x30	; 48
    2960:	bc 01       	movw	r22, r24
    2962:	66 0f       	add	r22, r22
    2964:	77 1f       	adc	r23, r23
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	88 0f       	add	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	68 0f       	add	r22, r24
    2974:	79 1f       	adc	r23, r25
    2976:	07 2e       	mov	r0, r23
    2978:	00 0c       	add	r0, r0
    297a:	88 0b       	sbc	r24, r24
    297c:	99 0b       	sbc	r25, r25
    297e:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2982:	4b 01       	movw	r8, r22
    2984:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[36] - '0');
    2986:	f8 01       	movw	r30, r16
    2988:	84 a1       	ldd	r24, Z+36	; 0x24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	c0 97       	sbiw	r24, 0x30	; 48
    298e:	bc 01       	movw	r22, r24
    2990:	99 0f       	add	r25, r25
    2992:	88 0b       	sbc	r24, r24
    2994:	99 0b       	sbc	r25, r25
    2996:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    299a:	a5 01       	movw	r20, r10
    299c:	94 01       	movw	r18, r8
    299e:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    29a2:	4b 01       	movw	r8, r22
    29a4:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[38] - '0')/10.0;
    29a6:	f8 01       	movw	r30, r16
    29a8:	86 a1       	ldd	r24, Z+38	; 0x26
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	c0 97       	sbiw	r24, 0x30	; 48
    29ae:	bc 01       	movw	r22, r24
    29b0:	99 0f       	add	r25, r25
    29b2:	88 0b       	sbc	r24, r24
    29b4:	99 0b       	sbc	r25, r25
    29b6:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    29c6:	a5 01       	movw	r20, r10
    29c8:	94 01       	movw	r18, r8
    29ca:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    29ce:	4b 01       	movw	r8, r22
    29d0:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[39] - '0')/100.0;
    29d2:	f8 01       	movw	r30, r16
    29d4:	87 a1       	ldd	r24, Z+39	; 0x27
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	c0 97       	sbiw	r24, 0x30	; 48
    29da:	bc 01       	movw	r22, r24
    29dc:	99 0f       	add	r25, r25
    29de:	88 0b       	sbc	r24, r24
    29e0:	99 0b       	sbc	r25, r25
    29e2:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	48 ec       	ldi	r20, 0xC8	; 200
    29ec:	52 e4       	ldi	r21, 0x42	; 66
    29ee:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    29f2:	a5 01       	movw	r20, r10
    29f4:	94 01       	movw	r18, r8
    29f6:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    29fa:	4b 01       	movw	r8, r22
    29fc:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[40] - '0')/1000.0;
    29fe:	f8 01       	movw	r30, r16
    2a00:	80 a5       	ldd	r24, Z+40	; 0x28
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	c0 97       	sbiw	r24, 0x30	; 48
    2a06:	bc 01       	movw	r22, r24
    2a08:	99 0f       	add	r25, r25
    2a0a:	88 0b       	sbc	r24, r24
    2a0c:	99 0b       	sbc	r25, r25
    2a0e:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a e7       	ldi	r20, 0x7A	; 122
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    2a1e:	a5 01       	movw	r20, r10
    2a20:	94 01       	movw	r18, r8
    2a22:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2a26:	4b 01       	movw	r8, r22
    2a28:	5c 01       	movw	r10, r24
		{
			lat *= -1;
		}
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	80 a1       	ldd	r24, Z+32	; 0x20
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	c0 97       	sbiw	r24, 0x30	; 48
    2a32:	24 e6       	ldi	r18, 0x64	; 100
    2a34:	28 9f       	mul	r18, r24
    2a36:	b0 01       	movw	r22, r0
    2a38:	29 9f       	mul	r18, r25
    2a3a:	70 0d       	add	r23, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	07 2e       	mov	r0, r23
    2a40:	00 0c       	add	r0, r0
    2a42:	88 0b       	sbc	r24, r24
    2a44:	99 0b       	sbc	r25, r25
    2a46:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2a4a:	2b 01       	movw	r4, r22
    2a4c:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[33] - '0')*10;
    2a4e:	f8 01       	movw	r30, r16
    2a50:	21 a1       	ldd	r18, Z+33	; 0x21
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	20 53       	subi	r18, 0x30	; 48
    2a56:	31 09       	sbc	r19, r1
    2a58:	c9 01       	movw	r24, r18
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	22 0f       	add	r18, r18
    2a64:	33 1f       	adc	r19, r19
    2a66:	22 0f       	add	r18, r18
    2a68:	33 1f       	adc	r19, r19
    2a6a:	82 0f       	add	r24, r18
    2a6c:	93 1f       	adc	r25, r19
    2a6e:	bc 01       	movw	r22, r24
    2a70:	99 0f       	add	r25, r25
    2a72:	88 0b       	sbc	r24, r24
    2a74:	99 0b       	sbc	r25, r25
    2a76:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2a7a:	9b 01       	movw	r18, r22
    2a7c:	ac 01       	movw	r20, r24
    2a7e:	c3 01       	movw	r24, r6
    2a80:	b2 01       	movw	r22, r4
    2a82:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2a86:	2b 01       	movw	r4, r22
    2a88:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[34] - '0');
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	82 a1       	ldd	r24, Z+34	; 0x22
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	c0 97       	sbiw	r24, 0x30	; 48
    2a92:	bc 01       	movw	r22, r24
    2a94:	99 0f       	add	r25, r25
    2a96:	88 0b       	sbc	r24, r24
    2a98:	99 0b       	sbc	r25, r25
    2a9a:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2a9e:	9b 01       	movw	r18, r22
    2aa0:	ac 01       	movw	r20, r24
    2aa2:	c3 01       	movw	r24, r6
    2aa4:	b2 01       	movw	r22, r4
    2aa6:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2aaa:	2b 01       	movw	r4, r22
    2aac:	3c 01       	movw	r6, r24
		float lonmin =	(gpsdata[35] - '0')*10;
		lonmin +=		(gpsdata[36] - '0');
		lonmin +=		(gpsdata[38] - '0')/10.0;
		lonmin +=		(gpsdata[39] - '0')/100.0;
		lonmin +=		(gpsdata[40] - '0')/1000.0;
		lonmin +=		(gpsdata[41] - '0')/10000.0;
    2aae:	f8 01       	movw	r30, r16
    2ab0:	81 a5       	ldd	r24, Z+41	; 0x29
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	c0 97       	sbiw	r24, 0x30	; 48
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	99 0f       	add	r25, r25
    2aba:	88 0b       	sbc	r24, r24
    2abc:	99 0b       	sbc	r25, r25
    2abe:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e4       	ldi	r19, 0x40	; 64
    2ac6:	4c e1       	ldi	r20, 0x1C	; 28
    2ac8:	56 e4       	ldi	r21, 0x46	; 70
    2aca:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    2ace:	a5 01       	movw	r20, r10
    2ad0:	94 01       	movw	r18, r8
    2ad2:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
		lon +=			lonmin/60.0;
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e7       	ldi	r20, 0x70	; 112
    2adc:	52 e4       	ldi	r21, 0x42	; 66
    2ade:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divsf3>
    2ae2:	9b 01       	movw	r18, r22
    2ae4:	ac 01       	movw	r20, r24
    2ae6:	c3 01       	movw	r24, r6
    2ae8:	b2 01       	movw	r22, r4
    2aea:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2aee:	60 93 e0 02 	sts	0x02E0, r22
    2af2:	70 93 e1 02 	sts	0x02E1, r23
    2af6:	80 93 e2 02 	sts	0x02E2, r24
    2afa:	90 93 e3 02 	sts	0x02E3, r25
		if (gpsdata[43] != 'E')
    2afe:	f8 01       	movw	r30, r16
    2b00:	23 a5       	ldd	r18, Z+43	; 0x2b
    2b02:	25 34       	cpi	r18, 0x45	; 69
    2b04:	59 f0       	breq	.+22     	; 0x2b1c <_Z10gpshandlerv+0x3e0>
		{
			lon *= -1;
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	b0 58       	subi	r27, 0x80	; 128
    2b0c:	80 93 e0 02 	sts	0x02E0, r24
    2b10:	90 93 e1 02 	sts	0x02E1, r25
    2b14:	a0 93 e2 02 	sts	0x02E2, r26
    2b18:	b0 93 e3 02 	sts	0x02E3, r27
		}
		//Speed 
		volatile uint8_t counter = 45;
    2b1c:	8d e2       	ldi	r24, 0x2D	; 45
    2b1e:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    2b20:	ec 81       	ldd	r30, Y+4	; 0x04
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	e7 51       	subi	r30, 0x17	; 23
    2b26:	fd 4f       	sbci	r31, 0xFD	; 253
    2b28:	80 81       	ld	r24, Z
    2b2a:	8e 32       	cpi	r24, 0x2E	; 46
    2b2c:	91 f4       	brne	.+36     	; 0x2b52 <_Z10gpshandlerv+0x416>
			{
				weiter=false;
				counter--;
    2b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b30:	81 50       	subi	r24, 0x01	; 1
    2b32:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    2b34:	8c 81       	ldd	r24, Y+4	; 0x04
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    2b3a:	10 92 dc 02 	sts	0x02DC, r1
    2b3e:	10 92 dd 02 	sts	0x02DD, r1
    2b42:	10 92 de 02 	sts	0x02DE, r1
    2b46:	10 92 df 02 	sts	0x02DF, r1
		for(uint8_t i=45;i<counter;i++){
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	8e 32       	cpi	r24, 0x2E	; 46
    2b4e:	28 f4       	brcc	.+10     	; 0x2b5a <_Z10gpshandlerv+0x41e>
    2b50:	47 c0       	rjmp	.+142    	; 0x2be0 <_Z10gpshandlerv+0x4a4>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	8f 5f       	subi	r24, 0xFF	; 255
    2b56:	8c 83       	std	Y+4, r24	; 0x04
    2b58:	e3 cf       	rjmp	.-58     	; 0x2b20 <_Z10gpshandlerv+0x3e4>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    2b5a:	81 2c       	mov	r8, r1
    2b5c:	91 2c       	mov	r9, r1
    2b5e:	54 01       	movw	r10, r8
    2b60:	0f 2e       	mov	r0, r31
    2b62:	fd e2       	ldi	r31, 0x2D	; 45
    2b64:	ff 2e       	mov	r15, r31
    2b66:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    2b68:	0f 2d       	mov	r16, r15
    2b6a:	10 e0       	ldi	r17, 0x00	; 0
    2b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	80 1b       	sub	r24, r16
    2b72:	91 0b       	sbc	r25, r17
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	bc 01       	movw	r22, r24
    2b78:	99 0f       	add	r25, r25
    2b7a:	88 0b       	sbc	r24, r24
    2b7c:	99 0b       	sbc	r25, r25
    2b7e:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2b82:	9b 01       	movw	r18, r22
    2b84:	ac 01       	movw	r20, r24
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	80 e2       	ldi	r24, 0x20	; 32
    2b8c:	91 e4       	ldi	r25, 0x41	; 65
    2b8e:	0e 94 23 23 	call	0x4646	; 0x4646 <pow>
    2b92:	2b 01       	movw	r4, r22
    2b94:	3c 01       	movw	r6, r24
    2b96:	f8 01       	movw	r30, r16
    2b98:	e7 51       	subi	r30, 0x17	; 23
    2b9a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b9c:	60 81       	ld	r22, Z
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	60 53       	subi	r22, 0x30	; 48
    2ba2:	71 09       	sbc	r23, r1
    2ba4:	07 2e       	mov	r0, r23
    2ba6:	00 0c       	add	r0, r0
    2ba8:	88 0b       	sbc	r24, r24
    2baa:	99 0b       	sbc	r25, r25
    2bac:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2bb0:	a3 01       	movw	r20, r6
    2bb2:	92 01       	movw	r18, r4
    2bb4:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    2bb8:	9b 01       	movw	r18, r22
    2bba:	ac 01       	movw	r20, r24
    2bbc:	c5 01       	movw	r24, r10
    2bbe:	b4 01       	movw	r22, r8
    2bc0:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2bc4:	4b 01       	movw	r8, r22
    2bc6:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    2bc8:	f3 94       	inc	r15
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	f8 16       	cp	r15, r24
    2bce:	60 f2       	brcs	.-104    	; 0x2b68 <_Z10gpshandlerv+0x42c>
    2bd0:	80 92 dc 02 	sts	0x02DC, r8
    2bd4:	90 92 dd 02 	sts	0x02DD, r9
    2bd8:	a0 92 de 02 	sts	0x02DE, r10
    2bdc:	b0 92 df 02 	sts	0x02DF, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    2be0:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    2be2:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	e7 51       	subi	r30, 0x17	; 23
    2be8:	fd 4f       	sbci	r31, 0xFD	; 253
    2bea:	61 81       	ldd	r22, Z+1	; 0x01
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	60 53       	subi	r22, 0x30	; 48
    2bf0:	71 09       	sbc	r23, r1
    2bf2:	07 2e       	mov	r0, r23
    2bf4:	00 0c       	add	r0, r0
    2bf6:	88 0b       	sbc	r24, r24
    2bf8:	99 0b       	sbc	r25, r25
    2bfa:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2bfe:	2d ec       	ldi	r18, 0xCD	; 205
    2c00:	3c ec       	ldi	r19, 0xCC	; 204
    2c02:	4c ec       	ldi	r20, 0xCC	; 204
    2c04:	5d e3       	ldi	r21, 0x3D	; 61
    2c06:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    2c0a:	20 91 dc 02 	lds	r18, 0x02DC
    2c0e:	30 91 dd 02 	lds	r19, 0x02DD
    2c12:	40 91 de 02 	lds	r20, 0x02DE
    2c16:	50 91 df 02 	lds	r21, 0x02DF
    2c1a:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
    2c1e:	4b 01       	movw	r8, r22
    2c20:	5c 01       	movw	r10, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    2c22:	e1 2f       	mov	r30, r17
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	e7 51       	subi	r30, 0x17	; 23
    2c28:	fd 4f       	sbci	r31, 0xFD	; 253
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	c0 97       	sbiw	r24, 0x30	; 48
    2c30:	bc 01       	movw	r22, r24
    2c32:	99 0f       	add	r25, r25
    2c34:	88 0b       	sbc	r24, r24
    2c36:	99 0b       	sbc	r25, r25
    2c38:	0e 94 a7 21 	call	0x434e	; 0x434e <__floatsisf>
    2c3c:	2a e0       	ldi	r18, 0x0A	; 10
    2c3e:	37 ed       	ldi	r19, 0xD7	; 215
    2c40:	43 e2       	ldi	r20, 0x23	; 35
    2c42:	5c e3       	ldi	r21, 0x3C	; 60
    2c44:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    2c48:	9b 01       	movw	r18, r22
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	c5 01       	movw	r24, r10
    2c4e:	b4 01       	movw	r22, r8
    2c50:	0e 94 a5 20 	call	0x414a	; 0x414a <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    2c54:	26 e5       	ldi	r18, 0x56	; 86
    2c56:	3e e0       	ldi	r19, 0x0E	; 14
    2c58:	4d ee       	ldi	r20, 0xED	; 237
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 c0 22 	call	0x4580	; 0x4580 <__mulsf3>
    2c60:	60 93 dc 02 	sts	0x02DC, r22
    2c64:	70 93 dd 02 	sts	0x02DD, r23
    2c68:	80 93 de 02 	sts	0x02DE, r24
    2c6c:	90 93 df 02 	sts	0x02DF, r25
		
		//date
		counter =19;
    2c70:	83 e1       	ldi	r24, 0x13	; 19
    2c72:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    2c74:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	87 30       	cpi	r24, 0x07	; 7
    2c7a:	80 f4       	brcc	.+32     	; 0x2c9c <_Z10gpshandlerv+0x560>
		{
			if (gpsdata[counter] == ',')
    2c7c:	ec 81       	ldd	r30, Y+4	; 0x04
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	e7 51       	subi	r30, 0x17	; 23
    2c82:	fd 4f       	sbci	r31, 0xFD	; 253
    2c84:	80 81       	ld	r24, Z
    2c86:	8c 32       	cpi	r24, 0x2C	; 44
    2c88:	19 f4       	brne	.+6      	; 0x2c90 <_Z10gpshandlerv+0x554>
			{
				nichterreicht++;
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    2c90:	8c 81       	ldd	r24, Y+4	; 0x04
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	87 30       	cpi	r24, 0x07	; 7
    2c9a:	80 f3       	brcs	.-32     	; 0x2c7c <_Z10gpshandlerv+0x540>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2c9c:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    2c9e:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	a7 51       	subi	r26, 0x17	; 23
    2ca4:	bd 4f       	sbci	r27, 0xFD	; 253
    2ca6:	8c 91       	ld	r24, X
    2ca8:	88 0f       	add	r24, r24
    2caa:	80 56       	subi	r24, 0x60	; 96
    2cac:	28 2f       	mov	r18, r24
    2cae:	22 0f       	add	r18, r18
    2cb0:	22 0f       	add	r18, r18
    2cb2:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	e7 51       	subi	r30, 0x17	; 23
    2cb8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cba:	81 81       	ldd	r24, Z+1	; 0x01
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	c0 97       	sbiw	r24, 0x30	; 48
    2cc0:	82 0f       	add	r24, r18
    2cc2:	91 1d       	adc	r25, r1
    2cc4:	80 93 d8 02 	sts	0x02D8, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2cc8:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2cca:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	a7 51       	subi	r26, 0x17	; 23
    2cd0:	bd 4f       	sbci	r27, 0xFD	; 253
    2cd2:	12 96       	adiw	r26, 0x02	; 2
    2cd4:	8c 91       	ld	r24, X
    2cd6:	88 0f       	add	r24, r24
    2cd8:	80 56       	subi	r24, 0x60	; 96
    2cda:	28 2f       	mov	r18, r24
    2cdc:	22 0f       	add	r18, r18
    2cde:	22 0f       	add	r18, r18
    2ce0:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	e7 51       	subi	r30, 0x17	; 23
    2ce6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce8:	83 81       	ldd	r24, Z+3	; 0x03
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	c0 97       	sbiw	r24, 0x30	; 48
    2cee:	82 0f       	add	r24, r18
    2cf0:	91 1d       	adc	r25, r1
    2cf2:	80 93 d7 02 	sts	0x02D7, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2cf6:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2cf8:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	a7 51       	subi	r26, 0x17	; 23
    2cfe:	bd 4f       	sbci	r27, 0xFD	; 253
    2d00:	14 96       	adiw	r26, 0x04	; 4
    2d02:	8c 91       	ld	r24, X
    2d04:	88 0f       	add	r24, r24
    2d06:	80 56       	subi	r24, 0x60	; 96
    2d08:	28 2f       	mov	r18, r24
    2d0a:	22 0f       	add	r18, r18
    2d0c:	22 0f       	add	r18, r18
    2d0e:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	e7 51       	subi	r30, 0x17	; 23
    2d14:	fd 4f       	sbci	r31, 0xFD	; 253
    2d16:	85 81       	ldd	r24, Z+5	; 0x05
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	c0 97       	sbiw	r24, 0x30	; 48
    2d1c:	82 0f       	add	r24, r18
    2d1e:	91 1d       	adc	r25, r1
    2d20:	80 93 d6 02 	sts	0x02D6, r24
		
		gpsstatus &= ~(1<<complete);
    2d24:	8e 2d       	mov	r24, r14
    2d26:	8b 7f       	andi	r24, 0xFB	; 251
    2d28:	80 93 31 03 	sts	0x0331, r24
    2d2c:	a4 c0       	rjmp	.+328    	; 0x2e76 <_Z10gpshandlerv+0x73a>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    2d2e:	e3 fe       	sbrs	r14, 3
    2d30:	a2 c0       	rjmp	.+324    	; 0x2e76 <_Z10gpshandlerv+0x73a>
    2d32:	ee 20       	and	r14, r14
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <_Z10gpshandlerv+0x5fc>
    2d36:	9f c0       	rjmp	.+318    	; 0x2e76 <_Z10gpshandlerv+0x73a>
	{
		//Andere Daten vernichten
		lat = 0;
    2d38:	10 92 e4 02 	sts	0x02E4, r1
    2d3c:	10 92 e5 02 	sts	0x02E5, r1
    2d40:	10 92 e6 02 	sts	0x02E6, r1
    2d44:	10 92 e7 02 	sts	0x02E7, r1
		lon = 0;
    2d48:	10 92 e0 02 	sts	0x02E0, r1
    2d4c:	10 92 e1 02 	sts	0x02E1, r1
    2d50:	10 92 e2 02 	sts	0x02E2, r1
    2d54:	10 92 e3 02 	sts	0x02E3, r1
		gpsspeed = 0;
    2d58:	10 92 dc 02 	sts	0x02DC, r1
    2d5c:	10 92 dd 02 	sts	0x02DD, r1
    2d60:	10 92 de 02 	sts	0x02DE, r1
    2d64:	10 92 df 02 	sts	0x02DF, r1
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    2d68:	e9 ee       	ldi	r30, 0xE9	; 233
    2d6a:	f2 e0       	ldi	r31, 0x02	; 2
    2d6c:	80 85       	ldd	r24, Z+8	; 0x08
    2d6e:	21 ed       	ldi	r18, 0xD1	; 209
    2d70:	28 0f       	add	r18, r24
		//Andere Daten vernichten
		lat = 0;
		lon = 0;
		gpsspeed = 0;
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    2d72:	87 81       	ldd	r24, Z+7	; 0x07
    2d74:	88 0f       	add	r24, r24
    2d76:	80 56       	subi	r24, 0x60	; 96
    2d78:	98 2f       	mov	r25, r24
    2d7a:	99 0f       	add	r25, r25
    2d7c:	99 0f       	add	r25, r25
    2d7e:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    2d80:	82 0f       	add	r24, r18
    2d82:	80 93 db 02 	sts	0x02DB, r24
    2d86:	82 85       	ldd	r24, Z+10	; 0x0a
    2d88:	20 ed       	ldi	r18, 0xD0	; 208
    2d8a:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    2d8c:	81 85       	ldd	r24, Z+9	; 0x09
    2d8e:	88 0f       	add	r24, r24
    2d90:	80 56       	subi	r24, 0x60	; 96
    2d92:	98 2f       	mov	r25, r24
    2d94:	99 0f       	add	r25, r25
    2d96:	99 0f       	add	r25, r25
    2d98:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    2d9a:	82 0f       	add	r24, r18
    2d9c:	80 93 da 02 	sts	0x02DA, r24
    2da0:	84 85       	ldd	r24, Z+12	; 0x0c
    2da2:	20 ed       	ldi	r18, 0xD0	; 208
    2da4:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    2da6:	83 85       	ldd	r24, Z+11	; 0x0b
    2da8:	88 0f       	add	r24, r24
    2daa:	80 56       	subi	r24, 0x60	; 96
    2dac:	98 2f       	mov	r25, r24
    2dae:	99 0f       	add	r25, r25
    2db0:	99 0f       	add	r25, r25
    2db2:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    2db4:	82 0f       	add	r24, r18
    2db6:	80 93 d9 02 	sts	0x02D9, r24
		
		volatile uint8_t counter = 19;
    2dba:	83 e1       	ldi	r24, 0x13	; 19
    2dbc:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    2dbe:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	87 30       	cpi	r24, 0x07	; 7
    2dc4:	80 f4       	brcc	.+32     	; 0x2de6 <_Z10gpshandlerv+0x6aa>
		{
			if (gpsdata[counter] == ',')
    2dc6:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	e7 51       	subi	r30, 0x17	; 23
    2dcc:	fd 4f       	sbci	r31, 0xFD	; 253
    2dce:	80 81       	ld	r24, Z
    2dd0:	8c 32       	cpi	r24, 0x2C	; 44
    2dd2:	19 f4       	brne	.+6      	; 0x2dda <_Z10gpshandlerv+0x69e>
			{
				nichterreicht++;
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	8f 5f       	subi	r24, 0xFF	; 255
    2dd8:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	8f 5f       	subi	r24, 0xFF	; 255
    2dde:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	87 30       	cpi	r24, 0x07	; 7
    2de4:	80 f3       	brcs	.-32     	; 0x2dc6 <_Z10gpshandlerv+0x68a>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2de6:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    2de8:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	a7 51       	subi	r26, 0x17	; 23
    2dee:	bd 4f       	sbci	r27, 0xFD	; 253
    2df0:	8c 91       	ld	r24, X
    2df2:	88 0f       	add	r24, r24
    2df4:	80 56       	subi	r24, 0x60	; 96
    2df6:	28 2f       	mov	r18, r24
    2df8:	22 0f       	add	r18, r18
    2dfa:	22 0f       	add	r18, r18
    2dfc:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	e7 51       	subi	r30, 0x17	; 23
    2e02:	fd 4f       	sbci	r31, 0xFD	; 253
    2e04:	81 81       	ldd	r24, Z+1	; 0x01
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	c0 97       	sbiw	r24, 0x30	; 48
    2e0a:	82 0f       	add	r24, r18
    2e0c:	91 1d       	adc	r25, r1
    2e0e:	80 93 d8 02 	sts	0x02D8, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2e12:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2e14:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	a7 51       	subi	r26, 0x17	; 23
    2e1a:	bd 4f       	sbci	r27, 0xFD	; 253
    2e1c:	12 96       	adiw	r26, 0x02	; 2
    2e1e:	8c 91       	ld	r24, X
    2e20:	88 0f       	add	r24, r24
    2e22:	80 56       	subi	r24, 0x60	; 96
    2e24:	28 2f       	mov	r18, r24
    2e26:	22 0f       	add	r18, r18
    2e28:	22 0f       	add	r18, r18
    2e2a:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	e7 51       	subi	r30, 0x17	; 23
    2e30:	fd 4f       	sbci	r31, 0xFD	; 253
    2e32:	83 81       	ldd	r24, Z+3	; 0x03
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	c0 97       	sbiw	r24, 0x30	; 48
    2e38:	82 0f       	add	r24, r18
    2e3a:	91 1d       	adc	r25, r1
    2e3c:	80 93 d7 02 	sts	0x02D7, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2e40:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2e42:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	a7 51       	subi	r26, 0x17	; 23
    2e48:	bd 4f       	sbci	r27, 0xFD	; 253
    2e4a:	14 96       	adiw	r26, 0x04	; 4
    2e4c:	8c 91       	ld	r24, X
    2e4e:	88 0f       	add	r24, r24
    2e50:	80 56       	subi	r24, 0x60	; 96
    2e52:	28 2f       	mov	r18, r24
    2e54:	22 0f       	add	r18, r18
    2e56:	22 0f       	add	r18, r18
    2e58:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	e7 51       	subi	r30, 0x17	; 23
    2e5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e60:	85 81       	ldd	r24, Z+5	; 0x05
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	c0 97       	sbiw	r24, 0x30	; 48
    2e66:	82 0f       	add	r24, r18
    2e68:	91 1d       	adc	r25, r1
    2e6a:	80 93 d6 02 	sts	0x02D6, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    2e6e:	8e 2d       	mov	r24, r14
    2e70:	87 7f       	andi	r24, 0xF7	; 247
    2e72:	80 93 31 03 	sts	0x0331, r24
	}
	//fix status pruefen, wenn implementiert
}
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	1f 91       	pop	r17
    2e84:	0f 91       	pop	r16
    2e86:	ff 90       	pop	r15
    2e88:	ef 90       	pop	r14
    2e8a:	bf 90       	pop	r11
    2e8c:	af 90       	pop	r10
    2e8e:	9f 90       	pop	r9
    2e90:	8f 90       	pop	r8
    2e92:	7f 90       	pop	r7
    2e94:	6f 90       	pop	r6
    2e96:	5f 90       	pop	r5
    2e98:	4f 90       	pop	r4
    2e9a:	08 95       	ret

00002e9c <main>:
void initialisierung();
void maininterupthandler(monitor *mon, uint8_t taste);
void gpshandler();

int main(void)
{
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	65 97       	sbiw	r28, 0x15	; 21
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    2eb0:	99 d9       	rcall	.-3278   	; 0x21e4 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2eb2:	8a e2       	ldi	r24, 0x2A	; 42
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 26 28 	call	0x504c	; 0x504c <malloc>
    2eba:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2ebc:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2ebe:	89 e3       	ldi	r24, 0x39	; 57
    2ec0:	94 e0       	ldi	r25, 0x04	; 4
    2ec2:	90 8f       	std	Z+24, r25	; 0x18
    2ec4:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    2ec6:	8a e3       	ldi	r24, 0x3A	; 58
    2ec8:	98 e0       	ldi	r25, 0x08	; 8
    2eca:	92 8f       	std	Z+26, r25	; 0x1a
    2ecc:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2ece:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2ed0:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    2ed6:	82 e9       	ldi	r24, 0x92	; 146
    2ed8:	92 e0       	ldi	r25, 0x02	; 2
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    2ede:	85 e5       	ldi	r24, 0x55	; 85
    2ee0:	98 e6       	ldi	r25, 0x68	; 104
    2ee2:	a2 e7       	ldi	r26, 0x72	; 114
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	ab 83       	std	Y+3, r26	; 0x03
    2eec:	bc 83       	std	Y+4, r27	; 0x04
    2eee:	9e 01       	movw	r18, r28
    2ef0:	2f 5f       	subi	r18, 0xFF	; 255
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	cf 01       	movw	r24, r30
    2ef6:	4b 96       	adiw	r24, 0x1b	; 27
    2ef8:	be 01       	movw	r22, r28
    2efa:	65 5f       	subi	r22, 0xF5	; 245
    2efc:	7f 4f       	sbci	r23, 0xFF	; 255
    2efe:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	50 2f       	mov	r21, r16
    2f04:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2f06:	54 30       	cpi	r21, 0x04	; 4
    2f08:	28 f4       	brcc	.+10     	; 0x2f14 <main+0x78>
			{
				name[i] = na[i];
    2f0a:	d8 01       	movw	r26, r16
    2f0c:	5c 91       	ld	r21, X
    2f0e:	dc 01       	movw	r26, r24
    2f10:	5c 93       	st	X, r21
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    2f14:	dc 01       	movw	r26, r24
    2f16:	4c 93       	st	X, r20
    2f18:	0f 5f       	subi	r16, 0xFF	; 255
    2f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1c:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    2f1e:	06 17       	cp	r16, r22
    2f20:	17 07       	cpc	r17, r23
    2f22:	79 f7       	brne	.-34     	; 0x2f02 <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    2f24:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    2f26:	83 e0       	ldi	r24, 0x03	; 3
    2f28:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2f2a:	fa 83       	std	Y+2, r31	; 0x02
    2f2c:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2f2e:	89 e2       	ldi	r24, 0x29	; 41
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 26 28 	call	0x504c	; 0x504c <malloc>
    2f36:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2f38:	fc 01       	movw	r30, r24
    2f3a:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2f3c:	89 e3       	ldi	r24, 0x39	; 57
    2f3e:	94 e0       	ldi	r25, 0x04	; 4
    2f40:	90 8f       	std	Z+24, r25	; 0x18
    2f42:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    2f44:	8a e3       	ldi	r24, 0x3A	; 58
    2f46:	98 e0       	ldi	r25, 0x08	; 8
    2f48:	92 8f       	std	Z+26, r25	; 0x1a
    2f4a:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2f4c:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2f4e:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    2f54:	8a e9       	ldi	r24, 0x9A	; 154
    2f56:	92 e0       	ldi	r25, 0x02	; 2
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    2f5c:	86 e0       	ldi	r24, 0x06	; 6
    2f5e:	ec e3       	ldi	r30, 0x3C	; 60
    2f60:	f1 e0       	ldi	r31, 0x01	; 1
    2f62:	de 01       	movw	r26, r28
    2f64:	1d 96       	adiw	r26, 0x0d	; 13
    2f66:	01 90       	ld	r0, Z+
    2f68:	0d 92       	st	X+, r0
    2f6a:	8a 95       	dec	r24
    2f6c:	e1 f7       	brne	.-8      	; 0x2f66 <main+0xca>
    2f6e:	ce 01       	movw	r24, r28
    2f70:	0d 96       	adiw	r24, 0x0d	; 13
    2f72:	d8 01       	movw	r26, r16
    2f74:	5b 96       	adiw	r26, 0x1b	; 27
    2f76:	ae 01       	movw	r20, r28
    2f78:	49 5e       	subi	r20, 0xE9	; 233
    2f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7c:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2f7e:	20 e2       	ldi	r18, 0x20	; 32
    2f80:	3e 2f       	mov	r19, r30
    2f82:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    2f84:	36 30       	cpi	r19, 0x06	; 6
    2f86:	18 f4       	brcc	.+6      	; 0x2f8e <main+0xf2>
			{
				name[i] = na[i];
    2f88:	30 81       	ld	r19, Z
    2f8a:	3c 93       	st	X, r19
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <main+0xf4>
			}
			else
			{
				name[i] = ' ';
    2f8e:	2c 93       	st	X, r18
    2f90:	31 96       	adiw	r30, 0x01	; 1
    2f92:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    2f94:	e4 17       	cp	r30, r20
    2f96:	f5 07       	cpc	r31, r21
    2f98:	99 f7       	brne	.-26     	; 0x2f80 <main+0xe4>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    2f9a:	6e d8       	rcall	.-3876   	; 0x2078 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2f9c:	1c 83       	std	Y+4, r17	; 0x04
    2f9e:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2fa0:	89 e2       	ldi	r24, 0x29	; 41
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 26 28 	call	0x504c	; 0x504c <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2fa8:	dc 01       	movw	r26, r24
    2faa:	56 96       	adiw	r26, 0x16	; 22
    2fac:	1c 92       	st	X, r1
    2fae:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    2fb0:	29 e3       	ldi	r18, 0x39	; 57
    2fb2:	34 e0       	ldi	r19, 0x04	; 4
    2fb4:	58 96       	adiw	r26, 0x18	; 24
    2fb6:	3c 93       	st	X, r19
    2fb8:	2e 93       	st	-X, r18
    2fba:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    2fbc:	2a e3       	ldi	r18, 0x3A	; 58
    2fbe:	38 e0       	ldi	r19, 0x08	; 8
    2fc0:	5a 96       	adiw	r26, 0x1a	; 26
    2fc2:	3c 93       	st	X, r19
    2fc4:	2e 93       	st	-X, r18
    2fc6:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    2fc8:	95 96       	adiw	r26, 0x25	; 37
    2fca:	1c 92       	st	X, r1
    2fcc:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    2fce:	96 96       	adiw	r26, 0x26	; 38
    2fd0:	1c 92       	st	X, r1
    2fd2:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    2fd4:	21 e0       	ldi	r18, 0x01	; 1
    2fd6:	98 96       	adiw	r26, 0x28	; 40
    2fd8:	2c 93       	st	X, r18
    2fda:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    2fdc:	22 ea       	ldi	r18, 0xA2	; 162
    2fde:	32 e0       	ldi	r19, 0x02	; 2
    2fe0:	2d 93       	st	X+, r18
    2fe2:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    2fe4:	28 e0       	ldi	r18, 0x08	; 8
    2fe6:	e2 e4       	ldi	r30, 0x42	; 66
    2fe8:	f1 e0       	ldi	r31, 0x01	; 1
    2fea:	de 01       	movw	r26, r28
    2fec:	1d 96       	adiw	r26, 0x0d	; 13
    2fee:	01 90       	ld	r0, Z+
    2ff0:	0d 92       	st	X+, r0
    2ff2:	2a 95       	dec	r18
    2ff4:	e1 f7       	brne	.-8      	; 0x2fee <main+0x152>
    2ff6:	9e 01       	movw	r18, r28
    2ff8:	23 5f       	subi	r18, 0xF3	; 243
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	5b 96       	adiw	r26, 0x1b	; 27
    3000:	be 01       	movw	r22, r28
    3002:	69 5e       	subi	r22, 0xE9	; 233
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    3008:	40 e2       	ldi	r20, 0x20	; 32
    300a:	5e 2f       	mov	r21, r30
    300c:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    300e:	58 30       	cpi	r21, 0x08	; 8
    3010:	18 f4       	brcc	.+6      	; 0x3018 <main+0x17c>
			{
				name[i] = na[i];
    3012:	50 81       	ld	r21, Z
    3014:	5c 93       	st	X, r21
    3016:	01 c0       	rjmp	.+2      	; 0x301a <main+0x17e>
			}
			else
			{
				name[i] = ' ';
    3018:	4c 93       	st	X, r20
    301a:	31 96       	adiw	r30, 0x01	; 1
    301c:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    301e:	e6 17       	cp	r30, r22
    3020:	f7 07       	cpc	r31, r23
    3022:	99 f7       	brne	.-26     	; 0x300a <main+0x16e>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    3024:	9e 83       	std	Y+6, r25	; 0x06
    3026:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    3028:	89 e2       	ldi	r24, 0x29	; 41
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 26 28 	call	0x504c	; 0x504c <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    3030:	fc 01       	movw	r30, r24
    3032:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    3034:	29 e3       	ldi	r18, 0x39	; 57
    3036:	34 e0       	ldi	r19, 0x04	; 4
    3038:	30 8f       	std	Z+24, r19	; 0x18
    303a:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    303c:	2a e3       	ldi	r18, 0x3A	; 58
    303e:	38 e0       	ldi	r19, 0x08	; 8
    3040:	32 8f       	std	Z+26, r19	; 0x1a
    3042:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    3044:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    3046:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    3048:	21 e0       	ldi	r18, 0x01	; 1
    304a:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    304c:	2a ea       	ldi	r18, 0xAA	; 170
    304e:	32 e0       	ldi	r19, 0x02	; 2
    3050:	31 83       	std	Z+1, r19	; 0x01
    3052:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    3054:	29 e0       	ldi	r18, 0x09	; 9
    3056:	e0 ed       	ldi	r30, 0xD0	; 208
    3058:	f1 e0       	ldi	r31, 0x01	; 1
    305a:	de 01       	movw	r26, r28
    305c:	1d 96       	adiw	r26, 0x0d	; 13
    305e:	01 90       	ld	r0, Z+
    3060:	0d 92       	st	X+, r0
    3062:	2a 95       	dec	r18
    3064:	e1 f7       	brne	.-8      	; 0x305e <main+0x1c2>
    3066:	9e 01       	movw	r18, r28
    3068:	23 5f       	subi	r18, 0xF3	; 243
    306a:	3f 4f       	sbci	r19, 0xFF	; 255
    306c:	dc 01       	movw	r26, r24
    306e:	5b 96       	adiw	r26, 0x1b	; 27
    3070:	be 01       	movw	r22, r28
    3072:	69 5e       	subi	r22, 0xE9	; 233
    3074:	7f 4f       	sbci	r23, 0xFF	; 255
    3076:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    3078:	40 e2       	ldi	r20, 0x20	; 32
    307a:	5e 2f       	mov	r21, r30
    307c:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    307e:	59 30       	cpi	r21, 0x09	; 9
    3080:	18 f4       	brcc	.+6      	; 0x3088 <main+0x1ec>
			{
				name[i] = na[i];
    3082:	50 81       	ld	r21, Z
    3084:	5c 93       	st	X, r21
    3086:	01 c0       	rjmp	.+2      	; 0x308a <main+0x1ee>
			}
			else
			{
				name[i] = ' ';
    3088:	4c 93       	st	X, r20
    308a:	31 96       	adiw	r30, 0x01	; 1
    308c:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    308e:	e6 17       	cp	r30, r22
    3090:	f7 07       	cpc	r31, r23
    3092:	99 f7       	brne	.-26     	; 0x307a <main+0x1de>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 3;
    3094:	23 e0       	ldi	r18, 0x03	; 3
    3096:	dc 01       	movw	r26, r24
    3098:	97 96       	adiw	r26, 0x27	; 39
    309a:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    309c:	98 87       	std	Y+8, r25	; 0x08
    309e:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    30a0:	89 e2       	ldi	r24, 0x29	; 41
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 26 28 	call	0x504c	; 0x504c <malloc>
    30a8:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    30aa:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    30ac:	0f 2e       	mov	r0, r31
    30ae:	f9 e3       	ldi	r31, 0x39	; 57
    30b0:	cf 2e       	mov	r12, r31
    30b2:	f4 e0       	ldi	r31, 0x04	; 4
    30b4:	df 2e       	mov	r13, r31
    30b6:	f0 2d       	mov	r31, r0
    30b8:	d0 8e       	std	Z+24, r13	; 0x18
    30ba:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    30bc:	0f 2e       	mov	r0, r31
    30be:	fa e3       	ldi	r31, 0x3A	; 58
    30c0:	ef 2e       	mov	r14, r31
    30c2:	f8 e0       	ldi	r31, 0x08	; 8
    30c4:	ff 2e       	mov	r15, r31
    30c6:	f0 2d       	mov	r31, r0
    30c8:	f2 8e       	std	Z+26, r15	; 0x1a
    30ca:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    30cc:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    30ce:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    30d0:	11 e0       	ldi	r17, 0x01	; 1
    30d2:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    30d4:	82 ec       	ldi	r24, 0xC2	; 194
    30d6:	92 e0       	ldi	r25, 0x02	; 2
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    30dc:	fa 87       	std	Y+10, r31	; 0x0a
    30de:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    30e0:	89 e2       	ldi	r24, 0x29	; 41
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 26 28 	call	0x504c	; 0x504c <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    30e8:	fc 01       	movw	r30, r24
    30ea:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    30ec:	d0 8e       	std	Z+24, r13	; 0x18
    30ee:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    30f0:	f2 8e       	std	Z+26, r15	; 0x1a
    30f2:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    30f4:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    30f6:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    30f8:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    30fa:	2a eb       	ldi	r18, 0xBA	; 186
    30fc:	32 e0       	ldi	r19, 0x02	; 2
    30fe:	31 83       	std	Z+1, r19	; 0x01
    3100:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    3102:	26 e0       	ldi	r18, 0x06	; 6
    3104:	e9 ed       	ldi	r30, 0xD9	; 217
    3106:	f1 e0       	ldi	r31, 0x01	; 1
    3108:	de 01       	movw	r26, r28
    310a:	1d 96       	adiw	r26, 0x0d	; 13
    310c:	01 90       	ld	r0, Z+
    310e:	0d 92       	st	X+, r0
    3110:	2a 95       	dec	r18
    3112:	e1 f7       	brne	.-8      	; 0x310c <main+0x270>
    3114:	9e 01       	movw	r18, r28
    3116:	23 5f       	subi	r18, 0xF3	; 243
    3118:	3f 4f       	sbci	r19, 0xFF	; 255
    311a:	dc 01       	movw	r26, r24
    311c:	5b 96       	adiw	r26, 0x1b	; 27
    311e:	be 01       	movw	r22, r28
    3120:	69 5e       	subi	r22, 0xE9	; 233
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    3126:	40 e2       	ldi	r20, 0x20	; 32
    3128:	5e 2f       	mov	r21, r30
    312a:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    312c:	56 30       	cpi	r21, 0x06	; 6
    312e:	18 f4       	brcc	.+6      	; 0x3136 <main+0x29a>
			{
				name[i] = na[i];
    3130:	50 81       	ld	r21, Z
    3132:	5c 93       	st	X, r21
    3134:	01 c0       	rjmp	.+2      	; 0x3138 <main+0x29c>
			}
			else
			{
				name[i] = ' ';
    3136:	4c 93       	st	X, r20
    3138:	31 96       	adiw	r30, 0x01	; 1
    313a:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    313c:	e6 17       	cp	r30, r22
    313e:	f7 07       	cpc	r31, r23
    3140:	99 f7       	brne	.-26     	; 0x3128 <main+0x28c>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    3142:	dc 01       	movw	r26, r24
    3144:	98 96       	adiw	r26, 0x28	; 40
    3146:	1c 92       	st	X, r1
    3148:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    314a:	25 e0       	ldi	r18, 0x05	; 5
    314c:	97 96       	adiw	r26, 0x27	; 39
    314e:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    3150:	9c 87       	std	Y+12, r25	; 0x0c
    3152:	8b 87       	std	Y+11, r24	; 0x0b
	
	

	while (1) 
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    3154:	8d e2       	ldi	r24, 0x2D	; 45
    3156:	94 e0       	ldi	r25, 0x04	; 4
    3158:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN9Interface7unifiedEv>
    315c:	e0 91 33 03 	lds	r30, 0x0333
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	21 e0       	ldi	r18, 0x01	; 1
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	2c 0f       	add	r18, r28
    316c:	3d 1f       	adc	r19, r29
    316e:	e2 0f       	add	r30, r18
    3170:	f3 1f       	adc	r31, r19
    3172:	68 2f       	mov	r22, r24
    3174:	80 81       	ld	r24, Z
    3176:	91 81       	ldd	r25, Z+1	; 0x01
    3178:	7a d9       	rcall	.-3340   	; 0x246e <_Z19maininterupthandlerP7monitorh>
		gpshandler();
    317a:	e0 da       	rcall	.-2624   	; 0x273c <_Z10gpshandlerv>
		if (statusreg&(1<<powersavemode))
    317c:	80 91 34 03 	lds	r24, 0x0334
    3180:	81 ff       	sbrs	r24, 1
    3182:	e8 cf       	rjmp	.-48     	; 0x3154 <main+0x2b8>
		{
			SMCR |= (1<<SE);
    3184:	83 b7       	in	r24, 0x33	; 51
    3186:	81 60       	ori	r24, 0x01	; 1
    3188:	83 bf       	out	0x33, r24	; 51
    318a:	e4 cf       	rjmp	.-56     	; 0x3154 <main+0x2b8>

0000318c <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    318c:	2f 92       	push	r2
    318e:	3f 92       	push	r3
    3190:	4f 92       	push	r4
    3192:	5f 92       	push	r5
    3194:	6f 92       	push	r6
    3196:	7f 92       	push	r7
    3198:	8f 92       	push	r8
    319a:	9f 92       	push	r9
    319c:	af 92       	push	r10
    319e:	bf 92       	push	r11
    31a0:	cf 92       	push	r12
    31a2:	df 92       	push	r13
    31a4:	ef 92       	push	r14
    31a6:	ff 92       	push	r15
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	66 97       	sbiw	r28, 0x16	; 22
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    31c0:	8a e3       	ldi	r24, 0x3A	; 58
    31c2:	98 e0       	ldi	r25, 0x08	; 8
    31c4:	7a d7       	rcall	.+3828   	; 0x40ba <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    31c6:	89 e3       	ldi	r24, 0x39	; 57
    31c8:	94 e0       	ldi	r25, 0x04	; 4
    31ca:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    31ce:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    31d0:	0f 2e       	mov	r0, r31
    31d2:	ff e0       	ldi	r31, 0x0F	; 15
    31d4:	7f 2e       	mov	r7, r31
    31d6:	f0 2d       	mov	r31, r0
    31d8:	ce 01       	movw	r24, r28
    31da:	01 96       	adiw	r24, 0x01	; 1
    31dc:	2c 01       	movw	r4, r24
    31de:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    31e0:	8d 8b       	std	Y+21, r24	; 0x15
    31e2:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    31e4:	0f 2e       	mov	r0, r31
    31e6:	fa e3       	ldi	r31, 0x3A	; 58
    31e8:	cf 2e       	mov	r12, r31
    31ea:	f8 e0       	ldi	r31, 0x08	; 8
    31ec:	df 2e       	mov	r13, r31
    31ee:	f0 2d       	mov	r31, r0
    31f0:	0f 2e       	mov	r0, r31
    31f2:	fd ec       	ldi	r31, 0xCD	; 205
    31f4:	8f 2e       	mov	r8, r31
    31f6:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    31f8:	68 94       	set
    31fa:	ee 24       	eor	r14, r14
    31fc:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    31fe:	0f 2e       	mov	r0, r31
    3200:	fe e2       	ldi	r31, 0x2E	; 46
    3202:	6f 2e       	mov	r6, r31
    3204:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    3206:	ef ed       	ldi	r30, 0xDF	; 223
    3208:	f1 e0       	ldi	r31, 0x01	; 1
    320a:	d2 01       	movw	r26, r4
    320c:	87 2d       	mov	r24, r7
    320e:	01 90       	ld	r0, Z+
    3210:	0d 92       	st	X+, r0
    3212:	8a 95       	dec	r24
    3214:	e1 f7       	brne	.-8      	; 0x320e <_Z13uhreinstellenv+0x82>
    3216:	52 01       	movw	r10, r4
    3218:	12 01       	movw	r2, r4
    321a:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    321c:	f1 01       	movw	r30, r2
    321e:	61 91       	ld	r22, Z+
    3220:	1f 01       	movw	r2, r30
    3222:	2f 2d       	mov	r18, r15
    3224:	41 2f       	mov	r20, r17
    3226:	89 e3       	ldi	r24, 0x39	; 57
    3228:	94 e0       	ldi	r25, 0x04	; 4
    322a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    322e:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    3230:	14 35       	cpi	r17, 0x54	; 84
    3232:	a1 f7       	brne	.-24     	; 0x321c <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    3234:	e5 e1       	ldi	r30, 0x15	; 21
    3236:	f1 e0       	ldi	r31, 0x01	; 1
    3238:	d2 01       	movw	r26, r4
    323a:	87 2d       	mov	r24, r7
    323c:	01 90       	ld	r0, Z+
    323e:	0d 92       	st	X+, r0
    3240:	8a 95       	dec	r24
    3242:	e1 f7       	brne	.-8      	; 0x323c <_Z13uhreinstellenv+0xb0>
    3244:	2d 88       	ldd	r2, Y+21	; 0x15
    3246:	3e 88       	ldd	r3, Y+22	; 0x16
    3248:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    324a:	f1 01       	movw	r30, r2
    324c:	61 91       	ld	r22, Z+
    324e:	1f 01       	movw	r2, r30
    3250:	28 e0       	ldi	r18, 0x08	; 8
    3252:	41 2f       	mov	r20, r17
    3254:	89 e3       	ldi	r24, 0x39	; 57
    3256:	94 e0       	ldi	r25, 0x04	; 4
    3258:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    325c:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    325e:	14 35       	cpi	r17, 0x54	; 84
    3260:	a1 f7       	brne	.-24     	; 0x324a <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    3262:	f6 01       	movw	r30, r12
    3264:	90 89       	ldd	r25, Z+16	; 0x10
    3266:	98 9d       	mul	r25, r8
    3268:	81 2d       	mov	r24, r1
    326a:	11 24       	eor	r1, r1
    326c:	86 95       	lsr	r24
    326e:	86 95       	lsr	r24
    3270:	86 95       	lsr	r24
    3272:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    3274:	88 0f       	add	r24, r24
    3276:	28 2f       	mov	r18, r24
    3278:	22 0f       	add	r18, r18
    327a:	22 0f       	add	r18, r18
    327c:	82 0f       	add	r24, r18
    327e:	98 1b       	sub	r25, r24
    3280:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    3282:	fa e3       	ldi	r31, 0x3A	; 58
    3284:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    3286:	f6 01       	movw	r30, r12
    3288:	91 89       	ldd	r25, Z+17	; 0x11
    328a:	98 9d       	mul	r25, r8
    328c:	81 2d       	mov	r24, r1
    328e:	11 24       	eor	r1, r1
    3290:	86 95       	lsr	r24
    3292:	86 95       	lsr	r24
    3294:	86 95       	lsr	r24
    3296:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    3298:	88 0f       	add	r24, r24
    329a:	28 2f       	mov	r18, r24
    329c:	22 0f       	add	r18, r18
    329e:	22 0f       	add	r18, r18
    32a0:	82 0f       	add	r24, r18
    32a2:	98 1b       	sub	r25, r24
    32a4:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    32a6:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    32a8:	94 89       	ldd	r25, Z+20	; 0x14
    32aa:	98 9d       	mul	r25, r8
    32ac:	81 2d       	mov	r24, r1
    32ae:	11 24       	eor	r1, r1
    32b0:	86 95       	lsr	r24
    32b2:	86 95       	lsr	r24
    32b4:	86 95       	lsr	r24
    32b6:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    32b8:	88 0f       	add	r24, r24
    32ba:	28 2f       	mov	r18, r24
    32bc:	22 0f       	add	r18, r18
    32be:	22 0f       	add	r18, r18
    32c0:	82 0f       	add	r24, r18
    32c2:	98 1b       	sub	r25, r24
    32c4:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    32c6:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    32c8:	96 89       	ldd	r25, Z+22	; 0x16
    32ca:	98 9d       	mul	r25, r8
    32cc:	81 2d       	mov	r24, r1
    32ce:	11 24       	eor	r1, r1
    32d0:	86 95       	lsr	r24
    32d2:	86 95       	lsr	r24
    32d4:	86 95       	lsr	r24
    32d6:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    32d8:	88 0f       	add	r24, r24
    32da:	28 2f       	mov	r18, r24
    32dc:	22 0f       	add	r18, r18
    32de:	22 0f       	add	r18, r18
    32e0:	82 0f       	add	r24, r18
    32e2:	98 1b       	sub	r25, r24
    32e4:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    32e6:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    32e8:	97 89       	ldd	r25, Z+23	; 0x17
    32ea:	98 9d       	mul	r25, r8
    32ec:	81 2d       	mov	r24, r1
    32ee:	11 24       	eor	r1, r1
    32f0:	86 95       	lsr	r24
    32f2:	86 95       	lsr	r24
    32f4:	86 95       	lsr	r24
    32f6:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    32f8:	88 0f       	add	r24, r24
    32fa:	28 2f       	mov	r18, r24
    32fc:	22 0f       	add	r18, r18
    32fe:	22 0f       	add	r18, r18
    3300:	82 0f       	add	r24, r18
    3302:	98 1b       	sub	r25, r24
    3304:	9e 87       	std	Y+14, r25	; 0x0e
    3306:	0d 89       	ldd	r16, Y+21	; 0x15
    3308:	1e 89       	ldd	r17, Y+22	; 0x16
    330a:	2f 2c       	mov	r2, r15
    330c:	33 24       	eor	r3, r3
    330e:	33 94       	inc	r3
    3310:	05 c0       	rjmp	.+10     	; 0x331c <_Z13uhreinstellenv+0x190>
    3312:	33 94       	inc	r3
    3314:	0f 5f       	subi	r16, 0xFF	; 255
    3316:	1f 4f       	sbci	r17, 0xFF	; 255
    3318:	f0 e1       	ldi	r31, 0x10	; 16
    331a:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	38 16       	cp	r3, r24
    3320:	61 f0       	breq	.+24     	; 0x333a <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    3322:	20 e1       	ldi	r18, 0x10	; 16
    3324:	42 2d       	mov	r20, r2
    3326:	f8 01       	movw	r30, r16
    3328:	60 81       	ld	r22, Z
    332a:	89 e3       	ldi	r24, 0x39	; 57
    332c:	94 e0       	ldi	r25, 0x04	; 4
    332e:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    3332:	f4 e0       	ldi	r31, 0x04	; 4
    3334:	f3 15       	cp	r31, r3
    3336:	68 f7       	brcc	.-38     	; 0x3312 <_Z13uhreinstellenv+0x186>
    3338:	08 c0       	rjmp	.+16     	; 0x334a <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    333a:	24 e1       	ldi	r18, 0x14	; 20
    333c:	48 e2       	ldi	r20, 0x28	; 40
    333e:	6b 81       	ldd	r22, Y+3	; 0x03
    3340:	89 e3       	ldi	r24, 0x39	; 57
    3342:	94 e0       	ldi	r25, 0x04	; 4
    3344:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3348:	e4 cf       	rjmp	.-56     	; 0x3312 <_Z13uhreinstellenv+0x186>
    334a:	8e 01       	movw	r16, r28
    334c:	09 5f       	subi	r16, 0xF9	; 249
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    3350:	2f 2c       	mov	r2, r15
    3352:	0f 2e       	mov	r0, r31
    3354:	f6 e0       	ldi	r31, 0x06	; 6
    3356:	3f 2e       	mov	r3, r31
    3358:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    335a:	88 e0       	ldi	r24, 0x08	; 8
    335c:	38 16       	cp	r3, r24
    335e:	61 f0       	breq	.+24     	; 0x3378 <_Z13uhreinstellenv+0x1ec>
    3360:	9b e0       	ldi	r25, 0x0B	; 11
    3362:	39 16       	cp	r3, r25
    3364:	49 f0       	breq	.+18     	; 0x3378 <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    3366:	2e 2d       	mov	r18, r14
    3368:	42 2d       	mov	r20, r2
    336a:	f8 01       	movw	r30, r16
    336c:	60 81       	ld	r22, Z
    336e:	89 e3       	ldi	r24, 0x39	; 57
    3370:	94 e0       	ldi	r25, 0x04	; 4
    3372:	0e 94 9b 04 	call	0x936	; 0x936 <_ZN7Display16draw_number16x16Ehhh>
    3376:	09 c0       	rjmp	.+18     	; 0x338a <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    3378:	28 e2       	ldi	r18, 0x28	; 40
    337a:	48 e0       	ldi	r20, 0x08	; 8
    337c:	42 0d       	add	r20, r2
    337e:	f8 01       	movw	r30, r16
    3380:	60 81       	ld	r22, Z
    3382:	89 e3       	ldi	r24, 0x39	; 57
    3384:	94 e0       	ldi	r25, 0x04	; 4
    3386:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    338a:	33 94       	inc	r3
    338c:	0f 5f       	subi	r16, 0xFF	; 255
    338e:	1f 4f       	sbci	r17, 0xFF	; 255
    3390:	f0 e1       	ldi	r31, 0x10	; 16
    3392:	2f 0e       	add	r2, r31
    3394:	8e e0       	ldi	r24, 0x0E	; 14
    3396:	38 12       	cpse	r3, r24
    3398:	e0 cf       	rjmp	.-64     	; 0x335a <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    339a:	89 e3       	ldi	r24, 0x39	; 57
    339c:	94 e0       	ldi	r25, 0x04	; 4
    339e:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    33a2:	89 e3       	ldi	r24, 0x39	; 57
    33a4:	94 e0       	ldi	r25, 0x04	; 4
    33a6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
		switch (pos) {
    33aa:	89 2d       	mov	r24, r9
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	8a 30       	cpi	r24, 0x0A	; 10
    33b0:	91 05       	cpc	r25, r1
    33b2:	08 f0       	brcs	.+2      	; 0x33b6 <_Z13uhreinstellenv+0x22a>
    33b4:	2c c2       	rjmp	.+1112   	; 0x380e <_Z13uhreinstellenv+0x682>
    33b6:	fc 01       	movw	r30, r24
    33b8:	ed 55       	subi	r30, 0x5D	; 93
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	0c 94 1d 28 	jmp	0x503a	; 0x503a <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    33c0:	8d e2       	ldi	r24, 0x2D	; 45
    33c2:	94 e0       	ldi	r25, 0x04	; 4
    33c4:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    33c8:	88 0f       	add	r24, r24
    33ca:	98 2f       	mov	r25, r24
    33cc:	99 0f       	add	r25, r25
    33ce:	99 0f       	add	r25, r25
    33d0:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    33d2:	88 31       	cpi	r24, 0x18	; 24
    33d4:	08 f4       	brcc	.+2      	; 0x33d8 <_Z13uhreinstellenv+0x24c>
    33d6:	57 c2       	rjmp	.+1198   	; 0x3886 <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    33d8:	f6 01       	movw	r30, r12
    33da:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    33dc:	ee ee       	ldi	r30, 0xEE	; 238
    33de:	f1 e0       	ldi	r31, 0x01	; 1
    33e0:	d2 01       	movw	r26, r4
    33e2:	87 2d       	mov	r24, r7
    33e4:	01 90       	ld	r0, Z+
    33e6:	0d 92       	st	X+, r0
    33e8:	8a 95       	dec	r24
    33ea:	e1 f7       	brne	.-8      	; 0x33e4 <_Z13uhreinstellenv+0x258>
    33ec:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    33ee:	f5 01       	movw	r30, r10
    33f0:	61 91       	ld	r22, Z+
    33f2:	5f 01       	movw	r10, r30
    33f4:	28 e3       	ldi	r18, 0x38	; 56
    33f6:	41 2f       	mov	r20, r17
    33f8:	89 e3       	ldi	r24, 0x39	; 57
    33fa:	94 e0       	ldi	r25, 0x04	; 4
    33fc:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3400:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3402:	14 35       	cpi	r17, 0x54	; 84
    3404:	a1 f7       	brne	.-24     	; 0x33ee <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    3406:	99 24       	eor	r9, r9
    3408:	9a 94       	dec	r9
    340a:	3f c2       	rjmp	.+1150   	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    340c:	8d e2       	ldi	r24, 0x2D	; 45
    340e:	94 e0       	ldi	r25, 0x04	; 4
    3410:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3414:	f6 01       	movw	r30, r12
    3416:	20 89       	ldd	r18, Z+16	; 0x10
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	82 0f       	add	r24, r18
    341c:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    341e:	88 31       	cpi	r24, 0x18	; 24
    3420:	10 f4       	brcc	.+4      	; 0x3426 <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    3422:	80 8b       	std	Z+16, r24	; 0x10
    3424:	32 c2       	rjmp	.+1124   	; 0x388a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    3426:	f6 01       	movw	r30, r12
    3428:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    342a:	ee ee       	ldi	r30, 0xEE	; 238
    342c:	f1 e0       	ldi	r31, 0x01	; 1
    342e:	d2 01       	movw	r26, r4
    3430:	87 2d       	mov	r24, r7
    3432:	01 90       	ld	r0, Z+
    3434:	0d 92       	st	X+, r0
    3436:	8a 95       	dec	r24
    3438:	e1 f7       	brne	.-8      	; 0x3432 <_Z13uhreinstellenv+0x2a6>
    343a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    343c:	f5 01       	movw	r30, r10
    343e:	61 91       	ld	r22, Z+
    3440:	5f 01       	movw	r10, r30
    3442:	28 e3       	ldi	r18, 0x38	; 56
    3444:	41 2f       	mov	r20, r17
    3446:	89 e3       	ldi	r24, 0x39	; 57
    3448:	94 e0       	ldi	r25, 0x04	; 4
    344a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    344e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3450:	14 35       	cpi	r17, 0x54	; 84
    3452:	a1 f7       	brne	.-24     	; 0x343c <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    3454:	99 24       	eor	r9, r9
    3456:	9a 94       	dec	r9
    3458:	18 c2       	rjmp	.+1072   	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    345a:	8d e2       	ldi	r24, 0x2D	; 45
    345c:	94 e0       	ldi	r25, 0x04	; 4
    345e:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3462:	88 0f       	add	r24, r24
    3464:	98 2f       	mov	r25, r24
    3466:	99 0f       	add	r25, r25
    3468:	99 0f       	add	r25, r25
    346a:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    346c:	8c 33       	cpi	r24, 0x3C	; 60
    346e:	18 f4       	brcc	.+6      	; 0x3476 <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    3470:	f6 01       	movw	r30, r12
    3472:	81 8b       	std	Z+17, r24	; 0x11
    3474:	0a c2       	rjmp	.+1044   	; 0x388a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    3476:	f6 01       	movw	r30, r12
    3478:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    347a:	ed ef       	ldi	r30, 0xFD	; 253
    347c:	f1 e0       	ldi	r31, 0x01	; 1
    347e:	d2 01       	movw	r26, r4
    3480:	87 2d       	mov	r24, r7
    3482:	01 90       	ld	r0, Z+
    3484:	0d 92       	st	X+, r0
    3486:	8a 95       	dec	r24
    3488:	e1 f7       	brne	.-8      	; 0x3482 <_Z13uhreinstellenv+0x2f6>
    348a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    348c:	f5 01       	movw	r30, r10
    348e:	61 91       	ld	r22, Z+
    3490:	5f 01       	movw	r10, r30
    3492:	28 e3       	ldi	r18, 0x38	; 56
    3494:	41 2f       	mov	r20, r17
    3496:	89 e3       	ldi	r24, 0x39	; 57
    3498:	94 e0       	ldi	r25, 0x04	; 4
    349a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    349e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    34a0:	14 35       	cpi	r17, 0x54	; 84
    34a2:	a1 f7       	brne	.-24     	; 0x348c <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    34a4:	99 24       	eor	r9, r9
    34a6:	93 94       	inc	r9
    34a8:	f0 c1       	rjmp	.+992    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    34aa:	8d e2       	ldi	r24, 0x2D	; 45
    34ac:	94 e0       	ldi	r25, 0x04	; 4
    34ae:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    34b2:	f6 01       	movw	r30, r12
    34b4:	21 89       	ldd	r18, Z+17	; 0x11
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	82 0f       	add	r24, r18
    34ba:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    34bc:	8c 33       	cpi	r24, 0x3C	; 60
    34be:	10 f4       	brcc	.+4      	; 0x34c4 <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    34c0:	81 8b       	std	Z+17, r24	; 0x11
    34c2:	e3 c1       	rjmp	.+966    	; 0x388a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    34c4:	f6 01       	movw	r30, r12
    34c6:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    34c8:	ed ef       	ldi	r30, 0xFD	; 253
    34ca:	f1 e0       	ldi	r31, 0x01	; 1
    34cc:	d2 01       	movw	r26, r4
    34ce:	87 2d       	mov	r24, r7
    34d0:	01 90       	ld	r0, Z+
    34d2:	0d 92       	st	X+, r0
    34d4:	8a 95       	dec	r24
    34d6:	e1 f7       	brne	.-8      	; 0x34d0 <_Z13uhreinstellenv+0x344>
    34d8:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    34da:	f5 01       	movw	r30, r10
    34dc:	61 91       	ld	r22, Z+
    34de:	5f 01       	movw	r10, r30
    34e0:	28 e3       	ldi	r18, 0x38	; 56
    34e2:	41 2f       	mov	r20, r17
    34e4:	89 e3       	ldi	r24, 0x39	; 57
    34e6:	94 e0       	ldi	r25, 0x04	; 4
    34e8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    34ec:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    34ee:	14 35       	cpi	r17, 0x54	; 84
    34f0:	a1 f7       	brne	.-24     	; 0x34da <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    34f2:	99 24       	eor	r9, r9
    34f4:	93 94       	inc	r9
    34f6:	c9 c1       	rjmp	.+914    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    34f8:	8d e2       	ldi	r24, 0x2D	; 45
    34fa:	94 e0       	ldi	r25, 0x04	; 4
    34fc:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3500:	88 0f       	add	r24, r24
    3502:	98 2f       	mov	r25, r24
    3504:	99 0f       	add	r25, r25
    3506:	99 0f       	add	r25, r25
    3508:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    350a:	80 32       	cpi	r24, 0x20	; 32
    350c:	18 f4       	brcc	.+6      	; 0x3514 <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    350e:	f6 01       	movw	r30, r12
    3510:	84 8b       	std	Z+20, r24	; 0x14
    3512:	bb c1       	rjmp	.+886    	; 0x388a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    3514:	f6 01       	movw	r30, r12
    3516:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    3518:	8b e0       	ldi	r24, 0x0B	; 11
    351a:	ec e0       	ldi	r30, 0x0C	; 12
    351c:	f2 e0       	ldi	r31, 0x02	; 2
    351e:	d2 01       	movw	r26, r4
    3520:	01 90       	ld	r0, Z+
    3522:	0d 92       	st	X+, r0
    3524:	8a 95       	dec	r24
    3526:	e1 f7       	brne	.-8      	; 0x3520 <_Z13uhreinstellenv+0x394>
    3528:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    352a:	f5 01       	movw	r30, r10
    352c:	61 91       	ld	r22, Z+
    352e:	5f 01       	movw	r10, r30
    3530:	28 e3       	ldi	r18, 0x38	; 56
    3532:	41 2f       	mov	r20, r17
    3534:	89 e3       	ldi	r24, 0x39	; 57
    3536:	94 e0       	ldi	r25, 0x04	; 4
    3538:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    353c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    353e:	1c 33       	cpi	r17, 0x3C	; 60
    3540:	a1 f7       	brne	.-24     	; 0x352a <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    3542:	0f 2e       	mov	r0, r31
    3544:	f3 e0       	ldi	r31, 0x03	; 3
    3546:	9f 2e       	mov	r9, r31
    3548:	f0 2d       	mov	r31, r0
    354a:	9f c1       	rjmp	.+830    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    354c:	8d e2       	ldi	r24, 0x2D	; 45
    354e:	94 e0       	ldi	r25, 0x04	; 4
    3550:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    3554:	f6 01       	movw	r30, r12
    3556:	24 89       	ldd	r18, Z+20	; 0x14
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	82 0f       	add	r24, r18
    355c:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    355e:	80 32       	cpi	r24, 0x20	; 32
    3560:	10 f4       	brcc	.+4      	; 0x3566 <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    3562:	84 8b       	std	Z+20, r24	; 0x14
    3564:	92 c1       	rjmp	.+804    	; 0x388a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    3566:	f6 01       	movw	r30, r12
    3568:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    356a:	8b e0       	ldi	r24, 0x0B	; 11
    356c:	ec e0       	ldi	r30, 0x0C	; 12
    356e:	f2 e0       	ldi	r31, 0x02	; 2
    3570:	d2 01       	movw	r26, r4
    3572:	01 90       	ld	r0, Z+
    3574:	0d 92       	st	X+, r0
    3576:	8a 95       	dec	r24
    3578:	e1 f7       	brne	.-8      	; 0x3572 <_Z13uhreinstellenv+0x3e6>
    357a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    357c:	f5 01       	movw	r30, r10
    357e:	61 91       	ld	r22, Z+
    3580:	5f 01       	movw	r10, r30
    3582:	28 e3       	ldi	r18, 0x38	; 56
    3584:	41 2f       	mov	r20, r17
    3586:	89 e3       	ldi	r24, 0x39	; 57
    3588:	94 e0       	ldi	r25, 0x04	; 4
    358a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    358e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3590:	1c 33       	cpi	r17, 0x3C	; 60
    3592:	a1 f7       	brne	.-24     	; 0x357c <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    3594:	0f 2e       	mov	r0, r31
    3596:	f3 e0       	ldi	r31, 0x03	; 3
    3598:	9f 2e       	mov	r9, r31
    359a:	f0 2d       	mov	r31, r0
    359c:	76 c1       	rjmp	.+748    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    359e:	8d e2       	ldi	r24, 0x2D	; 45
    35a0:	94 e0       	ldi	r25, 0x04	; 4
    35a2:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    35a6:	88 0f       	add	r24, r24
    35a8:	98 2f       	mov	r25, r24
    35aa:	99 0f       	add	r25, r25
    35ac:	99 0f       	add	r25, r25
    35ae:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    35b0:	8d 30       	cpi	r24, 0x0D	; 13
    35b2:	18 f4       	brcc	.+6      	; 0x35ba <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    35b4:	f6 01       	movw	r30, r12
    35b6:	86 8b       	std	Z+22, r24	; 0x16
    35b8:	68 c1       	rjmp	.+720    	; 0x388a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    35ba:	f6 01       	movw	r30, r12
    35bc:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    35be:	8d e0       	ldi	r24, 0x0D	; 13
    35c0:	e7 e1       	ldi	r30, 0x17	; 23
    35c2:	f2 e0       	ldi	r31, 0x02	; 2
    35c4:	d2 01       	movw	r26, r4
    35c6:	01 90       	ld	r0, Z+
    35c8:	0d 92       	st	X+, r0
    35ca:	8a 95       	dec	r24
    35cc:	e1 f7       	brne	.-8      	; 0x35c6 <_Z13uhreinstellenv+0x43a>
    35ce:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    35d0:	f5 01       	movw	r30, r10
    35d2:	61 91       	ld	r22, Z+
    35d4:	5f 01       	movw	r10, r30
    35d6:	28 e3       	ldi	r18, 0x38	; 56
    35d8:	41 2f       	mov	r20, r17
    35da:	89 e3       	ldi	r24, 0x39	; 57
    35dc:	94 e0       	ldi	r25, 0x04	; 4
    35de:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    35e2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    35e4:	18 34       	cpi	r17, 0x48	; 72
    35e6:	a1 f7       	brne	.-24     	; 0x35d0 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    35e8:	0f 2e       	mov	r0, r31
    35ea:	f5 e0       	ldi	r31, 0x05	; 5
    35ec:	9f 2e       	mov	r9, r31
    35ee:	f0 2d       	mov	r31, r0
    35f0:	4c c1       	rjmp	.+664    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    35f2:	8d e2       	ldi	r24, 0x2D	; 45
    35f4:	94 e0       	ldi	r25, 0x04	; 4
    35f6:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    35fa:	f6 01       	movw	r30, r12
    35fc:	26 89       	ldd	r18, Z+22	; 0x16
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	82 0f       	add	r24, r18
    3602:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    3604:	8d 30       	cpi	r24, 0x0D	; 13
    3606:	10 f4       	brcc	.+4      	; 0x360c <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    3608:	86 8b       	std	Z+22, r24	; 0x16
    360a:	1d c0       	rjmp	.+58     	; 0x3646 <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    360c:	f6 01       	movw	r30, r12
    360e:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    3610:	8d e0       	ldi	r24, 0x0D	; 13
    3612:	e7 e1       	ldi	r30, 0x17	; 23
    3614:	f2 e0       	ldi	r31, 0x02	; 2
    3616:	d2 01       	movw	r26, r4
    3618:	01 90       	ld	r0, Z+
    361a:	0d 92       	st	X+, r0
    361c:	8a 95       	dec	r24
    361e:	e1 f7       	brne	.-8      	; 0x3618 <_Z13uhreinstellenv+0x48c>
    3620:	2d 88       	ldd	r2, Y+21	; 0x15
    3622:	3e 88       	ldd	r3, Y+22	; 0x16
    3624:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3626:	f1 01       	movw	r30, r2
    3628:	61 91       	ld	r22, Z+
    362a:	1f 01       	movw	r2, r30
    362c:	28 e3       	ldi	r18, 0x38	; 56
    362e:	41 2f       	mov	r20, r17
    3630:	89 e3       	ldi	r24, 0x39	; 57
    3632:	94 e0       	ldi	r25, 0x04	; 4
    3634:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3638:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    363a:	18 34       	cpi	r17, 0x48	; 72
    363c:	a1 f7       	brne	.-24     	; 0x3626 <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    363e:	0f 2e       	mov	r0, r31
    3640:	f5 e0       	ldi	r31, 0x05	; 5
    3642:	9f 2e       	mov	r9, r31
    3644:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    3646:	f6 01       	movw	r30, r12
    3648:	96 89       	ldd	r25, Z+22	; 0x16
    364a:	89 2f       	mov	r24, r25
    364c:	8d 7f       	andi	r24, 0xFD	; 253
    364e:	84 30       	cpi	r24, 0x04	; 4
    3650:	11 f0       	breq	.+4      	; 0x3656 <_Z13uhreinstellenv+0x4ca>
    3652:	89 30       	cpi	r24, 0x09	; 9
    3654:	09 f5       	brne	.+66     	; 0x3698 <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    3656:	f6 01       	movw	r30, r12
    3658:	84 89       	ldd	r24, Z+20	; 0x14
    365a:	8f 31       	cpi	r24, 0x1F	; 31
    365c:	08 f4       	brcc	.+2      	; 0x3660 <_Z13uhreinstellenv+0x4d4>
    365e:	d8 c0       	rjmp	.+432    	; 0x3810 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    3660:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    3662:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    3664:	8b e0       	ldi	r24, 0x0B	; 11
    3666:	ec e0       	ldi	r30, 0x0C	; 12
    3668:	f2 e0       	ldi	r31, 0x02	; 2
    366a:	d2 01       	movw	r26, r4
    366c:	01 90       	ld	r0, Z+
    366e:	0d 92       	st	X+, r0
    3670:	8a 95       	dec	r24
    3672:	e1 f7       	brne	.-8      	; 0x366c <_Z13uhreinstellenv+0x4e0>
    3674:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3676:	f5 01       	movw	r30, r10
    3678:	61 91       	ld	r22, Z+
    367a:	5f 01       	movw	r10, r30
    367c:	28 e3       	ldi	r18, 0x38	; 56
    367e:	41 2f       	mov	r20, r17
    3680:	89 e3       	ldi	r24, 0x39	; 57
    3682:	94 e0       	ldi	r25, 0x04	; 4
    3684:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3688:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    368a:	1c 33       	cpi	r17, 0x3C	; 60
    368c:	a1 f7       	brne	.-24     	; 0x3676 <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    368e:	0f 2e       	mov	r0, r31
    3690:	f3 e0       	ldi	r31, 0x03	; 3
    3692:	9f 2e       	mov	r9, r31
    3694:	f0 2d       	mov	r31, r0
    3696:	f9 c0       	rjmp	.+498    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    3698:	92 30       	cpi	r25, 0x02	; 2
    369a:	09 f0       	breq	.+2      	; 0x369e <_Z13uhreinstellenv+0x512>
    369c:	b9 c0       	rjmp	.+370    	; 0x3810 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    369e:	f6 01       	movw	r30, r12
    36a0:	84 89       	ldd	r24, Z+20	; 0x14
    36a2:	8e 31       	cpi	r24, 0x1E	; 30
    36a4:	08 f4       	brcc	.+2      	; 0x36a8 <_Z13uhreinstellenv+0x51c>
    36a6:	b4 c0       	rjmp	.+360    	; 0x3810 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    36a8:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    36aa:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    36ac:	8b e0       	ldi	r24, 0x0B	; 11
    36ae:	ec e0       	ldi	r30, 0x0C	; 12
    36b0:	f2 e0       	ldi	r31, 0x02	; 2
    36b2:	d2 01       	movw	r26, r4
    36b4:	01 90       	ld	r0, Z+
    36b6:	0d 92       	st	X+, r0
    36b8:	8a 95       	dec	r24
    36ba:	e1 f7       	brne	.-8      	; 0x36b4 <_Z13uhreinstellenv+0x528>
    36bc:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    36be:	f5 01       	movw	r30, r10
    36c0:	61 91       	ld	r22, Z+
    36c2:	5f 01       	movw	r10, r30
    36c4:	28 e3       	ldi	r18, 0x38	; 56
    36c6:	41 2f       	mov	r20, r17
    36c8:	89 e3       	ldi	r24, 0x39	; 57
    36ca:	94 e0       	ldi	r25, 0x04	; 4
    36cc:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    36d0:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    36d2:	1c 33       	cpi	r17, 0x3C	; 60
    36d4:	a1 f7       	brne	.-24     	; 0x36be <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    36d6:	0f 2e       	mov	r0, r31
    36d8:	f3 e0       	ldi	r31, 0x03	; 3
    36da:	9f 2e       	mov	r9, r31
    36dc:	f0 2d       	mov	r31, r0
    36de:	d5 c0       	rjmp	.+426    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    36e0:	8d e2       	ldi	r24, 0x2D	; 45
    36e2:	94 e0       	ldi	r25, 0x04	; 4
    36e4:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    36e8:	88 0f       	add	r24, r24
    36ea:	98 2f       	mov	r25, r24
    36ec:	99 0f       	add	r25, r25
    36ee:	99 0f       	add	r25, r25
    36f0:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    36f2:	82 33       	cpi	r24, 0x32	; 50
    36f4:	18 f4       	brcc	.+6      	; 0x36fc <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    36f6:	f6 01       	movw	r30, r12
    36f8:	87 8b       	std	Z+23, r24	; 0x17
    36fa:	c7 c0       	rjmp	.+398    	; 0x388a <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    36fc:	f6 01       	movw	r30, r12
    36fe:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    3700:	8c e0       	ldi	r24, 0x0C	; 12
    3702:	e4 e2       	ldi	r30, 0x24	; 36
    3704:	f2 e0       	ldi	r31, 0x02	; 2
    3706:	d2 01       	movw	r26, r4
    3708:	01 90       	ld	r0, Z+
    370a:	0d 92       	st	X+, r0
    370c:	8a 95       	dec	r24
    370e:	e1 f7       	brne	.-8      	; 0x3708 <_Z13uhreinstellenv+0x57c>
    3710:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3712:	f5 01       	movw	r30, r10
    3714:	61 91       	ld	r22, Z+
    3716:	5f 01       	movw	r10, r30
    3718:	28 e3       	ldi	r18, 0x38	; 56
    371a:	41 2f       	mov	r20, r17
    371c:	89 e3       	ldi	r24, 0x39	; 57
    371e:	94 e0       	ldi	r25, 0x04	; 4
    3720:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3724:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3726:	12 34       	cpi	r17, 0x42	; 66
    3728:	a1 f7       	brne	.-24     	; 0x3712 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    372a:	0f 2e       	mov	r0, r31
    372c:	f7 e0       	ldi	r31, 0x07	; 7
    372e:	9f 2e       	mov	r9, r31
    3730:	f0 2d       	mov	r31, r0
    3732:	ab c0       	rjmp	.+342    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    3734:	8d e2       	ldi	r24, 0x2D	; 45
    3736:	94 e0       	ldi	r25, 0x04	; 4
    3738:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN9Interface17ZahlenausTastaturEv>
    373c:	f6 01       	movw	r30, r12
    373e:	27 89       	ldd	r18, Z+23	; 0x17
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	82 0f       	add	r24, r18
    3744:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    3746:	82 33       	cpi	r24, 0x32	; 50
    3748:	08 f4       	brcc	.+2      	; 0x374c <_Z13uhreinstellenv+0x5c0>
    374a:	96 c0       	rjmp	.+300    	; 0x3878 <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    374c:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    374e:	8c e0       	ldi	r24, 0x0C	; 12
    3750:	e4 e2       	ldi	r30, 0x24	; 36
    3752:	f2 e0       	ldi	r31, 0x02	; 2
    3754:	d2 01       	movw	r26, r4
    3756:	01 90       	ld	r0, Z+
    3758:	0d 92       	st	X+, r0
    375a:	8a 95       	dec	r24
    375c:	e1 f7       	brne	.-8      	; 0x3756 <_Z13uhreinstellenv+0x5ca>
    375e:	2d 88       	ldd	r2, Y+21	; 0x15
    3760:	3e 88       	ldd	r3, Y+22	; 0x16
    3762:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    3764:	f1 01       	movw	r30, r2
    3766:	61 91       	ld	r22, Z+
    3768:	1f 01       	movw	r2, r30
    376a:	28 e3       	ldi	r18, 0x38	; 56
    376c:	41 2f       	mov	r20, r17
    376e:	89 e3       	ldi	r24, 0x39	; 57
    3770:	94 e0       	ldi	r25, 0x04	; 4
    3772:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3776:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    3778:	12 34       	cpi	r17, 0x42	; 66
    377a:	a1 f7       	brne	.-24     	; 0x3764 <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    377c:	0f 2e       	mov	r0, r31
    377e:	f7 e0       	ldi	r31, 0x07	; 7
    3780:	9f 2e       	mov	r9, r31
    3782:	f0 2d       	mov	r31, r0
    3784:	7b c0       	rjmp	.+246    	; 0x387c <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    3786:	f6 01       	movw	r30, r12
    3788:	17 89       	ldd	r17, Z+23	; 0x17
    378a:	13 70       	andi	r17, 0x03	; 3
    378c:	f9 f4       	brne	.+62     	; 0x37cc <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    378e:	84 89       	ldd	r24, Z+20	; 0x14
    3790:	8e 31       	cpi	r24, 0x1E	; 30
    3792:	f0 f1       	brcs	.+124    	; 0x3810 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    3794:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    3796:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    3798:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    379a:	8b e0       	ldi	r24, 0x0B	; 11
    379c:	ec e0       	ldi	r30, 0x0C	; 12
    379e:	f2 e0       	ldi	r31, 0x02	; 2
    37a0:	d2 01       	movw	r26, r4
    37a2:	01 90       	ld	r0, Z+
    37a4:	0d 92       	st	X+, r0
    37a6:	8a 95       	dec	r24
    37a8:	e1 f7       	brne	.-8      	; 0x37a2 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    37aa:	f5 01       	movw	r30, r10
    37ac:	61 91       	ld	r22, Z+
    37ae:	5f 01       	movw	r10, r30
    37b0:	28 e3       	ldi	r18, 0x38	; 56
    37b2:	41 2f       	mov	r20, r17
    37b4:	89 e3       	ldi	r24, 0x39	; 57
    37b6:	94 e0       	ldi	r25, 0x04	; 4
    37b8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    37bc:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    37be:	1c 33       	cpi	r17, 0x3C	; 60
    37c0:	a1 f7       	brne	.-24     	; 0x37aa <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    37c2:	0f 2e       	mov	r0, r31
    37c4:	f3 e0       	ldi	r31, 0x03	; 3
    37c6:	9f 2e       	mov	r9, r31
    37c8:	f0 2d       	mov	r31, r0
    37ca:	5f c0       	rjmp	.+190    	; 0x388a <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    37cc:	f6 01       	movw	r30, r12
    37ce:	84 89       	ldd	r24, Z+20	; 0x14
    37d0:	8d 31       	cpi	r24, 0x1D	; 29
    37d2:	f0 f0       	brcs	.+60     	; 0x3810 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    37d4:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    37d6:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    37d8:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    37da:	8b e0       	ldi	r24, 0x0B	; 11
    37dc:	ec e0       	ldi	r30, 0x0C	; 12
    37de:	f2 e0       	ldi	r31, 0x02	; 2
    37e0:	d2 01       	movw	r26, r4
    37e2:	01 90       	ld	r0, Z+
    37e4:	0d 92       	st	X+, r0
    37e6:	8a 95       	dec	r24
    37e8:	e1 f7       	brne	.-8      	; 0x37e2 <_Z13uhreinstellenv+0x656>
    37ea:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    37ec:	f5 01       	movw	r30, r10
    37ee:	61 91       	ld	r22, Z+
    37f0:	5f 01       	movw	r10, r30
    37f2:	28 e3       	ldi	r18, 0x38	; 56
    37f4:	41 2f       	mov	r20, r17
    37f6:	89 e3       	ldi	r24, 0x39	; 57
    37f8:	94 e0       	ldi	r25, 0x04	; 4
    37fa:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    37fe:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    3800:	1c 33       	cpi	r17, 0x3C	; 60
    3802:	a1 f7       	brne	.-24     	; 0x37ec <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    3804:	0f 2e       	mov	r0, r31
    3806:	f3 e0       	ldi	r31, 0x03	; 3
    3808:	9f 2e       	mov	r9, r31
    380a:	f0 2d       	mov	r31, r0
    380c:	3e c0       	rjmp	.+124    	; 0x388a <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    380e:	93 94       	inc	r9
			break;
		}
		pos++;
    3810:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    3812:	fa e0       	ldi	r31, 0x0A	; 10
    3814:	f9 15       	cp	r31, r9
    3816:	08 f0       	brcs	.+2      	; 0x381a <_Z13uhreinstellenv+0x68e>
    3818:	f6 cc       	rjmp	.-1556   	; 0x3206 <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    381a:	0a e3       	ldi	r16, 0x3A	; 58
    381c:	18 e0       	ldi	r17, 0x08	; 8
    381e:	f8 01       	movw	r30, r16
    3820:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    3822:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    3824:	61 89       	ldd	r22, Z+17	; 0x11
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    382e:	f8 01       	movw	r30, r16
    3830:	60 89       	ldd	r22, Z+16	; 0x10
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    383a:	f8 01       	movw	r30, r16
    383c:	64 89       	ldd	r22, Z+20	; 0x14
    383e:	82 e0       	ldi	r24, 0x02	; 2
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    3846:	f8 01       	movw	r30, r16
    3848:	66 89       	ldd	r22, Z+22	; 0x16
    384a:	83 e0       	ldi	r24, 0x03	; 3
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    3852:	f8 01       	movw	r30, r16
    3854:	67 89       	ldd	r22, Z+23	; 0x17
    3856:	84 e0       	ldi	r24, 0x04	; 4
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    385e:	89 e3       	ldi	r24, 0x39	; 57
    3860:	94 e0       	ldi	r25, 0x04	; 4
    3862:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    3866:	c8 01       	movw	r24, r16
    3868:	2d d3       	rcall	.+1626   	; 0x3ec4 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    386a:	c8 01       	movw	r24, r16
    386c:	f2 d2       	rcall	.+1508   	; 0x3e52 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    386e:	c8 01       	movw	r24, r16
    3870:	0a d4       	rcall	.+2068   	; 0x4086 <_ZN3RTC8RTCstartEv>
    3872:	0d c0       	rjmp	.+26     	; 0x388e <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    3874:	93 94       	inc	r9
    3876:	c7 cc       	rjmp	.-1650   	; 0x3206 <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    3878:	f6 01       	movw	r30, r12
    387a:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    387c:	f6 01       	movw	r30, r12
    387e:	86 89       	ldd	r24, Z+22	; 0x16
    3880:	82 30       	cpi	r24, 0x02	; 2
    3882:	c1 f7       	brne	.-16     	; 0x3874 <_Z13uhreinstellenv+0x6e8>
    3884:	80 cf       	rjmp	.-256    	; 0x3786 <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    3886:	f6 01       	movw	r30, r12
    3888:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    388a:	93 94       	inc	r9
    388c:	bc cc       	rjmp	.-1672   	; 0x3206 <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    388e:	66 96       	adiw	r28, 0x16	; 22
    3890:	0f b6       	in	r0, 0x3f	; 63
    3892:	f8 94       	cli
    3894:	de bf       	out	0x3e, r29	; 62
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	cd bf       	out	0x3d, r28	; 61
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	1f 91       	pop	r17
    38a0:	0f 91       	pop	r16
    38a2:	ff 90       	pop	r15
    38a4:	ef 90       	pop	r14
    38a6:	df 90       	pop	r13
    38a8:	cf 90       	pop	r12
    38aa:	bf 90       	pop	r11
    38ac:	af 90       	pop	r10
    38ae:	9f 90       	pop	r9
    38b0:	8f 90       	pop	r8
    38b2:	7f 90       	pop	r7
    38b4:	6f 90       	pop	r6
    38b6:	5f 90       	pop	r5
    38b8:	4f 90       	pop	r4
    38ba:	3f 90       	pop	r3
    38bc:	2f 90       	pop	r2
    38be:	08 95       	ret

000038c0 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    38c0:	cf 92       	push	r12
    38c2:	df 92       	push	r13
    38c4:	ef 92       	push	r14
    38c6:	ff 92       	push	r15
    38c8:	0f 93       	push	r16
    38ca:	1f 93       	push	r17
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    38d2:	8f 89       	ldd	r24, Y+23	; 0x17
    38d4:	98 8d       	ldd	r25, Y+24	; 0x18
    38d6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN7Display10clearFrameEv>
    38da:	10 e0       	ldi	r17, 0x00	; 0
    38dc:	e1 2c       	mov	r14, r1
    38de:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    38e0:	e9 8d       	ldd	r30, Y+25	; 0x19
    38e2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    38e4:	ee 0d       	add	r30, r14
    38e6:	ff 1d       	adc	r31, r15
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	41 2f       	mov	r20, r17
    38ec:	60 81       	ld	r22, Z
    38ee:	8f 89       	ldd	r24, Y+23	; 0x17
    38f0:	98 8d       	ldd	r25, Y+24	; 0x18
    38f2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    38f6:	2f ef       	ldi	r18, 0xFF	; 255
    38f8:	e2 1a       	sub	r14, r18
    38fa:	f2 0a       	sbc	r15, r18
    38fc:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    38fe:	10 33       	cpi	r17, 0x30	; 48
    3900:	79 f7       	brne	.-34     	; 0x38e0 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    3902:	0e 94 df 09 	call	0x13be	; 0x13be <_Z14Batteriestatusv>
    3906:	7e 01       	movw	r14, r28
    3908:	32 e0       	ldi	r19, 0x02	; 2
    390a:	e3 0e       	add	r14, r19
    390c:	f1 1c       	adc	r15, r1
    390e:	28 2f       	mov	r18, r24
    3910:	08 2e       	mov	r0, r24
    3912:	00 0c       	add	r0, r0
    3914:	33 0b       	sbc	r19, r19
    3916:	3f 93       	push	r19
    3918:	8f 93       	push	r24
    391a:	82 e3       	ldi	r24, 0x32	; 50
    391c:	91 e0       	ldi	r25, 0x01	; 1
    391e:	9f 93       	push	r25
    3920:	8f 93       	push	r24
    3922:	ff 92       	push	r15
    3924:	ef 92       	push	r14
    3926:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    392a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    392c:	15 e1       	ldi	r17, 0x15	; 21
    392e:	18 1b       	sub	r17, r24
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	15 31       	cpi	r17, 0x15	; 21
    393e:	08 f0       	brcs	.+2      	; 0x3942 <_ZN13einstellungen4drawEv+0x82>
    3940:	2f c1       	rjmp	.+606    	; 0x3ba0 <_ZN13einstellungen4drawEv+0x2e0>
    3942:	01 2f       	mov	r16, r17
    3944:	00 0f       	add	r16, r16
    3946:	01 0f       	add	r16, r17
    3948:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    394a:	8e 89       	ldd	r24, Y+22	; 0x16
    394c:	fe 01       	movw	r30, r28
    394e:	e1 0f       	add	r30, r17
    3950:	f1 1d       	adc	r31, r1
    3952:	e8 0f       	add	r30, r24
    3954:	f1 1d       	adc	r31, r1
    3956:	73 97       	sbiw	r30, 0x13	; 19
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	40 2f       	mov	r20, r16
    395c:	60 81       	ld	r22, Z
    395e:	8f 89       	ldd	r24, Y+23	; 0x17
    3960:	98 8d       	ldd	r25, Y+24	; 0x18
    3962:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    3966:	1f 5f       	subi	r17, 0xFF	; 255
    3968:	0a 5f       	subi	r16, 0xFA	; 250
    396a:	15 31       	cpi	r17, 0x15	; 21
    396c:	71 f7       	brne	.-36     	; 0x394a <_ZN13einstellungen4drawEv+0x8a>
    396e:	18 c1       	rjmp	.+560    	; 0x3ba0 <_ZN13einstellungen4drawEv+0x2e0>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    3970:	e9 8d       	ldd	r30, Y+25	; 0x19
    3972:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3974:	ec 0d       	add	r30, r12
    3976:	fd 1d       	adc	r31, r13
    3978:	28 e3       	ldi	r18, 0x38	; 56
    397a:	41 2f       	mov	r20, r17
    397c:	60 85       	ldd	r22, Z+8	; 0x08
    397e:	8f 89       	ldd	r24, Y+23	; 0x17
    3980:	98 8d       	ldd	r25, Y+24	; 0x18
    3982:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3986:	8f ef       	ldi	r24, 0xFF	; 255
    3988:	c8 1a       	sub	r12, r24
    398a:	d8 0a       	sbc	r13, r24
    398c:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    398e:	10 38       	cpi	r17, 0x80	; 128
    3990:	79 f7       	brne	.-34     	; 0x3970 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    3992:	8e a1       	ldd	r24, Y+38	; 0x26
    3994:	81 11       	cpse	r24, r1
    3996:	5d c0       	rjmp	.+186    	; 0x3a52 <_ZN13einstellungen4drawEv+0x192>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    3998:	80 e1       	ldi	r24, 0x10	; 16
    399a:	e0 e3       	ldi	r30, 0x30	; 48
    399c:	f2 e0       	ldi	r31, 0x02	; 2
    399e:	d7 01       	movw	r26, r14
    39a0:	01 90       	ld	r0, Z+
    39a2:	0d 92       	st	X+, r0
    39a4:	8a 95       	dec	r24
    39a6:	e1 f7       	brne	.-8      	; 0x39a0 <_ZN13einstellungen4drawEv+0xe0>
    39a8:	8f e0       	ldi	r24, 0x0F	; 15
    39aa:	8e 8b       	std	Y+22, r24	; 0x16
    39ac:	0c e0       	ldi	r16, 0x0C	; 12
    39ae:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    39b0:	fe 01       	movw	r30, r28
    39b2:	e1 0f       	add	r30, r17
    39b4:	f1 1d       	adc	r31, r1
    39b6:	20 e1       	ldi	r18, 0x10	; 16
    39b8:	40 2f       	mov	r20, r16
    39ba:	62 81       	ldd	r22, Z+2	; 0x02
    39bc:	8f 89       	ldd	r24, Y+23	; 0x17
    39be:	98 8d       	ldd	r25, Y+24	; 0x18
    39c0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    39c4:	1f 5f       	subi	r17, 0xFF	; 255
    39c6:	0a 5f       	subi	r16, 0xFA	; 250
    39c8:	8e 89       	ldd	r24, Y+22	; 0x16
    39ca:	18 17       	cp	r17, r24
    39cc:	88 f3       	brcs	.-30     	; 0x39b0 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    39ce:	8c e0       	ldi	r24, 0x0C	; 12
    39d0:	e0 e4       	ldi	r30, 0x40	; 64
    39d2:	f2 e0       	ldi	r31, 0x02	; 2
    39d4:	d7 01       	movw	r26, r14
    39d6:	01 90       	ld	r0, Z+
    39d8:	0d 92       	st	X+, r0
    39da:	8a 95       	dec	r24
    39dc:	e1 f7       	brne	.-8      	; 0x39d6 <_ZN13einstellungen4drawEv+0x116>
    39de:	8b e0       	ldi	r24, 0x0B	; 11
    39e0:	8e 8b       	std	Y+22, r24	; 0x16
    39e2:	0c e0       	ldi	r16, 0x0C	; 12
    39e4:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    39e6:	fe 01       	movw	r30, r28
    39e8:	e1 0f       	add	r30, r17
    39ea:	f1 1d       	adc	r31, r1
    39ec:	28 e1       	ldi	r18, 0x18	; 24
    39ee:	40 2f       	mov	r20, r16
    39f0:	62 81       	ldd	r22, Z+2	; 0x02
    39f2:	8f 89       	ldd	r24, Y+23	; 0x17
    39f4:	98 8d       	ldd	r25, Y+24	; 0x18
    39f6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    39fa:	1f 5f       	subi	r17, 0xFF	; 255
    39fc:	0a 5f       	subi	r16, 0xFA	; 250
    39fe:	8e 89       	ldd	r24, Y+22	; 0x16
    3a00:	18 17       	cp	r17, r24
    3a02:	88 f3       	brcs	.-30     	; 0x39e6 <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    3a04:	8f e0       	ldi	r24, 0x0F	; 15
    3a06:	ec e4       	ldi	r30, 0x4C	; 76
    3a08:	f2 e0       	ldi	r31, 0x02	; 2
    3a0a:	d7 01       	movw	r26, r14
    3a0c:	01 90       	ld	r0, Z+
    3a0e:	0d 92       	st	X+, r0
    3a10:	8a 95       	dec	r24
    3a12:	e1 f7       	brne	.-8      	; 0x3a0c <_ZN13einstellungen4drawEv+0x14c>
    3a14:	8e e0       	ldi	r24, 0x0E	; 14
    3a16:	8e 8b       	std	Y+22, r24	; 0x16
    3a18:	0c e0       	ldi	r16, 0x0C	; 12
    3a1a:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e1 0f       	add	r30, r17
    3a20:	f1 1d       	adc	r31, r1
    3a22:	20 e2       	ldi	r18, 0x20	; 32
    3a24:	40 2f       	mov	r20, r16
    3a26:	62 81       	ldd	r22, Z+2	; 0x02
    3a28:	8f 89       	ldd	r24, Y+23	; 0x17
    3a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a2c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3a30:	1f 5f       	subi	r17, 0xFF	; 255
    3a32:	0a 5f       	subi	r16, 0xFA	; 250
    3a34:	8e 89       	ldd	r24, Y+22	; 0x16
    3a36:	18 17       	cp	r17, r24
    3a38:	88 f3       	brcs	.-30     	; 0x3a1c <_ZN13einstellungen4drawEv+0x15c>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    3a3a:	2d a1       	ldd	r18, Y+37	; 0x25
    3a3c:	22 0f       	add	r18, r18
    3a3e:	22 0f       	add	r18, r18
    3a40:	22 0f       	add	r18, r18
    3a42:	20 5f       	subi	r18, 0xF0	; 240
    3a44:	40 e0       	ldi	r20, 0x00	; 0
    3a46:	6e e3       	ldi	r22, 0x3E	; 62
    3a48:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a4c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3a50:	a2 c0       	rjmp	.+324    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
		}
		else if (posy==0 && posx==1)
    3a52:	9d a1       	ldd	r25, Y+37	; 0x25
    3a54:	91 11       	cpse	r25, r1
    3a56:	06 c0       	rjmp	.+12     	; 0x3a64 <_ZN13einstellungen4drawEv+0x1a4>
    3a58:	81 30       	cpi	r24, 0x01	; 1
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <_ZN13einstellungen4drawEv+0x19e>
    3a5c:	9c c0       	rjmp	.+312    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    3a5e:	96 db       	rcall	.-2260   	; 0x318c <_Z13uhreinstellenv>
			posx=0;
    3a60:	1e a2       	std	Y+38, r1	; 0x26
    3a62:	99 c0       	rjmp	.+306    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
		}
		else if (posy==1 && posx==1)
    3a64:	91 30       	cpi	r25, 0x01	; 1
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <_ZN13einstellungen4drawEv+0x1aa>
    3a68:	60 c0       	rjmp	.+192    	; 0x3b2a <_ZN13einstellungen4drawEv+0x26a>
    3a6a:	81 30       	cpi	r24, 0x01	; 1
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <_ZN13einstellungen4drawEv+0x1b0>
    3a6e:	93 c0       	rjmp	.+294    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    3a70:	85 e1       	ldi	r24, 0x15	; 21
    3a72:	eb e5       	ldi	r30, 0x5B	; 91
    3a74:	f2 e0       	ldi	r31, 0x02	; 2
    3a76:	d7 01       	movw	r26, r14
    3a78:	01 90       	ld	r0, Z+
    3a7a:	0d 92       	st	X+, r0
    3a7c:	8a 95       	dec	r24
    3a7e:	e1 f7       	brne	.-8      	; 0x3a78 <_ZN13einstellungen4drawEv+0x1b8>
    3a80:	84 e1       	ldi	r24, 0x14	; 20
    3a82:	8e 8b       	std	Y+22, r24	; 0x16
    3a84:	00 e0       	ldi	r16, 0x00	; 0
    3a86:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e1 0f       	add	r30, r17
    3a8c:	f1 1d       	adc	r31, r1
    3a8e:	20 e1       	ldi	r18, 0x10	; 16
    3a90:	40 2f       	mov	r20, r16
    3a92:	62 81       	ldd	r22, Z+2	; 0x02
    3a94:	8f 89       	ldd	r24, Y+23	; 0x17
    3a96:	98 8d       	ldd	r25, Y+24	; 0x18
    3a98:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3a9c:	1f 5f       	subi	r17, 0xFF	; 255
    3a9e:	0a 5f       	subi	r16, 0xFA	; 250
    3aa0:	8e 89       	ldd	r24, Y+22	; 0x16
    3aa2:	18 17       	cp	r17, r24
    3aa4:	88 f3       	brcs	.-30     	; 0x3a88 <_ZN13einstellungen4drawEv+0x1c8>
			buffersize=sprintf(buffer,"* fuer start");
    3aa6:	8d e0       	ldi	r24, 0x0D	; 13
    3aa8:	e0 e7       	ldi	r30, 0x70	; 112
    3aaa:	f2 e0       	ldi	r31, 0x02	; 2
    3aac:	d7 01       	movw	r26, r14
    3aae:	01 90       	ld	r0, Z+
    3ab0:	0d 92       	st	X+, r0
    3ab2:	8a 95       	dec	r24
    3ab4:	e1 f7       	brne	.-8      	; 0x3aae <_ZN13einstellungen4drawEv+0x1ee>
    3ab6:	8c e0       	ldi	r24, 0x0C	; 12
    3ab8:	8e 8b       	std	Y+22, r24	; 0x16
    3aba:	00 e0       	ldi	r16, 0x00	; 0
    3abc:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e1 0f       	add	r30, r17
    3ac2:	f1 1d       	adc	r31, r1
    3ac4:	28 e1       	ldi	r18, 0x18	; 24
    3ac6:	40 2f       	mov	r20, r16
    3ac8:	62 81       	ldd	r22, Z+2	; 0x02
    3aca:	8f 89       	ldd	r24, Y+23	; 0x17
    3acc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ace:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3ad2:	1f 5f       	subi	r17, 0xFF	; 255
    3ad4:	0a 5f       	subi	r16, 0xFA	; 250
    3ad6:	8e 89       	ldd	r24, Y+22	; 0x16
    3ad8:	18 17       	cp	r17, r24
    3ada:	88 f3       	brcs	.-30     	; 0x3abe <_ZN13einstellungen4drawEv+0x1fe>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    3adc:	1f 92       	push	r1
    3ade:	85 e0       	ldi	r24, 0x05	; 5
    3ae0:	8f 93       	push	r24
    3ae2:	8d e7       	ldi	r24, 0x7D	; 125
    3ae4:	92 e0       	ldi	r25, 0x02	; 2
    3ae6:	9f 93       	push	r25
    3ae8:	8f 93       	push	r24
    3aea:	ff 92       	push	r15
    3aec:	ef 92       	push	r14
    3aee:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    3af2:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	88 23       	and	r24, r24
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <_ZN13einstellungen4drawEv+0x246>
    3b04:	48 c0       	rjmp	.+144    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
    3b06:	00 e0       	ldi	r16, 0x00	; 0
    3b08:	10 e0       	ldi	r17, 0x00	; 0
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e1 0f       	add	r30, r17
    3b0e:	f1 1d       	adc	r31, r1
    3b10:	28 e2       	ldi	r18, 0x28	; 40
    3b12:	40 2f       	mov	r20, r16
    3b14:	62 81       	ldd	r22, Z+2	; 0x02
    3b16:	8f 89       	ldd	r24, Y+23	; 0x17
    3b18:	98 8d       	ldd	r25, Y+24	; 0x18
    3b1a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
    3b1e:	1f 5f       	subi	r17, 0xFF	; 255
    3b20:	0a 5f       	subi	r16, 0xFA	; 250
    3b22:	8e 89       	ldd	r24, Y+22	; 0x16
    3b24:	18 17       	cp	r17, r24
    3b26:	88 f3       	brcs	.-30     	; 0x3b0a <_ZN13einstellungen4drawEv+0x24a>
    3b28:	36 c0       	rjmp	.+108    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    3b2a:	92 30       	cpi	r25, 0x02	; 2
    3b2c:	a1 f5       	brne	.+104    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
    3b2e:	81 30       	cpi	r24, 0x01	; 1
    3b30:	91 f5       	brne	.+100    	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    3b32:	80 e4       	ldi	r24, 0x40	; 64
    3b34:	8f 93       	push	r24
    3b36:	81 e4       	ldi	r24, 0x41	; 65
    3b38:	8f 93       	push	r24
    3b3a:	87 e4       	ldi	r24, 0x47	; 71
    3b3c:	8f 93       	push	r24
    3b3e:	8e ea       	ldi	r24, 0xAE	; 174
    3b40:	8f 93       	push	r24
    3b42:	84 e2       	ldi	r24, 0x24	; 36
    3b44:	91 e0       	ldi	r25, 0x01	; 1
    3b46:	9f 93       	push	r25
    3b48:	8f 93       	push	r24
    3b4a:	ff 92       	push	r15
    3b4c:	ef 92       	push	r14
    3b4e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sprintf>
    3b52:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    3b54:	2d b7       	in	r18, 0x3d	; 61
    3b56:	3e b7       	in	r19, 0x3e	; 62
    3b58:	28 5f       	subi	r18, 0xF8	; 248
    3b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	3e bf       	out	0x3e, r19	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	2d bf       	out	0x3d, r18	; 61
    3b66:	88 23       	and	r24, r24
    3b68:	b1 f0       	breq	.+44     	; 0x3b96 <_ZN13einstellungen4drawEv+0x2d6>
    3b6a:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    3b6c:	21 2f       	mov	r18, r17
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	c9 01       	movw	r24, r18
    3b72:	02 96       	adiw	r24, 0x02	; 2
    3b74:	48 2f       	mov	r20, r24
    3b76:	44 0f       	add	r20, r20
    3b78:	48 0f       	add	r20, r24
    3b7a:	44 0f       	add	r20, r20
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e2 0f       	add	r30, r18
    3b80:	f3 1f       	adc	r31, r19
    3b82:	2c e1       	ldi	r18, 0x1C	; 28
    3b84:	62 81       	ldd	r22, Z+2	; 0x02
    3b86:	8f 89       	ldd	r24, Y+23	; 0x17
    3b88:	98 8d       	ldd	r25, Y+24	; 0x18
    3b8a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    3b8e:	1f 5f       	subi	r17, 0xFF	; 255
    3b90:	8e 89       	ldd	r24, Y+22	; 0x16
    3b92:	18 17       	cp	r17, r24
    3b94:	58 f3       	brcs	.-42     	; 0x3b6c <_ZN13einstellungen4drawEv+0x2ac>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    3b96:	8f 89       	ldd	r24, Y+23	; 0x17
    3b98:	98 8d       	ldd	r25, Y+24	; 0x18
    3b9a:	0e 94 b3 03 	call	0x766	; 0x766 <_ZN7Display9sendFrameEv>
    3b9e:	04 c0       	rjmp	.+8      	; 0x3ba8 <_ZN13einstellungen4drawEv+0x2e8>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    3ba0:	10 e5       	ldi	r17, 0x50	; 80
    3ba2:	c1 2c       	mov	r12, r1
    3ba4:	d1 2c       	mov	r13, r1
    3ba6:	e4 ce       	rjmp	.-568    	; 0x3970 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	ef 90       	pop	r14
    3bb4:	df 90       	pop	r13
    3bb6:	cf 90       	pop	r12
    3bb8:	08 95       	ret

00003bba <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    3bba:	8a e3       	ldi	r24, 0x3A	; 58
    3bbc:	98 e0       	ldi	r25, 0x08	; 8
    3bbe:	bb d1       	rcall	.+886    	; 0x3f36 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    3bc0:	89 e3       	ldi	r24, 0x39	; 57
    3bc2:	94 e0       	ldi	r25, 0x04	; 4
    3bc4:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    3bc8:	8d e2       	ldi	r24, 0x2D	; 45
    3bca:	94 e0       	ldi	r25, 0x04	; 4
    3bcc:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN9InterfaceC1Ev>

#include "SOUND.h"
SOUND Lautsprecher;
    3bd0:	8b e2       	ldi	r24, 0x2B	; 43
    3bd2:	94 e0       	ldi	r25, 0x04	; 4
    3bd4:	a2 d2       	rcall	.+1348   	; 0x411a <_ZN5SOUNDC1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;
    3bd6:	82 e4       	ldi	r24, 0x42	; 66
    3bd8:	93 e0       	ldi	r25, 0x03	; 3
    3bda:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN7LSM303DC1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    3bde:	41 e0       	ldi	r20, 0x01	; 1
    3be0:	62 e4       	ldi	r22, 0x42	; 66
    3be2:	8c e3       	ldi	r24, 0x3C	; 60
    3be4:	93 e0       	ldi	r25, 0x03	; 3
    3be6:	2f d0       	rcall	.+94     	; 0x3c46 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    3be8:	42 e0       	ldi	r20, 0x02	; 2
    3bea:	62 e4       	ldi	r22, 0x42	; 66
    3bec:	8a e3       	ldi	r24, 0x3A	; 58
    3bee:	93 e0       	ldi	r25, 0x03	; 3
    3bf0:	2a d0       	rcall	.+84     	; 0x3c46 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    3bf2:	47 e0       	ldi	r20, 0x07	; 7
    3bf4:	64 e4       	ldi	r22, 0x44	; 68
    3bf6:	88 e3       	ldi	r24, 0x38	; 56
    3bf8:	93 e0       	ldi	r25, 0x03	; 3
    3bfa:	25 d0       	rcall	.+74     	; 0x3c46 <_ZN6OutputC1Ehh>
Output Sound('B',PORTB3);
    3bfc:	43 e0       	ldi	r20, 0x03	; 3
    3bfe:	62 e4       	ldi	r22, 0x42	; 66
    3c00:	86 e3       	ldi	r24, 0x36	; 54
    3c02:	93 e0       	ldi	r25, 0x03	; 3
    3c04:	20 c0       	rjmp	.+64     	; 0x3c46 <_ZN6OutputC1Ehh>
    3c06:	08 95       	ret

00003c08 <_GLOBAL__sub_D__Znwj>:
    3c08:	86 e3       	ldi	r24, 0x36	; 54
    3c0a:	93 e0       	ldi	r25, 0x03	; 3
    3c0c:	56 d0       	rcall	.+172    	; 0x3cba <_ZN6OutputD1Ev>
#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
    3c0e:	88 e3       	ldi	r24, 0x38	; 56
    3c10:	93 e0       	ldi	r25, 0x03	; 3
    3c12:	53 d0       	rcall	.+166    	; 0x3cba <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    3c14:	8a e3       	ldi	r24, 0x3A	; 58
    3c16:	93 e0       	ldi	r25, 0x03	; 3
    3c18:	50 d0       	rcall	.+160    	; 0x3cba <_ZN6OutputD1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    3c1a:	8c e3       	ldi	r24, 0x3C	; 60
    3c1c:	93 e0       	ldi	r25, 0x03	; 3
    3c1e:	4d d0       	rcall	.+154    	; 0x3cba <_ZN6OutputD1Ev>

#include "SOUND.h"
SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    3c20:	82 e4       	ldi	r24, 0x42	; 66
    3c22:	93 e0       	ldi	r25, 0x03	; 3
    3c24:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7LSM303DD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "SOUND.h"
SOUND Lautsprecher;
    3c28:	8b e2       	ldi	r24, 0x2B	; 43
    3c2a:	94 e0       	ldi	r25, 0x04	; 4
    3c2c:	4c d2       	rcall	.+1176   	; 0x40c6 <_ZN5SOUNDD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    3c2e:	8d e2       	ldi	r24, 0x2D	; 45
    3c30:	94 e0       	ldi	r25, 0x04	; 4
    3c32:	0e 94 be 07 	call	0xf7c	; 0xf7c <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    3c36:	89 e3       	ldi	r24, 0x39	; 57
    3c38:	94 e0       	ldi	r25, 0x04	; 4
    3c3a:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    3c3e:	8a e3       	ldi	r24, 0x3A	; 58
    3c40:	98 e0       	ldi	r25, 0x08	; 8
    3c42:	f5 c0       	rjmp	.+490    	; 0x3e2e <_ZN3RTCD1Ev>
    3c44:	08 95       	ret

00003c46 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    3c46:	fc 01       	movw	r30, r24
    3c48:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    3c4a:	60 83       	st	Z, r22
	switch (Portpraefix)
    3c4c:	62 34       	cpi	r22, 0x42	; 66
    3c4e:	a1 f0       	breq	.+40     	; 0x3c78 <_ZN6OutputC1Ehh+0x32>
    3c50:	18 f4       	brcc	.+6      	; 0x3c58 <_ZN6OutputC1Ehh+0x12>
    3c52:	61 34       	cpi	r22, 0x41	; 65
    3c54:	31 f0       	breq	.+12     	; 0x3c62 <_ZN6OutputC1Ehh+0x1c>
    3c56:	08 95       	ret
    3c58:	63 34       	cpi	r22, 0x43	; 67
    3c5a:	c9 f0       	breq	.+50     	; 0x3c8e <_ZN6OutputC1Ehh+0x48>
    3c5c:	64 34       	cpi	r22, 0x44	; 68
    3c5e:	11 f1       	breq	.+68     	; 0x3ca4 <_ZN6OutputC1Ehh+0x5e>
    3c60:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    3c62:	21 b1       	in	r18, 0x01	; 1
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	02 c0       	rjmp	.+4      	; 0x3c6e <_ZN6OutputC1Ehh+0x28>
    3c6a:	88 0f       	add	r24, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	4a 95       	dec	r20
    3c70:	e2 f7       	brpl	.-8      	; 0x3c6a <_ZN6OutputC1Ehh+0x24>
    3c72:	82 2b       	or	r24, r18
    3c74:	81 b9       	out	0x01, r24	; 1
			break;
    3c76:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    3c78:	24 b1       	in	r18, 0x04	; 4
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	02 c0       	rjmp	.+4      	; 0x3c84 <_ZN6OutputC1Ehh+0x3e>
    3c80:	88 0f       	add	r24, r24
    3c82:	99 1f       	adc	r25, r25
    3c84:	4a 95       	dec	r20
    3c86:	e2 f7       	brpl	.-8      	; 0x3c80 <_ZN6OutputC1Ehh+0x3a>
    3c88:	82 2b       	or	r24, r18
    3c8a:	84 b9       	out	0x04, r24	; 4
			break;
    3c8c:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    3c8e:	27 b1       	in	r18, 0x07	; 7
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	02 c0       	rjmp	.+4      	; 0x3c9a <_ZN6OutputC1Ehh+0x54>
    3c96:	88 0f       	add	r24, r24
    3c98:	99 1f       	adc	r25, r25
    3c9a:	4a 95       	dec	r20
    3c9c:	e2 f7       	brpl	.-8      	; 0x3c96 <_ZN6OutputC1Ehh+0x50>
    3c9e:	82 2b       	or	r24, r18
    3ca0:	87 b9       	out	0x07, r24	; 7
			break;
    3ca2:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    3ca4:	2a b1       	in	r18, 0x0a	; 10
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <_ZN6OutputC1Ehh+0x6a>
    3cac:	88 0f       	add	r24, r24
    3cae:	99 1f       	adc	r25, r25
    3cb0:	4a 95       	dec	r20
    3cb2:	e2 f7       	brpl	.-8      	; 0x3cac <_ZN6OutputC1Ehh+0x66>
    3cb4:	82 2b       	or	r24, r18
    3cb6:	8a b9       	out	0x0a, r24	; 10
    3cb8:	08 95       	ret

00003cba <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    3cba:	08 95       	ret

00003cbc <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    3cbc:	fc 01       	movw	r30, r24
	switch (Port)
    3cbe:	90 81       	ld	r25, Z
    3cc0:	92 34       	cpi	r25, 0x42	; 66
    3cc2:	a9 f0       	breq	.+42     	; 0x3cee <_ZN6Output2onEv+0x32>
    3cc4:	18 f4       	brcc	.+6      	; 0x3ccc <_ZN6Output2onEv+0x10>
    3cc6:	91 34       	cpi	r25, 0x41	; 65
    3cc8:	31 f0       	breq	.+12     	; 0x3cd6 <_ZN6Output2onEv+0x1a>
    3cca:	08 95       	ret
    3ccc:	93 34       	cpi	r25, 0x43	; 67
    3cce:	d9 f0       	breq	.+54     	; 0x3d06 <_ZN6Output2onEv+0x4a>
    3cd0:	94 34       	cpi	r25, 0x44	; 68
    3cd2:	29 f1       	breq	.+74     	; 0x3d1e <_ZN6Output2onEv+0x62>
    3cd4:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    3cd6:	22 b1       	in	r18, 0x02	; 2
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	01 80       	ldd	r0, Z+1	; 0x01
    3cde:	02 c0       	rjmp	.+4      	; 0x3ce4 <_ZN6Output2onEv+0x28>
    3ce0:	88 0f       	add	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	0a 94       	dec	r0
    3ce6:	e2 f7       	brpl	.-8      	; 0x3ce0 <_ZN6Output2onEv+0x24>
    3ce8:	82 2b       	or	r24, r18
    3cea:	82 b9       	out	0x02, r24	; 2
			break;
    3cec:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    3cee:	25 b1       	in	r18, 0x05	; 5
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	01 80       	ldd	r0, Z+1	; 0x01
    3cf6:	02 c0       	rjmp	.+4      	; 0x3cfc <_ZN6Output2onEv+0x40>
    3cf8:	88 0f       	add	r24, r24
    3cfa:	99 1f       	adc	r25, r25
    3cfc:	0a 94       	dec	r0
    3cfe:	e2 f7       	brpl	.-8      	; 0x3cf8 <_ZN6Output2onEv+0x3c>
    3d00:	82 2b       	or	r24, r18
    3d02:	85 b9       	out	0x05, r24	; 5
			break;
    3d04:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    3d06:	28 b1       	in	r18, 0x08	; 8
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	01 80       	ldd	r0, Z+1	; 0x01
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <_ZN6Output2onEv+0x58>
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	0a 94       	dec	r0
    3d16:	e2 f7       	brpl	.-8      	; 0x3d10 <_ZN6Output2onEv+0x54>
    3d18:	82 2b       	or	r24, r18
    3d1a:	88 b9       	out	0x08, r24	; 8
			break;
    3d1c:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    3d1e:	2b b1       	in	r18, 0x0b	; 11
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	01 80       	ldd	r0, Z+1	; 0x01
    3d26:	02 c0       	rjmp	.+4      	; 0x3d2c <_ZN6Output2onEv+0x70>
    3d28:	88 0f       	add	r24, r24
    3d2a:	99 1f       	adc	r25, r25
    3d2c:	0a 94       	dec	r0
    3d2e:	e2 f7       	brpl	.-8      	; 0x3d28 <_ZN6Output2onEv+0x6c>
    3d30:	82 2b       	or	r24, r18
    3d32:	8b b9       	out	0x0b, r24	; 11
    3d34:	08 95       	ret

00003d36 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    3d36:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    3d38:	90 81       	ld	r25, Z
    3d3a:	92 34       	cpi	r25, 0x42	; 66
    3d3c:	a1 f0       	breq	.+40     	; 0x3d66 <_ZN6Output4isonEv+0x30>
    3d3e:	18 f4       	brcc	.+6      	; 0x3d46 <_ZN6Output4isonEv+0x10>
    3d40:	91 34       	cpi	r25, 0x41	; 65
    3d42:	31 f0       	breq	.+12     	; 0x3d50 <_ZN6Output4isonEv+0x1a>
    3d44:	31 c0       	rjmp	.+98     	; 0x3da8 <_ZN6Output4isonEv+0x72>
    3d46:	93 34       	cpi	r25, 0x43	; 67
    3d48:	c9 f0       	breq	.+50     	; 0x3d7c <_ZN6Output4isonEv+0x46>
    3d4a:	94 34       	cpi	r25, 0x44	; 68
    3d4c:	11 f1       	breq	.+68     	; 0x3d92 <_ZN6Output4isonEv+0x5c>
    3d4e:	2c c0       	rjmp	.+88     	; 0x3da8 <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    3d50:	22 b1       	in	r18, 0x02	; 2
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	c9 01       	movw	r24, r18
    3d56:	01 80       	ldd	r0, Z+1	; 0x01
    3d58:	02 c0       	rjmp	.+4      	; 0x3d5e <_ZN6Output4isonEv+0x28>
    3d5a:	95 95       	asr	r25
    3d5c:	87 95       	ror	r24
    3d5e:	0a 94       	dec	r0
    3d60:	e2 f7       	brpl	.-8      	; 0x3d5a <_ZN6Output4isonEv+0x24>
    3d62:	81 70       	andi	r24, 0x01	; 1
    3d64:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    3d66:	25 b1       	in	r18, 0x05	; 5
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	c9 01       	movw	r24, r18
    3d6c:	01 80       	ldd	r0, Z+1	; 0x01
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <_ZN6Output4isonEv+0x3e>
    3d70:	95 95       	asr	r25
    3d72:	87 95       	ror	r24
    3d74:	0a 94       	dec	r0
    3d76:	e2 f7       	brpl	.-8      	; 0x3d70 <_ZN6Output4isonEv+0x3a>
    3d78:	81 70       	andi	r24, 0x01	; 1
    3d7a:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    3d7c:	28 b1       	in	r18, 0x08	; 8
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	c9 01       	movw	r24, r18
    3d82:	01 80       	ldd	r0, Z+1	; 0x01
    3d84:	02 c0       	rjmp	.+4      	; 0x3d8a <_ZN6Output4isonEv+0x54>
    3d86:	95 95       	asr	r25
    3d88:	87 95       	ror	r24
    3d8a:	0a 94       	dec	r0
    3d8c:	e2 f7       	brpl	.-8      	; 0x3d86 <_ZN6Output4isonEv+0x50>
    3d8e:	81 70       	andi	r24, 0x01	; 1
    3d90:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    3d92:	2b b1       	in	r18, 0x0b	; 11
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	c9 01       	movw	r24, r18
    3d98:	01 80       	ldd	r0, Z+1	; 0x01
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <_ZN6Output4isonEv+0x6a>
    3d9c:	95 95       	asr	r25
    3d9e:	87 95       	ror	r24
    3da0:	0a 94       	dec	r0
    3da2:	e2 f7       	brpl	.-8      	; 0x3d9c <_ZN6Output4isonEv+0x66>
    3da4:	81 70       	andi	r24, 0x01	; 1
    3da6:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    3da8:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    3daa:	08 95       	ret

00003dac <_ZN6Output3offEv>:

void Output::off(){
    3dac:	fc 01       	movw	r30, r24
	switch (Port)
    3dae:	90 81       	ld	r25, Z
    3db0:	92 34       	cpi	r25, 0x42	; 66
    3db2:	b1 f0       	breq	.+44     	; 0x3de0 <_ZN6Output3offEv+0x34>
    3db4:	18 f4       	brcc	.+6      	; 0x3dbc <_ZN6Output3offEv+0x10>
    3db6:	91 34       	cpi	r25, 0x41	; 65
    3db8:	31 f0       	breq	.+12     	; 0x3dc6 <_ZN6Output3offEv+0x1a>
    3dba:	08 95       	ret
    3dbc:	93 34       	cpi	r25, 0x43	; 67
    3dbe:	e9 f0       	breq	.+58     	; 0x3dfa <_ZN6Output3offEv+0x4e>
    3dc0:	94 34       	cpi	r25, 0x44	; 68
    3dc2:	41 f1       	breq	.+80     	; 0x3e14 <_ZN6Output3offEv+0x68>
    3dc4:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    3dc6:	22 b1       	in	r18, 0x02	; 2
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	01 80       	ldd	r0, Z+1	; 0x01
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <_ZN6Output3offEv+0x28>
    3dd0:	88 0f       	add	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	0a 94       	dec	r0
    3dd6:	e2 f7       	brpl	.-8      	; 0x3dd0 <_ZN6Output3offEv+0x24>
    3dd8:	80 95       	com	r24
    3dda:	82 23       	and	r24, r18
    3ddc:	82 b9       	out	0x02, r24	; 2
			break;
    3dde:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    3de0:	25 b1       	in	r18, 0x05	; 5
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	01 80       	ldd	r0, Z+1	; 0x01
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <_ZN6Output3offEv+0x42>
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	0a 94       	dec	r0
    3df0:	e2 f7       	brpl	.-8      	; 0x3dea <_ZN6Output3offEv+0x3e>
    3df2:	80 95       	com	r24
    3df4:	82 23       	and	r24, r18
    3df6:	85 b9       	out	0x05, r24	; 5
			break;
    3df8:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    3dfa:	28 b1       	in	r18, 0x08	; 8
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	01 80       	ldd	r0, Z+1	; 0x01
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <_ZN6Output3offEv+0x5c>
    3e04:	88 0f       	add	r24, r24
    3e06:	99 1f       	adc	r25, r25
    3e08:	0a 94       	dec	r0
    3e0a:	e2 f7       	brpl	.-8      	; 0x3e04 <_ZN6Output3offEv+0x58>
    3e0c:	80 95       	com	r24
    3e0e:	82 23       	and	r24, r18
    3e10:	88 b9       	out	0x08, r24	; 8
			break;
    3e12:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    3e14:	2b b1       	in	r18, 0x0b	; 11
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	01 80       	ldd	r0, Z+1	; 0x01
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <_ZN6Output3offEv+0x76>
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	0a 94       	dec	r0
    3e24:	e2 f7       	brpl	.-8      	; 0x3e1e <_ZN6Output3offEv+0x72>
    3e26:	80 95       	com	r24
    3e28:	82 23       	and	r24, r18
    3e2a:	8b b9       	out	0x0b, r24	; 11
    3e2c:	08 95       	ret

00003e2e <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    3e2e:	08 95       	ret

00003e30 <_ZN3RTC6WeckerEv>:
    3e30:	fc 01       	movw	r30, r24
    3e32:	80 8d       	ldd	r24, Z+24	; 0x18
    3e34:	83 ff       	sbrs	r24, 3
    3e36:	0c c0       	rjmp	.+24     	; 0x3e50 <_ZN3RTC6WeckerEv+0x20>
    3e38:	84 fd       	sbrc	r24, 4
    3e3a:	0a c0       	rjmp	.+20     	; 0x3e50 <_ZN3RTC6WeckerEv+0x20>
    3e3c:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e3e:	90 89       	ldd	r25, Z+16	; 0x10
    3e40:	29 13       	cpse	r18, r25
    3e42:	06 c0       	rjmp	.+12     	; 0x3e50 <_ZN3RTC6WeckerEv+0x20>
    3e44:	21 8d       	ldd	r18, Z+25	; 0x19
    3e46:	91 89       	ldd	r25, Z+17	; 0x11
    3e48:	29 13       	cpse	r18, r25
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <_ZN3RTC6WeckerEv+0x20>
    3e4c:	80 61       	ori	r24, 0x10	; 16
    3e4e:	80 8f       	std	Z+24, r24	; 0x18
    3e50:	08 95       	ret

00003e52 <_ZN3RTC14ausgabezeitneuEv>:
    3e52:	fc 01       	movw	r30, r24
    3e54:	20 89       	ldd	r18, Z+16	; 0x10
    3e56:	9d ec       	ldi	r25, 0xCD	; 205
    3e58:	29 9f       	mul	r18, r25
    3e5a:	81 2d       	mov	r24, r1
    3e5c:	11 24       	eor	r1, r1
    3e5e:	86 95       	lsr	r24
    3e60:	86 95       	lsr	r24
    3e62:	86 95       	lsr	r24
    3e64:	30 e3       	ldi	r19, 0x30	; 48
    3e66:	38 0f       	add	r19, r24
    3e68:	30 83       	st	Z, r19
    3e6a:	88 0f       	add	r24, r24
    3e6c:	38 2f       	mov	r19, r24
    3e6e:	33 0f       	add	r19, r19
    3e70:	33 0f       	add	r19, r19
    3e72:	83 0f       	add	r24, r19
    3e74:	28 1b       	sub	r18, r24
    3e76:	20 5d       	subi	r18, 0xD0	; 208
    3e78:	21 83       	std	Z+1, r18	; 0x01
    3e7a:	21 89       	ldd	r18, Z+17	; 0x11
    3e7c:	29 9f       	mul	r18, r25
    3e7e:	81 2d       	mov	r24, r1
    3e80:	11 24       	eor	r1, r1
    3e82:	86 95       	lsr	r24
    3e84:	86 95       	lsr	r24
    3e86:	86 95       	lsr	r24
    3e88:	30 e3       	ldi	r19, 0x30	; 48
    3e8a:	38 0f       	add	r19, r24
    3e8c:	33 83       	std	Z+3, r19	; 0x03
    3e8e:	88 0f       	add	r24, r24
    3e90:	38 2f       	mov	r19, r24
    3e92:	33 0f       	add	r19, r19
    3e94:	33 0f       	add	r19, r19
    3e96:	83 0f       	add	r24, r19
    3e98:	28 1b       	sub	r18, r24
    3e9a:	20 5d       	subi	r18, 0xD0	; 208
    3e9c:	24 83       	std	Z+4, r18	; 0x04
    3e9e:	82 89       	ldd	r24, Z+18	; 0x12
    3ea0:	89 9f       	mul	r24, r25
    3ea2:	91 2d       	mov	r25, r1
    3ea4:	11 24       	eor	r1, r1
    3ea6:	96 95       	lsr	r25
    3ea8:	96 95       	lsr	r25
    3eaa:	96 95       	lsr	r25
    3eac:	20 e3       	ldi	r18, 0x30	; 48
    3eae:	29 0f       	add	r18, r25
    3eb0:	26 83       	std	Z+6, r18	; 0x06
    3eb2:	99 0f       	add	r25, r25
    3eb4:	29 2f       	mov	r18, r25
    3eb6:	22 0f       	add	r18, r18
    3eb8:	22 0f       	add	r18, r18
    3eba:	92 0f       	add	r25, r18
    3ebc:	89 1b       	sub	r24, r25
    3ebe:	80 5d       	subi	r24, 0xD0	; 208
    3ec0:	87 83       	std	Z+7, r24	; 0x07
    3ec2:	08 95       	ret

00003ec4 <_ZN3RTC15ausgabedatumneuEv>:
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	24 89       	ldd	r18, Z+20	; 0x14
    3ec8:	9d ec       	ldi	r25, 0xCD	; 205
    3eca:	29 9f       	mul	r18, r25
    3ecc:	81 2d       	mov	r24, r1
    3ece:	11 24       	eor	r1, r1
    3ed0:	86 95       	lsr	r24
    3ed2:	86 95       	lsr	r24
    3ed4:	86 95       	lsr	r24
    3ed6:	30 e3       	ldi	r19, 0x30	; 48
    3ed8:	38 0f       	add	r19, r24
    3eda:	30 87       	std	Z+8, r19	; 0x08
    3edc:	88 0f       	add	r24, r24
    3ede:	38 2f       	mov	r19, r24
    3ee0:	33 0f       	add	r19, r19
    3ee2:	33 0f       	add	r19, r19
    3ee4:	83 0f       	add	r24, r19
    3ee6:	28 1b       	sub	r18, r24
    3ee8:	20 5d       	subi	r18, 0xD0	; 208
    3eea:	21 87       	std	Z+9, r18	; 0x09
    3eec:	26 89       	ldd	r18, Z+22	; 0x16
    3eee:	29 9f       	mul	r18, r25
    3ef0:	81 2d       	mov	r24, r1
    3ef2:	11 24       	eor	r1, r1
    3ef4:	86 95       	lsr	r24
    3ef6:	86 95       	lsr	r24
    3ef8:	86 95       	lsr	r24
    3efa:	30 e3       	ldi	r19, 0x30	; 48
    3efc:	38 0f       	add	r19, r24
    3efe:	33 87       	std	Z+11, r19	; 0x0b
    3f00:	88 0f       	add	r24, r24
    3f02:	38 2f       	mov	r19, r24
    3f04:	33 0f       	add	r19, r19
    3f06:	33 0f       	add	r19, r19
    3f08:	83 0f       	add	r24, r19
    3f0a:	28 1b       	sub	r18, r24
    3f0c:	20 5d       	subi	r18, 0xD0	; 208
    3f0e:	24 87       	std	Z+12, r18	; 0x0c
    3f10:	87 89       	ldd	r24, Z+23	; 0x17
    3f12:	89 9f       	mul	r24, r25
    3f14:	91 2d       	mov	r25, r1
    3f16:	11 24       	eor	r1, r1
    3f18:	96 95       	lsr	r25
    3f1a:	96 95       	lsr	r25
    3f1c:	96 95       	lsr	r25
    3f1e:	20 e3       	ldi	r18, 0x30	; 48
    3f20:	29 0f       	add	r18, r25
    3f22:	26 87       	std	Z+14, r18	; 0x0e
    3f24:	99 0f       	add	r25, r25
    3f26:	29 2f       	mov	r18, r25
    3f28:	22 0f       	add	r18, r18
    3f2a:	22 0f       	add	r18, r18
    3f2c:	92 0f       	add	r25, r18
    3f2e:	89 1b       	sub	r24, r25
    3f30:	80 5d       	subi	r24, 0xD0	; 208
    3f32:	87 87       	std	Z+15, r24	; 0x0f
    3f34:	08 95       	ret

00003f36 <_ZN3RTCC1Ev>:
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	ec 01       	movw	r28, r24
    3f3c:	1a 8a       	std	Y+18, r1	; 0x12
    3f3e:	1b 8a       	std	Y+19, r1	; 0x13
    3f40:	19 8a       	std	Y+17, r1	; 0x11
    3f42:	18 8a       	std	Y+16, r1	; 0x10
    3f44:	1c 8a       	std	Y+20, r1	; 0x14
    3f46:	1e 8a       	std	Y+22, r1	; 0x16
    3f48:	1f 8a       	std	Y+23, r1	; 0x17
    3f4a:	1d 8a       	std	Y+21, r1	; 0x15
    3f4c:	88 e2       	ldi	r24, 0x28	; 40
    3f4e:	89 8f       	std	Y+25, r24	; 0x19
    3f50:	8a e0       	ldi	r24, 0x0A	; 10
    3f52:	8a 8f       	std	Y+26, r24	; 0x1a
    3f54:	1c 8e       	std	Y+28, r1	; 0x1c
    3f56:	1b 8e       	std	Y+27, r1	; 0x1b
    3f58:	1e 8e       	std	Y+30, r1	; 0x1e
    3f5a:	1d 8e       	std	Y+29, r1	; 0x1d
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	ce 01       	movw	r24, r28
    3f60:	08 96       	adiw	r24, 0x08	; 8
    3f62:	dc 01       	movw	r26, r24
    3f64:	11 92       	st	Z+, r1
    3f66:	1d 92       	st	X+, r1
    3f68:	e8 17       	cp	r30, r24
    3f6a:	f9 07       	cpc	r31, r25
    3f6c:	d9 f7       	brne	.-10     	; 0x3f64 <_ZN3RTCC1Ev+0x2e>
    3f6e:	8a e3       	ldi	r24, 0x3A	; 58
    3f70:	8a 83       	std	Y+2, r24	; 0x02
    3f72:	8d 83       	std	Y+5, r24	; 0x05
    3f74:	8e e2       	ldi	r24, 0x2E	; 46
    3f76:	8a 87       	std	Y+10, r24	; 0x0a
    3f78:	8d 87       	std	Y+13, r24	; 0x0d
    3f7a:	ce 01       	movw	r24, r28
    3f7c:	6a df       	rcall	.-300    	; 0x3e52 <_ZN3RTC14ausgabezeitneuEv>
    3f7e:	ce 01       	movw	r24, r28
    3f80:	a1 df       	rcall	.-190    	; 0x3ec4 <_ZN3RTC15ausgabedatumneuEv>
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	08 95       	ret

00003f88 <_ZN3RTC8kalenderEv>:
    3f88:	fc 01       	movw	r30, r24
    3f8a:	26 89       	ldd	r18, Z+22	; 0x16
    3f8c:	32 2f       	mov	r19, r18
    3f8e:	3d 7f       	andi	r19, 0xFD	; 253
    3f90:	34 30       	cpi	r19, 0x04	; 4
    3f92:	11 f0       	breq	.+4      	; 0x3f98 <_ZN3RTC8kalenderEv+0x10>
    3f94:	39 30       	cpi	r19, 0x09	; 9
    3f96:	91 f4       	brne	.+36     	; 0x3fbc <_ZN3RTC8kalenderEv+0x34>
    3f98:	fc 01       	movw	r30, r24
    3f9a:	34 89       	ldd	r19, Z+20	; 0x14
    3f9c:	3f 31       	cpi	r19, 0x1F	; 31
    3f9e:	b0 f1       	brcs	.+108    	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3fa0:	31 e0       	ldi	r19, 0x01	; 1
    3fa2:	34 8b       	std	Z+20, r19	; 0x14
    3fa4:	2f 5f       	subi	r18, 0xFF	; 255
    3fa6:	2d 30       	cpi	r18, 0x0D	; 13
    3fa8:	10 f4       	brcc	.+4      	; 0x3fae <_ZN3RTC8kalenderEv+0x26>
    3faa:	26 8b       	std	Z+22, r18	; 0x16
    3fac:	2f c0       	rjmp	.+94     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3fae:	21 e0       	ldi	r18, 0x01	; 1
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	26 8b       	std	Z+22, r18	; 0x16
    3fb4:	27 89       	ldd	r18, Z+23	; 0x17
    3fb6:	2f 5f       	subi	r18, 0xFF	; 255
    3fb8:	27 8b       	std	Z+23, r18	; 0x17
    3fba:	28 c0       	rjmp	.+80     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3fbc:	22 30       	cpi	r18, 0x02	; 2
    3fbe:	a9 f4       	brne	.+42     	; 0x3fea <_ZN3RTC8kalenderEv+0x62>
    3fc0:	fc 01       	movw	r30, r24
    3fc2:	27 89       	ldd	r18, Z+23	; 0x17
    3fc4:	23 70       	andi	r18, 0x03	; 3
    3fc6:	41 f4       	brne	.+16     	; 0x3fd8 <_ZN3RTC8kalenderEv+0x50>
    3fc8:	24 89       	ldd	r18, Z+20	; 0x14
    3fca:	2e 31       	cpi	r18, 0x1E	; 30
    3fcc:	f8 f0       	brcs	.+62     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3fce:	21 e0       	ldi	r18, 0x01	; 1
    3fd0:	24 8b       	std	Z+20, r18	; 0x14
    3fd2:	23 e0       	ldi	r18, 0x03	; 3
    3fd4:	26 8b       	std	Z+22, r18	; 0x16
    3fd6:	1a c0       	rjmp	.+52     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3fd8:	fc 01       	movw	r30, r24
    3fda:	24 89       	ldd	r18, Z+20	; 0x14
    3fdc:	2d 31       	cpi	r18, 0x1D	; 29
    3fde:	b0 f0       	brcs	.+44     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3fe0:	21 e0       	ldi	r18, 0x01	; 1
    3fe2:	24 8b       	std	Z+20, r18	; 0x14
    3fe4:	23 e0       	ldi	r18, 0x03	; 3
    3fe6:	26 8b       	std	Z+22, r18	; 0x16
    3fe8:	11 c0       	rjmp	.+34     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3fea:	fc 01       	movw	r30, r24
    3fec:	34 89       	ldd	r19, Z+20	; 0x14
    3fee:	30 32       	cpi	r19, 0x20	; 32
    3ff0:	68 f0       	brcs	.+26     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    3ff2:	31 e0       	ldi	r19, 0x01	; 1
    3ff4:	34 8b       	std	Z+20, r19	; 0x14
    3ff6:	2f 5f       	subi	r18, 0xFF	; 255
    3ff8:	2d 30       	cpi	r18, 0x0D	; 13
    3ffa:	10 f4       	brcc	.+4      	; 0x4000 <_ZN3RTC8kalenderEv+0x78>
    3ffc:	26 8b       	std	Z+22, r18	; 0x16
    3ffe:	06 c0       	rjmp	.+12     	; 0x400c <_ZN3RTC8kalenderEv+0x84>
    4000:	21 e0       	ldi	r18, 0x01	; 1
    4002:	fc 01       	movw	r30, r24
    4004:	26 8b       	std	Z+22, r18	; 0x16
    4006:	27 89       	ldd	r18, Z+23	; 0x17
    4008:	2f 5f       	subi	r18, 0xFF	; 255
    400a:	27 8b       	std	Z+23, r18	; 0x17
    400c:	5b cf       	rjmp	.-330    	; 0x3ec4 <_ZN3RTC15ausgabedatumneuEv>
    400e:	08 95       	ret

00004010 <_ZN3RTC4zeitEv>:
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	ec 01       	movw	r28, r24
    4016:	8a 89       	ldd	r24, Y+18	; 0x12
    4018:	8c 53       	subi	r24, 0x3C	; 60
    401a:	8d 38       	cpi	r24, 0x8D	; 141
    401c:	c0 f4       	brcc	.+48     	; 0x404e <_ZN3RTC4zeitEv+0x3e>
    401e:	1a 8a       	std	Y+18, r1	; 0x12
    4020:	89 89       	ldd	r24, Y+17	; 0x11
    4022:	8f 5f       	subi	r24, 0xFF	; 255
    4024:	89 8b       	std	Y+17, r24	; 0x11
    4026:	98 8d       	ldd	r25, Y+24	; 0x18
    4028:	94 60       	ori	r25, 0x04	; 4
    402a:	98 8f       	std	Y+24, r25	; 0x18
    402c:	8c 33       	cpi	r24, 0x3C	; 60
    402e:	68 f0       	brcs	.+26     	; 0x404a <_ZN3RTC4zeitEv+0x3a>
    4030:	19 8a       	std	Y+17, r1	; 0x11
    4032:	88 89       	ldd	r24, Y+16	; 0x10
    4034:	8f 5f       	subi	r24, 0xFF	; 255
    4036:	88 31       	cpi	r24, 0x18	; 24
    4038:	10 f4       	brcc	.+4      	; 0x403e <_ZN3RTC4zeitEv+0x2e>
    403a:	88 8b       	std	Y+16, r24	; 0x10
    403c:	06 c0       	rjmp	.+12     	; 0x404a <_ZN3RTC4zeitEv+0x3a>
    403e:	18 8a       	std	Y+16, r1	; 0x10
    4040:	8c 89       	ldd	r24, Y+20	; 0x14
    4042:	8f 5f       	subi	r24, 0xFF	; 255
    4044:	8c 8b       	std	Y+20, r24	; 0x14
    4046:	ce 01       	movw	r24, r28
    4048:	9f df       	rcall	.-194    	; 0x3f88 <_ZN3RTC8kalenderEv>
    404a:	ce 01       	movw	r24, r28
    404c:	f1 de       	rcall	.-542    	; 0x3e30 <_ZN3RTC6WeckerEv>
    404e:	ce 01       	movw	r24, r28
    4050:	00 df       	rcall	.-512    	; 0x3e52 <_ZN3RTC14ausgabezeitneuEv>
    4052:	88 8d       	ldd	r24, Y+24	; 0x18
    4054:	85 ff       	sbrs	r24, 5
    4056:	0b c0       	rjmp	.+22     	; 0x406e <_ZN3RTC4zeitEv+0x5e>
    4058:	2b 8d       	ldd	r18, Y+27	; 0x1b
    405a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    405c:	21 50       	subi	r18, 0x01	; 1
    405e:	31 09       	sbc	r19, r1
    4060:	3c 8f       	std	Y+28, r19	; 0x1c
    4062:	2b 8f       	std	Y+27, r18	; 0x1b
    4064:	23 2b       	or	r18, r19
    4066:	19 f4       	brne	.+6      	; 0x406e <_ZN3RTC4zeitEv+0x5e>
    4068:	8f 7d       	andi	r24, 0xDF	; 223
    406a:	81 60       	ori	r24, 0x01	; 1
    406c:	88 8f       	std	Y+24, r24	; 0x18
    406e:	88 8d       	ldd	r24, Y+24	; 0x18
    4070:	86 ff       	sbrs	r24, 6
    4072:	05 c0       	rjmp	.+10     	; 0x407e <_ZN3RTC4zeitEv+0x6e>
    4074:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4076:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4078:	01 96       	adiw	r24, 0x01	; 1
    407a:	9e 8f       	std	Y+30, r25	; 0x1e
    407c:	8d 8f       	std	Y+29, r24	; 0x1d
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	08 95       	ret

00004086 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    4086:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    4088:	80 e3       	ldi	r24, 0x30	; 48
    408a:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    408c:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    408e:	9a e3       	ldi	r25, 0x3A	; 58
    4090:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    4092:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    4094:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    4096:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    4098:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    409a:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    409c:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    409e:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    40a2:	e6 eb       	ldi	r30, 0xB6	; 182
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	80 62       	ori	r24, 0x20	; 32
    40aa:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    40b2:	85 e0       	ldi	r24, 0x05	; 5
    40b4:	80 93 b1 00 	sts	0x00B1, r24
    40b8:	08 95       	ret

000040ba <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    40ba:	e1 eb       	ldi	r30, 0xB1	; 177
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	80 81       	ld	r24, Z
    40c0:	89 7f       	andi	r24, 0xF9	; 249
    40c2:	80 83       	st	Z, r24
    40c4:	08 95       	ret

000040c6 <_ZN5SOUNDD1Ev>:
	setfrequenci(1000);//1KHz
	off();
} //SOUND

// default destructor
SOUND::~SOUND()
    40c6:	08 95       	ret

000040c8 <_ZN5SOUND2onEv>:
	TCNT0 = 0;
	on();
}

void SOUND::on(){
	if ((interupts&(1<<Soundactiv)))
    40c8:	fc 01       	movw	r30, r24
    40ca:	20 81       	ld	r18, Z
    40cc:	20 ff       	sbrs	r18, 0
    40ce:	04 c0       	rjmp	.+8      	; 0x40d8 <_ZN5SOUND2onEv+0x10>
	{
		TCCR0B |= prescaler;
    40d0:	25 b5       	in	r18, 0x25	; 37
    40d2:	81 81       	ldd	r24, Z+1	; 0x01
    40d4:	82 2b       	or	r24, r18
    40d6:	85 bd       	out	0x25, r24	; 37
    40d8:	08 95       	ret

000040da <_ZN5SOUND3offEv>:
	}
}

void SOUND::off(){
	TCCR0B &= ~((1<<CS00)|(1<<CS01)|(1<<CS02));
    40da:	85 b5       	in	r24, 0x25	; 37
    40dc:	88 7f       	andi	r24, 0xF8	; 248
    40de:	85 bd       	out	0x25, r24	; 37
    40e0:	08 95       	ret

000040e2 <_ZN5SOUND12setfrequenciEj>:
{
} //~SOUND


//WERT = f_CPU/(f*1024)
void SOUND::setfrequenci(uint16_t frequenz){
    40e2:	0f 93       	push	r16
    40e4:	1f 93       	push	r17
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	8c 01       	movw	r16, r24
    40ec:	eb 01       	movw	r28, r22
	off();
    40ee:	f5 df       	rcall	.-22     	; 0x40da <_ZN5SOUND3offEv>
	float WERT = F_CPU/256.0;
	WERT /= (frequenz);
    40f0:	be 01       	movw	r22, r28
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	29 d1       	rcall	.+594    	; 0x434a <__floatunsisf>
    40f8:	9b 01       	movw	r18, r22
    40fa:	ac 01       	movw	r20, r24
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	74 e2       	ldi	r23, 0x24	; 36
    4100:	84 ef       	ldi	r24, 0xF4	; 244
    4102:	96 e4       	ldi	r25, 0x46	; 70
    4104:	89 d0       	rcall	.+274    	; 0x4218 <__divsf3>
	OCR0A = (uint8_t)WERT;
    4106:	f5 d0       	rcall	.+490    	; 0x42f2 <__fixunssfsi>
    4108:	67 bd       	out	0x27, r22	; 39
	TCNT0 = 0;
    410a:	16 bc       	out	0x26, r1	; 38
	on();
    410c:	c8 01       	movw	r24, r16
    410e:	dc df       	rcall	.-72     	; 0x40c8 <_ZN5SOUND2onEv>
}
    4110:	df 91       	pop	r29
    4112:	cf 91       	pop	r28
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	08 95       	ret

0000411a <_ZN5SOUNDC1Ev>:


#include "SOUND.h"

// default constructor
SOUND::SOUND()
    411a:	cf 93       	push	r28
    411c:	df 93       	push	r29
    411e:	ec 01       	movw	r28, r24
{
	//interuptregister initialisieren
	interupts = 0;
    4120:	18 82       	st	Y, r1
	PORTB &= ~(1<<PORTB3); //Pullups ausschalten
    4122:	2b 98       	cbi	0x05, 3	; 5
	DDRB |= (1<<PORTB3); //Ausgang schalten
    4124:	23 9a       	sbi	0x04, 3	; 4
	//Not inverting PWM, Phase correct
	TCCR0A |= (1<<COM0A0) | (1<<WGM00);
    4126:	84 b5       	in	r24, 0x24	; 36
    4128:	81 64       	ori	r24, 0x41	; 65
    412a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
    412c:	85 b5       	in	r24, 0x25	; 37
    412e:	88 60       	ori	r24, 0x08	; 8
    4130:	85 bd       	out	0x25, r24	; 37
	fuer	8		1MHz		3.90625KHz
			64		125KHz		488.28Hz
			256		31.25KHz	122.07Hz
			1024	7.8125KHz	30.52Hz
*/
	prescaler = (1<<CS02); //256
    4132:	84 e0       	ldi	r24, 0x04	; 4
    4134:	89 83       	std	Y+1, r24	; 0x01
	setfrequenci(1000);//1KHz
    4136:	68 ee       	ldi	r22, 0xE8	; 232
    4138:	73 e0       	ldi	r23, 0x03	; 3
    413a:	ce 01       	movw	r24, r28
    413c:	d2 df       	rcall	.-92     	; 0x40e2 <_ZN5SOUND12setfrequenciEj>
	off();
    413e:	ce 01       	movw	r24, r28
    4140:	cc df       	rcall	.-104    	; 0x40da <_ZN5SOUND3offEv>
} //SOUND
    4142:	df 91       	pop	r29
    4144:	cf 91       	pop	r28
    4146:	08 95       	ret

00004148 <__subsf3>:
    4148:	50 58       	subi	r21, 0x80	; 128

0000414a <__addsf3>:
    414a:	bb 27       	eor	r27, r27
    414c:	aa 27       	eor	r26, r26
    414e:	0e d0       	rcall	.+28     	; 0x416c <__addsf3x>
    4150:	c1 c1       	rjmp	.+898    	; 0x44d4 <__fp_round>
    4152:	8a d1       	rcall	.+788    	; 0x4468 <__fp_pscA>
    4154:	30 f0       	brcs	.+12     	; 0x4162 <__addsf3+0x18>
    4156:	8f d1       	rcall	.+798    	; 0x4476 <__fp_pscB>
    4158:	20 f0       	brcs	.+8      	; 0x4162 <__addsf3+0x18>
    415a:	31 f4       	brne	.+12     	; 0x4168 <__addsf3+0x1e>
    415c:	9f 3f       	cpi	r25, 0xFF	; 255
    415e:	11 f4       	brne	.+4      	; 0x4164 <__addsf3+0x1a>
    4160:	1e f4       	brtc	.+6      	; 0x4168 <__addsf3+0x1e>
    4162:	5a c1       	rjmp	.+692    	; 0x4418 <__fp_nan>
    4164:	0e f4       	brtc	.+2      	; 0x4168 <__addsf3+0x1e>
    4166:	e0 95       	com	r30
    4168:	e7 fb       	bst	r30, 7
    416a:	50 c1       	rjmp	.+672    	; 0x440c <__fp_inf>

0000416c <__addsf3x>:
    416c:	e9 2f       	mov	r30, r25
    416e:	d4 d1       	rcall	.+936    	; 0x4518 <__fp_split3>
    4170:	80 f3       	brcs	.-32     	; 0x4152 <__addsf3+0x8>
    4172:	ba 17       	cp	r27, r26
    4174:	62 07       	cpc	r22, r18
    4176:	73 07       	cpc	r23, r19
    4178:	84 07       	cpc	r24, r20
    417a:	95 07       	cpc	r25, r21
    417c:	18 f0       	brcs	.+6      	; 0x4184 <__addsf3x+0x18>
    417e:	71 f4       	brne	.+28     	; 0x419c <__addsf3x+0x30>
    4180:	9e f5       	brtc	.+102    	; 0x41e8 <__addsf3x+0x7c>
    4182:	ec c1       	rjmp	.+984    	; 0x455c <__fp_zero>
    4184:	0e f4       	brtc	.+2      	; 0x4188 <__addsf3x+0x1c>
    4186:	e0 95       	com	r30
    4188:	0b 2e       	mov	r0, r27
    418a:	ba 2f       	mov	r27, r26
    418c:	a0 2d       	mov	r26, r0
    418e:	0b 01       	movw	r0, r22
    4190:	b9 01       	movw	r22, r18
    4192:	90 01       	movw	r18, r0
    4194:	0c 01       	movw	r0, r24
    4196:	ca 01       	movw	r24, r20
    4198:	a0 01       	movw	r20, r0
    419a:	11 24       	eor	r1, r1
    419c:	ff 27       	eor	r31, r31
    419e:	59 1b       	sub	r21, r25
    41a0:	99 f0       	breq	.+38     	; 0x41c8 <__addsf3x+0x5c>
    41a2:	59 3f       	cpi	r21, 0xF9	; 249
    41a4:	50 f4       	brcc	.+20     	; 0x41ba <__addsf3x+0x4e>
    41a6:	50 3e       	cpi	r21, 0xE0	; 224
    41a8:	68 f1       	brcs	.+90     	; 0x4204 <__addsf3x+0x98>
    41aa:	1a 16       	cp	r1, r26
    41ac:	f0 40       	sbci	r31, 0x00	; 0
    41ae:	a2 2f       	mov	r26, r18
    41b0:	23 2f       	mov	r18, r19
    41b2:	34 2f       	mov	r19, r20
    41b4:	44 27       	eor	r20, r20
    41b6:	58 5f       	subi	r21, 0xF8	; 248
    41b8:	f3 cf       	rjmp	.-26     	; 0x41a0 <__addsf3x+0x34>
    41ba:	46 95       	lsr	r20
    41bc:	37 95       	ror	r19
    41be:	27 95       	ror	r18
    41c0:	a7 95       	ror	r26
    41c2:	f0 40       	sbci	r31, 0x00	; 0
    41c4:	53 95       	inc	r21
    41c6:	c9 f7       	brne	.-14     	; 0x41ba <__addsf3x+0x4e>
    41c8:	7e f4       	brtc	.+30     	; 0x41e8 <__addsf3x+0x7c>
    41ca:	1f 16       	cp	r1, r31
    41cc:	ba 0b       	sbc	r27, r26
    41ce:	62 0b       	sbc	r22, r18
    41d0:	73 0b       	sbc	r23, r19
    41d2:	84 0b       	sbc	r24, r20
    41d4:	ba f0       	brmi	.+46     	; 0x4204 <__addsf3x+0x98>
    41d6:	91 50       	subi	r25, 0x01	; 1
    41d8:	a1 f0       	breq	.+40     	; 0x4202 <__addsf3x+0x96>
    41da:	ff 0f       	add	r31, r31
    41dc:	bb 1f       	adc	r27, r27
    41de:	66 1f       	adc	r22, r22
    41e0:	77 1f       	adc	r23, r23
    41e2:	88 1f       	adc	r24, r24
    41e4:	c2 f7       	brpl	.-16     	; 0x41d6 <__addsf3x+0x6a>
    41e6:	0e c0       	rjmp	.+28     	; 0x4204 <__addsf3x+0x98>
    41e8:	ba 0f       	add	r27, r26
    41ea:	62 1f       	adc	r22, r18
    41ec:	73 1f       	adc	r23, r19
    41ee:	84 1f       	adc	r24, r20
    41f0:	48 f4       	brcc	.+18     	; 0x4204 <__addsf3x+0x98>
    41f2:	87 95       	ror	r24
    41f4:	77 95       	ror	r23
    41f6:	67 95       	ror	r22
    41f8:	b7 95       	ror	r27
    41fa:	f7 95       	ror	r31
    41fc:	9e 3f       	cpi	r25, 0xFE	; 254
    41fe:	08 f0       	brcs	.+2      	; 0x4202 <__addsf3x+0x96>
    4200:	b3 cf       	rjmp	.-154    	; 0x4168 <__addsf3+0x1e>
    4202:	93 95       	inc	r25
    4204:	88 0f       	add	r24, r24
    4206:	08 f0       	brcs	.+2      	; 0x420a <__addsf3x+0x9e>
    4208:	99 27       	eor	r25, r25
    420a:	ee 0f       	add	r30, r30
    420c:	97 95       	ror	r25
    420e:	87 95       	ror	r24
    4210:	08 95       	ret

00004212 <cos>:
    4212:	39 d1       	rcall	.+626    	; 0x4486 <__fp_rempio2>
    4214:	e3 95       	inc	r30
    4216:	6f c1       	rjmp	.+734    	; 0x44f6 <__fp_sinus>

00004218 <__divsf3>:
    4218:	0c d0       	rcall	.+24     	; 0x4232 <__divsf3x>
    421a:	5c c1       	rjmp	.+696    	; 0x44d4 <__fp_round>
    421c:	2c d1       	rcall	.+600    	; 0x4476 <__fp_pscB>
    421e:	40 f0       	brcs	.+16     	; 0x4230 <__divsf3+0x18>
    4220:	23 d1       	rcall	.+582    	; 0x4468 <__fp_pscA>
    4222:	30 f0       	brcs	.+12     	; 0x4230 <__divsf3+0x18>
    4224:	21 f4       	brne	.+8      	; 0x422e <__divsf3+0x16>
    4226:	5f 3f       	cpi	r21, 0xFF	; 255
    4228:	19 f0       	breq	.+6      	; 0x4230 <__divsf3+0x18>
    422a:	f0 c0       	rjmp	.+480    	; 0x440c <__fp_inf>
    422c:	51 11       	cpse	r21, r1
    422e:	97 c1       	rjmp	.+814    	; 0x455e <__fp_szero>
    4230:	f3 c0       	rjmp	.+486    	; 0x4418 <__fp_nan>

00004232 <__divsf3x>:
    4232:	72 d1       	rcall	.+740    	; 0x4518 <__fp_split3>
    4234:	98 f3       	brcs	.-26     	; 0x421c <__divsf3+0x4>

00004236 <__divsf3_pse>:
    4236:	99 23       	and	r25, r25
    4238:	c9 f3       	breq	.-14     	; 0x422c <__divsf3+0x14>
    423a:	55 23       	and	r21, r21
    423c:	b1 f3       	breq	.-20     	; 0x422a <__divsf3+0x12>
    423e:	95 1b       	sub	r25, r21
    4240:	55 0b       	sbc	r21, r21
    4242:	bb 27       	eor	r27, r27
    4244:	aa 27       	eor	r26, r26
    4246:	62 17       	cp	r22, r18
    4248:	73 07       	cpc	r23, r19
    424a:	84 07       	cpc	r24, r20
    424c:	38 f0       	brcs	.+14     	; 0x425c <__divsf3_pse+0x26>
    424e:	9f 5f       	subi	r25, 0xFF	; 255
    4250:	5f 4f       	sbci	r21, 0xFF	; 255
    4252:	22 0f       	add	r18, r18
    4254:	33 1f       	adc	r19, r19
    4256:	44 1f       	adc	r20, r20
    4258:	aa 1f       	adc	r26, r26
    425a:	a9 f3       	breq	.-22     	; 0x4246 <__divsf3_pse+0x10>
    425c:	33 d0       	rcall	.+102    	; 0x42c4 <__divsf3_pse+0x8e>
    425e:	0e 2e       	mov	r0, r30
    4260:	3a f0       	brmi	.+14     	; 0x4270 <__divsf3_pse+0x3a>
    4262:	e0 e8       	ldi	r30, 0x80	; 128
    4264:	30 d0       	rcall	.+96     	; 0x42c6 <__divsf3_pse+0x90>
    4266:	91 50       	subi	r25, 0x01	; 1
    4268:	50 40       	sbci	r21, 0x00	; 0
    426a:	e6 95       	lsr	r30
    426c:	00 1c       	adc	r0, r0
    426e:	ca f7       	brpl	.-14     	; 0x4262 <__divsf3_pse+0x2c>
    4270:	29 d0       	rcall	.+82     	; 0x42c4 <__divsf3_pse+0x8e>
    4272:	fe 2f       	mov	r31, r30
    4274:	27 d0       	rcall	.+78     	; 0x42c4 <__divsf3_pse+0x8e>
    4276:	66 0f       	add	r22, r22
    4278:	77 1f       	adc	r23, r23
    427a:	88 1f       	adc	r24, r24
    427c:	bb 1f       	adc	r27, r27
    427e:	26 17       	cp	r18, r22
    4280:	37 07       	cpc	r19, r23
    4282:	48 07       	cpc	r20, r24
    4284:	ab 07       	cpc	r26, r27
    4286:	b0 e8       	ldi	r27, 0x80	; 128
    4288:	09 f0       	breq	.+2      	; 0x428c <__divsf3_pse+0x56>
    428a:	bb 0b       	sbc	r27, r27
    428c:	80 2d       	mov	r24, r0
    428e:	bf 01       	movw	r22, r30
    4290:	ff 27       	eor	r31, r31
    4292:	93 58       	subi	r25, 0x83	; 131
    4294:	5f 4f       	sbci	r21, 0xFF	; 255
    4296:	2a f0       	brmi	.+10     	; 0x42a2 <__divsf3_pse+0x6c>
    4298:	9e 3f       	cpi	r25, 0xFE	; 254
    429a:	51 05       	cpc	r21, r1
    429c:	68 f0       	brcs	.+26     	; 0x42b8 <__divsf3_pse+0x82>
    429e:	b6 c0       	rjmp	.+364    	; 0x440c <__fp_inf>
    42a0:	5e c1       	rjmp	.+700    	; 0x455e <__fp_szero>
    42a2:	5f 3f       	cpi	r21, 0xFF	; 255
    42a4:	ec f3       	brlt	.-6      	; 0x42a0 <__divsf3_pse+0x6a>
    42a6:	98 3e       	cpi	r25, 0xE8	; 232
    42a8:	dc f3       	brlt	.-10     	; 0x42a0 <__divsf3_pse+0x6a>
    42aa:	86 95       	lsr	r24
    42ac:	77 95       	ror	r23
    42ae:	67 95       	ror	r22
    42b0:	b7 95       	ror	r27
    42b2:	f7 95       	ror	r31
    42b4:	9f 5f       	subi	r25, 0xFF	; 255
    42b6:	c9 f7       	brne	.-14     	; 0x42aa <__divsf3_pse+0x74>
    42b8:	88 0f       	add	r24, r24
    42ba:	91 1d       	adc	r25, r1
    42bc:	96 95       	lsr	r25
    42be:	87 95       	ror	r24
    42c0:	97 f9       	bld	r25, 7
    42c2:	08 95       	ret
    42c4:	e1 e0       	ldi	r30, 0x01	; 1
    42c6:	66 0f       	add	r22, r22
    42c8:	77 1f       	adc	r23, r23
    42ca:	88 1f       	adc	r24, r24
    42cc:	bb 1f       	adc	r27, r27
    42ce:	62 17       	cp	r22, r18
    42d0:	73 07       	cpc	r23, r19
    42d2:	84 07       	cpc	r24, r20
    42d4:	ba 07       	cpc	r27, r26
    42d6:	20 f0       	brcs	.+8      	; 0x42e0 <__divsf3_pse+0xaa>
    42d8:	62 1b       	sub	r22, r18
    42da:	73 0b       	sbc	r23, r19
    42dc:	84 0b       	sbc	r24, r20
    42de:	ba 0b       	sbc	r27, r26
    42e0:	ee 1f       	adc	r30, r30
    42e2:	88 f7       	brcc	.-30     	; 0x42c6 <__divsf3_pse+0x90>
    42e4:	e0 95       	com	r30
    42e6:	08 95       	ret

000042e8 <__fixsfsi>:
    42e8:	04 d0       	rcall	.+8      	; 0x42f2 <__fixunssfsi>
    42ea:	68 94       	set
    42ec:	b1 11       	cpse	r27, r1
    42ee:	37 c1       	rjmp	.+622    	; 0x455e <__fp_szero>
    42f0:	08 95       	ret

000042f2 <__fixunssfsi>:
    42f2:	1a d1       	rcall	.+564    	; 0x4528 <__fp_splitA>
    42f4:	88 f0       	brcs	.+34     	; 0x4318 <__fixunssfsi+0x26>
    42f6:	9f 57       	subi	r25, 0x7F	; 127
    42f8:	90 f0       	brcs	.+36     	; 0x431e <__fixunssfsi+0x2c>
    42fa:	b9 2f       	mov	r27, r25
    42fc:	99 27       	eor	r25, r25
    42fe:	b7 51       	subi	r27, 0x17	; 23
    4300:	a0 f0       	brcs	.+40     	; 0x432a <__fixunssfsi+0x38>
    4302:	d1 f0       	breq	.+52     	; 0x4338 <__fixunssfsi+0x46>
    4304:	66 0f       	add	r22, r22
    4306:	77 1f       	adc	r23, r23
    4308:	88 1f       	adc	r24, r24
    430a:	99 1f       	adc	r25, r25
    430c:	1a f0       	brmi	.+6      	; 0x4314 <__fixunssfsi+0x22>
    430e:	ba 95       	dec	r27
    4310:	c9 f7       	brne	.-14     	; 0x4304 <__fixunssfsi+0x12>
    4312:	12 c0       	rjmp	.+36     	; 0x4338 <__fixunssfsi+0x46>
    4314:	b1 30       	cpi	r27, 0x01	; 1
    4316:	81 f0       	breq	.+32     	; 0x4338 <__fixunssfsi+0x46>
    4318:	21 d1       	rcall	.+578    	; 0x455c <__fp_zero>
    431a:	b1 e0       	ldi	r27, 0x01	; 1
    431c:	08 95       	ret
    431e:	1e c1       	rjmp	.+572    	; 0x455c <__fp_zero>
    4320:	67 2f       	mov	r22, r23
    4322:	78 2f       	mov	r23, r24
    4324:	88 27       	eor	r24, r24
    4326:	b8 5f       	subi	r27, 0xF8	; 248
    4328:	39 f0       	breq	.+14     	; 0x4338 <__fixunssfsi+0x46>
    432a:	b9 3f       	cpi	r27, 0xF9	; 249
    432c:	cc f3       	brlt	.-14     	; 0x4320 <__fixunssfsi+0x2e>
    432e:	86 95       	lsr	r24
    4330:	77 95       	ror	r23
    4332:	67 95       	ror	r22
    4334:	b3 95       	inc	r27
    4336:	d9 f7       	brne	.-10     	; 0x432e <__fixunssfsi+0x3c>
    4338:	3e f4       	brtc	.+14     	; 0x4348 <__fixunssfsi+0x56>
    433a:	90 95       	com	r25
    433c:	80 95       	com	r24
    433e:	70 95       	com	r23
    4340:	61 95       	neg	r22
    4342:	7f 4f       	sbci	r23, 0xFF	; 255
    4344:	8f 4f       	sbci	r24, 0xFF	; 255
    4346:	9f 4f       	sbci	r25, 0xFF	; 255
    4348:	08 95       	ret

0000434a <__floatunsisf>:
    434a:	e8 94       	clt
    434c:	09 c0       	rjmp	.+18     	; 0x4360 <__floatsisf+0x12>

0000434e <__floatsisf>:
    434e:	97 fb       	bst	r25, 7
    4350:	3e f4       	brtc	.+14     	; 0x4360 <__floatsisf+0x12>
    4352:	90 95       	com	r25
    4354:	80 95       	com	r24
    4356:	70 95       	com	r23
    4358:	61 95       	neg	r22
    435a:	7f 4f       	sbci	r23, 0xFF	; 255
    435c:	8f 4f       	sbci	r24, 0xFF	; 255
    435e:	9f 4f       	sbci	r25, 0xFF	; 255
    4360:	99 23       	and	r25, r25
    4362:	a9 f0       	breq	.+42     	; 0x438e <__floatsisf+0x40>
    4364:	f9 2f       	mov	r31, r25
    4366:	96 e9       	ldi	r25, 0x96	; 150
    4368:	bb 27       	eor	r27, r27
    436a:	93 95       	inc	r25
    436c:	f6 95       	lsr	r31
    436e:	87 95       	ror	r24
    4370:	77 95       	ror	r23
    4372:	67 95       	ror	r22
    4374:	b7 95       	ror	r27
    4376:	f1 11       	cpse	r31, r1
    4378:	f8 cf       	rjmp	.-16     	; 0x436a <__floatsisf+0x1c>
    437a:	fa f4       	brpl	.+62     	; 0x43ba <__floatsisf+0x6c>
    437c:	bb 0f       	add	r27, r27
    437e:	11 f4       	brne	.+4      	; 0x4384 <__floatsisf+0x36>
    4380:	60 ff       	sbrs	r22, 0
    4382:	1b c0       	rjmp	.+54     	; 0x43ba <__floatsisf+0x6c>
    4384:	6f 5f       	subi	r22, 0xFF	; 255
    4386:	7f 4f       	sbci	r23, 0xFF	; 255
    4388:	8f 4f       	sbci	r24, 0xFF	; 255
    438a:	9f 4f       	sbci	r25, 0xFF	; 255
    438c:	16 c0       	rjmp	.+44     	; 0x43ba <__floatsisf+0x6c>
    438e:	88 23       	and	r24, r24
    4390:	11 f0       	breq	.+4      	; 0x4396 <__floatsisf+0x48>
    4392:	96 e9       	ldi	r25, 0x96	; 150
    4394:	11 c0       	rjmp	.+34     	; 0x43b8 <__floatsisf+0x6a>
    4396:	77 23       	and	r23, r23
    4398:	21 f0       	breq	.+8      	; 0x43a2 <__floatsisf+0x54>
    439a:	9e e8       	ldi	r25, 0x8E	; 142
    439c:	87 2f       	mov	r24, r23
    439e:	76 2f       	mov	r23, r22
    43a0:	05 c0       	rjmp	.+10     	; 0x43ac <__floatsisf+0x5e>
    43a2:	66 23       	and	r22, r22
    43a4:	71 f0       	breq	.+28     	; 0x43c2 <__floatsisf+0x74>
    43a6:	96 e8       	ldi	r25, 0x86	; 134
    43a8:	86 2f       	mov	r24, r22
    43aa:	70 e0       	ldi	r23, 0x00	; 0
    43ac:	60 e0       	ldi	r22, 0x00	; 0
    43ae:	2a f0       	brmi	.+10     	; 0x43ba <__floatsisf+0x6c>
    43b0:	9a 95       	dec	r25
    43b2:	66 0f       	add	r22, r22
    43b4:	77 1f       	adc	r23, r23
    43b6:	88 1f       	adc	r24, r24
    43b8:	da f7       	brpl	.-10     	; 0x43b0 <__floatsisf+0x62>
    43ba:	88 0f       	add	r24, r24
    43bc:	96 95       	lsr	r25
    43be:	87 95       	ror	r24
    43c0:	97 f9       	bld	r25, 7
    43c2:	08 95       	ret

000043c4 <__fp_cmp>:
    43c4:	99 0f       	add	r25, r25
    43c6:	00 08       	sbc	r0, r0
    43c8:	55 0f       	add	r21, r21
    43ca:	aa 0b       	sbc	r26, r26
    43cc:	e0 e8       	ldi	r30, 0x80	; 128
    43ce:	fe ef       	ldi	r31, 0xFE	; 254
    43d0:	16 16       	cp	r1, r22
    43d2:	17 06       	cpc	r1, r23
    43d4:	e8 07       	cpc	r30, r24
    43d6:	f9 07       	cpc	r31, r25
    43d8:	c0 f0       	brcs	.+48     	; 0x440a <__fp_cmp+0x46>
    43da:	12 16       	cp	r1, r18
    43dc:	13 06       	cpc	r1, r19
    43de:	e4 07       	cpc	r30, r20
    43e0:	f5 07       	cpc	r31, r21
    43e2:	98 f0       	brcs	.+38     	; 0x440a <__fp_cmp+0x46>
    43e4:	62 1b       	sub	r22, r18
    43e6:	73 0b       	sbc	r23, r19
    43e8:	84 0b       	sbc	r24, r20
    43ea:	95 0b       	sbc	r25, r21
    43ec:	39 f4       	brne	.+14     	; 0x43fc <__fp_cmp+0x38>
    43ee:	0a 26       	eor	r0, r26
    43f0:	61 f0       	breq	.+24     	; 0x440a <__fp_cmp+0x46>
    43f2:	23 2b       	or	r18, r19
    43f4:	24 2b       	or	r18, r20
    43f6:	25 2b       	or	r18, r21
    43f8:	21 f4       	brne	.+8      	; 0x4402 <__fp_cmp+0x3e>
    43fa:	08 95       	ret
    43fc:	0a 26       	eor	r0, r26
    43fe:	09 f4       	brne	.+2      	; 0x4402 <__fp_cmp+0x3e>
    4400:	a1 40       	sbci	r26, 0x01	; 1
    4402:	a6 95       	lsr	r26
    4404:	8f ef       	ldi	r24, 0xFF	; 255
    4406:	81 1d       	adc	r24, r1
    4408:	81 1d       	adc	r24, r1
    440a:	08 95       	ret

0000440c <__fp_inf>:
    440c:	97 f9       	bld	r25, 7
    440e:	9f 67       	ori	r25, 0x7F	; 127
    4410:	80 e8       	ldi	r24, 0x80	; 128
    4412:	70 e0       	ldi	r23, 0x00	; 0
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	08 95       	ret

00004418 <__fp_nan>:
    4418:	9f ef       	ldi	r25, 0xFF	; 255
    441a:	80 ec       	ldi	r24, 0xC0	; 192
    441c:	08 95       	ret

0000441e <__fp_powser>:
    441e:	df 93       	push	r29
    4420:	cf 93       	push	r28
    4422:	1f 93       	push	r17
    4424:	0f 93       	push	r16
    4426:	ff 92       	push	r15
    4428:	ef 92       	push	r14
    442a:	df 92       	push	r13
    442c:	7b 01       	movw	r14, r22
    442e:	8c 01       	movw	r16, r24
    4430:	68 94       	set
    4432:	05 c0       	rjmp	.+10     	; 0x443e <__fp_powser+0x20>
    4434:	da 2e       	mov	r13, r26
    4436:	ef 01       	movw	r28, r30
    4438:	af d0       	rcall	.+350    	; 0x4598 <__mulsf3x>
    443a:	fe 01       	movw	r30, r28
    443c:	e8 94       	clt
    443e:	a5 91       	lpm	r26, Z+
    4440:	25 91       	lpm	r18, Z+
    4442:	35 91       	lpm	r19, Z+
    4444:	45 91       	lpm	r20, Z+
    4446:	55 91       	lpm	r21, Z+
    4448:	ae f3       	brts	.-22     	; 0x4434 <__fp_powser+0x16>
    444a:	ef 01       	movw	r28, r30
    444c:	8f de       	rcall	.-738    	; 0x416c <__addsf3x>
    444e:	fe 01       	movw	r30, r28
    4450:	97 01       	movw	r18, r14
    4452:	a8 01       	movw	r20, r16
    4454:	da 94       	dec	r13
    4456:	79 f7       	brne	.-34     	; 0x4436 <__fp_powser+0x18>
    4458:	df 90       	pop	r13
    445a:	ef 90       	pop	r14
    445c:	ff 90       	pop	r15
    445e:	0f 91       	pop	r16
    4460:	1f 91       	pop	r17
    4462:	cf 91       	pop	r28
    4464:	df 91       	pop	r29
    4466:	08 95       	ret

00004468 <__fp_pscA>:
    4468:	00 24       	eor	r0, r0
    446a:	0a 94       	dec	r0
    446c:	16 16       	cp	r1, r22
    446e:	17 06       	cpc	r1, r23
    4470:	18 06       	cpc	r1, r24
    4472:	09 06       	cpc	r0, r25
    4474:	08 95       	ret

00004476 <__fp_pscB>:
    4476:	00 24       	eor	r0, r0
    4478:	0a 94       	dec	r0
    447a:	12 16       	cp	r1, r18
    447c:	13 06       	cpc	r1, r19
    447e:	14 06       	cpc	r1, r20
    4480:	05 06       	cpc	r0, r21
    4482:	08 95       	ret
    4484:	c9 cf       	rjmp	.-110    	; 0x4418 <__fp_nan>

00004486 <__fp_rempio2>:
    4486:	50 d0       	rcall	.+160    	; 0x4528 <__fp_splitA>
    4488:	e8 f3       	brcs	.-6      	; 0x4484 <__fp_pscB+0xe>
    448a:	e8 94       	clt
    448c:	e0 e0       	ldi	r30, 0x00	; 0
    448e:	bb 27       	eor	r27, r27
    4490:	9f 57       	subi	r25, 0x7F	; 127
    4492:	f0 f0       	brcs	.+60     	; 0x44d0 <__fp_rempio2+0x4a>
    4494:	2a ed       	ldi	r18, 0xDA	; 218
    4496:	3f e0       	ldi	r19, 0x0F	; 15
    4498:	49 ec       	ldi	r20, 0xC9	; 201
    449a:	06 c0       	rjmp	.+12     	; 0x44a8 <__fp_rempio2+0x22>
    449c:	ee 0f       	add	r30, r30
    449e:	bb 0f       	add	r27, r27
    44a0:	66 1f       	adc	r22, r22
    44a2:	77 1f       	adc	r23, r23
    44a4:	88 1f       	adc	r24, r24
    44a6:	28 f0       	brcs	.+10     	; 0x44b2 <__fp_rempio2+0x2c>
    44a8:	b2 3a       	cpi	r27, 0xA2	; 162
    44aa:	62 07       	cpc	r22, r18
    44ac:	73 07       	cpc	r23, r19
    44ae:	84 07       	cpc	r24, r20
    44b0:	28 f0       	brcs	.+10     	; 0x44bc <__fp_rempio2+0x36>
    44b2:	b2 5a       	subi	r27, 0xA2	; 162
    44b4:	62 0b       	sbc	r22, r18
    44b6:	73 0b       	sbc	r23, r19
    44b8:	84 0b       	sbc	r24, r20
    44ba:	e3 95       	inc	r30
    44bc:	9a 95       	dec	r25
    44be:	72 f7       	brpl	.-36     	; 0x449c <__fp_rempio2+0x16>
    44c0:	80 38       	cpi	r24, 0x80	; 128
    44c2:	30 f4       	brcc	.+12     	; 0x44d0 <__fp_rempio2+0x4a>
    44c4:	9a 95       	dec	r25
    44c6:	bb 0f       	add	r27, r27
    44c8:	66 1f       	adc	r22, r22
    44ca:	77 1f       	adc	r23, r23
    44cc:	88 1f       	adc	r24, r24
    44ce:	d2 f7       	brpl	.-12     	; 0x44c4 <__fp_rempio2+0x3e>
    44d0:	90 48       	sbci	r25, 0x80	; 128
    44d2:	3e c1       	rjmp	.+636    	; 0x4750 <__fp_mpack_finite>

000044d4 <__fp_round>:
    44d4:	09 2e       	mov	r0, r25
    44d6:	03 94       	inc	r0
    44d8:	00 0c       	add	r0, r0
    44da:	11 f4       	brne	.+4      	; 0x44e0 <__fp_round+0xc>
    44dc:	88 23       	and	r24, r24
    44de:	52 f0       	brmi	.+20     	; 0x44f4 <__fp_round+0x20>
    44e0:	bb 0f       	add	r27, r27
    44e2:	40 f4       	brcc	.+16     	; 0x44f4 <__fp_round+0x20>
    44e4:	bf 2b       	or	r27, r31
    44e6:	11 f4       	brne	.+4      	; 0x44ec <__fp_round+0x18>
    44e8:	60 ff       	sbrs	r22, 0
    44ea:	04 c0       	rjmp	.+8      	; 0x44f4 <__fp_round+0x20>
    44ec:	6f 5f       	subi	r22, 0xFF	; 255
    44ee:	7f 4f       	sbci	r23, 0xFF	; 255
    44f0:	8f 4f       	sbci	r24, 0xFF	; 255
    44f2:	9f 4f       	sbci	r25, 0xFF	; 255
    44f4:	08 95       	ret

000044f6 <__fp_sinus>:
    44f6:	ef 93       	push	r30
    44f8:	e0 ff       	sbrs	r30, 0
    44fa:	06 c0       	rjmp	.+12     	; 0x4508 <__fp_sinus+0x12>
    44fc:	a2 ea       	ldi	r26, 0xA2	; 162
    44fe:	2a ed       	ldi	r18, 0xDA	; 218
    4500:	3f e0       	ldi	r19, 0x0F	; 15
    4502:	49 ec       	ldi	r20, 0xC9	; 201
    4504:	5f eb       	ldi	r21, 0xBF	; 191
    4506:	32 de       	rcall	.-924    	; 0x416c <__addsf3x>
    4508:	e5 df       	rcall	.-54     	; 0x44d4 <__fp_round>
    450a:	0f 90       	pop	r0
    450c:	03 94       	inc	r0
    450e:	01 fc       	sbrc	r0, 1
    4510:	90 58       	subi	r25, 0x80	; 128
    4512:	ea e5       	ldi	r30, 0x5A	; 90
    4514:	f1 e0       	ldi	r31, 0x01	; 1
    4516:	28 c1       	rjmp	.+592    	; 0x4768 <__fp_powsodd>

00004518 <__fp_split3>:
    4518:	57 fd       	sbrc	r21, 7
    451a:	90 58       	subi	r25, 0x80	; 128
    451c:	44 0f       	add	r20, r20
    451e:	55 1f       	adc	r21, r21
    4520:	59 f0       	breq	.+22     	; 0x4538 <__fp_splitA+0x10>
    4522:	5f 3f       	cpi	r21, 0xFF	; 255
    4524:	71 f0       	breq	.+28     	; 0x4542 <__fp_splitA+0x1a>
    4526:	47 95       	ror	r20

00004528 <__fp_splitA>:
    4528:	88 0f       	add	r24, r24
    452a:	97 fb       	bst	r25, 7
    452c:	99 1f       	adc	r25, r25
    452e:	61 f0       	breq	.+24     	; 0x4548 <__fp_splitA+0x20>
    4530:	9f 3f       	cpi	r25, 0xFF	; 255
    4532:	79 f0       	breq	.+30     	; 0x4552 <__fp_splitA+0x2a>
    4534:	87 95       	ror	r24
    4536:	08 95       	ret
    4538:	12 16       	cp	r1, r18
    453a:	13 06       	cpc	r1, r19
    453c:	14 06       	cpc	r1, r20
    453e:	55 1f       	adc	r21, r21
    4540:	f2 cf       	rjmp	.-28     	; 0x4526 <__fp_split3+0xe>
    4542:	46 95       	lsr	r20
    4544:	f1 df       	rcall	.-30     	; 0x4528 <__fp_splitA>
    4546:	08 c0       	rjmp	.+16     	; 0x4558 <__fp_splitA+0x30>
    4548:	16 16       	cp	r1, r22
    454a:	17 06       	cpc	r1, r23
    454c:	18 06       	cpc	r1, r24
    454e:	99 1f       	adc	r25, r25
    4550:	f1 cf       	rjmp	.-30     	; 0x4534 <__fp_splitA+0xc>
    4552:	86 95       	lsr	r24
    4554:	71 05       	cpc	r23, r1
    4556:	61 05       	cpc	r22, r1
    4558:	08 94       	sec
    455a:	08 95       	ret

0000455c <__fp_zero>:
    455c:	e8 94       	clt

0000455e <__fp_szero>:
    455e:	bb 27       	eor	r27, r27
    4560:	66 27       	eor	r22, r22
    4562:	77 27       	eor	r23, r23
    4564:	cb 01       	movw	r24, r22
    4566:	97 f9       	bld	r25, 7
    4568:	08 95       	ret

0000456a <__gesf2>:
    456a:	2c df       	rcall	.-424    	; 0x43c4 <__fp_cmp>
    456c:	08 f4       	brcc	.+2      	; 0x4570 <__gesf2+0x6>
    456e:	8f ef       	ldi	r24, 0xFF	; 255
    4570:	08 95       	ret

00004572 <inverse>:
    4572:	9b 01       	movw	r18, r22
    4574:	ac 01       	movw	r20, r24
    4576:	60 e0       	ldi	r22, 0x00	; 0
    4578:	70 e0       	ldi	r23, 0x00	; 0
    457a:	80 e8       	ldi	r24, 0x80	; 128
    457c:	9f e3       	ldi	r25, 0x3F	; 63
    457e:	4c ce       	rjmp	.-872    	; 0x4218 <__divsf3>

00004580 <__mulsf3>:
    4580:	0b d0       	rcall	.+22     	; 0x4598 <__mulsf3x>
    4582:	a8 cf       	rjmp	.-176    	; 0x44d4 <__fp_round>
    4584:	71 df       	rcall	.-286    	; 0x4468 <__fp_pscA>
    4586:	28 f0       	brcs	.+10     	; 0x4592 <__mulsf3+0x12>
    4588:	76 df       	rcall	.-276    	; 0x4476 <__fp_pscB>
    458a:	18 f0       	brcs	.+6      	; 0x4592 <__mulsf3+0x12>
    458c:	95 23       	and	r25, r21
    458e:	09 f0       	breq	.+2      	; 0x4592 <__mulsf3+0x12>
    4590:	3d cf       	rjmp	.-390    	; 0x440c <__fp_inf>
    4592:	42 cf       	rjmp	.-380    	; 0x4418 <__fp_nan>
    4594:	11 24       	eor	r1, r1
    4596:	e3 cf       	rjmp	.-58     	; 0x455e <__fp_szero>

00004598 <__mulsf3x>:
    4598:	bf df       	rcall	.-130    	; 0x4518 <__fp_split3>
    459a:	a0 f3       	brcs	.-24     	; 0x4584 <__mulsf3+0x4>

0000459c <__mulsf3_pse>:
    459c:	95 9f       	mul	r25, r21
    459e:	d1 f3       	breq	.-12     	; 0x4594 <__mulsf3+0x14>
    45a0:	95 0f       	add	r25, r21
    45a2:	50 e0       	ldi	r21, 0x00	; 0
    45a4:	55 1f       	adc	r21, r21
    45a6:	62 9f       	mul	r22, r18
    45a8:	f0 01       	movw	r30, r0
    45aa:	72 9f       	mul	r23, r18
    45ac:	bb 27       	eor	r27, r27
    45ae:	f0 0d       	add	r31, r0
    45b0:	b1 1d       	adc	r27, r1
    45b2:	63 9f       	mul	r22, r19
    45b4:	aa 27       	eor	r26, r26
    45b6:	f0 0d       	add	r31, r0
    45b8:	b1 1d       	adc	r27, r1
    45ba:	aa 1f       	adc	r26, r26
    45bc:	64 9f       	mul	r22, r20
    45be:	66 27       	eor	r22, r22
    45c0:	b0 0d       	add	r27, r0
    45c2:	a1 1d       	adc	r26, r1
    45c4:	66 1f       	adc	r22, r22
    45c6:	82 9f       	mul	r24, r18
    45c8:	22 27       	eor	r18, r18
    45ca:	b0 0d       	add	r27, r0
    45cc:	a1 1d       	adc	r26, r1
    45ce:	62 1f       	adc	r22, r18
    45d0:	73 9f       	mul	r23, r19
    45d2:	b0 0d       	add	r27, r0
    45d4:	a1 1d       	adc	r26, r1
    45d6:	62 1f       	adc	r22, r18
    45d8:	83 9f       	mul	r24, r19
    45da:	a0 0d       	add	r26, r0
    45dc:	61 1d       	adc	r22, r1
    45de:	22 1f       	adc	r18, r18
    45e0:	74 9f       	mul	r23, r20
    45e2:	33 27       	eor	r19, r19
    45e4:	a0 0d       	add	r26, r0
    45e6:	61 1d       	adc	r22, r1
    45e8:	23 1f       	adc	r18, r19
    45ea:	84 9f       	mul	r24, r20
    45ec:	60 0d       	add	r22, r0
    45ee:	21 1d       	adc	r18, r1
    45f0:	82 2f       	mov	r24, r18
    45f2:	76 2f       	mov	r23, r22
    45f4:	6a 2f       	mov	r22, r26
    45f6:	11 24       	eor	r1, r1
    45f8:	9f 57       	subi	r25, 0x7F	; 127
    45fa:	50 40       	sbci	r21, 0x00	; 0
    45fc:	8a f0       	brmi	.+34     	; 0x4620 <__mulsf3_pse+0x84>
    45fe:	e1 f0       	breq	.+56     	; 0x4638 <__mulsf3_pse+0x9c>
    4600:	88 23       	and	r24, r24
    4602:	4a f0       	brmi	.+18     	; 0x4616 <__mulsf3_pse+0x7a>
    4604:	ee 0f       	add	r30, r30
    4606:	ff 1f       	adc	r31, r31
    4608:	bb 1f       	adc	r27, r27
    460a:	66 1f       	adc	r22, r22
    460c:	77 1f       	adc	r23, r23
    460e:	88 1f       	adc	r24, r24
    4610:	91 50       	subi	r25, 0x01	; 1
    4612:	50 40       	sbci	r21, 0x00	; 0
    4614:	a9 f7       	brne	.-22     	; 0x4600 <__mulsf3_pse+0x64>
    4616:	9e 3f       	cpi	r25, 0xFE	; 254
    4618:	51 05       	cpc	r21, r1
    461a:	70 f0       	brcs	.+28     	; 0x4638 <__mulsf3_pse+0x9c>
    461c:	f7 ce       	rjmp	.-530    	; 0x440c <__fp_inf>
    461e:	9f cf       	rjmp	.-194    	; 0x455e <__fp_szero>
    4620:	5f 3f       	cpi	r21, 0xFF	; 255
    4622:	ec f3       	brlt	.-6      	; 0x461e <__mulsf3_pse+0x82>
    4624:	98 3e       	cpi	r25, 0xE8	; 232
    4626:	dc f3       	brlt	.-10     	; 0x461e <__mulsf3_pse+0x82>
    4628:	86 95       	lsr	r24
    462a:	77 95       	ror	r23
    462c:	67 95       	ror	r22
    462e:	b7 95       	ror	r27
    4630:	f7 95       	ror	r31
    4632:	e7 95       	ror	r30
    4634:	9f 5f       	subi	r25, 0xFF	; 255
    4636:	c1 f7       	brne	.-16     	; 0x4628 <__mulsf3_pse+0x8c>
    4638:	fe 2b       	or	r31, r30
    463a:	88 0f       	add	r24, r24
    463c:	91 1d       	adc	r25, r1
    463e:	96 95       	lsr	r25
    4640:	87 95       	ror	r24
    4642:	97 f9       	bld	r25, 7
    4644:	08 95       	ret

00004646 <pow>:
    4646:	fa 01       	movw	r30, r20
    4648:	ee 0f       	add	r30, r30
    464a:	ff 1f       	adc	r31, r31
    464c:	30 96       	adiw	r30, 0x00	; 0
    464e:	21 05       	cpc	r18, r1
    4650:	31 05       	cpc	r19, r1
    4652:	99 f1       	breq	.+102    	; 0x46ba <pow+0x74>
    4654:	61 15       	cp	r22, r1
    4656:	71 05       	cpc	r23, r1
    4658:	61 f4       	brne	.+24     	; 0x4672 <pow+0x2c>
    465a:	80 38       	cpi	r24, 0x80	; 128
    465c:	bf e3       	ldi	r27, 0x3F	; 63
    465e:	9b 07       	cpc	r25, r27
    4660:	49 f1       	breq	.+82     	; 0x46b4 <pow+0x6e>
    4662:	68 94       	set
    4664:	90 38       	cpi	r25, 0x80	; 128
    4666:	81 05       	cpc	r24, r1
    4668:	61 f0       	breq	.+24     	; 0x4682 <pow+0x3c>
    466a:	80 38       	cpi	r24, 0x80	; 128
    466c:	bf ef       	ldi	r27, 0xFF	; 255
    466e:	9b 07       	cpc	r25, r27
    4670:	41 f0       	breq	.+16     	; 0x4682 <pow+0x3c>
    4672:	99 23       	and	r25, r25
    4674:	42 f5       	brpl	.+80     	; 0x46c6 <pow+0x80>
    4676:	ff 3f       	cpi	r31, 0xFF	; 255
    4678:	e1 05       	cpc	r30, r1
    467a:	31 05       	cpc	r19, r1
    467c:	21 05       	cpc	r18, r1
    467e:	11 f1       	breq	.+68     	; 0x46c4 <pow+0x7e>
    4680:	e8 94       	clt
    4682:	08 94       	sec
    4684:	e7 95       	ror	r30
    4686:	d9 01       	movw	r26, r18
    4688:	aa 23       	and	r26, r26
    468a:	29 f4       	brne	.+10     	; 0x4696 <pow+0x50>
    468c:	ab 2f       	mov	r26, r27
    468e:	be 2f       	mov	r27, r30
    4690:	f8 5f       	subi	r31, 0xF8	; 248
    4692:	d0 f3       	brcs	.-12     	; 0x4688 <pow+0x42>
    4694:	10 c0       	rjmp	.+32     	; 0x46b6 <pow+0x70>
    4696:	ff 5f       	subi	r31, 0xFF	; 255
    4698:	70 f4       	brcc	.+28     	; 0x46b6 <pow+0x70>
    469a:	a6 95       	lsr	r26
    469c:	e0 f7       	brcc	.-8      	; 0x4696 <pow+0x50>
    469e:	f7 39       	cpi	r31, 0x97	; 151
    46a0:	50 f0       	brcs	.+20     	; 0x46b6 <pow+0x70>
    46a2:	19 f0       	breq	.+6      	; 0x46aa <pow+0x64>
    46a4:	ff 3a       	cpi	r31, 0xAF	; 175
    46a6:	38 f4       	brcc	.+14     	; 0x46b6 <pow+0x70>
    46a8:	9f 77       	andi	r25, 0x7F	; 127
    46aa:	9f 93       	push	r25
    46ac:	0c d0       	rcall	.+24     	; 0x46c6 <pow+0x80>
    46ae:	0f 90       	pop	r0
    46b0:	07 fc       	sbrc	r0, 7
    46b2:	90 58       	subi	r25, 0x80	; 128
    46b4:	08 95       	ret
    46b6:	3e f0       	brts	.+14     	; 0x46c6 <pow+0x80>
    46b8:	af ce       	rjmp	.-674    	; 0x4418 <__fp_nan>
    46ba:	60 e0       	ldi	r22, 0x00	; 0
    46bc:	70 e0       	ldi	r23, 0x00	; 0
    46be:	80 e8       	ldi	r24, 0x80	; 128
    46c0:	9f e3       	ldi	r25, 0x3F	; 63
    46c2:	08 95       	ret
    46c4:	4f e7       	ldi	r20, 0x7F	; 127
    46c6:	9f 77       	andi	r25, 0x7F	; 127
    46c8:	5f 93       	push	r21
    46ca:	4f 93       	push	r20
    46cc:	3f 93       	push	r19
    46ce:	2f 93       	push	r18
    46d0:	97 d0       	rcall	.+302    	; 0x4800 <log>
    46d2:	2f 91       	pop	r18
    46d4:	3f 91       	pop	r19
    46d6:	4f 91       	pop	r20
    46d8:	5f 91       	pop	r21
    46da:	52 df       	rcall	.-348    	; 0x4580 <__mulsf3>
    46dc:	0b c0       	rjmp	.+22     	; 0x46f4 <exp>

000046de <sin>:
    46de:	9f 93       	push	r25
    46e0:	d2 de       	rcall	.-604    	; 0x4486 <__fp_rempio2>
    46e2:	0f 90       	pop	r0
    46e4:	07 fc       	sbrc	r0, 7
    46e6:	ee 5f       	subi	r30, 0xFE	; 254
    46e8:	06 cf       	rjmp	.-500    	; 0x44f6 <__fp_sinus>
    46ea:	19 f4       	brne	.+6      	; 0x46f2 <sin+0x14>
    46ec:	0e f0       	brts	.+2      	; 0x46f0 <sin+0x12>
    46ee:	8e ce       	rjmp	.-740    	; 0x440c <__fp_inf>
    46f0:	35 cf       	rjmp	.-406    	; 0x455c <__fp_zero>
    46f2:	92 ce       	rjmp	.-732    	; 0x4418 <__fp_nan>

000046f4 <exp>:
    46f4:	19 df       	rcall	.-462    	; 0x4528 <__fp_splitA>
    46f6:	c8 f3       	brcs	.-14     	; 0x46ea <sin+0xc>
    46f8:	96 38       	cpi	r25, 0x86	; 134
    46fa:	c0 f7       	brcc	.-16     	; 0x46ec <sin+0xe>
    46fc:	07 f8       	bld	r0, 7
    46fe:	0f 92       	push	r0
    4700:	e8 94       	clt
    4702:	2b e3       	ldi	r18, 0x3B	; 59
    4704:	3a ea       	ldi	r19, 0xAA	; 170
    4706:	48 eb       	ldi	r20, 0xB8	; 184
    4708:	5f e7       	ldi	r21, 0x7F	; 127
    470a:	48 df       	rcall	.-368    	; 0x459c <__mulsf3_pse>
    470c:	0f 92       	push	r0
    470e:	0f 92       	push	r0
    4710:	0f 92       	push	r0
    4712:	4d b7       	in	r20, 0x3d	; 61
    4714:	5e b7       	in	r21, 0x3e	; 62
    4716:	0f 92       	push	r0
    4718:	b3 d0       	rcall	.+358    	; 0x4880 <modf>
    471a:	e8 e7       	ldi	r30, 0x78	; 120
    471c:	f1 e0       	ldi	r31, 0x01	; 1
    471e:	7f de       	rcall	.-770    	; 0x441e <__fp_powser>
    4720:	4f 91       	pop	r20
    4722:	5f 91       	pop	r21
    4724:	ef 91       	pop	r30
    4726:	ff 91       	pop	r31
    4728:	e5 95       	asr	r30
    472a:	ee 1f       	adc	r30, r30
    472c:	ff 1f       	adc	r31, r31
    472e:	49 f0       	breq	.+18     	; 0x4742 <exp+0x4e>
    4730:	fe 57       	subi	r31, 0x7E	; 126
    4732:	e0 68       	ori	r30, 0x80	; 128
    4734:	44 27       	eor	r20, r20
    4736:	ee 0f       	add	r30, r30
    4738:	44 1f       	adc	r20, r20
    473a:	fa 95       	dec	r31
    473c:	e1 f7       	brne	.-8      	; 0x4736 <exp+0x42>
    473e:	41 95       	neg	r20
    4740:	55 0b       	sbc	r21, r21
    4742:	25 d0       	rcall	.+74     	; 0x478e <ldexp>
    4744:	0f 90       	pop	r0
    4746:	07 fe       	sbrs	r0, 7
    4748:	14 cf       	rjmp	.-472    	; 0x4572 <inverse>
    474a:	08 95       	ret

0000474c <__fp_mpack>:
    474c:	9f 3f       	cpi	r25, 0xFF	; 255
    474e:	31 f0       	breq	.+12     	; 0x475c <__fp_mpack_finite+0xc>

00004750 <__fp_mpack_finite>:
    4750:	91 50       	subi	r25, 0x01	; 1
    4752:	20 f4       	brcc	.+8      	; 0x475c <__fp_mpack_finite+0xc>
    4754:	87 95       	ror	r24
    4756:	77 95       	ror	r23
    4758:	67 95       	ror	r22
    475a:	b7 95       	ror	r27
    475c:	88 0f       	add	r24, r24
    475e:	91 1d       	adc	r25, r1
    4760:	96 95       	lsr	r25
    4762:	87 95       	ror	r24
    4764:	97 f9       	bld	r25, 7
    4766:	08 95       	ret

00004768 <__fp_powsodd>:
    4768:	9f 93       	push	r25
    476a:	8f 93       	push	r24
    476c:	7f 93       	push	r23
    476e:	6f 93       	push	r22
    4770:	ff 93       	push	r31
    4772:	ef 93       	push	r30
    4774:	9b 01       	movw	r18, r22
    4776:	ac 01       	movw	r20, r24
    4778:	03 df       	rcall	.-506    	; 0x4580 <__mulsf3>
    477a:	ef 91       	pop	r30
    477c:	ff 91       	pop	r31
    477e:	4f de       	rcall	.-866    	; 0x441e <__fp_powser>
    4780:	2f 91       	pop	r18
    4782:	3f 91       	pop	r19
    4784:	4f 91       	pop	r20
    4786:	5f 91       	pop	r21
    4788:	fb ce       	rjmp	.-522    	; 0x4580 <__mulsf3>
    478a:	40 ce       	rjmp	.-896    	; 0x440c <__fp_inf>
    478c:	df cf       	rjmp	.-66     	; 0x474c <__fp_mpack>

0000478e <ldexp>:
    478e:	cc de       	rcall	.-616    	; 0x4528 <__fp_splitA>
    4790:	e8 f3       	brcs	.-6      	; 0x478c <__fp_powsodd+0x24>
    4792:	99 23       	and	r25, r25
    4794:	d9 f3       	breq	.-10     	; 0x478c <__fp_powsodd+0x24>
    4796:	94 0f       	add	r25, r20
    4798:	51 1d       	adc	r21, r1
    479a:	bb f3       	brvs	.-18     	; 0x478a <__fp_powsodd+0x22>
    479c:	91 50       	subi	r25, 0x01	; 1
    479e:	50 40       	sbci	r21, 0x00	; 0
    47a0:	94 f0       	brlt	.+36     	; 0x47c6 <ldexp+0x38>
    47a2:	59 f0       	breq	.+22     	; 0x47ba <ldexp+0x2c>
    47a4:	88 23       	and	r24, r24
    47a6:	32 f0       	brmi	.+12     	; 0x47b4 <ldexp+0x26>
    47a8:	66 0f       	add	r22, r22
    47aa:	77 1f       	adc	r23, r23
    47ac:	88 1f       	adc	r24, r24
    47ae:	91 50       	subi	r25, 0x01	; 1
    47b0:	50 40       	sbci	r21, 0x00	; 0
    47b2:	c1 f7       	brne	.-16     	; 0x47a4 <ldexp+0x16>
    47b4:	9e 3f       	cpi	r25, 0xFE	; 254
    47b6:	51 05       	cpc	r21, r1
    47b8:	44 f7       	brge	.-48     	; 0x478a <__fp_powsodd+0x22>
    47ba:	88 0f       	add	r24, r24
    47bc:	91 1d       	adc	r25, r1
    47be:	96 95       	lsr	r25
    47c0:	87 95       	ror	r24
    47c2:	97 f9       	bld	r25, 7
    47c4:	08 95       	ret
    47c6:	5f 3f       	cpi	r21, 0xFF	; 255
    47c8:	ac f0       	brlt	.+42     	; 0x47f4 <ldexp+0x66>
    47ca:	98 3e       	cpi	r25, 0xE8	; 232
    47cc:	9c f0       	brlt	.+38     	; 0x47f4 <ldexp+0x66>
    47ce:	bb 27       	eor	r27, r27
    47d0:	86 95       	lsr	r24
    47d2:	77 95       	ror	r23
    47d4:	67 95       	ror	r22
    47d6:	b7 95       	ror	r27
    47d8:	08 f4       	brcc	.+2      	; 0x47dc <ldexp+0x4e>
    47da:	b1 60       	ori	r27, 0x01	; 1
    47dc:	93 95       	inc	r25
    47de:	c1 f7       	brne	.-16     	; 0x47d0 <ldexp+0x42>
    47e0:	bb 0f       	add	r27, r27
    47e2:	58 f7       	brcc	.-42     	; 0x47ba <ldexp+0x2c>
    47e4:	11 f4       	brne	.+4      	; 0x47ea <ldexp+0x5c>
    47e6:	60 ff       	sbrs	r22, 0
    47e8:	e8 cf       	rjmp	.-48     	; 0x47ba <ldexp+0x2c>
    47ea:	6f 5f       	subi	r22, 0xFF	; 255
    47ec:	7f 4f       	sbci	r23, 0xFF	; 255
    47ee:	8f 4f       	sbci	r24, 0xFF	; 255
    47f0:	9f 4f       	sbci	r25, 0xFF	; 255
    47f2:	e3 cf       	rjmp	.-58     	; 0x47ba <ldexp+0x2c>
    47f4:	b4 ce       	rjmp	.-664    	; 0x455e <__fp_szero>
    47f6:	0e f0       	brts	.+2      	; 0x47fa <ldexp+0x6c>
    47f8:	a9 cf       	rjmp	.-174    	; 0x474c <__fp_mpack>
    47fa:	0e ce       	rjmp	.-996    	; 0x4418 <__fp_nan>
    47fc:	68 94       	set
    47fe:	06 ce       	rjmp	.-1012   	; 0x440c <__fp_inf>

00004800 <log>:
    4800:	93 de       	rcall	.-730    	; 0x4528 <__fp_splitA>
    4802:	c8 f3       	brcs	.-14     	; 0x47f6 <ldexp+0x68>
    4804:	99 23       	and	r25, r25
    4806:	d1 f3       	breq	.-12     	; 0x47fc <ldexp+0x6e>
    4808:	c6 f3       	brts	.-16     	; 0x47fa <ldexp+0x6c>
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	1f 93       	push	r17
    4810:	0f 93       	push	r16
    4812:	ff 92       	push	r15
    4814:	c9 2f       	mov	r28, r25
    4816:	dd 27       	eor	r29, r29
    4818:	88 23       	and	r24, r24
    481a:	2a f0       	brmi	.+10     	; 0x4826 <log+0x26>
    481c:	21 97       	sbiw	r28, 0x01	; 1
    481e:	66 0f       	add	r22, r22
    4820:	77 1f       	adc	r23, r23
    4822:	88 1f       	adc	r24, r24
    4824:	da f7       	brpl	.-10     	; 0x481c <log+0x1c>
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	40 e8       	ldi	r20, 0x80	; 128
    482c:	5f eb       	ldi	r21, 0xBF	; 191
    482e:	9f e3       	ldi	r25, 0x3F	; 63
    4830:	88 39       	cpi	r24, 0x98	; 152
    4832:	20 f0       	brcs	.+8      	; 0x483c <log+0x3c>
    4834:	80 3e       	cpi	r24, 0xE0	; 224
    4836:	30 f0       	brcs	.+12     	; 0x4844 <log+0x44>
    4838:	21 96       	adiw	r28, 0x01	; 1
    483a:	8f 77       	andi	r24, 0x7F	; 127
    483c:	86 dc       	rcall	.-1780   	; 0x414a <__addsf3>
    483e:	e0 ea       	ldi	r30, 0xA0	; 160
    4840:	f1 e0       	ldi	r31, 0x01	; 1
    4842:	03 c0       	rjmp	.+6      	; 0x484a <log+0x4a>
    4844:	82 dc       	rcall	.-1788   	; 0x414a <__addsf3>
    4846:	ed ec       	ldi	r30, 0xCD	; 205
    4848:	f1 e0       	ldi	r31, 0x01	; 1
    484a:	e9 dd       	rcall	.-1070   	; 0x441e <__fp_powser>
    484c:	8b 01       	movw	r16, r22
    484e:	be 01       	movw	r22, r28
    4850:	ec 01       	movw	r28, r24
    4852:	fb 2e       	mov	r15, r27
    4854:	6f 57       	subi	r22, 0x7F	; 127
    4856:	71 09       	sbc	r23, r1
    4858:	75 95       	asr	r23
    485a:	77 1f       	adc	r23, r23
    485c:	88 0b       	sbc	r24, r24
    485e:	99 0b       	sbc	r25, r25
    4860:	76 dd       	rcall	.-1300   	; 0x434e <__floatsisf>
    4862:	28 e1       	ldi	r18, 0x18	; 24
    4864:	32 e7       	ldi	r19, 0x72	; 114
    4866:	41 e3       	ldi	r20, 0x31	; 49
    4868:	5f e3       	ldi	r21, 0x3F	; 63
    486a:	96 de       	rcall	.-724    	; 0x4598 <__mulsf3x>
    486c:	af 2d       	mov	r26, r15
    486e:	98 01       	movw	r18, r16
    4870:	ae 01       	movw	r20, r28
    4872:	ff 90       	pop	r15
    4874:	0f 91       	pop	r16
    4876:	1f 91       	pop	r17
    4878:	cf 91       	pop	r28
    487a:	df 91       	pop	r29
    487c:	77 dc       	rcall	.-1810   	; 0x416c <__addsf3x>
    487e:	2a ce       	rjmp	.-940    	; 0x44d4 <__fp_round>

00004880 <modf>:
    4880:	fa 01       	movw	r30, r20
    4882:	dc 01       	movw	r26, r24
    4884:	aa 0f       	add	r26, r26
    4886:	bb 1f       	adc	r27, r27
    4888:	9b 01       	movw	r18, r22
    488a:	ac 01       	movw	r20, r24
    488c:	bf 57       	subi	r27, 0x7F	; 127
    488e:	28 f4       	brcc	.+10     	; 0x489a <modf+0x1a>
    4890:	22 27       	eor	r18, r18
    4892:	33 27       	eor	r19, r19
    4894:	44 27       	eor	r20, r20
    4896:	50 78       	andi	r21, 0x80	; 128
    4898:	1f c0       	rjmp	.+62     	; 0x48d8 <modf+0x58>
    489a:	b7 51       	subi	r27, 0x17	; 23
    489c:	88 f4       	brcc	.+34     	; 0x48c0 <modf+0x40>
    489e:	ab 2f       	mov	r26, r27
    48a0:	00 24       	eor	r0, r0
    48a2:	46 95       	lsr	r20
    48a4:	37 95       	ror	r19
    48a6:	27 95       	ror	r18
    48a8:	01 1c       	adc	r0, r1
    48aa:	a3 95       	inc	r26
    48ac:	d2 f3       	brmi	.-12     	; 0x48a2 <modf+0x22>
    48ae:	00 20       	and	r0, r0
    48b0:	69 f0       	breq	.+26     	; 0x48cc <modf+0x4c>
    48b2:	22 0f       	add	r18, r18
    48b4:	33 1f       	adc	r19, r19
    48b6:	44 1f       	adc	r20, r20
    48b8:	b3 95       	inc	r27
    48ba:	da f3       	brmi	.-10     	; 0x48b2 <modf+0x32>
    48bc:	0d d0       	rcall	.+26     	; 0x48d8 <modf+0x58>
    48be:	44 cc       	rjmp	.-1912   	; 0x4148 <__subsf3>
    48c0:	61 30       	cpi	r22, 0x01	; 1
    48c2:	71 05       	cpc	r23, r1
    48c4:	a0 e8       	ldi	r26, 0x80	; 128
    48c6:	8a 07       	cpc	r24, r26
    48c8:	b9 46       	sbci	r27, 0x69	; 105
    48ca:	30 f4       	brcc	.+12     	; 0x48d8 <modf+0x58>
    48cc:	9b 01       	movw	r18, r22
    48ce:	ac 01       	movw	r20, r24
    48d0:	66 27       	eor	r22, r22
    48d2:	77 27       	eor	r23, r23
    48d4:	88 27       	eor	r24, r24
    48d6:	90 78       	andi	r25, 0x80	; 128
    48d8:	30 96       	adiw	r30, 0x00	; 0
    48da:	21 f0       	breq	.+8      	; 0x48e4 <modf+0x64>
    48dc:	20 83       	st	Z, r18
    48de:	31 83       	std	Z+1, r19	; 0x01
    48e0:	42 83       	std	Z+2, r20	; 0x02
    48e2:	53 83       	std	Z+3, r21	; 0x03
    48e4:	08 95       	ret

000048e6 <vfprintf>:
    48e6:	2f 92       	push	r2
    48e8:	3f 92       	push	r3
    48ea:	4f 92       	push	r4
    48ec:	5f 92       	push	r5
    48ee:	6f 92       	push	r6
    48f0:	7f 92       	push	r7
    48f2:	8f 92       	push	r8
    48f4:	9f 92       	push	r9
    48f6:	af 92       	push	r10
    48f8:	bf 92       	push	r11
    48fa:	cf 92       	push	r12
    48fc:	df 92       	push	r13
    48fe:	ef 92       	push	r14
    4900:	ff 92       	push	r15
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	63 97       	sbiw	r28, 0x13	; 19
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	6c 01       	movw	r12, r24
    491c:	4b 01       	movw	r8, r22
    491e:	2a 01       	movw	r4, r20
    4920:	fc 01       	movw	r30, r24
    4922:	17 82       	std	Z+7, r1	; 0x07
    4924:	16 82       	std	Z+6, r1	; 0x06
    4926:	83 81       	ldd	r24, Z+3	; 0x03
    4928:	81 ff       	sbrs	r24, 1
    492a:	29 c3       	rjmp	.+1618   	; 0x4f7e <vfprintf+0x698>
    492c:	ae 01       	movw	r20, r28
    492e:	4f 5f       	subi	r20, 0xFF	; 255
    4930:	5f 4f       	sbci	r21, 0xFF	; 255
    4932:	3a 01       	movw	r6, r20
    4934:	f6 01       	movw	r30, r12
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	f4 01       	movw	r30, r8
    493a:	93 fd       	sbrc	r25, 3
    493c:	85 91       	lpm	r24, Z+
    493e:	93 ff       	sbrs	r25, 3
    4940:	81 91       	ld	r24, Z+
    4942:	4f 01       	movw	r8, r30
    4944:	88 23       	and	r24, r24
    4946:	09 f4       	brne	.+2      	; 0x494a <vfprintf+0x64>
    4948:	16 c3       	rjmp	.+1580   	; 0x4f76 <vfprintf+0x690>
    494a:	85 32       	cpi	r24, 0x25	; 37
    494c:	39 f4       	brne	.+14     	; 0x495c <vfprintf+0x76>
    494e:	93 fd       	sbrc	r25, 3
    4950:	85 91       	lpm	r24, Z+
    4952:	93 ff       	sbrs	r25, 3
    4954:	81 91       	ld	r24, Z+
    4956:	4f 01       	movw	r8, r30
    4958:	85 32       	cpi	r24, 0x25	; 37
    495a:	31 f4       	brne	.+12     	; 0x4968 <vfprintf+0x82>
    495c:	b6 01       	movw	r22, r12
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	90 d5       	rcall	.+2848   	; 0x5482 <fputc>
    4962:	52 01       	movw	r10, r4
    4964:	25 01       	movw	r4, r10
    4966:	e6 cf       	rjmp	.-52     	; 0x4934 <vfprintf+0x4e>
    4968:	10 e0       	ldi	r17, 0x00	; 0
    496a:	f1 2c       	mov	r15, r1
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	20 32       	cpi	r18, 0x20	; 32
    4970:	a0 f4       	brcc	.+40     	; 0x499a <vfprintf+0xb4>
    4972:	8b 32       	cpi	r24, 0x2B	; 43
    4974:	69 f0       	breq	.+26     	; 0x4990 <vfprintf+0xaa>
    4976:	30 f4       	brcc	.+12     	; 0x4984 <vfprintf+0x9e>
    4978:	80 32       	cpi	r24, 0x20	; 32
    497a:	59 f0       	breq	.+22     	; 0x4992 <vfprintf+0xac>
    497c:	83 32       	cpi	r24, 0x23	; 35
    497e:	69 f4       	brne	.+26     	; 0x499a <vfprintf+0xb4>
    4980:	20 61       	ori	r18, 0x10	; 16
    4982:	2c c0       	rjmp	.+88     	; 0x49dc <vfprintf+0xf6>
    4984:	8d 32       	cpi	r24, 0x2D	; 45
    4986:	39 f0       	breq	.+14     	; 0x4996 <vfprintf+0xb0>
    4988:	80 33       	cpi	r24, 0x30	; 48
    498a:	39 f4       	brne	.+14     	; 0x499a <vfprintf+0xb4>
    498c:	21 60       	ori	r18, 0x01	; 1
    498e:	26 c0       	rjmp	.+76     	; 0x49dc <vfprintf+0xf6>
    4990:	22 60       	ori	r18, 0x02	; 2
    4992:	24 60       	ori	r18, 0x04	; 4
    4994:	23 c0       	rjmp	.+70     	; 0x49dc <vfprintf+0xf6>
    4996:	28 60       	ori	r18, 0x08	; 8
    4998:	21 c0       	rjmp	.+66     	; 0x49dc <vfprintf+0xf6>
    499a:	27 fd       	sbrc	r18, 7
    499c:	27 c0       	rjmp	.+78     	; 0x49ec <vfprintf+0x106>
    499e:	30 ed       	ldi	r19, 0xD0	; 208
    49a0:	38 0f       	add	r19, r24
    49a2:	3a 30       	cpi	r19, 0x0A	; 10
    49a4:	78 f4       	brcc	.+30     	; 0x49c4 <vfprintf+0xde>
    49a6:	26 ff       	sbrs	r18, 6
    49a8:	06 c0       	rjmp	.+12     	; 0x49b6 <vfprintf+0xd0>
    49aa:	fa e0       	ldi	r31, 0x0A	; 10
    49ac:	1f 9f       	mul	r17, r31
    49ae:	30 0d       	add	r19, r0
    49b0:	11 24       	eor	r1, r1
    49b2:	13 2f       	mov	r17, r19
    49b4:	13 c0       	rjmp	.+38     	; 0x49dc <vfprintf+0xf6>
    49b6:	4a e0       	ldi	r20, 0x0A	; 10
    49b8:	f4 9e       	mul	r15, r20
    49ba:	30 0d       	add	r19, r0
    49bc:	11 24       	eor	r1, r1
    49be:	f3 2e       	mov	r15, r19
    49c0:	20 62       	ori	r18, 0x20	; 32
    49c2:	0c c0       	rjmp	.+24     	; 0x49dc <vfprintf+0xf6>
    49c4:	8e 32       	cpi	r24, 0x2E	; 46
    49c6:	21 f4       	brne	.+8      	; 0x49d0 <vfprintf+0xea>
    49c8:	26 fd       	sbrc	r18, 6
    49ca:	d5 c2       	rjmp	.+1450   	; 0x4f76 <vfprintf+0x690>
    49cc:	20 64       	ori	r18, 0x40	; 64
    49ce:	06 c0       	rjmp	.+12     	; 0x49dc <vfprintf+0xf6>
    49d0:	8c 36       	cpi	r24, 0x6C	; 108
    49d2:	11 f4       	brne	.+4      	; 0x49d8 <vfprintf+0xf2>
    49d4:	20 68       	ori	r18, 0x80	; 128
    49d6:	02 c0       	rjmp	.+4      	; 0x49dc <vfprintf+0xf6>
    49d8:	88 36       	cpi	r24, 0x68	; 104
    49da:	41 f4       	brne	.+16     	; 0x49ec <vfprintf+0x106>
    49dc:	f4 01       	movw	r30, r8
    49de:	93 fd       	sbrc	r25, 3
    49e0:	85 91       	lpm	r24, Z+
    49e2:	93 ff       	sbrs	r25, 3
    49e4:	81 91       	ld	r24, Z+
    49e6:	4f 01       	movw	r8, r30
    49e8:	81 11       	cpse	r24, r1
    49ea:	c1 cf       	rjmp	.-126    	; 0x496e <vfprintf+0x88>
    49ec:	9b eb       	ldi	r25, 0xBB	; 187
    49ee:	98 0f       	add	r25, r24
    49f0:	93 30       	cpi	r25, 0x03	; 3
    49f2:	18 f4       	brcc	.+6      	; 0x49fa <vfprintf+0x114>
    49f4:	20 61       	ori	r18, 0x10	; 16
    49f6:	80 5e       	subi	r24, 0xE0	; 224
    49f8:	06 c0       	rjmp	.+12     	; 0x4a06 <vfprintf+0x120>
    49fa:	9b e9       	ldi	r25, 0x9B	; 155
    49fc:	98 0f       	add	r25, r24
    49fe:	93 30       	cpi	r25, 0x03	; 3
    4a00:	08 f0       	brcs	.+2      	; 0x4a04 <vfprintf+0x11e>
    4a02:	64 c1       	rjmp	.+712    	; 0x4ccc <vfprintf+0x3e6>
    4a04:	2f 7e       	andi	r18, 0xEF	; 239
    4a06:	26 ff       	sbrs	r18, 6
    4a08:	16 e0       	ldi	r17, 0x06	; 6
    4a0a:	2f 73       	andi	r18, 0x3F	; 63
    4a0c:	32 2e       	mov	r3, r18
    4a0e:	85 36       	cpi	r24, 0x65	; 101
    4a10:	19 f4       	brne	.+6      	; 0x4a18 <vfprintf+0x132>
    4a12:	20 64       	ori	r18, 0x40	; 64
    4a14:	32 2e       	mov	r3, r18
    4a16:	08 c0       	rjmp	.+16     	; 0x4a28 <vfprintf+0x142>
    4a18:	86 36       	cpi	r24, 0x66	; 102
    4a1a:	21 f4       	brne	.+8      	; 0x4a24 <vfprintf+0x13e>
    4a1c:	f2 2f       	mov	r31, r18
    4a1e:	f0 68       	ori	r31, 0x80	; 128
    4a20:	3f 2e       	mov	r3, r31
    4a22:	02 c0       	rjmp	.+4      	; 0x4a28 <vfprintf+0x142>
    4a24:	11 11       	cpse	r17, r1
    4a26:	11 50       	subi	r17, 0x01	; 1
    4a28:	37 fe       	sbrs	r3, 7
    4a2a:	07 c0       	rjmp	.+14     	; 0x4a3a <vfprintf+0x154>
    4a2c:	1c 33       	cpi	r17, 0x3C	; 60
    4a2e:	50 f4       	brcc	.+20     	; 0x4a44 <vfprintf+0x15e>
    4a30:	ee 24       	eor	r14, r14
    4a32:	e3 94       	inc	r14
    4a34:	e1 0e       	add	r14, r17
    4a36:	27 e0       	ldi	r18, 0x07	; 7
    4a38:	0b c0       	rjmp	.+22     	; 0x4a50 <vfprintf+0x16a>
    4a3a:	18 30       	cpi	r17, 0x08	; 8
    4a3c:	38 f0       	brcs	.+14     	; 0x4a4c <vfprintf+0x166>
    4a3e:	27 e0       	ldi	r18, 0x07	; 7
    4a40:	17 e0       	ldi	r17, 0x07	; 7
    4a42:	05 c0       	rjmp	.+10     	; 0x4a4e <vfprintf+0x168>
    4a44:	27 e0       	ldi	r18, 0x07	; 7
    4a46:	4c e3       	ldi	r20, 0x3C	; 60
    4a48:	e4 2e       	mov	r14, r20
    4a4a:	02 c0       	rjmp	.+4      	; 0x4a50 <vfprintf+0x16a>
    4a4c:	21 2f       	mov	r18, r17
    4a4e:	e1 2c       	mov	r14, r1
    4a50:	52 01       	movw	r10, r4
    4a52:	44 e0       	ldi	r20, 0x04	; 4
    4a54:	a4 0e       	add	r10, r20
    4a56:	b1 1c       	adc	r11, r1
    4a58:	f2 01       	movw	r30, r4
    4a5a:	60 81       	ld	r22, Z
    4a5c:	71 81       	ldd	r23, Z+1	; 0x01
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	93 81       	ldd	r25, Z+3	; 0x03
    4a62:	0e 2d       	mov	r16, r14
    4a64:	a3 01       	movw	r20, r6
    4a66:	1f d4       	rcall	.+2110   	; 0x52a6 <__ftoa_engine>
    4a68:	2c 01       	movw	r4, r24
    4a6a:	09 81       	ldd	r16, Y+1	; 0x01
    4a6c:	00 ff       	sbrs	r16, 0
    4a6e:	02 c0       	rjmp	.+4      	; 0x4a74 <vfprintf+0x18e>
    4a70:	03 ff       	sbrs	r16, 3
    4a72:	07 c0       	rjmp	.+14     	; 0x4a82 <vfprintf+0x19c>
    4a74:	31 fc       	sbrc	r3, 1
    4a76:	08 c0       	rjmp	.+16     	; 0x4a88 <vfprintf+0x1a2>
    4a78:	32 fe       	sbrs	r3, 2
    4a7a:	09 c0       	rjmp	.+18     	; 0x4a8e <vfprintf+0x1a8>
    4a7c:	30 e2       	ldi	r19, 0x20	; 32
    4a7e:	23 2e       	mov	r2, r19
    4a80:	07 c0       	rjmp	.+14     	; 0x4a90 <vfprintf+0x1aa>
    4a82:	2d e2       	ldi	r18, 0x2D	; 45
    4a84:	22 2e       	mov	r2, r18
    4a86:	04 c0       	rjmp	.+8      	; 0x4a90 <vfprintf+0x1aa>
    4a88:	9b e2       	ldi	r25, 0x2B	; 43
    4a8a:	29 2e       	mov	r2, r25
    4a8c:	01 c0       	rjmp	.+2      	; 0x4a90 <vfprintf+0x1aa>
    4a8e:	21 2c       	mov	r2, r1
    4a90:	80 2f       	mov	r24, r16
    4a92:	8c 70       	andi	r24, 0x0C	; 12
    4a94:	19 f0       	breq	.+6      	; 0x4a9c <vfprintf+0x1b6>
    4a96:	21 10       	cpse	r2, r1
    4a98:	51 c2       	rjmp	.+1186   	; 0x4f3c <vfprintf+0x656>
    4a9a:	8d c2       	rjmp	.+1306   	; 0x4fb6 <vfprintf+0x6d0>
    4a9c:	37 fe       	sbrs	r3, 7
    4a9e:	0f c0       	rjmp	.+30     	; 0x4abe <vfprintf+0x1d8>
    4aa0:	e4 0c       	add	r14, r4
    4aa2:	04 ff       	sbrs	r16, 4
    4aa4:	04 c0       	rjmp	.+8      	; 0x4aae <vfprintf+0x1c8>
    4aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa8:	81 33       	cpi	r24, 0x31	; 49
    4aaa:	09 f4       	brne	.+2      	; 0x4aae <vfprintf+0x1c8>
    4aac:	ea 94       	dec	r14
    4aae:	1e 14       	cp	r1, r14
    4ab0:	74 f5       	brge	.+92     	; 0x4b0e <vfprintf+0x228>
    4ab2:	f8 e0       	ldi	r31, 0x08	; 8
    4ab4:	fe 15       	cp	r31, r14
    4ab6:	78 f5       	brcc	.+94     	; 0x4b16 <vfprintf+0x230>
    4ab8:	88 e0       	ldi	r24, 0x08	; 8
    4aba:	e8 2e       	mov	r14, r24
    4abc:	2c c0       	rjmp	.+88     	; 0x4b16 <vfprintf+0x230>
    4abe:	36 fc       	sbrc	r3, 6
    4ac0:	2a c0       	rjmp	.+84     	; 0x4b16 <vfprintf+0x230>
    4ac2:	81 2f       	mov	r24, r17
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	84 15       	cp	r24, r4
    4ac8:	95 05       	cpc	r25, r5
    4aca:	9c f0       	brlt	.+38     	; 0x4af2 <vfprintf+0x20c>
    4acc:	2c ef       	ldi	r18, 0xFC	; 252
    4ace:	42 16       	cp	r4, r18
    4ad0:	2f ef       	ldi	r18, 0xFF	; 255
    4ad2:	52 06       	cpc	r5, r18
    4ad4:	74 f0       	brlt	.+28     	; 0x4af2 <vfprintf+0x20c>
    4ad6:	43 2d       	mov	r20, r3
    4ad8:	40 68       	ori	r20, 0x80	; 128
    4ada:	34 2e       	mov	r3, r20
    4adc:	0a c0       	rjmp	.+20     	; 0x4af2 <vfprintf+0x20c>
    4ade:	e2 e0       	ldi	r30, 0x02	; 2
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	ec 0f       	add	r30, r28
    4ae4:	fd 1f       	adc	r31, r29
    4ae6:	e1 0f       	add	r30, r17
    4ae8:	f1 1d       	adc	r31, r1
    4aea:	80 81       	ld	r24, Z
    4aec:	80 33       	cpi	r24, 0x30	; 48
    4aee:	19 f4       	brne	.+6      	; 0x4af6 <vfprintf+0x210>
    4af0:	11 50       	subi	r17, 0x01	; 1
    4af2:	11 11       	cpse	r17, r1
    4af4:	f4 cf       	rjmp	.-24     	; 0x4ade <vfprintf+0x1f8>
    4af6:	37 fe       	sbrs	r3, 7
    4af8:	0e c0       	rjmp	.+28     	; 0x4b16 <vfprintf+0x230>
    4afa:	ee 24       	eor	r14, r14
    4afc:	e3 94       	inc	r14
    4afe:	e1 0e       	add	r14, r17
    4b00:	81 2f       	mov	r24, r17
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	48 16       	cp	r4, r24
    4b06:	59 06       	cpc	r5, r25
    4b08:	2c f4       	brge	.+10     	; 0x4b14 <vfprintf+0x22e>
    4b0a:	14 19       	sub	r17, r4
    4b0c:	04 c0       	rjmp	.+8      	; 0x4b16 <vfprintf+0x230>
    4b0e:	ee 24       	eor	r14, r14
    4b10:	e3 94       	inc	r14
    4b12:	01 c0       	rjmp	.+2      	; 0x4b16 <vfprintf+0x230>
    4b14:	10 e0       	ldi	r17, 0x00	; 0
    4b16:	37 fe       	sbrs	r3, 7
    4b18:	06 c0       	rjmp	.+12     	; 0x4b26 <vfprintf+0x240>
    4b1a:	14 14       	cp	r1, r4
    4b1c:	15 04       	cpc	r1, r5
    4b1e:	34 f4       	brge	.+12     	; 0x4b2c <vfprintf+0x246>
    4b20:	c2 01       	movw	r24, r4
    4b22:	01 96       	adiw	r24, 0x01	; 1
    4b24:	05 c0       	rjmp	.+10     	; 0x4b30 <vfprintf+0x24a>
    4b26:	85 e0       	ldi	r24, 0x05	; 5
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	02 c0       	rjmp	.+4      	; 0x4b30 <vfprintf+0x24a>
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	21 10       	cpse	r2, r1
    4b32:	01 96       	adiw	r24, 0x01	; 1
    4b34:	11 23       	and	r17, r17
    4b36:	31 f0       	breq	.+12     	; 0x4b44 <vfprintf+0x25e>
    4b38:	21 2f       	mov	r18, r17
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	2f 5f       	subi	r18, 0xFF	; 255
    4b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b40:	82 0f       	add	r24, r18
    4b42:	93 1f       	adc	r25, r19
    4b44:	2f 2d       	mov	r18, r15
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	82 17       	cp	r24, r18
    4b4a:	93 07       	cpc	r25, r19
    4b4c:	14 f4       	brge	.+4      	; 0x4b52 <vfprintf+0x26c>
    4b4e:	f8 1a       	sub	r15, r24
    4b50:	01 c0       	rjmp	.+2      	; 0x4b54 <vfprintf+0x26e>
    4b52:	f1 2c       	mov	r15, r1
    4b54:	83 2d       	mov	r24, r3
    4b56:	89 70       	andi	r24, 0x09	; 9
    4b58:	41 f4       	brne	.+16     	; 0x4b6a <vfprintf+0x284>
    4b5a:	ff 20       	and	r15, r15
    4b5c:	31 f0       	breq	.+12     	; 0x4b6a <vfprintf+0x284>
    4b5e:	b6 01       	movw	r22, r12
    4b60:	80 e2       	ldi	r24, 0x20	; 32
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	8e d4       	rcall	.+2332   	; 0x5482 <fputc>
    4b66:	fa 94       	dec	r15
    4b68:	f8 cf       	rjmp	.-16     	; 0x4b5a <vfprintf+0x274>
    4b6a:	22 20       	and	r2, r2
    4b6c:	21 f0       	breq	.+8      	; 0x4b76 <vfprintf+0x290>
    4b6e:	b6 01       	movw	r22, r12
    4b70:	82 2d       	mov	r24, r2
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	86 d4       	rcall	.+2316   	; 0x5482 <fputc>
    4b76:	33 fc       	sbrc	r3, 3
    4b78:	08 c0       	rjmp	.+16     	; 0x4b8a <vfprintf+0x2a4>
    4b7a:	ff 20       	and	r15, r15
    4b7c:	31 f0       	breq	.+12     	; 0x4b8a <vfprintf+0x2a4>
    4b7e:	b6 01       	movw	r22, r12
    4b80:	80 e3       	ldi	r24, 0x30	; 48
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	7e d4       	rcall	.+2300   	; 0x5482 <fputc>
    4b86:	fa 94       	dec	r15
    4b88:	f8 cf       	rjmp	.-16     	; 0x4b7a <vfprintf+0x294>
    4b8a:	37 fe       	sbrs	r3, 7
    4b8c:	58 c0       	rjmp	.+176    	; 0x4c3e <vfprintf+0x358>
    4b8e:	94 2d       	mov	r25, r4
    4b90:	85 2d       	mov	r24, r5
    4b92:	57 fe       	sbrs	r5, 7
    4b94:	02 c0       	rjmp	.+4      	; 0x4b9a <vfprintf+0x2b4>
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	29 2e       	mov	r2, r25
    4b9c:	38 2e       	mov	r3, r24
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	a2 01       	movw	r20, r4
    4ba4:	4e 19       	sub	r20, r14
    4ba6:	51 09       	sbc	r21, r1
    4ba8:	5d 87       	std	Y+13, r21	; 0x0d
    4baa:	4c 87       	std	Y+12, r20	; 0x0c
    4bac:	a2 01       	movw	r20, r4
    4bae:	42 19       	sub	r20, r2
    4bb0:	53 09       	sbc	r21, r3
    4bb2:	5f 87       	std	Y+15, r21	; 0x0f
    4bb4:	4e 87       	std	Y+14, r20	; 0x0e
    4bb6:	61 2f       	mov	r22, r17
    4bb8:	70 e0       	ldi	r23, 0x00	; 0
    4bba:	44 27       	eor	r20, r20
    4bbc:	55 27       	eor	r21, r21
    4bbe:	46 1b       	sub	r20, r22
    4bc0:	57 0b       	sbc	r21, r23
    4bc2:	59 8b       	std	Y+17, r21	; 0x11
    4bc4:	48 8b       	std	Y+16, r20	; 0x10
    4bc6:	5f ef       	ldi	r21, 0xFF	; 255
    4bc8:	25 16       	cp	r2, r21
    4bca:	35 06       	cpc	r3, r21
    4bcc:	41 f4       	brne	.+16     	; 0x4bde <vfprintf+0x2f8>
    4bce:	b6 01       	movw	r22, r12
    4bd0:	8e e2       	ldi	r24, 0x2E	; 46
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	2a 8b       	std	Y+18, r18	; 0x12
    4bd6:	3b 8b       	std	Y+19, r19	; 0x13
    4bd8:	54 d4       	rcall	.+2216   	; 0x5482 <fputc>
    4bda:	3b 89       	ldd	r19, Y+19	; 0x13
    4bdc:	2a 89       	ldd	r18, Y+18	; 0x12
    4bde:	42 14       	cp	r4, r2
    4be0:	53 04       	cpc	r5, r3
    4be2:	6c f0       	brlt	.+26     	; 0x4bfe <vfprintf+0x318>
    4be4:	4c 85       	ldd	r20, Y+12	; 0x0c
    4be6:	5d 85       	ldd	r21, Y+13	; 0x0d
    4be8:	42 15       	cp	r20, r2
    4bea:	53 05       	cpc	r21, r3
    4bec:	44 f4       	brge	.+16     	; 0x4bfe <vfprintf+0x318>
    4bee:	ee 85       	ldd	r30, Y+14	; 0x0e
    4bf0:	ff 85       	ldd	r31, Y+15	; 0x0f
    4bf2:	e2 0f       	add	r30, r18
    4bf4:	f3 1f       	adc	r31, r19
    4bf6:	e6 0d       	add	r30, r6
    4bf8:	f7 1d       	adc	r31, r7
    4bfa:	81 81       	ldd	r24, Z+1	; 0x01
    4bfc:	01 c0       	rjmp	.+2      	; 0x4c00 <vfprintf+0x31a>
    4bfe:	80 e3       	ldi	r24, 0x30	; 48
    4c00:	51 e0       	ldi	r21, 0x01	; 1
    4c02:	25 1a       	sub	r2, r21
    4c04:	31 08       	sbc	r3, r1
    4c06:	2f 5f       	subi	r18, 0xFF	; 255
    4c08:	3f 4f       	sbci	r19, 0xFF	; 255
    4c0a:	48 89       	ldd	r20, Y+16	; 0x10
    4c0c:	59 89       	ldd	r21, Y+17	; 0x11
    4c0e:	24 16       	cp	r2, r20
    4c10:	35 06       	cpc	r3, r21
    4c12:	44 f0       	brlt	.+16     	; 0x4c24 <vfprintf+0x33e>
    4c14:	b6 01       	movw	r22, r12
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	2a 8b       	std	Y+18, r18	; 0x12
    4c1a:	3b 8b       	std	Y+19, r19	; 0x13
    4c1c:	32 d4       	rcall	.+2148   	; 0x5482 <fputc>
    4c1e:	2a 89       	ldd	r18, Y+18	; 0x12
    4c20:	3b 89       	ldd	r19, Y+19	; 0x13
    4c22:	d1 cf       	rjmp	.-94     	; 0x4bc6 <vfprintf+0x2e0>
    4c24:	24 14       	cp	r2, r4
    4c26:	35 04       	cpc	r3, r5
    4c28:	39 f4       	brne	.+14     	; 0x4c38 <vfprintf+0x352>
    4c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c2c:	96 33       	cpi	r25, 0x36	; 54
    4c2e:	18 f4       	brcc	.+6      	; 0x4c36 <vfprintf+0x350>
    4c30:	95 33       	cpi	r25, 0x35	; 53
    4c32:	11 f4       	brne	.+4      	; 0x4c38 <vfprintf+0x352>
    4c34:	04 ff       	sbrs	r16, 4
    4c36:	81 e3       	ldi	r24, 0x31	; 49
    4c38:	b6 01       	movw	r22, r12
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	45 c0       	rjmp	.+138    	; 0x4cc8 <vfprintf+0x3e2>
    4c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c40:	81 33       	cpi	r24, 0x31	; 49
    4c42:	09 f0       	breq	.+2      	; 0x4c46 <vfprintf+0x360>
    4c44:	0f 7e       	andi	r16, 0xEF	; 239
    4c46:	b6 01       	movw	r22, r12
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	1b d4       	rcall	.+2102   	; 0x5482 <fputc>
    4c4c:	11 11       	cpse	r17, r1
    4c4e:	05 c0       	rjmp	.+10     	; 0x4c5a <vfprintf+0x374>
    4c50:	34 fc       	sbrc	r3, 4
    4c52:	16 c0       	rjmp	.+44     	; 0x4c80 <vfprintf+0x39a>
    4c54:	85 e6       	ldi	r24, 0x65	; 101
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	15 c0       	rjmp	.+42     	; 0x4c84 <vfprintf+0x39e>
    4c5a:	b6 01       	movw	r22, r12
    4c5c:	8e e2       	ldi	r24, 0x2E	; 46
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	10 d4       	rcall	.+2080   	; 0x5482 <fputc>
    4c62:	82 e0       	ldi	r24, 0x02	; 2
    4c64:	ee 24       	eor	r14, r14
    4c66:	e3 94       	inc	r14
    4c68:	e8 0e       	add	r14, r24
    4c6a:	f3 01       	movw	r30, r6
    4c6c:	e8 0f       	add	r30, r24
    4c6e:	f1 1d       	adc	r31, r1
    4c70:	80 81       	ld	r24, Z
    4c72:	b6 01       	movw	r22, r12
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	05 d4       	rcall	.+2058   	; 0x5482 <fputc>
    4c78:	11 50       	subi	r17, 0x01	; 1
    4c7a:	8e 2d       	mov	r24, r14
    4c7c:	99 f7       	brne	.-26     	; 0x4c64 <vfprintf+0x37e>
    4c7e:	e8 cf       	rjmp	.-48     	; 0x4c50 <vfprintf+0x36a>
    4c80:	85 e4       	ldi	r24, 0x45	; 69
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	b6 01       	movw	r22, r12
    4c86:	fd d3       	rcall	.+2042   	; 0x5482 <fputc>
    4c88:	57 fc       	sbrc	r5, 7
    4c8a:	05 c0       	rjmp	.+10     	; 0x4c96 <vfprintf+0x3b0>
    4c8c:	41 14       	cp	r4, r1
    4c8e:	51 04       	cpc	r5, r1
    4c90:	39 f4       	brne	.+14     	; 0x4ca0 <vfprintf+0x3ba>
    4c92:	04 ff       	sbrs	r16, 4
    4c94:	05 c0       	rjmp	.+10     	; 0x4ca0 <vfprintf+0x3ba>
    4c96:	51 94       	neg	r5
    4c98:	41 94       	neg	r4
    4c9a:	51 08       	sbc	r5, r1
    4c9c:	8d e2       	ldi	r24, 0x2D	; 45
    4c9e:	01 c0       	rjmp	.+2      	; 0x4ca2 <vfprintf+0x3bc>
    4ca0:	8b e2       	ldi	r24, 0x2B	; 43
    4ca2:	b6 01       	movw	r22, r12
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	ed d3       	rcall	.+2010   	; 0x5482 <fputc>
    4ca8:	80 e3       	ldi	r24, 0x30	; 48
    4caa:	9a e0       	ldi	r25, 0x0A	; 10
    4cac:	49 16       	cp	r4, r25
    4cae:	51 04       	cpc	r5, r1
    4cb0:	2c f0       	brlt	.+10     	; 0x4cbc <vfprintf+0x3d6>
    4cb2:	8f 5f       	subi	r24, 0xFF	; 255
    4cb4:	5a e0       	ldi	r21, 0x0A	; 10
    4cb6:	45 1a       	sub	r4, r21
    4cb8:	51 08       	sbc	r5, r1
    4cba:	f7 cf       	rjmp	.-18     	; 0x4caa <vfprintf+0x3c4>
    4cbc:	b6 01       	movw	r22, r12
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	e0 d3       	rcall	.+1984   	; 0x5482 <fputc>
    4cc2:	b6 01       	movw	r22, r12
    4cc4:	c2 01       	movw	r24, r4
    4cc6:	c0 96       	adiw	r24, 0x30	; 48
    4cc8:	dc d3       	rcall	.+1976   	; 0x5482 <fputc>
    4cca:	4c c1       	rjmp	.+664    	; 0x4f64 <vfprintf+0x67e>
    4ccc:	83 36       	cpi	r24, 0x63	; 99
    4cce:	31 f0       	breq	.+12     	; 0x4cdc <vfprintf+0x3f6>
    4cd0:	83 37       	cpi	r24, 0x73	; 115
    4cd2:	79 f0       	breq	.+30     	; 0x4cf2 <vfprintf+0x40c>
    4cd4:	83 35       	cpi	r24, 0x53	; 83
    4cd6:	09 f0       	breq	.+2      	; 0x4cda <vfprintf+0x3f4>
    4cd8:	54 c0       	rjmp	.+168    	; 0x4d82 <vfprintf+0x49c>
    4cda:	20 c0       	rjmp	.+64     	; 0x4d1c <vfprintf+0x436>
    4cdc:	52 01       	movw	r10, r4
    4cde:	e2 e0       	ldi	r30, 0x02	; 2
    4ce0:	ae 0e       	add	r10, r30
    4ce2:	b1 1c       	adc	r11, r1
    4ce4:	f2 01       	movw	r30, r4
    4ce6:	80 81       	ld	r24, Z
    4ce8:	89 83       	std	Y+1, r24	; 0x01
    4cea:	01 e0       	ldi	r16, 0x01	; 1
    4cec:	10 e0       	ldi	r17, 0x00	; 0
    4cee:	23 01       	movw	r4, r6
    4cf0:	13 c0       	rjmp	.+38     	; 0x4d18 <vfprintf+0x432>
    4cf2:	52 01       	movw	r10, r4
    4cf4:	f2 e0       	ldi	r31, 0x02	; 2
    4cf6:	af 0e       	add	r10, r31
    4cf8:	b1 1c       	adc	r11, r1
    4cfa:	f2 01       	movw	r30, r4
    4cfc:	40 80       	ld	r4, Z
    4cfe:	51 80       	ldd	r5, Z+1	; 0x01
    4d00:	26 ff       	sbrs	r18, 6
    4d02:	03 c0       	rjmp	.+6      	; 0x4d0a <vfprintf+0x424>
    4d04:	61 2f       	mov	r22, r17
    4d06:	70 e0       	ldi	r23, 0x00	; 0
    4d08:	02 c0       	rjmp	.+4      	; 0x4d0e <vfprintf+0x428>
    4d0a:	6f ef       	ldi	r22, 0xFF	; 255
    4d0c:	7f ef       	ldi	r23, 0xFF	; 255
    4d0e:	c2 01       	movw	r24, r4
    4d10:	2a 8b       	std	Y+18, r18	; 0x12
    4d12:	ac d3       	rcall	.+1880   	; 0x546c <strnlen>
    4d14:	8c 01       	movw	r16, r24
    4d16:	2a 89       	ldd	r18, Y+18	; 0x12
    4d18:	2f 77       	andi	r18, 0x7F	; 127
    4d1a:	14 c0       	rjmp	.+40     	; 0x4d44 <vfprintf+0x45e>
    4d1c:	52 01       	movw	r10, r4
    4d1e:	f2 e0       	ldi	r31, 0x02	; 2
    4d20:	af 0e       	add	r10, r31
    4d22:	b1 1c       	adc	r11, r1
    4d24:	f2 01       	movw	r30, r4
    4d26:	40 80       	ld	r4, Z
    4d28:	51 80       	ldd	r5, Z+1	; 0x01
    4d2a:	26 ff       	sbrs	r18, 6
    4d2c:	03 c0       	rjmp	.+6      	; 0x4d34 <vfprintf+0x44e>
    4d2e:	61 2f       	mov	r22, r17
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	02 c0       	rjmp	.+4      	; 0x4d38 <vfprintf+0x452>
    4d34:	6f ef       	ldi	r22, 0xFF	; 255
    4d36:	7f ef       	ldi	r23, 0xFF	; 255
    4d38:	c2 01       	movw	r24, r4
    4d3a:	2a 8b       	std	Y+18, r18	; 0x12
    4d3c:	8c d3       	rcall	.+1816   	; 0x5456 <strnlen_P>
    4d3e:	8c 01       	movw	r16, r24
    4d40:	2a 89       	ldd	r18, Y+18	; 0x12
    4d42:	20 68       	ori	r18, 0x80	; 128
    4d44:	32 2e       	mov	r3, r18
    4d46:	23 fd       	sbrc	r18, 3
    4d48:	18 c0       	rjmp	.+48     	; 0x4d7a <vfprintf+0x494>
    4d4a:	8f 2d       	mov	r24, r15
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	08 17       	cp	r16, r24
    4d50:	19 07       	cpc	r17, r25
    4d52:	98 f4       	brcc	.+38     	; 0x4d7a <vfprintf+0x494>
    4d54:	b6 01       	movw	r22, r12
    4d56:	80 e2       	ldi	r24, 0x20	; 32
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	93 d3       	rcall	.+1830   	; 0x5482 <fputc>
    4d5c:	fa 94       	dec	r15
    4d5e:	f5 cf       	rjmp	.-22     	; 0x4d4a <vfprintf+0x464>
    4d60:	f2 01       	movw	r30, r4
    4d62:	37 fc       	sbrc	r3, 7
    4d64:	85 91       	lpm	r24, Z+
    4d66:	37 fe       	sbrs	r3, 7
    4d68:	81 91       	ld	r24, Z+
    4d6a:	2f 01       	movw	r4, r30
    4d6c:	b6 01       	movw	r22, r12
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	88 d3       	rcall	.+1808   	; 0x5482 <fputc>
    4d72:	f1 10       	cpse	r15, r1
    4d74:	fa 94       	dec	r15
    4d76:	01 50       	subi	r16, 0x01	; 1
    4d78:	11 09       	sbc	r17, r1
    4d7a:	01 15       	cp	r16, r1
    4d7c:	11 05       	cpc	r17, r1
    4d7e:	81 f7       	brne	.-32     	; 0x4d60 <vfprintf+0x47a>
    4d80:	f1 c0       	rjmp	.+482    	; 0x4f64 <vfprintf+0x67e>
    4d82:	84 36       	cpi	r24, 0x64	; 100
    4d84:	11 f0       	breq	.+4      	; 0x4d8a <vfprintf+0x4a4>
    4d86:	89 36       	cpi	r24, 0x69	; 105
    4d88:	51 f5       	brne	.+84     	; 0x4dde <vfprintf+0x4f8>
    4d8a:	52 01       	movw	r10, r4
    4d8c:	27 ff       	sbrs	r18, 7
    4d8e:	09 c0       	rjmp	.+18     	; 0x4da2 <vfprintf+0x4bc>
    4d90:	f4 e0       	ldi	r31, 0x04	; 4
    4d92:	af 0e       	add	r10, r31
    4d94:	b1 1c       	adc	r11, r1
    4d96:	f2 01       	movw	r30, r4
    4d98:	60 81       	ld	r22, Z
    4d9a:	71 81       	ldd	r23, Z+1	; 0x01
    4d9c:	82 81       	ldd	r24, Z+2	; 0x02
    4d9e:	93 81       	ldd	r25, Z+3	; 0x03
    4da0:	0a c0       	rjmp	.+20     	; 0x4db6 <vfprintf+0x4d0>
    4da2:	f2 e0       	ldi	r31, 0x02	; 2
    4da4:	af 0e       	add	r10, r31
    4da6:	b1 1c       	adc	r11, r1
    4da8:	f2 01       	movw	r30, r4
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	07 2e       	mov	r0, r23
    4db0:	00 0c       	add	r0, r0
    4db2:	88 0b       	sbc	r24, r24
    4db4:	99 0b       	sbc	r25, r25
    4db6:	2f 76       	andi	r18, 0x6F	; 111
    4db8:	32 2e       	mov	r3, r18
    4dba:	97 ff       	sbrs	r25, 7
    4dbc:	09 c0       	rjmp	.+18     	; 0x4dd0 <vfprintf+0x4ea>
    4dbe:	90 95       	com	r25
    4dc0:	80 95       	com	r24
    4dc2:	70 95       	com	r23
    4dc4:	61 95       	neg	r22
    4dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dca:	9f 4f       	sbci	r25, 0xFF	; 255
    4dcc:	20 68       	ori	r18, 0x80	; 128
    4dce:	32 2e       	mov	r3, r18
    4dd0:	2a e0       	ldi	r18, 0x0A	; 10
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	a3 01       	movw	r20, r6
    4dd6:	bc d3       	rcall	.+1912   	; 0x5550 <__ultoa_invert>
    4dd8:	e8 2e       	mov	r14, r24
    4dda:	e6 18       	sub	r14, r6
    4ddc:	3e c0       	rjmp	.+124    	; 0x4e5a <vfprintf+0x574>
    4dde:	02 2f       	mov	r16, r18
    4de0:	85 37       	cpi	r24, 0x75	; 117
    4de2:	21 f4       	brne	.+8      	; 0x4dec <vfprintf+0x506>
    4de4:	0f 7e       	andi	r16, 0xEF	; 239
    4de6:	2a e0       	ldi	r18, 0x0A	; 10
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	1d c0       	rjmp	.+58     	; 0x4e26 <vfprintf+0x540>
    4dec:	09 7f       	andi	r16, 0xF9	; 249
    4dee:	8f 36       	cpi	r24, 0x6F	; 111
    4df0:	91 f0       	breq	.+36     	; 0x4e16 <vfprintf+0x530>
    4df2:	18 f4       	brcc	.+6      	; 0x4dfa <vfprintf+0x514>
    4df4:	88 35       	cpi	r24, 0x58	; 88
    4df6:	59 f0       	breq	.+22     	; 0x4e0e <vfprintf+0x528>
    4df8:	be c0       	rjmp	.+380    	; 0x4f76 <vfprintf+0x690>
    4dfa:	80 37       	cpi	r24, 0x70	; 112
    4dfc:	19 f0       	breq	.+6      	; 0x4e04 <vfprintf+0x51e>
    4dfe:	88 37       	cpi	r24, 0x78	; 120
    4e00:	11 f0       	breq	.+4      	; 0x4e06 <vfprintf+0x520>
    4e02:	b9 c0       	rjmp	.+370    	; 0x4f76 <vfprintf+0x690>
    4e04:	00 61       	ori	r16, 0x10	; 16
    4e06:	04 ff       	sbrs	r16, 4
    4e08:	09 c0       	rjmp	.+18     	; 0x4e1c <vfprintf+0x536>
    4e0a:	04 60       	ori	r16, 0x04	; 4
    4e0c:	07 c0       	rjmp	.+14     	; 0x4e1c <vfprintf+0x536>
    4e0e:	24 ff       	sbrs	r18, 4
    4e10:	08 c0       	rjmp	.+16     	; 0x4e22 <vfprintf+0x53c>
    4e12:	06 60       	ori	r16, 0x06	; 6
    4e14:	06 c0       	rjmp	.+12     	; 0x4e22 <vfprintf+0x53c>
    4e16:	28 e0       	ldi	r18, 0x08	; 8
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	05 c0       	rjmp	.+10     	; 0x4e26 <vfprintf+0x540>
    4e1c:	20 e1       	ldi	r18, 0x10	; 16
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	02 c0       	rjmp	.+4      	; 0x4e26 <vfprintf+0x540>
    4e22:	20 e1       	ldi	r18, 0x10	; 16
    4e24:	32 e0       	ldi	r19, 0x02	; 2
    4e26:	52 01       	movw	r10, r4
    4e28:	07 ff       	sbrs	r16, 7
    4e2a:	09 c0       	rjmp	.+18     	; 0x4e3e <vfprintf+0x558>
    4e2c:	f4 e0       	ldi	r31, 0x04	; 4
    4e2e:	af 0e       	add	r10, r31
    4e30:	b1 1c       	adc	r11, r1
    4e32:	f2 01       	movw	r30, r4
    4e34:	60 81       	ld	r22, Z
    4e36:	71 81       	ldd	r23, Z+1	; 0x01
    4e38:	82 81       	ldd	r24, Z+2	; 0x02
    4e3a:	93 81       	ldd	r25, Z+3	; 0x03
    4e3c:	08 c0       	rjmp	.+16     	; 0x4e4e <vfprintf+0x568>
    4e3e:	f2 e0       	ldi	r31, 0x02	; 2
    4e40:	af 0e       	add	r10, r31
    4e42:	b1 1c       	adc	r11, r1
    4e44:	f2 01       	movw	r30, r4
    4e46:	60 81       	ld	r22, Z
    4e48:	71 81       	ldd	r23, Z+1	; 0x01
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	a3 01       	movw	r20, r6
    4e50:	7f d3       	rcall	.+1790   	; 0x5550 <__ultoa_invert>
    4e52:	e8 2e       	mov	r14, r24
    4e54:	e6 18       	sub	r14, r6
    4e56:	0f 77       	andi	r16, 0x7F	; 127
    4e58:	30 2e       	mov	r3, r16
    4e5a:	36 fe       	sbrs	r3, 6
    4e5c:	0b c0       	rjmp	.+22     	; 0x4e74 <vfprintf+0x58e>
    4e5e:	33 2d       	mov	r19, r3
    4e60:	3e 7f       	andi	r19, 0xFE	; 254
    4e62:	e1 16       	cp	r14, r17
    4e64:	50 f4       	brcc	.+20     	; 0x4e7a <vfprintf+0x594>
    4e66:	34 fe       	sbrs	r3, 4
    4e68:	0a c0       	rjmp	.+20     	; 0x4e7e <vfprintf+0x598>
    4e6a:	32 fc       	sbrc	r3, 2
    4e6c:	08 c0       	rjmp	.+16     	; 0x4e7e <vfprintf+0x598>
    4e6e:	33 2d       	mov	r19, r3
    4e70:	3e 7e       	andi	r19, 0xEE	; 238
    4e72:	05 c0       	rjmp	.+10     	; 0x4e7e <vfprintf+0x598>
    4e74:	0e 2d       	mov	r16, r14
    4e76:	33 2d       	mov	r19, r3
    4e78:	03 c0       	rjmp	.+6      	; 0x4e80 <vfprintf+0x59a>
    4e7a:	0e 2d       	mov	r16, r14
    4e7c:	01 c0       	rjmp	.+2      	; 0x4e80 <vfprintf+0x59a>
    4e7e:	01 2f       	mov	r16, r17
    4e80:	34 ff       	sbrs	r19, 4
    4e82:	0c c0       	rjmp	.+24     	; 0x4e9c <vfprintf+0x5b6>
    4e84:	fe 01       	movw	r30, r28
    4e86:	ee 0d       	add	r30, r14
    4e88:	f1 1d       	adc	r31, r1
    4e8a:	80 81       	ld	r24, Z
    4e8c:	80 33       	cpi	r24, 0x30	; 48
    4e8e:	11 f4       	brne	.+4      	; 0x4e94 <vfprintf+0x5ae>
    4e90:	39 7e       	andi	r19, 0xE9	; 233
    4e92:	08 c0       	rjmp	.+16     	; 0x4ea4 <vfprintf+0x5be>
    4e94:	32 ff       	sbrs	r19, 2
    4e96:	05 c0       	rjmp	.+10     	; 0x4ea2 <vfprintf+0x5bc>
    4e98:	0e 5f       	subi	r16, 0xFE	; 254
    4e9a:	04 c0       	rjmp	.+8      	; 0x4ea4 <vfprintf+0x5be>
    4e9c:	83 2f       	mov	r24, r19
    4e9e:	86 78       	andi	r24, 0x86	; 134
    4ea0:	09 f0       	breq	.+2      	; 0x4ea4 <vfprintf+0x5be>
    4ea2:	0f 5f       	subi	r16, 0xFF	; 255
    4ea4:	33 fd       	sbrc	r19, 3
    4ea6:	12 c0       	rjmp	.+36     	; 0x4ecc <vfprintf+0x5e6>
    4ea8:	30 ff       	sbrs	r19, 0
    4eaa:	06 c0       	rjmp	.+12     	; 0x4eb8 <vfprintf+0x5d2>
    4eac:	1e 2d       	mov	r17, r14
    4eae:	0f 15       	cp	r16, r15
    4eb0:	18 f4       	brcc	.+6      	; 0x4eb8 <vfprintf+0x5d2>
    4eb2:	1f 0d       	add	r17, r15
    4eb4:	10 1b       	sub	r17, r16
    4eb6:	0f 2d       	mov	r16, r15
    4eb8:	0f 15       	cp	r16, r15
    4eba:	60 f4       	brcc	.+24     	; 0x4ed4 <vfprintf+0x5ee>
    4ebc:	b6 01       	movw	r22, r12
    4ebe:	80 e2       	ldi	r24, 0x20	; 32
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	3b 8b       	std	Y+19, r19	; 0x13
    4ec4:	de d2       	rcall	.+1468   	; 0x5482 <fputc>
    4ec6:	0f 5f       	subi	r16, 0xFF	; 255
    4ec8:	3b 89       	ldd	r19, Y+19	; 0x13
    4eca:	f6 cf       	rjmp	.-20     	; 0x4eb8 <vfprintf+0x5d2>
    4ecc:	0f 15       	cp	r16, r15
    4ece:	10 f4       	brcc	.+4      	; 0x4ed4 <vfprintf+0x5ee>
    4ed0:	f0 1a       	sub	r15, r16
    4ed2:	01 c0       	rjmp	.+2      	; 0x4ed6 <vfprintf+0x5f0>
    4ed4:	f1 2c       	mov	r15, r1
    4ed6:	34 ff       	sbrs	r19, 4
    4ed8:	11 c0       	rjmp	.+34     	; 0x4efc <vfprintf+0x616>
    4eda:	b6 01       	movw	r22, r12
    4edc:	80 e3       	ldi	r24, 0x30	; 48
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	3b 8b       	std	Y+19, r19	; 0x13
    4ee2:	cf d2       	rcall	.+1438   	; 0x5482 <fputc>
    4ee4:	3b 89       	ldd	r19, Y+19	; 0x13
    4ee6:	32 ff       	sbrs	r19, 2
    4ee8:	16 c0       	rjmp	.+44     	; 0x4f16 <vfprintf+0x630>
    4eea:	31 fd       	sbrc	r19, 1
    4eec:	03 c0       	rjmp	.+6      	; 0x4ef4 <vfprintf+0x60e>
    4eee:	88 e7       	ldi	r24, 0x78	; 120
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	02 c0       	rjmp	.+4      	; 0x4ef8 <vfprintf+0x612>
    4ef4:	88 e5       	ldi	r24, 0x58	; 88
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	b6 01       	movw	r22, r12
    4efa:	0c c0       	rjmp	.+24     	; 0x4f14 <vfprintf+0x62e>
    4efc:	83 2f       	mov	r24, r19
    4efe:	86 78       	andi	r24, 0x86	; 134
    4f00:	51 f0       	breq	.+20     	; 0x4f16 <vfprintf+0x630>
    4f02:	31 ff       	sbrs	r19, 1
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <vfprintf+0x624>
    4f06:	8b e2       	ldi	r24, 0x2B	; 43
    4f08:	01 c0       	rjmp	.+2      	; 0x4f0c <vfprintf+0x626>
    4f0a:	80 e2       	ldi	r24, 0x20	; 32
    4f0c:	37 fd       	sbrc	r19, 7
    4f0e:	8d e2       	ldi	r24, 0x2D	; 45
    4f10:	b6 01       	movw	r22, r12
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	b6 d2       	rcall	.+1388   	; 0x5482 <fputc>
    4f16:	e1 16       	cp	r14, r17
    4f18:	30 f4       	brcc	.+12     	; 0x4f26 <vfprintf+0x640>
    4f1a:	b6 01       	movw	r22, r12
    4f1c:	80 e3       	ldi	r24, 0x30	; 48
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	b0 d2       	rcall	.+1376   	; 0x5482 <fputc>
    4f22:	11 50       	subi	r17, 0x01	; 1
    4f24:	f8 cf       	rjmp	.-16     	; 0x4f16 <vfprintf+0x630>
    4f26:	ea 94       	dec	r14
    4f28:	f3 01       	movw	r30, r6
    4f2a:	ee 0d       	add	r30, r14
    4f2c:	f1 1d       	adc	r31, r1
    4f2e:	80 81       	ld	r24, Z
    4f30:	b6 01       	movw	r22, r12
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	a6 d2       	rcall	.+1356   	; 0x5482 <fputc>
    4f36:	e1 10       	cpse	r14, r1
    4f38:	f6 cf       	rjmp	.-20     	; 0x4f26 <vfprintf+0x640>
    4f3a:	14 c0       	rjmp	.+40     	; 0x4f64 <vfprintf+0x67e>
    4f3c:	f4 e0       	ldi	r31, 0x04	; 4
    4f3e:	ff 15       	cp	r31, r15
    4f40:	48 f5       	brcc	.+82     	; 0x4f94 <vfprintf+0x6ae>
    4f42:	84 e0       	ldi	r24, 0x04	; 4
    4f44:	f8 1a       	sub	r15, r24
    4f46:	33 fe       	sbrs	r3, 3
    4f48:	1d c0       	rjmp	.+58     	; 0x4f84 <vfprintf+0x69e>
    4f4a:	21 10       	cpse	r2, r1
    4f4c:	24 c0       	rjmp	.+72     	; 0x4f96 <vfprintf+0x6b0>
    4f4e:	03 ff       	sbrs	r16, 3
    4f50:	27 c0       	rjmp	.+78     	; 0x4fa0 <vfprintf+0x6ba>
    4f52:	00 e1       	ldi	r16, 0x10	; 16
    4f54:	15 e0       	ldi	r17, 0x05	; 5
    4f56:	f3 2d       	mov	r31, r3
    4f58:	f0 71       	andi	r31, 0x10	; 16
    4f5a:	3f 2e       	mov	r3, r31
    4f5c:	f8 01       	movw	r30, r16
    4f5e:	84 91       	lpm	r24, Z
    4f60:	81 11       	cpse	r24, r1
    4f62:	21 c0       	rjmp	.+66     	; 0x4fa6 <vfprintf+0x6c0>
    4f64:	ff 20       	and	r15, r15
    4f66:	09 f4       	brne	.+2      	; 0x4f6a <vfprintf+0x684>
    4f68:	fd cc       	rjmp	.-1542   	; 0x4964 <vfprintf+0x7e>
    4f6a:	b6 01       	movw	r22, r12
    4f6c:	80 e2       	ldi	r24, 0x20	; 32
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	88 d2       	rcall	.+1296   	; 0x5482 <fputc>
    4f72:	fa 94       	dec	r15
    4f74:	f7 cf       	rjmp	.-18     	; 0x4f64 <vfprintf+0x67e>
    4f76:	f6 01       	movw	r30, r12
    4f78:	86 81       	ldd	r24, Z+6	; 0x06
    4f7a:	97 81       	ldd	r25, Z+7	; 0x07
    4f7c:	23 c0       	rjmp	.+70     	; 0x4fc4 <vfprintf+0x6de>
    4f7e:	8f ef       	ldi	r24, 0xFF	; 255
    4f80:	9f ef       	ldi	r25, 0xFF	; 255
    4f82:	20 c0       	rjmp	.+64     	; 0x4fc4 <vfprintf+0x6de>
    4f84:	b6 01       	movw	r22, r12
    4f86:	80 e2       	ldi	r24, 0x20	; 32
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	7b d2       	rcall	.+1270   	; 0x5482 <fputc>
    4f8c:	fa 94       	dec	r15
    4f8e:	f1 10       	cpse	r15, r1
    4f90:	f9 cf       	rjmp	.-14     	; 0x4f84 <vfprintf+0x69e>
    4f92:	db cf       	rjmp	.-74     	; 0x4f4a <vfprintf+0x664>
    4f94:	f1 2c       	mov	r15, r1
    4f96:	b6 01       	movw	r22, r12
    4f98:	82 2d       	mov	r24, r2
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	72 d2       	rcall	.+1252   	; 0x5482 <fputc>
    4f9e:	d7 cf       	rjmp	.-82     	; 0x4f4e <vfprintf+0x668>
    4fa0:	04 e1       	ldi	r16, 0x14	; 20
    4fa2:	15 e0       	ldi	r17, 0x05	; 5
    4fa4:	d8 cf       	rjmp	.-80     	; 0x4f56 <vfprintf+0x670>
    4fa6:	31 10       	cpse	r3, r1
    4fa8:	80 52       	subi	r24, 0x20	; 32
    4faa:	b6 01       	movw	r22, r12
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	69 d2       	rcall	.+1234   	; 0x5482 <fputc>
    4fb0:	0f 5f       	subi	r16, 0xFF	; 255
    4fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb4:	d3 cf       	rjmp	.-90     	; 0x4f5c <vfprintf+0x676>
    4fb6:	23 e0       	ldi	r18, 0x03	; 3
    4fb8:	2f 15       	cp	r18, r15
    4fba:	10 f4       	brcc	.+4      	; 0x4fc0 <vfprintf+0x6da>
    4fbc:	83 e0       	ldi	r24, 0x03	; 3
    4fbe:	c2 cf       	rjmp	.-124    	; 0x4f44 <vfprintf+0x65e>
    4fc0:	f1 2c       	mov	r15, r1
    4fc2:	c5 cf       	rjmp	.-118    	; 0x4f4e <vfprintf+0x668>
    4fc4:	63 96       	adiw	r28, 0x13	; 19
    4fc6:	0f b6       	in	r0, 0x3f	; 63
    4fc8:	f8 94       	cli
    4fca:	de bf       	out	0x3e, r29	; 62
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	cd bf       	out	0x3d, r28	; 61
    4fd0:	df 91       	pop	r29
    4fd2:	cf 91       	pop	r28
    4fd4:	1f 91       	pop	r17
    4fd6:	0f 91       	pop	r16
    4fd8:	ff 90       	pop	r15
    4fda:	ef 90       	pop	r14
    4fdc:	df 90       	pop	r13
    4fde:	cf 90       	pop	r12
    4fe0:	bf 90       	pop	r11
    4fe2:	af 90       	pop	r10
    4fe4:	9f 90       	pop	r9
    4fe6:	8f 90       	pop	r8
    4fe8:	7f 90       	pop	r7
    4fea:	6f 90       	pop	r6
    4fec:	5f 90       	pop	r5
    4fee:	4f 90       	pop	r4
    4ff0:	3f 90       	pop	r3
    4ff2:	2f 90       	pop	r2
    4ff4:	08 95       	ret

00004ff6 <__udivmodsi4>:
    4ff6:	a1 e2       	ldi	r26, 0x21	; 33
    4ff8:	1a 2e       	mov	r1, r26
    4ffa:	aa 1b       	sub	r26, r26
    4ffc:	bb 1b       	sub	r27, r27
    4ffe:	fd 01       	movw	r30, r26
    5000:	0d c0       	rjmp	.+26     	; 0x501c <__udivmodsi4_ep>

00005002 <__udivmodsi4_loop>:
    5002:	aa 1f       	adc	r26, r26
    5004:	bb 1f       	adc	r27, r27
    5006:	ee 1f       	adc	r30, r30
    5008:	ff 1f       	adc	r31, r31
    500a:	a2 17       	cp	r26, r18
    500c:	b3 07       	cpc	r27, r19
    500e:	e4 07       	cpc	r30, r20
    5010:	f5 07       	cpc	r31, r21
    5012:	20 f0       	brcs	.+8      	; 0x501c <__udivmodsi4_ep>
    5014:	a2 1b       	sub	r26, r18
    5016:	b3 0b       	sbc	r27, r19
    5018:	e4 0b       	sbc	r30, r20
    501a:	f5 0b       	sbc	r31, r21

0000501c <__udivmodsi4_ep>:
    501c:	66 1f       	adc	r22, r22
    501e:	77 1f       	adc	r23, r23
    5020:	88 1f       	adc	r24, r24
    5022:	99 1f       	adc	r25, r25
    5024:	1a 94       	dec	r1
    5026:	69 f7       	brne	.-38     	; 0x5002 <__udivmodsi4_loop>
    5028:	60 95       	com	r22
    502a:	70 95       	com	r23
    502c:	80 95       	com	r24
    502e:	90 95       	com	r25
    5030:	9b 01       	movw	r18, r22
    5032:	ac 01       	movw	r20, r24
    5034:	bd 01       	movw	r22, r26
    5036:	cf 01       	movw	r24, r30
    5038:	08 95       	ret

0000503a <__tablejump2__>:
    503a:	ee 0f       	add	r30, r30
    503c:	ff 1f       	adc	r31, r31
    503e:	00 24       	eor	r0, r0
    5040:	00 1c       	adc	r0, r0
    5042:	0b be       	out	0x3b, r0	; 59
    5044:	07 90       	elpm	r0, Z+
    5046:	f6 91       	elpm	r31, Z
    5048:	e0 2d       	mov	r30, r0
    504a:	09 94       	ijmp

0000504c <malloc>:
    504c:	cf 93       	push	r28
    504e:	df 93       	push	r29
    5050:	82 30       	cpi	r24, 0x02	; 2
    5052:	91 05       	cpc	r25, r1
    5054:	10 f4       	brcc	.+4      	; 0x505a <malloc+0xe>
    5056:	82 e0       	ldi	r24, 0x02	; 2
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	e0 91 5b 08 	lds	r30, 0x085B
    505e:	f0 91 5c 08 	lds	r31, 0x085C
    5062:	20 e0       	ldi	r18, 0x00	; 0
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	c0 e0       	ldi	r28, 0x00	; 0
    5068:	d0 e0       	ldi	r29, 0x00	; 0
    506a:	30 97       	sbiw	r30, 0x00	; 0
    506c:	11 f1       	breq	.+68     	; 0x50b2 <malloc+0x66>
    506e:	40 81       	ld	r20, Z
    5070:	51 81       	ldd	r21, Z+1	; 0x01
    5072:	48 17       	cp	r20, r24
    5074:	59 07       	cpc	r21, r25
    5076:	c0 f0       	brcs	.+48     	; 0x50a8 <malloc+0x5c>
    5078:	48 17       	cp	r20, r24
    507a:	59 07       	cpc	r21, r25
    507c:	61 f4       	brne	.+24     	; 0x5096 <malloc+0x4a>
    507e:	82 81       	ldd	r24, Z+2	; 0x02
    5080:	93 81       	ldd	r25, Z+3	; 0x03
    5082:	20 97       	sbiw	r28, 0x00	; 0
    5084:	19 f0       	breq	.+6      	; 0x508c <malloc+0x40>
    5086:	9b 83       	std	Y+3, r25	; 0x03
    5088:	8a 83       	std	Y+2, r24	; 0x02
    508a:	2b c0       	rjmp	.+86     	; 0x50e2 <malloc+0x96>
    508c:	90 93 5c 08 	sts	0x085C, r25
    5090:	80 93 5b 08 	sts	0x085B, r24
    5094:	26 c0       	rjmp	.+76     	; 0x50e2 <malloc+0x96>
    5096:	21 15       	cp	r18, r1
    5098:	31 05       	cpc	r19, r1
    509a:	19 f0       	breq	.+6      	; 0x50a2 <malloc+0x56>
    509c:	42 17       	cp	r20, r18
    509e:	53 07       	cpc	r21, r19
    50a0:	18 f4       	brcc	.+6      	; 0x50a8 <malloc+0x5c>
    50a2:	9a 01       	movw	r18, r20
    50a4:	be 01       	movw	r22, r28
    50a6:	df 01       	movw	r26, r30
    50a8:	ef 01       	movw	r28, r30
    50aa:	02 80       	ldd	r0, Z+2	; 0x02
    50ac:	f3 81       	ldd	r31, Z+3	; 0x03
    50ae:	e0 2d       	mov	r30, r0
    50b0:	dc cf       	rjmp	.-72     	; 0x506a <malloc+0x1e>
    50b2:	21 15       	cp	r18, r1
    50b4:	31 05       	cpc	r19, r1
    50b6:	09 f1       	breq	.+66     	; 0x50fa <malloc+0xae>
    50b8:	28 1b       	sub	r18, r24
    50ba:	39 0b       	sbc	r19, r25
    50bc:	24 30       	cpi	r18, 0x04	; 4
    50be:	31 05       	cpc	r19, r1
    50c0:	90 f4       	brcc	.+36     	; 0x50e6 <malloc+0x9a>
    50c2:	12 96       	adiw	r26, 0x02	; 2
    50c4:	8d 91       	ld	r24, X+
    50c6:	9c 91       	ld	r25, X
    50c8:	13 97       	sbiw	r26, 0x03	; 3
    50ca:	61 15       	cp	r22, r1
    50cc:	71 05       	cpc	r23, r1
    50ce:	21 f0       	breq	.+8      	; 0x50d8 <malloc+0x8c>
    50d0:	fb 01       	movw	r30, r22
    50d2:	93 83       	std	Z+3, r25	; 0x03
    50d4:	82 83       	std	Z+2, r24	; 0x02
    50d6:	04 c0       	rjmp	.+8      	; 0x50e0 <malloc+0x94>
    50d8:	90 93 5c 08 	sts	0x085C, r25
    50dc:	80 93 5b 08 	sts	0x085B, r24
    50e0:	fd 01       	movw	r30, r26
    50e2:	32 96       	adiw	r30, 0x02	; 2
    50e4:	44 c0       	rjmp	.+136    	; 0x516e <malloc+0x122>
    50e6:	fd 01       	movw	r30, r26
    50e8:	e2 0f       	add	r30, r18
    50ea:	f3 1f       	adc	r31, r19
    50ec:	81 93       	st	Z+, r24
    50ee:	91 93       	st	Z+, r25
    50f0:	22 50       	subi	r18, 0x02	; 2
    50f2:	31 09       	sbc	r19, r1
    50f4:	2d 93       	st	X+, r18
    50f6:	3c 93       	st	X, r19
    50f8:	3a c0       	rjmp	.+116    	; 0x516e <malloc+0x122>
    50fa:	20 91 59 08 	lds	r18, 0x0859
    50fe:	30 91 5a 08 	lds	r19, 0x085A
    5102:	23 2b       	or	r18, r19
    5104:	41 f4       	brne	.+16     	; 0x5116 <malloc+0xca>
    5106:	20 91 02 01 	lds	r18, 0x0102
    510a:	30 91 03 01 	lds	r19, 0x0103
    510e:	30 93 5a 08 	sts	0x085A, r19
    5112:	20 93 59 08 	sts	0x0859, r18
    5116:	20 91 00 01 	lds	r18, 0x0100
    511a:	30 91 01 01 	lds	r19, 0x0101
    511e:	21 15       	cp	r18, r1
    5120:	31 05       	cpc	r19, r1
    5122:	41 f4       	brne	.+16     	; 0x5134 <malloc+0xe8>
    5124:	2d b7       	in	r18, 0x3d	; 61
    5126:	3e b7       	in	r19, 0x3e	; 62
    5128:	40 91 04 01 	lds	r20, 0x0104
    512c:	50 91 05 01 	lds	r21, 0x0105
    5130:	24 1b       	sub	r18, r20
    5132:	35 0b       	sbc	r19, r21
    5134:	e0 91 59 08 	lds	r30, 0x0859
    5138:	f0 91 5a 08 	lds	r31, 0x085A
    513c:	e2 17       	cp	r30, r18
    513e:	f3 07       	cpc	r31, r19
    5140:	a0 f4       	brcc	.+40     	; 0x516a <malloc+0x11e>
    5142:	2e 1b       	sub	r18, r30
    5144:	3f 0b       	sbc	r19, r31
    5146:	28 17       	cp	r18, r24
    5148:	39 07       	cpc	r19, r25
    514a:	78 f0       	brcs	.+30     	; 0x516a <malloc+0x11e>
    514c:	ac 01       	movw	r20, r24
    514e:	4e 5f       	subi	r20, 0xFE	; 254
    5150:	5f 4f       	sbci	r21, 0xFF	; 255
    5152:	24 17       	cp	r18, r20
    5154:	35 07       	cpc	r19, r21
    5156:	48 f0       	brcs	.+18     	; 0x516a <malloc+0x11e>
    5158:	4e 0f       	add	r20, r30
    515a:	5f 1f       	adc	r21, r31
    515c:	50 93 5a 08 	sts	0x085A, r21
    5160:	40 93 59 08 	sts	0x0859, r20
    5164:	81 93       	st	Z+, r24
    5166:	91 93       	st	Z+, r25
    5168:	02 c0       	rjmp	.+4      	; 0x516e <malloc+0x122>
    516a:	e0 e0       	ldi	r30, 0x00	; 0
    516c:	f0 e0       	ldi	r31, 0x00	; 0
    516e:	cf 01       	movw	r24, r30
    5170:	df 91       	pop	r29
    5172:	cf 91       	pop	r28
    5174:	08 95       	ret

00005176 <free>:
    5176:	0f 93       	push	r16
    5178:	1f 93       	push	r17
    517a:	cf 93       	push	r28
    517c:	df 93       	push	r29
    517e:	00 97       	sbiw	r24, 0x00	; 0
    5180:	09 f4       	brne	.+2      	; 0x5184 <free+0xe>
    5182:	8c c0       	rjmp	.+280    	; 0x529c <free+0x126>
    5184:	fc 01       	movw	r30, r24
    5186:	32 97       	sbiw	r30, 0x02	; 2
    5188:	13 82       	std	Z+3, r1	; 0x03
    518a:	12 82       	std	Z+2, r1	; 0x02
    518c:	00 91 5b 08 	lds	r16, 0x085B
    5190:	10 91 5c 08 	lds	r17, 0x085C
    5194:	01 15       	cp	r16, r1
    5196:	11 05       	cpc	r17, r1
    5198:	81 f4       	brne	.+32     	; 0x51ba <free+0x44>
    519a:	20 81       	ld	r18, Z
    519c:	31 81       	ldd	r19, Z+1	; 0x01
    519e:	82 0f       	add	r24, r18
    51a0:	93 1f       	adc	r25, r19
    51a2:	20 91 59 08 	lds	r18, 0x0859
    51a6:	30 91 5a 08 	lds	r19, 0x085A
    51aa:	28 17       	cp	r18, r24
    51ac:	39 07       	cpc	r19, r25
    51ae:	79 f5       	brne	.+94     	; 0x520e <free+0x98>
    51b0:	f0 93 5a 08 	sts	0x085A, r31
    51b4:	e0 93 59 08 	sts	0x0859, r30
    51b8:	71 c0       	rjmp	.+226    	; 0x529c <free+0x126>
    51ba:	d8 01       	movw	r26, r16
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	50 e0       	ldi	r21, 0x00	; 0
    51c0:	ae 17       	cp	r26, r30
    51c2:	bf 07       	cpc	r27, r31
    51c4:	50 f4       	brcc	.+20     	; 0x51da <free+0x64>
    51c6:	12 96       	adiw	r26, 0x02	; 2
    51c8:	2d 91       	ld	r18, X+
    51ca:	3c 91       	ld	r19, X
    51cc:	13 97       	sbiw	r26, 0x03	; 3
    51ce:	ad 01       	movw	r20, r26
    51d0:	21 15       	cp	r18, r1
    51d2:	31 05       	cpc	r19, r1
    51d4:	09 f1       	breq	.+66     	; 0x5218 <free+0xa2>
    51d6:	d9 01       	movw	r26, r18
    51d8:	f3 cf       	rjmp	.-26     	; 0x51c0 <free+0x4a>
    51da:	9d 01       	movw	r18, r26
    51dc:	da 01       	movw	r26, r20
    51de:	33 83       	std	Z+3, r19	; 0x03
    51e0:	22 83       	std	Z+2, r18	; 0x02
    51e2:	60 81       	ld	r22, Z
    51e4:	71 81       	ldd	r23, Z+1	; 0x01
    51e6:	86 0f       	add	r24, r22
    51e8:	97 1f       	adc	r25, r23
    51ea:	82 17       	cp	r24, r18
    51ec:	93 07       	cpc	r25, r19
    51ee:	69 f4       	brne	.+26     	; 0x520a <free+0x94>
    51f0:	ec 01       	movw	r28, r24
    51f2:	28 81       	ld	r18, Y
    51f4:	39 81       	ldd	r19, Y+1	; 0x01
    51f6:	26 0f       	add	r18, r22
    51f8:	37 1f       	adc	r19, r23
    51fa:	2e 5f       	subi	r18, 0xFE	; 254
    51fc:	3f 4f       	sbci	r19, 0xFF	; 255
    51fe:	31 83       	std	Z+1, r19	; 0x01
    5200:	20 83       	st	Z, r18
    5202:	8a 81       	ldd	r24, Y+2	; 0x02
    5204:	9b 81       	ldd	r25, Y+3	; 0x03
    5206:	93 83       	std	Z+3, r25	; 0x03
    5208:	82 83       	std	Z+2, r24	; 0x02
    520a:	45 2b       	or	r20, r21
    520c:	29 f4       	brne	.+10     	; 0x5218 <free+0xa2>
    520e:	f0 93 5c 08 	sts	0x085C, r31
    5212:	e0 93 5b 08 	sts	0x085B, r30
    5216:	42 c0       	rjmp	.+132    	; 0x529c <free+0x126>
    5218:	13 96       	adiw	r26, 0x03	; 3
    521a:	fc 93       	st	X, r31
    521c:	ee 93       	st	-X, r30
    521e:	12 97       	sbiw	r26, 0x02	; 2
    5220:	ed 01       	movw	r28, r26
    5222:	49 91       	ld	r20, Y+
    5224:	59 91       	ld	r21, Y+
    5226:	9e 01       	movw	r18, r28
    5228:	24 0f       	add	r18, r20
    522a:	35 1f       	adc	r19, r21
    522c:	e2 17       	cp	r30, r18
    522e:	f3 07       	cpc	r31, r19
    5230:	71 f4       	brne	.+28     	; 0x524e <free+0xd8>
    5232:	80 81       	ld	r24, Z
    5234:	91 81       	ldd	r25, Z+1	; 0x01
    5236:	84 0f       	add	r24, r20
    5238:	95 1f       	adc	r25, r21
    523a:	02 96       	adiw	r24, 0x02	; 2
    523c:	11 96       	adiw	r26, 0x01	; 1
    523e:	9c 93       	st	X, r25
    5240:	8e 93       	st	-X, r24
    5242:	82 81       	ldd	r24, Z+2	; 0x02
    5244:	93 81       	ldd	r25, Z+3	; 0x03
    5246:	13 96       	adiw	r26, 0x03	; 3
    5248:	9c 93       	st	X, r25
    524a:	8e 93       	st	-X, r24
    524c:	12 97       	sbiw	r26, 0x02	; 2
    524e:	e0 e0       	ldi	r30, 0x00	; 0
    5250:	f0 e0       	ldi	r31, 0x00	; 0
    5252:	d8 01       	movw	r26, r16
    5254:	12 96       	adiw	r26, 0x02	; 2
    5256:	8d 91       	ld	r24, X+
    5258:	9c 91       	ld	r25, X
    525a:	13 97       	sbiw	r26, 0x03	; 3
    525c:	00 97       	sbiw	r24, 0x00	; 0
    525e:	19 f0       	breq	.+6      	; 0x5266 <free+0xf0>
    5260:	f8 01       	movw	r30, r16
    5262:	8c 01       	movw	r16, r24
    5264:	f6 cf       	rjmp	.-20     	; 0x5252 <free+0xdc>
    5266:	8d 91       	ld	r24, X+
    5268:	9c 91       	ld	r25, X
    526a:	98 01       	movw	r18, r16
    526c:	2e 5f       	subi	r18, 0xFE	; 254
    526e:	3f 4f       	sbci	r19, 0xFF	; 255
    5270:	82 0f       	add	r24, r18
    5272:	93 1f       	adc	r25, r19
    5274:	20 91 59 08 	lds	r18, 0x0859
    5278:	30 91 5a 08 	lds	r19, 0x085A
    527c:	28 17       	cp	r18, r24
    527e:	39 07       	cpc	r19, r25
    5280:	69 f4       	brne	.+26     	; 0x529c <free+0x126>
    5282:	30 97       	sbiw	r30, 0x00	; 0
    5284:	29 f4       	brne	.+10     	; 0x5290 <free+0x11a>
    5286:	10 92 5c 08 	sts	0x085C, r1
    528a:	10 92 5b 08 	sts	0x085B, r1
    528e:	02 c0       	rjmp	.+4      	; 0x5294 <free+0x11e>
    5290:	13 82       	std	Z+3, r1	; 0x03
    5292:	12 82       	std	Z+2, r1	; 0x02
    5294:	10 93 5a 08 	sts	0x085A, r17
    5298:	00 93 59 08 	sts	0x0859, r16
    529c:	df 91       	pop	r29
    529e:	cf 91       	pop	r28
    52a0:	1f 91       	pop	r17
    52a2:	0f 91       	pop	r16
    52a4:	08 95       	ret

000052a6 <__ftoa_engine>:
    52a6:	28 30       	cpi	r18, 0x08	; 8
    52a8:	08 f0       	brcs	.+2      	; 0x52ac <__ftoa_engine+0x6>
    52aa:	27 e0       	ldi	r18, 0x07	; 7
    52ac:	33 27       	eor	r19, r19
    52ae:	da 01       	movw	r26, r20
    52b0:	99 0f       	add	r25, r25
    52b2:	31 1d       	adc	r19, r1
    52b4:	87 fd       	sbrc	r24, 7
    52b6:	91 60       	ori	r25, 0x01	; 1
    52b8:	00 96       	adiw	r24, 0x00	; 0
    52ba:	61 05       	cpc	r22, r1
    52bc:	71 05       	cpc	r23, r1
    52be:	39 f4       	brne	.+14     	; 0x52ce <__ftoa_engine+0x28>
    52c0:	32 60       	ori	r19, 0x02	; 2
    52c2:	2e 5f       	subi	r18, 0xFE	; 254
    52c4:	3d 93       	st	X+, r19
    52c6:	30 e3       	ldi	r19, 0x30	; 48
    52c8:	2a 95       	dec	r18
    52ca:	e1 f7       	brne	.-8      	; 0x52c4 <__ftoa_engine+0x1e>
    52cc:	08 95       	ret
    52ce:	9f 3f       	cpi	r25, 0xFF	; 255
    52d0:	30 f0       	brcs	.+12     	; 0x52de <__ftoa_engine+0x38>
    52d2:	80 38       	cpi	r24, 0x80	; 128
    52d4:	71 05       	cpc	r23, r1
    52d6:	61 05       	cpc	r22, r1
    52d8:	09 f0       	breq	.+2      	; 0x52dc <__ftoa_engine+0x36>
    52da:	3c 5f       	subi	r19, 0xFC	; 252
    52dc:	3c 5f       	subi	r19, 0xFC	; 252
    52de:	3d 93       	st	X+, r19
    52e0:	91 30       	cpi	r25, 0x01	; 1
    52e2:	08 f0       	brcs	.+2      	; 0x52e6 <__ftoa_engine+0x40>
    52e4:	80 68       	ori	r24, 0x80	; 128
    52e6:	91 1d       	adc	r25, r1
    52e8:	df 93       	push	r29
    52ea:	cf 93       	push	r28
    52ec:	1f 93       	push	r17
    52ee:	0f 93       	push	r16
    52f0:	ff 92       	push	r15
    52f2:	ef 92       	push	r14
    52f4:	19 2f       	mov	r17, r25
    52f6:	98 7f       	andi	r25, 0xF8	; 248
    52f8:	96 95       	lsr	r25
    52fa:	e9 2f       	mov	r30, r25
    52fc:	96 95       	lsr	r25
    52fe:	96 95       	lsr	r25
    5300:	e9 0f       	add	r30, r25
    5302:	ff 27       	eor	r31, r31
    5304:	ee 58       	subi	r30, 0x8E	; 142
    5306:	fa 4f       	sbci	r31, 0xFA	; 250
    5308:	99 27       	eor	r25, r25
    530a:	33 27       	eor	r19, r19
    530c:	ee 24       	eor	r14, r14
    530e:	ff 24       	eor	r15, r15
    5310:	a7 01       	movw	r20, r14
    5312:	e7 01       	movw	r28, r14
    5314:	05 90       	lpm	r0, Z+
    5316:	08 94       	sec
    5318:	07 94       	ror	r0
    531a:	28 f4       	brcc	.+10     	; 0x5326 <__ftoa_engine+0x80>
    531c:	36 0f       	add	r19, r22
    531e:	e7 1e       	adc	r14, r23
    5320:	f8 1e       	adc	r15, r24
    5322:	49 1f       	adc	r20, r25
    5324:	51 1d       	adc	r21, r1
    5326:	66 0f       	add	r22, r22
    5328:	77 1f       	adc	r23, r23
    532a:	88 1f       	adc	r24, r24
    532c:	99 1f       	adc	r25, r25
    532e:	06 94       	lsr	r0
    5330:	a1 f7       	brne	.-24     	; 0x531a <__ftoa_engine+0x74>
    5332:	05 90       	lpm	r0, Z+
    5334:	07 94       	ror	r0
    5336:	28 f4       	brcc	.+10     	; 0x5342 <__ftoa_engine+0x9c>
    5338:	e7 0e       	add	r14, r23
    533a:	f8 1e       	adc	r15, r24
    533c:	49 1f       	adc	r20, r25
    533e:	56 1f       	adc	r21, r22
    5340:	c1 1d       	adc	r28, r1
    5342:	77 0f       	add	r23, r23
    5344:	88 1f       	adc	r24, r24
    5346:	99 1f       	adc	r25, r25
    5348:	66 1f       	adc	r22, r22
    534a:	06 94       	lsr	r0
    534c:	a1 f7       	brne	.-24     	; 0x5336 <__ftoa_engine+0x90>
    534e:	05 90       	lpm	r0, Z+
    5350:	07 94       	ror	r0
    5352:	28 f4       	brcc	.+10     	; 0x535e <__ftoa_engine+0xb8>
    5354:	f8 0e       	add	r15, r24
    5356:	49 1f       	adc	r20, r25
    5358:	56 1f       	adc	r21, r22
    535a:	c7 1f       	adc	r28, r23
    535c:	d1 1d       	adc	r29, r1
    535e:	88 0f       	add	r24, r24
    5360:	99 1f       	adc	r25, r25
    5362:	66 1f       	adc	r22, r22
    5364:	77 1f       	adc	r23, r23
    5366:	06 94       	lsr	r0
    5368:	a1 f7       	brne	.-24     	; 0x5352 <__ftoa_engine+0xac>
    536a:	05 90       	lpm	r0, Z+
    536c:	07 94       	ror	r0
    536e:	20 f4       	brcc	.+8      	; 0x5378 <__ftoa_engine+0xd2>
    5370:	49 0f       	add	r20, r25
    5372:	56 1f       	adc	r21, r22
    5374:	c7 1f       	adc	r28, r23
    5376:	d8 1f       	adc	r29, r24
    5378:	99 0f       	add	r25, r25
    537a:	66 1f       	adc	r22, r22
    537c:	77 1f       	adc	r23, r23
    537e:	88 1f       	adc	r24, r24
    5380:	06 94       	lsr	r0
    5382:	a9 f7       	brne	.-22     	; 0x536e <__ftoa_engine+0xc8>
    5384:	84 91       	lpm	r24, Z
    5386:	10 95       	com	r17
    5388:	17 70       	andi	r17, 0x07	; 7
    538a:	41 f0       	breq	.+16     	; 0x539c <__ftoa_engine+0xf6>
    538c:	d6 95       	lsr	r29
    538e:	c7 95       	ror	r28
    5390:	57 95       	ror	r21
    5392:	47 95       	ror	r20
    5394:	f7 94       	ror	r15
    5396:	e7 94       	ror	r14
    5398:	1a 95       	dec	r17
    539a:	c1 f7       	brne	.-16     	; 0x538c <__ftoa_engine+0xe6>
    539c:	e8 e1       	ldi	r30, 0x18	; 24
    539e:	f5 e0       	ldi	r31, 0x05	; 5
    53a0:	68 94       	set
    53a2:	15 90       	lpm	r1, Z+
    53a4:	15 91       	lpm	r17, Z+
    53a6:	35 91       	lpm	r19, Z+
    53a8:	65 91       	lpm	r22, Z+
    53aa:	95 91       	lpm	r25, Z+
    53ac:	05 90       	lpm	r0, Z+
    53ae:	7f e2       	ldi	r23, 0x2F	; 47
    53b0:	73 95       	inc	r23
    53b2:	e1 18       	sub	r14, r1
    53b4:	f1 0a       	sbc	r15, r17
    53b6:	43 0b       	sbc	r20, r19
    53b8:	56 0b       	sbc	r21, r22
    53ba:	c9 0b       	sbc	r28, r25
    53bc:	d0 09       	sbc	r29, r0
    53be:	c0 f7       	brcc	.-16     	; 0x53b0 <__ftoa_engine+0x10a>
    53c0:	e1 0c       	add	r14, r1
    53c2:	f1 1e       	adc	r15, r17
    53c4:	43 1f       	adc	r20, r19
    53c6:	56 1f       	adc	r21, r22
    53c8:	c9 1f       	adc	r28, r25
    53ca:	d0 1d       	adc	r29, r0
    53cc:	7e f4       	brtc	.+30     	; 0x53ec <__ftoa_engine+0x146>
    53ce:	70 33       	cpi	r23, 0x30	; 48
    53d0:	11 f4       	brne	.+4      	; 0x53d6 <__ftoa_engine+0x130>
    53d2:	8a 95       	dec	r24
    53d4:	e6 cf       	rjmp	.-52     	; 0x53a2 <__ftoa_engine+0xfc>
    53d6:	e8 94       	clt
    53d8:	01 50       	subi	r16, 0x01	; 1
    53da:	30 f0       	brcs	.+12     	; 0x53e8 <__ftoa_engine+0x142>
    53dc:	08 0f       	add	r16, r24
    53de:	0a f4       	brpl	.+2      	; 0x53e2 <__ftoa_engine+0x13c>
    53e0:	00 27       	eor	r16, r16
    53e2:	02 17       	cp	r16, r18
    53e4:	08 f4       	brcc	.+2      	; 0x53e8 <__ftoa_engine+0x142>
    53e6:	20 2f       	mov	r18, r16
    53e8:	23 95       	inc	r18
    53ea:	02 2f       	mov	r16, r18
    53ec:	7a 33       	cpi	r23, 0x3A	; 58
    53ee:	28 f0       	brcs	.+10     	; 0x53fa <__ftoa_engine+0x154>
    53f0:	79 e3       	ldi	r23, 0x39	; 57
    53f2:	7d 93       	st	X+, r23
    53f4:	2a 95       	dec	r18
    53f6:	e9 f7       	brne	.-6      	; 0x53f2 <__ftoa_engine+0x14c>
    53f8:	10 c0       	rjmp	.+32     	; 0x541a <__ftoa_engine+0x174>
    53fa:	7d 93       	st	X+, r23
    53fc:	2a 95       	dec	r18
    53fe:	89 f6       	brne	.-94     	; 0x53a2 <__ftoa_engine+0xfc>
    5400:	06 94       	lsr	r0
    5402:	97 95       	ror	r25
    5404:	67 95       	ror	r22
    5406:	37 95       	ror	r19
    5408:	17 95       	ror	r17
    540a:	17 94       	ror	r1
    540c:	e1 18       	sub	r14, r1
    540e:	f1 0a       	sbc	r15, r17
    5410:	43 0b       	sbc	r20, r19
    5412:	56 0b       	sbc	r21, r22
    5414:	c9 0b       	sbc	r28, r25
    5416:	d0 09       	sbc	r29, r0
    5418:	98 f0       	brcs	.+38     	; 0x5440 <__ftoa_engine+0x19a>
    541a:	23 95       	inc	r18
    541c:	7e 91       	ld	r23, -X
    541e:	73 95       	inc	r23
    5420:	7a 33       	cpi	r23, 0x3A	; 58
    5422:	08 f0       	brcs	.+2      	; 0x5426 <__ftoa_engine+0x180>
    5424:	70 e3       	ldi	r23, 0x30	; 48
    5426:	7c 93       	st	X, r23
    5428:	20 13       	cpse	r18, r16
    542a:	b8 f7       	brcc	.-18     	; 0x541a <__ftoa_engine+0x174>
    542c:	7e 91       	ld	r23, -X
    542e:	70 61       	ori	r23, 0x10	; 16
    5430:	7d 93       	st	X+, r23
    5432:	30 f0       	brcs	.+12     	; 0x5440 <__ftoa_engine+0x19a>
    5434:	83 95       	inc	r24
    5436:	71 e3       	ldi	r23, 0x31	; 49
    5438:	7d 93       	st	X+, r23
    543a:	70 e3       	ldi	r23, 0x30	; 48
    543c:	2a 95       	dec	r18
    543e:	e1 f7       	brne	.-8      	; 0x5438 <__ftoa_engine+0x192>
    5440:	11 24       	eor	r1, r1
    5442:	ef 90       	pop	r14
    5444:	ff 90       	pop	r15
    5446:	0f 91       	pop	r16
    5448:	1f 91       	pop	r17
    544a:	cf 91       	pop	r28
    544c:	df 91       	pop	r29
    544e:	99 27       	eor	r25, r25
    5450:	87 fd       	sbrc	r24, 7
    5452:	90 95       	com	r25
    5454:	08 95       	ret

00005456 <strnlen_P>:
    5456:	fc 01       	movw	r30, r24
    5458:	05 90       	lpm	r0, Z+
    545a:	61 50       	subi	r22, 0x01	; 1
    545c:	70 40       	sbci	r23, 0x00	; 0
    545e:	01 10       	cpse	r0, r1
    5460:	d8 f7       	brcc	.-10     	; 0x5458 <strnlen_P+0x2>
    5462:	80 95       	com	r24
    5464:	90 95       	com	r25
    5466:	8e 0f       	add	r24, r30
    5468:	9f 1f       	adc	r25, r31
    546a:	08 95       	ret

0000546c <strnlen>:
    546c:	fc 01       	movw	r30, r24
    546e:	61 50       	subi	r22, 0x01	; 1
    5470:	70 40       	sbci	r23, 0x00	; 0
    5472:	01 90       	ld	r0, Z+
    5474:	01 10       	cpse	r0, r1
    5476:	d8 f7       	brcc	.-10     	; 0x546e <strnlen+0x2>
    5478:	80 95       	com	r24
    547a:	90 95       	com	r25
    547c:	8e 0f       	add	r24, r30
    547e:	9f 1f       	adc	r25, r31
    5480:	08 95       	ret

00005482 <fputc>:
    5482:	0f 93       	push	r16
    5484:	1f 93       	push	r17
    5486:	cf 93       	push	r28
    5488:	df 93       	push	r29
    548a:	fb 01       	movw	r30, r22
    548c:	23 81       	ldd	r18, Z+3	; 0x03
    548e:	21 fd       	sbrc	r18, 1
    5490:	03 c0       	rjmp	.+6      	; 0x5498 <fputc+0x16>
    5492:	8f ef       	ldi	r24, 0xFF	; 255
    5494:	9f ef       	ldi	r25, 0xFF	; 255
    5496:	28 c0       	rjmp	.+80     	; 0x54e8 <fputc+0x66>
    5498:	22 ff       	sbrs	r18, 2
    549a:	16 c0       	rjmp	.+44     	; 0x54c8 <fputc+0x46>
    549c:	46 81       	ldd	r20, Z+6	; 0x06
    549e:	57 81       	ldd	r21, Z+7	; 0x07
    54a0:	24 81       	ldd	r18, Z+4	; 0x04
    54a2:	35 81       	ldd	r19, Z+5	; 0x05
    54a4:	42 17       	cp	r20, r18
    54a6:	53 07       	cpc	r21, r19
    54a8:	44 f4       	brge	.+16     	; 0x54ba <fputc+0x38>
    54aa:	a0 81       	ld	r26, Z
    54ac:	b1 81       	ldd	r27, Z+1	; 0x01
    54ae:	9d 01       	movw	r18, r26
    54b0:	2f 5f       	subi	r18, 0xFF	; 255
    54b2:	3f 4f       	sbci	r19, 0xFF	; 255
    54b4:	31 83       	std	Z+1, r19	; 0x01
    54b6:	20 83       	st	Z, r18
    54b8:	8c 93       	st	X, r24
    54ba:	26 81       	ldd	r18, Z+6	; 0x06
    54bc:	37 81       	ldd	r19, Z+7	; 0x07
    54be:	2f 5f       	subi	r18, 0xFF	; 255
    54c0:	3f 4f       	sbci	r19, 0xFF	; 255
    54c2:	37 83       	std	Z+7, r19	; 0x07
    54c4:	26 83       	std	Z+6, r18	; 0x06
    54c6:	10 c0       	rjmp	.+32     	; 0x54e8 <fputc+0x66>
    54c8:	eb 01       	movw	r28, r22
    54ca:	09 2f       	mov	r16, r25
    54cc:	18 2f       	mov	r17, r24
    54ce:	00 84       	ldd	r0, Z+8	; 0x08
    54d0:	f1 85       	ldd	r31, Z+9	; 0x09
    54d2:	e0 2d       	mov	r30, r0
    54d4:	09 95       	icall
    54d6:	89 2b       	or	r24, r25
    54d8:	e1 f6       	brne	.-72     	; 0x5492 <fputc+0x10>
    54da:	8e 81       	ldd	r24, Y+6	; 0x06
    54dc:	9f 81       	ldd	r25, Y+7	; 0x07
    54de:	01 96       	adiw	r24, 0x01	; 1
    54e0:	9f 83       	std	Y+7, r25	; 0x07
    54e2:	8e 83       	std	Y+6, r24	; 0x06
    54e4:	81 2f       	mov	r24, r17
    54e6:	90 2f       	mov	r25, r16
    54e8:	df 91       	pop	r29
    54ea:	cf 91       	pop	r28
    54ec:	1f 91       	pop	r17
    54ee:	0f 91       	pop	r16
    54f0:	08 95       	ret

000054f2 <sprintf>:
    54f2:	0f 93       	push	r16
    54f4:	1f 93       	push	r17
    54f6:	cf 93       	push	r28
    54f8:	df 93       	push	r29
    54fa:	cd b7       	in	r28, 0x3d	; 61
    54fc:	de b7       	in	r29, 0x3e	; 62
    54fe:	2e 97       	sbiw	r28, 0x0e	; 14
    5500:	0f b6       	in	r0, 0x3f	; 63
    5502:	f8 94       	cli
    5504:	de bf       	out	0x3e, r29	; 62
    5506:	0f be       	out	0x3f, r0	; 63
    5508:	cd bf       	out	0x3d, r28	; 61
    550a:	0d 89       	ldd	r16, Y+21	; 0x15
    550c:	1e 89       	ldd	r17, Y+22	; 0x16
    550e:	86 e0       	ldi	r24, 0x06	; 6
    5510:	8c 83       	std	Y+4, r24	; 0x04
    5512:	1a 83       	std	Y+2, r17	; 0x02
    5514:	09 83       	std	Y+1, r16	; 0x01
    5516:	8f ef       	ldi	r24, 0xFF	; 255
    5518:	9f e7       	ldi	r25, 0x7F	; 127
    551a:	9e 83       	std	Y+6, r25	; 0x06
    551c:	8d 83       	std	Y+5, r24	; 0x05
    551e:	ae 01       	movw	r20, r28
    5520:	47 5e       	subi	r20, 0xE7	; 231
    5522:	5f 4f       	sbci	r21, 0xFF	; 255
    5524:	6f 89       	ldd	r22, Y+23	; 0x17
    5526:	78 8d       	ldd	r23, Y+24	; 0x18
    5528:	ce 01       	movw	r24, r28
    552a:	01 96       	adiw	r24, 0x01	; 1
    552c:	dc d9       	rcall	.-3144   	; 0x48e6 <vfprintf>
    552e:	2f 81       	ldd	r18, Y+7	; 0x07
    5530:	38 85       	ldd	r19, Y+8	; 0x08
    5532:	f8 01       	movw	r30, r16
    5534:	e2 0f       	add	r30, r18
    5536:	f3 1f       	adc	r31, r19
    5538:	10 82       	st	Z, r1
    553a:	2e 96       	adiw	r28, 0x0e	; 14
    553c:	0f b6       	in	r0, 0x3f	; 63
    553e:	f8 94       	cli
    5540:	de bf       	out	0x3e, r29	; 62
    5542:	0f be       	out	0x3f, r0	; 63
    5544:	cd bf       	out	0x3d, r28	; 61
    5546:	df 91       	pop	r29
    5548:	cf 91       	pop	r28
    554a:	1f 91       	pop	r17
    554c:	0f 91       	pop	r16
    554e:	08 95       	ret

00005550 <__ultoa_invert>:
    5550:	fa 01       	movw	r30, r20
    5552:	aa 27       	eor	r26, r26
    5554:	28 30       	cpi	r18, 0x08	; 8
    5556:	51 f1       	breq	.+84     	; 0x55ac <__ultoa_invert+0x5c>
    5558:	20 31       	cpi	r18, 0x10	; 16
    555a:	81 f1       	breq	.+96     	; 0x55bc <__ultoa_invert+0x6c>
    555c:	e8 94       	clt
    555e:	6f 93       	push	r22
    5560:	6e 7f       	andi	r22, 0xFE	; 254
    5562:	6e 5f       	subi	r22, 0xFE	; 254
    5564:	7f 4f       	sbci	r23, 0xFF	; 255
    5566:	8f 4f       	sbci	r24, 0xFF	; 255
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	af 4f       	sbci	r26, 0xFF	; 255
    556c:	b1 e0       	ldi	r27, 0x01	; 1
    556e:	3e d0       	rcall	.+124    	; 0x55ec <__ultoa_invert+0x9c>
    5570:	b4 e0       	ldi	r27, 0x04	; 4
    5572:	3c d0       	rcall	.+120    	; 0x55ec <__ultoa_invert+0x9c>
    5574:	67 0f       	add	r22, r23
    5576:	78 1f       	adc	r23, r24
    5578:	89 1f       	adc	r24, r25
    557a:	9a 1f       	adc	r25, r26
    557c:	a1 1d       	adc	r26, r1
    557e:	68 0f       	add	r22, r24
    5580:	79 1f       	adc	r23, r25
    5582:	8a 1f       	adc	r24, r26
    5584:	91 1d       	adc	r25, r1
    5586:	a1 1d       	adc	r26, r1
    5588:	6a 0f       	add	r22, r26
    558a:	71 1d       	adc	r23, r1
    558c:	81 1d       	adc	r24, r1
    558e:	91 1d       	adc	r25, r1
    5590:	a1 1d       	adc	r26, r1
    5592:	20 d0       	rcall	.+64     	; 0x55d4 <__ultoa_invert+0x84>
    5594:	09 f4       	brne	.+2      	; 0x5598 <__ultoa_invert+0x48>
    5596:	68 94       	set
    5598:	3f 91       	pop	r19
    559a:	2a e0       	ldi	r18, 0x0A	; 10
    559c:	26 9f       	mul	r18, r22
    559e:	11 24       	eor	r1, r1
    55a0:	30 19       	sub	r19, r0
    55a2:	30 5d       	subi	r19, 0xD0	; 208
    55a4:	31 93       	st	Z+, r19
    55a6:	de f6       	brtc	.-74     	; 0x555e <__ultoa_invert+0xe>
    55a8:	cf 01       	movw	r24, r30
    55aa:	08 95       	ret
    55ac:	46 2f       	mov	r20, r22
    55ae:	47 70       	andi	r20, 0x07	; 7
    55b0:	40 5d       	subi	r20, 0xD0	; 208
    55b2:	41 93       	st	Z+, r20
    55b4:	b3 e0       	ldi	r27, 0x03	; 3
    55b6:	0f d0       	rcall	.+30     	; 0x55d6 <__ultoa_invert+0x86>
    55b8:	c9 f7       	brne	.-14     	; 0x55ac <__ultoa_invert+0x5c>
    55ba:	f6 cf       	rjmp	.-20     	; 0x55a8 <__ultoa_invert+0x58>
    55bc:	46 2f       	mov	r20, r22
    55be:	4f 70       	andi	r20, 0x0F	; 15
    55c0:	40 5d       	subi	r20, 0xD0	; 208
    55c2:	4a 33       	cpi	r20, 0x3A	; 58
    55c4:	18 f0       	brcs	.+6      	; 0x55cc <__ultoa_invert+0x7c>
    55c6:	49 5d       	subi	r20, 0xD9	; 217
    55c8:	31 fd       	sbrc	r19, 1
    55ca:	40 52       	subi	r20, 0x20	; 32
    55cc:	41 93       	st	Z+, r20
    55ce:	02 d0       	rcall	.+4      	; 0x55d4 <__ultoa_invert+0x84>
    55d0:	a9 f7       	brne	.-22     	; 0x55bc <__ultoa_invert+0x6c>
    55d2:	ea cf       	rjmp	.-44     	; 0x55a8 <__ultoa_invert+0x58>
    55d4:	b4 e0       	ldi	r27, 0x04	; 4
    55d6:	a6 95       	lsr	r26
    55d8:	97 95       	ror	r25
    55da:	87 95       	ror	r24
    55dc:	77 95       	ror	r23
    55de:	67 95       	ror	r22
    55e0:	ba 95       	dec	r27
    55e2:	c9 f7       	brne	.-14     	; 0x55d6 <__ultoa_invert+0x86>
    55e4:	00 97       	sbiw	r24, 0x00	; 0
    55e6:	61 05       	cpc	r22, r1
    55e8:	71 05       	cpc	r23, r1
    55ea:	08 95       	ret
    55ec:	9b 01       	movw	r18, r22
    55ee:	ac 01       	movw	r20, r24
    55f0:	0a 2e       	mov	r0, r26
    55f2:	06 94       	lsr	r0
    55f4:	57 95       	ror	r21
    55f6:	47 95       	ror	r20
    55f8:	37 95       	ror	r19
    55fa:	27 95       	ror	r18
    55fc:	ba 95       	dec	r27
    55fe:	c9 f7       	brne	.-14     	; 0x55f2 <__ultoa_invert+0xa2>
    5600:	62 0f       	add	r22, r18
    5602:	73 1f       	adc	r23, r19
    5604:	84 1f       	adc	r24, r20
    5606:	95 1f       	adc	r25, r21
    5608:	a0 1d       	adc	r26, r0
    560a:	08 95       	ret

0000560c <__do_global_dtors>:
    560c:	13 e0       	ldi	r17, 0x03	; 3
    560e:	ca e0       	ldi	r28, 0x0A	; 10
    5610:	d3 e0       	ldi	r29, 0x03	; 3
    5612:	03 c0       	rjmp	.+6      	; 0x561a <__do_global_dtors+0xe>
    5614:	fe 01       	movw	r30, r28
    5616:	11 dd       	rcall	.-1502   	; 0x503a <__tablejump2__>
    5618:	21 96       	adiw	r28, 0x01	; 1
    561a:	cb 30       	cpi	r28, 0x0B	; 11
    561c:	d1 07       	cpc	r29, r17
    561e:	d1 f7       	brne	.-12     	; 0x5614 <__do_global_dtors+0x8>
    5620:	f8 94       	cli

00005622 <__stop_program>:
    5622:	ff cf       	rjmp	.-2      	; 0x5622 <__stop_program>
