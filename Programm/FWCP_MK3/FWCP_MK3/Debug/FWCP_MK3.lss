
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00004768  000047fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000554  00800286  00800286  00004982  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004982  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000049e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009d55  00000000  00000000  00004e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bd2  00000000  00000000  0000eb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003354  00000000  00000000  0001076f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb0  00000000  00000000  00013ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000147a  00000000  00000000  00014a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000068d2  00000000  00000000  00015eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  0001c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c9 c2       	rjmp	.+1426   	; 0x594 <__dtors_end>
       2:	00 00       	nop
       4:	fd c2       	rjmp	.+1530   	; 0x600 <__bad_interrupt>
       6:	00 00       	nop
       8:	fb c2       	rjmp	.+1526   	; 0x600 <__bad_interrupt>
       a:	00 00       	nop
       c:	f9 c2       	rjmp	.+1522   	; 0x600 <__bad_interrupt>
       e:	00 00       	nop
      10:	f7 c2       	rjmp	.+1518   	; 0x600 <__bad_interrupt>
      12:	00 00       	nop
      14:	f5 c2       	rjmp	.+1514   	; 0x600 <__bad_interrupt>
      16:	00 00       	nop
      18:	f3 c2       	rjmp	.+1510   	; 0x600 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f1 c2       	rjmp	.+1506   	; 0x600 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ef c2       	rjmp	.+1502   	; 0x600 <__bad_interrupt>
      22:	00 00       	nop
      24:	ed c2       	rjmp	.+1498   	; 0x600 <__bad_interrupt>
      26:	00 00       	nop
      28:	eb c2       	rjmp	.+1494   	; 0x600 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_11>
      30:	e7 c2       	rjmp	.+1486   	; 0x600 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_13>
      38:	e3 c2       	rjmp	.+1478   	; 0x600 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e1 c2       	rjmp	.+1474   	; 0x600 <__bad_interrupt>
      3e:	00 00       	nop
      40:	df c2       	rjmp	.+1470   	; 0x600 <__bad_interrupt>
      42:	00 00       	nop
      44:	dd c2       	rjmp	.+1466   	; 0x600 <__bad_interrupt>
      46:	00 00       	nop
      48:	db c2       	rjmp	.+1462   	; 0x600 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d9 c2       	rjmp	.+1458   	; 0x600 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d7 c2       	rjmp	.+1454   	; 0x600 <__bad_interrupt>
      52:	00 00       	nop
      54:	d5 c2       	rjmp	.+1450   	; 0x600 <__bad_interrupt>
      56:	00 00       	nop
      58:	d3 c2       	rjmp	.+1446   	; 0x600 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d1 c2       	rjmp	.+1442   	; 0x600 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cf c2       	rjmp	.+1438   	; 0x600 <__bad_interrupt>
      62:	00 00       	nop
      64:	cd c2       	rjmp	.+1434   	; 0x600 <__bad_interrupt>
      66:	00 00       	nop
      68:	cb c2       	rjmp	.+1430   	; 0x600 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c9 c2       	rjmp	.+1426   	; 0x600 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c7 c2       	rjmp	.+1422   	; 0x600 <__bad_interrupt>
      72:	00 00       	nop
      74:	c5 c2       	rjmp	.+1418   	; 0x600 <__bad_interrupt>
      76:	00 00       	nop
      78:	c3 c2       	rjmp	.+1414   	; 0x600 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c1 c2       	rjmp	.+1410   	; 0x600 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bf c2       	rjmp	.+1406   	; 0x600 <__bad_interrupt>
      82:	00 00       	nop
      84:	bd c2       	rjmp	.+1402   	; 0x600 <__bad_interrupt>
      86:	00 00       	nop
      88:	bb c2       	rjmp	.+1398   	; 0x600 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b 08       	sbc	r7, r11
      8e:	7d 08       	sbc	r7, r13
      90:	7d 08       	sbc	r7, r13
      92:	7d 08       	sbc	r7, r13
      94:	7d 08       	sbc	r7, r13
      96:	7d 08       	sbc	r7, r13
      98:	7d 08       	sbc	r7, r13
      9a:	79 08       	sbc	r7, r9
      9c:	7d 08       	sbc	r7, r13
      9e:	7d 08       	sbc	r7, r13
      a0:	7d 08       	sbc	r7, r13
      a2:	7d 08       	sbc	r7, r13
      a4:	7d 08       	sbc	r7, r13
      a6:	80 08       	sbc	r8, r0
      a8:	7f 08       	sbc	r7, r15
      aa:	69 08       	sbc	r6, r9
      ac:	6b 08       	sbc	r6, r11
      ae:	6d 08       	sbc	r6, r13
      b0:	6f 08       	sbc	r6, r15
      b2:	71 08       	sbc	r7, r1
      b4:	73 08       	sbc	r7, r3
      b6:	75 08       	sbc	r7, r5
      b8:	77 08       	sbc	r7, r7
      ba:	58 10       	cpse	r5, r8
      bc:	67 10       	cpse	r6, r7
      be:	67 10       	cpse	r6, r7
      c0:	67 10       	cpse	r6, r7
      c2:	67 10       	cpse	r6, r7
      c4:	67 10       	cpse	r6, r7
      c6:	67 10       	cpse	r6, r7
      c8:	67 10       	cpse	r6, r7
      ca:	67 10       	cpse	r6, r7
      cc:	67 10       	cpse	r6, r7
      ce:	67 10       	cpse	r6, r7
      d0:	67 10       	cpse	r6, r7
      d2:	67 10       	cpse	r6, r7
      d4:	67 10       	cpse	r6, r7
      d6:	67 10       	cpse	r6, r7
      d8:	67 10       	cpse	r6, r7
      da:	67 10       	cpse	r6, r7
      dc:	67 10       	cpse	r6, r7
      de:	67 10       	cpse	r6, r7
      e0:	67 10       	cpse	r6, r7
      e2:	67 10       	cpse	r6, r7
      e4:	67 10       	cpse	r6, r7
      e6:	67 10       	cpse	r6, r7
      e8:	67 10       	cpse	r6, r7
      ea:	67 10       	cpse	r6, r7
      ec:	67 10       	cpse	r6, r7
      ee:	67 10       	cpse	r6, r7
      f0:	67 10       	cpse	r6, r7
      f2:	67 10       	cpse	r6, r7
      f4:	67 10       	cpse	r6, r7
      f6:	67 10       	cpse	r6, r7
      f8:	67 10       	cpse	r6, r7
      fa:	67 10       	cpse	r6, r7
      fc:	67 10       	cpse	r6, r7
      fe:	67 10       	cpse	r6, r7
     100:	67 10       	cpse	r6, r7
     102:	67 10       	cpse	r6, r7
     104:	67 10       	cpse	r6, r7
     106:	67 10       	cpse	r6, r7
     108:	67 10       	cpse	r6, r7
     10a:	67 10       	cpse	r6, r7
     10c:	67 10       	cpse	r6, r7
     10e:	67 10       	cpse	r6, r7
     110:	67 10       	cpse	r6, r7
     112:	67 10       	cpse	r6, r7
     114:	67 10       	cpse	r6, r7
     116:	67 10       	cpse	r6, r7
     118:	67 10       	cpse	r6, r7
     11a:	67 10       	cpse	r6, r7
     11c:	67 10       	cpse	r6, r7
     11e:	67 10       	cpse	r6, r7
     120:	67 10       	cpse	r6, r7
     122:	34 10       	cpse	r3, r4
     124:	67 10       	cpse	r6, r7
     126:	67 10       	cpse	r6, r7
     128:	67 10       	cpse	r6, r7
     12a:	67 10       	cpse	r6, r7
     12c:	67 10       	cpse	r6, r7
     12e:	67 10       	cpse	r6, r7
     130:	67 10       	cpse	r6, r7
     132:	01 10       	cpse	r0, r1
     134:	fd 0f       	add	r31, r29
     136:	67 10       	cpse	r6, r7
     138:	21 10       	cpse	r2, r1
     13a:	67 10       	cpse	r6, r7
     13c:	67 10       	cpse	r6, r7
     13e:	0e 10       	cpse	r0, r14
     140:	67 10       	cpse	r6, r7
     142:	67 10       	cpse	r6, r7
     144:	49 10       	cpse	r4, r9
     146:	85 13       	cpse	r24, r21
     148:	ab 13       	cpse	r26, r27
     14a:	d2 13       	cpse	r29, r18
     14c:	fa 13       	cpse	r31, r26
     14e:	21 14       	cp	r2, r1
     150:	4b 14       	cp	r4, r11
     152:	74 14       	cp	r7, r4
     154:	9e 14       	cp	r9, r14
     156:	15 15       	cp	r17, r5
     158:	3f 15       	cp	r19, r15
     15a:	05 a8       	ldd	r0, Z+53	; 0x35
     15c:	4c cd       	rjmp	.-1384   	; 0xfffffbf6 <__eeprom_end+0xff7efbf6>
     15e:	b2 d4       	rcall	.+2404   	; 0xac4 <_ZN7Display6analogEhhhh+0x104>
     160:	4e b9       	out	0x0e, r20	; 14
     162:	38 36       	cpi	r19, 0x68	; 104
     164:	a9 02       	muls	r26, r25
     166:	0c 50       	subi	r16, 0x0C	; 12
     168:	b9 91       	ld	r27, Y+
     16a:	86 88       	ldd	r8, Z+22	; 0x16
     16c:	08 3c       	cpi	r16, 0xC8	; 200
     16e:	a6 aa       	std	Z+54, r10	; 0x36
     170:	aa 2a       	or	r10, r26
     172:	be 00       	.word	0x00be	; ????
     174:	00 00       	nop
     176:	80 3f       	cpi	r24, 0xF0	; 240

00000178 <__trampolines_end>:
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	f8 fc       	.word	0xfcf8	; ????
     17c:	fe 1e       	adc	r15, r30
     17e:	07 07       	cpc	r16, r23
     180:	07 07       	cpc	r16, r23
     182:	1e fe       	.word	0xfe1e	; ????
     184:	fc f8       	.word	0xf8fc	; ????
     186:	f0 00       	.word	0x00f0	; ????
     188:	00 07       	cpc	r16, r16
     18a:	0f 3f       	cpi	r16, 0xFF	; 255
     18c:	3f 7c       	andi	r19, 0xCF	; 207
     18e:	70 70       	andi	r23, 0x00	; 0
     190:	70 70       	andi	r23, 0x00	; 0
     192:	7c 3f       	cpi	r23, 0xFC	; 252
     194:	1f 1f       	adc	r17, r31
     196:	07 00       	.word	0x0007	; ????
     198:	00 00       	nop
     19a:	00 06       	cpc	r0, r16
     19c:	07 07       	cpc	r16, r23
     19e:	ff ff       	.word	0xffff	; ????
     1a0:	ff ff       	.word	0xffff	; ????
	...
     1ae:	7f 7f       	andi	r23, 0xFF	; 255
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	00 00       	nop
     1b8:	00 38       	cpi	r16, 0x80	; 128
     1ba:	3c 3e       	cpi	r19, 0xEC	; 236
     1bc:	3e 0f       	add	r19, r30
     1be:	07 07       	cpc	r16, r23
     1c0:	07 cf       	rjmp	.-498    	; 0xffffffd0 <__eeprom_end+0xff7effd0>
     1c2:	ff fe       	.word	0xfeff	; ????
     1c4:	fe 38       	cpi	r31, 0x8E	; 142
     1c6:	00 00       	nop
     1c8:	00 40       	sbci	r16, 0x00	; 0
     1ca:	40 60       	ori	r20, 0x00	; 0
     1cc:	70 78       	andi	r23, 0x80	; 128
     1ce:	7c 7e       	andi	r23, 0xEC	; 236
     1d0:	7f 77       	andi	r23, 0x7F	; 127
     1d2:	73 71       	andi	r23, 0x13	; 19
     1d4:	70 70       	andi	r23, 0x00	; 0
     1d6:	00 00       	nop
     1d8:	00 18       	sub	r0, r0
     1da:	1c 1e       	adc	r1, r28
     1dc:	1e 0f       	add	r17, r30
     1de:	c7 c7       	rjmp	.+3982   	; 0x116e <_ZN7KompassC1Ev+0x1c>
     1e0:	e7 ff       	sbrs	r30, 7
     1e2:	fe be       	out	0x3e, r15	; 62
     1e4:	9c 00       	.word	0x009c	; ????
     1e6:	00 00       	nop
     1e8:	00 0c       	add	r0, r0
     1ea:	1c 3c       	cpi	r17, 0xCC	; 204
     1ec:	3c 78       	andi	r19, 0x8C	; 140
     1ee:	70 70       	andi	r23, 0x00	; 0
     1f0:	70 79       	andi	r23, 0x90	; 144
     1f2:	7f 3f       	cpi	r23, 0xFF	; 255
     1f4:	1f 0f       	add	r17, r31
     1f6:	00 00       	nop
     1f8:	00 00       	nop
     1fa:	80 c0       	rjmp	.+256    	; 0x2fc <_ZL7font5x8+0x44>
     1fc:	e0 70       	andi	r30, 0x00	; 0
     1fe:	38 1c       	adc	r3, r8
     200:	1e ff       	.word	0xff1e	; ????
     202:	ff ff       	.word	0xffff	; ????
     204:	ff 00       	.word	0x00ff	; ????
     206:	00 00       	nop
     208:	06 07       	cpc	r16, r22
     20a:	07 07       	cpc	r16, r23
     20c:	06 06       	cpc	r0, r22
     20e:	06 06       	cpc	r0, r22
     210:	06 7f       	andi	r16, 0xF6	; 246
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	7f 06       	cpc	r7, r31
     216:	06 00       	.word	0x0006	; ????
     218:	00 00       	nop
     21a:	00 00       	nop
     21c:	f0 ff       	sbrs	r31, 0
     21e:	ff ff       	.word	0xffff	; ????
     220:	e7 e7       	ldi	r30, 0x77	; 119
     222:	e7 e7       	ldi	r30, 0x77	; 119
     224:	c7 87       	std	Z+15, r28	; 0x0f
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	38 78       	andi	r19, 0x88	; 136
     22c:	71 70       	andi	r23, 0x01	; 1
     22e:	70 70       	andi	r23, 0x00	; 0
     230:	70 70       	andi	r23, 0x00	; 0
     232:	39 3f       	cpi	r19, 0xF9	; 249
     234:	3f 1f       	adc	r19, r31
     236:	0f 00       	.word	0x000f	; ????
     238:	00 80       	ld	r0, Z
     23a:	e0 f0       	brcs	.+56     	; 0x274 <__trampolines_end+0xfc>
     23c:	f8 fc       	.word	0xfcf8	; ????
     23e:	7f 7f       	andi	r23, 0xFF	; 255
     240:	6f 67       	ori	r22, 0x7F	; 127
     242:	e1 e1       	ldi	r30, 0x11	; 17
     244:	c0 80       	ld	r12, Z
     246:	00 00       	nop
     248:	00 0f       	add	r16, r16
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	3f 78       	andi	r19, 0x8F	; 143
     24e:	70 70       	andi	r23, 0x00	; 0
     250:	70 70       	andi	r23, 0x00	; 0
     252:	78 3f       	cpi	r23, 0xF8	; 248
     254:	3f 1f       	adc	r19, r31
     256:	0f 00       	.word	0x000f	; ????
     258:	00 07       	cpc	r16, r16
     25a:	07 07       	cpc	r16, r23
     25c:	07 07       	cpc	r16, r23
     25e:	c7 e7       	ldi	r28, 0x77	; 119
     260:	f7 ff       	sbrs	r31, 7
     262:	7f 3f       	cpi	r23, 0xFF	; 255
     264:	1f 07       	cpc	r17, r31
     266:	03 01       	movw	r0, r6
     268:	00 20       	and	r0, r0
     26a:	38 7c       	andi	r19, 0xC8	; 200
     26c:	7e 3f       	cpi	r23, 0xFE	; 254
     26e:	0f 07       	cpc	r16, r31
     270:	03 00       	.word	0x0003	; ????
	...
     27a:	00 1c       	adc	r0, r0
     27c:	be fe       	.word	0xfebe	; ????
     27e:	ff e7       	ldi	r31, 0x7F	; 127
     280:	c3 c3       	rjmp	.+1926   	; 0xa08 <_ZN7Display6analogEhhhh+0x48>
     282:	e7 ff       	sbrs	r30, 7
     284:	fe be       	out	0x3e, r15	; 62
     286:	1c 00       	.word	0x001c	; ????
     288:	00 00       	nop
     28a:	0e 3f       	cpi	r16, 0xFE	; 254
     28c:	3f 7f       	andi	r19, 0xFF	; 255
     28e:	71 60       	ori	r23, 0x01	; 1
     290:	60 60       	ori	r22, 0x00	; 0
     292:	71 7f       	andi	r23, 0xF1	; 241
     294:	3f 3f       	cpi	r19, 0xFF	; 255
     296:	0f 00       	.word	0x000f	; ????
     298:	00 78       	andi	r16, 0x80	; 128
     29a:	fc fe       	.word	0xfefc	; ????
     29c:	fe 8f       	std	Y+30, r31	; 0x1e
     29e:	07 07       	cpc	r16, r23
     2a0:	07 07       	cpc	r16, r23
     2a2:	8f fe       	.word	0xfe8f	; ????
     2a4:	fe fc       	.word	0xfcfe	; ????
     2a6:	f8 00       	.word	0x00f8	; ????
     2a8:	00 00       	nop
     2aa:	00 01       	movw	r0, r0
     2ac:	43 43       	sbci	r20, 0x33	; 51
     2ae:	73 7b       	andi	r23, 0xB3	; 179
     2b0:	7f 7f       	andi	r23, 0xFF	; 255
     2b2:	1f 0f       	add	r17, r31
     2b4:	07 03       	mulsu	r16, r23
	...

000002b8 <_ZL7font5x8>:
     2b8:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     2c8:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     2d8:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     2e8:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     2f8:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     308:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     318:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     328:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     338:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     348:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     358:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     368:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     378:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     388:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     398:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     3a8:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     3b8:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     3c8:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     3d8:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     3e8:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     3f8:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     408:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     418:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     428:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     438:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     448:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     458:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     468:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     478:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     488:	00 10 08 08 10 08                                   ......

0000048e <__c.2179>:
     48e:	6e 61 6e 00                                         nan.

00000492 <__c.2177>:
     492:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     4a2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     4b2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     4c2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     4d2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     4e2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     4f2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     502:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     512:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     522:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     532:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     542:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     552:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     562:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     572:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     582:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000590 <__ctors_start>:
     590:	a9 17       	cp	r26, r25

00000592 <__ctors_end>:
     592:	d4 17       	cp	r29, r20

00000594 <__dtors_end>:
     594:	11 24       	eor	r1, r1
     596:	1f be       	out	0x3f, r1	; 63
     598:	cf ef       	ldi	r28, 0xFF	; 255
     59a:	d0 e4       	ldi	r29, 0x40	; 64
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	cd bf       	out	0x3d, r28	; 61

000005a0 <_Z8wdt_initv>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
     5a0:	14 be       	out	0x34, r1	; 52
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	a8 95       	wdr
     5a8:	80 91 60 00 	lds	r24, 0x0060
     5ac:	88 61       	ori	r24, 0x18	; 24
     5ae:	80 93 60 00 	sts	0x0060, r24
     5b2:	10 92 60 00 	sts	0x0060, r1
     5b6:	0f be       	out	0x3f, r0	; 63

000005b8 <__do_copy_data>:
     5b8:	12 e0       	ldi	r17, 0x02	; 2
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	b1 e0       	ldi	r27, 0x01	; 1
     5be:	e8 e6       	ldi	r30, 0x68	; 104
     5c0:	f7 e4       	ldi	r31, 0x47	; 71
     5c2:	00 e0       	ldi	r16, 0x00	; 0
     5c4:	0b bf       	out	0x3b, r16	; 59
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <__do_copy_data+0x14>
     5c8:	07 90       	elpm	r0, Z+
     5ca:	0d 92       	st	X+, r0
     5cc:	a6 38       	cpi	r26, 0x86	; 134
     5ce:	b1 07       	cpc	r27, r17
     5d0:	d9 f7       	brne	.-10     	; 0x5c8 <__do_copy_data+0x10>

000005d2 <__do_clear_bss>:
     5d2:	27 e0       	ldi	r18, 0x07	; 7
     5d4:	a6 e8       	ldi	r26, 0x86	; 134
     5d6:	b2 e0       	ldi	r27, 0x02	; 2
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <.do_clear_bss_start>

000005da <.do_clear_bss_loop>:
     5da:	1d 92       	st	X+, r1

000005dc <.do_clear_bss_start>:
     5dc:	aa 3d       	cpi	r26, 0xDA	; 218
     5de:	b2 07       	cpc	r27, r18
     5e0:	e1 f7       	brne	.-8      	; 0x5da <.do_clear_bss_loop>

000005e2 <__do_global_ctors>:
     5e2:	12 e0       	ldi	r17, 0x02	; 2
     5e4:	c9 ec       	ldi	r28, 0xC9	; 201
     5e6:	d2 e0       	ldi	r29, 0x02	; 2
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <__do_global_ctors+0x10>
     5ea:	21 97       	sbiw	r28, 0x01	; 1
     5ec:	fe 01       	movw	r30, r28
     5ee:	0e 94 bf 20 	call	0x417e	; 0x417e <__tablejump2__>
     5f2:	c8 3c       	cpi	r28, 0xC8	; 200
     5f4:	d1 07       	cpc	r29, r17
     5f6:	c9 f7       	brne	.-14     	; 0x5ea <__do_global_ctors+0x8>
     5f8:	0e 94 2a 11 	call	0x2254	; 0x2254 <main>
     5fc:	0c 94 a8 23 	jmp	0x4750	; 0x4750 <__do_global_dtors>

00000600 <__bad_interrupt>:
     600:	ff cc       	rjmp	.-1538   	; 0x0 <__vectors>

00000602 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
     602:	9c 5f       	subi	r25, 0xFC	; 252
     604:	5a c4       	rjmp	.+2228   	; 0xeba <_ZN3I2CD1Ev>
     606:	08 95       	ret

00000608 <_ZN7Display10clearFrameEv>:
     608:	fc 01       	movw	r30, r24
     60a:	9c 5f       	subi	r25, 0xFC	; 252
     60c:	11 92       	st	Z+, r1
     60e:	e8 17       	cp	r30, r24
     610:	f9 07       	cpc	r31, r25
     612:	e1 f7       	brne	.-8      	; 0x60c <_ZN7Display10clearFrameEv+0x4>
     614:	08 95       	ret

00000616 <_ZN7Display15ssd1306_commandEh>:
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	16 2f       	mov	r17, r22
     61e:	ec 01       	movw	r28, r24
     620:	dc 5f       	subi	r29, 0xFC	; 252
     622:	ce 01       	movw	r24, r28
     624:	4b d4       	rcall	.+2198   	; 0xebc <_ZN3I2C9twi_startEv>
     626:	68 e7       	ldi	r22, 0x78	; 120
     628:	ce 01       	movw	r24, r28
     62a:	50 d4       	rcall	.+2208   	; 0xecc <_ZN3I2C9twi_writeEh>
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	ce 01       	movw	r24, r28
     630:	4d d4       	rcall	.+2202   	; 0xecc <_ZN3I2C9twi_writeEh>
     632:	61 2f       	mov	r22, r17
     634:	ce 01       	movw	r24, r28
     636:	4a d4       	rcall	.+2196   	; 0xecc <_ZN3I2C9twi_writeEh>
     638:	ce 01       	movw	r24, r28
     63a:	44 d4       	rcall	.+2184   	; 0xec4 <_ZN3I2C8twi_stopEv>
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	08 95       	ret

00000644 <_ZN7Display17InitializeDisplayEv>:
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
     64a:	6e ea       	ldi	r22, 0xAE	; 174
     64c:	e4 df       	rcall	.-56     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     64e:	65 ed       	ldi	r22, 0xD5	; 213
     650:	ce 01       	movw	r24, r28
     652:	e1 df       	rcall	.-62     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     654:	60 e8       	ldi	r22, 0x80	; 128
     656:	ce 01       	movw	r24, r28
     658:	de df       	rcall	.-68     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     65a:	68 ea       	ldi	r22, 0xA8	; 168
     65c:	ce 01       	movw	r24, r28
     65e:	db df       	rcall	.-74     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     660:	6f e3       	ldi	r22, 0x3F	; 63
     662:	ce 01       	movw	r24, r28
     664:	d8 df       	rcall	.-80     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     666:	63 ed       	ldi	r22, 0xD3	; 211
     668:	ce 01       	movw	r24, r28
     66a:	d5 df       	rcall	.-86     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	ce 01       	movw	r24, r28
     670:	d2 df       	rcall	.-92     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     672:	60 e4       	ldi	r22, 0x40	; 64
     674:	ce 01       	movw	r24, r28
     676:	cf df       	rcall	.-98     	; 0x616 <_ZN7Display15ssd1306_commandEh>
     678:	6d e8       	ldi	r22, 0x8D	; 141
     67a:	ce 01       	movw	r24, r28
     67c:	cc df       	rcall	.-104    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     67e:	64 e1       	ldi	r22, 0x14	; 20
     680:	ce 01       	movw	r24, r28
     682:	c9 df       	rcall	.-110    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     684:	60 e2       	ldi	r22, 0x20	; 32
     686:	ce 01       	movw	r24, r28
     688:	c6 df       	rcall	.-116    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	ce 01       	movw	r24, r28
     68e:	c3 df       	rcall	.-122    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     690:	61 ea       	ldi	r22, 0xA1	; 161
     692:	ce 01       	movw	r24, r28
     694:	c0 df       	rcall	.-128    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     696:	68 ec       	ldi	r22, 0xC8	; 200
     698:	ce 01       	movw	r24, r28
     69a:	bd df       	rcall	.-134    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     69c:	6a ed       	ldi	r22, 0xDA	; 218
     69e:	ce 01       	movw	r24, r28
     6a0:	ba df       	rcall	.-140    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6a2:	62 e1       	ldi	r22, 0x12	; 18
     6a4:	ce 01       	movw	r24, r28
     6a6:	b7 df       	rcall	.-146    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6a8:	61 e8       	ldi	r22, 0x81	; 129
     6aa:	ce 01       	movw	r24, r28
     6ac:	b4 df       	rcall	.-152    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6ae:	6f ec       	ldi	r22, 0xCF	; 207
     6b0:	ce 01       	movw	r24, r28
     6b2:	b1 df       	rcall	.-158    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6b4:	69 ed       	ldi	r22, 0xD9	; 217
     6b6:	ce 01       	movw	r24, r28
     6b8:	ae df       	rcall	.-164    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6ba:	61 ef       	ldi	r22, 0xF1	; 241
     6bc:	ce 01       	movw	r24, r28
     6be:	ab df       	rcall	.-170    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6c0:	6b ed       	ldi	r22, 0xDB	; 219
     6c2:	ce 01       	movw	r24, r28
     6c4:	a8 df       	rcall	.-176    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6c6:	60 e4       	ldi	r22, 0x40	; 64
     6c8:	ce 01       	movw	r24, r28
     6ca:	a5 df       	rcall	.-182    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6cc:	64 ea       	ldi	r22, 0xA4	; 164
     6ce:	ce 01       	movw	r24, r28
     6d0:	a2 df       	rcall	.-188    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6d2:	66 ea       	ldi	r22, 0xA6	; 166
     6d4:	ce 01       	movw	r24, r28
     6d6:	9f df       	rcall	.-194    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6d8:	6f ea       	ldi	r22, 0xAF	; 175
     6da:	ce 01       	movw	r24, r28
     6dc:	9c df       	rcall	.-200    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	08 95       	ret

000006e4 <_ZN7DisplayC1Ev>:
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	9c 5f       	subi	r25, 0xFC	; 252
     6ec:	e2 d3       	rcall	.+1988   	; 0xeb2 <_ZN3I2CC1Ev>
     6ee:	ce 01       	movw	r24, r28
     6f0:	a9 df       	rcall	.-174    	; 0x644 <_ZN7Display17InitializeDisplayEv>
     6f2:	ce 01       	movw	r24, r28
     6f4:	89 df       	rcall	.-238    	; 0x608 <_ZN7Display10clearFrameEv>
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <_ZN7Display9sendFrameEv>:
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
     70a:	61 e2       	ldi	r22, 0x21	; 33
     70c:	84 df       	rcall	.-248    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	ce 01       	movw	r24, r28
     712:	81 df       	rcall	.-254    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     714:	6f e7       	ldi	r22, 0x7F	; 127
     716:	ce 01       	movw	r24, r28
     718:	7e df       	rcall	.-260    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     71a:	62 e2       	ldi	r22, 0x22	; 34
     71c:	ce 01       	movw	r24, r28
     71e:	7b df       	rcall	.-266    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	ce 01       	movw	r24, r28
     724:	78 df       	rcall	.-272    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     726:	67 e0       	ldi	r22, 0x07	; 7
     728:	ce 01       	movw	r24, r28
     72a:	75 df       	rcall	.-278    	; 0x616 <_ZN7Display15ssd1306_commandEh>
     72c:	8e 01       	movw	r16, r28
     72e:	1c 5f       	subi	r17, 0xFC	; 252
     730:	c8 01       	movw	r24, r16
     732:	c4 d3       	rcall	.+1928   	; 0xebc <_ZN3I2C9twi_startEv>
     734:	68 e7       	ldi	r22, 0x78	; 120
     736:	c8 01       	movw	r24, r16
     738:	c9 d3       	rcall	.+1938   	; 0xecc <_ZN3I2C9twi_writeEh>
     73a:	60 e4       	ldi	r22, 0x40	; 64
     73c:	c8 01       	movw	r24, r16
     73e:	c6 d3       	rcall	.+1932   	; 0xecc <_ZN3I2C9twi_writeEh>
     740:	78 01       	movw	r14, r16
     742:	69 91       	ld	r22, Y+
     744:	c8 01       	movw	r24, r16
     746:	c2 d3       	rcall	.+1924   	; 0xecc <_ZN3I2C9twi_writeEh>
     748:	ce 15       	cp	r28, r14
     74a:	df 05       	cpc	r29, r15
     74c:	d1 f7       	brne	.-12     	; 0x742 <_ZN7Display9sendFrameEv+0x46>
     74e:	c8 01       	movw	r24, r16
     750:	b9 d3       	rcall	.+1906   	; 0xec4 <_ZN3I2C8twi_stopEv>
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	08 95       	ret

00000760 <_ZN7Display9drawPixelEhhh>:
     760:	66 23       	and	r22, r22
     762:	ac f1       	brlt	.+106    	; 0x7ce <_ZN7Display9drawPixelEhhh+0x6e>
     764:	40 34       	cpi	r20, 0x40	; 64
     766:	98 f5       	brcc	.+102    	; 0x7ce <_ZN7Display9drawPixelEhhh+0x6e>
     768:	21 11       	cpse	r18, r1
     76a:	19 c0       	rjmp	.+50     	; 0x79e <_ZN7Display9drawPixelEhhh+0x3e>
     76c:	24 2f       	mov	r18, r20
     76e:	26 95       	lsr	r18
     770:	26 95       	lsr	r18
     772:	26 95       	lsr	r18
     774:	50 e8       	ldi	r21, 0x80	; 128
     776:	25 9f       	mul	r18, r21
     778:	90 01       	movw	r18, r0
     77a:	11 24       	eor	r1, r1
     77c:	26 0f       	add	r18, r22
     77e:	31 1d       	adc	r19, r1
     780:	fc 01       	movw	r30, r24
     782:	e2 0f       	add	r30, r18
     784:	f3 1f       	adc	r31, r19
     786:	47 70       	andi	r20, 0x07	; 7
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	02 c0       	rjmp	.+4      	; 0x792 <_ZN7Display9drawPixelEhhh+0x32>
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	4a 95       	dec	r20
     794:	e2 f7       	brpl	.-8      	; 0x78e <_ZN7Display9drawPixelEhhh+0x2e>
     796:	90 81       	ld	r25, Z
     798:	89 2b       	or	r24, r25
     79a:	80 83       	st	Z, r24
     79c:	08 95       	ret
     79e:	24 2f       	mov	r18, r20
     7a0:	26 95       	lsr	r18
     7a2:	26 95       	lsr	r18
     7a4:	26 95       	lsr	r18
     7a6:	30 e8       	ldi	r19, 0x80	; 128
     7a8:	23 9f       	mul	r18, r19
     7aa:	f0 01       	movw	r30, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	e6 0f       	add	r30, r22
     7b0:	f1 1d       	adc	r31, r1
     7b2:	e8 0f       	add	r30, r24
     7b4:	f9 1f       	adc	r31, r25
     7b6:	47 70       	andi	r20, 0x07	; 7
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <_ZN7Display9drawPixelEhhh+0x62>
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	4a 95       	dec	r20
     7c4:	e2 f7       	brpl	.-8      	; 0x7be <_ZN7Display9drawPixelEhhh+0x5e>
     7c6:	80 95       	com	r24
     7c8:	90 81       	ld	r25, Z
     7ca:	89 23       	and	r24, r25
     7cc:	80 83       	st	Z, r24
     7ce:	08 95       	ret

000007d0 <_ZN7Display9drawVLineEhhh>:
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	22 23       	and	r18, r18
     7dc:	69 f0       	breq	.+26     	; 0x7f8 <_ZN7Display9drawVLineEhhh+0x28>
     7de:	c4 2f       	mov	r28, r20
     7e0:	f6 2e       	mov	r15, r22
     7e2:	8c 01       	movw	r16, r24
     7e4:	d2 2f       	mov	r29, r18
     7e6:	d4 0f       	add	r29, r20
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	4c 2f       	mov	r20, r28
     7ec:	6f 2d       	mov	r22, r15
     7ee:	c8 01       	movw	r24, r16
     7f0:	b7 df       	rcall	.-146    	; 0x760 <_ZN7Display9drawPixelEhhh>
     7f2:	cf 5f       	subi	r28, 0xFF	; 255
     7f4:	cd 13       	cpse	r28, r29
     7f6:	f8 cf       	rjmp	.-16     	; 0x7e8 <_ZN7Display9drawVLineEhhh+0x18>
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	08 95       	ret

00000804 <_ZN7Display9drawHLineEhhh>:
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	22 23       	and	r18, r18
     810:	69 f0       	breq	.+26     	; 0x82c <_ZN7Display9drawHLineEhhh+0x28>
     812:	f4 2e       	mov	r15, r20
     814:	c6 2f       	mov	r28, r22
     816:	8c 01       	movw	r16, r24
     818:	d2 2f       	mov	r29, r18
     81a:	d6 0f       	add	r29, r22
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	4f 2d       	mov	r20, r15
     820:	6c 2f       	mov	r22, r28
     822:	c8 01       	movw	r24, r16
     824:	9d df       	rcall	.-198    	; 0x760 <_ZN7Display9drawPixelEhhh>
     826:	cf 5f       	subi	r28, 0xFF	; 255
     828:	cd 13       	cpse	r28, r29
     82a:	f8 cf       	rjmp	.-16     	; 0x81c <_ZN7Display9drawHLineEhhh+0x18>
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	08 95       	ret

00000838 <_ZN7Display9draw_ASCIEhhh>:
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	61 32       	cpi	r22, 0x21	; 33
     842:	08 f4       	brcc	.+2      	; 0x846 <_ZN7Display9draw_ASCIEhhh+0xe>
     844:	3e c0       	rjmp	.+124    	; 0x8c2 <_ZN7Display9draw_ASCIEhhh+0x8a>
     846:	a4 2f       	mov	r26, r20
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	02 2f       	mov	r16, r18
     84c:	06 95       	lsr	r16
     84e:	06 95       	lsr	r16
     850:	06 95       	lsr	r16
     852:	30 e8       	ldi	r19, 0x80	; 128
     854:	03 9f       	mul	r16, r19
     856:	80 01       	movw	r16, r0
     858:	11 24       	eor	r1, r1
     85a:	61 52       	subi	r22, 0x21	; 33
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	fb 01       	movw	r30, r22
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	e6 0f       	add	r30, r22
     86a:	f7 1f       	adc	r31, r23
     86c:	e8 54       	subi	r30, 0x48	; 72
     86e:	fd 4f       	sbci	r31, 0xFD	; 253
     870:	ad 01       	movw	r20, r26
     872:	40 0f       	add	r20, r16
     874:	51 1f       	adc	r21, r17
     876:	ec 01       	movw	r28, r24
     878:	c4 0f       	add	r28, r20
     87a:	d5 1f       	adc	r29, r21
     87c:	00 58       	subi	r16, 0x80	; 128
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	a0 0f       	add	r26, r16
     882:	b1 1f       	adc	r27, r17
     884:	a8 0f       	add	r26, r24
     886:	b9 1f       	adc	r27, r25
     888:	4b 5f       	subi	r20, 0xFB	; 251
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	48 0f       	add	r20, r24
     88e:	59 1f       	adc	r21, r25
     890:	27 70       	andi	r18, 0x07	; 7
     892:	64 91       	lpm	r22, Z
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	02 2e       	mov	r0, r18
     898:	02 c0       	rjmp	.+4      	; 0x89e <_ZN7Display9draw_ASCIEhhh+0x66>
     89a:	66 0f       	add	r22, r22
     89c:	77 1f       	adc	r23, r23
     89e:	0a 94       	dec	r0
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <_ZN7Display9draw_ASCIEhhh+0x62>
     8a2:	98 81       	ld	r25, Y
     8a4:	96 2b       	or	r25, r22
     8a6:	99 93       	st	Y+, r25
     8a8:	67 2f       	mov	r22, r23
     8aa:	77 27       	eor	r23, r23
     8ac:	61 15       	cp	r22, r1
     8ae:	71 05       	cpc	r23, r1
     8b0:	19 f0       	breq	.+6      	; 0x8b8 <_ZN7Display9draw_ASCIEhhh+0x80>
     8b2:	8c 91       	ld	r24, X
     8b4:	68 2b       	or	r22, r24
     8b6:	6c 93       	st	X, r22
     8b8:	31 96       	adiw	r30, 0x01	; 1
     8ba:	11 96       	adiw	r26, 0x01	; 1
     8bc:	c4 17       	cp	r28, r20
     8be:	d5 07       	cpc	r29, r21
     8c0:	41 f7       	brne	.-48     	; 0x892 <_ZN7Display9draw_ASCIEhhh+0x5a>
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <_ZN7Display16draw_number16x16Ehhh>:
     8cc:	cf 92       	push	r12
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	6a 30       	cpi	r22, 0x0A	; 10
     8de:	08 f0       	brcs	.+2      	; 0x8e2 <_ZN7Display16draw_number16x16Ehhh+0x16>
     8e0:	66 c0       	rjmp	.+204    	; 0x9ae <_ZN7Display16draw_number16x16Ehhh+0xe2>
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	02 2f       	mov	r16, r18
     8e6:	06 95       	lsr	r16
     8e8:	06 95       	lsr	r16
     8ea:	06 95       	lsr	r16
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	d8 01       	movw	r26, r16
     8f0:	b6 95       	lsr	r27
     8f2:	ba 2f       	mov	r27, r26
     8f4:	aa 27       	eor	r26, r26
     8f6:	b7 95       	ror	r27
     8f8:	a7 95       	ror	r26
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	16 95       	lsr	r17
     900:	10 2f       	mov	r17, r16
     902:	00 27       	eor	r16, r16
     904:	17 95       	ror	r17
     906:	07 95       	ror	r16
     908:	7d 01       	movw	r14, r26
     90a:	30 e8       	ldi	r19, 0x80	; 128
     90c:	e3 0e       	add	r14, r19
     90e:	f1 1c       	adc	r15, r1
     910:	e4 0e       	add	r14, r20
     912:	f5 1e       	adc	r15, r21
     914:	e8 0e       	add	r14, r24
     916:	f9 1e       	adc	r15, r25
     918:	ea 01       	movw	r28, r20
     91a:	c0 0f       	add	r28, r16
     91c:	d1 1f       	adc	r29, r17
     91e:	60 97       	sbiw	r28, 0x10	; 16
     920:	c8 0f       	add	r28, r24
     922:	d9 1f       	adc	r29, r25
     924:	04 0f       	add	r16, r20
     926:	15 1f       	adc	r17, r21
     928:	00 59       	subi	r16, 0x90	; 144
     92a:	1f 4f       	sbci	r17, 0xFF	; 255
     92c:	08 0f       	add	r16, r24
     92e:	19 1f       	adc	r17, r25
     930:	a4 0f       	add	r26, r20
     932:	b5 1f       	adc	r27, r21
     934:	a8 0f       	add	r26, r24
     936:	b9 1f       	adc	r27, r25
     938:	80 e2       	ldi	r24, 0x20	; 32
     93a:	68 9f       	mul	r22, r24
     93c:	b0 01       	movw	r22, r0
     93e:	11 24       	eor	r1, r1
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	27 70       	andi	r18, 0x07	; 7
     946:	fa 01       	movw	r30, r20
     948:	e6 0f       	add	r30, r22
     94a:	f7 1f       	adc	r31, r23
     94c:	e8 58       	subi	r30, 0x88	; 136
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	e4 91       	lpm	r30, Z
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <_ZN7Display16draw_number16x16Ehhh+0x90>
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <_ZN7Display16draw_number16x16Ehhh+0x8c>
     960:	40 31       	cpi	r20, 0x10	; 16
     962:	68 f4       	brcc	.+26     	; 0x97e <_ZN7Display16draw_number16x16Ehhh+0xb2>
     964:	8c 91       	ld	r24, X
     966:	8e 2b       	or	r24, r30
     968:	8c 93       	st	X, r24
     96a:	cf 2e       	mov	r12, r31
     96c:	dd 24       	eor	r13, r13
     96e:	c1 14       	cp	r12, r1
     970:	d1 04       	cpc	r13, r1
     972:	89 f0       	breq	.+34     	; 0x996 <_ZN7Display16draw_number16x16Ehhh+0xca>
     974:	f7 01       	movw	r30, r14
     976:	80 81       	ld	r24, Z
     978:	8c 29       	or	r24, r12
     97a:	80 83       	st	Z, r24
     97c:	0c c0       	rjmp	.+24     	; 0x996 <_ZN7Display16draw_number16x16Ehhh+0xca>
     97e:	88 81       	ld	r24, Y
     980:	8e 2b       	or	r24, r30
     982:	88 83       	st	Y, r24
     984:	cf 2e       	mov	r12, r31
     986:	dd 24       	eor	r13, r13
     988:	c1 14       	cp	r12, r1
     98a:	d1 04       	cpc	r13, r1
     98c:	21 f0       	breq	.+8      	; 0x996 <_ZN7Display16draw_number16x16Ehhh+0xca>
     98e:	f8 01       	movw	r30, r16
     990:	80 81       	ld	r24, Z
     992:	8c 29       	or	r24, r12
     994:	80 83       	st	Z, r24
     996:	4f 5f       	subi	r20, 0xFF	; 255
     998:	5f 4f       	sbci	r21, 0xFF	; 255
     99a:	ff ef       	ldi	r31, 0xFF	; 255
     99c:	ef 1a       	sub	r14, r31
     99e:	ff 0a       	sbc	r15, r31
     9a0:	21 96       	adiw	r28, 0x01	; 1
     9a2:	0f 5f       	subi	r16, 0xFF	; 255
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	40 32       	cpi	r20, 0x20	; 32
     9aa:	51 05       	cpc	r21, r1
     9ac:	61 f6       	brne	.-104    	; 0x946 <_ZN7Display16draw_number16x16Ehhh+0x7a>
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	08 95       	ret

000009c0 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
     9c0:	2f 92       	push	r2
     9c2:	3f 92       	push	r3
     9c4:	4f 92       	push	r4
     9c6:	5f 92       	push	r5
     9c8:	6f 92       	push	r6
     9ca:	7f 92       	push	r7
     9cc:	8f 92       	push	r8
     9ce:	9f 92       	push	r9
     9d0:	af 92       	push	r10
     9d2:	bf 92       	push	r11
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	27 97       	sbiw	r28, 0x07	; 7
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	9f 83       	std	Y+7, r25	; 0x07
     9f6:	8e 83       	std	Y+6, r24	; 0x06
     9f8:	6d 83       	std	Y+5, r22	; 0x05
     9fa:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
     9fc:	00 23       	and	r16, r16
     9fe:	09 f4       	brne	.+2      	; 0xa02 <_ZN7Display6analogEhhhh+0x42>
     a00:	26 c1       	rjmp	.+588    	; 0xc4e <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
     a02:	62 2f       	mov	r22, r18
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 ec       	ldi	r20, 0xC0	; 192
     a14:	50 e4       	ldi	r21, 0x40	; 64
     a16:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     a1a:	2b ed       	ldi	r18, 0xDB	; 219
     a1c:	3f e0       	ldi	r19, 0x0F	; 15
     a1e:	49 e4       	ldi	r20, 0x49	; 73
     a20:	50 e4       	ldi	r21, 0x40	; 64
     a22:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	44 e3       	ldi	r20, 0x34	; 52
     a2c:	53 e4       	ldi	r21, 0x43	; 67
     a2e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
     a32:	2b ed       	ldi	r18, 0xDB	; 219
     a34:	3f e0       	ldi	r19, 0x0F	; 15
     a36:	49 ec       	ldi	r20, 0xC9	; 201
     a38:	5f e3       	ldi	r21, 0x3F	; 63
     a3a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__subsf3>
     a3e:	6b 01       	movw	r12, r22
     a40:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     a42:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <cos>
     a46:	4b 01       	movw	r8, r22
     a48:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
     a4a:	c7 01       	movw	r24, r14
     a4c:	b6 01       	movw	r22, r12
     a4e:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <sin>
     a52:	2b 01       	movw	r4, r22
     a54:	3c 01       	movw	r6, r24
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     a5a:	b8 01       	movw	r22, r16
     a5c:	01 2e       	mov	r0, r17
     a5e:	00 0c       	add	r0, r0
     a60:	88 0b       	sbc	r24, r24
     a62:	99 0b       	sbc	r25, r25
     a64:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     a68:	6b 01       	movw	r12, r22
     a6a:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     a6c:	a3 01       	movw	r20, r6
     a6e:	92 01       	movw	r18, r4
     a70:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	48 ef       	ldi	r20, 0xF8	; 248
     a7a:	51 e4       	ldi	r21, 0x41	; 65
     a7c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     a80:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
     a84:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     a86:	a5 01       	movw	r20, r10
     a88:	94 01       	movw	r18, r8
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	48 ef       	ldi	r20, 0xF8	; 248
     a98:	51 e4       	ldi	r21, 0x41	; 65
     a9a:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     a9e:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	42 2d       	mov	r20, r2
     aa6:	8e 81       	ldd	r24, Y+6	; 0x06
     aa8:	9f 81       	ldd	r25, Y+7	; 0x07
     aaa:	5a de       	rcall	.-844    	; 0x760 <_ZN7Display9drawPixelEhhh>
     aac:	0f 5f       	subi	r16, 0xFF	; 255
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
     ab0:	09 31       	cpi	r16, 0x19	; 25
     ab2:	11 05       	cpc	r17, r1
     ab4:	91 f6       	brne	.-92     	; 0xa5a <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     ab6:	63 2d       	mov	r22, r3
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     ac2:	69 83       	std	Y+1, r22	; 0x01
     ac4:	7a 83       	std	Y+2, r23	; 0x02
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 ec       	ldi	r20, 0xC0	; 192
     ad0:	50 e4       	ldi	r21, 0x40	; 64
     ad2:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     ad6:	2b ed       	ldi	r18, 0xDB	; 219
     ad8:	3f e0       	ldi	r19, 0x0F	; 15
     ada:	49 e4       	ldi	r20, 0x49	; 73
     adc:	50 e4       	ldi	r21, 0x40	; 64
     ade:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	44 e3       	ldi	r20, 0x34	; 52
     ae8:	53 e4       	ldi	r21, 0x43	; 67
     aea:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
     aee:	2b ed       	ldi	r18, 0xDB	; 219
     af0:	3f e0       	ldi	r19, 0x0F	; 15
     af2:	49 ec       	ldi	r20, 0xC9	; 201
     af4:	5f e3       	ldi	r21, 0x3F	; 63
     af6:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__subsf3>
     afa:	6b 01       	movw	r12, r22
     afc:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     afe:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <cos>
     b02:	2b 01       	movw	r4, r22
     b04:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <sin>
     b0e:	4b 01       	movw	r8, r22
     b10:	5c 01       	movw	r10, r24
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     b16:	b8 01       	movw	r22, r16
     b18:	01 2e       	mov	r0, r17
     b1a:	00 0c       	add	r0, r0
     b1c:	88 0b       	sbc	r24, r24
     b1e:	99 0b       	sbc	r25, r25
     b20:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     b28:	a5 01       	movw	r20, r10
     b2a:	94 01       	movw	r18, r8
     b2c:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	48 ef       	ldi	r20, 0xF8	; 248
     b36:	51 e4       	ldi	r21, 0x41	; 65
     b38:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     b3c:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
     b40:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     b42:	a3 01       	movw	r20, r6
     b44:	92 01       	movw	r18, r4
     b46:	c7 01       	movw	r24, r14
     b48:	b6 01       	movw	r22, r12
     b4a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	48 ef       	ldi	r20, 0xF8	; 248
     b54:	51 e4       	ldi	r21, 0x41	; 65
     b56:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     b5a:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	43 2d       	mov	r20, r3
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	fc dd       	rcall	.-1032   	; 0x760 <_ZN7Display9drawPixelEhhh>
     b68:	0f 5f       	subi	r16, 0xFF	; 255
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     b6c:	05 31       	cpi	r16, 0x15	; 21
     b6e:	11 05       	cpc	r17, r1
     b70:	91 f6       	brne	.-92     	; 0xb16 <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     b72:	2d 81       	ldd	r18, Y+5	; 0x05
     b74:	62 2f       	mov	r22, r18
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 ef       	ldi	r20, 0xF0	; 240
     b86:	51 e4       	ldi	r21, 0x41	; 65
     b88:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     b8c:	6b 01       	movw	r12, r22
     b8e:	7c 01       	movw	r14, r24
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	5f e3       	ldi	r21, 0x3F	; 63
     b98:	69 81       	ldd	r22, Y+1	; 0x01
     b9a:	7a 81       	ldd	r23, Y+2	; 0x02
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	c7 01       	movw	r24, r14
     baa:	b6 01       	movw	r22, r12
     bac:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     bb0:	2b ed       	ldi	r18, 0xDB	; 219
     bb2:	3f e0       	ldi	r19, 0x0F	; 15
     bb4:	49 e4       	ldi	r20, 0x49	; 73
     bb6:	50 e4       	ldi	r21, 0x40	; 64
     bb8:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	44 e3       	ldi	r20, 0x34	; 52
     bc2:	53 e4       	ldi	r21, 0x43	; 67
     bc4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
     bc8:	2b ed       	ldi	r18, 0xDB	; 219
     bca:	3f e0       	ldi	r19, 0x0F	; 15
     bcc:	49 ec       	ldi	r20, 0xC9	; 201
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__subsf3>
     bd4:	6b 01       	movw	r12, r22
     bd6:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     bd8:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <cos>
     bdc:	4b 01       	movw	r8, r22
     bde:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     be0:	c7 01       	movw	r24, r14
     be2:	b6 01       	movw	r22, r12
     be4:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <sin>
     be8:	2b 01       	movw	r4, r22
     bea:	3c 01       	movw	r6, r24
     bec:	00 e0       	ldi	r16, 0x00	; 0
     bee:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     bf0:	b8 01       	movw	r22, r16
     bf2:	01 2e       	mov	r0, r17
     bf4:	00 0c       	add	r0, r0
     bf6:	88 0b       	sbc	r24, r24
     bf8:	99 0b       	sbc	r25, r25
     bfa:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     bfe:	6b 01       	movw	r12, r22
     c00:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     c02:	a3 01       	movw	r20, r6
     c04:	92 01       	movw	r18, r4
     c06:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	48 ef       	ldi	r20, 0xF8	; 248
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     c16:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
     c1a:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     c1c:	a5 01       	movw	r20, r10
     c1e:	94 01       	movw	r18, r8
     c20:	c7 01       	movw	r24, r14
     c22:	b6 01       	movw	r22, r12
     c24:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	48 ef       	ldi	r20, 0xF8	; 248
     c2e:	51 e4       	ldi	r21, 0x41	; 65
     c30:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     c34:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	43 2d       	mov	r20, r3
     c3c:	8e 81       	ldd	r24, Y+6	; 0x06
     c3e:	9f 81       	ldd	r25, Y+7	; 0x07
     c40:	8f dd       	rcall	.-1250   	; 0x760 <_ZN7Display9drawPixelEhhh>
     c42:	0f 5f       	subi	r16, 0xFF	; 255
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     c46:	0d 30       	cpi	r16, 0x0D	; 13
     c48:	11 05       	cpc	r17, r1
     c4a:	91 f6       	brne	.-92     	; 0xbf0 <_ZN7Display6analogEhhhh+0x230>
     c4c:	cb c0       	rjmp	.+406    	; 0xde4 <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
     c4e:	64 2f       	mov	r22, r20
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     c5a:	69 83       	std	Y+1, r22	; 0x01
     c5c:	7a 83       	std	Y+2, r23	; 0x02
     c5e:	8b 83       	std	Y+3, r24	; 0x03
     c60:	9c 83       	std	Y+4, r25	; 0x04
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 ec       	ldi	r20, 0xC0	; 192
     c68:	50 e4       	ldi	r21, 0x40	; 64
     c6a:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     c6e:	2b ed       	ldi	r18, 0xDB	; 219
     c70:	3f e0       	ldi	r19, 0x0F	; 15
     c72:	49 e4       	ldi	r20, 0x49	; 73
     c74:	50 e4       	ldi	r21, 0x40	; 64
     c76:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	44 e3       	ldi	r20, 0x34	; 52
     c80:	53 e4       	ldi	r21, 0x43	; 67
     c82:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
     c86:	2b ed       	ldi	r18, 0xDB	; 219
     c88:	3f e0       	ldi	r19, 0x0F	; 15
     c8a:	49 ec       	ldi	r20, 0xC9	; 201
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__subsf3>
     c92:	6b 01       	movw	r12, r22
     c94:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
     c96:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <cos>
     c9a:	2b 01       	movw	r4, r22
     c9c:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <sin>
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
     caa:	00 e0       	ldi	r16, 0x00	; 0
     cac:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     cae:	b8 01       	movw	r22, r16
     cb0:	01 2e       	mov	r0, r17
     cb2:	00 0c       	add	r0, r0
     cb4:	88 0b       	sbc	r24, r24
     cb6:	99 0b       	sbc	r25, r25
     cb8:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
     cc0:	a5 01       	movw	r20, r10
     cc2:	94 01       	movw	r18, r8
     cc4:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	48 ef       	ldi	r20, 0xF8	; 248
     cce:	51 e4       	ldi	r21, 0x41	; 65
     cd0:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     cd4:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
     cd8:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
     cda:	a3 01       	movw	r20, r6
     cdc:	92 01       	movw	r18, r4
     cde:	c7 01       	movw	r24, r14
     ce0:	b6 01       	movw	r22, r12
     ce2:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	48 ef       	ldi	r20, 0xF8	; 248
     cec:	51 e4       	ldi	r21, 0x41	; 65
     cee:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     cf2:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	43 2d       	mov	r20, r3
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	30 dd       	rcall	.-1440   	; 0x760 <_ZN7Display9drawPixelEhhh>
     d00:	0f 5f       	subi	r16, 0xFF	; 255
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
     d04:	09 31       	cpi	r16, 0x19	; 25
     d06:	11 05       	cpc	r17, r1
     d08:	91 f6       	brne	.-92     	; 0xcae <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
     d0a:	ed 81       	ldd	r30, Y+5	; 0x05
     d0c:	6e 2f       	mov	r22, r30
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 ef       	ldi	r20, 0xF0	; 240
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     d24:	6b 01       	movw	r12, r22
     d26:	7c 01       	movw	r14, r24
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	5f e3       	ldi	r21, 0x3F	; 63
     d30:	69 81       	ldd	r22, Y+1	; 0x01
     d32:	7a 81       	ldd	r23, Y+2	; 0x02
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	9c 81       	ldd	r25, Y+4	; 0x04
     d38:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c7 01       	movw	r24, r14
     d42:	b6 01       	movw	r22, r12
     d44:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     d48:	2b ed       	ldi	r18, 0xDB	; 219
     d4a:	3f e0       	ldi	r19, 0x0F	; 15
     d4c:	49 e4       	ldi	r20, 0x49	; 73
     d4e:	50 e4       	ldi	r21, 0x40	; 64
     d50:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	44 e3       	ldi	r20, 0x34	; 52
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
     d60:	2b ed       	ldi	r18, 0xDB	; 219
     d62:	3f e0       	ldi	r19, 0x0F	; 15
     d64:	49 ec       	ldi	r20, 0xC9	; 201
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__subsf3>
     d6c:	6b 01       	movw	r12, r22
     d6e:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
     d70:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <cos>
     d74:	4b 01       	movw	r8, r22
     d76:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
     d78:	c7 01       	movw	r24, r14
     d7a:	b6 01       	movw	r22, r12
     d7c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <sin>
     d80:	2b 01       	movw	r4, r22
     d82:	3c 01       	movw	r6, r24
     d84:	00 e0       	ldi	r16, 0x00	; 0
     d86:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     d88:	b8 01       	movw	r22, r16
     d8a:	01 2e       	mov	r0, r17
     d8c:	00 0c       	add	r0, r0
     d8e:	88 0b       	sbc	r24, r24
     d90:	99 0b       	sbc	r25, r25
     d92:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
     d96:	6b 01       	movw	r12, r22
     d98:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
     d9a:	a3 01       	movw	r20, r6
     d9c:	92 01       	movw	r18, r4
     d9e:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	48 ef       	ldi	r20, 0xF8	; 248
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     dae:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
     db2:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
     db4:	a5 01       	movw	r20, r10
     db6:	94 01       	movw	r18, r8
     db8:	c7 01       	movw	r24, r14
     dba:	b6 01       	movw	r22, r12
     dbc:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	48 ef       	ldi	r20, 0xF8	; 248
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
     dcc:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	43 2d       	mov	r20, r3
     dd4:	8e 81       	ldd	r24, Y+6	; 0x06
     dd6:	9f 81       	ldd	r25, Y+7	; 0x07
     dd8:	c3 dc       	rcall	.-1658   	; 0x760 <_ZN7Display9drawPixelEhhh>
     dda:	0f 5f       	subi	r16, 0xFF	; 255
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
     dde:	01 31       	cpi	r16, 0x11	; 17
     de0:	11 05       	cpc	r17, r1
     de2:	91 f6       	brne	.-92     	; 0xd88 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	4a e1       	ldi	r20, 0x1A	; 26
     de8:	61 e3       	ldi	r22, 0x31	; 49
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	24 dd       	rcall	.-1464   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	40 e2       	ldi	r20, 0x20	; 32
     df4:	62 e3       	ldi	r22, 0x32	; 50
     df6:	8e 81       	ldd	r24, Y+6	; 0x06
     df8:	9f 81       	ldd	r25, Y+7	; 0x07
     dfa:	1e dd       	rcall	.-1476   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
     dfc:	2c e1       	ldi	r18, 0x1C	; 28
     dfe:	4a e3       	ldi	r20, 0x3A	; 58
     e00:	63 e3       	ldi	r22, 0x33	; 51
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	18 dd       	rcall	.-1488   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
     e08:	28 e3       	ldi	r18, 0x38	; 56
     e0a:	4d e1       	ldi	r20, 0x1D	; 29
     e0c:	66 e3       	ldi	r22, 0x36	; 54
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
     e10:	9f 81       	ldd	r25, Y+7	; 0x07
     e12:	12 dd       	rcall	.-1500   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
     e14:	2c e1       	ldi	r18, 0x1C	; 28
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	69 e3       	ldi	r22, 0x39	; 57
     e1a:	8e 81       	ldd	r24, Y+6	; 0x06
     e1c:	9f 81       	ldd	r25, Y+7	; 0x07
     e1e:	0c dd       	rcall	.-1512   	; 0x838 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	48 e0       	ldi	r20, 0x08	; 8
     e24:	6c e2       	ldi	r22, 0x2C	; 44
     e26:	8e 81       	ldd	r24, Y+6	; 0x06
     e28:	9f 81       	ldd	r25, Y+7	; 0x07
     e2a:	9a dc       	rcall	.-1740   	; 0x760 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	42 e1       	ldi	r20, 0x12	; 18
     e30:	65 e3       	ldi	r22, 0x35	; 53
     e32:	8e 81       	ldd	r24, Y+6	; 0x06
     e34:	9f 81       	ldd	r25, Y+7	; 0x07
     e36:	94 dc       	rcall	.-1752   	; 0x760 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	4c e2       	ldi	r20, 0x2C	; 44
     e3c:	65 e3       	ldi	r22, 0x35	; 53
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	8e dc       	rcall	.-1764   	; 0x760 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	45 e3       	ldi	r20, 0x35	; 53
     e48:	6b e2       	ldi	r22, 0x2B	; 43
     e4a:	8e 81       	ldd	r24, Y+6	; 0x06
     e4c:	9f 81       	ldd	r25, Y+7	; 0x07
     e4e:	88 dc       	rcall	.-1776   	; 0x760 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	45 e3       	ldi	r20, 0x35	; 53
     e54:	61 e1       	ldi	r22, 0x11	; 17
     e56:	8e 81       	ldd	r24, Y+6	; 0x06
     e58:	9f 81       	ldd	r25, Y+7	; 0x07
     e5a:	82 dc       	rcall	.-1788   	; 0x760 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	4c e2       	ldi	r20, 0x2C	; 44
     e60:	68 e0       	ldi	r22, 0x08	; 8
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	9f 81       	ldd	r25, Y+7	; 0x07
     e66:	7c dc       	rcall	.-1800   	; 0x760 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	41 e1       	ldi	r20, 0x11	; 17
     e6c:	68 e0       	ldi	r22, 0x08	; 8
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	76 dc       	rcall	.-1812   	; 0x760 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	48 e0       	ldi	r20, 0x08	; 8
     e78:	62 e1       	ldi	r22, 0x12	; 18
     e7a:	8e 81       	ldd	r24, Y+6	; 0x06
     e7c:	9f 81       	ldd	r25, Y+7	; 0x07
     e7e:	70 dc       	rcall	.-1824   	; 0x760 <_ZN7Display9drawPixelEhhh>
}
     e80:	27 96       	adiw	r28, 0x07	; 7
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	8f 90       	pop	r8
     ea4:	7f 90       	pop	r7
     ea6:	6f 90       	pop	r6
     ea8:	5f 90       	pop	r5
     eaa:	4f 90       	pop	r4
     eac:	3f 90       	pop	r3
     eae:	2f 90       	pop	r2
     eb0:	08 95       	ret

00000eb2 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	80 93 b8 00 	sts	0x00B8, r24
     eb8:	08 95       	ret

00000eba <_ZN3I2CD1Ev>:
     eba:	08 95       	ret

00000ebc <_ZN3I2C9twi_startEv>:
     ebc:	84 ea       	ldi	r24, 0xA4	; 164
     ebe:	80 93 bc 00 	sts	0x00BC, r24
     ec2:	08 95       	ret

00000ec4 <_ZN3I2C8twi_stopEv>:
     ec4:	84 e9       	ldi	r24, 0x94	; 148
     ec6:	80 93 bc 00 	sts	0x00BC, r24
     eca:	08 95       	ret

00000ecc <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
     ecc:	ec eb       	ldi	r30, 0xBC	; 188
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 23       	and	r24, r24
     ed4:	ec f7       	brge	.-6      	; 0xed0 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
     ed6:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
     eda:	84 e8       	ldi	r24, 0x84	; 132
     edc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     ee0:	ec eb       	ldi	r30, 0xBC	; 188
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	ec f7       	brge	.-6      	; 0xee4 <_ZN3I2C9twi_writeEh+0x18>
}
     eea:	08 95       	ret

00000eec <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
     eec:	2a b1       	in	r18, 0x0a	; 10
     eee:	20 66       	ori	r18, 0x60	; 96
     ef0:	2a b9       	out	0x0a, r18	; 10
     ef2:	28 b1       	in	r18, 0x08	; 8
     ef4:	23 7f       	andi	r18, 0xF3	; 243
     ef6:	28 b9       	out	0x08, r18	; 8
     ef8:	27 b1       	in	r18, 0x07	; 7
     efa:	2c 60       	ori	r18, 0x0C	; 12
     efc:	27 b9       	out	0x07, r18	; 7
     efe:	2a b1       	in	r18, 0x0a	; 10
     f00:	23 7e       	andi	r18, 0xE3	; 227
     f02:	2a b9       	out	0x0a, r18	; 10
     f04:	fc 01       	movw	r30, r24
     f06:	0c 96       	adiw	r24, 0x0c	; 12
     f08:	11 92       	st	Z+, r1
     f0a:	e8 17       	cp	r30, r24
     f0c:	f9 07       	cpc	r31, r25
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <_ZN9InterfaceC1Ev+0x1c>
     f10:	08 95       	ret

00000f12 <_ZN9InterfaceD1Ev>:
     f12:	08 95       	ret

00000f14 <_ZN9Interface7paradebEPVhhPh>:
     f14:	fb 01       	movw	r30, r22
     f16:	80 81       	ld	r24, Z
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	04 2e       	mov	r0, r20
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <_ZN9Interface7paradebEPVhhPh+0xe>
     f1e:	95 95       	asr	r25
     f20:	87 95       	ror	r24
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <_ZN9Interface7paradebEPVhhPh+0xa>
     f26:	80 ff       	sbrs	r24, 0
     f28:	05 c0       	rjmp	.+10     	; 0xf34 <_ZN9Interface7paradebEPVhhPh+0x20>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	f9 01       	movw	r30, r18
     f2e:	80 83       	st	Z, r24
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	08 95       	ret
     f34:	f9 01       	movw	r30, r18
     f36:	80 81       	ld	r24, Z
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	71 f4       	brne	.+28     	; 0xf58 <_ZN9Interface7paradebEPVhhPh+0x44>
     f3c:	fb 01       	movw	r30, r22
     f3e:	60 81       	ld	r22, Z
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	fb 01       	movw	r30, r22
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <_ZN9Interface7paradebEPVhhPh+0x36>
     f46:	f5 95       	asr	r31
     f48:	e7 95       	ror	r30
     f4a:	4a 95       	dec	r20
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <_ZN9Interface7paradebEPVhhPh+0x32>
     f4e:	e0 fd       	sbrc	r30, 0
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <_ZN9Interface7paradebEPVhhPh+0x44>
     f52:	f9 01       	movw	r30, r18
     f54:	10 82       	st	Z, r1
     f56:	08 95       	ret
     f58:	f9 01       	movw	r30, r18
     f5a:	10 82       	st	Z, r1
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	08 95       	ret

00000f60 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
     f68:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	8a 95       	dec	r24
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <_ZN9Interface6TasterEv+0xc>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
     f72:	9e 01       	movw	r18, r28
     f74:	2e 5f       	subi	r18, 0xFE	; 254
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	44 e0       	ldi	r20, 0x04	; 4
     f7a:	69 e2       	ldi	r22, 0x29	; 41
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	ce 01       	movw	r24, r28
     f80:	c9 df       	rcall	.-110    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
     f82:	81 11       	cpse	r24, r1
     f84:	14 c0       	rjmp	.+40     	; 0xfae <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
     f86:	9e 01       	movw	r18, r28
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	43 e0       	ldi	r20, 0x03	; 3
     f8e:	69 e2       	ldi	r22, 0x29	; 41
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	ce 01       	movw	r24, r28
     f94:	bf df       	rcall	.-130    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
     f96:	81 11       	cpse	r24, r1
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
     f9a:	9e 01       	movw	r18, r28
     f9c:	42 e0       	ldi	r20, 0x02	; 2
     f9e:	69 e2       	ldi	r22, 0x29	; 41
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	ce 01       	movw	r24, r28
     fa4:	b7 df       	rcall	.-146    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
     fa6:	88 23       	and	r24, r24
     fa8:	31 f0       	breq	.+12     	; 0xfb6 <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
     faa:	11 e3       	ldi	r17, 0x31	; 49
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
     fae:	13 e3       	ldi	r17, 0x33	; 51
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
     fb2:	12 e3       	ldi	r17, 0x32	; 50
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
     fb6:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
     fb8:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
     fba:	42 9a       	sbi	0x08, 2	; 8
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	8a 95       	dec	r24
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <_ZN9Interface6TasterEv+0x5e>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
     fc4:	9e 01       	movw	r18, r28
     fc6:	2b 5f       	subi	r18, 0xFB	; 251
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	44 e0       	ldi	r20, 0x04	; 4
     fcc:	69 e2       	ldi	r22, 0x29	; 41
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	ce 01       	movw	r24, r28
     fd2:	a0 df       	rcall	.-192    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
     fd4:	81 11       	cpse	r24, r1
     fd6:	16 c0       	rjmp	.+44     	; 0x1004 <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
     fd8:	9e 01       	movw	r18, r28
     fda:	2c 5f       	subi	r18, 0xFC	; 252
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	43 e0       	ldi	r20, 0x03	; 3
     fe0:	69 e2       	ldi	r22, 0x29	; 41
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	ce 01       	movw	r24, r28
     fe6:	96 df       	rcall	.-212    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
     fe8:	81 11       	cpse	r24, r1
     fea:	0e c0       	rjmp	.+28     	; 0x1008 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
     fec:	9e 01       	movw	r18, r28
     fee:	2d 5f       	subi	r18, 0xFD	; 253
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	42 e0       	ldi	r20, 0x02	; 2
     ff4:	69 e2       	ldi	r22, 0x29	; 41
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	ce 01       	movw	r24, r28
     ffa:	8c df       	rcall	.-232    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
     ffc:	88 23       	and	r24, r24
     ffe:	29 f0       	breq	.+10     	; 0x100a <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    1000:	14 e3       	ldi	r17, 0x34	; 52
    1002:	03 c0       	rjmp	.+6      	; 0x100a <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    1004:	16 e3       	ldi	r17, 0x36	; 54
    1006:	01 c0       	rjmp	.+2      	; 0x100a <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    1008:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    100a:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    100c:	5e 9a       	sbi	0x0b, 6	; 11
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	8a 95       	dec	r24
    1012:	f1 f7       	brne	.-4      	; 0x1010 <_ZN9Interface6TasterEv+0xb0>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    1016:	9e 01       	movw	r18, r28
    1018:	28 5f       	subi	r18, 0xF8	; 248
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	44 e0       	ldi	r20, 0x04	; 4
    101e:	69 e2       	ldi	r22, 0x29	; 41
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	ce 01       	movw	r24, r28
    1024:	77 df       	rcall	.-274    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
    1026:	81 11       	cpse	r24, r1
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    102a:	9e 01       	movw	r18, r28
    102c:	29 5f       	subi	r18, 0xF9	; 249
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	43 e0       	ldi	r20, 0x03	; 3
    1032:	69 e2       	ldi	r22, 0x29	; 41
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	ce 01       	movw	r24, r28
    1038:	6d df       	rcall	.-294    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
    103a:	81 11       	cpse	r24, r1
    103c:	0e c0       	rjmp	.+28     	; 0x105a <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    103e:	9e 01       	movw	r18, r28
    1040:	2a 5f       	subi	r18, 0xFA	; 250
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	42 e0       	ldi	r20, 0x02	; 2
    1046:	69 e2       	ldi	r22, 0x29	; 41
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	ce 01       	movw	r24, r28
    104c:	63 df       	rcall	.-314    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
    104e:	88 23       	and	r24, r24
    1050:	29 f0       	breq	.+10     	; 0x105c <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    1052:	17 e3       	ldi	r17, 0x37	; 55
    1054:	03 c0       	rjmp	.+6      	; 0x105c <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    1056:	19 e3       	ldi	r17, 0x39	; 57
    1058:	01 c0       	rjmp	.+2      	; 0x105c <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    105a:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    105c:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    105e:	5d 9a       	sbi	0x0b, 5	; 11
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	8a 95       	dec	r24
    1064:	f1 f7       	brne	.-4      	; 0x1062 <_ZN9Interface6TasterEv+0x102>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    1068:	9e 01       	movw	r18, r28
    106a:	25 5f       	subi	r18, 0xF5	; 245
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	44 e0       	ldi	r20, 0x04	; 4
    1070:	69 e2       	ldi	r22, 0x29	; 41
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	ce 01       	movw	r24, r28
    1076:	4e df       	rcall	.-356    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
    1078:	81 11       	cpse	r24, r1
    107a:	16 c0       	rjmp	.+44     	; 0x10a8 <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    107c:	9e 01       	movw	r18, r28
    107e:	26 5f       	subi	r18, 0xF6	; 246
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	43 e0       	ldi	r20, 0x03	; 3
    1084:	69 e2       	ldi	r22, 0x29	; 41
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	ce 01       	movw	r24, r28
    108a:	44 df       	rcall	.-376    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
    108c:	81 11       	cpse	r24, r1
    108e:	0e c0       	rjmp	.+28     	; 0x10ac <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    1090:	9e 01       	movw	r18, r28
    1092:	27 5f       	subi	r18, 0xF7	; 247
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	42 e0       	ldi	r20, 0x02	; 2
    1098:	69 e2       	ldi	r22, 0x29	; 41
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	ce 01       	movw	r24, r28
    109e:	3a df       	rcall	.-396    	; 0xf14 <_ZN9Interface7paradebEPVhhPh>
    10a0:	88 23       	and	r24, r24
    10a2:	29 f0       	breq	.+10     	; 0x10ae <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    10a4:	1a e2       	ldi	r17, 0x2A	; 42
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    10a8:	13 e2       	ldi	r17, 0x23	; 35
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    10ac:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    10ae:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    10b0:	81 2f       	mov	r24, r17
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	08 95       	ret

000010ba <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    10ba:	52 df       	rcall	.-348    	; 0xf60 <_ZN9Interface6TasterEv>
    10bc:	48 2f       	mov	r20, r24
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	fa 01       	movw	r30, r20
    10c2:	b3 97       	sbiw	r30, 0x23	; 35
    10c4:	e7 31       	cpi	r30, 0x17	; 23
    10c6:	f1 05       	cpc	r31, r1
    10c8:	c0 f4       	brcc	.+48     	; 0x10fa <_ZN9Interface7unifiedEv+0x40>
    10ca:	ea 5b       	subi	r30, 0xBA	; 186
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    10d2:	85 e7       	ldi	r24, 0x75	; 117
    10d4:	08 95       	ret
		break;
	case '3':
		return 'A';
    10d6:	81 e4       	ldi	r24, 0x41	; 65
    10d8:	08 95       	ret
		break;
	case '4':
		return 'l';
    10da:	8c e6       	ldi	r24, 0x6C	; 108
    10dc:	08 95       	ret
		break;
	case '5':
		return 'o';
    10de:	8f e6       	ldi	r24, 0x6F	; 111
    10e0:	08 95       	ret
		break;
	case '6':
		return 'r';
    10e2:	82 e7       	ldi	r24, 0x72	; 114
    10e4:	08 95       	ret
		break;
	case '7':
		return 'Y';
    10e6:	89 e5       	ldi	r24, 0x59	; 89
    10e8:	08 95       	ret
		break;
	case '8':
		return 'd';
    10ea:	84 e6       	ldi	r24, 0x64	; 100
    10ec:	08 95       	ret
		break;
	case '9':
		return 'X';
    10ee:	88 e5       	ldi	r24, 0x58	; 88
    10f0:	08 95       	ret
		break;
	case '*':
		return 'e';
    10f2:	85 e6       	ldi	r24, 0x65	; 101
    10f4:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    10f6:	8d e6       	ldi	r24, 0x6D	; 109
    10f8:	08 95       	ret
		break;
	default:
		return ' ';
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    10fe:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    1100:	08 95       	ret

00001102 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    1108:	ce 01       	movw	r24, r28
    110a:	2a df       	rcall	.-428    	; 0xf60 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    110c:	80 53       	subi	r24, 0x30	; 48
    110e:	8a 30       	cpi	r24, 0x0A	; 10
    1110:	d8 f7       	brcc	.-10     	; 0x1108 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <_ZN7KompassD1Ev>:
		offset[i]=0;
	}
} //Kompass

// default destructor
Kompass::~Kompass()
    1118:	06 96       	adiw	r24, 0x06	; 6
    111a:	cf ce       	rjmp	.-610    	; 0xeba <_ZN3I2CD1Ev>
    111c:	08 95       	ret

0000111e <_ZN7Kompass16HMC5883L_commandEhh>:
{
} //~Kompass

void Kompass::HMC5883L_command(uint8_t adresse, uint8_t command){
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	06 2f       	mov	r16, r22
    1128:	14 2f       	mov	r17, r20
	i2c.twi_start();
    112a:	ec 01       	movw	r28, r24
    112c:	26 96       	adiw	r28, 0x06	; 6
    112e:	ce 01       	movw	r24, r28
    1130:	c5 de       	rcall	.-630    	; 0xebc <_ZN3I2C9twi_startEv>
	i2c.twi_write(HMCWRITEADRESSE);
    1132:	6c e3       	ldi	r22, 0x3C	; 60
    1134:	ce 01       	movw	r24, r28
    1136:	ca de       	rcall	.-620    	; 0xecc <_ZN3I2C9twi_writeEh>
	i2c.twi_write(adresse);
    1138:	60 2f       	mov	r22, r16
    113a:	ce 01       	movw	r24, r28
    113c:	c7 de       	rcall	.-626    	; 0xecc <_ZN3I2C9twi_writeEh>
	i2c.twi_write(command);
    113e:	61 2f       	mov	r22, r17
    1140:	ce 01       	movw	r24, r28
    1142:	c4 de       	rcall	.-632    	; 0xecc <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
    1144:	ce 01       	movw	r24, r28
    1146:	be de       	rcall	.-644    	; 0xec4 <_ZN3I2C8twi_stopEv>
}
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <_ZN7KompassC1Ev>:


#include "Kompass.h"

// default constructor
Kompass::Kompass()
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	06 96       	adiw	r24, 0x06	; 6
    115a:	ab de       	rcall	.-682    	; 0xeb2 <_ZN3I2CC1Ev>
{
	//Config Register A
	HMC5883L_command(0x00, HMCSAMPLES8+HMCDATARATE15+HMCMEASUREMODENORMAL);
    115c:	40 e7       	ldi	r20, 0x70	; 112
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	dd df       	rcall	.-70     	; 0x111e <_ZN7Kompass16HMC5883L_commandEhh>

	//Config Gain
	HMC5883L_command(0x01, HMCGAIN1090);
    1164:	40 e2       	ldi	r20, 0x20	; 32
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	ce 01       	movw	r24, r28
    116a:	d9 df       	rcall	.-78     	; 0x111e <_ZN7Kompass16HMC5883L_commandEhh>

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	62 e0       	ldi	r22, 0x02	; 2
    1170:	ce 01       	movw	r24, r28
    1172:	d5 df       	rcall	.-86     	; 0x111e <_ZN7Kompass16HMC5883L_commandEhh>
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	18 82       	st	Y, r1
		offset[i]=0;
    1178:	18 86       	std	Y+8, r1	; 0x08
    117a:	1f 82       	std	Y+7, r1	; 0x07

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    117c:	1b 82       	std	Y+3, r1	; 0x03
    117e:	1a 82       	std	Y+2, r1	; 0x02
		offset[i]=0;
    1180:	1a 86       	std	Y+10, r1	; 0x0a
    1182:	19 86       	std	Y+9, r1	; 0x09

	//Set Mode auf single
	HMC5883L_command(0x02, HMCSIGLEMODE);
	//Variablen
	for(uint8_t i=0;i<3;i++){
		achsen[i]=0;
    1184:	1d 82       	std	Y+5, r1	; 0x05
    1186:	1c 82       	std	Y+4, r1	; 0x04
		offset[i]=0;
    1188:	1c 86       	std	Y+12, r1	; 0x0c
    118a:	1b 86       	std	Y+11, r1	; 0x0b
	}
} //Kompass
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    1192:	46 96       	adiw	r24, 0x16	; 22
    1194:	92 ce       	rjmp	.-732    	; 0xeba <_ZN3I2CD1Ev>
    1196:	08 95       	ret

00001198 <_ZN7LSM303D14LSM303_commandEhh>:
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	06 2f       	mov	r16, r22
    11a2:	14 2f       	mov	r17, r20
    11a4:	ec 01       	movw	r28, r24
    11a6:	66 96       	adiw	r28, 0x16	; 22
    11a8:	ce 01       	movw	r24, r28
    11aa:	88 de       	rcall	.-752    	; 0xebc <_ZN3I2C9twi_startEv>
    11ac:	6a e3       	ldi	r22, 0x3A	; 58
    11ae:	ce 01       	movw	r24, r28
    11b0:	8d de       	rcall	.-742    	; 0xecc <_ZN3I2C9twi_writeEh>
    11b2:	60 2f       	mov	r22, r16
    11b4:	ce 01       	movw	r24, r28
    11b6:	8a de       	rcall	.-748    	; 0xecc <_ZN3I2C9twi_writeEh>
    11b8:	61 2f       	mov	r22, r17
    11ba:	ce 01       	movw	r24, r28
    11bc:	87 de       	rcall	.-754    	; 0xecc <_ZN3I2C9twi_writeEh>
    11be:	ce 01       	movw	r24, r28
    11c0:	81 de       	rcall	.-766    	; 0xec4 <_ZN3I2C8twi_stopEv>
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	6e e2       	ldi	r22, 0x2E	; 46
    11d0:	e3 cf       	rjmp	.-58     	; 0x1198 <_ZN7LSM303D14LSM303_commandEhh>
    11d2:	08 95       	ret

000011d4 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    11da:	47 e4       	ldi	r20, 0x47	; 71
    11dc:	60 e2       	ldi	r22, 0x20	; 32
    11de:	dc df       	rcall	.-72     	; 0x1198 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	61 e2       	ldi	r22, 0x21	; 33
    11e4:	ce 01       	movw	r24, r28
    11e6:	d8 df       	rcall	.-80     	; 0x1198 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	64 e2       	ldi	r22, 0x24	; 36
    11ec:	ce 01       	movw	r24, r28
    11ee:	d4 df       	rcall	.-88     	; 0x1198 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    11f0:	ce 01       	movw	r24, r28
    11f2:	ec df       	rcall	.-40     	; 0x11cc <_ZN7LSM303D13ACCBypassmodeEv>
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
    1200:	46 96       	adiw	r24, 0x16	; 22
    1202:	57 de       	rcall	.-850    	; 0xeb2 <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    1204:	1f 82       	std	Y+7, r1	; 0x07
    1206:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    1208:	18 86       	std	Y+8, r1	; 0x08
    120a:	19 86       	std	Y+9, r1	; 0x09
    120c:	1a 86       	std	Y+10, r1	; 0x0a
    120e:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    1210:	1c 86       	std	Y+12, r1	; 0x0c
    1212:	1d 86       	std	Y+13, r1	; 0x0d
    1214:	1e 86       	std	Y+14, r1	; 0x0e
    1216:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    1218:	19 8a       	std	Y+17, r1	; 0x11
    121a:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    121c:	1a 8a       	std	Y+18, r1	; 0x12
    121e:	1b 8a       	std	Y+19, r1	; 0x13
    1220:	1c 8a       	std	Y+20, r1	; 0x14
    1222:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    1224:	de 01       	movw	r26, r28
    1226:	a1 52       	subi	r26, 0x21	; 33
    1228:	bf 4f       	sbci	r27, 0xFF	; 255
    122a:	1d 92       	st	X+, r1
    122c:	1d 92       	st	X+, r1
    122e:	1d 92       	st	X+, r1
    1230:	1c 92       	st	X, r1
    1232:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    1234:	fe 01       	movw	r30, r28
    1236:	ed 51       	subi	r30, 0x1D	; 29
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	10 82       	st	Z, r1
    123c:	11 82       	std	Z+1, r1	; 0x01
    123e:	12 82       	std	Z+2, r1	; 0x02
    1240:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    1242:	34 96       	adiw	r30, 0x04	; 4
    1244:	8b e1       	ldi	r24, 0x1B	; 27
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	18 82       	st	Y, r1
    1250:	1b 82       	std	Y+3, r1	; 0x03
    1252:	1a 82       	std	Y+2, r1	; 0x02
    1254:	1d 82       	std	Y+5, r1	; 0x05
    1256:	1c 82       	std	Y+4, r1	; 0x04
    1258:	e0 5d       	subi	r30, 0xD0	; 208
    125a:	f1 09       	sbc	r31, r1
    125c:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    125e:	11 92       	st	Z+, r1
    1260:	11 92       	st	Z+, r1
    1262:	11 92       	st	Z+, r1
    1264:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    1266:	e2 17       	cp	r30, r18
    1268:	f3 07       	cpc	r31, r19
    126a:	c9 f7       	brne	.-14     	; 0x125e <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    126c:	ce 01       	movw	r24, r28
    126e:	b2 df       	rcall	.-156    	; 0x11d4 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <_ZN7monitor11tastendruckEPh>:
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	08 95       	ret

0000127a <_ZN3uhr11tastendruckEPh>:
    127a:	fc 01       	movw	r30, r24
    127c:	db 01       	movw	r26, r22
    127e:	9c 91       	ld	r25, X
    1280:	95 36       	cpi	r25, 0x65	; 101
    1282:	39 f4       	brne	.+14     	; 0x1292 <_ZN3uhr11tastendruckEPh+0x18>
    1284:	81 a5       	ldd	r24, Z+41	; 0x29
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	11 f4       	brne	.+4      	; 0x128e <_ZN3uhr11tastendruckEPh+0x14>
    128a:	11 a6       	std	Z+41, r1	; 0x29
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <_ZN3uhr11tastendruckEPh+0x18>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	81 a7       	std	Z+41, r24	; 0x29
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	08 95       	ret

00001296 <_ZN13einstellungen11tastendruckEPh>:
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret

0000129a <_ZN5menue11tastendruckEPh>:
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	08 95       	ret

0000129e <_ZN9offscreen4drawEv>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
    12a4:	8f 89       	ldd	r24, Y+23	; 0x17
    12a6:	98 8d       	ldd	r25, Y+24	; 0x18
    12a8:	af d9       	rcall	.-3234   	; 0x608 <_ZN7Display10clearFrameEv>
    12aa:	8f 89       	ldd	r24, Y+23	; 0x17
    12ac:	98 8d       	ldd	r25, Y+24	; 0x18
    12ae:	26 da       	rcall	.-2996   	; 0x6fc <_ZN7Display9sendFrameEv>
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <_ZN9wilkommen4drawEv>:
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	ec 01       	movw	r28, r24
    12c4:	8f 89       	ldd	r24, Y+23	; 0x17
    12c6:	98 8d       	ldd	r25, Y+24	; 0x18
    12c8:	9f d9       	rcall	.-3266   	; 0x608 <_ZN7Display10clearFrameEv>
    12ca:	7e 01       	movw	r14, r28
    12cc:	22 e0       	ldi	r18, 0x02	; 2
    12ce:	e2 0e       	add	r14, r18
    12d0:	f1 1c       	adc	r15, r1
    12d2:	8f e0       	ldi	r24, 0x0F	; 15
    12d4:	e6 e0       	ldi	r30, 0x06	; 6
    12d6:	f1 e0       	ldi	r31, 0x01	; 1
    12d8:	d7 01       	movw	r26, r14
    12da:	01 90       	ld	r0, Z+
    12dc:	0d 92       	st	X+, r0
    12de:	8a 95       	dec	r24
    12e0:	e1 f7       	brne	.-8      	; 0x12da <_ZN9wilkommen4drawEv+0x24>
    12e2:	8e e0       	ldi	r24, 0x0E	; 14
    12e4:	8e 8b       	std	Y+22, r24	; 0x16
    12e6:	00 e0       	ldi	r16, 0x00	; 0
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	fe 01       	movw	r30, r28
    12ec:	e1 0f       	add	r30, r17
    12ee:	f1 1d       	adc	r31, r1
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	40 2f       	mov	r20, r16
    12f4:	62 81       	ldd	r22, Z+2	; 0x02
    12f6:	8f 89       	ldd	r24, Y+23	; 0x17
    12f8:	98 8d       	ldd	r25, Y+24	; 0x18
    12fa:	9e da       	rcall	.-2756   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    12fc:	1f 5f       	subi	r17, 0xFF	; 255
    12fe:	0a 5f       	subi	r16, 0xFA	; 250
    1300:	8e 89       	ldd	r24, Y+22	; 0x16
    1302:	18 17       	cp	r17, r24
    1304:	90 f3       	brcs	.-28     	; 0x12ea <_ZN9wilkommen4drawEv+0x34>
    1306:	8f e0       	ldi	r24, 0x0F	; 15
    1308:	e5 e1       	ldi	r30, 0x15	; 21
    130a:	f1 e0       	ldi	r31, 0x01	; 1
    130c:	d7 01       	movw	r26, r14
    130e:	01 90       	ld	r0, Z+
    1310:	0d 92       	st	X+, r0
    1312:	8a 95       	dec	r24
    1314:	e1 f7       	brne	.-8      	; 0x130e <_ZN9wilkommen4drawEv+0x58>
    1316:	8e e0       	ldi	r24, 0x0E	; 14
    1318:	8e 8b       	std	Y+22, r24	; 0x16
    131a:	00 e0       	ldi	r16, 0x00	; 0
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	fe 01       	movw	r30, r28
    1320:	e1 0f       	add	r30, r17
    1322:	f1 1d       	adc	r31, r1
    1324:	28 e0       	ldi	r18, 0x08	; 8
    1326:	40 2f       	mov	r20, r16
    1328:	62 81       	ldd	r22, Z+2	; 0x02
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	84 da       	rcall	.-2808   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1330:	1f 5f       	subi	r17, 0xFF	; 255
    1332:	0a 5f       	subi	r16, 0xFA	; 250
    1334:	8e 89       	ldd	r24, Y+22	; 0x16
    1336:	18 17       	cp	r17, r24
    1338:	90 f3       	brcs	.-28     	; 0x131e <_ZN9wilkommen4drawEv+0x68>
    133a:	80 e4       	ldi	r24, 0x40	; 64
    133c:	8f 93       	push	r24
    133e:	8f 93       	push	r24
    1340:	83 ea       	ldi	r24, 0xA3	; 163
    1342:	8f 93       	push	r24
    1344:	87 ed       	ldi	r24, 0xD7	; 215
    1346:	8f 93       	push	r24
    1348:	84 e2       	ldi	r24, 0x24	; 36
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	9f 93       	push	r25
    134e:	8f 93       	push	r24
    1350:	ff 92       	push	r15
    1352:	ef 92       	push	r14
    1354:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    1358:	8e 8b       	std	Y+22, r24	; 0x16
    135a:	2d b7       	in	r18, 0x3d	; 61
    135c:	3e b7       	in	r19, 0x3e	; 62
    135e:	28 5f       	subi	r18, 0xF8	; 248
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	3e bf       	out	0x3e, r19	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	2d bf       	out	0x3d, r18	; 61
    136c:	88 23       	and	r24, r24
    136e:	81 f0       	breq	.+32     	; 0x1390 <_ZN9wilkommen4drawEv+0xda>
    1370:	00 e0       	ldi	r16, 0x00	; 0
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	fe 01       	movw	r30, r28
    1376:	e1 0f       	add	r30, r17
    1378:	f1 1d       	adc	r31, r1
    137a:	20 e2       	ldi	r18, 0x20	; 32
    137c:	40 2f       	mov	r20, r16
    137e:	62 81       	ldd	r22, Z+2	; 0x02
    1380:	8f 89       	ldd	r24, Y+23	; 0x17
    1382:	98 8d       	ldd	r25, Y+24	; 0x18
    1384:	59 da       	rcall	.-2894   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1386:	1f 5f       	subi	r17, 0xFF	; 255
    1388:	0a 5f       	subi	r16, 0xFA	; 250
    138a:	8e 89       	ldd	r24, Y+22	; 0x16
    138c:	18 17       	cp	r17, r24
    138e:	90 f3       	brcs	.-28     	; 0x1374 <_ZN9wilkommen4drawEv+0xbe>
    1390:	8f 89       	ldd	r24, Y+23	; 0x17
    1392:	98 8d       	ldd	r25, Y+24	; 0x18
    1394:	b3 d9       	rcall	.-3226   	; 0x6fc <_ZN7Display9sendFrameEv>
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <_Z8ADC_Readh>:
    13a4:	ec e7       	ldi	r30, 0x7C	; 124
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	90 81       	ld	r25, Z
    13aa:	8f 71       	andi	r24, 0x1F	; 31
    13ac:	90 7e       	andi	r25, 0xE0	; 224
    13ae:	89 2b       	or	r24, r25
    13b0:	80 83       	st	Z, r24
    13b2:	ea e7       	ldi	r30, 0x7A	; 122
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	80 64       	ori	r24, 0x40	; 64
    13ba:	80 83       	st	Z, r24
    13bc:	80 81       	ld	r24, Z
    13be:	86 fd       	sbrc	r24, 6
    13c0:	fd cf       	rjmp	.-6      	; 0x13bc <_Z8ADC_Readh+0x18>
    13c2:	80 91 78 00 	lds	r24, 0x0078
    13c6:	90 91 79 00 	lds	r25, 0x0079
    13ca:	08 95       	ret

000013cc <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	e6 df       	rcall	.-52     	; 0x13a4 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    13d8:	bc 01       	movw	r22, r24
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__floatunsisf>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 ec       	ldi	r19, 0xC0	; 192
    13e6:	4f e7       	ldi	r20, 0x7F	; 127
    13e8:	54 e4       	ldi	r21, 0x44	; 68
    13ea:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
    13ee:	2c e5       	ldi	r18, 0x5C	; 92
    13f0:	3f e8       	ldi	r19, 0x8F	; 143
    13f2:	42 e5       	ldi	r20, 0x52	; 82
    13f4:	50 e4       	ldi	r21, 0x40	; 64
    13f6:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    13fa:	2d e0       	ldi	r18, 0x0D	; 13
    13fc:	31 e7       	ldi	r19, 0x71	; 113
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e4       	ldi	r21, 0x40	; 64
    1402:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    1406:	60 93 a2 02 	sts	0x02A2, r22
    140a:	70 93 a3 02 	sts	0x02A3, r23
    140e:	80 93 a4 02 	sts	0x02A4, r24
    1412:	90 93 a5 02 	sts	0x02A5, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    1416:	26 e6       	ldi	r18, 0x66	; 102
    1418:	36 e6       	ldi	r19, 0x66	; 102
    141a:	46 e6       	ldi	r20, 0x66	; 102
    141c:	50 e4       	ldi	r21, 0x40	; 64
    141e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__subsf3>
    1422:	28 e9       	ldi	r18, 0x98	; 152
    1424:	39 e9       	ldi	r19, 0x99	; 153
    1426:	49 e1       	ldi	r20, 0x19	; 25
    1428:	5f e3       	ldi	r21, 0x3F	; 63
    142a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	48 ec       	ldi	r20, 0xC8	; 200
    1434:	52 e4       	ldi	r21, 0x42	; 66
    1436:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    143a:	6b 01       	movw	r12, r22
    143c:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e2       	ldi	r20, 0x20	; 32
    1444:	51 e4       	ldi	r21, 0x41	; 65
    1446:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    144a:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
	if (temp%10>=5)
    144e:	8d ec       	ldi	r24, 0xCD	; 205
    1450:	68 9f       	mul	r22, r24
    1452:	81 2d       	mov	r24, r1
    1454:	11 24       	eor	r1, r1
    1456:	86 95       	lsr	r24
    1458:	86 95       	lsr	r24
    145a:	86 95       	lsr	r24
    145c:	88 0f       	add	r24, r24
    145e:	28 2f       	mov	r18, r24
    1460:	22 0f       	add	r18, r18
    1462:	22 0f       	add	r18, r18
    1464:	82 0f       	add	r24, r18
    1466:	96 2f       	mov	r25, r22
    1468:	98 1b       	sub	r25, r24
    146a:	95 30       	cpi	r25, 0x05	; 5
    146c:	70 f0       	brcs	.+28     	; 0x148a <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	07 2e       	mov	r0, r23
    147e:	00 0c       	add	r0, r0
    1480:	88 0b       	sbc	r24, r24
    1482:	99 0b       	sbc	r25, r25
    1484:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__floatsisf>
    1488:	09 c0       	rjmp	.+18     	; 0x149c <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    148a:	c7 01       	movw	r24, r14
    148c:	b6 01       	movw	r22, r12
    148e:	0e 94 4d 1b 	call	0x369a	; 0x369a <__fixunssfsi>
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__floatunsisf>
	}
	return stat;
    149c:	0e 94 48 1b 	call	0x3690	; 0x3690 <__fixsfsi>
    14a0:	86 2f       	mov	r24, r22
}
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	08 95       	ret

000014ac <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    14be:	8f 89       	ldd	r24, Y+23	; 0x17
    14c0:	98 8d       	ldd	r25, Y+24	; 0x18
    14c2:	a2 d8       	rcall	.-3772   	; 0x608 <_ZN7Display10clearFrameEv>
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	e1 2c       	mov	r14, r1
    14c8:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    14ca:	e9 8d       	ldd	r30, Y+25	; 0x19
    14cc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    14ce:	ee 0d       	add	r30, r14
    14d0:	ff 1d       	adc	r31, r15
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	41 2f       	mov	r20, r17
    14d6:	60 81       	ld	r22, Z
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	ad d9       	rcall	.-3238   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	e8 1a       	sub	r14, r24
    14e2:	f8 0a       	sbc	r15, r24
    14e4:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    14e6:	10 33       	cpi	r17, 0x30	; 48
    14e8:	81 f7       	brne	.-32     	; 0x14ca <_ZN5menue4drawEv+0x1e>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    14ea:	70 df       	rcall	.-288    	; 0x13cc <_Z14Batteriestatusv>
    14ec:	7e 01       	movw	r14, r28
    14ee:	92 e0       	ldi	r25, 0x02	; 2
    14f0:	e9 0e       	add	r14, r25
    14f2:	f1 1c       	adc	r15, r1
    14f4:	28 2f       	mov	r18, r24
    14f6:	08 2e       	mov	r0, r24
    14f8:	00 0c       	add	r0, r0
    14fa:	33 0b       	sbc	r19, r19
    14fc:	3f 93       	push	r19
    14fe:	8f 93       	push	r24
    1500:	82 e3       	ldi	r24, 0x32	; 50
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	9f 93       	push	r25
    1506:	8f 93       	push	r24
    1508:	ff 92       	push	r15
    150a:	ef 92       	push	r14
    150c:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    1510:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1512:	15 e1       	ldi	r17, 0x15	; 21
    1514:	18 1b       	sub	r17, r24
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	15 31       	cpi	r17, 0x15	; 21
    1524:	08 f0       	brcs	.+2      	; 0x1528 <_ZN5menue4drawEv+0x7c>
    1526:	9c c0       	rjmp	.+312    	; 0x1660 <_ZN5menue4drawEv+0x1b4>
    1528:	01 2f       	mov	r16, r17
    152a:	00 0f       	add	r16, r16
    152c:	01 0f       	add	r16, r17
    152e:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1530:	8e 89       	ldd	r24, Y+22	; 0x16
    1532:	fe 01       	movw	r30, r28
    1534:	e1 0f       	add	r30, r17
    1536:	f1 1d       	adc	r31, r1
    1538:	e8 0f       	add	r30, r24
    153a:	f1 1d       	adc	r31, r1
    153c:	73 97       	sbiw	r30, 0x13	; 19
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	40 2f       	mov	r20, r16
    1542:	60 81       	ld	r22, Z
    1544:	8f 89       	ldd	r24, Y+23	; 0x17
    1546:	98 8d       	ldd	r25, Y+24	; 0x18
    1548:	77 d9       	rcall	.-3346   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    154a:	1f 5f       	subi	r17, 0xFF	; 255
    154c:	0a 5f       	subi	r16, 0xFA	; 250
    154e:	15 31       	cpi	r17, 0x15	; 21
    1550:	79 f7       	brne	.-34     	; 0x1530 <_ZN5menue4drawEv+0x84>
    1552:	86 c0       	rjmp	.+268    	; 0x1660 <_ZN5menue4drawEv+0x1b4>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1554:	e9 8d       	ldd	r30, Y+25	; 0x19
    1556:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1558:	ec 0d       	add	r30, r12
    155a:	fd 1d       	adc	r31, r13
    155c:	28 e3       	ldi	r18, 0x38	; 56
    155e:	41 2f       	mov	r20, r17
    1560:	60 85       	ldd	r22, Z+8	; 0x08
    1562:	8f 89       	ldd	r24, Y+23	; 0x17
    1564:	98 8d       	ldd	r25, Y+24	; 0x18
    1566:	68 d9       	rcall	.-3376   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1568:	8f ef       	ldi	r24, 0xFF	; 255
    156a:	c8 1a       	sub	r12, r24
    156c:	d8 0a       	sbc	r13, r24
    156e:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1570:	10 38       	cpi	r17, 0x80	; 128
    1572:	81 f7       	brne	.-32     	; 0x1554 <_ZN5menue4drawEv+0xa8>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    1574:	85 e5       	ldi	r24, 0x55	; 85
    1576:	98 e6       	ldi	r25, 0x68	; 104
    1578:	a2 e7       	ldi	r26, 0x72	; 114
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	8a 83       	std	Y+2, r24	; 0x02
    157e:	9b 83       	std	Y+3, r25	; 0x03
    1580:	ac 83       	std	Y+4, r26	; 0x04
    1582:	bd 83       	std	Y+5, r27	; 0x05
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	8e 8b       	std	Y+22, r24	; 0x16
    1588:	0c e0       	ldi	r16, 0x0C	; 12
    158a:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    158c:	fe 01       	movw	r30, r28
    158e:	e1 0f       	add	r30, r17
    1590:	f1 1d       	adc	r31, r1
    1592:	20 e1       	ldi	r18, 0x10	; 16
    1594:	40 2f       	mov	r20, r16
    1596:	62 81       	ldd	r22, Z+2	; 0x02
    1598:	8f 89       	ldd	r24, Y+23	; 0x17
    159a:	98 8d       	ldd	r25, Y+24	; 0x18
    159c:	4d d9       	rcall	.-3430   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    159e:	1f 5f       	subi	r17, 0xFF	; 255
    15a0:	0a 5f       	subi	r16, 0xFA	; 250
    15a2:	8e 89       	ldd	r24, Y+22	; 0x16
    15a4:	18 17       	cp	r17, r24
    15a6:	90 f3       	brcs	.-28     	; 0x158c <_ZN5menue4drawEv+0xe0>
		buffersize=sprintf(buffer,"Tacho");
    15a8:	86 e0       	ldi	r24, 0x06	; 6
    15aa:	ec e3       	ldi	r30, 0x3C	; 60
    15ac:	f1 e0       	ldi	r31, 0x01	; 1
    15ae:	d7 01       	movw	r26, r14
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	8a 95       	dec	r24
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <_ZN5menue4drawEv+0x104>
    15b8:	85 e0       	ldi	r24, 0x05	; 5
    15ba:	8e 8b       	std	Y+22, r24	; 0x16
    15bc:	0c e0       	ldi	r16, 0x0C	; 12
    15be:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    15c0:	fe 01       	movw	r30, r28
    15c2:	e1 0f       	add	r30, r17
    15c4:	f1 1d       	adc	r31, r1
    15c6:	28 e1       	ldi	r18, 0x18	; 24
    15c8:	40 2f       	mov	r20, r16
    15ca:	62 81       	ldd	r22, Z+2	; 0x02
    15cc:	8f 89       	ldd	r24, Y+23	; 0x17
    15ce:	98 8d       	ldd	r25, Y+24	; 0x18
    15d0:	33 d9       	rcall	.-3482   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    15d2:	1f 5f       	subi	r17, 0xFF	; 255
    15d4:	0a 5f       	subi	r16, 0xFA	; 250
    15d6:	8e 89       	ldd	r24, Y+22	; 0x16
    15d8:	18 17       	cp	r17, r24
    15da:	90 f3       	brcs	.-28     	; 0x15c0 <_ZN5menue4drawEv+0x114>
		buffersize=sprintf(buffer,"Einstellungen");
    15dc:	8e e0       	ldi	r24, 0x0E	; 14
    15de:	e2 e4       	ldi	r30, 0x42	; 66
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	d7 01       	movw	r26, r14
    15e4:	01 90       	ld	r0, Z+
    15e6:	0d 92       	st	X+, r0
    15e8:	8a 95       	dec	r24
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <_ZN5menue4drawEv+0x138>
    15ec:	8d e0       	ldi	r24, 0x0D	; 13
    15ee:	8e 8b       	std	Y+22, r24	; 0x16
    15f0:	0c e0       	ldi	r16, 0x0C	; 12
    15f2:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    15f4:	fe 01       	movw	r30, r28
    15f6:	e1 0f       	add	r30, r17
    15f8:	f1 1d       	adc	r31, r1
    15fa:	20 e2       	ldi	r18, 0x20	; 32
    15fc:	40 2f       	mov	r20, r16
    15fe:	62 81       	ldd	r22, Z+2	; 0x02
    1600:	8f 89       	ldd	r24, Y+23	; 0x17
    1602:	98 8d       	ldd	r25, Y+24	; 0x18
    1604:	19 d9       	rcall	.-3534   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1606:	1f 5f       	subi	r17, 0xFF	; 255
    1608:	0a 5f       	subi	r16, 0xFA	; 250
    160a:	8e 89       	ldd	r24, Y+22	; 0x16
    160c:	18 17       	cp	r17, r24
    160e:	90 f3       	brcs	.-28     	; 0x15f4 <_ZN5menue4drawEv+0x148>
		buffersize=sprintf(buffer,"Display aus");
    1610:	8c e0       	ldi	r24, 0x0C	; 12
    1612:	e0 e5       	ldi	r30, 0x50	; 80
    1614:	f1 e0       	ldi	r31, 0x01	; 1
    1616:	d7 01       	movw	r26, r14
    1618:	01 90       	ld	r0, Z+
    161a:	0d 92       	st	X+, r0
    161c:	8a 95       	dec	r24
    161e:	e1 f7       	brne	.-8      	; 0x1618 <_ZN5menue4drawEv+0x16c>
    1620:	8b e0       	ldi	r24, 0x0B	; 11
    1622:	8e 8b       	std	Y+22, r24	; 0x16
    1624:	0c e0       	ldi	r16, 0x0C	; 12
    1626:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    1628:	fe 01       	movw	r30, r28
    162a:	e1 0f       	add	r30, r17
    162c:	f1 1d       	adc	r31, r1
    162e:	28 e2       	ldi	r18, 0x28	; 40
    1630:	40 2f       	mov	r20, r16
    1632:	62 81       	ldd	r22, Z+2	; 0x02
    1634:	8f 89       	ldd	r24, Y+23	; 0x17
    1636:	98 8d       	ldd	r25, Y+24	; 0x18
    1638:	ff d8       	rcall	.-3586   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    163a:	1f 5f       	subi	r17, 0xFF	; 255
    163c:	0a 5f       	subi	r16, 0xFA	; 250
    163e:	8e 89       	ldd	r24, Y+22	; 0x16
    1640:	18 17       	cp	r17, r24
    1642:	90 f3       	brcs	.-28     	; 0x1628 <_ZN5menue4drawEv+0x17c>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    1644:	2d a1       	ldd	r18, Y+37	; 0x25
    1646:	22 0f       	add	r18, r18
    1648:	22 0f       	add	r18, r18
    164a:	22 0f       	add	r18, r18
    164c:	20 5f       	subi	r18, 0xF0	; 240
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	6e e3       	ldi	r22, 0x3E	; 62
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	98 8d       	ldd	r25, Y+24	; 0x18
    1656:	f0 d8       	rcall	.-3616   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1658:	8f 89       	ldd	r24, Y+23	; 0x17
    165a:	98 8d       	ldd	r25, Y+24	; 0x18
    165c:	4f d8       	rcall	.-3938   	; 0x6fc <_ZN7Display9sendFrameEv>
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <_ZN5menue4drawEv+0x1bc>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1660:	10 e5       	ldi	r17, 0x50	; 80
    1662:	c1 2c       	mov	r12, r1
    1664:	d1 2c       	mov	r13, r1
    1666:	76 cf       	rjmp	.-276    	; 0x1554 <_ZN5menue4drawEv+0xa8>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	08 95       	ret

0000167a <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    167a:	af 92       	push	r10
    167c:	bf 92       	push	r11
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1690:	8f 89       	ldd	r24, Y+23	; 0x17
    1692:	98 8d       	ldd	r25, Y+24	; 0x18
    1694:	0e 94 04 03 	call	0x608	; 0x608 <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    1698:	99 de       	rcall	.-718    	; 0x13cc <_Z14Batteriestatusv>
    169a:	5e 01       	movw	r10, r28
    169c:	22 e0       	ldi	r18, 0x02	; 2
    169e:	a2 0e       	add	r10, r18
    16a0:	b1 1c       	adc	r11, r1
    16a2:	28 2f       	mov	r18, r24
    16a4:	08 2e       	mov	r0, r24
    16a6:	00 0c       	add	r0, r0
    16a8:	33 0b       	sbc	r19, r19
    16aa:	3f 93       	push	r19
    16ac:	8f 93       	push	r24
    16ae:	8c e5       	ldi	r24, 0x5C	; 92
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	9f 93       	push	r25
    16b4:	8f 93       	push	r24
    16b6:	bf 92       	push	r11
    16b8:	af 92       	push	r10
    16ba:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    16be:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16c0:	95 e1       	ldi	r25, 0x15	; 21
    16c2:	09 2f       	mov	r16, r25
    16c4:	08 1b       	sub	r16, r24
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	05 31       	cpi	r16, 0x15	; 21
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <_ZN5tacho4drawEv+0x5e>
    16d6:	c5 c1       	rjmp	.+906    	; 0x1a62 <_ZN5tacho4drawEv+0x3e8>
    16d8:	e0 2e       	mov	r14, r16
    16da:	ee 0c       	add	r14, r14
    16dc:	e0 0e       	add	r14, r16
    16de:	1e 2d       	mov	r17, r14
    16e0:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    16e2:	8e 89       	ldd	r24, Y+22	; 0x16
    16e4:	fe 01       	movw	r30, r28
    16e6:	e0 0f       	add	r30, r16
    16e8:	f1 1d       	adc	r31, r1
    16ea:	e8 0f       	add	r30, r24
    16ec:	f1 1d       	adc	r31, r1
    16ee:	73 97       	sbiw	r30, 0x13	; 19
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	41 2f       	mov	r20, r17
    16f4:	60 81       	ld	r22, Z
    16f6:	8f 89       	ldd	r24, Y+23	; 0x17
    16f8:	98 8d       	ldd	r25, Y+24	; 0x18
    16fa:	9e d8       	rcall	.-3780   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    16fc:	0f 5f       	subi	r16, 0xFF	; 255
    16fe:	1a 5f       	subi	r17, 0xFA	; 250
    1700:	05 31       	cpi	r16, 0x15	; 21
    1702:	79 f7       	brne	.-34     	; 0x16e2 <_ZN5tacho4drawEv+0x68>
    1704:	ae c1       	rjmp	.+860    	; 0x1a62 <_ZN5tacho4drawEv+0x3e8>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    1706:	e9 8d       	ldd	r30, Y+25	; 0x19
    1708:	fa 8d       	ldd	r31, Y+26	; 0x1a
    170a:	ec 0d       	add	r30, r12
    170c:	fd 1d       	adc	r31, r13
    170e:	28 e3       	ldi	r18, 0x38	; 56
    1710:	41 2f       	mov	r20, r17
    1712:	60 85       	ldd	r22, Z+8	; 0x08
    1714:	8f 89       	ldd	r24, Y+23	; 0x17
    1716:	98 8d       	ldd	r25, Y+24	; 0x18
    1718:	8f d8       	rcall	.-3810   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    171a:	3f ef       	ldi	r19, 0xFF	; 255
    171c:	c3 1a       	sub	r12, r19
    171e:	d3 0a       	sbc	r13, r19
    1720:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    1722:	10 38       	cpi	r17, 0x80	; 128
    1724:	81 f7       	brne	.-32     	; 0x1706 <_ZN5tacho4drawEv+0x8c>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    1726:	20 e8       	ldi	r18, 0x80	; 128
    1728:	47 e3       	ldi	r20, 0x37	; 55
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	69 d8       	rcall	.-3886   	; 0x804 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    1732:	25 e4       	ldi	r18, 0x45	; 69
    1734:	4f e0       	ldi	r20, 0x0F	; 15
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	63 d8       	rcall	.-3898   	; 0x804 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    173e:	2b e3       	ldi	r18, 0x3B	; 59
    1740:	47 e0       	ldi	r20, 0x07	; 7
    1742:	65 e4       	ldi	r22, 0x45	; 69
    1744:	8f 89       	ldd	r24, Y+23	; 0x17
    1746:	98 8d       	ldd	r25, Y+24	; 0x18
    1748:	5d d8       	rcall	.-3910   	; 0x804 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    174a:	20 e1       	ldi	r18, 0x10	; 16
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	65 e4       	ldi	r22, 0x45	; 69
    1750:	8f 89       	ldd	r24, Y+23	; 0x17
    1752:	98 8d       	ldd	r25, Y+24	; 0x18
    1754:	3d d8       	rcall	.-3974   	; 0x7d0 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    1756:	21 e4       	ldi	r18, 0x41	; 65
    1758:	47 e2       	ldi	r20, 0x27	; 39
    175a:	6f e3       	ldi	r22, 0x3F	; 63
    175c:	8f 89       	ldd	r24, Y+23	; 0x17
    175e:	98 8d       	ldd	r25, Y+24	; 0x18
    1760:	51 d8       	rcall	.-3934   	; 0x804 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    1762:	20 e3       	ldi	r18, 0x30	; 48
    1764:	40 e1       	ldi	r20, 0x10	; 16
    1766:	6f e3       	ldi	r22, 0x3F	; 63
    1768:	8f 89       	ldd	r24, Y+23	; 0x17
    176a:	98 8d       	ldd	r25, Y+24	; 0x18
    176c:	31 d8       	rcall	.-3998   	; 0x7d0 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    176e:	21 e4       	ldi	r18, 0x41	; 65
    1770:	48 e1       	ldi	r20, 0x18	; 24
    1772:	6f e3       	ldi	r22, 0x3F	; 63
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	45 d8       	rcall	.-3958   	; 0x804 <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    177a:	e9 8d       	ldd	r30, Y+25	; 0x19
    177c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    177e:	60 81       	ld	r22, Z
    1780:	60 53       	subi	r22, 0x30	; 48
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	8f 89       	ldd	r24, Y+23	; 0x17
    1788:	98 8d       	ldd	r25, Y+24	; 0x18
    178a:	a0 d8       	rcall	.-3776   	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    178c:	e9 8d       	ldd	r30, Y+25	; 0x19
    178e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1790:	61 81       	ldd	r22, Z+1	; 0x01
    1792:	60 53       	subi	r22, 0x30	; 48
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	40 e1       	ldi	r20, 0x10	; 16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	97 d8       	rcall	.-3794   	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    179e:	e9 8d       	ldd	r30, Y+25	; 0x19
    17a0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17a2:	63 81       	ldd	r22, Z+3	; 0x03
    17a4:	60 53       	subi	r22, 0x30	; 48
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	45 e2       	ldi	r20, 0x25	; 37
    17aa:	8f 89       	ldd	r24, Y+23	; 0x17
    17ac:	98 8d       	ldd	r25, Y+24	; 0x18
    17ae:	8e d8       	rcall	.-3812   	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    17b0:	e9 8d       	ldd	r30, Y+25	; 0x19
    17b2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    17b4:	64 81       	ldd	r22, Z+4	; 0x04
    17b6:	60 53       	subi	r22, 0x30	; 48
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	45 e3       	ldi	r20, 0x35	; 53
    17bc:	8f 89       	ldd	r24, Y+23	; 0x17
    17be:	98 8d       	ldd	r25, Y+24	; 0x18
    17c0:	85 d8       	rcall	.-3830   	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    17c2:	80 91 95 02 	lds	r24, 0x0295
    17c6:	8f 93       	push	r24
    17c8:	80 91 94 02 	lds	r24, 0x0294
    17cc:	8f 93       	push	r24
    17ce:	80 91 93 02 	lds	r24, 0x0293
    17d2:	8f 93       	push	r24
    17d4:	80 91 92 02 	lds	r24, 0x0292
    17d8:	8f 93       	push	r24
    17da:	87 e6       	ldi	r24, 0x67	; 103
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	9f 93       	push	r25
    17e0:	8f 93       	push	r24
    17e2:	bf 92       	push	r11
    17e4:	af 92       	push	r10
    17e6:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    17ea:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    17ec:	98 e0       	ldi	r25, 0x08	; 8
    17ee:	09 2f       	mov	r16, r25
    17f0:	08 1b       	sub	r16, r24
    17f2:	8d b7       	in	r24, 0x3d	; 61
    17f4:	9e b7       	in	r25, 0x3e	; 62
    17f6:	08 96       	adiw	r24, 0x08	; 8
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	9e bf       	out	0x3e, r25	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	8d bf       	out	0x3d, r24	; 61
    1802:	08 30       	cpi	r16, 0x08	; 8
    1804:	e8 f4       	brcc	.+58     	; 0x1840 <_ZN5tacho4drawEv+0x1c6>
    1806:	10 2f       	mov	r17, r16
    1808:	12 95       	swap	r17
    180a:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    180c:	8e 89       	ldd	r24, Y+22	; 0x16
    180e:	fe 01       	movw	r30, r28
    1810:	e0 0f       	add	r30, r16
    1812:	f1 1d       	adc	r31, r1
    1814:	e8 0f       	add	r30, r24
    1816:	f1 1d       	adc	r31, r1
    1818:	36 97       	sbiw	r30, 0x06	; 6
    181a:	60 81       	ld	r22, Z
    181c:	6e 32       	cpi	r22, 0x2E	; 46
    181e:	31 f4       	brne	.+12     	; 0x182c <_ZN5tacho4drawEv+0x1b2>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    1820:	20 e2       	ldi	r18, 0x20	; 32
    1822:	41 2f       	mov	r20, r17
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	07 d8       	rcall	.-4082   	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <_ZN5tacho4drawEv+0x1be>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    182c:	60 53       	subi	r22, 0x30	; 48
    182e:	28 e1       	ldi	r18, 0x18	; 24
    1830:	41 2f       	mov	r20, r17
    1832:	8f 89       	ldd	r24, Y+23	; 0x17
    1834:	98 8d       	ldd	r25, Y+24	; 0x18
    1836:	4a d8       	rcall	.-3948   	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    1838:	0f 5f       	subi	r16, 0xFF	; 255
    183a:	10 5f       	subi	r17, 0xF0	; 240
    183c:	08 30       	cpi	r16, 0x08	; 8
    183e:	31 f7       	brne	.-52     	; 0x180c <_ZN5tacho4drawEv+0x192>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a e7       	ldi	r20, 0x7A	; 122
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	60 91 8e 02 	lds	r22, 0x028E
    184c:	70 91 8f 02 	lds	r23, 0x028F
    1850:	80 91 90 02 	lds	r24, 0x0290
    1854:	90 91 91 02 	lds	r25, 0x0291
    1858:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	7f 93       	push	r23
    1862:	6f 93       	push	r22
    1864:	8d e6       	ldi	r24, 0x6D	; 109
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	9f 93       	push	r25
    186a:	8f 93       	push	r24
    186c:	bf 92       	push	r11
    186e:	af 92       	push	r10
    1870:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    1874:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    1876:	2d b7       	in	r18, 0x3d	; 61
    1878:	3e b7       	in	r19, 0x3e	; 62
    187a:	28 5f       	subi	r18, 0xF8	; 248
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	3e bf       	out	0x3e, r19	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	2d bf       	out	0x3d, r18	; 61
    1888:	88 23       	and	r24, r24
    188a:	89 f0       	breq	.+34     	; 0x18ae <_ZN5tacho4drawEv+0x234>
    188c:	16 e4       	ldi	r17, 0x46	; 70
    188e:	f1 2c       	mov	r15, r1
    1890:	fe 01       	movw	r30, r28
    1892:	ef 0d       	add	r30, r15
    1894:	f1 1d       	adc	r31, r1
    1896:	20 e1       	ldi	r18, 0x10	; 16
    1898:	41 2f       	mov	r20, r17
    189a:	62 81       	ldd	r22, Z+2	; 0x02
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    18a4:	f3 94       	inc	r15
    18a6:	1a 5f       	subi	r17, 0xFA	; 250
    18a8:	8e 89       	ldd	r24, Y+22	; 0x16
    18aa:	f8 16       	cp	r15, r24
    18ac:	88 f3       	brcs	.-30     	; 0x1890 <_ZN5tacho4drawEv+0x216>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    18ae:	80 91 8d 02 	lds	r24, 0x028D
    18b2:	8f 93       	push	r24
    18b4:	80 91 8c 02 	lds	r24, 0x028C
    18b8:	8f 93       	push	r24
    18ba:	80 91 8b 02 	lds	r24, 0x028B
    18be:	8f 93       	push	r24
    18c0:	80 91 8a 02 	lds	r24, 0x028A
    18c4:	8f 93       	push	r24
    18c6:	84 e7       	ldi	r24, 0x74	; 116
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	bf 92       	push	r11
    18d0:	af 92       	push	r10
    18d2:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    18d6:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    18d8:	2d b7       	in	r18, 0x3d	; 61
    18da:	3e b7       	in	r19, 0x3e	; 62
    18dc:	28 5f       	subi	r18, 0xF8	; 248
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	3e bf       	out	0x3e, r19	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	2d bf       	out	0x3d, r18	; 61
    18ea:	88 23       	and	r24, r24
    18ec:	89 f0       	breq	.+34     	; 0x1910 <_ZN5tacho4drawEv+0x296>
    18ee:	16 e4       	ldi	r17, 0x46	; 70
    18f0:	f1 2c       	mov	r15, r1
    18f2:	fe 01       	movw	r30, r28
    18f4:	ef 0d       	add	r30, r15
    18f6:	f1 1d       	adc	r31, r1
    18f8:	28 e2       	ldi	r18, 0x28	; 40
    18fa:	41 2f       	mov	r20, r17
    18fc:	62 81       	ldd	r22, Z+2	; 0x02
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1906:	f3 94       	inc	r15
    1908:	1a 5f       	subi	r17, 0xFA	; 250
    190a:	8e 89       	ldd	r24, Y+22	; 0x16
    190c:	f8 16       	cp	r15, r24
    190e:	88 f3       	brcs	.-30     	; 0x18f2 <_ZN5tacho4drawEv+0x278>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    1910:	c0 90 86 02 	lds	r12, 0x0286
    1914:	d0 90 87 02 	lds	r13, 0x0287
    1918:	e0 90 88 02 	lds	r14, 0x0288
    191c:	f0 90 89 02 	lds	r15, 0x0289
    1920:	c7 01       	movw	r24, r14
    1922:	b6 01       	movw	r22, r12
    1924:	2c e3       	ldi	r18, 0x3C	; 60
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	0e 94 9d 20 	call	0x413a	; 0x413a <__udivmodsi4>
    1930:	1f 92       	push	r1
    1932:	6f 93       	push	r22
    1934:	1f 92       	push	r1
    1936:	2f 93       	push	r18
    1938:	c7 01       	movw	r24, r14
    193a:	b6 01       	movw	r22, r12
    193c:	20 e1       	ldi	r18, 0x10	; 16
    193e:	3e e0       	ldi	r19, 0x0E	; 14
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	0e 94 9d 20 	call	0x413a	; 0x413a <__udivmodsi4>
    1948:	1f 92       	push	r1
    194a:	2f 93       	push	r18
    194c:	8d e7       	ldi	r24, 0x7D	; 125
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	9f 93       	push	r25
    1952:	8f 93       	push	r24
    1954:	bf 92       	push	r11
    1956:	af 92       	push	r10
    1958:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    195c:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    195e:	2d b7       	in	r18, 0x3d	; 61
    1960:	3e b7       	in	r19, 0x3e	; 62
    1962:	26 5f       	subi	r18, 0xF6	; 246
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	3e bf       	out	0x3e, r19	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	2d bf       	out	0x3d, r18	; 61
    1970:	88 23       	and	r24, r24
    1972:	89 f0       	breq	.+34     	; 0x1996 <_ZN5tacho4drawEv+0x31c>
    1974:	16 e4       	ldi	r17, 0x46	; 70
    1976:	f1 2c       	mov	r15, r1
    1978:	fe 01       	movw	r30, r28
    197a:	ef 0d       	add	r30, r15
    197c:	f1 1d       	adc	r31, r1
    197e:	20 e3       	ldi	r18, 0x30	; 48
    1980:	41 2f       	mov	r20, r17
    1982:	62 81       	ldd	r22, Z+2	; 0x02
    1984:	8f 89       	ldd	r24, Y+23	; 0x17
    1986:	98 8d       	ldd	r25, Y+24	; 0x18
    1988:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    198c:	f3 94       	inc	r15
    198e:	1a 5f       	subi	r17, 0xFA	; 250
    1990:	8e 89       	ldd	r24, Y+22	; 0x16
    1992:	f8 16       	cp	r15, r24
    1994:	88 f3       	brcs	.-30     	; 0x1978 <_ZN5tacho4drawEv+0x2fe>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    1996:	60 91 86 02 	lds	r22, 0x0286
    199a:	70 91 87 02 	lds	r23, 0x0287
    199e:	80 91 88 02 	lds	r24, 0x0288
    19a2:	90 91 89 02 	lds	r25, 0x0289
    19a6:	61 15       	cp	r22, r1
    19a8:	71 05       	cpc	r23, r1
    19aa:	81 05       	cpc	r24, r1
    19ac:	91 05       	cpc	r25, r1
    19ae:	b1 f4       	brne	.+44     	; 0x19dc <_ZN5tacho4drawEv+0x362>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    19b0:	1f 92       	push	r1
    19b2:	1f 92       	push	r1
    19b4:	1f 92       	push	r1
    19b6:	1f 92       	push	r1
    19b8:	84 e7       	ldi	r24, 0x74	; 116
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	9f 93       	push	r25
    19be:	8f 93       	push	r24
    19c0:	bf 92       	push	r11
    19c2:	af 92       	push	r10
    19c4:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    19c8:	8e 8b       	std	Y+22, r24	; 0x16
    19ca:	8d b7       	in	r24, 0x3d	; 61
    19cc:	9e b7       	in	r25, 0x3e	; 62
    19ce:	08 96       	adiw	r24, 0x08	; 8
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	9e bf       	out	0x3e, r25	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	8d bf       	out	0x3d, r24	; 61
    19da:	2a c0       	rjmp	.+84     	; 0x1a30 <_ZN5tacho4drawEv+0x3b6>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    19dc:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__floatunsisf>
    19e0:	9b 01       	movw	r18, r22
    19e2:	ac 01       	movw	r20, r24
    19e4:	60 91 8e 02 	lds	r22, 0x028E
    19e8:	70 91 8f 02 	lds	r23, 0x028F
    19ec:	80 91 90 02 	lds	r24, 0x0290
    19f0:	90 91 91 02 	lds	r25, 0x0291
    19f4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
    19f8:	26 e6       	ldi	r18, 0x66	; 102
    19fa:	36 e6       	ldi	r19, 0x66	; 102
    19fc:	46 e6       	ldi	r20, 0x66	; 102
    19fe:	50 e4       	ldi	r21, 0x40	; 64
    1a00:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    1a04:	9f 93       	push	r25
    1a06:	8f 93       	push	r24
    1a08:	7f 93       	push	r23
    1a0a:	6f 93       	push	r22
    1a0c:	84 e7       	ldi	r24, 0x74	; 116
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	9f 93       	push	r25
    1a12:	8f 93       	push	r24
    1a14:	bf 92       	push	r11
    1a16:	af 92       	push	r10
    1a18:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    1a1c:	8e 8b       	std	Y+22, r24	; 0x16
    1a1e:	2d b7       	in	r18, 0x3d	; 61
    1a20:	3e b7       	in	r19, 0x3e	; 62
    1a22:	28 5f       	subi	r18, 0xF8	; 248
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	3e bf       	out	0x3e, r19	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    1a30:	8e 89       	ldd	r24, Y+22	; 0x16
    1a32:	88 23       	and	r24, r24
    1a34:	89 f0       	breq	.+34     	; 0x1a58 <_ZN5tacho4drawEv+0x3de>
    1a36:	0b e4       	ldi	r16, 0x4B	; 75
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e1 0f       	add	r30, r17
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	28 e0       	ldi	r18, 0x08	; 8
    1a42:	40 2f       	mov	r20, r16
    1a44:	62 81       	ldd	r22, Z+2	; 0x02
    1a46:	8f 89       	ldd	r24, Y+23	; 0x17
    1a48:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4a:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1a4e:	1f 5f       	subi	r17, 0xFF	; 255
    1a50:	0a 5f       	subi	r16, 0xFA	; 250
    1a52:	8e 89       	ldd	r24, Y+22	; 0x16
    1a54:	18 17       	cp	r17, r24
    1a56:	88 f3       	brcs	.-30     	; 0x1a3a <_ZN5tacho4drawEv+0x3c0>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1a58:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN7Display9sendFrameEv>
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <_ZN5tacho4drawEv+0x3f0>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    1a62:	10 e5       	ldi	r17, 0x50	; 80
    1a64:	c1 2c       	mov	r12, r1
    1a66:	d1 2c       	mov	r13, r1
    1a68:	4e ce       	rjmp	.-868    	; 0x1706 <_ZN5tacho4drawEv+0x8c>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	bf 90       	pop	r11
    1a7c:	af 90       	pop	r10
    1a7e:	08 95       	ret

00001a80 <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    1a80:	ef 92       	push	r14
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a90:	98 8d       	ldd	r25, Y+24	; 0x18
    1a92:	0e 94 04 03 	call	0x608	; 0x608 <_ZN7Display10clearFrameEv>
    1a96:	11 e4       	ldi	r17, 0x41	; 65
    1a98:	e1 2c       	mov	r14, r1
    1a9a:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    1a9c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a9e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1aa0:	ee 0d       	add	r30, r14
    1aa2:	ff 1d       	adc	r31, r15
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	41 2f       	mov	r20, r17
    1aa8:	60 81       	ld	r22, Z
    1aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1aac:	98 8d       	ldd	r25, Y+24	; 0x18
    1aae:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	e8 1a       	sub	r14, r24
    1ab6:	f8 0a       	sbc	r15, r24
    1ab8:	1a 5f       	subi	r17, 0xFA	; 250
    1aba:	1f 35       	cpi	r17, 0x5F	; 95
    1abc:	79 f7       	brne	.-34     	; 0x1a9c <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    1abe:	86 dc       	rcall	.-1780   	; 0x13cc <_Z14Batteriestatusv>
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	08 2e       	mov	r0, r24
    1ac4:	00 0c       	add	r0, r0
    1ac6:	33 0b       	sbc	r19, r19
    1ac8:	3f 93       	push	r19
    1aca:	8f 93       	push	r24
    1acc:	82 e6       	ldi	r24, 0x62	; 98
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	9f 93       	push	r25
    1ad2:	8f 93       	push	r24
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	02 96       	adiw	r24, 0x02	; 2
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    1ae0:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1ae2:	15 e1       	ldi	r17, 0x15	; 21
    1ae4:	18 1b       	sub	r17, r24
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	15 31       	cpi	r17, 0x15	; 21
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <_ZN3uhr4drawEv+0x78>
    1af6:	5f c0       	rjmp	.+190    	; 0x1bb6 <_ZN3uhr4drawEv+0x136>
    1af8:	01 2f       	mov	r16, r17
    1afa:	00 0f       	add	r16, r16
    1afc:	01 0f       	add	r16, r17
    1afe:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    1b00:	8e 89       	ldd	r24, Y+22	; 0x16
    1b02:	fe 01       	movw	r30, r28
    1b04:	e1 0f       	add	r30, r17
    1b06:	f1 1d       	adc	r31, r1
    1b08:	e8 0f       	add	r30, r24
    1b0a:	f1 1d       	adc	r31, r1
    1b0c:	73 97       	sbiw	r30, 0x13	; 19
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	40 2f       	mov	r20, r16
    1b12:	60 81       	ld	r22, Z
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    1b1c:	1f 5f       	subi	r17, 0xFF	; 255
    1b1e:	0a 5f       	subi	r16, 0xFA	; 250
    1b20:	15 31       	cpi	r17, 0x15	; 21
    1b22:	71 f7       	brne	.-36     	; 0x1b00 <_ZN3uhr4drawEv+0x80>
    1b24:	48 c0       	rjmp	.+144    	; 0x1bb6 <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    1b26:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b28:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b2a:	ee 0d       	add	r30, r14
    1b2c:	ff 1d       	adc	r31, r15
    1b2e:	28 e3       	ldi	r18, 0x38	; 56
    1b30:	41 2f       	mov	r20, r17
    1b32:	60 85       	ldd	r22, Z+8	; 0x08
    1b34:	8f 89       	ldd	r24, Y+23	; 0x17
    1b36:	98 8d       	ldd	r25, Y+24	; 0x18
    1b38:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	e8 1a       	sub	r14, r24
    1b40:	f8 0a       	sbc	r15, r24
    1b42:	1a 5f       	subi	r17, 0xFA	; 250
    1b44:	11 37       	cpi	r17, 0x71	; 113
    1b46:	79 f7       	brne	.-34     	; 0x1b26 <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    1b48:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b4a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b4c:	09 a5       	ldd	r16, Y+41	; 0x29
    1b4e:	22 89       	ldd	r18, Z+18	; 0x12
    1b50:	41 89       	ldd	r20, Z+17	; 0x11
    1b52:	60 89       	ldd	r22, Z+16	; 0x10
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    1b5c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b5e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b60:	60 81       	ld	r22, Z
    1b62:	60 53       	subi	r22, 0x30	; 48
    1b64:	2d e0       	ldi	r18, 0x0D	; 13
    1b66:	46 e4       	ldi	r20, 0x46	; 70
    1b68:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6c:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    1b70:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b72:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b74:	61 81       	ldd	r22, Z+1	; 0x01
    1b76:	60 53       	subi	r22, 0x30	; 48
    1b78:	2d e0       	ldi	r18, 0x0D	; 13
    1b7a:	46 e5       	ldi	r20, 0x56	; 86
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    1b84:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b86:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b88:	63 81       	ldd	r22, Z+3	; 0x03
    1b8a:	60 53       	subi	r22, 0x30	; 48
    1b8c:	22 e2       	ldi	r18, 0x22	; 34
    1b8e:	46 e4       	ldi	r20, 0x46	; 70
    1b90:	8f 89       	ldd	r24, Y+23	; 0x17
    1b92:	98 8d       	ldd	r25, Y+24	; 0x18
    1b94:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    1b98:	e9 8d       	ldd	r30, Y+25	; 0x19
    1b9a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1b9c:	64 81       	ldd	r22, Z+4	; 0x04
    1b9e:	60 53       	subi	r22, 0x30	; 48
    1ba0:	22 e2       	ldi	r18, 0x22	; 34
    1ba2:	46 e5       	ldi	r20, 0x56	; 86
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN7Display9sendFrameEv>
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    1bb6:	11 e4       	ldi	r17, 0x41	; 65
    1bb8:	e1 2c       	mov	r14, r1
    1bba:	f1 2c       	mov	r15, r1
    1bbc:	b4 cf       	rjmp	.-152    	; 0x1b26 <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	ff 90       	pop	r15
    1bc8:	ef 90       	pop	r14
    1bca:	08 95       	ret

00001bcc <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    1bcc:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1bce:	f9 99       	sbic	0x1f, 1	; 31
    1bd0:	fe cf       	rjmp	.-4      	; 0x1bce <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    1bd2:	92 bd       	out	0x22, r25	; 34
    1bd4:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    1bd6:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    1bd8:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    1bda:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    1bdc:	78 94       	sei
    1bde:	08 95       	ret

00001be0 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    1be0:	f8 94       	cli
	while(EECR&(1<<EEPE));
    1be2:	f9 99       	sbic	0x1f, 1	; 31
    1be4:	fe cf       	rjmp	.-4      	; 0x1be2 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    1be6:	92 bd       	out	0x22, r25	; 34
    1be8:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    1bea:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    1bec:	78 94       	sei
	return EEDR;
    1bee:	80 b5       	in	r24, 0x20	; 32
}
    1bf0:	08 95       	ret

00001bf2 <__vector_11>:
uint8_t FPS;

//schlechte variante der Uhreinstellung
void uhreinstellen();

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	0b b6       	in	r0, 0x3b	; 59
    1bfe:	0f 92       	push	r0
    1c00:	8f 93       	push	r24
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    1c06:	e7 eb       	ldi	r30, 0xB7	; 183
    1c08:	f7 e0       	ldi	r31, 0x07	; 7
    1c0a:	82 89       	ldd	r24, Z+18	; 0x12
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    1c10:	80 8d       	ldd	r24, Z+24	; 0x18
    1c12:	82 60       	ori	r24, 0x02	; 2
    1c14:	80 8f       	std	Z+24, r24	; 0x18
}
    1c16:	ff 91       	pop	r31
    1c18:	ef 91       	pop	r30
    1c1a:	8f 91       	pop	r24
    1c1c:	0f 90       	pop	r0
    1c1e:	0b be       	out	0x3b, r0	; 59
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	1f 90       	pop	r1
    1c28:	18 95       	reti

00001c2a <__vector_13>:

ISR(TIMER1_COMPA_vect){
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    1c36:	80 91 98 02 	lds	r24, 0x0298
    1c3a:	81 60       	ori	r24, 0x01	; 1
    1c3c:	80 93 98 02 	sts	0x0298, r24
}
    1c40:	8f 91       	pop	r24
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	0f 90       	pop	r0
    1c48:	1f 90       	pop	r1
    1c4a:	18 95       	reti

00001c4c <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    1c4c:	10 92 92 02 	sts	0x0292, r1
    1c50:	10 92 93 02 	sts	0x0293, r1
    1c54:	10 92 94 02 	sts	0x0294, r1
    1c58:	10 92 95 02 	sts	0x0295, r1
	strecke = 0;
    1c5c:	10 92 8e 02 	sts	0x028E, r1
    1c60:	10 92 8f 02 	sts	0x028F, r1
    1c64:	10 92 90 02 	sts	0x0290, r1
    1c68:	10 92 91 02 	sts	0x0291, r1
	maxgeschw = 0;
    1c6c:	10 92 8a 02 	sts	0x028A, r1
    1c70:	10 92 8b 02 	sts	0x028B, r1
    1c74:	10 92 8c 02 	sts	0x028C, r1
    1c78:	10 92 8d 02 	sts	0x028D, r1
	Fahrtzeit = 0;
    1c7c:	10 92 86 02 	sts	0x0286, r1
    1c80:	10 92 87 02 	sts	0x0287, r1
    1c84:	10 92 88 02 	sts	0x0288, r1
    1c88:	10 92 89 02 	sts	0x0289, r1
    1c8c:	08 95       	ret

00001c8e <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    1c8e:	fb 01       	movw	r30, r22
    1c90:	80 81       	ld	r24, Z
    1c92:	85 36       	cpi	r24, 0x65	; 101
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    1c96:	da df       	rcall	.-76     	; 0x1c4c <_Z6nullenv>
		}
		return 0;
	}
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	08 95       	ret

00001c9c <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 81       	ld	r18, Z
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	06 2e       	mov	r0, r22
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <_Z13reed_debouncePVhh+0xe>
    1ca6:	35 95       	asr	r19
    1ca8:	27 95       	ror	r18
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <_Z13reed_debouncePVhh+0xa>
    1cae:	20 ff       	sbrs	r18, 0
    1cb0:	16 c0       	rjmp	.+44     	; 0x1cde <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cb2:	ef e0       	ldi	r30, 0x0F	; 15
    1cb4:	f7 e2       	ldi	r31, 0x27	; 39
    1cb6:	31 97       	sbiw	r30, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <_Z13reed_debouncePVhh+0x1a>
    1cba:	00 c0       	rjmp	.+0      	; 0x1cbc <_Z13reed_debouncePVhh+0x20>
    1cbc:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	80 81       	ld	r24, Z
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <_Z13reed_debouncePVhh+0x2e>
    1cc6:	95 95       	asr	r25
    1cc8:	87 95       	ror	r24
    1cca:	6a 95       	dec	r22
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <_Z13reed_debouncePVhh+0x2a>
    1cce:	80 fd       	sbrc	r24, 0
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cd2:	f2 e0       	ldi	r31, 0x02	; 2
    1cd4:	fa 95       	dec	r31
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <_Z13reed_debouncePVhh+0x38>
    1cd8:	00 c0       	rjmp	.+0      	; 0x1cda <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	08 95       	ret
		}
	}
	return 0;
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	08 95       	ret
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce4:	08 95       	ret

00001ce6 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    1cf2:	e4 e8       	ldi	r30, 0x84	; 132
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	c0 81       	ld	r28, Z
    1cf8:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    1cfa:	11 82       	std	Z+1, r1	; 0x01
    1cfc:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    1cfe:	2b ed       	ldi	r18, 0xDB	; 219
    1d00:	3f e0       	ldi	r19, 0x0F	; 15
    1d02:	49 e4       	ldi	r20, 0x49	; 73
    1d04:	50 e4       	ldi	r21, 0x40	; 64
    1d06:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    1d0a:	26 e6       	ldi	r18, 0x66	; 102
    1d0c:	36 e6       	ldi	r19, 0x66	; 102
    1d0e:	46 e6       	ldi	r20, 0x66	; 102
    1d10:	50 e4       	ldi	r21, 0x40	; 64
    1d12:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    1d16:	6b 01       	movw	r12, r22
    1d18:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    1d1a:	be 01       	movw	r22, r28
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__floatunsisf>
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	5e e3       	ldi	r21, 0x3E	; 62
    1d2c:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    1d30:	2d eb       	ldi	r18, 0xBD	; 189
    1d32:	37 e3       	ldi	r19, 0x37	; 55
    1d34:	46 e8       	ldi	r20, 0x86	; 134
    1d36:	5a e3       	ldi	r21, 0x3A	; 58
    1d38:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    1d3c:	2a e0       	ldi	r18, 0x0A	; 10
    1d3e:	37 ed       	ldi	r19, 0xD7	; 215
    1d40:	43 ea       	ldi	r20, 0xA3	; 163
    1d42:	5b e3       	ldi	r21, 0x3B	; 59
    1d44:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
    1d48:	9b 01       	movw	r18, r22
    1d4a:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	b6 01       	movw	r22, r12
    1d50:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    1d54:	20 91 92 02 	lds	r18, 0x0292
    1d58:	30 91 93 02 	lds	r19, 0x0293
    1d5c:	40 91 94 02 	lds	r20, 0x0294
    1d60:	50 91 95 02 	lds	r21, 0x0295
    1d64:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
	geschw /= 2.0;
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 8d 1c 	call	0x391a	; 0x391a <__mulsf3>
    1d74:	6b 01       	movw	r12, r22
    1d76:	7c 01       	movw	r14, r24
	if (geschw >=160)
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	53 e4       	ldi	r21, 0x43	; 67
    1d80:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    1d84:	88 23       	and	r24, r24
    1d86:	4c f4       	brge	.+18     	; 0x1d9a <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    1d88:	c0 92 92 02 	sts	0x0292, r12
    1d8c:	d0 92 93 02 	sts	0x0293, r13
    1d90:	e0 92 94 02 	sts	0x0294, r14
    1d94:	f0 92 95 02 	sts	0x0295, r15
    1d98:	08 c0       	rjmp	.+16     	; 0x1daa <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    1d9a:	10 92 92 02 	sts	0x0292, r1
    1d9e:	10 92 93 02 	sts	0x0293, r1
    1da2:	10 92 94 02 	sts	0x0294, r1
    1da6:	10 92 95 02 	sts	0x0295, r1
	}
}
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	08 95       	ret

00001db8 <_Z15initialisierungv>:
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    }
}

void initialisierung(){
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	a9 97       	sbiw	r28, 0x29	; 41
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    1dd2:	10 92 99 02 	sts	0x0299, r1
	statusreg=0;
    1dd6:	10 92 98 02 	sts	0x0298, r1
	position=0;
    1dda:	10 92 97 02 	sts	0x0297, r1
	FPS=0;
    1dde:	10 92 96 02 	sts	0x0296, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    1de2:	10 92 85 00 	sts	0x0085, r1
    1de6:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    1dea:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    1dee:	85 e0       	ldi	r24, 0x05	; 5
    1df0:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    1df4:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    1df6:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    1df8:	80 e4       	ldi	r24, 0x40	; 64
    1dfa:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    1dfe:	ea e7       	ldi	r30, 0x7A	; 122
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    1e06:	80 81       	ld	r24, Z
    1e08:	80 68       	ori	r24, 0x80	; 128
    1e0a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 64       	ori	r24, 0x40	; 64
    1e10:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    1e12:	80 81       	ld	r24, Z
    1e14:	18 2f       	mov	r17, r24
    1e16:	10 74       	andi	r17, 0x40	; 64
    1e18:	86 fd       	sbrc	r24, 6
    1e1a:	fb cf       	rjmp	.-10     	; 0x1e12 <_Z15initialisierungv+0x5a>
	(void) ADCW;
    1e1c:	80 91 78 00 	lds	r24, 0x0078
    1e20:	90 91 79 00 	lds	r25, 0x0079
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    1e24:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    1e26:	86 eb       	ldi	r24, 0xB6	; 182
    1e28:	93 e0       	ldi	r25, 0x03	; 3
    1e2a:	99 8f       	std	Y+25, r25	; 0x19
    1e2c:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    1e2e:	87 eb       	ldi	r24, 0xB7	; 183
    1e30:	97 e0       	ldi	r25, 0x07	; 7
    1e32:	9b 8f       	std	Y+27, r25	; 0x1b
    1e34:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    1e36:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    1e38:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    1e3e:	81 e7       	ldi	r24, 0x71	; 113
    1e40:	92 e0       	ldi	r25, 0x02	; 2
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    1e46:	86 eb       	ldi	r24, 0xB6	; 182
    1e48:	93 e0       	ldi	r25, 0x03	; 3
    1e4a:	0e 94 04 03 	call	0x608	; 0x608 <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    1e4e:	8f e0       	ldi	r24, 0x0F	; 15
    1e50:	e6 e0       	ldi	r30, 0x06	; 6
    1e52:	f1 e0       	ldi	r31, 0x01	; 1
    1e54:	de 01       	movw	r26, r28
    1e56:	13 96       	adiw	r26, 0x03	; 3
    1e58:	01 90       	ld	r0, Z+
    1e5a:	0d 92       	st	X+, r0
    1e5c:	8a 95       	dec	r24
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <_Z15initialisierungv+0xa0>
    1e60:	8e e0       	ldi	r24, 0x0E	; 14
    1e62:	8f 8b       	std	Y+23, r24	; 0x17
    1e64:	f1 2e       	mov	r15, r17
    1e66:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    1e68:	e3 e0       	ldi	r30, 0x03	; 3
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	ec 0f       	add	r30, r28
    1e6e:	fd 1f       	adc	r31, r29
    1e70:	e0 0f       	add	r30, r16
    1e72:	f1 1d       	adc	r31, r1
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	4f 2d       	mov	r20, r15
    1e78:	60 81       	ld	r22, Z
    1e7a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e7c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e7e:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    1e82:	0f 5f       	subi	r16, 0xFF	; 255
    1e84:	26 e0       	ldi	r18, 0x06	; 6
    1e86:	f2 0e       	add	r15, r18
    1e88:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8a:	08 17       	cp	r16, r24
    1e8c:	68 f3       	brcs	.-38     	; 0x1e68 <_Z15initialisierungv+0xb0>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    1e8e:	8f e0       	ldi	r24, 0x0F	; 15
    1e90:	e5 e1       	ldi	r30, 0x15	; 21
    1e92:	f1 e0       	ldi	r31, 0x01	; 1
    1e94:	de 01       	movw	r26, r28
    1e96:	13 96       	adiw	r26, 0x03	; 3
    1e98:	01 90       	ld	r0, Z+
    1e9a:	0d 92       	st	X+, r0
    1e9c:	8a 95       	dec	r24
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <_Z15initialisierungv+0xe0>
    1ea0:	8e e0       	ldi	r24, 0x0E	; 14
    1ea2:	8f 8b       	std	Y+23, r24	; 0x17
    1ea4:	f1 2e       	mov	r15, r17
    1ea6:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    1ea8:	e3 e0       	ldi	r30, 0x03	; 3
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	ec 0f       	add	r30, r28
    1eae:	fd 1f       	adc	r31, r29
    1eb0:	e0 0f       	add	r30, r16
    1eb2:	f1 1d       	adc	r31, r1
    1eb4:	28 e0       	ldi	r18, 0x08	; 8
    1eb6:	4f 2d       	mov	r20, r15
    1eb8:	60 81       	ld	r22, Z
    1eba:	88 8d       	ldd	r24, Y+24	; 0x18
    1ebc:	99 8d       	ldd	r25, Y+25	; 0x19
    1ebe:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    1ec2:	0f 5f       	subi	r16, 0xFF	; 255
    1ec4:	36 e0       	ldi	r19, 0x06	; 6
    1ec6:	f3 0e       	add	r15, r19
    1ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eca:	08 17       	cp	r16, r24
    1ecc:	68 f3       	brcs	.-38     	; 0x1ea8 <_Z15initialisierungv+0xf0>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    1ece:	80 e4       	ldi	r24, 0x40	; 64
    1ed0:	8f 93       	push	r24
    1ed2:	8f 93       	push	r24
    1ed4:	83 ea       	ldi	r24, 0xA3	; 163
    1ed6:	8f 93       	push	r24
    1ed8:	87 ed       	ldi	r24, 0xD7	; 215
    1eda:	8f 93       	push	r24
    1edc:	84 e2       	ldi	r24, 0x24	; 36
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	9f 93       	push	r25
    1ee2:	8f 93       	push	r24
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	03 96       	adiw	r24, 0x03	; 3
    1ee8:	9f 93       	push	r25
    1eea:	8f 93       	push	r24
    1eec:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    1ef0:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	88 23       	and	r24, r24
    1efe:	99 f0       	breq	.+38     	; 0x1f26 <_Z15initialisierungv+0x16e>
    1f00:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    1f02:	e3 e0       	ldi	r30, 0x03	; 3
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	ec 0f       	add	r30, r28
    1f08:	fd 1f       	adc	r31, r29
    1f0a:	e0 0f       	add	r30, r16
    1f0c:	f1 1d       	adc	r31, r1
    1f0e:	20 e2       	ldi	r18, 0x20	; 32
    1f10:	41 2f       	mov	r20, r17
    1f12:	60 81       	ld	r22, Z
    1f14:	88 8d       	ldd	r24, Y+24	; 0x18
    1f16:	99 8d       	ldd	r25, Y+25	; 0x19
    1f18:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    1f1c:	0f 5f       	subi	r16, 0xFF	; 255
    1f1e:	1a 5f       	subi	r17, 0xFA	; 250
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	08 17       	cp	r16, r24
    1f24:	70 f3       	brcs	.-36     	; 0x1f02 <_Z15initialisierungv+0x14a>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    1f26:	88 8d       	ldd	r24, Y+24	; 0x18
    1f28:	99 8d       	ldd	r25, Y+25	; 0x19
    1f2a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN7Display9sendFrameEv>
    1f2e:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f30:	ff e7       	ldi	r31, 0x7F	; 127
    1f32:	28 e3       	ldi	r18, 0x38	; 56
    1f34:	31 e0       	ldi	r19, 0x01	; 1
    1f36:	f1 50       	subi	r31, 0x01	; 1
    1f38:	20 40       	sbci	r18, 0x00	; 0
    1f3a:	30 40       	sbci	r19, 0x00	; 0
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <_Z15initialisierungv+0x17e>
    1f3e:	00 c0       	rjmp	.+0      	; 0x1f40 <_Z15initialisierungv+0x188>
    1f40:	00 00       	nop
    1f42:	9f e7       	ldi	r25, 0x7F	; 127
    1f44:	e8 e3       	ldi	r30, 0x38	; 56
    1f46:	f1 e0       	ldi	r31, 0x01	; 1
    1f48:	91 50       	subi	r25, 0x01	; 1
    1f4a:	e0 40       	sbci	r30, 0x00	; 0
    1f4c:	f0 40       	sbci	r31, 0x00	; 0
    1f4e:	e1 f7       	brne	.-8      	; 0x1f48 <_Z15initialisierungv+0x190>
    1f50:	00 c0       	rjmp	.+0      	; 0x1f52 <_Z15initialisierungv+0x19a>
    1f52:	00 00       	nop
    1f54:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    1f56:	61 f7       	brne	.-40     	; 0x1f30 <_Z15initialisierungv+0x178>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    1f58:	07 eb       	ldi	r16, 0xB7	; 183
    1f5a:	17 e0       	ldi	r17, 0x07	; 7
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	3d de       	rcall	.-902    	; 0x1be0 <_Z11EEPROM_Readj>
    1f66:	f8 01       	movw	r30, r16
    1f68:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	38 de       	rcall	.-912    	; 0x1be0 <_Z11EEPROM_Readj>
    1f70:	f8 01       	movw	r30, r16
    1f72:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	33 de       	rcall	.-922    	; 0x1be0 <_Z11EEPROM_Readj>
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    1f7e:	83 e0       	ldi	r24, 0x03	; 3
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	2e de       	rcall	.-932    	; 0x1be0 <_Z11EEPROM_Readj>
    1f84:	f8 01       	movw	r30, r16
    1f86:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	29 de       	rcall	.-942    	; 0x1be0 <_Z11EEPROM_Readj>
    1f8e:	f8 01       	movw	r30, r16
    1f90:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    1f92:	c8 01       	movw	r24, r16
    1f94:	0e 94 36 19 	call	0x326c	; 0x326c <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    1f98:	c8 01       	movw	r24, r16
    1f9a:	0e 94 17 1a 	call	0x342e	; 0x342e <_ZN3RTC8RTCstartEv>
	sei();
    1f9e:	78 94       	sei
}
    1fa0:	a9 96       	adiw	r28, 0x29	; 41
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	08 95       	ret

00001fb8 <_Z19maininterupthandlerP7monitorh>:

void maininterupthandler(monitor *mon, uint8_t taste){
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	1f 92       	push	r1
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	8c 01       	movw	r16, r24
    1fd0:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    1fd2:	60 32       	cpi	r22, 0x20	; 32
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <_Z19maininterupthandlerP7monitorh+0x20>
    1fd6:	86 c0       	rjmp	.+268    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
	{
		anzeige |= (1<<refreshdisplay);
    1fd8:	80 91 99 02 	lds	r24, 0x0299
    1fdc:	81 60       	ori	r24, 0x01	; 1
    1fde:	80 93 99 02 	sts	0x0299, r24
		switch (taste)							//Tastendruck ueberpruefen
    1fe2:	46 2f       	mov	r20, r22
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	fa 01       	movw	r30, r20
    1fe8:	f0 97       	sbiw	r30, 0x30	; 48
    1fea:	e6 34       	cpi	r30, 0x46	; 70
    1fec:	f1 05       	cpc	r31, r1
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <_Z19maininterupthandlerP7monitorh+0x3a>
    1ff0:	6e c0       	rjmp	.+220    	; 0x20ce <_Z19maininterupthandlerP7monitorh+0x116>
    1ff2:	e3 5a       	subi	r30, 0xA3	; 163
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__tablejump2__>
		{
			case 'm':
				position = numberofpages;
    1ffa:	84 e0       	ldi	r24, 0x04	; 4
    1ffc:	80 93 97 02 	sts	0x0297, r24
				break;
    2000:	94 c0       	rjmp	.+296    	; 0x212a <_Z19maininterupthandlerP7monitorh+0x172>
			case 'l':
				if (mon->posx==0)
    2002:	d8 01       	movw	r26, r16
    2004:	96 96       	adiw	r26, 0x26	; 38
    2006:	8c 91       	ld	r24, X
    2008:	81 11       	cpse	r24, r1
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <_Z19maininterupthandlerP7monitorh+0x5c>
				{
					position = numberofpages;
    200c:	84 e0       	ldi	r24, 0x04	; 4
    200e:	80 93 97 02 	sts	0x0297, r24
    2012:	8b c0       	rjmp	.+278    	; 0x212a <_Z19maininterupthandlerP7monitorh+0x172>
				}
				else{
					mon->posx--;
    2014:	81 50       	subi	r24, 0x01	; 1
    2016:	f8 01       	movw	r30, r16
    2018:	86 a3       	std	Z+38, r24	; 0x26
    201a:	64 c0       	rjmp	.+200    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				break;
			case 'r':
				if (position==numberofpages)
    201c:	80 91 97 02 	lds	r24, 0x0297
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	31 f4       	brne	.+12     	; 0x2030 <_Z19maininterupthandlerP7monitorh+0x78>
				{
					position=mon->posy;
    2024:	d8 01       	movw	r26, r16
    2026:	95 96       	adiw	r26, 0x25	; 37
    2028:	8c 91       	ld	r24, X
    202a:	80 93 97 02 	sts	0x0297, r24
    202e:	5a c0       	rjmp	.+180    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    2030:	f8 01       	movw	r30, r16
    2032:	86 a1       	ldd	r24, Z+38	; 0x26
    2034:	90 a5       	ldd	r25, Z+40	; 0x28
    2036:	89 17       	cp	r24, r25
    2038:	08 f0       	brcs	.+2      	; 0x203c <_Z19maininterupthandlerP7monitorh+0x84>
    203a:	54 c0       	rjmp	.+168    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				{
					mon->posx++;
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	86 a3       	std	Z+38, r24	; 0x26
    2040:	51 c0       	rjmp	.+162    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				break;
				case 'o':
					if (position==numberofpages)
    2042:	80 91 97 02 	lds	r24, 0x0297
    2046:	84 30       	cpi	r24, 0x04	; 4
    2048:	31 f4       	brne	.+12     	; 0x2056 <_Z19maininterupthandlerP7monitorh+0x9e>
					{
						position=mon->posy;
    204a:	d8 01       	movw	r26, r16
    204c:	95 96       	adiw	r26, 0x25	; 37
    204e:	8c 91       	ld	r24, X
    2050:	80 93 97 02 	sts	0x0297, r24
    2054:	47 c0       	rjmp	.+142    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
					}
					else if (!(mon->posx >= mon->maxentriesx))
    2056:	f8 01       	movw	r30, r16
    2058:	86 a1       	ldd	r24, Z+38	; 0x26
    205a:	90 a5       	ldd	r25, Z+40	; 0x28
    205c:	89 17       	cp	r24, r25
    205e:	08 f0       	brcs	.+2      	; 0x2062 <_Z19maininterupthandlerP7monitorh+0xaa>
    2060:	41 c0       	rjmp	.+130    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
					{
						mon->posx++;
    2062:	8f 5f       	subi	r24, 0xFF	; 255
    2064:	86 a3       	std	Z+38, r24	; 0x26
    2066:	3e c0       	rjmp	.+124    	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
					}
					break;
			case 'd':
				if (!(mon->posy >= mon->maxentries-1))
    2068:	d8 01       	movw	r26, r16
    206a:	95 96       	adiw	r26, 0x25	; 37
    206c:	2c 91       	ld	r18, X
    206e:	95 97       	sbiw	r26, 0x25	; 37
    2070:	42 2f       	mov	r20, r18
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	97 96       	adiw	r26, 0x27	; 39
    2076:	8c 91       	ld	r24, X
    2078:	97 97       	sbiw	r26, 0x27	; 39
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	48 17       	cp	r20, r24
    2080:	59 07       	cpc	r21, r25
    2082:	24 f4       	brge	.+8      	; 0x208c <_Z19maininterupthandlerP7monitorh+0xd4>
				{
					mon->posy++;
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	95 96       	adiw	r26, 0x25	; 37
    2088:	2c 93       	st	X, r18
    208a:	2c c0       	rjmp	.+88     	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				else{
					mon->posy = 0;
    208c:	f8 01       	movw	r30, r16
    208e:	15 a2       	std	Z+37, r1	; 0x25
    2090:	29 c0       	rjmp	.+82     	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				break;
			case 'u':
				if (!(mon->posy == 0))
    2092:	d8 01       	movw	r26, r16
    2094:	95 96       	adiw	r26, 0x25	; 37
    2096:	8c 91       	ld	r24, X
    2098:	95 97       	sbiw	r26, 0x25	; 37
    209a:	88 23       	and	r24, r24
    209c:	21 f0       	breq	.+8      	; 0x20a6 <_Z19maininterupthandlerP7monitorh+0xee>
				{
					mon->posy--;
    209e:	81 50       	subi	r24, 0x01	; 1
    20a0:	95 96       	adiw	r26, 0x25	; 37
    20a2:	8c 93       	st	X, r24
    20a4:	1f c0       	rjmp	.+62     	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				else{
					mon->posy=mon->maxentries-1;
    20a6:	f8 01       	movw	r30, r16
    20a8:	87 a1       	ldd	r24, Z+39	; 0x27
    20aa:	81 50       	subi	r24, 0x01	; 1
    20ac:	85 a3       	std	Z+37, r24	; 0x25
    20ae:	1a c0       	rjmp	.+52     	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				break;
			case '0':
				//Licht an/aus
				if (LED.ison())
    20b0:	80 ea       	ldi	r24, 0xA0	; 160
    20b2:	92 e0       	ldi	r25, 0x02	; 2
    20b4:	0e 94 6f 18 	call	0x30de	; 0x30de <_ZN6Output4isonEv>
    20b8:	88 23       	and	r24, r24
    20ba:	29 f0       	breq	.+10     	; 0x20c6 <_Z19maininterupthandlerP7monitorh+0x10e>
				{
					LED.off();
    20bc:	80 ea       	ldi	r24, 0xA0	; 160
    20be:	92 e0       	ldi	r25, 0x02	; 2
    20c0:	0e 94 aa 18 	call	0x3154	; 0x3154 <_ZN6Output3offEv>
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				else{
					LED.on();
    20c6:	80 ea       	ldi	r24, 0xA0	; 160
    20c8:	92 e0       	ldi	r25, 0x02	; 2
    20ca:	cc d7       	rcall	.+3992   	; 0x3064 <_ZN6Output2onEv>
    20cc:	0b c0       	rjmp	.+22     	; 0x20e4 <_Z19maininterupthandlerP7monitorh+0x12c>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    20ce:	d8 01       	movw	r26, r16
    20d0:	ed 91       	ld	r30, X+
    20d2:	fc 91       	ld	r31, X
    20d4:	01 90       	ld	r0, Z+
    20d6:	f0 81       	ld	r31, Z
    20d8:	e0 2d       	mov	r30, r0
    20da:	be 01       	movw	r22, r28
    20dc:	6f 5f       	subi	r22, 0xFF	; 255
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	c8 01       	movw	r24, r16
    20e2:	09 95       	icall
				break;
		}
	}
	
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    20e4:	80 91 97 02 	lds	r24, 0x0297
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	f9 f4       	brne	.+62     	; 0x212a <_Z19maininterupthandlerP7monitorh+0x172>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    20ec:	67 e0       	ldi	r22, 0x07	; 7
    20ee:	80 e2       	ldi	r24, 0x20	; 32
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	d4 dd       	rcall	.-1112   	; 0x1c9c <_Z13reed_debouncePVhh>
    20f4:	88 23       	and	r24, r24
    20f6:	31 f0       	breq	.+12     	; 0x2104 <_Z19maininterupthandlerP7monitorh+0x14c>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    20f8:	63 e3       	ldi	r22, 0x33	; 51
    20fa:	71 e1       	ldi	r23, 0x11	; 17
    20fc:	86 e3       	ldi	r24, 0x36	; 54
    20fe:	9f e3       	ldi	r25, 0x3F	; 63
    2100:	f2 dd       	rcall	.-1052   	; 0x1ce6 <_Z15geschwindigkeitf>
    2102:	13 c0       	rjmp	.+38     	; 0x212a <_Z19maininterupthandlerP7monitorh+0x172>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    2104:	80 91 84 00 	lds	r24, 0x0084
    2108:	90 91 85 00 	lds	r25, 0x0085
    210c:	8e 38       	cpi	r24, 0x8E	; 142
    210e:	9b 45       	sbci	r25, 0x5B	; 91
    2110:	60 f0       	brcs	.+24     	; 0x212a <_Z19maininterupthandlerP7monitorh+0x172>
		{
			TCNT1=0;
    2112:	10 92 85 00 	sts	0x0085, r1
    2116:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    211a:	10 92 92 02 	sts	0x0292, r1
    211e:	10 92 93 02 	sts	0x0293, r1
    2122:	10 92 94 02 	sts	0x0294, r1
    2126:	10 92 95 02 	sts	0x0295, r1
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    212a:	80 91 cf 07 	lds	r24, 0x07CF
    212e:	81 ff       	sbrs	r24, 1
    2130:	6a c0       	rjmp	.+212    	; 0x2206 <_Z19maininterupthandlerP7monitorh+0x24e>
	{
		rtc.zeit();
    2132:	87 eb       	ldi	r24, 0xB7	; 183
    2134:	97 e0       	ldi	r25, 0x07	; 7
    2136:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_ZN3RTC4zeitEv>
		if (position==1)
    213a:	80 91 97 02 	lds	r24, 0x0297
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	09 f0       	breq	.+2      	; 0x2144 <_Z19maininterupthandlerP7monitorh+0x18c>
    2142:	57 c0       	rjmp	.+174    	; 0x21f2 <_Z19maininterupthandlerP7monitorh+0x23a>
		{
			if (geschw>maxgeschw)
    2144:	c0 90 92 02 	lds	r12, 0x0292
    2148:	d0 90 93 02 	lds	r13, 0x0293
    214c:	e0 90 94 02 	lds	r14, 0x0294
    2150:	f0 90 95 02 	lds	r15, 0x0295
    2154:	20 91 8a 02 	lds	r18, 0x028A
    2158:	30 91 8b 02 	lds	r19, 0x028B
    215c:	40 91 8c 02 	lds	r20, 0x028C
    2160:	50 91 8d 02 	lds	r21, 0x028D
    2164:	c7 01       	movw	r24, r14
    2166:	b6 01       	movw	r22, r12
    2168:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    216c:	18 16       	cp	r1, r24
    216e:	44 f4       	brge	.+16     	; 0x2180 <_Z19maininterupthandlerP7monitorh+0x1c8>
			{
				maxgeschw=geschw;
    2170:	c0 92 8a 02 	sts	0x028A, r12
    2174:	d0 92 8b 02 	sts	0x028B, r13
    2178:	e0 92 8c 02 	sts	0x028C, r14
    217c:	f0 92 8d 02 	sts	0x028D, r15
			}
			if (geschw >= 1.0)
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	c7 01       	movw	r24, r14
    218a:	b6 01       	movw	r22, r12
    218c:	0e 94 89 1c 	call	0x3912	; 0x3912 <__gesf2>
    2190:	88 23       	and	r24, r24
    2192:	9c f0       	brlt	.+38     	; 0x21ba <_Z19maininterupthandlerP7monitorh+0x202>
			{
				Fahrtzeit++;
    2194:	80 91 86 02 	lds	r24, 0x0286
    2198:	90 91 87 02 	lds	r25, 0x0287
    219c:	a0 91 88 02 	lds	r26, 0x0288
    21a0:	b0 91 89 02 	lds	r27, 0x0289
    21a4:	01 96       	adiw	r24, 0x01	; 1
    21a6:	a1 1d       	adc	r26, r1
    21a8:	b1 1d       	adc	r27, r1
    21aa:	80 93 86 02 	sts	0x0286, r24
    21ae:	90 93 87 02 	sts	0x0287, r25
    21b2:	a0 93 88 02 	sts	0x0288, r26
    21b6:	b0 93 89 02 	sts	0x0289, r27
			}
			strecke+=geschw/3.6;
    21ba:	26 e6       	ldi	r18, 0x66	; 102
    21bc:	36 e6       	ldi	r19, 0x66	; 102
    21be:	46 e6       	ldi	r20, 0x66	; 102
    21c0:	50 e4       	ldi	r21, 0x40	; 64
    21c2:	c7 01       	movw	r24, r14
    21c4:	b6 01       	movw	r22, r12
    21c6:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__divsf3>
    21ca:	9b 01       	movw	r18, r22
    21cc:	ac 01       	movw	r20, r24
    21ce:	60 91 8e 02 	lds	r22, 0x028E
    21d2:	70 91 8f 02 	lds	r23, 0x028F
    21d6:	80 91 90 02 	lds	r24, 0x0290
    21da:	90 91 91 02 	lds	r25, 0x0291
    21de:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__addsf3>
    21e2:	60 93 8e 02 	sts	0x028E, r22
    21e6:	70 93 8f 02 	sts	0x028F, r23
    21ea:	80 93 90 02 	sts	0x0290, r24
    21ee:	90 93 91 02 	sts	0x0291, r25
		}
		anzeige |= (1<<refreshdisplay);
    21f2:	80 91 99 02 	lds	r24, 0x0299
    21f6:	81 60       	ori	r24, 0x01	; 1
    21f8:	80 93 99 02 	sts	0x0299, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    21fc:	e7 eb       	ldi	r30, 0xB7	; 183
    21fe:	f7 e0       	ldi	r31, 0x07	; 7
    2200:	80 8d       	ldd	r24, Z+24	; 0x18
    2202:	8d 7f       	andi	r24, 0xFD	; 253
    2204:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    2206:	80 91 cf 07 	lds	r24, 0x07CF
    220a:	82 ff       	sbrs	r24, 2
    220c:	08 c0       	rjmp	.+16     	; 0x221e <_Z19maininterupthandlerP7monitorh+0x266>
	{
		anzeige |= (1<<refreshdisplay);
    220e:	90 91 99 02 	lds	r25, 0x0299
    2212:	91 60       	ori	r25, 0x01	; 1
    2214:	90 93 99 02 	sts	0x0299, r25
		rtc.interupts &= ~(1<<minuteninterupt);
    2218:	8b 7f       	andi	r24, 0xFB	; 251
    221a:	80 93 cf 07 	sts	0x07CF, r24
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    221e:	80 91 99 02 	lds	r24, 0x0299
    2222:	80 ff       	sbrs	r24, 0
    2224:	0d c0       	rjmp	.+26     	; 0x2240 <_Z19maininterupthandlerP7monitorh+0x288>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    2226:	d8 01       	movw	r26, r16
    2228:	ed 91       	ld	r30, X+
    222a:	fc 91       	ld	r31, X
    222c:	02 80       	ldd	r0, Z+2	; 0x02
    222e:	f3 81       	ldd	r31, Z+3	; 0x03
    2230:	e0 2d       	mov	r30, r0
    2232:	c8 01       	movw	r24, r16
    2234:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    2236:	80 91 99 02 	lds	r24, 0x0299
    223a:	8e 7f       	andi	r24, 0xFE	; 254
    223c:	80 93 99 02 	sts	0x0299, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    2240:	0f 90       	pop	r0
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	08 95       	ret

00002254 <main>:

void initialisierung();
void maininterupthandler(monitor *mon, uint8_t taste);

int main(void)
{
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	63 97       	sbiw	r28, 0x13	; 19
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    2268:	a7 dd       	rcall	.-1202   	; 0x1db8 <_Z15initialisierungv>
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    226a:	8a e2       	ldi	r24, 0x2A	; 42
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
    2272:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2274:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    2276:	86 eb       	ldi	r24, 0xB6	; 182
    2278:	93 e0       	ldi	r25, 0x03	; 3
    227a:	90 8f       	std	Z+24, r25	; 0x18
    227c:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    227e:	87 eb       	ldi	r24, 0xB7	; 183
    2280:	97 e0       	ldi	r25, 0x07	; 7
    2282:	92 8f       	std	Z+26, r25	; 0x1a
    2284:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2286:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2288:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    228e:	89 e5       	ldi	r24, 0x59	; 89
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    2296:	85 e5       	ldi	r24, 0x55	; 85
    2298:	98 e6       	ldi	r25, 0x68	; 104
    229a:	a2 e7       	ldi	r26, 0x72	; 114
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	ab 83       	std	Y+3, r26	; 0x03
    22a4:	bc 83       	std	Y+4, r27	; 0x04
    22a6:	9e 01       	movw	r18, r28
    22a8:	2f 5f       	subi	r18, 0xFF	; 255
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	cf 01       	movw	r24, r30
    22ae:	4b 96       	adiw	r24, 0x1b	; 27
    22b0:	be 01       	movw	r22, r28
    22b2:	65 5f       	subi	r22, 0xF5	; 245
    22b4:	7f 4f       	sbci	r23, 0xFF	; 255
    22b6:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	50 2f       	mov	r21, r16
    22bc:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    22be:	54 30       	cpi	r21, 0x04	; 4
    22c0:	28 f4       	brcc	.+10     	; 0x22cc <main+0x78>
			{
				name[i] = na[i];
    22c2:	d8 01       	movw	r26, r16
    22c4:	5c 91       	ld	r21, X
    22c6:	dc 01       	movw	r26, r24
    22c8:	5c 93       	st	X, r21
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    22cc:	dc 01       	movw	r26, r24
    22ce:	4c 93       	st	X, r20
    22d0:	0f 5f       	subi	r16, 0xFF	; 255
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    22d6:	06 17       	cp	r16, r22
    22d8:	17 07       	cpc	r17, r23
    22da:	79 f7       	brne	.-34     	; 0x22ba <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 1;
    22dc:	ff 24       	eor	r15, r15
    22de:	f3 94       	inc	r15
    22e0:	f1 a6       	std	Z+41, r15	; 0x29
		maxentries = 3;
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	87 a3       	std	Z+39, r24	; 0x27
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    22e6:	fa 83       	std	Y+2, r31	; 0x02
    22e8:	e9 83       	std	Y+1, r30	; 0x01
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    22ea:	89 e2       	ldi	r24, 0x29	; 41
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
    22f2:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    22f4:	fc 01       	movw	r30, r24
    22f6:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    22f8:	86 eb       	ldi	r24, 0xB6	; 182
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	90 8f       	std	Z+24, r25	; 0x18
    22fe:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    2300:	87 eb       	ldi	r24, 0xB7	; 183
    2302:	97 e0       	ldi	r25, 0x07	; 7
    2304:	92 8f       	std	Z+26, r25	; 0x1a
    2306:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    2308:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    230a:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    230c:	f0 a6       	std	Z+40, r15	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    230e:	81 e6       	ldi	r24, 0x61	; 97
    2310:	92 e0       	ldi	r25, 0x02	; 2
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    2316:	86 e0       	ldi	r24, 0x06	; 6
    2318:	ec e3       	ldi	r30, 0x3C	; 60
    231a:	f1 e0       	ldi	r31, 0x01	; 1
    231c:	de 01       	movw	r26, r28
    231e:	1b 96       	adiw	r26, 0x0b	; 11
    2320:	01 90       	ld	r0, Z+
    2322:	0d 92       	st	X+, r0
    2324:	8a 95       	dec	r24
    2326:	e1 f7       	brne	.-8      	; 0x2320 <main+0xcc>
    2328:	ce 01       	movw	r24, r28
    232a:	0b 96       	adiw	r24, 0x0b	; 11
    232c:	d8 01       	movw	r26, r16
    232e:	5b 96       	adiw	r26, 0x1b	; 27
    2330:	ae 01       	movw	r20, r28
    2332:	4b 5e       	subi	r20, 0xEB	; 235
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2338:	20 e2       	ldi	r18, 0x20	; 32
    233a:	3e 2f       	mov	r19, r30
    233c:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    233e:	36 30       	cpi	r19, 0x06	; 6
    2340:	18 f4       	brcc	.+6      	; 0x2348 <main+0xf4>
			{
				name[i] = na[i];
    2342:	30 81       	ld	r19, Z
    2344:	3c 93       	st	X, r19
    2346:	01 c0       	rjmp	.+2      	; 0x234a <main+0xf6>
			}
			else
			{
				name[i] = ' ';
    2348:	2c 93       	st	X, r18
    234a:	31 96       	adiw	r30, 0x01	; 1
    234c:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    234e:	e4 17       	cp	r30, r20
    2350:	f5 07       	cpc	r31, r21
    2352:	99 f7       	brne	.-26     	; 0x233a <main+0xe6>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    2354:	7b dc       	rcall	.-1802   	; 0x1c4c <_Z6nullenv>
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2356:	1c 83       	std	Y+4, r17	; 0x04
    2358:	0b 83       	std	Y+3, r16	; 0x03
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    235a:	89 e2       	ldi	r24, 0x29	; 41
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2362:	dc 01       	movw	r26, r24
    2364:	56 96       	adiw	r26, 0x16	; 22
    2366:	1c 92       	st	X, r1
    2368:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    236a:	26 eb       	ldi	r18, 0xB6	; 182
    236c:	33 e0       	ldi	r19, 0x03	; 3
    236e:	58 96       	adiw	r26, 0x18	; 24
    2370:	3c 93       	st	X, r19
    2372:	2e 93       	st	-X, r18
    2374:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    2376:	27 eb       	ldi	r18, 0xB7	; 183
    2378:	37 e0       	ldi	r19, 0x07	; 7
    237a:	5a 96       	adiw	r26, 0x1a	; 26
    237c:	3c 93       	st	X, r19
    237e:	2e 93       	st	-X, r18
    2380:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    2382:	95 96       	adiw	r26, 0x25	; 37
    2384:	1c 92       	st	X, r1
    2386:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    2388:	96 96       	adiw	r26, 0x26	; 38
    238a:	1c 92       	st	X, r1
    238c:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	98 96       	adiw	r26, 0x28	; 40
    2392:	2c 93       	st	X, r18
    2394:	98 97       	sbiw	r26, 0x28	; 40

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    2396:	29 e6       	ldi	r18, 0x69	; 105
    2398:	32 e0       	ldi	r19, 0x02	; 2
    239a:	2d 93       	st	X+, r18
    239c:	3c 93       	st	X, r19
	{
		char na[] = "Settings";
    239e:	29 e0       	ldi	r18, 0x09	; 9
    23a0:	ec e8       	ldi	r30, 0x8C	; 140
    23a2:	f1 e0       	ldi	r31, 0x01	; 1
    23a4:	de 01       	movw	r26, r28
    23a6:	1b 96       	adiw	r26, 0x0b	; 11
    23a8:	01 90       	ld	r0, Z+
    23aa:	0d 92       	st	X+, r0
    23ac:	2a 95       	dec	r18
    23ae:	e1 f7       	brne	.-8      	; 0x23a8 <main+0x154>
    23b0:	9e 01       	movw	r18, r28
    23b2:	25 5f       	subi	r18, 0xF5	; 245
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	dc 01       	movw	r26, r24
    23b8:	5b 96       	adiw	r26, 0x1b	; 27
    23ba:	be 01       	movw	r22, r28
    23bc:	6b 5e       	subi	r22, 0xEB	; 235
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	5e 2f       	mov	r21, r30
    23c6:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    23c8:	59 30       	cpi	r21, 0x09	; 9
    23ca:	18 f4       	brcc	.+6      	; 0x23d2 <main+0x17e>
			{
				name[i] = na[i];
    23cc:	50 81       	ld	r21, Z
    23ce:	5c 93       	st	X, r21
    23d0:	01 c0       	rjmp	.+2      	; 0x23d4 <main+0x180>
			}
			else
			{
				name[i] = ' ';
    23d2:	4c 93       	st	X, r20
    23d4:	31 96       	adiw	r30, 0x01	; 1
    23d6:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    23d8:	e6 17       	cp	r30, r22
    23da:	f7 07       	cpc	r31, r23
    23dc:	99 f7       	brne	.-26     	; 0x23c4 <main+0x170>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 4;
    23de:	24 e0       	ldi	r18, 0x04	; 4
    23e0:	fc 01       	movw	r30, r24
    23e2:	27 a3       	std	Z+39, r18	; 0x27
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    23e8:	89 e2       	ldi	r24, 0x29	; 41
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
    23f0:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    23f2:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    23f4:	0f 2e       	mov	r0, r31
    23f6:	f6 eb       	ldi	r31, 0xB6	; 182
    23f8:	cf 2e       	mov	r12, r31
    23fa:	f3 e0       	ldi	r31, 0x03	; 3
    23fc:	df 2e       	mov	r13, r31
    23fe:	f0 2d       	mov	r31, r0
    2400:	d0 8e       	std	Z+24, r13	; 0x18
    2402:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    2404:	0f 2e       	mov	r0, r31
    2406:	f7 eb       	ldi	r31, 0xB7	; 183
    2408:	ef 2e       	mov	r14, r31
    240a:	f7 e0       	ldi	r31, 0x07	; 7
    240c:	ff 2e       	mov	r15, r31
    240e:	f0 2d       	mov	r31, r0
    2410:	f2 8e       	std	Z+26, r15	; 0x1a
    2412:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    2414:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    2416:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    2418:	11 e0       	ldi	r17, 0x01	; 1
    241a:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    241c:	81 e8       	ldi	r24, 0x81	; 129
    241e:	92 e0       	ldi	r25, 0x02	; 2
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    2424:	f8 87       	std	Y+8, r31	; 0x08
    2426:	ef 83       	std	Y+7, r30	; 0x07
} while(0)

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    2428:	89 e2       	ldi	r24, 0x29	; 41
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    2430:	dc 01       	movw	r26, r24
    2432:	56 96       	adiw	r26, 0x16	; 22
    2434:	1c 92       	st	X, r1
    2436:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    2438:	58 96       	adiw	r26, 0x18	; 24
    243a:	dc 92       	st	X, r13
    243c:	ce 92       	st	-X, r12
    243e:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    2440:	5a 96       	adiw	r26, 0x1a	; 26
    2442:	fc 92       	st	X, r15
    2444:	ee 92       	st	-X, r14
    2446:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    2448:	95 96       	adiw	r26, 0x25	; 37
    244a:	1c 92       	st	X, r1
    244c:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    244e:	96 96       	adiw	r26, 0x26	; 38
    2450:	1c 92       	st	X, r1
    2452:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    2454:	98 96       	adiw	r26, 0x28	; 40
    2456:	1c 93       	st	X, r17
    2458:	98 97       	sbiw	r26, 0x28	; 40

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    245a:	29 e7       	ldi	r18, 0x79	; 121
    245c:	32 e0       	ldi	r19, 0x02	; 2
    245e:	2d 93       	st	X+, r18
    2460:	3c 93       	st	X, r19
	{
		char na[] = "Menue";
    2462:	26 e0       	ldi	r18, 0x06	; 6
    2464:	e5 e9       	ldi	r30, 0x95	; 149
    2466:	f1 e0       	ldi	r31, 0x01	; 1
    2468:	de 01       	movw	r26, r28
    246a:	1b 96       	adiw	r26, 0x0b	; 11
    246c:	01 90       	ld	r0, Z+
    246e:	0d 92       	st	X+, r0
    2470:	2a 95       	dec	r18
    2472:	e1 f7       	brne	.-8      	; 0x246c <main+0x218>
    2474:	9e 01       	movw	r18, r28
    2476:	25 5f       	subi	r18, 0xF5	; 245
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	dc 01       	movw	r26, r24
    247c:	5b 96       	adiw	r26, 0x1b	; 27
    247e:	be 01       	movw	r22, r28
    2480:	6b 5e       	subi	r22, 0xEB	; 235
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    2486:	40 e2       	ldi	r20, 0x20	; 32
    2488:	5e 2f       	mov	r21, r30
    248a:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    248c:	56 30       	cpi	r21, 0x06	; 6
    248e:	18 f4       	brcc	.+6      	; 0x2496 <main+0x242>
			{
				name[i] = na[i];
    2490:	50 81       	ld	r21, Z
    2492:	5c 93       	st	X, r21
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <main+0x244>
			}
			else
			{
				name[i] = ' ';
    2496:	4c 93       	st	X, r20
    2498:	31 96       	adiw	r30, 0x01	; 1
    249a:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    249c:	e6 17       	cp	r30, r22
    249e:	f7 07       	cpc	r31, r23
    24a0:	99 f7       	brne	.-26     	; 0x2488 <main+0x234>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    24a2:	fc 01       	movw	r30, r24
    24a4:	10 a6       	std	Z+40, r1	; 0x28
			maxentries = numberofpages;
    24a6:	24 e0       	ldi	r18, 0x04	; 4
    24a8:	27 a3       	std	Z+39, r18	; 0x27
		new uhr(&oled,&rtc),
		new tacho(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    24aa:	9a 87       	std	Y+10, r25	; 0x0a
    24ac:	89 87       	std	Y+9, r24	; 0x09


	while (1) 
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    24ae:	8a ea       	ldi	r24, 0xAA	; 170
    24b0:	93 e0       	ldi	r25, 0x03	; 3
    24b2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN9Interface7unifiedEv>
    24b6:	e0 91 97 02 	lds	r30, 0x0297
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	2c 0f       	add	r18, r28
    24c6:	3d 1f       	adc	r19, r29
    24c8:	e2 0f       	add	r30, r18
    24ca:	f3 1f       	adc	r31, r19
    24cc:	68 2f       	mov	r22, r24
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	72 dd       	rcall	.-1308   	; 0x1fb8 <_Z19maininterupthandlerP7monitorh>
    }
    24d4:	ec cf       	rjmp	.-40     	; 0x24ae <main+0x25a>

000024d6 <_Z13uhreinstellenv>:
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}

void uhreinstellen(){
    24d6:	2f 92       	push	r2
    24d8:	3f 92       	push	r3
    24da:	4f 92       	push	r4
    24dc:	5f 92       	push	r5
    24de:	6f 92       	push	r6
    24e0:	7f 92       	push	r7
    24e2:	8f 92       	push	r8
    24e4:	9f 92       	push	r9
    24e6:	af 92       	push	r10
    24e8:	bf 92       	push	r11
    24ea:	cf 92       	push	r12
    24ec:	df 92       	push	r13
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	66 97       	sbiw	r28, 0x16	; 22
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    250a:	87 eb       	ldi	r24, 0xB7	; 183
    250c:	97 e0       	ldi	r25, 0x07	; 7
    250e:	a9 d7       	rcall	.+3922   	; 0x3462 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    2510:	86 eb       	ldi	r24, 0xB6	; 182
    2512:	93 e0       	ldi	r25, 0x03	; 3
    2514:	0e 94 04 03 	call	0x608	; 0x608 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    2518:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    251a:	0f 2e       	mov	r0, r31
    251c:	ff e0       	ldi	r31, 0x0F	; 15
    251e:	7f 2e       	mov	r7, r31
    2520:	f0 2d       	mov	r31, r0
    2522:	ce 01       	movw	r24, r28
    2524:	01 96       	adiw	r24, 0x01	; 1
    2526:	2c 01       	movw	r4, r24
    2528:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    252a:	8d 8b       	std	Y+21, r24	; 0x15
    252c:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    252e:	0f 2e       	mov	r0, r31
    2530:	f7 eb       	ldi	r31, 0xB7	; 183
    2532:	cf 2e       	mov	r12, r31
    2534:	f7 e0       	ldi	r31, 0x07	; 7
    2536:	df 2e       	mov	r13, r31
    2538:	f0 2d       	mov	r31, r0
    253a:	0f 2e       	mov	r0, r31
    253c:	fd ec       	ldi	r31, 0xCD	; 205
    253e:	8f 2e       	mov	r8, r31
    2540:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    2542:	68 94       	set
    2544:	ee 24       	eor	r14, r14
    2546:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    2548:	0f 2e       	mov	r0, r31
    254a:	fe e2       	ldi	r31, 0x2E	; 46
    254c:	6f 2e       	mov	r6, r31
    254e:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    2550:	eb e9       	ldi	r30, 0x9B	; 155
    2552:	f1 e0       	ldi	r31, 0x01	; 1
    2554:	d2 01       	movw	r26, r4
    2556:	87 2d       	mov	r24, r7
    2558:	01 90       	ld	r0, Z+
    255a:	0d 92       	st	X+, r0
    255c:	8a 95       	dec	r24
    255e:	e1 f7       	brne	.-8      	; 0x2558 <_Z13uhreinstellenv+0x82>
    2560:	52 01       	movw	r10, r4
    2562:	12 01       	movw	r2, r4
    2564:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    2566:	f1 01       	movw	r30, r2
    2568:	61 91       	ld	r22, Z+
    256a:	1f 01       	movw	r2, r30
    256c:	2f 2d       	mov	r18, r15
    256e:	41 2f       	mov	r20, r17
    2570:	86 eb       	ldi	r24, 0xB6	; 182
    2572:	93 e0       	ldi	r25, 0x03	; 3
    2574:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2578:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    257a:	14 35       	cpi	r17, 0x54	; 84
    257c:	a1 f7       	brne	.-24     	; 0x2566 <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    257e:	e5 e1       	ldi	r30, 0x15	; 21
    2580:	f1 e0       	ldi	r31, 0x01	; 1
    2582:	d2 01       	movw	r26, r4
    2584:	87 2d       	mov	r24, r7
    2586:	01 90       	ld	r0, Z+
    2588:	0d 92       	st	X+, r0
    258a:	8a 95       	dec	r24
    258c:	e1 f7       	brne	.-8      	; 0x2586 <_Z13uhreinstellenv+0xb0>
    258e:	2d 88       	ldd	r2, Y+21	; 0x15
    2590:	3e 88       	ldd	r3, Y+22	; 0x16
    2592:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    2594:	f1 01       	movw	r30, r2
    2596:	61 91       	ld	r22, Z+
    2598:	1f 01       	movw	r2, r30
    259a:	28 e0       	ldi	r18, 0x08	; 8
    259c:	41 2f       	mov	r20, r17
    259e:	86 eb       	ldi	r24, 0xB6	; 182
    25a0:	93 e0       	ldi	r25, 0x03	; 3
    25a2:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    25a6:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    25a8:	14 35       	cpi	r17, 0x54	; 84
    25aa:	a1 f7       	brne	.-24     	; 0x2594 <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    25ac:	f6 01       	movw	r30, r12
    25ae:	90 89       	ldd	r25, Z+16	; 0x10
    25b0:	98 9d       	mul	r25, r8
    25b2:	81 2d       	mov	r24, r1
    25b4:	11 24       	eor	r1, r1
    25b6:	86 95       	lsr	r24
    25b8:	86 95       	lsr	r24
    25ba:	86 95       	lsr	r24
    25bc:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    25be:	88 0f       	add	r24, r24
    25c0:	28 2f       	mov	r18, r24
    25c2:	22 0f       	add	r18, r18
    25c4:	22 0f       	add	r18, r18
    25c6:	82 0f       	add	r24, r18
    25c8:	98 1b       	sub	r25, r24
    25ca:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    25cc:	fa e3       	ldi	r31, 0x3A	; 58
    25ce:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    25d0:	f6 01       	movw	r30, r12
    25d2:	91 89       	ldd	r25, Z+17	; 0x11
    25d4:	98 9d       	mul	r25, r8
    25d6:	81 2d       	mov	r24, r1
    25d8:	11 24       	eor	r1, r1
    25da:	86 95       	lsr	r24
    25dc:	86 95       	lsr	r24
    25de:	86 95       	lsr	r24
    25e0:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    25e2:	88 0f       	add	r24, r24
    25e4:	28 2f       	mov	r18, r24
    25e6:	22 0f       	add	r18, r18
    25e8:	22 0f       	add	r18, r18
    25ea:	82 0f       	add	r24, r18
    25ec:	98 1b       	sub	r25, r24
    25ee:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    25f0:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    25f2:	94 89       	ldd	r25, Z+20	; 0x14
    25f4:	98 9d       	mul	r25, r8
    25f6:	81 2d       	mov	r24, r1
    25f8:	11 24       	eor	r1, r1
    25fa:	86 95       	lsr	r24
    25fc:	86 95       	lsr	r24
    25fe:	86 95       	lsr	r24
    2600:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    2602:	88 0f       	add	r24, r24
    2604:	28 2f       	mov	r18, r24
    2606:	22 0f       	add	r18, r18
    2608:	22 0f       	add	r18, r18
    260a:	82 0f       	add	r24, r18
    260c:	98 1b       	sub	r25, r24
    260e:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    2610:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    2612:	96 89       	ldd	r25, Z+22	; 0x16
    2614:	98 9d       	mul	r25, r8
    2616:	81 2d       	mov	r24, r1
    2618:	11 24       	eor	r1, r1
    261a:	86 95       	lsr	r24
    261c:	86 95       	lsr	r24
    261e:	86 95       	lsr	r24
    2620:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    2622:	88 0f       	add	r24, r24
    2624:	28 2f       	mov	r18, r24
    2626:	22 0f       	add	r18, r18
    2628:	22 0f       	add	r18, r18
    262a:	82 0f       	add	r24, r18
    262c:	98 1b       	sub	r25, r24
    262e:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    2630:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    2632:	97 89       	ldd	r25, Z+23	; 0x17
    2634:	98 9d       	mul	r25, r8
    2636:	81 2d       	mov	r24, r1
    2638:	11 24       	eor	r1, r1
    263a:	86 95       	lsr	r24
    263c:	86 95       	lsr	r24
    263e:	86 95       	lsr	r24
    2640:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    2642:	88 0f       	add	r24, r24
    2644:	28 2f       	mov	r18, r24
    2646:	22 0f       	add	r18, r18
    2648:	22 0f       	add	r18, r18
    264a:	82 0f       	add	r24, r18
    264c:	98 1b       	sub	r25, r24
    264e:	9e 87       	std	Y+14, r25	; 0x0e
    2650:	0d 89       	ldd	r16, Y+21	; 0x15
    2652:	1e 89       	ldd	r17, Y+22	; 0x16
    2654:	2f 2c       	mov	r2, r15
    2656:	33 24       	eor	r3, r3
    2658:	33 94       	inc	r3
    265a:	05 c0       	rjmp	.+10     	; 0x2666 <_Z13uhreinstellenv+0x190>
    265c:	33 94       	inc	r3
    265e:	0f 5f       	subi	r16, 0xFF	; 255
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	f0 e1       	ldi	r31, 0x10	; 16
    2664:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	38 16       	cp	r3, r24
    266a:	61 f0       	breq	.+24     	; 0x2684 <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    266c:	20 e1       	ldi	r18, 0x10	; 16
    266e:	42 2d       	mov	r20, r2
    2670:	f8 01       	movw	r30, r16
    2672:	60 81       	ld	r22, Z
    2674:	86 eb       	ldi	r24, 0xB6	; 182
    2676:	93 e0       	ldi	r25, 0x03	; 3
    2678:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    267c:	f4 e0       	ldi	r31, 0x04	; 4
    267e:	f3 15       	cp	r31, r3
    2680:	68 f7       	brcc	.-38     	; 0x265c <_Z13uhreinstellenv+0x186>
    2682:	08 c0       	rjmp	.+16     	; 0x2694 <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    2684:	24 e1       	ldi	r18, 0x14	; 20
    2686:	48 e2       	ldi	r20, 0x28	; 40
    2688:	6b 81       	ldd	r22, Y+3	; 0x03
    268a:	86 eb       	ldi	r24, 0xB6	; 182
    268c:	93 e0       	ldi	r25, 0x03	; 3
    268e:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2692:	e4 cf       	rjmp	.-56     	; 0x265c <_Z13uhreinstellenv+0x186>
    2694:	8e 01       	movw	r16, r28
    2696:	09 5f       	subi	r16, 0xF9	; 249
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    269a:	2f 2c       	mov	r2, r15
    269c:	0f 2e       	mov	r0, r31
    269e:	f6 e0       	ldi	r31, 0x06	; 6
    26a0:	3f 2e       	mov	r3, r31
    26a2:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    26a4:	88 e0       	ldi	r24, 0x08	; 8
    26a6:	38 16       	cp	r3, r24
    26a8:	61 f0       	breq	.+24     	; 0x26c2 <_Z13uhreinstellenv+0x1ec>
    26aa:	9b e0       	ldi	r25, 0x0B	; 11
    26ac:	39 16       	cp	r3, r25
    26ae:	49 f0       	breq	.+18     	; 0x26c2 <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    26b0:	2e 2d       	mov	r18, r14
    26b2:	42 2d       	mov	r20, r2
    26b4:	f8 01       	movw	r30, r16
    26b6:	60 81       	ld	r22, Z
    26b8:	86 eb       	ldi	r24, 0xB6	; 182
    26ba:	93 e0       	ldi	r25, 0x03	; 3
    26bc:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN7Display16draw_number16x16Ehhh>
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    26c2:	28 e2       	ldi	r18, 0x28	; 40
    26c4:	48 e0       	ldi	r20, 0x08	; 8
    26c6:	42 0d       	add	r20, r2
    26c8:	f8 01       	movw	r30, r16
    26ca:	60 81       	ld	r22, Z
    26cc:	86 eb       	ldi	r24, 0xB6	; 182
    26ce:	93 e0       	ldi	r25, 0x03	; 3
    26d0:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    26d4:	33 94       	inc	r3
    26d6:	0f 5f       	subi	r16, 0xFF	; 255
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	f0 e1       	ldi	r31, 0x10	; 16
    26dc:	2f 0e       	add	r2, r31
    26de:	8e e0       	ldi	r24, 0x0E	; 14
    26e0:	38 12       	cpse	r3, r24
    26e2:	e0 cf       	rjmp	.-64     	; 0x26a4 <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    26e4:	86 eb       	ldi	r24, 0xB6	; 182
    26e6:	93 e0       	ldi	r25, 0x03	; 3
    26e8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    26ec:	86 eb       	ldi	r24, 0xB6	; 182
    26ee:	93 e0       	ldi	r25, 0x03	; 3
    26f0:	0e 94 04 03 	call	0x608	; 0x608 <_ZN7Display10clearFrameEv>
		switch (pos) {
    26f4:	89 2d       	mov	r24, r9
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	8a 30       	cpi	r24, 0x0A	; 10
    26fa:	91 05       	cpc	r25, r1
    26fc:	08 f0       	brcs	.+2      	; 0x2700 <_Z13uhreinstellenv+0x22a>
    26fe:	2c c2       	rjmp	.+1112   	; 0x2b58 <_Z13uhreinstellenv+0x682>
    2700:	fc 01       	movw	r30, r24
    2702:	ed 55       	subi	r30, 0x5D	; 93
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    270a:	8a ea       	ldi	r24, 0xAA	; 170
    270c:	93 e0       	ldi	r25, 0x03	; 3
    270e:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    2712:	88 0f       	add	r24, r24
    2714:	98 2f       	mov	r25, r24
    2716:	99 0f       	add	r25, r25
    2718:	99 0f       	add	r25, r25
    271a:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    271c:	88 31       	cpi	r24, 0x18	; 24
    271e:	08 f4       	brcc	.+2      	; 0x2722 <_Z13uhreinstellenv+0x24c>
    2720:	52 c2       	rjmp	.+1188   	; 0x2bc6 <_Z13uhreinstellenv+0x6f0>
				rtc.Stunden=0;
    2722:	f6 01       	movw	r30, r12
    2724:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    2726:	ea ea       	ldi	r30, 0xAA	; 170
    2728:	f1 e0       	ldi	r31, 0x01	; 1
    272a:	d2 01       	movw	r26, r4
    272c:	87 2d       	mov	r24, r7
    272e:	01 90       	ld	r0, Z+
    2730:	0d 92       	st	X+, r0
    2732:	8a 95       	dec	r24
    2734:	e1 f7       	brne	.-8      	; 0x272e <_Z13uhreinstellenv+0x258>
    2736:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2738:	f5 01       	movw	r30, r10
    273a:	61 91       	ld	r22, Z+
    273c:	5f 01       	movw	r10, r30
    273e:	28 e3       	ldi	r18, 0x38	; 56
    2740:	41 2f       	mov	r20, r17
    2742:	86 eb       	ldi	r24, 0xB6	; 182
    2744:	93 e0       	ldi	r25, 0x03	; 3
    2746:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    274a:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    274c:	14 35       	cpi	r17, 0x54	; 84
    274e:	a1 f7       	brne	.-24     	; 0x2738 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    2750:	99 24       	eor	r9, r9
    2752:	9a 94       	dec	r9
    2754:	3a c2       	rjmp	.+1140   	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    2756:	8a ea       	ldi	r24, 0xAA	; 170
    2758:	93 e0       	ldi	r25, 0x03	; 3
    275a:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    275e:	f6 01       	movw	r30, r12
    2760:	20 89       	ldd	r18, Z+16	; 0x10
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	82 0f       	add	r24, r18
    2766:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    2768:	88 31       	cpi	r24, 0x18	; 24
    276a:	10 f4       	brcc	.+4      	; 0x2770 <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    276c:	80 8b       	std	Z+16, r24	; 0x10
    276e:	2d c2       	rjmp	.+1114   	; 0x2bca <_Z13uhreinstellenv+0x6f4>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    2770:	f6 01       	movw	r30, r12
    2772:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    2774:	ea ea       	ldi	r30, 0xAA	; 170
    2776:	f1 e0       	ldi	r31, 0x01	; 1
    2778:	d2 01       	movw	r26, r4
    277a:	87 2d       	mov	r24, r7
    277c:	01 90       	ld	r0, Z+
    277e:	0d 92       	st	X+, r0
    2780:	8a 95       	dec	r24
    2782:	e1 f7       	brne	.-8      	; 0x277c <_Z13uhreinstellenv+0x2a6>
    2784:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2786:	f5 01       	movw	r30, r10
    2788:	61 91       	ld	r22, Z+
    278a:	5f 01       	movw	r10, r30
    278c:	28 e3       	ldi	r18, 0x38	; 56
    278e:	41 2f       	mov	r20, r17
    2790:	86 eb       	ldi	r24, 0xB6	; 182
    2792:	93 e0       	ldi	r25, 0x03	; 3
    2794:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2798:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    279a:	14 35       	cpi	r17, 0x54	; 84
    279c:	a1 f7       	brne	.-24     	; 0x2786 <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    279e:	99 24       	eor	r9, r9
    27a0:	9a 94       	dec	r9
    27a2:	13 c2       	rjmp	.+1062   	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    27a4:	8a ea       	ldi	r24, 0xAA	; 170
    27a6:	93 e0       	ldi	r25, 0x03	; 3
    27a8:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    27ac:	88 0f       	add	r24, r24
    27ae:	98 2f       	mov	r25, r24
    27b0:	99 0f       	add	r25, r25
    27b2:	99 0f       	add	r25, r25
    27b4:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    27b6:	8c 33       	cpi	r24, 0x3C	; 60
    27b8:	18 f4       	brcc	.+6      	; 0x27c0 <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    27ba:	f6 01       	movw	r30, r12
    27bc:	81 8b       	std	Z+17, r24	; 0x11
    27be:	05 c2       	rjmp	.+1034   	; 0x2bca <_Z13uhreinstellenv+0x6f4>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    27c0:	f6 01       	movw	r30, r12
    27c2:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    27c4:	e9 eb       	ldi	r30, 0xB9	; 185
    27c6:	f1 e0       	ldi	r31, 0x01	; 1
    27c8:	d2 01       	movw	r26, r4
    27ca:	87 2d       	mov	r24, r7
    27cc:	01 90       	ld	r0, Z+
    27ce:	0d 92       	st	X+, r0
    27d0:	8a 95       	dec	r24
    27d2:	e1 f7       	brne	.-8      	; 0x27cc <_Z13uhreinstellenv+0x2f6>
    27d4:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    27d6:	f5 01       	movw	r30, r10
    27d8:	61 91       	ld	r22, Z+
    27da:	5f 01       	movw	r10, r30
    27dc:	28 e3       	ldi	r18, 0x38	; 56
    27de:	41 2f       	mov	r20, r17
    27e0:	86 eb       	ldi	r24, 0xB6	; 182
    27e2:	93 e0       	ldi	r25, 0x03	; 3
    27e4:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    27e8:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    27ea:	14 35       	cpi	r17, 0x54	; 84
    27ec:	a1 f7       	brne	.-24     	; 0x27d6 <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    27ee:	99 24       	eor	r9, r9
    27f0:	93 94       	inc	r9
    27f2:	eb c1       	rjmp	.+982    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    27f4:	8a ea       	ldi	r24, 0xAA	; 170
    27f6:	93 e0       	ldi	r25, 0x03	; 3
    27f8:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    27fc:	f6 01       	movw	r30, r12
    27fe:	21 89       	ldd	r18, Z+17	; 0x11
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	82 0f       	add	r24, r18
    2804:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    2806:	8c 33       	cpi	r24, 0x3C	; 60
    2808:	10 f4       	brcc	.+4      	; 0x280e <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    280a:	81 8b       	std	Z+17, r24	; 0x11
    280c:	de c1       	rjmp	.+956    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    280e:	f6 01       	movw	r30, r12
    2810:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    2812:	e9 eb       	ldi	r30, 0xB9	; 185
    2814:	f1 e0       	ldi	r31, 0x01	; 1
    2816:	d2 01       	movw	r26, r4
    2818:	87 2d       	mov	r24, r7
    281a:	01 90       	ld	r0, Z+
    281c:	0d 92       	st	X+, r0
    281e:	8a 95       	dec	r24
    2820:	e1 f7       	brne	.-8      	; 0x281a <_Z13uhreinstellenv+0x344>
    2822:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2824:	f5 01       	movw	r30, r10
    2826:	61 91       	ld	r22, Z+
    2828:	5f 01       	movw	r10, r30
    282a:	28 e3       	ldi	r18, 0x38	; 56
    282c:	41 2f       	mov	r20, r17
    282e:	86 eb       	ldi	r24, 0xB6	; 182
    2830:	93 e0       	ldi	r25, 0x03	; 3
    2832:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2836:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2838:	14 35       	cpi	r17, 0x54	; 84
    283a:	a1 f7       	brne	.-24     	; 0x2824 <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    283c:	99 24       	eor	r9, r9
    283e:	93 94       	inc	r9
    2840:	c4 c1       	rjmp	.+904    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2842:	8a ea       	ldi	r24, 0xAA	; 170
    2844:	93 e0       	ldi	r25, 0x03	; 3
    2846:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    284a:	88 0f       	add	r24, r24
    284c:	98 2f       	mov	r25, r24
    284e:	99 0f       	add	r25, r25
    2850:	99 0f       	add	r25, r25
    2852:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    2854:	80 32       	cpi	r24, 0x20	; 32
    2856:	18 f4       	brcc	.+6      	; 0x285e <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    2858:	f6 01       	movw	r30, r12
    285a:	84 8b       	std	Z+20, r24	; 0x14
    285c:	b6 c1       	rjmp	.+876    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    285e:	f6 01       	movw	r30, r12
    2860:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    2862:	8b e0       	ldi	r24, 0x0B	; 11
    2864:	e8 ec       	ldi	r30, 0xC8	; 200
    2866:	f1 e0       	ldi	r31, 0x01	; 1
    2868:	d2 01       	movw	r26, r4
    286a:	01 90       	ld	r0, Z+
    286c:	0d 92       	st	X+, r0
    286e:	8a 95       	dec	r24
    2870:	e1 f7       	brne	.-8      	; 0x286a <_Z13uhreinstellenv+0x394>
    2872:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2874:	f5 01       	movw	r30, r10
    2876:	61 91       	ld	r22, Z+
    2878:	5f 01       	movw	r10, r30
    287a:	28 e3       	ldi	r18, 0x38	; 56
    287c:	41 2f       	mov	r20, r17
    287e:	86 eb       	ldi	r24, 0xB6	; 182
    2880:	93 e0       	ldi	r25, 0x03	; 3
    2882:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2886:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2888:	1c 33       	cpi	r17, 0x3C	; 60
    288a:	a1 f7       	brne	.-24     	; 0x2874 <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    288c:	0f 2e       	mov	r0, r31
    288e:	f3 e0       	ldi	r31, 0x03	; 3
    2890:	9f 2e       	mov	r9, r31
    2892:	f0 2d       	mov	r31, r0
    2894:	9a c1       	rjmp	.+820    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    2896:	8a ea       	ldi	r24, 0xAA	; 170
    2898:	93 e0       	ldi	r25, 0x03	; 3
    289a:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    289e:	f6 01       	movw	r30, r12
    28a0:	24 89       	ldd	r18, Z+20	; 0x14
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	82 0f       	add	r24, r18
    28a6:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    28a8:	80 32       	cpi	r24, 0x20	; 32
    28aa:	10 f4       	brcc	.+4      	; 0x28b0 <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    28ac:	84 8b       	std	Z+20, r24	; 0x14
    28ae:	8d c1       	rjmp	.+794    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    28b0:	f6 01       	movw	r30, r12
    28b2:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    28b4:	8b e0       	ldi	r24, 0x0B	; 11
    28b6:	e8 ec       	ldi	r30, 0xC8	; 200
    28b8:	f1 e0       	ldi	r31, 0x01	; 1
    28ba:	d2 01       	movw	r26, r4
    28bc:	01 90       	ld	r0, Z+
    28be:	0d 92       	st	X+, r0
    28c0:	8a 95       	dec	r24
    28c2:	e1 f7       	brne	.-8      	; 0x28bc <_Z13uhreinstellenv+0x3e6>
    28c4:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    28c6:	f5 01       	movw	r30, r10
    28c8:	61 91       	ld	r22, Z+
    28ca:	5f 01       	movw	r10, r30
    28cc:	28 e3       	ldi	r18, 0x38	; 56
    28ce:	41 2f       	mov	r20, r17
    28d0:	86 eb       	ldi	r24, 0xB6	; 182
    28d2:	93 e0       	ldi	r25, 0x03	; 3
    28d4:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    28d8:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    28da:	1c 33       	cpi	r17, 0x3C	; 60
    28dc:	a1 f7       	brne	.-24     	; 0x28c6 <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    28de:	0f 2e       	mov	r0, r31
    28e0:	f3 e0       	ldi	r31, 0x03	; 3
    28e2:	9f 2e       	mov	r9, r31
    28e4:	f0 2d       	mov	r31, r0
    28e6:	71 c1       	rjmp	.+738    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    28e8:	8a ea       	ldi	r24, 0xAA	; 170
    28ea:	93 e0       	ldi	r25, 0x03	; 3
    28ec:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    28f0:	88 0f       	add	r24, r24
    28f2:	98 2f       	mov	r25, r24
    28f4:	99 0f       	add	r25, r25
    28f6:	99 0f       	add	r25, r25
    28f8:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    28fa:	8d 30       	cpi	r24, 0x0D	; 13
    28fc:	18 f4       	brcc	.+6      	; 0x2904 <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    28fe:	f6 01       	movw	r30, r12
    2900:	86 8b       	std	Z+22, r24	; 0x16
    2902:	63 c1       	rjmp	.+710    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    2904:	f6 01       	movw	r30, r12
    2906:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    2908:	8d e0       	ldi	r24, 0x0D	; 13
    290a:	e3 ed       	ldi	r30, 0xD3	; 211
    290c:	f1 e0       	ldi	r31, 0x01	; 1
    290e:	d2 01       	movw	r26, r4
    2910:	01 90       	ld	r0, Z+
    2912:	0d 92       	st	X+, r0
    2914:	8a 95       	dec	r24
    2916:	e1 f7       	brne	.-8      	; 0x2910 <_Z13uhreinstellenv+0x43a>
    2918:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    291a:	f5 01       	movw	r30, r10
    291c:	61 91       	ld	r22, Z+
    291e:	5f 01       	movw	r10, r30
    2920:	28 e3       	ldi	r18, 0x38	; 56
    2922:	41 2f       	mov	r20, r17
    2924:	86 eb       	ldi	r24, 0xB6	; 182
    2926:	93 e0       	ldi	r25, 0x03	; 3
    2928:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    292c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    292e:	18 34       	cpi	r17, 0x48	; 72
    2930:	a1 f7       	brne	.-24     	; 0x291a <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    2932:	0f 2e       	mov	r0, r31
    2934:	f5 e0       	ldi	r31, 0x05	; 5
    2936:	9f 2e       	mov	r9, r31
    2938:	f0 2d       	mov	r31, r0
    293a:	47 c1       	rjmp	.+654    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    293c:	8a ea       	ldi	r24, 0xAA	; 170
    293e:	93 e0       	ldi	r25, 0x03	; 3
    2940:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    2944:	f6 01       	movw	r30, r12
    2946:	26 89       	ldd	r18, Z+22	; 0x16
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	82 0f       	add	r24, r18
    294c:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    294e:	8d 30       	cpi	r24, 0x0D	; 13
    2950:	10 f4       	brcc	.+4      	; 0x2956 <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    2952:	86 8b       	std	Z+22, r24	; 0x16
    2954:	1d c0       	rjmp	.+58     	; 0x2990 <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    2956:	f6 01       	movw	r30, r12
    2958:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    295a:	8d e0       	ldi	r24, 0x0D	; 13
    295c:	e3 ed       	ldi	r30, 0xD3	; 211
    295e:	f1 e0       	ldi	r31, 0x01	; 1
    2960:	d2 01       	movw	r26, r4
    2962:	01 90       	ld	r0, Z+
    2964:	0d 92       	st	X+, r0
    2966:	8a 95       	dec	r24
    2968:	e1 f7       	brne	.-8      	; 0x2962 <_Z13uhreinstellenv+0x48c>
    296a:	2d 88       	ldd	r2, Y+21	; 0x15
    296c:	3e 88       	ldd	r3, Y+22	; 0x16
    296e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2970:	f1 01       	movw	r30, r2
    2972:	61 91       	ld	r22, Z+
    2974:	1f 01       	movw	r2, r30
    2976:	28 e3       	ldi	r18, 0x38	; 56
    2978:	41 2f       	mov	r20, r17
    297a:	86 eb       	ldi	r24, 0xB6	; 182
    297c:	93 e0       	ldi	r25, 0x03	; 3
    297e:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2982:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2984:	18 34       	cpi	r17, 0x48	; 72
    2986:	a1 f7       	brne	.-24     	; 0x2970 <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    2988:	0f 2e       	mov	r0, r31
    298a:	f5 e0       	ldi	r31, 0x05	; 5
    298c:	9f 2e       	mov	r9, r31
    298e:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    2990:	f6 01       	movw	r30, r12
    2992:	96 89       	ldd	r25, Z+22	; 0x16
    2994:	89 2f       	mov	r24, r25
    2996:	8d 7f       	andi	r24, 0xFD	; 253
    2998:	84 30       	cpi	r24, 0x04	; 4
    299a:	11 f0       	breq	.+4      	; 0x29a0 <_Z13uhreinstellenv+0x4ca>
    299c:	89 30       	cpi	r24, 0x09	; 9
    299e:	09 f5       	brne	.+66     	; 0x29e2 <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    29a0:	f6 01       	movw	r30, r12
    29a2:	84 89       	ldd	r24, Z+20	; 0x14
    29a4:	8f 31       	cpi	r24, 0x1F	; 31
    29a6:	08 f4       	brcc	.+2      	; 0x29aa <_Z13uhreinstellenv+0x4d4>
    29a8:	d8 c0       	rjmp	.+432    	; 0x2b5a <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    29aa:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    29ac:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    29ae:	8b e0       	ldi	r24, 0x0B	; 11
    29b0:	e8 ec       	ldi	r30, 0xC8	; 200
    29b2:	f1 e0       	ldi	r31, 0x01	; 1
    29b4:	d2 01       	movw	r26, r4
    29b6:	01 90       	ld	r0, Z+
    29b8:	0d 92       	st	X+, r0
    29ba:	8a 95       	dec	r24
    29bc:	e1 f7       	brne	.-8      	; 0x29b6 <_Z13uhreinstellenv+0x4e0>
    29be:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    29c0:	f5 01       	movw	r30, r10
    29c2:	61 91       	ld	r22, Z+
    29c4:	5f 01       	movw	r10, r30
    29c6:	28 e3       	ldi	r18, 0x38	; 56
    29c8:	41 2f       	mov	r20, r17
    29ca:	86 eb       	ldi	r24, 0xB6	; 182
    29cc:	93 e0       	ldi	r25, 0x03	; 3
    29ce:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    29d2:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    29d4:	1c 33       	cpi	r17, 0x3C	; 60
    29d6:	a1 f7       	brne	.-24     	; 0x29c0 <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    29d8:	0f 2e       	mov	r0, r31
    29da:	f3 e0       	ldi	r31, 0x03	; 3
    29dc:	9f 2e       	mov	r9, r31
    29de:	f0 2d       	mov	r31, r0
    29e0:	f4 c0       	rjmp	.+488    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    29e2:	92 30       	cpi	r25, 0x02	; 2
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <_Z13uhreinstellenv+0x512>
    29e6:	b9 c0       	rjmp	.+370    	; 0x2b5a <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    29e8:	f6 01       	movw	r30, r12
    29ea:	84 89       	ldd	r24, Z+20	; 0x14
    29ec:	8e 31       	cpi	r24, 0x1E	; 30
    29ee:	08 f4       	brcc	.+2      	; 0x29f2 <_Z13uhreinstellenv+0x51c>
    29f0:	b4 c0       	rjmp	.+360    	; 0x2b5a <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    29f2:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    29f4:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    29f6:	8b e0       	ldi	r24, 0x0B	; 11
    29f8:	e8 ec       	ldi	r30, 0xC8	; 200
    29fa:	f1 e0       	ldi	r31, 0x01	; 1
    29fc:	d2 01       	movw	r26, r4
    29fe:	01 90       	ld	r0, Z+
    2a00:	0d 92       	st	X+, r0
    2a02:	8a 95       	dec	r24
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <_Z13uhreinstellenv+0x528>
    2a06:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2a08:	f5 01       	movw	r30, r10
    2a0a:	61 91       	ld	r22, Z+
    2a0c:	5f 01       	movw	r10, r30
    2a0e:	28 e3       	ldi	r18, 0x38	; 56
    2a10:	41 2f       	mov	r20, r17
    2a12:	86 eb       	ldi	r24, 0xB6	; 182
    2a14:	93 e0       	ldi	r25, 0x03	; 3
    2a16:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2a1a:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    2a1c:	1c 33       	cpi	r17, 0x3C	; 60
    2a1e:	a1 f7       	brne	.-24     	; 0x2a08 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    2a20:	0f 2e       	mov	r0, r31
    2a22:	f3 e0       	ldi	r31, 0x03	; 3
    2a24:	9f 2e       	mov	r9, r31
    2a26:	f0 2d       	mov	r31, r0
    2a28:	d0 c0       	rjmp	.+416    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2a2a:	8a ea       	ldi	r24, 0xAA	; 170
    2a2c:	93 e0       	ldi	r25, 0x03	; 3
    2a2e:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    2a32:	88 0f       	add	r24, r24
    2a34:	98 2f       	mov	r25, r24
    2a36:	99 0f       	add	r25, r25
    2a38:	99 0f       	add	r25, r25
    2a3a:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    2a3c:	82 33       	cpi	r24, 0x32	; 50
    2a3e:	18 f4       	brcc	.+6      	; 0x2a46 <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    2a40:	f6 01       	movw	r30, r12
    2a42:	87 8b       	std	Z+23, r24	; 0x17
    2a44:	c2 c0       	rjmp	.+388    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    2a46:	f6 01       	movw	r30, r12
    2a48:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    2a4a:	8c e0       	ldi	r24, 0x0C	; 12
    2a4c:	e0 ee       	ldi	r30, 0xE0	; 224
    2a4e:	f1 e0       	ldi	r31, 0x01	; 1
    2a50:	d2 01       	movw	r26, r4
    2a52:	01 90       	ld	r0, Z+
    2a54:	0d 92       	st	X+, r0
    2a56:	8a 95       	dec	r24
    2a58:	e1 f7       	brne	.-8      	; 0x2a52 <_Z13uhreinstellenv+0x57c>
    2a5a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2a5c:	f5 01       	movw	r30, r10
    2a5e:	61 91       	ld	r22, Z+
    2a60:	5f 01       	movw	r10, r30
    2a62:	28 e3       	ldi	r18, 0x38	; 56
    2a64:	41 2f       	mov	r20, r17
    2a66:	86 eb       	ldi	r24, 0xB6	; 182
    2a68:	93 e0       	ldi	r25, 0x03	; 3
    2a6a:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2a6e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2a70:	12 34       	cpi	r17, 0x42	; 66
    2a72:	a1 f7       	brne	.-24     	; 0x2a5c <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    2a74:	0f 2e       	mov	r0, r31
    2a76:	f7 e0       	ldi	r31, 0x07	; 7
    2a78:	9f 2e       	mov	r9, r31
    2a7a:	f0 2d       	mov	r31, r0
    2a7c:	a6 c0       	rjmp	.+332    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    2a7e:	8a ea       	ldi	r24, 0xAA	; 170
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN9Interface17ZahlenausTastaturEv>
    2a86:	f6 01       	movw	r30, r12
    2a88:	27 89       	ldd	r18, Z+23	; 0x17
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	82 0f       	add	r24, r18
    2a8e:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    2a90:	82 33       	cpi	r24, 0x32	; 50
    2a92:	08 f4       	brcc	.+2      	; 0x2a96 <_Z13uhreinstellenv+0x5c0>
    2a94:	91 c0       	rjmp	.+290    	; 0x2bb8 <_Z13uhreinstellenv+0x6e2>
				rtc.Jahr=0;
    2a96:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    2a98:	8c e0       	ldi	r24, 0x0C	; 12
    2a9a:	e0 ee       	ldi	r30, 0xE0	; 224
    2a9c:	f1 e0       	ldi	r31, 0x01	; 1
    2a9e:	d2 01       	movw	r26, r4
    2aa0:	01 90       	ld	r0, Z+
    2aa2:	0d 92       	st	X+, r0
    2aa4:	8a 95       	dec	r24
    2aa6:	e1 f7       	brne	.-8      	; 0x2aa0 <_Z13uhreinstellenv+0x5ca>
    2aa8:	2d 88       	ldd	r2, Y+21	; 0x15
    2aaa:	3e 88       	ldd	r3, Y+22	; 0x16
    2aac:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2aae:	f1 01       	movw	r30, r2
    2ab0:	61 91       	ld	r22, Z+
    2ab2:	1f 01       	movw	r2, r30
    2ab4:	28 e3       	ldi	r18, 0x38	; 56
    2ab6:	41 2f       	mov	r20, r17
    2ab8:	86 eb       	ldi	r24, 0xB6	; 182
    2aba:	93 e0       	ldi	r25, 0x03	; 3
    2abc:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2ac0:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    2ac2:	12 34       	cpi	r17, 0x42	; 66
    2ac4:	a1 f7       	brne	.-24     	; 0x2aae <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    2ac6:	0f 2e       	mov	r0, r31
    2ac8:	f7 e0       	ldi	r31, 0x07	; 7
    2aca:	9f 2e       	mov	r9, r31
    2acc:	f0 2d       	mov	r31, r0
    2ace:	76 c0       	rjmp	.+236    	; 0x2bbc <_Z13uhreinstellenv+0x6e6>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    2ad0:	f6 01       	movw	r30, r12
    2ad2:	17 89       	ldd	r17, Z+23	; 0x17
    2ad4:	13 70       	andi	r17, 0x03	; 3
    2ad6:	f9 f4       	brne	.+62     	; 0x2b16 <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    2ad8:	84 89       	ldd	r24, Z+20	; 0x14
    2ada:	8e 31       	cpi	r24, 0x1E	; 30
    2adc:	f0 f1       	brcs	.+124    	; 0x2b5a <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    2ade:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    2ae0:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    2ae2:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2ae4:	8b e0       	ldi	r24, 0x0B	; 11
    2ae6:	e8 ec       	ldi	r30, 0xC8	; 200
    2ae8:	f1 e0       	ldi	r31, 0x01	; 1
    2aea:	d2 01       	movw	r26, r4
    2aec:	01 90       	ld	r0, Z+
    2aee:	0d 92       	st	X+, r0
    2af0:	8a 95       	dec	r24
    2af2:	e1 f7       	brne	.-8      	; 0x2aec <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2af4:	f5 01       	movw	r30, r10
    2af6:	61 91       	ld	r22, Z+
    2af8:	5f 01       	movw	r10, r30
    2afa:	28 e3       	ldi	r18, 0x38	; 56
    2afc:	41 2f       	mov	r20, r17
    2afe:	86 eb       	ldi	r24, 0xB6	; 182
    2b00:	93 e0       	ldi	r25, 0x03	; 3
    2b02:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2b06:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2b08:	1c 33       	cpi	r17, 0x3C	; 60
    2b0a:	a1 f7       	brne	.-24     	; 0x2af4 <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    2b0c:	0f 2e       	mov	r0, r31
    2b0e:	f3 e0       	ldi	r31, 0x03	; 3
    2b10:	9f 2e       	mov	r9, r31
    2b12:	f0 2d       	mov	r31, r0
    2b14:	5a c0       	rjmp	.+180    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    2b16:	f6 01       	movw	r30, r12
    2b18:	84 89       	ldd	r24, Z+20	; 0x14
    2b1a:	8d 31       	cpi	r24, 0x1D	; 29
    2b1c:	f0 f0       	brcs	.+60     	; 0x2b5a <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    2b1e:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    2b20:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    2b22:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    2b24:	8b e0       	ldi	r24, 0x0B	; 11
    2b26:	e8 ec       	ldi	r30, 0xC8	; 200
    2b28:	f1 e0       	ldi	r31, 0x01	; 1
    2b2a:	d2 01       	movw	r26, r4
    2b2c:	01 90       	ld	r0, Z+
    2b2e:	0d 92       	st	X+, r0
    2b30:	8a 95       	dec	r24
    2b32:	e1 f7       	brne	.-8      	; 0x2b2c <_Z13uhreinstellenv+0x656>
    2b34:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    2b36:	f5 01       	movw	r30, r10
    2b38:	61 91       	ld	r22, Z+
    2b3a:	5f 01       	movw	r10, r30
    2b3c:	28 e3       	ldi	r18, 0x38	; 56
    2b3e:	41 2f       	mov	r20, r17
    2b40:	86 eb       	ldi	r24, 0xB6	; 182
    2b42:	93 e0       	ldi	r25, 0x03	; 3
    2b44:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2b48:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    2b4a:	1c 33       	cpi	r17, 0x3C	; 60
    2b4c:	a1 f7       	brne	.-24     	; 0x2b36 <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    2b4e:	0f 2e       	mov	r0, r31
    2b50:	f3 e0       	ldi	r31, 0x03	; 3
    2b52:	9f 2e       	mov	r9, r31
    2b54:	f0 2d       	mov	r31, r0
    2b56:	39 c0       	rjmp	.+114    	; 0x2bca <_Z13uhreinstellenv+0x6f4>
					}
				}
			}
			break;
			default:
			pos++;
    2b58:	93 94       	inc	r9
			break;
		}
		pos++;
    2b5a:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    2b5c:	fa e0       	ldi	r31, 0x0A	; 10
    2b5e:	f9 15       	cp	r31, r9
    2b60:	08 f0       	brcs	.+2      	; 0x2b64 <_Z13uhreinstellenv+0x68e>
    2b62:	f6 cc       	rjmp	.-1556   	; 0x2550 <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    2b64:	07 eb       	ldi	r16, 0xB7	; 183
    2b66:	17 e0       	ldi	r17, 0x07	; 7
    2b68:	f8 01       	movw	r30, r16
    2b6a:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    2b6c:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    2b6e:	61 89       	ldd	r22, Z+17	; 0x11
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	2b d8       	rcall	.-4010   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    2b76:	f8 01       	movw	r30, r16
    2b78:	60 89       	ldd	r22, Z+16	; 0x10
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	26 d8       	rcall	.-4020   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    2b80:	f8 01       	movw	r30, r16
    2b82:	64 89       	ldd	r22, Z+20	; 0x14
    2b84:	82 e0       	ldi	r24, 0x02	; 2
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	21 d8       	rcall	.-4030   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	66 89       	ldd	r22, Z+22	; 0x16
    2b8e:	83 e0       	ldi	r24, 0x03	; 3
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	1c d8       	rcall	.-4040   	; 0x1bcc <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    2b94:	f8 01       	movw	r30, r16
    2b96:	67 89       	ldd	r22, Z+23	; 0x17
    2b98:	84 e0       	ldi	r24, 0x04	; 4
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	17 d8       	rcall	.-4050   	; 0x1bcc <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    2b9e:	86 eb       	ldi	r24, 0xB6	; 182
    2ba0:	93 e0       	ldi	r25, 0x03	; 3
    2ba2:	0e 94 04 03 	call	0x608	; 0x608 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    2ba6:	c8 01       	movw	r24, r16
    2ba8:	61 d3       	rcall	.+1730   	; 0x326c <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    2baa:	c8 01       	movw	r24, r16
    2bac:	26 d3       	rcall	.+1612   	; 0x31fa <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    2bae:	c8 01       	movw	r24, r16
    2bb0:	3e d4       	rcall	.+2172   	; 0x342e <_ZN3RTC8RTCstartEv>
    2bb2:	0d c0       	rjmp	.+26     	; 0x2bce <_Z13uhreinstellenv+0x6f8>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    2bb4:	93 94       	inc	r9
    2bb6:	cc cc       	rjmp	.-1640   	; 0x2550 <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    2bb8:	f6 01       	movw	r30, r12
    2bba:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    2bbc:	f6 01       	movw	r30, r12
    2bbe:	86 89       	ldd	r24, Z+22	; 0x16
    2bc0:	82 30       	cpi	r24, 0x02	; 2
    2bc2:	c1 f7       	brne	.-16     	; 0x2bb4 <_Z13uhreinstellenv+0x6de>
    2bc4:	85 cf       	rjmp	.-246    	; 0x2ad0 <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    2bc6:	f6 01       	movw	r30, r12
    2bc8:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    2bca:	93 94       	inc	r9
    2bcc:	c1 cc       	rjmp	.-1662   	; 0x2550 <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    2bce:	66 96       	adiw	r28, 0x16	; 22
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	bf 90       	pop	r11
    2bec:	af 90       	pop	r10
    2bee:	9f 90       	pop	r9
    2bf0:	8f 90       	pop	r8
    2bf2:	7f 90       	pop	r7
    2bf4:	6f 90       	pop	r6
    2bf6:	5f 90       	pop	r5
    2bf8:	4f 90       	pop	r4
    2bfa:	3f 90       	pop	r3
    2bfc:	2f 90       	pop	r2
    2bfe:	08 95       	ret

00002c00 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    2c00:	cf 92       	push	r12
    2c02:	df 92       	push	r13
    2c04:	ef 92       	push	r14
    2c06:	ff 92       	push	r15
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    2c12:	8f 89       	ldd	r24, Y+23	; 0x17
    2c14:	98 8d       	ldd	r25, Y+24	; 0x18
    2c16:	0e 94 04 03 	call	0x608	; 0x608 <_ZN7Display10clearFrameEv>
    2c1a:	10 e0       	ldi	r17, 0x00	; 0
    2c1c:	e1 2c       	mov	r14, r1
    2c1e:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    2c20:	e9 8d       	ldd	r30, Y+25	; 0x19
    2c22:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2c24:	ee 0d       	add	r30, r14
    2c26:	ff 1d       	adc	r31, r15
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	41 2f       	mov	r20, r17
    2c2c:	60 81       	ld	r22, Z
    2c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c30:	98 8d       	ldd	r25, Y+24	; 0x18
    2c32:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2c36:	2f ef       	ldi	r18, 0xFF	; 255
    2c38:	e2 1a       	sub	r14, r18
    2c3a:	f2 0a       	sbc	r15, r18
    2c3c:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    2c3e:	10 33       	cpi	r17, 0x30	; 48
    2c40:	79 f7       	brne	.-34     	; 0x2c20 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    2c42:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_Z14Batteriestatusv>
    2c46:	7e 01       	movw	r14, r28
    2c48:	32 e0       	ldi	r19, 0x02	; 2
    2c4a:	e3 0e       	add	r14, r19
    2c4c:	f1 1c       	adc	r15, r1
    2c4e:	28 2f       	mov	r18, r24
    2c50:	08 2e       	mov	r0, r24
    2c52:	00 0c       	add	r0, r0
    2c54:	33 0b       	sbc	r19, r19
    2c56:	3f 93       	push	r19
    2c58:	8f 93       	push	r24
    2c5a:	82 e3       	ldi	r24, 0x32	; 50
    2c5c:	91 e0       	ldi	r25, 0x01	; 1
    2c5e:	9f 93       	push	r25
    2c60:	8f 93       	push	r24
    2c62:	ff 92       	push	r15
    2c64:	ef 92       	push	r14
    2c66:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    2c6a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    2c6c:	15 e1       	ldi	r17, 0x15	; 21
    2c6e:	18 1b       	sub	r17, r24
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	15 31       	cpi	r17, 0x15	; 21
    2c7e:	08 f0       	brcs	.+2      	; 0x2c82 <_ZN13einstellungen4drawEv+0x82>
    2c80:	5b c1       	rjmp	.+694    	; 0x2f38 <_ZN13einstellungen4drawEv+0x338>
    2c82:	01 2f       	mov	r16, r17
    2c84:	00 0f       	add	r16, r16
    2c86:	01 0f       	add	r16, r17
    2c88:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    2c8a:	8e 89       	ldd	r24, Y+22	; 0x16
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e1 0f       	add	r30, r17
    2c90:	f1 1d       	adc	r31, r1
    2c92:	e8 0f       	add	r30, r24
    2c94:	f1 1d       	adc	r31, r1
    2c96:	73 97       	sbiw	r30, 0x13	; 19
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	40 2f       	mov	r20, r16
    2c9c:	60 81       	ld	r22, Z
    2c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca2:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    2ca6:	1f 5f       	subi	r17, 0xFF	; 255
    2ca8:	0a 5f       	subi	r16, 0xFA	; 250
    2caa:	15 31       	cpi	r17, 0x15	; 21
    2cac:	71 f7       	brne	.-36     	; 0x2c8a <_ZN13einstellungen4drawEv+0x8a>
    2cae:	44 c1       	rjmp	.+648    	; 0x2f38 <_ZN13einstellungen4drawEv+0x338>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    2cb0:	e9 8d       	ldd	r30, Y+25	; 0x19
    2cb2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2cb4:	ec 0d       	add	r30, r12
    2cb6:	fd 1d       	adc	r31, r13
    2cb8:	28 e3       	ldi	r18, 0x38	; 56
    2cba:	41 2f       	mov	r20, r17
    2cbc:	60 85       	ldd	r22, Z+8	; 0x08
    2cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc2:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2cc6:	8f ef       	ldi	r24, 0xFF	; 255
    2cc8:	c8 1a       	sub	r12, r24
    2cca:	d8 0a       	sbc	r13, r24
    2ccc:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    2cce:	10 38       	cpi	r17, 0x80	; 128
    2cd0:	79 f7       	brne	.-34     	; 0x2cb0 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    2cd2:	8e a1       	ldd	r24, Y+38	; 0x26
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	78 c0       	rjmp	.+240    	; 0x2dc8 <_ZN13einstellungen4drawEv+0x1c8>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    2cd8:	80 e1       	ldi	r24, 0x10	; 16
    2cda:	ec ee       	ldi	r30, 0xEC	; 236
    2cdc:	f1 e0       	ldi	r31, 0x01	; 1
    2cde:	d7 01       	movw	r26, r14
    2ce0:	01 90       	ld	r0, Z+
    2ce2:	0d 92       	st	X+, r0
    2ce4:	8a 95       	dec	r24
    2ce6:	e1 f7       	brne	.-8      	; 0x2ce0 <_ZN13einstellungen4drawEv+0xe0>
    2ce8:	8f e0       	ldi	r24, 0x0F	; 15
    2cea:	8e 8b       	std	Y+22, r24	; 0x16
    2cec:	0c e0       	ldi	r16, 0x0C	; 12
    2cee:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e1 0f       	add	r30, r17
    2cf4:	f1 1d       	adc	r31, r1
    2cf6:	20 e1       	ldi	r18, 0x10	; 16
    2cf8:	40 2f       	mov	r20, r16
    2cfa:	62 81       	ldd	r22, Z+2	; 0x02
    2cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2d00:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2d04:	1f 5f       	subi	r17, 0xFF	; 255
    2d06:	0a 5f       	subi	r16, 0xFA	; 250
    2d08:	8e 89       	ldd	r24, Y+22	; 0x16
    2d0a:	18 17       	cp	r17, r24
    2d0c:	88 f3       	brcs	.-30     	; 0x2cf0 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    2d0e:	8c e0       	ldi	r24, 0x0C	; 12
    2d10:	ec ef       	ldi	r30, 0xFC	; 252
    2d12:	f1 e0       	ldi	r31, 0x01	; 1
    2d14:	d7 01       	movw	r26, r14
    2d16:	01 90       	ld	r0, Z+
    2d18:	0d 92       	st	X+, r0
    2d1a:	8a 95       	dec	r24
    2d1c:	e1 f7       	brne	.-8      	; 0x2d16 <_ZN13einstellungen4drawEv+0x116>
    2d1e:	8b e0       	ldi	r24, 0x0B	; 11
    2d20:	8e 8b       	std	Y+22, r24	; 0x16
    2d22:	0c e0       	ldi	r16, 0x0C	; 12
    2d24:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    2d26:	fe 01       	movw	r30, r28
    2d28:	e1 0f       	add	r30, r17
    2d2a:	f1 1d       	adc	r31, r1
    2d2c:	28 e1       	ldi	r18, 0x18	; 24
    2d2e:	40 2f       	mov	r20, r16
    2d30:	62 81       	ldd	r22, Z+2	; 0x02
    2d32:	8f 89       	ldd	r24, Y+23	; 0x17
    2d34:	98 8d       	ldd	r25, Y+24	; 0x18
    2d36:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2d3a:	1f 5f       	subi	r17, 0xFF	; 255
    2d3c:	0a 5f       	subi	r16, 0xFA	; 250
    2d3e:	8e 89       	ldd	r24, Y+22	; 0x16
    2d40:	18 17       	cp	r17, r24
    2d42:	88 f3       	brcs	.-30     	; 0x2d26 <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    2d44:	8f e0       	ldi	r24, 0x0F	; 15
    2d46:	e8 e0       	ldi	r30, 0x08	; 8
    2d48:	f2 e0       	ldi	r31, 0x02	; 2
    2d4a:	d7 01       	movw	r26, r14
    2d4c:	01 90       	ld	r0, Z+
    2d4e:	0d 92       	st	X+, r0
    2d50:	8a 95       	dec	r24
    2d52:	e1 f7       	brne	.-8      	; 0x2d4c <_ZN13einstellungen4drawEv+0x14c>
    2d54:	8e e0       	ldi	r24, 0x0E	; 14
    2d56:	8e 8b       	std	Y+22, r24	; 0x16
    2d58:	0c e0       	ldi	r16, 0x0C	; 12
    2d5a:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e1 0f       	add	r30, r17
    2d60:	f1 1d       	adc	r31, r1
    2d62:	20 e2       	ldi	r18, 0x20	; 32
    2d64:	40 2f       	mov	r20, r16
    2d66:	62 81       	ldd	r22, Z+2	; 0x02
    2d68:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6c:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2d70:	1f 5f       	subi	r17, 0xFF	; 255
    2d72:	0a 5f       	subi	r16, 0xFA	; 250
    2d74:	8e 89       	ldd	r24, Y+22	; 0x16
    2d76:	18 17       	cp	r17, r24
    2d78:	88 f3       	brcs	.-30     	; 0x2d5c <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"soft Reset");
    2d7a:	8b e0       	ldi	r24, 0x0B	; 11
    2d7c:	e7 e1       	ldi	r30, 0x17	; 23
    2d7e:	f2 e0       	ldi	r31, 0x02	; 2
    2d80:	d7 01       	movw	r26, r14
    2d82:	01 90       	ld	r0, Z+
    2d84:	0d 92       	st	X+, r0
    2d86:	8a 95       	dec	r24
    2d88:	e1 f7       	brne	.-8      	; 0x2d82 <_ZN13einstellungen4drawEv+0x182>
    2d8a:	8a e0       	ldi	r24, 0x0A	; 10
    2d8c:	8e 8b       	std	Y+22, r24	; 0x16
    2d8e:	0c e0       	ldi	r16, 0x0C	; 12
    2d90:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    2d92:	fe 01       	movw	r30, r28
    2d94:	e1 0f       	add	r30, r17
    2d96:	f1 1d       	adc	r31, r1
    2d98:	28 e2       	ldi	r18, 0x28	; 40
    2d9a:	40 2f       	mov	r20, r16
    2d9c:	62 81       	ldd	r22, Z+2	; 0x02
    2d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2da0:	98 8d       	ldd	r25, Y+24	; 0x18
    2da2:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2da6:	1f 5f       	subi	r17, 0xFF	; 255
    2da8:	0a 5f       	subi	r16, 0xFA	; 250
    2daa:	8e 89       	ldd	r24, Y+22	; 0x16
    2dac:	18 17       	cp	r17, r24
    2dae:	88 f3       	brcs	.-30     	; 0x2d92 <_ZN13einstellungen4drawEv+0x192>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    2db0:	2d a1       	ldd	r18, Y+37	; 0x25
    2db2:	22 0f       	add	r18, r18
    2db4:	22 0f       	add	r18, r18
    2db6:	22 0f       	add	r18, r18
    2db8:	20 5f       	subi	r18, 0xF0	; 240
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	6e e3       	ldi	r22, 0x3E	; 62
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2dc6:	b3 c0       	rjmp	.+358    	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
		}
		else if (posy==0 && posx==1)
    2dc8:	9d a1       	ldd	r25, Y+37	; 0x25
    2dca:	91 11       	cpse	r25, r1
    2dcc:	06 c0       	rjmp	.+12     	; 0x2dda <_ZN13einstellungen4drawEv+0x1da>
    2dce:	81 30       	cpi	r24, 0x01	; 1
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <_ZN13einstellungen4drawEv+0x1d4>
    2dd2:	ad c0       	rjmp	.+346    	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    2dd4:	80 db       	rcall	.-2304   	; 0x24d6 <_Z13uhreinstellenv>
			posx=0;
    2dd6:	1e a2       	std	Y+38, r1	; 0x26
    2dd8:	aa c0       	rjmp	.+340    	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
		}
		else if (posy==1 && posx==1)
    2dda:	91 30       	cpi	r25, 0x01	; 1
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <_ZN13einstellungen4drawEv+0x1e0>
    2dde:	60 c0       	rjmp	.+192    	; 0x2ea0 <_ZN13einstellungen4drawEv+0x2a0>
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <_ZN13einstellungen4drawEv+0x1e6>
    2de4:	a4 c0       	rjmp	.+328    	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    2de6:	85 e1       	ldi	r24, 0x15	; 21
    2de8:	e2 e2       	ldi	r30, 0x22	; 34
    2dea:	f2 e0       	ldi	r31, 0x02	; 2
    2dec:	d7 01       	movw	r26, r14
    2dee:	01 90       	ld	r0, Z+
    2df0:	0d 92       	st	X+, r0
    2df2:	8a 95       	dec	r24
    2df4:	e1 f7       	brne	.-8      	; 0x2dee <_ZN13einstellungen4drawEv+0x1ee>
    2df6:	84 e1       	ldi	r24, 0x14	; 20
    2df8:	8e 8b       	std	Y+22, r24	; 0x16
    2dfa:	00 e0       	ldi	r16, 0x00	; 0
    2dfc:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e1 0f       	add	r30, r17
    2e02:	f1 1d       	adc	r31, r1
    2e04:	20 e1       	ldi	r18, 0x10	; 16
    2e06:	40 2f       	mov	r20, r16
    2e08:	62 81       	ldd	r22, Z+2	; 0x02
    2e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0e:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2e12:	1f 5f       	subi	r17, 0xFF	; 255
    2e14:	0a 5f       	subi	r16, 0xFA	; 250
    2e16:	8e 89       	ldd	r24, Y+22	; 0x16
    2e18:	18 17       	cp	r17, r24
    2e1a:	88 f3       	brcs	.-30     	; 0x2dfe <_ZN13einstellungen4drawEv+0x1fe>
			buffersize=sprintf(buffer,"* fuer start");
    2e1c:	8d e0       	ldi	r24, 0x0D	; 13
    2e1e:	e7 e3       	ldi	r30, 0x37	; 55
    2e20:	f2 e0       	ldi	r31, 0x02	; 2
    2e22:	d7 01       	movw	r26, r14
    2e24:	01 90       	ld	r0, Z+
    2e26:	0d 92       	st	X+, r0
    2e28:	8a 95       	dec	r24
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <_ZN13einstellungen4drawEv+0x224>
    2e2c:	8c e0       	ldi	r24, 0x0C	; 12
    2e2e:	8e 8b       	std	Y+22, r24	; 0x16
    2e30:	00 e0       	ldi	r16, 0x00	; 0
    2e32:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    2e34:	fe 01       	movw	r30, r28
    2e36:	e1 0f       	add	r30, r17
    2e38:	f1 1d       	adc	r31, r1
    2e3a:	28 e1       	ldi	r18, 0x18	; 24
    2e3c:	40 2f       	mov	r20, r16
    2e3e:	62 81       	ldd	r22, Z+2	; 0x02
    2e40:	8f 89       	ldd	r24, Y+23	; 0x17
    2e42:	98 8d       	ldd	r25, Y+24	; 0x18
    2e44:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2e48:	1f 5f       	subi	r17, 0xFF	; 255
    2e4a:	0a 5f       	subi	r16, 0xFA	; 250
    2e4c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e4e:	18 17       	cp	r17, r24
    2e50:	88 f3       	brcs	.-30     	; 0x2e34 <_ZN13einstellungen4drawEv+0x234>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    2e52:	1f 92       	push	r1
    2e54:	85 e0       	ldi	r24, 0x05	; 5
    2e56:	8f 93       	push	r24
    2e58:	84 e4       	ldi	r24, 0x44	; 68
    2e5a:	92 e0       	ldi	r25, 0x02	; 2
    2e5c:	9f 93       	push	r25
    2e5e:	8f 93       	push	r24
    2e60:	ff 92       	push	r15
    2e62:	ef 92       	push	r14
    2e64:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    2e68:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	88 23       	and	r24, r24
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <_ZN13einstellungen4drawEv+0x27c>
    2e7a:	59 c0       	rjmp	.+178    	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
    2e7c:	00 e0       	ldi	r16, 0x00	; 0
    2e7e:	10 e0       	ldi	r17, 0x00	; 0
    2e80:	fe 01       	movw	r30, r28
    2e82:	e1 0f       	add	r30, r17
    2e84:	f1 1d       	adc	r31, r1
    2e86:	28 e2       	ldi	r18, 0x28	; 40
    2e88:	40 2f       	mov	r20, r16
    2e8a:	62 81       	ldd	r22, Z+2	; 0x02
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
    2e94:	1f 5f       	subi	r17, 0xFF	; 255
    2e96:	0a 5f       	subi	r16, 0xFA	; 250
    2e98:	8e 89       	ldd	r24, Y+22	; 0x16
    2e9a:	18 17       	cp	r17, r24
    2e9c:	88 f3       	brcs	.-30     	; 0x2e80 <_ZN13einstellungen4drawEv+0x280>
    2e9e:	47 c0       	rjmp	.+142    	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    2ea0:	92 30       	cpi	r25, 0x02	; 2
    2ea2:	b1 f5       	brne	.+108    	; 0x2f10 <_ZN13einstellungen4drawEv+0x310>
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <_ZN13einstellungen4drawEv+0x2aa>
    2ea8:	42 c0       	rjmp	.+132    	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    2eaa:	80 e4       	ldi	r24, 0x40	; 64
    2eac:	8f 93       	push	r24
    2eae:	8f 93       	push	r24
    2eb0:	83 ea       	ldi	r24, 0xA3	; 163
    2eb2:	8f 93       	push	r24
    2eb4:	87 ed       	ldi	r24, 0xD7	; 215
    2eb6:	8f 93       	push	r24
    2eb8:	84 e2       	ldi	r24, 0x24	; 36
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	9f 93       	push	r25
    2ebe:	8f 93       	push	r24
    2ec0:	ff 92       	push	r15
    2ec2:	ef 92       	push	r14
    2ec4:	0e 94 1b 23 	call	0x4636	; 0x4636 <sprintf>
    2ec8:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    2eca:	2d b7       	in	r18, 0x3d	; 61
    2ecc:	3e b7       	in	r19, 0x3e	; 62
    2ece:	28 5f       	subi	r18, 0xF8	; 248
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	3e bf       	out	0x3e, r19	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	2d bf       	out	0x3d, r18	; 61
    2edc:	88 23       	and	r24, r24
    2ede:	39 f1       	breq	.+78     	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
    2ee0:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    2ee2:	21 2f       	mov	r18, r17
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	c9 01       	movw	r24, r18
    2ee8:	02 96       	adiw	r24, 0x02	; 2
    2eea:	48 2f       	mov	r20, r24
    2eec:	44 0f       	add	r20, r20
    2eee:	84 0f       	add	r24, r20
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	44 0f       	add	r20, r20
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e2 0f       	add	r30, r18
    2ef8:	f3 1f       	adc	r31, r19
    2efa:	2c e1       	ldi	r18, 0x1C	; 28
    2efc:	62 81       	ldd	r22, Z+2	; 0x02
    2efe:	8f 89       	ldd	r24, Y+23	; 0x17
    2f00:	98 8d       	ldd	r25, Y+24	; 0x18
    2f02:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    2f06:	1f 5f       	subi	r17, 0xFF	; 255
    2f08:	8e 89       	ldd	r24, Y+22	; 0x16
    2f0a:	18 17       	cp	r17, r24
    2f0c:	50 f3       	brcs	.-44     	; 0x2ee2 <_ZN13einstellungen4drawEv+0x2e2>
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		else if (posy==3 && posx==1)
    2f10:	93 30       	cpi	r25, 0x03	; 3
    2f12:	69 f4       	brne	.+26     	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	59 f4       	brne	.+22     	; 0x2f2e <_ZN13einstellungen4drawEv+0x32e>
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    2f18:	98 e0       	ldi	r25, 0x08	; 8
    2f1a:	88 e1       	ldi	r24, 0x18	; 24
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	a8 95       	wdr
    2f22:	80 93 60 00 	sts	0x0060, r24
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	90 93 60 00 	sts	0x0060, r25
    2f2c:	ff cf       	rjmp	.-2      	; 0x2f2c <_ZN13einstellungen4drawEv+0x32c>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    2f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f30:	98 8d       	ldd	r25, Y+24	; 0x18
    2f32:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN7Display9sendFrameEv>
    2f36:	04 c0       	rjmp	.+8      	; 0x2f40 <_ZN13einstellungen4drawEv+0x340>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    2f38:	10 e5       	ldi	r17, 0x50	; 80
    2f3a:	c1 2c       	mov	r12, r1
    2f3c:	d1 2c       	mov	r13, r1
    2f3e:	b8 ce       	rjmp	.-656    	; 0x2cb0 <_ZN13einstellungen4drawEv+0xb0>
		else if (posy==3 && posx==1)
		{
			soft_reset();
		}
		send();	
	}
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	ff 90       	pop	r15
    2f4a:	ef 90       	pop	r14
    2f4c:	df 90       	pop	r13
    2f4e:	cf 90       	pop	r12
    2f50:	08 95       	ret

00002f52 <_GLOBAL__sub_I__Z8wdt_initv>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    2f52:	87 eb       	ldi	r24, 0xB7	; 183
    2f54:	97 e0       	ldi	r25, 0x07	; 7
    2f56:	c3 d1       	rcall	.+902    	; 0x32de <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    2f58:	86 eb       	ldi	r24, 0xB6	; 182
    2f5a:	93 e0       	ldi	r25, 0x03	; 3
    2f5c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    2f60:	8a ea       	ldi	r24, 0xAA	; 170
    2f62:	93 e0       	ldi	r25, 0x03	; 3
    2f64:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN9InterfaceC1Ev>

#include "SOUND.h"
SOUND Lautsprecher;
    2f68:	88 ea       	ldi	r24, 0xA8	; 168
    2f6a:	93 e0       	ldi	r25, 0x03	; 3
    2f6c:	aa d2       	rcall	.+1364   	; 0x34c2 <_ZN5SOUNDC1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;
    2f6e:	8f eb       	ldi	r24, 0xBF	; 191
    2f70:	92 e0       	ldi	r25, 0x02	; 2
    2f72:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN7LSM303DC1Ev>

#include "Kompass.h"
Kompass kompass;
    2f76:	86 ea       	ldi	r24, 0xA6	; 166
    2f78:	92 e0       	ldi	r25, 0x02	; 2
    2f7a:	0e 94 a9 08 	call	0x1152	; 0x1152 <_ZN7KompassC1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	62 e4       	ldi	r22, 0x42	; 66
    2f82:	80 ea       	ldi	r24, 0xA0	; 160
    2f84:	92 e0       	ldi	r25, 0x02	; 2
    2f86:	33 d0       	rcall	.+102    	; 0x2fee <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    2f88:	42 e0       	ldi	r20, 0x02	; 2
    2f8a:	62 e4       	ldi	r22, 0x42	; 66
    2f8c:	8e e9       	ldi	r24, 0x9E	; 158
    2f8e:	92 e0       	ldi	r25, 0x02	; 2
    2f90:	2e d0       	rcall	.+92     	; 0x2fee <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    2f92:	47 e0       	ldi	r20, 0x07	; 7
    2f94:	64 e4       	ldi	r22, 0x44	; 68
    2f96:	8c e9       	ldi	r24, 0x9C	; 156
    2f98:	92 e0       	ldi	r25, 0x02	; 2
    2f9a:	29 d0       	rcall	.+82     	; 0x2fee <_ZN6OutputC1Ehh>
Output Sound('B',PORTB3);
    2f9c:	43 e0       	ldi	r20, 0x03	; 3
    2f9e:	62 e4       	ldi	r22, 0x42	; 66
    2fa0:	8a e9       	ldi	r24, 0x9A	; 154
    2fa2:	92 e0       	ldi	r25, 0x02	; 2
    2fa4:	24 c0       	rjmp	.+72     	; 0x2fee <_ZN6OutputC1Ehh>
    2fa6:	08 95       	ret

00002fa8 <_GLOBAL__sub_D__Z8wdt_initv>:
    2fa8:	8a e9       	ldi	r24, 0x9A	; 154
    2faa:	92 e0       	ldi	r25, 0x02	; 2
    2fac:	5a d0       	rcall	.+180    	; 0x3062 <_ZN6OutputD1Ev>
#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
Output IRLED('D',PORTD7);
    2fae:	8c e9       	ldi	r24, 0x9C	; 156
    2fb0:	92 e0       	ldi	r25, 0x02	; 2
    2fb2:	57 d0       	rcall	.+174    	; 0x3062 <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    2fb4:	8e e9       	ldi	r24, 0x9E	; 158
    2fb6:	92 e0       	ldi	r25, 0x02	; 2
    2fb8:	54 d0       	rcall	.+168    	; 0x3062 <_ZN6OutputD1Ev>
Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    2fba:	80 ea       	ldi	r24, 0xA0	; 160
    2fbc:	92 e0       	ldi	r25, 0x02	; 2
    2fbe:	51 d0       	rcall	.+162    	; 0x3062 <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "Kompass.h"
Kompass kompass;
    2fc0:	86 ea       	ldi	r24, 0xA6	; 166
    2fc2:	92 e0       	ldi	r25, 0x02	; 2
    2fc4:	0e 94 8c 08 	call	0x1118	; 0x1118 <_ZN7KompassD1Ev>

#include "SOUND.h"
SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    2fc8:	8f eb       	ldi	r24, 0xBF	; 191
    2fca:	92 e0       	ldi	r25, 0x02	; 2
    2fcc:	0e 94 c9 08 	call	0x1192	; 0x1192 <_ZN7LSM303DD1Ev>

#include "Interface.h"
Interface Tastatur;

#include "SOUND.h"
SOUND Lautsprecher;
    2fd0:	88 ea       	ldi	r24, 0xA8	; 168
    2fd2:	93 e0       	ldi	r25, 0x03	; 3
    2fd4:	4c d2       	rcall	.+1176   	; 0x346e <_ZN5SOUNDD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    2fd6:	8a ea       	ldi	r24, 0xAA	; 170
    2fd8:	93 e0       	ldi	r25, 0x03	; 3
    2fda:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    2fde:	86 eb       	ldi	r24, 0xB6	; 182
    2fe0:	93 e0       	ldi	r25, 0x03	; 3
    2fe2:	0e 94 01 03 	call	0x602	; 0x602 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    2fe6:	87 eb       	ldi	r24, 0xB7	; 183
    2fe8:	97 e0       	ldi	r25, 0x07	; 7
    2fea:	f5 c0       	rjmp	.+490    	; 0x31d6 <_ZN3RTCD1Ev>
    2fec:	08 95       	ret

00002fee <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    2fee:	fc 01       	movw	r30, r24
    2ff0:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    2ff2:	60 83       	st	Z, r22
	switch (Portpraefix)
    2ff4:	62 34       	cpi	r22, 0x42	; 66
    2ff6:	a1 f0       	breq	.+40     	; 0x3020 <_ZN6OutputC1Ehh+0x32>
    2ff8:	18 f4       	brcc	.+6      	; 0x3000 <_ZN6OutputC1Ehh+0x12>
    2ffa:	61 34       	cpi	r22, 0x41	; 65
    2ffc:	31 f0       	breq	.+12     	; 0x300a <_ZN6OutputC1Ehh+0x1c>
    2ffe:	08 95       	ret
    3000:	63 34       	cpi	r22, 0x43	; 67
    3002:	c9 f0       	breq	.+50     	; 0x3036 <_ZN6OutputC1Ehh+0x48>
    3004:	64 34       	cpi	r22, 0x44	; 68
    3006:	11 f1       	breq	.+68     	; 0x304c <_ZN6OutputC1Ehh+0x5e>
    3008:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    300a:	21 b1       	in	r18, 0x01	; 1
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <_ZN6OutputC1Ehh+0x28>
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	4a 95       	dec	r20
    3018:	e2 f7       	brpl	.-8      	; 0x3012 <_ZN6OutputC1Ehh+0x24>
    301a:	82 2b       	or	r24, r18
    301c:	81 b9       	out	0x01, r24	; 1
			break;
    301e:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    3020:	24 b1       	in	r18, 0x04	; 4
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	02 c0       	rjmp	.+4      	; 0x302c <_ZN6OutputC1Ehh+0x3e>
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	4a 95       	dec	r20
    302e:	e2 f7       	brpl	.-8      	; 0x3028 <_ZN6OutputC1Ehh+0x3a>
    3030:	82 2b       	or	r24, r18
    3032:	84 b9       	out	0x04, r24	; 4
			break;
    3034:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    3036:	27 b1       	in	r18, 0x07	; 7
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <_ZN6OutputC1Ehh+0x54>
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	4a 95       	dec	r20
    3044:	e2 f7       	brpl	.-8      	; 0x303e <_ZN6OutputC1Ehh+0x50>
    3046:	82 2b       	or	r24, r18
    3048:	87 b9       	out	0x07, r24	; 7
			break;
    304a:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    304c:	2a b1       	in	r18, 0x0a	; 10
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <_ZN6OutputC1Ehh+0x6a>
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	4a 95       	dec	r20
    305a:	e2 f7       	brpl	.-8      	; 0x3054 <_ZN6OutputC1Ehh+0x66>
    305c:	82 2b       	or	r24, r18
    305e:	8a b9       	out	0x0a, r24	; 10
    3060:	08 95       	ret

00003062 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    3062:	08 95       	ret

00003064 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    3064:	fc 01       	movw	r30, r24
	switch (Port)
    3066:	90 81       	ld	r25, Z
    3068:	92 34       	cpi	r25, 0x42	; 66
    306a:	a9 f0       	breq	.+42     	; 0x3096 <_ZN6Output2onEv+0x32>
    306c:	18 f4       	brcc	.+6      	; 0x3074 <_ZN6Output2onEv+0x10>
    306e:	91 34       	cpi	r25, 0x41	; 65
    3070:	31 f0       	breq	.+12     	; 0x307e <_ZN6Output2onEv+0x1a>
    3072:	08 95       	ret
    3074:	93 34       	cpi	r25, 0x43	; 67
    3076:	d9 f0       	breq	.+54     	; 0x30ae <_ZN6Output2onEv+0x4a>
    3078:	94 34       	cpi	r25, 0x44	; 68
    307a:	29 f1       	breq	.+74     	; 0x30c6 <_ZN6Output2onEv+0x62>
    307c:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    307e:	22 b1       	in	r18, 0x02	; 2
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	01 80       	ldd	r0, Z+1	; 0x01
    3086:	02 c0       	rjmp	.+4      	; 0x308c <_ZN6Output2onEv+0x28>
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	0a 94       	dec	r0
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <_ZN6Output2onEv+0x24>
    3090:	82 2b       	or	r24, r18
    3092:	82 b9       	out	0x02, r24	; 2
			break;
    3094:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    3096:	25 b1       	in	r18, 0x05	; 5
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	01 80       	ldd	r0, Z+1	; 0x01
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <_ZN6Output2onEv+0x40>
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	0a 94       	dec	r0
    30a6:	e2 f7       	brpl	.-8      	; 0x30a0 <_ZN6Output2onEv+0x3c>
    30a8:	82 2b       	or	r24, r18
    30aa:	85 b9       	out	0x05, r24	; 5
			break;
    30ac:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    30ae:	28 b1       	in	r18, 0x08	; 8
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	01 80       	ldd	r0, Z+1	; 0x01
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <_ZN6Output2onEv+0x58>
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	0a 94       	dec	r0
    30be:	e2 f7       	brpl	.-8      	; 0x30b8 <_ZN6Output2onEv+0x54>
    30c0:	82 2b       	or	r24, r18
    30c2:	88 b9       	out	0x08, r24	; 8
			break;
    30c4:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    30c6:	2b b1       	in	r18, 0x0b	; 11
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	01 80       	ldd	r0, Z+1	; 0x01
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <_ZN6Output2onEv+0x70>
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	0a 94       	dec	r0
    30d6:	e2 f7       	brpl	.-8      	; 0x30d0 <_ZN6Output2onEv+0x6c>
    30d8:	82 2b       	or	r24, r18
    30da:	8b b9       	out	0x0b, r24	; 11
    30dc:	08 95       	ret

000030de <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    30de:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    30e0:	90 81       	ld	r25, Z
    30e2:	92 34       	cpi	r25, 0x42	; 66
    30e4:	a1 f0       	breq	.+40     	; 0x310e <_ZN6Output4isonEv+0x30>
    30e6:	18 f4       	brcc	.+6      	; 0x30ee <_ZN6Output4isonEv+0x10>
    30e8:	91 34       	cpi	r25, 0x41	; 65
    30ea:	31 f0       	breq	.+12     	; 0x30f8 <_ZN6Output4isonEv+0x1a>
    30ec:	31 c0       	rjmp	.+98     	; 0x3150 <_ZN6Output4isonEv+0x72>
    30ee:	93 34       	cpi	r25, 0x43	; 67
    30f0:	c9 f0       	breq	.+50     	; 0x3124 <_ZN6Output4isonEv+0x46>
    30f2:	94 34       	cpi	r25, 0x44	; 68
    30f4:	11 f1       	breq	.+68     	; 0x313a <_ZN6Output4isonEv+0x5c>
    30f6:	2c c0       	rjmp	.+88     	; 0x3150 <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    30f8:	22 b1       	in	r18, 0x02	; 2
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	c9 01       	movw	r24, r18
    30fe:	01 80       	ldd	r0, Z+1	; 0x01
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <_ZN6Output4isonEv+0x28>
    3102:	95 95       	asr	r25
    3104:	87 95       	ror	r24
    3106:	0a 94       	dec	r0
    3108:	e2 f7       	brpl	.-8      	; 0x3102 <_ZN6Output4isonEv+0x24>
    310a:	81 70       	andi	r24, 0x01	; 1
    310c:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    310e:	25 b1       	in	r18, 0x05	; 5
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	c9 01       	movw	r24, r18
    3114:	01 80       	ldd	r0, Z+1	; 0x01
    3116:	02 c0       	rjmp	.+4      	; 0x311c <_ZN6Output4isonEv+0x3e>
    3118:	95 95       	asr	r25
    311a:	87 95       	ror	r24
    311c:	0a 94       	dec	r0
    311e:	e2 f7       	brpl	.-8      	; 0x3118 <_ZN6Output4isonEv+0x3a>
    3120:	81 70       	andi	r24, 0x01	; 1
    3122:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    3124:	28 b1       	in	r18, 0x08	; 8
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	c9 01       	movw	r24, r18
    312a:	01 80       	ldd	r0, Z+1	; 0x01
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <_ZN6Output4isonEv+0x54>
    312e:	95 95       	asr	r25
    3130:	87 95       	ror	r24
    3132:	0a 94       	dec	r0
    3134:	e2 f7       	brpl	.-8      	; 0x312e <_ZN6Output4isonEv+0x50>
    3136:	81 70       	andi	r24, 0x01	; 1
    3138:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    313a:	2b b1       	in	r18, 0x0b	; 11
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	c9 01       	movw	r24, r18
    3140:	01 80       	ldd	r0, Z+1	; 0x01
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <_ZN6Output4isonEv+0x6a>
    3144:	95 95       	asr	r25
    3146:	87 95       	ror	r24
    3148:	0a 94       	dec	r0
    314a:	e2 f7       	brpl	.-8      	; 0x3144 <_ZN6Output4isonEv+0x66>
    314c:	81 70       	andi	r24, 0x01	; 1
    314e:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    3150:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    3152:	08 95       	ret

00003154 <_ZN6Output3offEv>:

void Output::off(){
    3154:	fc 01       	movw	r30, r24
	switch (Port)
    3156:	90 81       	ld	r25, Z
    3158:	92 34       	cpi	r25, 0x42	; 66
    315a:	b1 f0       	breq	.+44     	; 0x3188 <_ZN6Output3offEv+0x34>
    315c:	18 f4       	brcc	.+6      	; 0x3164 <_ZN6Output3offEv+0x10>
    315e:	91 34       	cpi	r25, 0x41	; 65
    3160:	31 f0       	breq	.+12     	; 0x316e <_ZN6Output3offEv+0x1a>
    3162:	08 95       	ret
    3164:	93 34       	cpi	r25, 0x43	; 67
    3166:	e9 f0       	breq	.+58     	; 0x31a2 <_ZN6Output3offEv+0x4e>
    3168:	94 34       	cpi	r25, 0x44	; 68
    316a:	41 f1       	breq	.+80     	; 0x31bc <_ZN6Output3offEv+0x68>
    316c:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    316e:	22 b1       	in	r18, 0x02	; 2
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	01 80       	ldd	r0, Z+1	; 0x01
    3176:	02 c0       	rjmp	.+4      	; 0x317c <_ZN6Output3offEv+0x28>
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	0a 94       	dec	r0
    317e:	e2 f7       	brpl	.-8      	; 0x3178 <_ZN6Output3offEv+0x24>
    3180:	80 95       	com	r24
    3182:	82 23       	and	r24, r18
    3184:	82 b9       	out	0x02, r24	; 2
			break;
    3186:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    3188:	25 b1       	in	r18, 0x05	; 5
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	01 80       	ldd	r0, Z+1	; 0x01
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <_ZN6Output3offEv+0x42>
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	0a 94       	dec	r0
    3198:	e2 f7       	brpl	.-8      	; 0x3192 <_ZN6Output3offEv+0x3e>
    319a:	80 95       	com	r24
    319c:	82 23       	and	r24, r18
    319e:	85 b9       	out	0x05, r24	; 5
			break;
    31a0:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    31a2:	28 b1       	in	r18, 0x08	; 8
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	01 80       	ldd	r0, Z+1	; 0x01
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <_ZN6Output3offEv+0x5c>
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	0a 94       	dec	r0
    31b2:	e2 f7       	brpl	.-8      	; 0x31ac <_ZN6Output3offEv+0x58>
    31b4:	80 95       	com	r24
    31b6:	82 23       	and	r24, r18
    31b8:	88 b9       	out	0x08, r24	; 8
			break;
    31ba:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    31bc:	2b b1       	in	r18, 0x0b	; 11
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	01 80       	ldd	r0, Z+1	; 0x01
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <_ZN6Output3offEv+0x76>
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	0a 94       	dec	r0
    31cc:	e2 f7       	brpl	.-8      	; 0x31c6 <_ZN6Output3offEv+0x72>
    31ce:	80 95       	com	r24
    31d0:	82 23       	and	r24, r18
    31d2:	8b b9       	out	0x0b, r24	; 11
    31d4:	08 95       	ret

000031d6 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    31d6:	08 95       	ret

000031d8 <_ZN3RTC6WeckerEv>:
    31d8:	fc 01       	movw	r30, r24
    31da:	80 8d       	ldd	r24, Z+24	; 0x18
    31dc:	83 ff       	sbrs	r24, 3
    31de:	0c c0       	rjmp	.+24     	; 0x31f8 <_ZN3RTC6WeckerEv+0x20>
    31e0:	84 fd       	sbrc	r24, 4
    31e2:	0a c0       	rjmp	.+20     	; 0x31f8 <_ZN3RTC6WeckerEv+0x20>
    31e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    31e6:	90 89       	ldd	r25, Z+16	; 0x10
    31e8:	29 13       	cpse	r18, r25
    31ea:	06 c0       	rjmp	.+12     	; 0x31f8 <_ZN3RTC6WeckerEv+0x20>
    31ec:	21 8d       	ldd	r18, Z+25	; 0x19
    31ee:	91 89       	ldd	r25, Z+17	; 0x11
    31f0:	29 13       	cpse	r18, r25
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <_ZN3RTC6WeckerEv+0x20>
    31f4:	80 61       	ori	r24, 0x10	; 16
    31f6:	80 8f       	std	Z+24, r24	; 0x18
    31f8:	08 95       	ret

000031fa <_ZN3RTC14ausgabezeitneuEv>:
    31fa:	fc 01       	movw	r30, r24
    31fc:	20 89       	ldd	r18, Z+16	; 0x10
    31fe:	9d ec       	ldi	r25, 0xCD	; 205
    3200:	29 9f       	mul	r18, r25
    3202:	81 2d       	mov	r24, r1
    3204:	11 24       	eor	r1, r1
    3206:	86 95       	lsr	r24
    3208:	86 95       	lsr	r24
    320a:	86 95       	lsr	r24
    320c:	30 e3       	ldi	r19, 0x30	; 48
    320e:	38 0f       	add	r19, r24
    3210:	30 83       	st	Z, r19
    3212:	88 0f       	add	r24, r24
    3214:	38 2f       	mov	r19, r24
    3216:	33 0f       	add	r19, r19
    3218:	33 0f       	add	r19, r19
    321a:	83 0f       	add	r24, r19
    321c:	28 1b       	sub	r18, r24
    321e:	20 5d       	subi	r18, 0xD0	; 208
    3220:	21 83       	std	Z+1, r18	; 0x01
    3222:	21 89       	ldd	r18, Z+17	; 0x11
    3224:	29 9f       	mul	r18, r25
    3226:	81 2d       	mov	r24, r1
    3228:	11 24       	eor	r1, r1
    322a:	86 95       	lsr	r24
    322c:	86 95       	lsr	r24
    322e:	86 95       	lsr	r24
    3230:	30 e3       	ldi	r19, 0x30	; 48
    3232:	38 0f       	add	r19, r24
    3234:	33 83       	std	Z+3, r19	; 0x03
    3236:	88 0f       	add	r24, r24
    3238:	38 2f       	mov	r19, r24
    323a:	33 0f       	add	r19, r19
    323c:	33 0f       	add	r19, r19
    323e:	83 0f       	add	r24, r19
    3240:	28 1b       	sub	r18, r24
    3242:	20 5d       	subi	r18, 0xD0	; 208
    3244:	24 83       	std	Z+4, r18	; 0x04
    3246:	82 89       	ldd	r24, Z+18	; 0x12
    3248:	89 9f       	mul	r24, r25
    324a:	91 2d       	mov	r25, r1
    324c:	11 24       	eor	r1, r1
    324e:	96 95       	lsr	r25
    3250:	96 95       	lsr	r25
    3252:	96 95       	lsr	r25
    3254:	20 e3       	ldi	r18, 0x30	; 48
    3256:	29 0f       	add	r18, r25
    3258:	26 83       	std	Z+6, r18	; 0x06
    325a:	99 0f       	add	r25, r25
    325c:	29 2f       	mov	r18, r25
    325e:	22 0f       	add	r18, r18
    3260:	22 0f       	add	r18, r18
    3262:	92 0f       	add	r25, r18
    3264:	89 1b       	sub	r24, r25
    3266:	80 5d       	subi	r24, 0xD0	; 208
    3268:	87 83       	std	Z+7, r24	; 0x07
    326a:	08 95       	ret

0000326c <_ZN3RTC15ausgabedatumneuEv>:
    326c:	fc 01       	movw	r30, r24
    326e:	24 89       	ldd	r18, Z+20	; 0x14
    3270:	9d ec       	ldi	r25, 0xCD	; 205
    3272:	29 9f       	mul	r18, r25
    3274:	81 2d       	mov	r24, r1
    3276:	11 24       	eor	r1, r1
    3278:	86 95       	lsr	r24
    327a:	86 95       	lsr	r24
    327c:	86 95       	lsr	r24
    327e:	30 e3       	ldi	r19, 0x30	; 48
    3280:	38 0f       	add	r19, r24
    3282:	30 87       	std	Z+8, r19	; 0x08
    3284:	88 0f       	add	r24, r24
    3286:	38 2f       	mov	r19, r24
    3288:	33 0f       	add	r19, r19
    328a:	33 0f       	add	r19, r19
    328c:	83 0f       	add	r24, r19
    328e:	28 1b       	sub	r18, r24
    3290:	20 5d       	subi	r18, 0xD0	; 208
    3292:	21 87       	std	Z+9, r18	; 0x09
    3294:	26 89       	ldd	r18, Z+22	; 0x16
    3296:	29 9f       	mul	r18, r25
    3298:	81 2d       	mov	r24, r1
    329a:	11 24       	eor	r1, r1
    329c:	86 95       	lsr	r24
    329e:	86 95       	lsr	r24
    32a0:	86 95       	lsr	r24
    32a2:	30 e3       	ldi	r19, 0x30	; 48
    32a4:	38 0f       	add	r19, r24
    32a6:	33 87       	std	Z+11, r19	; 0x0b
    32a8:	88 0f       	add	r24, r24
    32aa:	38 2f       	mov	r19, r24
    32ac:	33 0f       	add	r19, r19
    32ae:	33 0f       	add	r19, r19
    32b0:	83 0f       	add	r24, r19
    32b2:	28 1b       	sub	r18, r24
    32b4:	20 5d       	subi	r18, 0xD0	; 208
    32b6:	24 87       	std	Z+12, r18	; 0x0c
    32b8:	87 89       	ldd	r24, Z+23	; 0x17
    32ba:	89 9f       	mul	r24, r25
    32bc:	91 2d       	mov	r25, r1
    32be:	11 24       	eor	r1, r1
    32c0:	96 95       	lsr	r25
    32c2:	96 95       	lsr	r25
    32c4:	96 95       	lsr	r25
    32c6:	20 e3       	ldi	r18, 0x30	; 48
    32c8:	29 0f       	add	r18, r25
    32ca:	26 87       	std	Z+14, r18	; 0x0e
    32cc:	99 0f       	add	r25, r25
    32ce:	29 2f       	mov	r18, r25
    32d0:	22 0f       	add	r18, r18
    32d2:	22 0f       	add	r18, r18
    32d4:	92 0f       	add	r25, r18
    32d6:	89 1b       	sub	r24, r25
    32d8:	80 5d       	subi	r24, 0xD0	; 208
    32da:	87 87       	std	Z+15, r24	; 0x0f
    32dc:	08 95       	ret

000032de <_ZN3RTCC1Ev>:
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	ec 01       	movw	r28, r24
    32e4:	1a 8a       	std	Y+18, r1	; 0x12
    32e6:	1b 8a       	std	Y+19, r1	; 0x13
    32e8:	19 8a       	std	Y+17, r1	; 0x11
    32ea:	18 8a       	std	Y+16, r1	; 0x10
    32ec:	1c 8a       	std	Y+20, r1	; 0x14
    32ee:	1e 8a       	std	Y+22, r1	; 0x16
    32f0:	1f 8a       	std	Y+23, r1	; 0x17
    32f2:	1d 8a       	std	Y+21, r1	; 0x15
    32f4:	88 e2       	ldi	r24, 0x28	; 40
    32f6:	89 8f       	std	Y+25, r24	; 0x19
    32f8:	8a e0       	ldi	r24, 0x0A	; 10
    32fa:	8a 8f       	std	Y+26, r24	; 0x1a
    32fc:	1c 8e       	std	Y+28, r1	; 0x1c
    32fe:	1b 8e       	std	Y+27, r1	; 0x1b
    3300:	1e 8e       	std	Y+30, r1	; 0x1e
    3302:	1d 8e       	std	Y+29, r1	; 0x1d
    3304:	fe 01       	movw	r30, r28
    3306:	ce 01       	movw	r24, r28
    3308:	08 96       	adiw	r24, 0x08	; 8
    330a:	dc 01       	movw	r26, r24
    330c:	11 92       	st	Z+, r1
    330e:	1d 92       	st	X+, r1
    3310:	e8 17       	cp	r30, r24
    3312:	f9 07       	cpc	r31, r25
    3314:	d9 f7       	brne	.-10     	; 0x330c <_ZN3RTCC1Ev+0x2e>
    3316:	8a e3       	ldi	r24, 0x3A	; 58
    3318:	8a 83       	std	Y+2, r24	; 0x02
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	8e e2       	ldi	r24, 0x2E	; 46
    331e:	8a 87       	std	Y+10, r24	; 0x0a
    3320:	8d 87       	std	Y+13, r24	; 0x0d
    3322:	ce 01       	movw	r24, r28
    3324:	6a df       	rcall	.-300    	; 0x31fa <_ZN3RTC14ausgabezeitneuEv>
    3326:	ce 01       	movw	r24, r28
    3328:	a1 df       	rcall	.-190    	; 0x326c <_ZN3RTC15ausgabedatumneuEv>
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	08 95       	ret

00003330 <_ZN3RTC8kalenderEv>:
    3330:	fc 01       	movw	r30, r24
    3332:	26 89       	ldd	r18, Z+22	; 0x16
    3334:	32 2f       	mov	r19, r18
    3336:	3d 7f       	andi	r19, 0xFD	; 253
    3338:	34 30       	cpi	r19, 0x04	; 4
    333a:	11 f0       	breq	.+4      	; 0x3340 <_ZN3RTC8kalenderEv+0x10>
    333c:	39 30       	cpi	r19, 0x09	; 9
    333e:	91 f4       	brne	.+36     	; 0x3364 <_ZN3RTC8kalenderEv+0x34>
    3340:	fc 01       	movw	r30, r24
    3342:	34 89       	ldd	r19, Z+20	; 0x14
    3344:	3f 31       	cpi	r19, 0x1F	; 31
    3346:	b0 f1       	brcs	.+108    	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    3348:	31 e0       	ldi	r19, 0x01	; 1
    334a:	34 8b       	std	Z+20, r19	; 0x14
    334c:	2f 5f       	subi	r18, 0xFF	; 255
    334e:	2d 30       	cpi	r18, 0x0D	; 13
    3350:	10 f4       	brcc	.+4      	; 0x3356 <_ZN3RTC8kalenderEv+0x26>
    3352:	26 8b       	std	Z+22, r18	; 0x16
    3354:	2f c0       	rjmp	.+94     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    3356:	21 e0       	ldi	r18, 0x01	; 1
    3358:	fc 01       	movw	r30, r24
    335a:	26 8b       	std	Z+22, r18	; 0x16
    335c:	27 89       	ldd	r18, Z+23	; 0x17
    335e:	2f 5f       	subi	r18, 0xFF	; 255
    3360:	27 8b       	std	Z+23, r18	; 0x17
    3362:	28 c0       	rjmp	.+80     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    3364:	22 30       	cpi	r18, 0x02	; 2
    3366:	a9 f4       	brne	.+42     	; 0x3392 <_ZN3RTC8kalenderEv+0x62>
    3368:	fc 01       	movw	r30, r24
    336a:	27 89       	ldd	r18, Z+23	; 0x17
    336c:	23 70       	andi	r18, 0x03	; 3
    336e:	41 f4       	brne	.+16     	; 0x3380 <_ZN3RTC8kalenderEv+0x50>
    3370:	24 89       	ldd	r18, Z+20	; 0x14
    3372:	2e 31       	cpi	r18, 0x1E	; 30
    3374:	f8 f0       	brcs	.+62     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    3376:	21 e0       	ldi	r18, 0x01	; 1
    3378:	24 8b       	std	Z+20, r18	; 0x14
    337a:	23 e0       	ldi	r18, 0x03	; 3
    337c:	26 8b       	std	Z+22, r18	; 0x16
    337e:	1a c0       	rjmp	.+52     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    3380:	fc 01       	movw	r30, r24
    3382:	24 89       	ldd	r18, Z+20	; 0x14
    3384:	2d 31       	cpi	r18, 0x1D	; 29
    3386:	b0 f0       	brcs	.+44     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    3388:	21 e0       	ldi	r18, 0x01	; 1
    338a:	24 8b       	std	Z+20, r18	; 0x14
    338c:	23 e0       	ldi	r18, 0x03	; 3
    338e:	26 8b       	std	Z+22, r18	; 0x16
    3390:	11 c0       	rjmp	.+34     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    3392:	fc 01       	movw	r30, r24
    3394:	34 89       	ldd	r19, Z+20	; 0x14
    3396:	30 32       	cpi	r19, 0x20	; 32
    3398:	68 f0       	brcs	.+26     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    339a:	31 e0       	ldi	r19, 0x01	; 1
    339c:	34 8b       	std	Z+20, r19	; 0x14
    339e:	2f 5f       	subi	r18, 0xFF	; 255
    33a0:	2d 30       	cpi	r18, 0x0D	; 13
    33a2:	10 f4       	brcc	.+4      	; 0x33a8 <_ZN3RTC8kalenderEv+0x78>
    33a4:	26 8b       	std	Z+22, r18	; 0x16
    33a6:	06 c0       	rjmp	.+12     	; 0x33b4 <_ZN3RTC8kalenderEv+0x84>
    33a8:	21 e0       	ldi	r18, 0x01	; 1
    33aa:	fc 01       	movw	r30, r24
    33ac:	26 8b       	std	Z+22, r18	; 0x16
    33ae:	27 89       	ldd	r18, Z+23	; 0x17
    33b0:	2f 5f       	subi	r18, 0xFF	; 255
    33b2:	27 8b       	std	Z+23, r18	; 0x17
    33b4:	5b cf       	rjmp	.-330    	; 0x326c <_ZN3RTC15ausgabedatumneuEv>
    33b6:	08 95       	ret

000033b8 <_ZN3RTC4zeitEv>:
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	ec 01       	movw	r28, r24
    33be:	8a 89       	ldd	r24, Y+18	; 0x12
    33c0:	8c 53       	subi	r24, 0x3C	; 60
    33c2:	8d 38       	cpi	r24, 0x8D	; 141
    33c4:	c0 f4       	brcc	.+48     	; 0x33f6 <_ZN3RTC4zeitEv+0x3e>
    33c6:	1a 8a       	std	Y+18, r1	; 0x12
    33c8:	89 89       	ldd	r24, Y+17	; 0x11
    33ca:	8f 5f       	subi	r24, 0xFF	; 255
    33cc:	89 8b       	std	Y+17, r24	; 0x11
    33ce:	98 8d       	ldd	r25, Y+24	; 0x18
    33d0:	94 60       	ori	r25, 0x04	; 4
    33d2:	98 8f       	std	Y+24, r25	; 0x18
    33d4:	8c 33       	cpi	r24, 0x3C	; 60
    33d6:	68 f0       	brcs	.+26     	; 0x33f2 <_ZN3RTC4zeitEv+0x3a>
    33d8:	19 8a       	std	Y+17, r1	; 0x11
    33da:	88 89       	ldd	r24, Y+16	; 0x10
    33dc:	8f 5f       	subi	r24, 0xFF	; 255
    33de:	88 31       	cpi	r24, 0x18	; 24
    33e0:	10 f4       	brcc	.+4      	; 0x33e6 <_ZN3RTC4zeitEv+0x2e>
    33e2:	88 8b       	std	Y+16, r24	; 0x10
    33e4:	06 c0       	rjmp	.+12     	; 0x33f2 <_ZN3RTC4zeitEv+0x3a>
    33e6:	18 8a       	std	Y+16, r1	; 0x10
    33e8:	8c 89       	ldd	r24, Y+20	; 0x14
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	8c 8b       	std	Y+20, r24	; 0x14
    33ee:	ce 01       	movw	r24, r28
    33f0:	9f df       	rcall	.-194    	; 0x3330 <_ZN3RTC8kalenderEv>
    33f2:	ce 01       	movw	r24, r28
    33f4:	f1 de       	rcall	.-542    	; 0x31d8 <_ZN3RTC6WeckerEv>
    33f6:	ce 01       	movw	r24, r28
    33f8:	00 df       	rcall	.-512    	; 0x31fa <_ZN3RTC14ausgabezeitneuEv>
    33fa:	88 8d       	ldd	r24, Y+24	; 0x18
    33fc:	85 ff       	sbrs	r24, 5
    33fe:	0b c0       	rjmp	.+22     	; 0x3416 <_ZN3RTC4zeitEv+0x5e>
    3400:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3402:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3404:	21 50       	subi	r18, 0x01	; 1
    3406:	31 09       	sbc	r19, r1
    3408:	3c 8f       	std	Y+28, r19	; 0x1c
    340a:	2b 8f       	std	Y+27, r18	; 0x1b
    340c:	23 2b       	or	r18, r19
    340e:	19 f4       	brne	.+6      	; 0x3416 <_ZN3RTC4zeitEv+0x5e>
    3410:	8f 7d       	andi	r24, 0xDF	; 223
    3412:	81 60       	ori	r24, 0x01	; 1
    3414:	88 8f       	std	Y+24, r24	; 0x18
    3416:	88 8d       	ldd	r24, Y+24	; 0x18
    3418:	86 ff       	sbrs	r24, 6
    341a:	05 c0       	rjmp	.+10     	; 0x3426 <_ZN3RTC4zeitEv+0x6e>
    341c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    341e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	9e 8f       	std	Y+30, r25	; 0x1e
    3424:	8d 8f       	std	Y+29, r24	; 0x1d
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	08 95       	ret

0000342e <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    342e:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    3430:	80 e3       	ldi	r24, 0x30	; 48
    3432:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    3434:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    3436:	9a e3       	ldi	r25, 0x3A	; 58
    3438:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    343a:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    343c:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    343e:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    3440:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    3442:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    3444:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    3446:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    344a:	e6 eb       	ldi	r30, 0xB6	; 182
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	80 62       	ori	r24, 0x20	; 32
    3452:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    345a:	85 e0       	ldi	r24, 0x05	; 5
    345c:	80 93 b1 00 	sts	0x00B1, r24
    3460:	08 95       	ret

00003462 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    3462:	e1 eb       	ldi	r30, 0xB1	; 177
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	89 7f       	andi	r24, 0xF9	; 249
    346a:	80 83       	st	Z, r24
    346c:	08 95       	ret

0000346e <_ZN5SOUNDD1Ev>:
	setfrequenci(1000);//1KHz
	off();
} //SOUND

// default destructor
SOUND::~SOUND()
    346e:	08 95       	ret

00003470 <_ZN5SOUND2onEv>:
	TCNT0 = 0;
	on();
}

void SOUND::on(){
	if ((interupts&(1<<Soundactiv)))
    3470:	fc 01       	movw	r30, r24
    3472:	20 81       	ld	r18, Z
    3474:	20 ff       	sbrs	r18, 0
    3476:	04 c0       	rjmp	.+8      	; 0x3480 <_ZN5SOUND2onEv+0x10>
	{
		TCCR0B |= prescaler;
    3478:	25 b5       	in	r18, 0x25	; 37
    347a:	81 81       	ldd	r24, Z+1	; 0x01
    347c:	82 2b       	or	r24, r18
    347e:	85 bd       	out	0x25, r24	; 37
    3480:	08 95       	ret

00003482 <_ZN5SOUND3offEv>:
	}
}

void SOUND::off(){
	TCCR0B &= ~((1<<CS00)|(1<<CS01)|(1<<CS02));
    3482:	85 b5       	in	r24, 0x25	; 37
    3484:	88 7f       	andi	r24, 0xF8	; 248
    3486:	85 bd       	out	0x25, r24	; 37
    3488:	08 95       	ret

0000348a <_ZN5SOUND12setfrequenciEj>:
{
} //~SOUND


//WERT = f_CPU/(f*1024)
void SOUND::setfrequenci(uint16_t frequenz){
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	8c 01       	movw	r16, r24
    3494:	eb 01       	movw	r28, r22
	off();
    3496:	f5 df       	rcall	.-22     	; 0x3482 <_ZN5SOUND3offEv>
	float WERT = F_CPU/256.0;
	WERT /= (frequenz);
    3498:	be 01       	movw	r22, r28
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	29 d1       	rcall	.+594    	; 0x36f2 <__floatunsisf>
    34a0:	9b 01       	movw	r18, r22
    34a2:	ac 01       	movw	r20, r24
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	74 e2       	ldi	r23, 0x24	; 36
    34a8:	84 ef       	ldi	r24, 0xF4	; 244
    34aa:	96 e4       	ldi	r25, 0x46	; 70
    34ac:	89 d0       	rcall	.+274    	; 0x35c0 <__divsf3>
	OCR0A = (uint8_t)WERT;
    34ae:	f5 d0       	rcall	.+490    	; 0x369a <__fixunssfsi>
    34b0:	67 bd       	out	0x27, r22	; 39
	TCNT0 = 0;
    34b2:	16 bc       	out	0x26, r1	; 38
	on();
    34b4:	c8 01       	movw	r24, r16
    34b6:	dc df       	rcall	.-72     	; 0x3470 <_ZN5SOUND2onEv>
}
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
    34c0:	08 95       	ret

000034c2 <_ZN5SOUNDC1Ev>:


#include "SOUND.h"

// default constructor
SOUND::SOUND()
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	ec 01       	movw	r28, r24
{
	//interuptregister initialisieren
	interupts = 0;
    34c8:	18 82       	st	Y, r1
	PORTB &= ~(1<<PORTB3); //Pullups ausschalten
    34ca:	2b 98       	cbi	0x05, 3	; 5
	DDRB |= (1<<PORTB3); //Ausgang schalten
    34cc:	23 9a       	sbi	0x04, 3	; 4
	//Not inverting PWM, Phase correct
	TCCR0A |= (1<<COM0A0) | (1<<WGM00);
    34ce:	84 b5       	in	r24, 0x24	; 36
    34d0:	81 64       	ori	r24, 0x41	; 65
    34d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
    34d4:	85 b5       	in	r24, 0x25	; 37
    34d6:	88 60       	ori	r24, 0x08	; 8
    34d8:	85 bd       	out	0x25, r24	; 37
	fuer	8		1MHz		3.90625KHz
			64		125KHz		488.28Hz
			256		31.25KHz	122.07Hz
			1024	7.8125KHz	30.52Hz
*/
	prescaler = (1<<CS02); //256
    34da:	84 e0       	ldi	r24, 0x04	; 4
    34dc:	89 83       	std	Y+1, r24	; 0x01
	setfrequenci(1000);//1KHz
    34de:	68 ee       	ldi	r22, 0xE8	; 232
    34e0:	73 e0       	ldi	r23, 0x03	; 3
    34e2:	ce 01       	movw	r24, r28
    34e4:	d2 df       	rcall	.-92     	; 0x348a <_ZN5SOUND12setfrequenciEj>
	off();
    34e6:	ce 01       	movw	r24, r28
    34e8:	cc df       	rcall	.-104    	; 0x3482 <_ZN5SOUND3offEv>
} //SOUND
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	08 95       	ret

000034f0 <__subsf3>:
    34f0:	50 58       	subi	r21, 0x80	; 128

000034f2 <__addsf3>:
    34f2:	bb 27       	eor	r27, r27
    34f4:	aa 27       	eor	r26, r26
    34f6:	0e d0       	rcall	.+28     	; 0x3514 <__addsf3x>
    34f8:	c1 c1       	rjmp	.+898    	; 0x387c <__fp_round>
    34fa:	8a d1       	rcall	.+788    	; 0x3810 <__fp_pscA>
    34fc:	30 f0       	brcs	.+12     	; 0x350a <__addsf3+0x18>
    34fe:	8f d1       	rcall	.+798    	; 0x381e <__fp_pscB>
    3500:	20 f0       	brcs	.+8      	; 0x350a <__addsf3+0x18>
    3502:	31 f4       	brne	.+12     	; 0x3510 <__addsf3+0x1e>
    3504:	9f 3f       	cpi	r25, 0xFF	; 255
    3506:	11 f4       	brne	.+4      	; 0x350c <__addsf3+0x1a>
    3508:	1e f4       	brtc	.+6      	; 0x3510 <__addsf3+0x1e>
    350a:	5a c1       	rjmp	.+692    	; 0x37c0 <__fp_nan>
    350c:	0e f4       	brtc	.+2      	; 0x3510 <__addsf3+0x1e>
    350e:	e0 95       	com	r30
    3510:	e7 fb       	bst	r30, 7
    3512:	50 c1       	rjmp	.+672    	; 0x37b4 <__fp_inf>

00003514 <__addsf3x>:
    3514:	e9 2f       	mov	r30, r25
    3516:	d4 d1       	rcall	.+936    	; 0x38c0 <__fp_split3>
    3518:	80 f3       	brcs	.-32     	; 0x34fa <__addsf3+0x8>
    351a:	ba 17       	cp	r27, r26
    351c:	62 07       	cpc	r22, r18
    351e:	73 07       	cpc	r23, r19
    3520:	84 07       	cpc	r24, r20
    3522:	95 07       	cpc	r25, r21
    3524:	18 f0       	brcs	.+6      	; 0x352c <__addsf3x+0x18>
    3526:	71 f4       	brne	.+28     	; 0x3544 <__addsf3x+0x30>
    3528:	9e f5       	brtc	.+102    	; 0x3590 <__addsf3x+0x7c>
    352a:	ec c1       	rjmp	.+984    	; 0x3904 <__fp_zero>
    352c:	0e f4       	brtc	.+2      	; 0x3530 <__addsf3x+0x1c>
    352e:	e0 95       	com	r30
    3530:	0b 2e       	mov	r0, r27
    3532:	ba 2f       	mov	r27, r26
    3534:	a0 2d       	mov	r26, r0
    3536:	0b 01       	movw	r0, r22
    3538:	b9 01       	movw	r22, r18
    353a:	90 01       	movw	r18, r0
    353c:	0c 01       	movw	r0, r24
    353e:	ca 01       	movw	r24, r20
    3540:	a0 01       	movw	r20, r0
    3542:	11 24       	eor	r1, r1
    3544:	ff 27       	eor	r31, r31
    3546:	59 1b       	sub	r21, r25
    3548:	99 f0       	breq	.+38     	; 0x3570 <__addsf3x+0x5c>
    354a:	59 3f       	cpi	r21, 0xF9	; 249
    354c:	50 f4       	brcc	.+20     	; 0x3562 <__addsf3x+0x4e>
    354e:	50 3e       	cpi	r21, 0xE0	; 224
    3550:	68 f1       	brcs	.+90     	; 0x35ac <__addsf3x+0x98>
    3552:	1a 16       	cp	r1, r26
    3554:	f0 40       	sbci	r31, 0x00	; 0
    3556:	a2 2f       	mov	r26, r18
    3558:	23 2f       	mov	r18, r19
    355a:	34 2f       	mov	r19, r20
    355c:	44 27       	eor	r20, r20
    355e:	58 5f       	subi	r21, 0xF8	; 248
    3560:	f3 cf       	rjmp	.-26     	; 0x3548 <__addsf3x+0x34>
    3562:	46 95       	lsr	r20
    3564:	37 95       	ror	r19
    3566:	27 95       	ror	r18
    3568:	a7 95       	ror	r26
    356a:	f0 40       	sbci	r31, 0x00	; 0
    356c:	53 95       	inc	r21
    356e:	c9 f7       	brne	.-14     	; 0x3562 <__addsf3x+0x4e>
    3570:	7e f4       	brtc	.+30     	; 0x3590 <__addsf3x+0x7c>
    3572:	1f 16       	cp	r1, r31
    3574:	ba 0b       	sbc	r27, r26
    3576:	62 0b       	sbc	r22, r18
    3578:	73 0b       	sbc	r23, r19
    357a:	84 0b       	sbc	r24, r20
    357c:	ba f0       	brmi	.+46     	; 0x35ac <__addsf3x+0x98>
    357e:	91 50       	subi	r25, 0x01	; 1
    3580:	a1 f0       	breq	.+40     	; 0x35aa <__addsf3x+0x96>
    3582:	ff 0f       	add	r31, r31
    3584:	bb 1f       	adc	r27, r27
    3586:	66 1f       	adc	r22, r22
    3588:	77 1f       	adc	r23, r23
    358a:	88 1f       	adc	r24, r24
    358c:	c2 f7       	brpl	.-16     	; 0x357e <__addsf3x+0x6a>
    358e:	0e c0       	rjmp	.+28     	; 0x35ac <__addsf3x+0x98>
    3590:	ba 0f       	add	r27, r26
    3592:	62 1f       	adc	r22, r18
    3594:	73 1f       	adc	r23, r19
    3596:	84 1f       	adc	r24, r20
    3598:	48 f4       	brcc	.+18     	; 0x35ac <__addsf3x+0x98>
    359a:	87 95       	ror	r24
    359c:	77 95       	ror	r23
    359e:	67 95       	ror	r22
    35a0:	b7 95       	ror	r27
    35a2:	f7 95       	ror	r31
    35a4:	9e 3f       	cpi	r25, 0xFE	; 254
    35a6:	08 f0       	brcs	.+2      	; 0x35aa <__addsf3x+0x96>
    35a8:	b3 cf       	rjmp	.-154    	; 0x3510 <__addsf3+0x1e>
    35aa:	93 95       	inc	r25
    35ac:	88 0f       	add	r24, r24
    35ae:	08 f0       	brcs	.+2      	; 0x35b2 <__addsf3x+0x9e>
    35b0:	99 27       	eor	r25, r25
    35b2:	ee 0f       	add	r30, r30
    35b4:	97 95       	ror	r25
    35b6:	87 95       	ror	r24
    35b8:	08 95       	ret

000035ba <cos>:
    35ba:	39 d1       	rcall	.+626    	; 0x382e <__fp_rempio2>
    35bc:	e3 95       	inc	r30
    35be:	6f c1       	rjmp	.+734    	; 0x389e <__fp_sinus>

000035c0 <__divsf3>:
    35c0:	0c d0       	rcall	.+24     	; 0x35da <__divsf3x>
    35c2:	5c c1       	rjmp	.+696    	; 0x387c <__fp_round>
    35c4:	2c d1       	rcall	.+600    	; 0x381e <__fp_pscB>
    35c6:	40 f0       	brcs	.+16     	; 0x35d8 <__divsf3+0x18>
    35c8:	23 d1       	rcall	.+582    	; 0x3810 <__fp_pscA>
    35ca:	30 f0       	brcs	.+12     	; 0x35d8 <__divsf3+0x18>
    35cc:	21 f4       	brne	.+8      	; 0x35d6 <__divsf3+0x16>
    35ce:	5f 3f       	cpi	r21, 0xFF	; 255
    35d0:	19 f0       	breq	.+6      	; 0x35d8 <__divsf3+0x18>
    35d2:	f0 c0       	rjmp	.+480    	; 0x37b4 <__fp_inf>
    35d4:	51 11       	cpse	r21, r1
    35d6:	97 c1       	rjmp	.+814    	; 0x3906 <__fp_szero>
    35d8:	f3 c0       	rjmp	.+486    	; 0x37c0 <__fp_nan>

000035da <__divsf3x>:
    35da:	72 d1       	rcall	.+740    	; 0x38c0 <__fp_split3>
    35dc:	98 f3       	brcs	.-26     	; 0x35c4 <__divsf3+0x4>

000035de <__divsf3_pse>:
    35de:	99 23       	and	r25, r25
    35e0:	c9 f3       	breq	.-14     	; 0x35d4 <__divsf3+0x14>
    35e2:	55 23       	and	r21, r21
    35e4:	b1 f3       	breq	.-20     	; 0x35d2 <__divsf3+0x12>
    35e6:	95 1b       	sub	r25, r21
    35e8:	55 0b       	sbc	r21, r21
    35ea:	bb 27       	eor	r27, r27
    35ec:	aa 27       	eor	r26, r26
    35ee:	62 17       	cp	r22, r18
    35f0:	73 07       	cpc	r23, r19
    35f2:	84 07       	cpc	r24, r20
    35f4:	38 f0       	brcs	.+14     	; 0x3604 <__divsf3_pse+0x26>
    35f6:	9f 5f       	subi	r25, 0xFF	; 255
    35f8:	5f 4f       	sbci	r21, 0xFF	; 255
    35fa:	22 0f       	add	r18, r18
    35fc:	33 1f       	adc	r19, r19
    35fe:	44 1f       	adc	r20, r20
    3600:	aa 1f       	adc	r26, r26
    3602:	a9 f3       	breq	.-22     	; 0x35ee <__divsf3_pse+0x10>
    3604:	33 d0       	rcall	.+102    	; 0x366c <__divsf3_pse+0x8e>
    3606:	0e 2e       	mov	r0, r30
    3608:	3a f0       	brmi	.+14     	; 0x3618 <__divsf3_pse+0x3a>
    360a:	e0 e8       	ldi	r30, 0x80	; 128
    360c:	30 d0       	rcall	.+96     	; 0x366e <__divsf3_pse+0x90>
    360e:	91 50       	subi	r25, 0x01	; 1
    3610:	50 40       	sbci	r21, 0x00	; 0
    3612:	e6 95       	lsr	r30
    3614:	00 1c       	adc	r0, r0
    3616:	ca f7       	brpl	.-14     	; 0x360a <__divsf3_pse+0x2c>
    3618:	29 d0       	rcall	.+82     	; 0x366c <__divsf3_pse+0x8e>
    361a:	fe 2f       	mov	r31, r30
    361c:	27 d0       	rcall	.+78     	; 0x366c <__divsf3_pse+0x8e>
    361e:	66 0f       	add	r22, r22
    3620:	77 1f       	adc	r23, r23
    3622:	88 1f       	adc	r24, r24
    3624:	bb 1f       	adc	r27, r27
    3626:	26 17       	cp	r18, r22
    3628:	37 07       	cpc	r19, r23
    362a:	48 07       	cpc	r20, r24
    362c:	ab 07       	cpc	r26, r27
    362e:	b0 e8       	ldi	r27, 0x80	; 128
    3630:	09 f0       	breq	.+2      	; 0x3634 <__divsf3_pse+0x56>
    3632:	bb 0b       	sbc	r27, r27
    3634:	80 2d       	mov	r24, r0
    3636:	bf 01       	movw	r22, r30
    3638:	ff 27       	eor	r31, r31
    363a:	93 58       	subi	r25, 0x83	; 131
    363c:	5f 4f       	sbci	r21, 0xFF	; 255
    363e:	2a f0       	brmi	.+10     	; 0x364a <__divsf3_pse+0x6c>
    3640:	9e 3f       	cpi	r25, 0xFE	; 254
    3642:	51 05       	cpc	r21, r1
    3644:	68 f0       	brcs	.+26     	; 0x3660 <__divsf3_pse+0x82>
    3646:	b6 c0       	rjmp	.+364    	; 0x37b4 <__fp_inf>
    3648:	5e c1       	rjmp	.+700    	; 0x3906 <__fp_szero>
    364a:	5f 3f       	cpi	r21, 0xFF	; 255
    364c:	ec f3       	brlt	.-6      	; 0x3648 <__divsf3_pse+0x6a>
    364e:	98 3e       	cpi	r25, 0xE8	; 232
    3650:	dc f3       	brlt	.-10     	; 0x3648 <__divsf3_pse+0x6a>
    3652:	86 95       	lsr	r24
    3654:	77 95       	ror	r23
    3656:	67 95       	ror	r22
    3658:	b7 95       	ror	r27
    365a:	f7 95       	ror	r31
    365c:	9f 5f       	subi	r25, 0xFF	; 255
    365e:	c9 f7       	brne	.-14     	; 0x3652 <__divsf3_pse+0x74>
    3660:	88 0f       	add	r24, r24
    3662:	91 1d       	adc	r25, r1
    3664:	96 95       	lsr	r25
    3666:	87 95       	ror	r24
    3668:	97 f9       	bld	r25, 7
    366a:	08 95       	ret
    366c:	e1 e0       	ldi	r30, 0x01	; 1
    366e:	66 0f       	add	r22, r22
    3670:	77 1f       	adc	r23, r23
    3672:	88 1f       	adc	r24, r24
    3674:	bb 1f       	adc	r27, r27
    3676:	62 17       	cp	r22, r18
    3678:	73 07       	cpc	r23, r19
    367a:	84 07       	cpc	r24, r20
    367c:	ba 07       	cpc	r27, r26
    367e:	20 f0       	brcs	.+8      	; 0x3688 <__divsf3_pse+0xaa>
    3680:	62 1b       	sub	r22, r18
    3682:	73 0b       	sbc	r23, r19
    3684:	84 0b       	sbc	r24, r20
    3686:	ba 0b       	sbc	r27, r26
    3688:	ee 1f       	adc	r30, r30
    368a:	88 f7       	brcc	.-30     	; 0x366e <__divsf3_pse+0x90>
    368c:	e0 95       	com	r30
    368e:	08 95       	ret

00003690 <__fixsfsi>:
    3690:	04 d0       	rcall	.+8      	; 0x369a <__fixunssfsi>
    3692:	68 94       	set
    3694:	b1 11       	cpse	r27, r1
    3696:	37 c1       	rjmp	.+622    	; 0x3906 <__fp_szero>
    3698:	08 95       	ret

0000369a <__fixunssfsi>:
    369a:	1a d1       	rcall	.+564    	; 0x38d0 <__fp_splitA>
    369c:	88 f0       	brcs	.+34     	; 0x36c0 <__fixunssfsi+0x26>
    369e:	9f 57       	subi	r25, 0x7F	; 127
    36a0:	90 f0       	brcs	.+36     	; 0x36c6 <__fixunssfsi+0x2c>
    36a2:	b9 2f       	mov	r27, r25
    36a4:	99 27       	eor	r25, r25
    36a6:	b7 51       	subi	r27, 0x17	; 23
    36a8:	a0 f0       	brcs	.+40     	; 0x36d2 <__fixunssfsi+0x38>
    36aa:	d1 f0       	breq	.+52     	; 0x36e0 <__fixunssfsi+0x46>
    36ac:	66 0f       	add	r22, r22
    36ae:	77 1f       	adc	r23, r23
    36b0:	88 1f       	adc	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	1a f0       	brmi	.+6      	; 0x36bc <__fixunssfsi+0x22>
    36b6:	ba 95       	dec	r27
    36b8:	c9 f7       	brne	.-14     	; 0x36ac <__fixunssfsi+0x12>
    36ba:	12 c0       	rjmp	.+36     	; 0x36e0 <__fixunssfsi+0x46>
    36bc:	b1 30       	cpi	r27, 0x01	; 1
    36be:	81 f0       	breq	.+32     	; 0x36e0 <__fixunssfsi+0x46>
    36c0:	21 d1       	rcall	.+578    	; 0x3904 <__fp_zero>
    36c2:	b1 e0       	ldi	r27, 0x01	; 1
    36c4:	08 95       	ret
    36c6:	1e c1       	rjmp	.+572    	; 0x3904 <__fp_zero>
    36c8:	67 2f       	mov	r22, r23
    36ca:	78 2f       	mov	r23, r24
    36cc:	88 27       	eor	r24, r24
    36ce:	b8 5f       	subi	r27, 0xF8	; 248
    36d0:	39 f0       	breq	.+14     	; 0x36e0 <__fixunssfsi+0x46>
    36d2:	b9 3f       	cpi	r27, 0xF9	; 249
    36d4:	cc f3       	brlt	.-14     	; 0x36c8 <__fixunssfsi+0x2e>
    36d6:	86 95       	lsr	r24
    36d8:	77 95       	ror	r23
    36da:	67 95       	ror	r22
    36dc:	b3 95       	inc	r27
    36de:	d9 f7       	brne	.-10     	; 0x36d6 <__fixunssfsi+0x3c>
    36e0:	3e f4       	brtc	.+14     	; 0x36f0 <__fixunssfsi+0x56>
    36e2:	90 95       	com	r25
    36e4:	80 95       	com	r24
    36e6:	70 95       	com	r23
    36e8:	61 95       	neg	r22
    36ea:	7f 4f       	sbci	r23, 0xFF	; 255
    36ec:	8f 4f       	sbci	r24, 0xFF	; 255
    36ee:	9f 4f       	sbci	r25, 0xFF	; 255
    36f0:	08 95       	ret

000036f2 <__floatunsisf>:
    36f2:	e8 94       	clt
    36f4:	09 c0       	rjmp	.+18     	; 0x3708 <__floatsisf+0x12>

000036f6 <__floatsisf>:
    36f6:	97 fb       	bst	r25, 7
    36f8:	3e f4       	brtc	.+14     	; 0x3708 <__floatsisf+0x12>
    36fa:	90 95       	com	r25
    36fc:	80 95       	com	r24
    36fe:	70 95       	com	r23
    3700:	61 95       	neg	r22
    3702:	7f 4f       	sbci	r23, 0xFF	; 255
    3704:	8f 4f       	sbci	r24, 0xFF	; 255
    3706:	9f 4f       	sbci	r25, 0xFF	; 255
    3708:	99 23       	and	r25, r25
    370a:	a9 f0       	breq	.+42     	; 0x3736 <__floatsisf+0x40>
    370c:	f9 2f       	mov	r31, r25
    370e:	96 e9       	ldi	r25, 0x96	; 150
    3710:	bb 27       	eor	r27, r27
    3712:	93 95       	inc	r25
    3714:	f6 95       	lsr	r31
    3716:	87 95       	ror	r24
    3718:	77 95       	ror	r23
    371a:	67 95       	ror	r22
    371c:	b7 95       	ror	r27
    371e:	f1 11       	cpse	r31, r1
    3720:	f8 cf       	rjmp	.-16     	; 0x3712 <__floatsisf+0x1c>
    3722:	fa f4       	brpl	.+62     	; 0x3762 <__floatsisf+0x6c>
    3724:	bb 0f       	add	r27, r27
    3726:	11 f4       	brne	.+4      	; 0x372c <__floatsisf+0x36>
    3728:	60 ff       	sbrs	r22, 0
    372a:	1b c0       	rjmp	.+54     	; 0x3762 <__floatsisf+0x6c>
    372c:	6f 5f       	subi	r22, 0xFF	; 255
    372e:	7f 4f       	sbci	r23, 0xFF	; 255
    3730:	8f 4f       	sbci	r24, 0xFF	; 255
    3732:	9f 4f       	sbci	r25, 0xFF	; 255
    3734:	16 c0       	rjmp	.+44     	; 0x3762 <__floatsisf+0x6c>
    3736:	88 23       	and	r24, r24
    3738:	11 f0       	breq	.+4      	; 0x373e <__floatsisf+0x48>
    373a:	96 e9       	ldi	r25, 0x96	; 150
    373c:	11 c0       	rjmp	.+34     	; 0x3760 <__floatsisf+0x6a>
    373e:	77 23       	and	r23, r23
    3740:	21 f0       	breq	.+8      	; 0x374a <__floatsisf+0x54>
    3742:	9e e8       	ldi	r25, 0x8E	; 142
    3744:	87 2f       	mov	r24, r23
    3746:	76 2f       	mov	r23, r22
    3748:	05 c0       	rjmp	.+10     	; 0x3754 <__floatsisf+0x5e>
    374a:	66 23       	and	r22, r22
    374c:	71 f0       	breq	.+28     	; 0x376a <__floatsisf+0x74>
    374e:	96 e8       	ldi	r25, 0x86	; 134
    3750:	86 2f       	mov	r24, r22
    3752:	70 e0       	ldi	r23, 0x00	; 0
    3754:	60 e0       	ldi	r22, 0x00	; 0
    3756:	2a f0       	brmi	.+10     	; 0x3762 <__floatsisf+0x6c>
    3758:	9a 95       	dec	r25
    375a:	66 0f       	add	r22, r22
    375c:	77 1f       	adc	r23, r23
    375e:	88 1f       	adc	r24, r24
    3760:	da f7       	brpl	.-10     	; 0x3758 <__floatsisf+0x62>
    3762:	88 0f       	add	r24, r24
    3764:	96 95       	lsr	r25
    3766:	87 95       	ror	r24
    3768:	97 f9       	bld	r25, 7
    376a:	08 95       	ret

0000376c <__fp_cmp>:
    376c:	99 0f       	add	r25, r25
    376e:	00 08       	sbc	r0, r0
    3770:	55 0f       	add	r21, r21
    3772:	aa 0b       	sbc	r26, r26
    3774:	e0 e8       	ldi	r30, 0x80	; 128
    3776:	fe ef       	ldi	r31, 0xFE	; 254
    3778:	16 16       	cp	r1, r22
    377a:	17 06       	cpc	r1, r23
    377c:	e8 07       	cpc	r30, r24
    377e:	f9 07       	cpc	r31, r25
    3780:	c0 f0       	brcs	.+48     	; 0x37b2 <__fp_cmp+0x46>
    3782:	12 16       	cp	r1, r18
    3784:	13 06       	cpc	r1, r19
    3786:	e4 07       	cpc	r30, r20
    3788:	f5 07       	cpc	r31, r21
    378a:	98 f0       	brcs	.+38     	; 0x37b2 <__fp_cmp+0x46>
    378c:	62 1b       	sub	r22, r18
    378e:	73 0b       	sbc	r23, r19
    3790:	84 0b       	sbc	r24, r20
    3792:	95 0b       	sbc	r25, r21
    3794:	39 f4       	brne	.+14     	; 0x37a4 <__fp_cmp+0x38>
    3796:	0a 26       	eor	r0, r26
    3798:	61 f0       	breq	.+24     	; 0x37b2 <__fp_cmp+0x46>
    379a:	23 2b       	or	r18, r19
    379c:	24 2b       	or	r18, r20
    379e:	25 2b       	or	r18, r21
    37a0:	21 f4       	brne	.+8      	; 0x37aa <__fp_cmp+0x3e>
    37a2:	08 95       	ret
    37a4:	0a 26       	eor	r0, r26
    37a6:	09 f4       	brne	.+2      	; 0x37aa <__fp_cmp+0x3e>
    37a8:	a1 40       	sbci	r26, 0x01	; 1
    37aa:	a6 95       	lsr	r26
    37ac:	8f ef       	ldi	r24, 0xFF	; 255
    37ae:	81 1d       	adc	r24, r1
    37b0:	81 1d       	adc	r24, r1
    37b2:	08 95       	ret

000037b4 <__fp_inf>:
    37b4:	97 f9       	bld	r25, 7
    37b6:	9f 67       	ori	r25, 0x7F	; 127
    37b8:	80 e8       	ldi	r24, 0x80	; 128
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	60 e0       	ldi	r22, 0x00	; 0
    37be:	08 95       	ret

000037c0 <__fp_nan>:
    37c0:	9f ef       	ldi	r25, 0xFF	; 255
    37c2:	80 ec       	ldi	r24, 0xC0	; 192
    37c4:	08 95       	ret

000037c6 <__fp_powser>:
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	1f 93       	push	r17
    37cc:	0f 93       	push	r16
    37ce:	ff 92       	push	r15
    37d0:	ef 92       	push	r14
    37d2:	df 92       	push	r13
    37d4:	7b 01       	movw	r14, r22
    37d6:	8c 01       	movw	r16, r24
    37d8:	68 94       	set
    37da:	05 c0       	rjmp	.+10     	; 0x37e6 <__fp_powser+0x20>
    37dc:	da 2e       	mov	r13, r26
    37de:	ef 01       	movw	r28, r30
    37e0:	a8 d0       	rcall	.+336    	; 0x3932 <__mulsf3x>
    37e2:	fe 01       	movw	r30, r28
    37e4:	e8 94       	clt
    37e6:	a5 91       	lpm	r26, Z+
    37e8:	25 91       	lpm	r18, Z+
    37ea:	35 91       	lpm	r19, Z+
    37ec:	45 91       	lpm	r20, Z+
    37ee:	55 91       	lpm	r21, Z+
    37f0:	ae f3       	brts	.-22     	; 0x37dc <__fp_powser+0x16>
    37f2:	ef 01       	movw	r28, r30
    37f4:	8f de       	rcall	.-738    	; 0x3514 <__addsf3x>
    37f6:	fe 01       	movw	r30, r28
    37f8:	97 01       	movw	r18, r14
    37fa:	a8 01       	movw	r20, r16
    37fc:	da 94       	dec	r13
    37fe:	79 f7       	brne	.-34     	; 0x37de <__fp_powser+0x18>
    3800:	df 90       	pop	r13
    3802:	ef 90       	pop	r14
    3804:	ff 90       	pop	r15
    3806:	0f 91       	pop	r16
    3808:	1f 91       	pop	r17
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <__fp_pscA>:
    3810:	00 24       	eor	r0, r0
    3812:	0a 94       	dec	r0
    3814:	16 16       	cp	r1, r22
    3816:	17 06       	cpc	r1, r23
    3818:	18 06       	cpc	r1, r24
    381a:	09 06       	cpc	r0, r25
    381c:	08 95       	ret

0000381e <__fp_pscB>:
    381e:	00 24       	eor	r0, r0
    3820:	0a 94       	dec	r0
    3822:	12 16       	cp	r1, r18
    3824:	13 06       	cpc	r1, r19
    3826:	14 06       	cpc	r1, r20
    3828:	05 06       	cpc	r0, r21
    382a:	08 95       	ret
    382c:	c9 cf       	rjmp	.-110    	; 0x37c0 <__fp_nan>

0000382e <__fp_rempio2>:
    382e:	50 d0       	rcall	.+160    	; 0x38d0 <__fp_splitA>
    3830:	e8 f3       	brcs	.-6      	; 0x382c <__fp_pscB+0xe>
    3832:	e8 94       	clt
    3834:	e0 e0       	ldi	r30, 0x00	; 0
    3836:	bb 27       	eor	r27, r27
    3838:	9f 57       	subi	r25, 0x7F	; 127
    383a:	f0 f0       	brcs	.+60     	; 0x3878 <__fp_rempio2+0x4a>
    383c:	2a ed       	ldi	r18, 0xDA	; 218
    383e:	3f e0       	ldi	r19, 0x0F	; 15
    3840:	49 ec       	ldi	r20, 0xC9	; 201
    3842:	06 c0       	rjmp	.+12     	; 0x3850 <__fp_rempio2+0x22>
    3844:	ee 0f       	add	r30, r30
    3846:	bb 0f       	add	r27, r27
    3848:	66 1f       	adc	r22, r22
    384a:	77 1f       	adc	r23, r23
    384c:	88 1f       	adc	r24, r24
    384e:	28 f0       	brcs	.+10     	; 0x385a <__fp_rempio2+0x2c>
    3850:	b2 3a       	cpi	r27, 0xA2	; 162
    3852:	62 07       	cpc	r22, r18
    3854:	73 07       	cpc	r23, r19
    3856:	84 07       	cpc	r24, r20
    3858:	28 f0       	brcs	.+10     	; 0x3864 <__fp_rempio2+0x36>
    385a:	b2 5a       	subi	r27, 0xA2	; 162
    385c:	62 0b       	sbc	r22, r18
    385e:	73 0b       	sbc	r23, r19
    3860:	84 0b       	sbc	r24, r20
    3862:	e3 95       	inc	r30
    3864:	9a 95       	dec	r25
    3866:	72 f7       	brpl	.-36     	; 0x3844 <__fp_rempio2+0x16>
    3868:	80 38       	cpi	r24, 0x80	; 128
    386a:	30 f4       	brcc	.+12     	; 0x3878 <__fp_rempio2+0x4a>
    386c:	9a 95       	dec	r25
    386e:	bb 0f       	add	r27, r27
    3870:	66 1f       	adc	r22, r22
    3872:	77 1f       	adc	r23, r23
    3874:	88 1f       	adc	r24, r24
    3876:	d2 f7       	brpl	.-12     	; 0x386c <__fp_rempio2+0x3e>
    3878:	90 48       	sbci	r25, 0x80	; 128
    387a:	ba c0       	rjmp	.+372    	; 0x39f0 <__fp_mpack_finite>

0000387c <__fp_round>:
    387c:	09 2e       	mov	r0, r25
    387e:	03 94       	inc	r0
    3880:	00 0c       	add	r0, r0
    3882:	11 f4       	brne	.+4      	; 0x3888 <__fp_round+0xc>
    3884:	88 23       	and	r24, r24
    3886:	52 f0       	brmi	.+20     	; 0x389c <__fp_round+0x20>
    3888:	bb 0f       	add	r27, r27
    388a:	40 f4       	brcc	.+16     	; 0x389c <__fp_round+0x20>
    388c:	bf 2b       	or	r27, r31
    388e:	11 f4       	brne	.+4      	; 0x3894 <__fp_round+0x18>
    3890:	60 ff       	sbrs	r22, 0
    3892:	04 c0       	rjmp	.+8      	; 0x389c <__fp_round+0x20>
    3894:	6f 5f       	subi	r22, 0xFF	; 255
    3896:	7f 4f       	sbci	r23, 0xFF	; 255
    3898:	8f 4f       	sbci	r24, 0xFF	; 255
    389a:	9f 4f       	sbci	r25, 0xFF	; 255
    389c:	08 95       	ret

0000389e <__fp_sinus>:
    389e:	ef 93       	push	r30
    38a0:	e0 ff       	sbrs	r30, 0
    38a2:	06 c0       	rjmp	.+12     	; 0x38b0 <__fp_sinus+0x12>
    38a4:	a2 ea       	ldi	r26, 0xA2	; 162
    38a6:	2a ed       	ldi	r18, 0xDA	; 218
    38a8:	3f e0       	ldi	r19, 0x0F	; 15
    38aa:	49 ec       	ldi	r20, 0xC9	; 201
    38ac:	5f eb       	ldi	r21, 0xBF	; 191
    38ae:	32 de       	rcall	.-924    	; 0x3514 <__addsf3x>
    38b0:	e5 df       	rcall	.-54     	; 0x387c <__fp_round>
    38b2:	0f 90       	pop	r0
    38b4:	03 94       	inc	r0
    38b6:	01 fc       	sbrc	r0, 1
    38b8:	90 58       	subi	r25, 0x80	; 128
    38ba:	ea e5       	ldi	r30, 0x5A	; 90
    38bc:	f1 e0       	ldi	r31, 0x01	; 1
    38be:	a4 c0       	rjmp	.+328    	; 0x3a08 <__fp_powsodd>

000038c0 <__fp_split3>:
    38c0:	57 fd       	sbrc	r21, 7
    38c2:	90 58       	subi	r25, 0x80	; 128
    38c4:	44 0f       	add	r20, r20
    38c6:	55 1f       	adc	r21, r21
    38c8:	59 f0       	breq	.+22     	; 0x38e0 <__fp_splitA+0x10>
    38ca:	5f 3f       	cpi	r21, 0xFF	; 255
    38cc:	71 f0       	breq	.+28     	; 0x38ea <__fp_splitA+0x1a>
    38ce:	47 95       	ror	r20

000038d0 <__fp_splitA>:
    38d0:	88 0f       	add	r24, r24
    38d2:	97 fb       	bst	r25, 7
    38d4:	99 1f       	adc	r25, r25
    38d6:	61 f0       	breq	.+24     	; 0x38f0 <__fp_splitA+0x20>
    38d8:	9f 3f       	cpi	r25, 0xFF	; 255
    38da:	79 f0       	breq	.+30     	; 0x38fa <__fp_splitA+0x2a>
    38dc:	87 95       	ror	r24
    38de:	08 95       	ret
    38e0:	12 16       	cp	r1, r18
    38e2:	13 06       	cpc	r1, r19
    38e4:	14 06       	cpc	r1, r20
    38e6:	55 1f       	adc	r21, r21
    38e8:	f2 cf       	rjmp	.-28     	; 0x38ce <__fp_split3+0xe>
    38ea:	46 95       	lsr	r20
    38ec:	f1 df       	rcall	.-30     	; 0x38d0 <__fp_splitA>
    38ee:	08 c0       	rjmp	.+16     	; 0x3900 <__fp_splitA+0x30>
    38f0:	16 16       	cp	r1, r22
    38f2:	17 06       	cpc	r1, r23
    38f4:	18 06       	cpc	r1, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	f1 cf       	rjmp	.-30     	; 0x38dc <__fp_splitA+0xc>
    38fa:	86 95       	lsr	r24
    38fc:	71 05       	cpc	r23, r1
    38fe:	61 05       	cpc	r22, r1
    3900:	08 94       	sec
    3902:	08 95       	ret

00003904 <__fp_zero>:
    3904:	e8 94       	clt

00003906 <__fp_szero>:
    3906:	bb 27       	eor	r27, r27
    3908:	66 27       	eor	r22, r22
    390a:	77 27       	eor	r23, r23
    390c:	cb 01       	movw	r24, r22
    390e:	97 f9       	bld	r25, 7
    3910:	08 95       	ret

00003912 <__gesf2>:
    3912:	2c df       	rcall	.-424    	; 0x376c <__fp_cmp>
    3914:	08 f4       	brcc	.+2      	; 0x3918 <__gesf2+0x6>
    3916:	8f ef       	ldi	r24, 0xFF	; 255
    3918:	08 95       	ret

0000391a <__mulsf3>:
    391a:	0b d0       	rcall	.+22     	; 0x3932 <__mulsf3x>
    391c:	af cf       	rjmp	.-162    	; 0x387c <__fp_round>
    391e:	78 df       	rcall	.-272    	; 0x3810 <__fp_pscA>
    3920:	28 f0       	brcs	.+10     	; 0x392c <__mulsf3+0x12>
    3922:	7d df       	rcall	.-262    	; 0x381e <__fp_pscB>
    3924:	18 f0       	brcs	.+6      	; 0x392c <__mulsf3+0x12>
    3926:	95 23       	and	r25, r21
    3928:	09 f0       	breq	.+2      	; 0x392c <__mulsf3+0x12>
    392a:	44 cf       	rjmp	.-376    	; 0x37b4 <__fp_inf>
    392c:	49 cf       	rjmp	.-366    	; 0x37c0 <__fp_nan>
    392e:	11 24       	eor	r1, r1
    3930:	ea cf       	rjmp	.-44     	; 0x3906 <__fp_szero>

00003932 <__mulsf3x>:
    3932:	c6 df       	rcall	.-116    	; 0x38c0 <__fp_split3>
    3934:	a0 f3       	brcs	.-24     	; 0x391e <__mulsf3+0x4>

00003936 <__mulsf3_pse>:
    3936:	95 9f       	mul	r25, r21
    3938:	d1 f3       	breq	.-12     	; 0x392e <__mulsf3+0x14>
    393a:	95 0f       	add	r25, r21
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	55 1f       	adc	r21, r21
    3940:	62 9f       	mul	r22, r18
    3942:	f0 01       	movw	r30, r0
    3944:	72 9f       	mul	r23, r18
    3946:	bb 27       	eor	r27, r27
    3948:	f0 0d       	add	r31, r0
    394a:	b1 1d       	adc	r27, r1
    394c:	63 9f       	mul	r22, r19
    394e:	aa 27       	eor	r26, r26
    3950:	f0 0d       	add	r31, r0
    3952:	b1 1d       	adc	r27, r1
    3954:	aa 1f       	adc	r26, r26
    3956:	64 9f       	mul	r22, r20
    3958:	66 27       	eor	r22, r22
    395a:	b0 0d       	add	r27, r0
    395c:	a1 1d       	adc	r26, r1
    395e:	66 1f       	adc	r22, r22
    3960:	82 9f       	mul	r24, r18
    3962:	22 27       	eor	r18, r18
    3964:	b0 0d       	add	r27, r0
    3966:	a1 1d       	adc	r26, r1
    3968:	62 1f       	adc	r22, r18
    396a:	73 9f       	mul	r23, r19
    396c:	b0 0d       	add	r27, r0
    396e:	a1 1d       	adc	r26, r1
    3970:	62 1f       	adc	r22, r18
    3972:	83 9f       	mul	r24, r19
    3974:	a0 0d       	add	r26, r0
    3976:	61 1d       	adc	r22, r1
    3978:	22 1f       	adc	r18, r18
    397a:	74 9f       	mul	r23, r20
    397c:	33 27       	eor	r19, r19
    397e:	a0 0d       	add	r26, r0
    3980:	61 1d       	adc	r22, r1
    3982:	23 1f       	adc	r18, r19
    3984:	84 9f       	mul	r24, r20
    3986:	60 0d       	add	r22, r0
    3988:	21 1d       	adc	r18, r1
    398a:	82 2f       	mov	r24, r18
    398c:	76 2f       	mov	r23, r22
    398e:	6a 2f       	mov	r22, r26
    3990:	11 24       	eor	r1, r1
    3992:	9f 57       	subi	r25, 0x7F	; 127
    3994:	50 40       	sbci	r21, 0x00	; 0
    3996:	8a f0       	brmi	.+34     	; 0x39ba <__mulsf3_pse+0x84>
    3998:	e1 f0       	breq	.+56     	; 0x39d2 <__mulsf3_pse+0x9c>
    399a:	88 23       	and	r24, r24
    399c:	4a f0       	brmi	.+18     	; 0x39b0 <__mulsf3_pse+0x7a>
    399e:	ee 0f       	add	r30, r30
    39a0:	ff 1f       	adc	r31, r31
    39a2:	bb 1f       	adc	r27, r27
    39a4:	66 1f       	adc	r22, r22
    39a6:	77 1f       	adc	r23, r23
    39a8:	88 1f       	adc	r24, r24
    39aa:	91 50       	subi	r25, 0x01	; 1
    39ac:	50 40       	sbci	r21, 0x00	; 0
    39ae:	a9 f7       	brne	.-22     	; 0x399a <__mulsf3_pse+0x64>
    39b0:	9e 3f       	cpi	r25, 0xFE	; 254
    39b2:	51 05       	cpc	r21, r1
    39b4:	70 f0       	brcs	.+28     	; 0x39d2 <__mulsf3_pse+0x9c>
    39b6:	fe ce       	rjmp	.-516    	; 0x37b4 <__fp_inf>
    39b8:	a6 cf       	rjmp	.-180    	; 0x3906 <__fp_szero>
    39ba:	5f 3f       	cpi	r21, 0xFF	; 255
    39bc:	ec f3       	brlt	.-6      	; 0x39b8 <__mulsf3_pse+0x82>
    39be:	98 3e       	cpi	r25, 0xE8	; 232
    39c0:	dc f3       	brlt	.-10     	; 0x39b8 <__mulsf3_pse+0x82>
    39c2:	86 95       	lsr	r24
    39c4:	77 95       	ror	r23
    39c6:	67 95       	ror	r22
    39c8:	b7 95       	ror	r27
    39ca:	f7 95       	ror	r31
    39cc:	e7 95       	ror	r30
    39ce:	9f 5f       	subi	r25, 0xFF	; 255
    39d0:	c1 f7       	brne	.-16     	; 0x39c2 <__mulsf3_pse+0x8c>
    39d2:	fe 2b       	or	r31, r30
    39d4:	88 0f       	add	r24, r24
    39d6:	91 1d       	adc	r25, r1
    39d8:	96 95       	lsr	r25
    39da:	87 95       	ror	r24
    39dc:	97 f9       	bld	r25, 7
    39de:	08 95       	ret

000039e0 <sin>:
    39e0:	9f 93       	push	r25
    39e2:	25 df       	rcall	.-438    	; 0x382e <__fp_rempio2>
    39e4:	0f 90       	pop	r0
    39e6:	07 fc       	sbrc	r0, 7
    39e8:	ee 5f       	subi	r30, 0xFE	; 254
    39ea:	59 cf       	rjmp	.-334    	; 0x389e <__fp_sinus>

000039ec <__fp_mpack>:
    39ec:	9f 3f       	cpi	r25, 0xFF	; 255
    39ee:	31 f0       	breq	.+12     	; 0x39fc <__fp_mpack_finite+0xc>

000039f0 <__fp_mpack_finite>:
    39f0:	91 50       	subi	r25, 0x01	; 1
    39f2:	20 f4       	brcc	.+8      	; 0x39fc <__fp_mpack_finite+0xc>
    39f4:	87 95       	ror	r24
    39f6:	77 95       	ror	r23
    39f8:	67 95       	ror	r22
    39fa:	b7 95       	ror	r27
    39fc:	88 0f       	add	r24, r24
    39fe:	91 1d       	adc	r25, r1
    3a00:	96 95       	lsr	r25
    3a02:	87 95       	ror	r24
    3a04:	97 f9       	bld	r25, 7
    3a06:	08 95       	ret

00003a08 <__fp_powsodd>:
    3a08:	9f 93       	push	r25
    3a0a:	8f 93       	push	r24
    3a0c:	7f 93       	push	r23
    3a0e:	6f 93       	push	r22
    3a10:	ff 93       	push	r31
    3a12:	ef 93       	push	r30
    3a14:	9b 01       	movw	r18, r22
    3a16:	ac 01       	movw	r20, r24
    3a18:	80 df       	rcall	.-256    	; 0x391a <__mulsf3>
    3a1a:	ef 91       	pop	r30
    3a1c:	ff 91       	pop	r31
    3a1e:	d3 de       	rcall	.-602    	; 0x37c6 <__fp_powser>
    3a20:	2f 91       	pop	r18
    3a22:	3f 91       	pop	r19
    3a24:	4f 91       	pop	r20
    3a26:	5f 91       	pop	r21
    3a28:	78 cf       	rjmp	.-272    	; 0x391a <__mulsf3>

00003a2a <vfprintf>:
    3a2a:	2f 92       	push	r2
    3a2c:	3f 92       	push	r3
    3a2e:	4f 92       	push	r4
    3a30:	5f 92       	push	r5
    3a32:	6f 92       	push	r6
    3a34:	7f 92       	push	r7
    3a36:	8f 92       	push	r8
    3a38:	9f 92       	push	r9
    3a3a:	af 92       	push	r10
    3a3c:	bf 92       	push	r11
    3a3e:	cf 92       	push	r12
    3a40:	df 92       	push	r13
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	63 97       	sbiw	r28, 0x13	; 19
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	6c 01       	movw	r12, r24
    3a60:	4b 01       	movw	r8, r22
    3a62:	2a 01       	movw	r4, r20
    3a64:	fc 01       	movw	r30, r24
    3a66:	17 82       	std	Z+7, r1	; 0x07
    3a68:	16 82       	std	Z+6, r1	; 0x06
    3a6a:	83 81       	ldd	r24, Z+3	; 0x03
    3a6c:	81 ff       	sbrs	r24, 1
    3a6e:	29 c3       	rjmp	.+1618   	; 0x40c2 <vfprintf+0x698>
    3a70:	ae 01       	movw	r20, r28
    3a72:	4f 5f       	subi	r20, 0xFF	; 255
    3a74:	5f 4f       	sbci	r21, 0xFF	; 255
    3a76:	3a 01       	movw	r6, r20
    3a78:	f6 01       	movw	r30, r12
    3a7a:	93 81       	ldd	r25, Z+3	; 0x03
    3a7c:	f4 01       	movw	r30, r8
    3a7e:	93 fd       	sbrc	r25, 3
    3a80:	85 91       	lpm	r24, Z+
    3a82:	93 ff       	sbrs	r25, 3
    3a84:	81 91       	ld	r24, Z+
    3a86:	4f 01       	movw	r8, r30
    3a88:	88 23       	and	r24, r24
    3a8a:	09 f4       	brne	.+2      	; 0x3a8e <vfprintf+0x64>
    3a8c:	16 c3       	rjmp	.+1580   	; 0x40ba <vfprintf+0x690>
    3a8e:	85 32       	cpi	r24, 0x25	; 37
    3a90:	39 f4       	brne	.+14     	; 0x3aa0 <vfprintf+0x76>
    3a92:	93 fd       	sbrc	r25, 3
    3a94:	85 91       	lpm	r24, Z+
    3a96:	93 ff       	sbrs	r25, 3
    3a98:	81 91       	ld	r24, Z+
    3a9a:	4f 01       	movw	r8, r30
    3a9c:	85 32       	cpi	r24, 0x25	; 37
    3a9e:	31 f4       	brne	.+12     	; 0x3aac <vfprintf+0x82>
    3aa0:	b6 01       	movw	r22, r12
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	90 d5       	rcall	.+2848   	; 0x45c6 <fputc>
    3aa6:	52 01       	movw	r10, r4
    3aa8:	25 01       	movw	r4, r10
    3aaa:	e6 cf       	rjmp	.-52     	; 0x3a78 <vfprintf+0x4e>
    3aac:	10 e0       	ldi	r17, 0x00	; 0
    3aae:	f1 2c       	mov	r15, r1
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	20 32       	cpi	r18, 0x20	; 32
    3ab4:	a0 f4       	brcc	.+40     	; 0x3ade <vfprintf+0xb4>
    3ab6:	8b 32       	cpi	r24, 0x2B	; 43
    3ab8:	69 f0       	breq	.+26     	; 0x3ad4 <vfprintf+0xaa>
    3aba:	30 f4       	brcc	.+12     	; 0x3ac8 <vfprintf+0x9e>
    3abc:	80 32       	cpi	r24, 0x20	; 32
    3abe:	59 f0       	breq	.+22     	; 0x3ad6 <vfprintf+0xac>
    3ac0:	83 32       	cpi	r24, 0x23	; 35
    3ac2:	69 f4       	brne	.+26     	; 0x3ade <vfprintf+0xb4>
    3ac4:	20 61       	ori	r18, 0x10	; 16
    3ac6:	2c c0       	rjmp	.+88     	; 0x3b20 <vfprintf+0xf6>
    3ac8:	8d 32       	cpi	r24, 0x2D	; 45
    3aca:	39 f0       	breq	.+14     	; 0x3ada <vfprintf+0xb0>
    3acc:	80 33       	cpi	r24, 0x30	; 48
    3ace:	39 f4       	brne	.+14     	; 0x3ade <vfprintf+0xb4>
    3ad0:	21 60       	ori	r18, 0x01	; 1
    3ad2:	26 c0       	rjmp	.+76     	; 0x3b20 <vfprintf+0xf6>
    3ad4:	22 60       	ori	r18, 0x02	; 2
    3ad6:	24 60       	ori	r18, 0x04	; 4
    3ad8:	23 c0       	rjmp	.+70     	; 0x3b20 <vfprintf+0xf6>
    3ada:	28 60       	ori	r18, 0x08	; 8
    3adc:	21 c0       	rjmp	.+66     	; 0x3b20 <vfprintf+0xf6>
    3ade:	27 fd       	sbrc	r18, 7
    3ae0:	27 c0       	rjmp	.+78     	; 0x3b30 <vfprintf+0x106>
    3ae2:	30 ed       	ldi	r19, 0xD0	; 208
    3ae4:	38 0f       	add	r19, r24
    3ae6:	3a 30       	cpi	r19, 0x0A	; 10
    3ae8:	78 f4       	brcc	.+30     	; 0x3b08 <vfprintf+0xde>
    3aea:	26 ff       	sbrs	r18, 6
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <vfprintf+0xd0>
    3aee:	fa e0       	ldi	r31, 0x0A	; 10
    3af0:	1f 9f       	mul	r17, r31
    3af2:	30 0d       	add	r19, r0
    3af4:	11 24       	eor	r1, r1
    3af6:	13 2f       	mov	r17, r19
    3af8:	13 c0       	rjmp	.+38     	; 0x3b20 <vfprintf+0xf6>
    3afa:	4a e0       	ldi	r20, 0x0A	; 10
    3afc:	f4 9e       	mul	r15, r20
    3afe:	30 0d       	add	r19, r0
    3b00:	11 24       	eor	r1, r1
    3b02:	f3 2e       	mov	r15, r19
    3b04:	20 62       	ori	r18, 0x20	; 32
    3b06:	0c c0       	rjmp	.+24     	; 0x3b20 <vfprintf+0xf6>
    3b08:	8e 32       	cpi	r24, 0x2E	; 46
    3b0a:	21 f4       	brne	.+8      	; 0x3b14 <vfprintf+0xea>
    3b0c:	26 fd       	sbrc	r18, 6
    3b0e:	d5 c2       	rjmp	.+1450   	; 0x40ba <vfprintf+0x690>
    3b10:	20 64       	ori	r18, 0x40	; 64
    3b12:	06 c0       	rjmp	.+12     	; 0x3b20 <vfprintf+0xf6>
    3b14:	8c 36       	cpi	r24, 0x6C	; 108
    3b16:	11 f4       	brne	.+4      	; 0x3b1c <vfprintf+0xf2>
    3b18:	20 68       	ori	r18, 0x80	; 128
    3b1a:	02 c0       	rjmp	.+4      	; 0x3b20 <vfprintf+0xf6>
    3b1c:	88 36       	cpi	r24, 0x68	; 104
    3b1e:	41 f4       	brne	.+16     	; 0x3b30 <vfprintf+0x106>
    3b20:	f4 01       	movw	r30, r8
    3b22:	93 fd       	sbrc	r25, 3
    3b24:	85 91       	lpm	r24, Z+
    3b26:	93 ff       	sbrs	r25, 3
    3b28:	81 91       	ld	r24, Z+
    3b2a:	4f 01       	movw	r8, r30
    3b2c:	81 11       	cpse	r24, r1
    3b2e:	c1 cf       	rjmp	.-126    	; 0x3ab2 <vfprintf+0x88>
    3b30:	9b eb       	ldi	r25, 0xBB	; 187
    3b32:	98 0f       	add	r25, r24
    3b34:	93 30       	cpi	r25, 0x03	; 3
    3b36:	18 f4       	brcc	.+6      	; 0x3b3e <vfprintf+0x114>
    3b38:	20 61       	ori	r18, 0x10	; 16
    3b3a:	80 5e       	subi	r24, 0xE0	; 224
    3b3c:	06 c0       	rjmp	.+12     	; 0x3b4a <vfprintf+0x120>
    3b3e:	9b e9       	ldi	r25, 0x9B	; 155
    3b40:	98 0f       	add	r25, r24
    3b42:	93 30       	cpi	r25, 0x03	; 3
    3b44:	08 f0       	brcs	.+2      	; 0x3b48 <vfprintf+0x11e>
    3b46:	64 c1       	rjmp	.+712    	; 0x3e10 <vfprintf+0x3e6>
    3b48:	2f 7e       	andi	r18, 0xEF	; 239
    3b4a:	26 ff       	sbrs	r18, 6
    3b4c:	16 e0       	ldi	r17, 0x06	; 6
    3b4e:	2f 73       	andi	r18, 0x3F	; 63
    3b50:	32 2e       	mov	r3, r18
    3b52:	85 36       	cpi	r24, 0x65	; 101
    3b54:	19 f4       	brne	.+6      	; 0x3b5c <vfprintf+0x132>
    3b56:	20 64       	ori	r18, 0x40	; 64
    3b58:	32 2e       	mov	r3, r18
    3b5a:	08 c0       	rjmp	.+16     	; 0x3b6c <vfprintf+0x142>
    3b5c:	86 36       	cpi	r24, 0x66	; 102
    3b5e:	21 f4       	brne	.+8      	; 0x3b68 <vfprintf+0x13e>
    3b60:	f2 2f       	mov	r31, r18
    3b62:	f0 68       	ori	r31, 0x80	; 128
    3b64:	3f 2e       	mov	r3, r31
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <vfprintf+0x142>
    3b68:	11 11       	cpse	r17, r1
    3b6a:	11 50       	subi	r17, 0x01	; 1
    3b6c:	37 fe       	sbrs	r3, 7
    3b6e:	07 c0       	rjmp	.+14     	; 0x3b7e <vfprintf+0x154>
    3b70:	1c 33       	cpi	r17, 0x3C	; 60
    3b72:	50 f4       	brcc	.+20     	; 0x3b88 <vfprintf+0x15e>
    3b74:	ee 24       	eor	r14, r14
    3b76:	e3 94       	inc	r14
    3b78:	e1 0e       	add	r14, r17
    3b7a:	27 e0       	ldi	r18, 0x07	; 7
    3b7c:	0b c0       	rjmp	.+22     	; 0x3b94 <vfprintf+0x16a>
    3b7e:	18 30       	cpi	r17, 0x08	; 8
    3b80:	38 f0       	brcs	.+14     	; 0x3b90 <vfprintf+0x166>
    3b82:	27 e0       	ldi	r18, 0x07	; 7
    3b84:	17 e0       	ldi	r17, 0x07	; 7
    3b86:	05 c0       	rjmp	.+10     	; 0x3b92 <vfprintf+0x168>
    3b88:	27 e0       	ldi	r18, 0x07	; 7
    3b8a:	4c e3       	ldi	r20, 0x3C	; 60
    3b8c:	e4 2e       	mov	r14, r20
    3b8e:	02 c0       	rjmp	.+4      	; 0x3b94 <vfprintf+0x16a>
    3b90:	21 2f       	mov	r18, r17
    3b92:	e1 2c       	mov	r14, r1
    3b94:	52 01       	movw	r10, r4
    3b96:	44 e0       	ldi	r20, 0x04	; 4
    3b98:	a4 0e       	add	r10, r20
    3b9a:	b1 1c       	adc	r11, r1
    3b9c:	f2 01       	movw	r30, r4
    3b9e:	60 81       	ld	r22, Z
    3ba0:	71 81       	ldd	r23, Z+1	; 0x01
    3ba2:	82 81       	ldd	r24, Z+2	; 0x02
    3ba4:	93 81       	ldd	r25, Z+3	; 0x03
    3ba6:	0e 2d       	mov	r16, r14
    3ba8:	a3 01       	movw	r20, r6
    3baa:	1f d4       	rcall	.+2110   	; 0x43ea <__ftoa_engine>
    3bac:	2c 01       	movw	r4, r24
    3bae:	09 81       	ldd	r16, Y+1	; 0x01
    3bb0:	00 ff       	sbrs	r16, 0
    3bb2:	02 c0       	rjmp	.+4      	; 0x3bb8 <vfprintf+0x18e>
    3bb4:	03 ff       	sbrs	r16, 3
    3bb6:	07 c0       	rjmp	.+14     	; 0x3bc6 <vfprintf+0x19c>
    3bb8:	31 fc       	sbrc	r3, 1
    3bba:	08 c0       	rjmp	.+16     	; 0x3bcc <vfprintf+0x1a2>
    3bbc:	32 fe       	sbrs	r3, 2
    3bbe:	09 c0       	rjmp	.+18     	; 0x3bd2 <vfprintf+0x1a8>
    3bc0:	30 e2       	ldi	r19, 0x20	; 32
    3bc2:	23 2e       	mov	r2, r19
    3bc4:	07 c0       	rjmp	.+14     	; 0x3bd4 <vfprintf+0x1aa>
    3bc6:	2d e2       	ldi	r18, 0x2D	; 45
    3bc8:	22 2e       	mov	r2, r18
    3bca:	04 c0       	rjmp	.+8      	; 0x3bd4 <vfprintf+0x1aa>
    3bcc:	9b e2       	ldi	r25, 0x2B	; 43
    3bce:	29 2e       	mov	r2, r25
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <vfprintf+0x1aa>
    3bd2:	21 2c       	mov	r2, r1
    3bd4:	80 2f       	mov	r24, r16
    3bd6:	8c 70       	andi	r24, 0x0C	; 12
    3bd8:	19 f0       	breq	.+6      	; 0x3be0 <vfprintf+0x1b6>
    3bda:	21 10       	cpse	r2, r1
    3bdc:	51 c2       	rjmp	.+1186   	; 0x4080 <vfprintf+0x656>
    3bde:	8d c2       	rjmp	.+1306   	; 0x40fa <vfprintf+0x6d0>
    3be0:	37 fe       	sbrs	r3, 7
    3be2:	0f c0       	rjmp	.+30     	; 0x3c02 <vfprintf+0x1d8>
    3be4:	e4 0c       	add	r14, r4
    3be6:	04 ff       	sbrs	r16, 4
    3be8:	04 c0       	rjmp	.+8      	; 0x3bf2 <vfprintf+0x1c8>
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	81 33       	cpi	r24, 0x31	; 49
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <vfprintf+0x1c8>
    3bf0:	ea 94       	dec	r14
    3bf2:	1e 14       	cp	r1, r14
    3bf4:	74 f5       	brge	.+92     	; 0x3c52 <vfprintf+0x228>
    3bf6:	f8 e0       	ldi	r31, 0x08	; 8
    3bf8:	fe 15       	cp	r31, r14
    3bfa:	78 f5       	brcc	.+94     	; 0x3c5a <vfprintf+0x230>
    3bfc:	88 e0       	ldi	r24, 0x08	; 8
    3bfe:	e8 2e       	mov	r14, r24
    3c00:	2c c0       	rjmp	.+88     	; 0x3c5a <vfprintf+0x230>
    3c02:	36 fc       	sbrc	r3, 6
    3c04:	2a c0       	rjmp	.+84     	; 0x3c5a <vfprintf+0x230>
    3c06:	81 2f       	mov	r24, r17
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	84 15       	cp	r24, r4
    3c0c:	95 05       	cpc	r25, r5
    3c0e:	9c f0       	brlt	.+38     	; 0x3c36 <vfprintf+0x20c>
    3c10:	2c ef       	ldi	r18, 0xFC	; 252
    3c12:	42 16       	cp	r4, r18
    3c14:	2f ef       	ldi	r18, 0xFF	; 255
    3c16:	52 06       	cpc	r5, r18
    3c18:	74 f0       	brlt	.+28     	; 0x3c36 <vfprintf+0x20c>
    3c1a:	43 2d       	mov	r20, r3
    3c1c:	40 68       	ori	r20, 0x80	; 128
    3c1e:	34 2e       	mov	r3, r20
    3c20:	0a c0       	rjmp	.+20     	; 0x3c36 <vfprintf+0x20c>
    3c22:	e2 e0       	ldi	r30, 0x02	; 2
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	ec 0f       	add	r30, r28
    3c28:	fd 1f       	adc	r31, r29
    3c2a:	e1 0f       	add	r30, r17
    3c2c:	f1 1d       	adc	r31, r1
    3c2e:	80 81       	ld	r24, Z
    3c30:	80 33       	cpi	r24, 0x30	; 48
    3c32:	19 f4       	brne	.+6      	; 0x3c3a <vfprintf+0x210>
    3c34:	11 50       	subi	r17, 0x01	; 1
    3c36:	11 11       	cpse	r17, r1
    3c38:	f4 cf       	rjmp	.-24     	; 0x3c22 <vfprintf+0x1f8>
    3c3a:	37 fe       	sbrs	r3, 7
    3c3c:	0e c0       	rjmp	.+28     	; 0x3c5a <vfprintf+0x230>
    3c3e:	ee 24       	eor	r14, r14
    3c40:	e3 94       	inc	r14
    3c42:	e1 0e       	add	r14, r17
    3c44:	81 2f       	mov	r24, r17
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	48 16       	cp	r4, r24
    3c4a:	59 06       	cpc	r5, r25
    3c4c:	2c f4       	brge	.+10     	; 0x3c58 <vfprintf+0x22e>
    3c4e:	14 19       	sub	r17, r4
    3c50:	04 c0       	rjmp	.+8      	; 0x3c5a <vfprintf+0x230>
    3c52:	ee 24       	eor	r14, r14
    3c54:	e3 94       	inc	r14
    3c56:	01 c0       	rjmp	.+2      	; 0x3c5a <vfprintf+0x230>
    3c58:	10 e0       	ldi	r17, 0x00	; 0
    3c5a:	37 fe       	sbrs	r3, 7
    3c5c:	06 c0       	rjmp	.+12     	; 0x3c6a <vfprintf+0x240>
    3c5e:	14 14       	cp	r1, r4
    3c60:	15 04       	cpc	r1, r5
    3c62:	34 f4       	brge	.+12     	; 0x3c70 <vfprintf+0x246>
    3c64:	c2 01       	movw	r24, r4
    3c66:	01 96       	adiw	r24, 0x01	; 1
    3c68:	05 c0       	rjmp	.+10     	; 0x3c74 <vfprintf+0x24a>
    3c6a:	85 e0       	ldi	r24, 0x05	; 5
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <vfprintf+0x24a>
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	21 10       	cpse	r2, r1
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	11 23       	and	r17, r17
    3c7a:	31 f0       	breq	.+12     	; 0x3c88 <vfprintf+0x25e>
    3c7c:	21 2f       	mov	r18, r17
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	2f 5f       	subi	r18, 0xFF	; 255
    3c82:	3f 4f       	sbci	r19, 0xFF	; 255
    3c84:	82 0f       	add	r24, r18
    3c86:	93 1f       	adc	r25, r19
    3c88:	2f 2d       	mov	r18, r15
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	82 17       	cp	r24, r18
    3c8e:	93 07       	cpc	r25, r19
    3c90:	14 f4       	brge	.+4      	; 0x3c96 <vfprintf+0x26c>
    3c92:	f8 1a       	sub	r15, r24
    3c94:	01 c0       	rjmp	.+2      	; 0x3c98 <vfprintf+0x26e>
    3c96:	f1 2c       	mov	r15, r1
    3c98:	83 2d       	mov	r24, r3
    3c9a:	89 70       	andi	r24, 0x09	; 9
    3c9c:	41 f4       	brne	.+16     	; 0x3cae <vfprintf+0x284>
    3c9e:	ff 20       	and	r15, r15
    3ca0:	31 f0       	breq	.+12     	; 0x3cae <vfprintf+0x284>
    3ca2:	b6 01       	movw	r22, r12
    3ca4:	80 e2       	ldi	r24, 0x20	; 32
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	8e d4       	rcall	.+2332   	; 0x45c6 <fputc>
    3caa:	fa 94       	dec	r15
    3cac:	f8 cf       	rjmp	.-16     	; 0x3c9e <vfprintf+0x274>
    3cae:	22 20       	and	r2, r2
    3cb0:	21 f0       	breq	.+8      	; 0x3cba <vfprintf+0x290>
    3cb2:	b6 01       	movw	r22, r12
    3cb4:	82 2d       	mov	r24, r2
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	86 d4       	rcall	.+2316   	; 0x45c6 <fputc>
    3cba:	33 fc       	sbrc	r3, 3
    3cbc:	08 c0       	rjmp	.+16     	; 0x3cce <vfprintf+0x2a4>
    3cbe:	ff 20       	and	r15, r15
    3cc0:	31 f0       	breq	.+12     	; 0x3cce <vfprintf+0x2a4>
    3cc2:	b6 01       	movw	r22, r12
    3cc4:	80 e3       	ldi	r24, 0x30	; 48
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	7e d4       	rcall	.+2300   	; 0x45c6 <fputc>
    3cca:	fa 94       	dec	r15
    3ccc:	f8 cf       	rjmp	.-16     	; 0x3cbe <vfprintf+0x294>
    3cce:	37 fe       	sbrs	r3, 7
    3cd0:	58 c0       	rjmp	.+176    	; 0x3d82 <vfprintf+0x358>
    3cd2:	94 2d       	mov	r25, r4
    3cd4:	85 2d       	mov	r24, r5
    3cd6:	57 fe       	sbrs	r5, 7
    3cd8:	02 c0       	rjmp	.+4      	; 0x3cde <vfprintf+0x2b4>
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	29 2e       	mov	r2, r25
    3ce0:	38 2e       	mov	r3, r24
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	a2 01       	movw	r20, r4
    3ce8:	4e 19       	sub	r20, r14
    3cea:	51 09       	sbc	r21, r1
    3cec:	5d 87       	std	Y+13, r21	; 0x0d
    3cee:	4c 87       	std	Y+12, r20	; 0x0c
    3cf0:	a2 01       	movw	r20, r4
    3cf2:	42 19       	sub	r20, r2
    3cf4:	53 09       	sbc	r21, r3
    3cf6:	5f 87       	std	Y+15, r21	; 0x0f
    3cf8:	4e 87       	std	Y+14, r20	; 0x0e
    3cfa:	61 2f       	mov	r22, r17
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	44 27       	eor	r20, r20
    3d00:	55 27       	eor	r21, r21
    3d02:	46 1b       	sub	r20, r22
    3d04:	57 0b       	sbc	r21, r23
    3d06:	59 8b       	std	Y+17, r21	; 0x11
    3d08:	48 8b       	std	Y+16, r20	; 0x10
    3d0a:	5f ef       	ldi	r21, 0xFF	; 255
    3d0c:	25 16       	cp	r2, r21
    3d0e:	35 06       	cpc	r3, r21
    3d10:	41 f4       	brne	.+16     	; 0x3d22 <vfprintf+0x2f8>
    3d12:	b6 01       	movw	r22, r12
    3d14:	8e e2       	ldi	r24, 0x2E	; 46
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	2a 8b       	std	Y+18, r18	; 0x12
    3d1a:	3b 8b       	std	Y+19, r19	; 0x13
    3d1c:	54 d4       	rcall	.+2216   	; 0x45c6 <fputc>
    3d1e:	3b 89       	ldd	r19, Y+19	; 0x13
    3d20:	2a 89       	ldd	r18, Y+18	; 0x12
    3d22:	42 14       	cp	r4, r2
    3d24:	53 04       	cpc	r5, r3
    3d26:	6c f0       	brlt	.+26     	; 0x3d42 <vfprintf+0x318>
    3d28:	4c 85       	ldd	r20, Y+12	; 0x0c
    3d2a:	5d 85       	ldd	r21, Y+13	; 0x0d
    3d2c:	42 15       	cp	r20, r2
    3d2e:	53 05       	cpc	r21, r3
    3d30:	44 f4       	brge	.+16     	; 0x3d42 <vfprintf+0x318>
    3d32:	ee 85       	ldd	r30, Y+14	; 0x0e
    3d34:	ff 85       	ldd	r31, Y+15	; 0x0f
    3d36:	e2 0f       	add	r30, r18
    3d38:	f3 1f       	adc	r31, r19
    3d3a:	e6 0d       	add	r30, r6
    3d3c:	f7 1d       	adc	r31, r7
    3d3e:	81 81       	ldd	r24, Z+1	; 0x01
    3d40:	01 c0       	rjmp	.+2      	; 0x3d44 <vfprintf+0x31a>
    3d42:	80 e3       	ldi	r24, 0x30	; 48
    3d44:	51 e0       	ldi	r21, 0x01	; 1
    3d46:	25 1a       	sub	r2, r21
    3d48:	31 08       	sbc	r3, r1
    3d4a:	2f 5f       	subi	r18, 0xFF	; 255
    3d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4e:	48 89       	ldd	r20, Y+16	; 0x10
    3d50:	59 89       	ldd	r21, Y+17	; 0x11
    3d52:	24 16       	cp	r2, r20
    3d54:	35 06       	cpc	r3, r21
    3d56:	44 f0       	brlt	.+16     	; 0x3d68 <vfprintf+0x33e>
    3d58:	b6 01       	movw	r22, r12
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	2a 8b       	std	Y+18, r18	; 0x12
    3d5e:	3b 8b       	std	Y+19, r19	; 0x13
    3d60:	32 d4       	rcall	.+2148   	; 0x45c6 <fputc>
    3d62:	2a 89       	ldd	r18, Y+18	; 0x12
    3d64:	3b 89       	ldd	r19, Y+19	; 0x13
    3d66:	d1 cf       	rjmp	.-94     	; 0x3d0a <vfprintf+0x2e0>
    3d68:	24 14       	cp	r2, r4
    3d6a:	35 04       	cpc	r3, r5
    3d6c:	39 f4       	brne	.+14     	; 0x3d7c <vfprintf+0x352>
    3d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d70:	96 33       	cpi	r25, 0x36	; 54
    3d72:	18 f4       	brcc	.+6      	; 0x3d7a <vfprintf+0x350>
    3d74:	95 33       	cpi	r25, 0x35	; 53
    3d76:	11 f4       	brne	.+4      	; 0x3d7c <vfprintf+0x352>
    3d78:	04 ff       	sbrs	r16, 4
    3d7a:	81 e3       	ldi	r24, 0x31	; 49
    3d7c:	b6 01       	movw	r22, r12
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	45 c0       	rjmp	.+138    	; 0x3e0c <vfprintf+0x3e2>
    3d82:	8a 81       	ldd	r24, Y+2	; 0x02
    3d84:	81 33       	cpi	r24, 0x31	; 49
    3d86:	09 f0       	breq	.+2      	; 0x3d8a <vfprintf+0x360>
    3d88:	0f 7e       	andi	r16, 0xEF	; 239
    3d8a:	b6 01       	movw	r22, r12
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	1b d4       	rcall	.+2102   	; 0x45c6 <fputc>
    3d90:	11 11       	cpse	r17, r1
    3d92:	05 c0       	rjmp	.+10     	; 0x3d9e <vfprintf+0x374>
    3d94:	34 fc       	sbrc	r3, 4
    3d96:	16 c0       	rjmp	.+44     	; 0x3dc4 <vfprintf+0x39a>
    3d98:	85 e6       	ldi	r24, 0x65	; 101
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	15 c0       	rjmp	.+42     	; 0x3dc8 <vfprintf+0x39e>
    3d9e:	b6 01       	movw	r22, r12
    3da0:	8e e2       	ldi	r24, 0x2E	; 46
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	10 d4       	rcall	.+2080   	; 0x45c6 <fputc>
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	ee 24       	eor	r14, r14
    3daa:	e3 94       	inc	r14
    3dac:	e8 0e       	add	r14, r24
    3dae:	f3 01       	movw	r30, r6
    3db0:	e8 0f       	add	r30, r24
    3db2:	f1 1d       	adc	r31, r1
    3db4:	80 81       	ld	r24, Z
    3db6:	b6 01       	movw	r22, r12
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	05 d4       	rcall	.+2058   	; 0x45c6 <fputc>
    3dbc:	11 50       	subi	r17, 0x01	; 1
    3dbe:	8e 2d       	mov	r24, r14
    3dc0:	99 f7       	brne	.-26     	; 0x3da8 <vfprintf+0x37e>
    3dc2:	e8 cf       	rjmp	.-48     	; 0x3d94 <vfprintf+0x36a>
    3dc4:	85 e4       	ldi	r24, 0x45	; 69
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	b6 01       	movw	r22, r12
    3dca:	fd d3       	rcall	.+2042   	; 0x45c6 <fputc>
    3dcc:	57 fc       	sbrc	r5, 7
    3dce:	05 c0       	rjmp	.+10     	; 0x3dda <vfprintf+0x3b0>
    3dd0:	41 14       	cp	r4, r1
    3dd2:	51 04       	cpc	r5, r1
    3dd4:	39 f4       	brne	.+14     	; 0x3de4 <vfprintf+0x3ba>
    3dd6:	04 ff       	sbrs	r16, 4
    3dd8:	05 c0       	rjmp	.+10     	; 0x3de4 <vfprintf+0x3ba>
    3dda:	51 94       	neg	r5
    3ddc:	41 94       	neg	r4
    3dde:	51 08       	sbc	r5, r1
    3de0:	8d e2       	ldi	r24, 0x2D	; 45
    3de2:	01 c0       	rjmp	.+2      	; 0x3de6 <vfprintf+0x3bc>
    3de4:	8b e2       	ldi	r24, 0x2B	; 43
    3de6:	b6 01       	movw	r22, r12
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	ed d3       	rcall	.+2010   	; 0x45c6 <fputc>
    3dec:	80 e3       	ldi	r24, 0x30	; 48
    3dee:	9a e0       	ldi	r25, 0x0A	; 10
    3df0:	49 16       	cp	r4, r25
    3df2:	51 04       	cpc	r5, r1
    3df4:	2c f0       	brlt	.+10     	; 0x3e00 <vfprintf+0x3d6>
    3df6:	8f 5f       	subi	r24, 0xFF	; 255
    3df8:	5a e0       	ldi	r21, 0x0A	; 10
    3dfa:	45 1a       	sub	r4, r21
    3dfc:	51 08       	sbc	r5, r1
    3dfe:	f7 cf       	rjmp	.-18     	; 0x3dee <vfprintf+0x3c4>
    3e00:	b6 01       	movw	r22, r12
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	e0 d3       	rcall	.+1984   	; 0x45c6 <fputc>
    3e06:	b6 01       	movw	r22, r12
    3e08:	c2 01       	movw	r24, r4
    3e0a:	c0 96       	adiw	r24, 0x30	; 48
    3e0c:	dc d3       	rcall	.+1976   	; 0x45c6 <fputc>
    3e0e:	4c c1       	rjmp	.+664    	; 0x40a8 <vfprintf+0x67e>
    3e10:	83 36       	cpi	r24, 0x63	; 99
    3e12:	31 f0       	breq	.+12     	; 0x3e20 <vfprintf+0x3f6>
    3e14:	83 37       	cpi	r24, 0x73	; 115
    3e16:	79 f0       	breq	.+30     	; 0x3e36 <vfprintf+0x40c>
    3e18:	83 35       	cpi	r24, 0x53	; 83
    3e1a:	09 f0       	breq	.+2      	; 0x3e1e <vfprintf+0x3f4>
    3e1c:	54 c0       	rjmp	.+168    	; 0x3ec6 <vfprintf+0x49c>
    3e1e:	20 c0       	rjmp	.+64     	; 0x3e60 <vfprintf+0x436>
    3e20:	52 01       	movw	r10, r4
    3e22:	e2 e0       	ldi	r30, 0x02	; 2
    3e24:	ae 0e       	add	r10, r30
    3e26:	b1 1c       	adc	r11, r1
    3e28:	f2 01       	movw	r30, r4
    3e2a:	80 81       	ld	r24, Z
    3e2c:	89 83       	std	Y+1, r24	; 0x01
    3e2e:	01 e0       	ldi	r16, 0x01	; 1
    3e30:	10 e0       	ldi	r17, 0x00	; 0
    3e32:	23 01       	movw	r4, r6
    3e34:	13 c0       	rjmp	.+38     	; 0x3e5c <vfprintf+0x432>
    3e36:	52 01       	movw	r10, r4
    3e38:	f2 e0       	ldi	r31, 0x02	; 2
    3e3a:	af 0e       	add	r10, r31
    3e3c:	b1 1c       	adc	r11, r1
    3e3e:	f2 01       	movw	r30, r4
    3e40:	40 80       	ld	r4, Z
    3e42:	51 80       	ldd	r5, Z+1	; 0x01
    3e44:	26 ff       	sbrs	r18, 6
    3e46:	03 c0       	rjmp	.+6      	; 0x3e4e <vfprintf+0x424>
    3e48:	61 2f       	mov	r22, r17
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <vfprintf+0x428>
    3e4e:	6f ef       	ldi	r22, 0xFF	; 255
    3e50:	7f ef       	ldi	r23, 0xFF	; 255
    3e52:	c2 01       	movw	r24, r4
    3e54:	2a 8b       	std	Y+18, r18	; 0x12
    3e56:	ac d3       	rcall	.+1880   	; 0x45b0 <strnlen>
    3e58:	8c 01       	movw	r16, r24
    3e5a:	2a 89       	ldd	r18, Y+18	; 0x12
    3e5c:	2f 77       	andi	r18, 0x7F	; 127
    3e5e:	14 c0       	rjmp	.+40     	; 0x3e88 <vfprintf+0x45e>
    3e60:	52 01       	movw	r10, r4
    3e62:	f2 e0       	ldi	r31, 0x02	; 2
    3e64:	af 0e       	add	r10, r31
    3e66:	b1 1c       	adc	r11, r1
    3e68:	f2 01       	movw	r30, r4
    3e6a:	40 80       	ld	r4, Z
    3e6c:	51 80       	ldd	r5, Z+1	; 0x01
    3e6e:	26 ff       	sbrs	r18, 6
    3e70:	03 c0       	rjmp	.+6      	; 0x3e78 <vfprintf+0x44e>
    3e72:	61 2f       	mov	r22, r17
    3e74:	70 e0       	ldi	r23, 0x00	; 0
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <vfprintf+0x452>
    3e78:	6f ef       	ldi	r22, 0xFF	; 255
    3e7a:	7f ef       	ldi	r23, 0xFF	; 255
    3e7c:	c2 01       	movw	r24, r4
    3e7e:	2a 8b       	std	Y+18, r18	; 0x12
    3e80:	8c d3       	rcall	.+1816   	; 0x459a <strnlen_P>
    3e82:	8c 01       	movw	r16, r24
    3e84:	2a 89       	ldd	r18, Y+18	; 0x12
    3e86:	20 68       	ori	r18, 0x80	; 128
    3e88:	32 2e       	mov	r3, r18
    3e8a:	23 fd       	sbrc	r18, 3
    3e8c:	18 c0       	rjmp	.+48     	; 0x3ebe <vfprintf+0x494>
    3e8e:	8f 2d       	mov	r24, r15
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	08 17       	cp	r16, r24
    3e94:	19 07       	cpc	r17, r25
    3e96:	98 f4       	brcc	.+38     	; 0x3ebe <vfprintf+0x494>
    3e98:	b6 01       	movw	r22, r12
    3e9a:	80 e2       	ldi	r24, 0x20	; 32
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	93 d3       	rcall	.+1830   	; 0x45c6 <fputc>
    3ea0:	fa 94       	dec	r15
    3ea2:	f5 cf       	rjmp	.-22     	; 0x3e8e <vfprintf+0x464>
    3ea4:	f2 01       	movw	r30, r4
    3ea6:	37 fc       	sbrc	r3, 7
    3ea8:	85 91       	lpm	r24, Z+
    3eaa:	37 fe       	sbrs	r3, 7
    3eac:	81 91       	ld	r24, Z+
    3eae:	2f 01       	movw	r4, r30
    3eb0:	b6 01       	movw	r22, r12
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	88 d3       	rcall	.+1808   	; 0x45c6 <fputc>
    3eb6:	f1 10       	cpse	r15, r1
    3eb8:	fa 94       	dec	r15
    3eba:	01 50       	subi	r16, 0x01	; 1
    3ebc:	11 09       	sbc	r17, r1
    3ebe:	01 15       	cp	r16, r1
    3ec0:	11 05       	cpc	r17, r1
    3ec2:	81 f7       	brne	.-32     	; 0x3ea4 <vfprintf+0x47a>
    3ec4:	f1 c0       	rjmp	.+482    	; 0x40a8 <vfprintf+0x67e>
    3ec6:	84 36       	cpi	r24, 0x64	; 100
    3ec8:	11 f0       	breq	.+4      	; 0x3ece <vfprintf+0x4a4>
    3eca:	89 36       	cpi	r24, 0x69	; 105
    3ecc:	51 f5       	brne	.+84     	; 0x3f22 <vfprintf+0x4f8>
    3ece:	52 01       	movw	r10, r4
    3ed0:	27 ff       	sbrs	r18, 7
    3ed2:	09 c0       	rjmp	.+18     	; 0x3ee6 <vfprintf+0x4bc>
    3ed4:	f4 e0       	ldi	r31, 0x04	; 4
    3ed6:	af 0e       	add	r10, r31
    3ed8:	b1 1c       	adc	r11, r1
    3eda:	f2 01       	movw	r30, r4
    3edc:	60 81       	ld	r22, Z
    3ede:	71 81       	ldd	r23, Z+1	; 0x01
    3ee0:	82 81       	ldd	r24, Z+2	; 0x02
    3ee2:	93 81       	ldd	r25, Z+3	; 0x03
    3ee4:	0a c0       	rjmp	.+20     	; 0x3efa <vfprintf+0x4d0>
    3ee6:	f2 e0       	ldi	r31, 0x02	; 2
    3ee8:	af 0e       	add	r10, r31
    3eea:	b1 1c       	adc	r11, r1
    3eec:	f2 01       	movw	r30, r4
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	07 2e       	mov	r0, r23
    3ef4:	00 0c       	add	r0, r0
    3ef6:	88 0b       	sbc	r24, r24
    3ef8:	99 0b       	sbc	r25, r25
    3efa:	2f 76       	andi	r18, 0x6F	; 111
    3efc:	32 2e       	mov	r3, r18
    3efe:	97 ff       	sbrs	r25, 7
    3f00:	09 c0       	rjmp	.+18     	; 0x3f14 <vfprintf+0x4ea>
    3f02:	90 95       	com	r25
    3f04:	80 95       	com	r24
    3f06:	70 95       	com	r23
    3f08:	61 95       	neg	r22
    3f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f10:	20 68       	ori	r18, 0x80	; 128
    3f12:	32 2e       	mov	r3, r18
    3f14:	2a e0       	ldi	r18, 0x0A	; 10
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	a3 01       	movw	r20, r6
    3f1a:	bc d3       	rcall	.+1912   	; 0x4694 <__ultoa_invert>
    3f1c:	e8 2e       	mov	r14, r24
    3f1e:	e6 18       	sub	r14, r6
    3f20:	3e c0       	rjmp	.+124    	; 0x3f9e <vfprintf+0x574>
    3f22:	02 2f       	mov	r16, r18
    3f24:	85 37       	cpi	r24, 0x75	; 117
    3f26:	21 f4       	brne	.+8      	; 0x3f30 <vfprintf+0x506>
    3f28:	0f 7e       	andi	r16, 0xEF	; 239
    3f2a:	2a e0       	ldi	r18, 0x0A	; 10
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	1d c0       	rjmp	.+58     	; 0x3f6a <vfprintf+0x540>
    3f30:	09 7f       	andi	r16, 0xF9	; 249
    3f32:	8f 36       	cpi	r24, 0x6F	; 111
    3f34:	91 f0       	breq	.+36     	; 0x3f5a <vfprintf+0x530>
    3f36:	18 f4       	brcc	.+6      	; 0x3f3e <vfprintf+0x514>
    3f38:	88 35       	cpi	r24, 0x58	; 88
    3f3a:	59 f0       	breq	.+22     	; 0x3f52 <vfprintf+0x528>
    3f3c:	be c0       	rjmp	.+380    	; 0x40ba <vfprintf+0x690>
    3f3e:	80 37       	cpi	r24, 0x70	; 112
    3f40:	19 f0       	breq	.+6      	; 0x3f48 <vfprintf+0x51e>
    3f42:	88 37       	cpi	r24, 0x78	; 120
    3f44:	11 f0       	breq	.+4      	; 0x3f4a <vfprintf+0x520>
    3f46:	b9 c0       	rjmp	.+370    	; 0x40ba <vfprintf+0x690>
    3f48:	00 61       	ori	r16, 0x10	; 16
    3f4a:	04 ff       	sbrs	r16, 4
    3f4c:	09 c0       	rjmp	.+18     	; 0x3f60 <vfprintf+0x536>
    3f4e:	04 60       	ori	r16, 0x04	; 4
    3f50:	07 c0       	rjmp	.+14     	; 0x3f60 <vfprintf+0x536>
    3f52:	24 ff       	sbrs	r18, 4
    3f54:	08 c0       	rjmp	.+16     	; 0x3f66 <vfprintf+0x53c>
    3f56:	06 60       	ori	r16, 0x06	; 6
    3f58:	06 c0       	rjmp	.+12     	; 0x3f66 <vfprintf+0x53c>
    3f5a:	28 e0       	ldi	r18, 0x08	; 8
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	05 c0       	rjmp	.+10     	; 0x3f6a <vfprintf+0x540>
    3f60:	20 e1       	ldi	r18, 0x10	; 16
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	02 c0       	rjmp	.+4      	; 0x3f6a <vfprintf+0x540>
    3f66:	20 e1       	ldi	r18, 0x10	; 16
    3f68:	32 e0       	ldi	r19, 0x02	; 2
    3f6a:	52 01       	movw	r10, r4
    3f6c:	07 ff       	sbrs	r16, 7
    3f6e:	09 c0       	rjmp	.+18     	; 0x3f82 <vfprintf+0x558>
    3f70:	f4 e0       	ldi	r31, 0x04	; 4
    3f72:	af 0e       	add	r10, r31
    3f74:	b1 1c       	adc	r11, r1
    3f76:	f2 01       	movw	r30, r4
    3f78:	60 81       	ld	r22, Z
    3f7a:	71 81       	ldd	r23, Z+1	; 0x01
    3f7c:	82 81       	ldd	r24, Z+2	; 0x02
    3f7e:	93 81       	ldd	r25, Z+3	; 0x03
    3f80:	08 c0       	rjmp	.+16     	; 0x3f92 <vfprintf+0x568>
    3f82:	f2 e0       	ldi	r31, 0x02	; 2
    3f84:	af 0e       	add	r10, r31
    3f86:	b1 1c       	adc	r11, r1
    3f88:	f2 01       	movw	r30, r4
    3f8a:	60 81       	ld	r22, Z
    3f8c:	71 81       	ldd	r23, Z+1	; 0x01
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	a3 01       	movw	r20, r6
    3f94:	7f d3       	rcall	.+1790   	; 0x4694 <__ultoa_invert>
    3f96:	e8 2e       	mov	r14, r24
    3f98:	e6 18       	sub	r14, r6
    3f9a:	0f 77       	andi	r16, 0x7F	; 127
    3f9c:	30 2e       	mov	r3, r16
    3f9e:	36 fe       	sbrs	r3, 6
    3fa0:	0b c0       	rjmp	.+22     	; 0x3fb8 <vfprintf+0x58e>
    3fa2:	33 2d       	mov	r19, r3
    3fa4:	3e 7f       	andi	r19, 0xFE	; 254
    3fa6:	e1 16       	cp	r14, r17
    3fa8:	50 f4       	brcc	.+20     	; 0x3fbe <vfprintf+0x594>
    3faa:	34 fe       	sbrs	r3, 4
    3fac:	0a c0       	rjmp	.+20     	; 0x3fc2 <vfprintf+0x598>
    3fae:	32 fc       	sbrc	r3, 2
    3fb0:	08 c0       	rjmp	.+16     	; 0x3fc2 <vfprintf+0x598>
    3fb2:	33 2d       	mov	r19, r3
    3fb4:	3e 7e       	andi	r19, 0xEE	; 238
    3fb6:	05 c0       	rjmp	.+10     	; 0x3fc2 <vfprintf+0x598>
    3fb8:	0e 2d       	mov	r16, r14
    3fba:	33 2d       	mov	r19, r3
    3fbc:	03 c0       	rjmp	.+6      	; 0x3fc4 <vfprintf+0x59a>
    3fbe:	0e 2d       	mov	r16, r14
    3fc0:	01 c0       	rjmp	.+2      	; 0x3fc4 <vfprintf+0x59a>
    3fc2:	01 2f       	mov	r16, r17
    3fc4:	34 ff       	sbrs	r19, 4
    3fc6:	0c c0       	rjmp	.+24     	; 0x3fe0 <vfprintf+0x5b6>
    3fc8:	fe 01       	movw	r30, r28
    3fca:	ee 0d       	add	r30, r14
    3fcc:	f1 1d       	adc	r31, r1
    3fce:	80 81       	ld	r24, Z
    3fd0:	80 33       	cpi	r24, 0x30	; 48
    3fd2:	11 f4       	brne	.+4      	; 0x3fd8 <vfprintf+0x5ae>
    3fd4:	39 7e       	andi	r19, 0xE9	; 233
    3fd6:	08 c0       	rjmp	.+16     	; 0x3fe8 <vfprintf+0x5be>
    3fd8:	32 ff       	sbrs	r19, 2
    3fda:	05 c0       	rjmp	.+10     	; 0x3fe6 <vfprintf+0x5bc>
    3fdc:	0e 5f       	subi	r16, 0xFE	; 254
    3fde:	04 c0       	rjmp	.+8      	; 0x3fe8 <vfprintf+0x5be>
    3fe0:	83 2f       	mov	r24, r19
    3fe2:	86 78       	andi	r24, 0x86	; 134
    3fe4:	09 f0       	breq	.+2      	; 0x3fe8 <vfprintf+0x5be>
    3fe6:	0f 5f       	subi	r16, 0xFF	; 255
    3fe8:	33 fd       	sbrc	r19, 3
    3fea:	12 c0       	rjmp	.+36     	; 0x4010 <vfprintf+0x5e6>
    3fec:	30 ff       	sbrs	r19, 0
    3fee:	06 c0       	rjmp	.+12     	; 0x3ffc <vfprintf+0x5d2>
    3ff0:	1e 2d       	mov	r17, r14
    3ff2:	0f 15       	cp	r16, r15
    3ff4:	18 f4       	brcc	.+6      	; 0x3ffc <vfprintf+0x5d2>
    3ff6:	1f 0d       	add	r17, r15
    3ff8:	10 1b       	sub	r17, r16
    3ffa:	0f 2d       	mov	r16, r15
    3ffc:	0f 15       	cp	r16, r15
    3ffe:	60 f4       	brcc	.+24     	; 0x4018 <vfprintf+0x5ee>
    4000:	b6 01       	movw	r22, r12
    4002:	80 e2       	ldi	r24, 0x20	; 32
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	3b 8b       	std	Y+19, r19	; 0x13
    4008:	de d2       	rcall	.+1468   	; 0x45c6 <fputc>
    400a:	0f 5f       	subi	r16, 0xFF	; 255
    400c:	3b 89       	ldd	r19, Y+19	; 0x13
    400e:	f6 cf       	rjmp	.-20     	; 0x3ffc <vfprintf+0x5d2>
    4010:	0f 15       	cp	r16, r15
    4012:	10 f4       	brcc	.+4      	; 0x4018 <vfprintf+0x5ee>
    4014:	f0 1a       	sub	r15, r16
    4016:	01 c0       	rjmp	.+2      	; 0x401a <vfprintf+0x5f0>
    4018:	f1 2c       	mov	r15, r1
    401a:	34 ff       	sbrs	r19, 4
    401c:	11 c0       	rjmp	.+34     	; 0x4040 <vfprintf+0x616>
    401e:	b6 01       	movw	r22, r12
    4020:	80 e3       	ldi	r24, 0x30	; 48
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	3b 8b       	std	Y+19, r19	; 0x13
    4026:	cf d2       	rcall	.+1438   	; 0x45c6 <fputc>
    4028:	3b 89       	ldd	r19, Y+19	; 0x13
    402a:	32 ff       	sbrs	r19, 2
    402c:	16 c0       	rjmp	.+44     	; 0x405a <vfprintf+0x630>
    402e:	31 fd       	sbrc	r19, 1
    4030:	03 c0       	rjmp	.+6      	; 0x4038 <vfprintf+0x60e>
    4032:	88 e7       	ldi	r24, 0x78	; 120
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	02 c0       	rjmp	.+4      	; 0x403c <vfprintf+0x612>
    4038:	88 e5       	ldi	r24, 0x58	; 88
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	b6 01       	movw	r22, r12
    403e:	0c c0       	rjmp	.+24     	; 0x4058 <vfprintf+0x62e>
    4040:	83 2f       	mov	r24, r19
    4042:	86 78       	andi	r24, 0x86	; 134
    4044:	51 f0       	breq	.+20     	; 0x405a <vfprintf+0x630>
    4046:	31 ff       	sbrs	r19, 1
    4048:	02 c0       	rjmp	.+4      	; 0x404e <vfprintf+0x624>
    404a:	8b e2       	ldi	r24, 0x2B	; 43
    404c:	01 c0       	rjmp	.+2      	; 0x4050 <vfprintf+0x626>
    404e:	80 e2       	ldi	r24, 0x20	; 32
    4050:	37 fd       	sbrc	r19, 7
    4052:	8d e2       	ldi	r24, 0x2D	; 45
    4054:	b6 01       	movw	r22, r12
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	b6 d2       	rcall	.+1388   	; 0x45c6 <fputc>
    405a:	e1 16       	cp	r14, r17
    405c:	30 f4       	brcc	.+12     	; 0x406a <vfprintf+0x640>
    405e:	b6 01       	movw	r22, r12
    4060:	80 e3       	ldi	r24, 0x30	; 48
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	b0 d2       	rcall	.+1376   	; 0x45c6 <fputc>
    4066:	11 50       	subi	r17, 0x01	; 1
    4068:	f8 cf       	rjmp	.-16     	; 0x405a <vfprintf+0x630>
    406a:	ea 94       	dec	r14
    406c:	f3 01       	movw	r30, r6
    406e:	ee 0d       	add	r30, r14
    4070:	f1 1d       	adc	r31, r1
    4072:	80 81       	ld	r24, Z
    4074:	b6 01       	movw	r22, r12
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	a6 d2       	rcall	.+1356   	; 0x45c6 <fputc>
    407a:	e1 10       	cpse	r14, r1
    407c:	f6 cf       	rjmp	.-20     	; 0x406a <vfprintf+0x640>
    407e:	14 c0       	rjmp	.+40     	; 0x40a8 <vfprintf+0x67e>
    4080:	f4 e0       	ldi	r31, 0x04	; 4
    4082:	ff 15       	cp	r31, r15
    4084:	48 f5       	brcc	.+82     	; 0x40d8 <vfprintf+0x6ae>
    4086:	84 e0       	ldi	r24, 0x04	; 4
    4088:	f8 1a       	sub	r15, r24
    408a:	33 fe       	sbrs	r3, 3
    408c:	1d c0       	rjmp	.+58     	; 0x40c8 <vfprintf+0x69e>
    408e:	21 10       	cpse	r2, r1
    4090:	24 c0       	rjmp	.+72     	; 0x40da <vfprintf+0x6b0>
    4092:	03 ff       	sbrs	r16, 3
    4094:	27 c0       	rjmp	.+78     	; 0x40e4 <vfprintf+0x6ba>
    4096:	0e e8       	ldi	r16, 0x8E	; 142
    4098:	14 e0       	ldi	r17, 0x04	; 4
    409a:	f3 2d       	mov	r31, r3
    409c:	f0 71       	andi	r31, 0x10	; 16
    409e:	3f 2e       	mov	r3, r31
    40a0:	f8 01       	movw	r30, r16
    40a2:	84 91       	lpm	r24, Z
    40a4:	81 11       	cpse	r24, r1
    40a6:	21 c0       	rjmp	.+66     	; 0x40ea <vfprintf+0x6c0>
    40a8:	ff 20       	and	r15, r15
    40aa:	09 f4       	brne	.+2      	; 0x40ae <vfprintf+0x684>
    40ac:	fd cc       	rjmp	.-1542   	; 0x3aa8 <vfprintf+0x7e>
    40ae:	b6 01       	movw	r22, r12
    40b0:	80 e2       	ldi	r24, 0x20	; 32
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	88 d2       	rcall	.+1296   	; 0x45c6 <fputc>
    40b6:	fa 94       	dec	r15
    40b8:	f7 cf       	rjmp	.-18     	; 0x40a8 <vfprintf+0x67e>
    40ba:	f6 01       	movw	r30, r12
    40bc:	86 81       	ldd	r24, Z+6	; 0x06
    40be:	97 81       	ldd	r25, Z+7	; 0x07
    40c0:	23 c0       	rjmp	.+70     	; 0x4108 <__stack+0x9>
    40c2:	8f ef       	ldi	r24, 0xFF	; 255
    40c4:	9f ef       	ldi	r25, 0xFF	; 255
    40c6:	20 c0       	rjmp	.+64     	; 0x4108 <__stack+0x9>
    40c8:	b6 01       	movw	r22, r12
    40ca:	80 e2       	ldi	r24, 0x20	; 32
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	7b d2       	rcall	.+1270   	; 0x45c6 <fputc>
    40d0:	fa 94       	dec	r15
    40d2:	f1 10       	cpse	r15, r1
    40d4:	f9 cf       	rjmp	.-14     	; 0x40c8 <vfprintf+0x69e>
    40d6:	db cf       	rjmp	.-74     	; 0x408e <vfprintf+0x664>
    40d8:	f1 2c       	mov	r15, r1
    40da:	b6 01       	movw	r22, r12
    40dc:	82 2d       	mov	r24, r2
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	72 d2       	rcall	.+1252   	; 0x45c6 <fputc>
    40e2:	d7 cf       	rjmp	.-82     	; 0x4092 <vfprintf+0x668>
    40e4:	02 e9       	ldi	r16, 0x92	; 146
    40e6:	14 e0       	ldi	r17, 0x04	; 4
    40e8:	d8 cf       	rjmp	.-80     	; 0x409a <vfprintf+0x670>
    40ea:	31 10       	cpse	r3, r1
    40ec:	80 52       	subi	r24, 0x20	; 32
    40ee:	b6 01       	movw	r22, r12
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	69 d2       	rcall	.+1234   	; 0x45c6 <fputc>
    40f4:	0f 5f       	subi	r16, 0xFF	; 255
    40f6:	1f 4f       	sbci	r17, 0xFF	; 255
    40f8:	d3 cf       	rjmp	.-90     	; 0x40a0 <vfprintf+0x676>
    40fa:	23 e0       	ldi	r18, 0x03	; 3
    40fc:	2f 15       	cp	r18, r15
    40fe:	10 f4       	brcc	.+4      	; 0x4104 <__stack+0x5>
    4100:	83 e0       	ldi	r24, 0x03	; 3
    4102:	c2 cf       	rjmp	.-124    	; 0x4088 <vfprintf+0x65e>
    4104:	f1 2c       	mov	r15, r1
    4106:	c5 cf       	rjmp	.-118    	; 0x4092 <vfprintf+0x668>
    4108:	63 96       	adiw	r28, 0x13	; 19
    410a:	0f b6       	in	r0, 0x3f	; 63
    410c:	f8 94       	cli
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	0f be       	out	0x3f, r0	; 63
    4112:	cd bf       	out	0x3d, r28	; 61
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	1f 91       	pop	r17
    411a:	0f 91       	pop	r16
    411c:	ff 90       	pop	r15
    411e:	ef 90       	pop	r14
    4120:	df 90       	pop	r13
    4122:	cf 90       	pop	r12
    4124:	bf 90       	pop	r11
    4126:	af 90       	pop	r10
    4128:	9f 90       	pop	r9
    412a:	8f 90       	pop	r8
    412c:	7f 90       	pop	r7
    412e:	6f 90       	pop	r6
    4130:	5f 90       	pop	r5
    4132:	4f 90       	pop	r4
    4134:	3f 90       	pop	r3
    4136:	2f 90       	pop	r2
    4138:	08 95       	ret

0000413a <__udivmodsi4>:
    413a:	a1 e2       	ldi	r26, 0x21	; 33
    413c:	1a 2e       	mov	r1, r26
    413e:	aa 1b       	sub	r26, r26
    4140:	bb 1b       	sub	r27, r27
    4142:	fd 01       	movw	r30, r26
    4144:	0d c0       	rjmp	.+26     	; 0x4160 <__udivmodsi4_ep>

00004146 <__udivmodsi4_loop>:
    4146:	aa 1f       	adc	r26, r26
    4148:	bb 1f       	adc	r27, r27
    414a:	ee 1f       	adc	r30, r30
    414c:	ff 1f       	adc	r31, r31
    414e:	a2 17       	cp	r26, r18
    4150:	b3 07       	cpc	r27, r19
    4152:	e4 07       	cpc	r30, r20
    4154:	f5 07       	cpc	r31, r21
    4156:	20 f0       	brcs	.+8      	; 0x4160 <__udivmodsi4_ep>
    4158:	a2 1b       	sub	r26, r18
    415a:	b3 0b       	sbc	r27, r19
    415c:	e4 0b       	sbc	r30, r20
    415e:	f5 0b       	sbc	r31, r21

00004160 <__udivmodsi4_ep>:
    4160:	66 1f       	adc	r22, r22
    4162:	77 1f       	adc	r23, r23
    4164:	88 1f       	adc	r24, r24
    4166:	99 1f       	adc	r25, r25
    4168:	1a 94       	dec	r1
    416a:	69 f7       	brne	.-38     	; 0x4146 <__udivmodsi4_loop>
    416c:	60 95       	com	r22
    416e:	70 95       	com	r23
    4170:	80 95       	com	r24
    4172:	90 95       	com	r25
    4174:	9b 01       	movw	r18, r22
    4176:	ac 01       	movw	r20, r24
    4178:	bd 01       	movw	r22, r26
    417a:	cf 01       	movw	r24, r30
    417c:	08 95       	ret

0000417e <__tablejump2__>:
    417e:	ee 0f       	add	r30, r30
    4180:	ff 1f       	adc	r31, r31
    4182:	00 24       	eor	r0, r0
    4184:	00 1c       	adc	r0, r0
    4186:	0b be       	out	0x3b, r0	; 59
    4188:	07 90       	elpm	r0, Z+
    418a:	f6 91       	elpm	r31, Z
    418c:	e0 2d       	mov	r30, r0
    418e:	09 94       	ijmp

00004190 <malloc>:
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	82 30       	cpi	r24, 0x02	; 2
    4196:	91 05       	cpc	r25, r1
    4198:	10 f4       	brcc	.+4      	; 0x419e <malloc+0xe>
    419a:	82 e0       	ldi	r24, 0x02	; 2
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	e0 91 d8 07 	lds	r30, 0x07D8
    41a2:	f0 91 d9 07 	lds	r31, 0x07D9
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	c0 e0       	ldi	r28, 0x00	; 0
    41ac:	d0 e0       	ldi	r29, 0x00	; 0
    41ae:	30 97       	sbiw	r30, 0x00	; 0
    41b0:	11 f1       	breq	.+68     	; 0x41f6 <malloc+0x66>
    41b2:	40 81       	ld	r20, Z
    41b4:	51 81       	ldd	r21, Z+1	; 0x01
    41b6:	48 17       	cp	r20, r24
    41b8:	59 07       	cpc	r21, r25
    41ba:	c0 f0       	brcs	.+48     	; 0x41ec <malloc+0x5c>
    41bc:	48 17       	cp	r20, r24
    41be:	59 07       	cpc	r21, r25
    41c0:	61 f4       	brne	.+24     	; 0x41da <malloc+0x4a>
    41c2:	82 81       	ldd	r24, Z+2	; 0x02
    41c4:	93 81       	ldd	r25, Z+3	; 0x03
    41c6:	20 97       	sbiw	r28, 0x00	; 0
    41c8:	19 f0       	breq	.+6      	; 0x41d0 <malloc+0x40>
    41ca:	9b 83       	std	Y+3, r25	; 0x03
    41cc:	8a 83       	std	Y+2, r24	; 0x02
    41ce:	2b c0       	rjmp	.+86     	; 0x4226 <malloc+0x96>
    41d0:	90 93 d9 07 	sts	0x07D9, r25
    41d4:	80 93 d8 07 	sts	0x07D8, r24
    41d8:	26 c0       	rjmp	.+76     	; 0x4226 <malloc+0x96>
    41da:	21 15       	cp	r18, r1
    41dc:	31 05       	cpc	r19, r1
    41de:	19 f0       	breq	.+6      	; 0x41e6 <malloc+0x56>
    41e0:	42 17       	cp	r20, r18
    41e2:	53 07       	cpc	r21, r19
    41e4:	18 f4       	brcc	.+6      	; 0x41ec <malloc+0x5c>
    41e6:	9a 01       	movw	r18, r20
    41e8:	be 01       	movw	r22, r28
    41ea:	df 01       	movw	r26, r30
    41ec:	ef 01       	movw	r28, r30
    41ee:	02 80       	ldd	r0, Z+2	; 0x02
    41f0:	f3 81       	ldd	r31, Z+3	; 0x03
    41f2:	e0 2d       	mov	r30, r0
    41f4:	dc cf       	rjmp	.-72     	; 0x41ae <malloc+0x1e>
    41f6:	21 15       	cp	r18, r1
    41f8:	31 05       	cpc	r19, r1
    41fa:	09 f1       	breq	.+66     	; 0x423e <malloc+0xae>
    41fc:	28 1b       	sub	r18, r24
    41fe:	39 0b       	sbc	r19, r25
    4200:	24 30       	cpi	r18, 0x04	; 4
    4202:	31 05       	cpc	r19, r1
    4204:	90 f4       	brcc	.+36     	; 0x422a <malloc+0x9a>
    4206:	12 96       	adiw	r26, 0x02	; 2
    4208:	8d 91       	ld	r24, X+
    420a:	9c 91       	ld	r25, X
    420c:	13 97       	sbiw	r26, 0x03	; 3
    420e:	61 15       	cp	r22, r1
    4210:	71 05       	cpc	r23, r1
    4212:	21 f0       	breq	.+8      	; 0x421c <malloc+0x8c>
    4214:	fb 01       	movw	r30, r22
    4216:	93 83       	std	Z+3, r25	; 0x03
    4218:	82 83       	std	Z+2, r24	; 0x02
    421a:	04 c0       	rjmp	.+8      	; 0x4224 <malloc+0x94>
    421c:	90 93 d9 07 	sts	0x07D9, r25
    4220:	80 93 d8 07 	sts	0x07D8, r24
    4224:	fd 01       	movw	r30, r26
    4226:	32 96       	adiw	r30, 0x02	; 2
    4228:	44 c0       	rjmp	.+136    	; 0x42b2 <malloc+0x122>
    422a:	fd 01       	movw	r30, r26
    422c:	e2 0f       	add	r30, r18
    422e:	f3 1f       	adc	r31, r19
    4230:	81 93       	st	Z+, r24
    4232:	91 93       	st	Z+, r25
    4234:	22 50       	subi	r18, 0x02	; 2
    4236:	31 09       	sbc	r19, r1
    4238:	2d 93       	st	X+, r18
    423a:	3c 93       	st	X, r19
    423c:	3a c0       	rjmp	.+116    	; 0x42b2 <malloc+0x122>
    423e:	20 91 d6 07 	lds	r18, 0x07D6
    4242:	30 91 d7 07 	lds	r19, 0x07D7
    4246:	23 2b       	or	r18, r19
    4248:	41 f4       	brne	.+16     	; 0x425a <malloc+0xca>
    424a:	20 91 02 01 	lds	r18, 0x0102
    424e:	30 91 03 01 	lds	r19, 0x0103
    4252:	30 93 d7 07 	sts	0x07D7, r19
    4256:	20 93 d6 07 	sts	0x07D6, r18
    425a:	20 91 00 01 	lds	r18, 0x0100
    425e:	30 91 01 01 	lds	r19, 0x0101
    4262:	21 15       	cp	r18, r1
    4264:	31 05       	cpc	r19, r1
    4266:	41 f4       	brne	.+16     	; 0x4278 <malloc+0xe8>
    4268:	2d b7       	in	r18, 0x3d	; 61
    426a:	3e b7       	in	r19, 0x3e	; 62
    426c:	40 91 04 01 	lds	r20, 0x0104
    4270:	50 91 05 01 	lds	r21, 0x0105
    4274:	24 1b       	sub	r18, r20
    4276:	35 0b       	sbc	r19, r21
    4278:	e0 91 d6 07 	lds	r30, 0x07D6
    427c:	f0 91 d7 07 	lds	r31, 0x07D7
    4280:	e2 17       	cp	r30, r18
    4282:	f3 07       	cpc	r31, r19
    4284:	a0 f4       	brcc	.+40     	; 0x42ae <malloc+0x11e>
    4286:	2e 1b       	sub	r18, r30
    4288:	3f 0b       	sbc	r19, r31
    428a:	28 17       	cp	r18, r24
    428c:	39 07       	cpc	r19, r25
    428e:	78 f0       	brcs	.+30     	; 0x42ae <malloc+0x11e>
    4290:	ac 01       	movw	r20, r24
    4292:	4e 5f       	subi	r20, 0xFE	; 254
    4294:	5f 4f       	sbci	r21, 0xFF	; 255
    4296:	24 17       	cp	r18, r20
    4298:	35 07       	cpc	r19, r21
    429a:	48 f0       	brcs	.+18     	; 0x42ae <malloc+0x11e>
    429c:	4e 0f       	add	r20, r30
    429e:	5f 1f       	adc	r21, r31
    42a0:	50 93 d7 07 	sts	0x07D7, r21
    42a4:	40 93 d6 07 	sts	0x07D6, r20
    42a8:	81 93       	st	Z+, r24
    42aa:	91 93       	st	Z+, r25
    42ac:	02 c0       	rjmp	.+4      	; 0x42b2 <malloc+0x122>
    42ae:	e0 e0       	ldi	r30, 0x00	; 0
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	cf 01       	movw	r24, r30
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	08 95       	ret

000042ba <free>:
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	00 97       	sbiw	r24, 0x00	; 0
    42c4:	09 f4       	brne	.+2      	; 0x42c8 <free+0xe>
    42c6:	8c c0       	rjmp	.+280    	; 0x43e0 <free+0x126>
    42c8:	fc 01       	movw	r30, r24
    42ca:	32 97       	sbiw	r30, 0x02	; 2
    42cc:	13 82       	std	Z+3, r1	; 0x03
    42ce:	12 82       	std	Z+2, r1	; 0x02
    42d0:	00 91 d8 07 	lds	r16, 0x07D8
    42d4:	10 91 d9 07 	lds	r17, 0x07D9
    42d8:	01 15       	cp	r16, r1
    42da:	11 05       	cpc	r17, r1
    42dc:	81 f4       	brne	.+32     	; 0x42fe <free+0x44>
    42de:	20 81       	ld	r18, Z
    42e0:	31 81       	ldd	r19, Z+1	; 0x01
    42e2:	82 0f       	add	r24, r18
    42e4:	93 1f       	adc	r25, r19
    42e6:	20 91 d6 07 	lds	r18, 0x07D6
    42ea:	30 91 d7 07 	lds	r19, 0x07D7
    42ee:	28 17       	cp	r18, r24
    42f0:	39 07       	cpc	r19, r25
    42f2:	79 f5       	brne	.+94     	; 0x4352 <free+0x98>
    42f4:	f0 93 d7 07 	sts	0x07D7, r31
    42f8:	e0 93 d6 07 	sts	0x07D6, r30
    42fc:	71 c0       	rjmp	.+226    	; 0x43e0 <free+0x126>
    42fe:	d8 01       	movw	r26, r16
    4300:	40 e0       	ldi	r20, 0x00	; 0
    4302:	50 e0       	ldi	r21, 0x00	; 0
    4304:	ae 17       	cp	r26, r30
    4306:	bf 07       	cpc	r27, r31
    4308:	50 f4       	brcc	.+20     	; 0x431e <free+0x64>
    430a:	12 96       	adiw	r26, 0x02	; 2
    430c:	2d 91       	ld	r18, X+
    430e:	3c 91       	ld	r19, X
    4310:	13 97       	sbiw	r26, 0x03	; 3
    4312:	ad 01       	movw	r20, r26
    4314:	21 15       	cp	r18, r1
    4316:	31 05       	cpc	r19, r1
    4318:	09 f1       	breq	.+66     	; 0x435c <free+0xa2>
    431a:	d9 01       	movw	r26, r18
    431c:	f3 cf       	rjmp	.-26     	; 0x4304 <free+0x4a>
    431e:	9d 01       	movw	r18, r26
    4320:	da 01       	movw	r26, r20
    4322:	33 83       	std	Z+3, r19	; 0x03
    4324:	22 83       	std	Z+2, r18	; 0x02
    4326:	60 81       	ld	r22, Z
    4328:	71 81       	ldd	r23, Z+1	; 0x01
    432a:	86 0f       	add	r24, r22
    432c:	97 1f       	adc	r25, r23
    432e:	82 17       	cp	r24, r18
    4330:	93 07       	cpc	r25, r19
    4332:	69 f4       	brne	.+26     	; 0x434e <free+0x94>
    4334:	ec 01       	movw	r28, r24
    4336:	28 81       	ld	r18, Y
    4338:	39 81       	ldd	r19, Y+1	; 0x01
    433a:	26 0f       	add	r18, r22
    433c:	37 1f       	adc	r19, r23
    433e:	2e 5f       	subi	r18, 0xFE	; 254
    4340:	3f 4f       	sbci	r19, 0xFF	; 255
    4342:	31 83       	std	Z+1, r19	; 0x01
    4344:	20 83       	st	Z, r18
    4346:	8a 81       	ldd	r24, Y+2	; 0x02
    4348:	9b 81       	ldd	r25, Y+3	; 0x03
    434a:	93 83       	std	Z+3, r25	; 0x03
    434c:	82 83       	std	Z+2, r24	; 0x02
    434e:	45 2b       	or	r20, r21
    4350:	29 f4       	brne	.+10     	; 0x435c <free+0xa2>
    4352:	f0 93 d9 07 	sts	0x07D9, r31
    4356:	e0 93 d8 07 	sts	0x07D8, r30
    435a:	42 c0       	rjmp	.+132    	; 0x43e0 <free+0x126>
    435c:	13 96       	adiw	r26, 0x03	; 3
    435e:	fc 93       	st	X, r31
    4360:	ee 93       	st	-X, r30
    4362:	12 97       	sbiw	r26, 0x02	; 2
    4364:	ed 01       	movw	r28, r26
    4366:	49 91       	ld	r20, Y+
    4368:	59 91       	ld	r21, Y+
    436a:	9e 01       	movw	r18, r28
    436c:	24 0f       	add	r18, r20
    436e:	35 1f       	adc	r19, r21
    4370:	e2 17       	cp	r30, r18
    4372:	f3 07       	cpc	r31, r19
    4374:	71 f4       	brne	.+28     	; 0x4392 <free+0xd8>
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	84 0f       	add	r24, r20
    437c:	95 1f       	adc	r25, r21
    437e:	02 96       	adiw	r24, 0x02	; 2
    4380:	11 96       	adiw	r26, 0x01	; 1
    4382:	9c 93       	st	X, r25
    4384:	8e 93       	st	-X, r24
    4386:	82 81       	ldd	r24, Z+2	; 0x02
    4388:	93 81       	ldd	r25, Z+3	; 0x03
    438a:	13 96       	adiw	r26, 0x03	; 3
    438c:	9c 93       	st	X, r25
    438e:	8e 93       	st	-X, r24
    4390:	12 97       	sbiw	r26, 0x02	; 2
    4392:	e0 e0       	ldi	r30, 0x00	; 0
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	d8 01       	movw	r26, r16
    4398:	12 96       	adiw	r26, 0x02	; 2
    439a:	8d 91       	ld	r24, X+
    439c:	9c 91       	ld	r25, X
    439e:	13 97       	sbiw	r26, 0x03	; 3
    43a0:	00 97       	sbiw	r24, 0x00	; 0
    43a2:	19 f0       	breq	.+6      	; 0x43aa <free+0xf0>
    43a4:	f8 01       	movw	r30, r16
    43a6:	8c 01       	movw	r16, r24
    43a8:	f6 cf       	rjmp	.-20     	; 0x4396 <free+0xdc>
    43aa:	8d 91       	ld	r24, X+
    43ac:	9c 91       	ld	r25, X
    43ae:	98 01       	movw	r18, r16
    43b0:	2e 5f       	subi	r18, 0xFE	; 254
    43b2:	3f 4f       	sbci	r19, 0xFF	; 255
    43b4:	82 0f       	add	r24, r18
    43b6:	93 1f       	adc	r25, r19
    43b8:	20 91 d6 07 	lds	r18, 0x07D6
    43bc:	30 91 d7 07 	lds	r19, 0x07D7
    43c0:	28 17       	cp	r18, r24
    43c2:	39 07       	cpc	r19, r25
    43c4:	69 f4       	brne	.+26     	; 0x43e0 <free+0x126>
    43c6:	30 97       	sbiw	r30, 0x00	; 0
    43c8:	29 f4       	brne	.+10     	; 0x43d4 <free+0x11a>
    43ca:	10 92 d9 07 	sts	0x07D9, r1
    43ce:	10 92 d8 07 	sts	0x07D8, r1
    43d2:	02 c0       	rjmp	.+4      	; 0x43d8 <free+0x11e>
    43d4:	13 82       	std	Z+3, r1	; 0x03
    43d6:	12 82       	std	Z+2, r1	; 0x02
    43d8:	10 93 d7 07 	sts	0x07D7, r17
    43dc:	00 93 d6 07 	sts	0x07D6, r16
    43e0:	df 91       	pop	r29
    43e2:	cf 91       	pop	r28
    43e4:	1f 91       	pop	r17
    43e6:	0f 91       	pop	r16
    43e8:	08 95       	ret

000043ea <__ftoa_engine>:
    43ea:	28 30       	cpi	r18, 0x08	; 8
    43ec:	08 f0       	brcs	.+2      	; 0x43f0 <__ftoa_engine+0x6>
    43ee:	27 e0       	ldi	r18, 0x07	; 7
    43f0:	33 27       	eor	r19, r19
    43f2:	da 01       	movw	r26, r20
    43f4:	99 0f       	add	r25, r25
    43f6:	31 1d       	adc	r19, r1
    43f8:	87 fd       	sbrc	r24, 7
    43fa:	91 60       	ori	r25, 0x01	; 1
    43fc:	00 96       	adiw	r24, 0x00	; 0
    43fe:	61 05       	cpc	r22, r1
    4400:	71 05       	cpc	r23, r1
    4402:	39 f4       	brne	.+14     	; 0x4412 <__ftoa_engine+0x28>
    4404:	32 60       	ori	r19, 0x02	; 2
    4406:	2e 5f       	subi	r18, 0xFE	; 254
    4408:	3d 93       	st	X+, r19
    440a:	30 e3       	ldi	r19, 0x30	; 48
    440c:	2a 95       	dec	r18
    440e:	e1 f7       	brne	.-8      	; 0x4408 <__ftoa_engine+0x1e>
    4410:	08 95       	ret
    4412:	9f 3f       	cpi	r25, 0xFF	; 255
    4414:	30 f0       	brcs	.+12     	; 0x4422 <__ftoa_engine+0x38>
    4416:	80 38       	cpi	r24, 0x80	; 128
    4418:	71 05       	cpc	r23, r1
    441a:	61 05       	cpc	r22, r1
    441c:	09 f0       	breq	.+2      	; 0x4420 <__ftoa_engine+0x36>
    441e:	3c 5f       	subi	r19, 0xFC	; 252
    4420:	3c 5f       	subi	r19, 0xFC	; 252
    4422:	3d 93       	st	X+, r19
    4424:	91 30       	cpi	r25, 0x01	; 1
    4426:	08 f0       	brcs	.+2      	; 0x442a <__ftoa_engine+0x40>
    4428:	80 68       	ori	r24, 0x80	; 128
    442a:	91 1d       	adc	r25, r1
    442c:	df 93       	push	r29
    442e:	cf 93       	push	r28
    4430:	1f 93       	push	r17
    4432:	0f 93       	push	r16
    4434:	ff 92       	push	r15
    4436:	ef 92       	push	r14
    4438:	19 2f       	mov	r17, r25
    443a:	98 7f       	andi	r25, 0xF8	; 248
    443c:	96 95       	lsr	r25
    443e:	e9 2f       	mov	r30, r25
    4440:	96 95       	lsr	r25
    4442:	96 95       	lsr	r25
    4444:	e9 0f       	add	r30, r25
    4446:	ff 27       	eor	r31, r31
    4448:	e0 51       	subi	r30, 0x10	; 16
    444a:	fb 4f       	sbci	r31, 0xFB	; 251
    444c:	99 27       	eor	r25, r25
    444e:	33 27       	eor	r19, r19
    4450:	ee 24       	eor	r14, r14
    4452:	ff 24       	eor	r15, r15
    4454:	a7 01       	movw	r20, r14
    4456:	e7 01       	movw	r28, r14
    4458:	05 90       	lpm	r0, Z+
    445a:	08 94       	sec
    445c:	07 94       	ror	r0
    445e:	28 f4       	brcc	.+10     	; 0x446a <__ftoa_engine+0x80>
    4460:	36 0f       	add	r19, r22
    4462:	e7 1e       	adc	r14, r23
    4464:	f8 1e       	adc	r15, r24
    4466:	49 1f       	adc	r20, r25
    4468:	51 1d       	adc	r21, r1
    446a:	66 0f       	add	r22, r22
    446c:	77 1f       	adc	r23, r23
    446e:	88 1f       	adc	r24, r24
    4470:	99 1f       	adc	r25, r25
    4472:	06 94       	lsr	r0
    4474:	a1 f7       	brne	.-24     	; 0x445e <__ftoa_engine+0x74>
    4476:	05 90       	lpm	r0, Z+
    4478:	07 94       	ror	r0
    447a:	28 f4       	brcc	.+10     	; 0x4486 <__ftoa_engine+0x9c>
    447c:	e7 0e       	add	r14, r23
    447e:	f8 1e       	adc	r15, r24
    4480:	49 1f       	adc	r20, r25
    4482:	56 1f       	adc	r21, r22
    4484:	c1 1d       	adc	r28, r1
    4486:	77 0f       	add	r23, r23
    4488:	88 1f       	adc	r24, r24
    448a:	99 1f       	adc	r25, r25
    448c:	66 1f       	adc	r22, r22
    448e:	06 94       	lsr	r0
    4490:	a1 f7       	brne	.-24     	; 0x447a <__ftoa_engine+0x90>
    4492:	05 90       	lpm	r0, Z+
    4494:	07 94       	ror	r0
    4496:	28 f4       	brcc	.+10     	; 0x44a2 <__ftoa_engine+0xb8>
    4498:	f8 0e       	add	r15, r24
    449a:	49 1f       	adc	r20, r25
    449c:	56 1f       	adc	r21, r22
    449e:	c7 1f       	adc	r28, r23
    44a0:	d1 1d       	adc	r29, r1
    44a2:	88 0f       	add	r24, r24
    44a4:	99 1f       	adc	r25, r25
    44a6:	66 1f       	adc	r22, r22
    44a8:	77 1f       	adc	r23, r23
    44aa:	06 94       	lsr	r0
    44ac:	a1 f7       	brne	.-24     	; 0x4496 <__ftoa_engine+0xac>
    44ae:	05 90       	lpm	r0, Z+
    44b0:	07 94       	ror	r0
    44b2:	20 f4       	brcc	.+8      	; 0x44bc <__ftoa_engine+0xd2>
    44b4:	49 0f       	add	r20, r25
    44b6:	56 1f       	adc	r21, r22
    44b8:	c7 1f       	adc	r28, r23
    44ba:	d8 1f       	adc	r29, r24
    44bc:	99 0f       	add	r25, r25
    44be:	66 1f       	adc	r22, r22
    44c0:	77 1f       	adc	r23, r23
    44c2:	88 1f       	adc	r24, r24
    44c4:	06 94       	lsr	r0
    44c6:	a9 f7       	brne	.-22     	; 0x44b2 <__ftoa_engine+0xc8>
    44c8:	84 91       	lpm	r24, Z
    44ca:	10 95       	com	r17
    44cc:	17 70       	andi	r17, 0x07	; 7
    44ce:	41 f0       	breq	.+16     	; 0x44e0 <__ftoa_engine+0xf6>
    44d0:	d6 95       	lsr	r29
    44d2:	c7 95       	ror	r28
    44d4:	57 95       	ror	r21
    44d6:	47 95       	ror	r20
    44d8:	f7 94       	ror	r15
    44da:	e7 94       	ror	r14
    44dc:	1a 95       	dec	r17
    44de:	c1 f7       	brne	.-16     	; 0x44d0 <__ftoa_engine+0xe6>
    44e0:	e6 e9       	ldi	r30, 0x96	; 150
    44e2:	f4 e0       	ldi	r31, 0x04	; 4
    44e4:	68 94       	set
    44e6:	15 90       	lpm	r1, Z+
    44e8:	15 91       	lpm	r17, Z+
    44ea:	35 91       	lpm	r19, Z+
    44ec:	65 91       	lpm	r22, Z+
    44ee:	95 91       	lpm	r25, Z+
    44f0:	05 90       	lpm	r0, Z+
    44f2:	7f e2       	ldi	r23, 0x2F	; 47
    44f4:	73 95       	inc	r23
    44f6:	e1 18       	sub	r14, r1
    44f8:	f1 0a       	sbc	r15, r17
    44fa:	43 0b       	sbc	r20, r19
    44fc:	56 0b       	sbc	r21, r22
    44fe:	c9 0b       	sbc	r28, r25
    4500:	d0 09       	sbc	r29, r0
    4502:	c0 f7       	brcc	.-16     	; 0x44f4 <__ftoa_engine+0x10a>
    4504:	e1 0c       	add	r14, r1
    4506:	f1 1e       	adc	r15, r17
    4508:	43 1f       	adc	r20, r19
    450a:	56 1f       	adc	r21, r22
    450c:	c9 1f       	adc	r28, r25
    450e:	d0 1d       	adc	r29, r0
    4510:	7e f4       	brtc	.+30     	; 0x4530 <__ftoa_engine+0x146>
    4512:	70 33       	cpi	r23, 0x30	; 48
    4514:	11 f4       	brne	.+4      	; 0x451a <__ftoa_engine+0x130>
    4516:	8a 95       	dec	r24
    4518:	e6 cf       	rjmp	.-52     	; 0x44e6 <__ftoa_engine+0xfc>
    451a:	e8 94       	clt
    451c:	01 50       	subi	r16, 0x01	; 1
    451e:	30 f0       	brcs	.+12     	; 0x452c <__ftoa_engine+0x142>
    4520:	08 0f       	add	r16, r24
    4522:	0a f4       	brpl	.+2      	; 0x4526 <__ftoa_engine+0x13c>
    4524:	00 27       	eor	r16, r16
    4526:	02 17       	cp	r16, r18
    4528:	08 f4       	brcc	.+2      	; 0x452c <__ftoa_engine+0x142>
    452a:	20 2f       	mov	r18, r16
    452c:	23 95       	inc	r18
    452e:	02 2f       	mov	r16, r18
    4530:	7a 33       	cpi	r23, 0x3A	; 58
    4532:	28 f0       	brcs	.+10     	; 0x453e <__ftoa_engine+0x154>
    4534:	79 e3       	ldi	r23, 0x39	; 57
    4536:	7d 93       	st	X+, r23
    4538:	2a 95       	dec	r18
    453a:	e9 f7       	brne	.-6      	; 0x4536 <__ftoa_engine+0x14c>
    453c:	10 c0       	rjmp	.+32     	; 0x455e <__ftoa_engine+0x174>
    453e:	7d 93       	st	X+, r23
    4540:	2a 95       	dec	r18
    4542:	89 f6       	brne	.-94     	; 0x44e6 <__ftoa_engine+0xfc>
    4544:	06 94       	lsr	r0
    4546:	97 95       	ror	r25
    4548:	67 95       	ror	r22
    454a:	37 95       	ror	r19
    454c:	17 95       	ror	r17
    454e:	17 94       	ror	r1
    4550:	e1 18       	sub	r14, r1
    4552:	f1 0a       	sbc	r15, r17
    4554:	43 0b       	sbc	r20, r19
    4556:	56 0b       	sbc	r21, r22
    4558:	c9 0b       	sbc	r28, r25
    455a:	d0 09       	sbc	r29, r0
    455c:	98 f0       	brcs	.+38     	; 0x4584 <__ftoa_engine+0x19a>
    455e:	23 95       	inc	r18
    4560:	7e 91       	ld	r23, -X
    4562:	73 95       	inc	r23
    4564:	7a 33       	cpi	r23, 0x3A	; 58
    4566:	08 f0       	brcs	.+2      	; 0x456a <__ftoa_engine+0x180>
    4568:	70 e3       	ldi	r23, 0x30	; 48
    456a:	7c 93       	st	X, r23
    456c:	20 13       	cpse	r18, r16
    456e:	b8 f7       	brcc	.-18     	; 0x455e <__ftoa_engine+0x174>
    4570:	7e 91       	ld	r23, -X
    4572:	70 61       	ori	r23, 0x10	; 16
    4574:	7d 93       	st	X+, r23
    4576:	30 f0       	brcs	.+12     	; 0x4584 <__ftoa_engine+0x19a>
    4578:	83 95       	inc	r24
    457a:	71 e3       	ldi	r23, 0x31	; 49
    457c:	7d 93       	st	X+, r23
    457e:	70 e3       	ldi	r23, 0x30	; 48
    4580:	2a 95       	dec	r18
    4582:	e1 f7       	brne	.-8      	; 0x457c <__ftoa_engine+0x192>
    4584:	11 24       	eor	r1, r1
    4586:	ef 90       	pop	r14
    4588:	ff 90       	pop	r15
    458a:	0f 91       	pop	r16
    458c:	1f 91       	pop	r17
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	99 27       	eor	r25, r25
    4594:	87 fd       	sbrc	r24, 7
    4596:	90 95       	com	r25
    4598:	08 95       	ret

0000459a <strnlen_P>:
    459a:	fc 01       	movw	r30, r24
    459c:	05 90       	lpm	r0, Z+
    459e:	61 50       	subi	r22, 0x01	; 1
    45a0:	70 40       	sbci	r23, 0x00	; 0
    45a2:	01 10       	cpse	r0, r1
    45a4:	d8 f7       	brcc	.-10     	; 0x459c <strnlen_P+0x2>
    45a6:	80 95       	com	r24
    45a8:	90 95       	com	r25
    45aa:	8e 0f       	add	r24, r30
    45ac:	9f 1f       	adc	r25, r31
    45ae:	08 95       	ret

000045b0 <strnlen>:
    45b0:	fc 01       	movw	r30, r24
    45b2:	61 50       	subi	r22, 0x01	; 1
    45b4:	70 40       	sbci	r23, 0x00	; 0
    45b6:	01 90       	ld	r0, Z+
    45b8:	01 10       	cpse	r0, r1
    45ba:	d8 f7       	brcc	.-10     	; 0x45b2 <strnlen+0x2>
    45bc:	80 95       	com	r24
    45be:	90 95       	com	r25
    45c0:	8e 0f       	add	r24, r30
    45c2:	9f 1f       	adc	r25, r31
    45c4:	08 95       	ret

000045c6 <fputc>:
    45c6:	0f 93       	push	r16
    45c8:	1f 93       	push	r17
    45ca:	cf 93       	push	r28
    45cc:	df 93       	push	r29
    45ce:	fb 01       	movw	r30, r22
    45d0:	23 81       	ldd	r18, Z+3	; 0x03
    45d2:	21 fd       	sbrc	r18, 1
    45d4:	03 c0       	rjmp	.+6      	; 0x45dc <fputc+0x16>
    45d6:	8f ef       	ldi	r24, 0xFF	; 255
    45d8:	9f ef       	ldi	r25, 0xFF	; 255
    45da:	28 c0       	rjmp	.+80     	; 0x462c <fputc+0x66>
    45dc:	22 ff       	sbrs	r18, 2
    45de:	16 c0       	rjmp	.+44     	; 0x460c <fputc+0x46>
    45e0:	46 81       	ldd	r20, Z+6	; 0x06
    45e2:	57 81       	ldd	r21, Z+7	; 0x07
    45e4:	24 81       	ldd	r18, Z+4	; 0x04
    45e6:	35 81       	ldd	r19, Z+5	; 0x05
    45e8:	42 17       	cp	r20, r18
    45ea:	53 07       	cpc	r21, r19
    45ec:	44 f4       	brge	.+16     	; 0x45fe <fputc+0x38>
    45ee:	a0 81       	ld	r26, Z
    45f0:	b1 81       	ldd	r27, Z+1	; 0x01
    45f2:	9d 01       	movw	r18, r26
    45f4:	2f 5f       	subi	r18, 0xFF	; 255
    45f6:	3f 4f       	sbci	r19, 0xFF	; 255
    45f8:	31 83       	std	Z+1, r19	; 0x01
    45fa:	20 83       	st	Z, r18
    45fc:	8c 93       	st	X, r24
    45fe:	26 81       	ldd	r18, Z+6	; 0x06
    4600:	37 81       	ldd	r19, Z+7	; 0x07
    4602:	2f 5f       	subi	r18, 0xFF	; 255
    4604:	3f 4f       	sbci	r19, 0xFF	; 255
    4606:	37 83       	std	Z+7, r19	; 0x07
    4608:	26 83       	std	Z+6, r18	; 0x06
    460a:	10 c0       	rjmp	.+32     	; 0x462c <fputc+0x66>
    460c:	eb 01       	movw	r28, r22
    460e:	09 2f       	mov	r16, r25
    4610:	18 2f       	mov	r17, r24
    4612:	00 84       	ldd	r0, Z+8	; 0x08
    4614:	f1 85       	ldd	r31, Z+9	; 0x09
    4616:	e0 2d       	mov	r30, r0
    4618:	09 95       	icall
    461a:	89 2b       	or	r24, r25
    461c:	e1 f6       	brne	.-72     	; 0x45d6 <fputc+0x10>
    461e:	8e 81       	ldd	r24, Y+6	; 0x06
    4620:	9f 81       	ldd	r25, Y+7	; 0x07
    4622:	01 96       	adiw	r24, 0x01	; 1
    4624:	9f 83       	std	Y+7, r25	; 0x07
    4626:	8e 83       	std	Y+6, r24	; 0x06
    4628:	81 2f       	mov	r24, r17
    462a:	90 2f       	mov	r25, r16
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	1f 91       	pop	r17
    4632:	0f 91       	pop	r16
    4634:	08 95       	ret

00004636 <sprintf>:
    4636:	0f 93       	push	r16
    4638:	1f 93       	push	r17
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
    4642:	2e 97       	sbiw	r28, 0x0e	; 14
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	cd bf       	out	0x3d, r28	; 61
    464e:	0d 89       	ldd	r16, Y+21	; 0x15
    4650:	1e 89       	ldd	r17, Y+22	; 0x16
    4652:	86 e0       	ldi	r24, 0x06	; 6
    4654:	8c 83       	std	Y+4, r24	; 0x04
    4656:	1a 83       	std	Y+2, r17	; 0x02
    4658:	09 83       	std	Y+1, r16	; 0x01
    465a:	8f ef       	ldi	r24, 0xFF	; 255
    465c:	9f e7       	ldi	r25, 0x7F	; 127
    465e:	9e 83       	std	Y+6, r25	; 0x06
    4660:	8d 83       	std	Y+5, r24	; 0x05
    4662:	ae 01       	movw	r20, r28
    4664:	47 5e       	subi	r20, 0xE7	; 231
    4666:	5f 4f       	sbci	r21, 0xFF	; 255
    4668:	6f 89       	ldd	r22, Y+23	; 0x17
    466a:	78 8d       	ldd	r23, Y+24	; 0x18
    466c:	ce 01       	movw	r24, r28
    466e:	01 96       	adiw	r24, 0x01	; 1
    4670:	dc d9       	rcall	.-3144   	; 0x3a2a <vfprintf>
    4672:	2f 81       	ldd	r18, Y+7	; 0x07
    4674:	38 85       	ldd	r19, Y+8	; 0x08
    4676:	f8 01       	movw	r30, r16
    4678:	e2 0f       	add	r30, r18
    467a:	f3 1f       	adc	r31, r19
    467c:	10 82       	st	Z, r1
    467e:	2e 96       	adiw	r28, 0x0e	; 14
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	f8 94       	cli
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	cd bf       	out	0x3d, r28	; 61
    468a:	df 91       	pop	r29
    468c:	cf 91       	pop	r28
    468e:	1f 91       	pop	r17
    4690:	0f 91       	pop	r16
    4692:	08 95       	ret

00004694 <__ultoa_invert>:
    4694:	fa 01       	movw	r30, r20
    4696:	aa 27       	eor	r26, r26
    4698:	28 30       	cpi	r18, 0x08	; 8
    469a:	51 f1       	breq	.+84     	; 0x46f0 <__ultoa_invert+0x5c>
    469c:	20 31       	cpi	r18, 0x10	; 16
    469e:	81 f1       	breq	.+96     	; 0x4700 <__ultoa_invert+0x6c>
    46a0:	e8 94       	clt
    46a2:	6f 93       	push	r22
    46a4:	6e 7f       	andi	r22, 0xFE	; 254
    46a6:	6e 5f       	subi	r22, 0xFE	; 254
    46a8:	7f 4f       	sbci	r23, 0xFF	; 255
    46aa:	8f 4f       	sbci	r24, 0xFF	; 255
    46ac:	9f 4f       	sbci	r25, 0xFF	; 255
    46ae:	af 4f       	sbci	r26, 0xFF	; 255
    46b0:	b1 e0       	ldi	r27, 0x01	; 1
    46b2:	3e d0       	rcall	.+124    	; 0x4730 <__ultoa_invert+0x9c>
    46b4:	b4 e0       	ldi	r27, 0x04	; 4
    46b6:	3c d0       	rcall	.+120    	; 0x4730 <__ultoa_invert+0x9c>
    46b8:	67 0f       	add	r22, r23
    46ba:	78 1f       	adc	r23, r24
    46bc:	89 1f       	adc	r24, r25
    46be:	9a 1f       	adc	r25, r26
    46c0:	a1 1d       	adc	r26, r1
    46c2:	68 0f       	add	r22, r24
    46c4:	79 1f       	adc	r23, r25
    46c6:	8a 1f       	adc	r24, r26
    46c8:	91 1d       	adc	r25, r1
    46ca:	a1 1d       	adc	r26, r1
    46cc:	6a 0f       	add	r22, r26
    46ce:	71 1d       	adc	r23, r1
    46d0:	81 1d       	adc	r24, r1
    46d2:	91 1d       	adc	r25, r1
    46d4:	a1 1d       	adc	r26, r1
    46d6:	20 d0       	rcall	.+64     	; 0x4718 <__ultoa_invert+0x84>
    46d8:	09 f4       	brne	.+2      	; 0x46dc <__ultoa_invert+0x48>
    46da:	68 94       	set
    46dc:	3f 91       	pop	r19
    46de:	2a e0       	ldi	r18, 0x0A	; 10
    46e0:	26 9f       	mul	r18, r22
    46e2:	11 24       	eor	r1, r1
    46e4:	30 19       	sub	r19, r0
    46e6:	30 5d       	subi	r19, 0xD0	; 208
    46e8:	31 93       	st	Z+, r19
    46ea:	de f6       	brtc	.-74     	; 0x46a2 <__ultoa_invert+0xe>
    46ec:	cf 01       	movw	r24, r30
    46ee:	08 95       	ret
    46f0:	46 2f       	mov	r20, r22
    46f2:	47 70       	andi	r20, 0x07	; 7
    46f4:	40 5d       	subi	r20, 0xD0	; 208
    46f6:	41 93       	st	Z+, r20
    46f8:	b3 e0       	ldi	r27, 0x03	; 3
    46fa:	0f d0       	rcall	.+30     	; 0x471a <__ultoa_invert+0x86>
    46fc:	c9 f7       	brne	.-14     	; 0x46f0 <__ultoa_invert+0x5c>
    46fe:	f6 cf       	rjmp	.-20     	; 0x46ec <__ultoa_invert+0x58>
    4700:	46 2f       	mov	r20, r22
    4702:	4f 70       	andi	r20, 0x0F	; 15
    4704:	40 5d       	subi	r20, 0xD0	; 208
    4706:	4a 33       	cpi	r20, 0x3A	; 58
    4708:	18 f0       	brcs	.+6      	; 0x4710 <__ultoa_invert+0x7c>
    470a:	49 5d       	subi	r20, 0xD9	; 217
    470c:	31 fd       	sbrc	r19, 1
    470e:	40 52       	subi	r20, 0x20	; 32
    4710:	41 93       	st	Z+, r20
    4712:	02 d0       	rcall	.+4      	; 0x4718 <__ultoa_invert+0x84>
    4714:	a9 f7       	brne	.-22     	; 0x4700 <__ultoa_invert+0x6c>
    4716:	ea cf       	rjmp	.-44     	; 0x46ec <__ultoa_invert+0x58>
    4718:	b4 e0       	ldi	r27, 0x04	; 4
    471a:	a6 95       	lsr	r26
    471c:	97 95       	ror	r25
    471e:	87 95       	ror	r24
    4720:	77 95       	ror	r23
    4722:	67 95       	ror	r22
    4724:	ba 95       	dec	r27
    4726:	c9 f7       	brne	.-14     	; 0x471a <__ultoa_invert+0x86>
    4728:	00 97       	sbiw	r24, 0x00	; 0
    472a:	61 05       	cpc	r22, r1
    472c:	71 05       	cpc	r23, r1
    472e:	08 95       	ret
    4730:	9b 01       	movw	r18, r22
    4732:	ac 01       	movw	r20, r24
    4734:	0a 2e       	mov	r0, r26
    4736:	06 94       	lsr	r0
    4738:	57 95       	ror	r21
    473a:	47 95       	ror	r20
    473c:	37 95       	ror	r19
    473e:	27 95       	ror	r18
    4740:	ba 95       	dec	r27
    4742:	c9 f7       	brne	.-14     	; 0x4736 <__ultoa_invert+0xa2>
    4744:	62 0f       	add	r22, r18
    4746:	73 1f       	adc	r23, r19
    4748:	84 1f       	adc	r24, r20
    474a:	95 1f       	adc	r25, r21
    474c:	a0 1d       	adc	r26, r0
    474e:	08 95       	ret

00004750 <__do_global_dtors>:
    4750:	12 e0       	ldi	r17, 0x02	; 2
    4752:	c9 ec       	ldi	r28, 0xC9	; 201
    4754:	d2 e0       	ldi	r29, 0x02	; 2
    4756:	03 c0       	rjmp	.+6      	; 0x475e <__do_global_dtors+0xe>
    4758:	fe 01       	movw	r30, r28
    475a:	11 dd       	rcall	.-1502   	; 0x417e <__tablejump2__>
    475c:	21 96       	adiw	r28, 0x01	; 1
    475e:	ca 3c       	cpi	r28, 0xCA	; 202
    4760:	d1 07       	cpc	r29, r17
    4762:	d1 f7       	brne	.-12     	; 0x4758 <__do_global_dtors+0x8>
    4764:	f8 94       	cli

00004766 <__stop_program>:
    4766:	ff cf       	rjmp	.-2      	; 0x4766 <__stop_program>
