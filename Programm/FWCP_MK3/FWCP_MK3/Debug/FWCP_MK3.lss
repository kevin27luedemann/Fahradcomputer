
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000034e  00800100  00009ec2  00009f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a62  0080044e  0080044e  0000a2a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a2a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000610  00000000  00000000  0000a340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ec9c  00000000  00000000  0000a950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000217b  00000000  00000000  000195ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f37  00000000  00000000  0001b767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bf8  00000000  00000000  000216a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d8b  00000000  00000000  00023298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dd95  00000000  00000000  00025023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e0  00000000  00000000  00032db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c3       	rjmp	.+1712   	; 0x6b2 <__dtors_end>
       2:	00 00       	nop
       4:	80 c3       	rjmp	.+1792   	; 0x706 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c3       	rjmp	.+1788   	; 0x706 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c3       	rjmp	.+1784   	; 0x706 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c3       	rjmp	.+1780   	; 0x706 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c3       	rjmp	.+1776   	; 0x706 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c3       	rjmp	.+1772   	; 0x706 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c3       	rjmp	.+1768   	; 0x706 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c3       	rjmp	.+1764   	; 0x706 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c3       	rjmp	.+1760   	; 0x706 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 ab 2f 	jmp	0x5f56	; 0x5f56 <__vector_11>
      30:	6a c3       	rjmp	.+1748   	; 0x706 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c7 2f 	jmp	0x5f8e	; 0x5f8e <__vector_13>
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c3       	rjmp	.+1736   	; 0x706 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__vector_16>
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c3       	rjmp	.+1720   	; 0x706 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 47 30 	jmp	0x608e	; 0x608e <__vector_20>
      54:	58 c3       	rjmp	.+1712   	; 0x706 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c3       	rjmp	.+1708   	; 0x706 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c3       	rjmp	.+1704   	; 0x706 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c3       	rjmp	.+1700   	; 0x706 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c3       	rjmp	.+1696   	; 0x706 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c3       	rjmp	.+1692   	; 0x706 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c3       	rjmp	.+1688   	; 0x706 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c3       	rjmp	.+1684   	; 0x706 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c3       	rjmp	.+1680   	; 0x706 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c3       	rjmp	.+1676   	; 0x706 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c3       	rjmp	.+1672   	; 0x706 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c3       	rjmp	.+1668   	; 0x706 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c3       	rjmp	.+1664   	; 0x706 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c3       	rjmp	.+1660   	; 0x706 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b 0b       	sbc	r23, r27
      8e:	82 0b       	sbc	r24, r18
      90:	cf 0c       	add	r12, r15
      92:	f2 0b       	sbc	r31, r18
      94:	cf 0c       	add	r12, r15
      96:	cf 0c       	add	r12, r15
      98:	cf 0c       	add	r12, r15
      9a:	c7 0c       	add	r12, r7
      9c:	cf 0c       	add	r12, r15
      9e:	cf 0c       	add	r12, r15
      a0:	cf 0c       	add	r12, r15
      a2:	cf 0c       	add	r12, r15
      a4:	cf 0c       	add	r12, r15
      a6:	cf 0c       	add	r12, r15
      a8:	cf 0c       	add	r12, r15
      aa:	cf 0c       	add	r12, r15
      ac:	cf 0c       	add	r12, r15
      ae:	cf 0c       	add	r12, r15
      b0:	cf 0c       	add	r12, r15
      b2:	cf 0c       	add	r12, r15
      b4:	cf 0c       	add	r12, r15
      b6:	cf 0c       	add	r12, r15
      b8:	cf 0c       	add	r12, r15
      ba:	cf 0c       	add	r12, r15
      bc:	cf 0c       	add	r12, r15
      be:	cf 0c       	add	r12, r15
      c0:	cf 0c       	add	r12, r15
      c2:	cf 0c       	add	r12, r15
      c4:	cf 0c       	add	r12, r15
      c6:	cf 0c       	add	r12, r15
      c8:	cf 0c       	add	r12, r15
      ca:	cf 0c       	add	r12, r15
      cc:	cf 0c       	add	r12, r15
      ce:	cf 0c       	add	r12, r15
      d0:	cf 0c       	add	r12, r15
      d2:	cf 0c       	add	r12, r15
      d4:	cf 0c       	add	r12, r15
      d6:	cf 0c       	add	r12, r15
      d8:	cf 0c       	add	r12, r15
      da:	cf 0c       	add	r12, r15
      dc:	cf 0c       	add	r12, r15
      de:	cf 0c       	add	r12, r15
      e0:	cf 0c       	add	r12, r15
      e2:	cf 0c       	add	r12, r15
      e4:	cf 0c       	add	r12, r15
      e6:	cf 0c       	add	r12, r15
      e8:	cf 0c       	add	r12, r15
      ea:	cf 0c       	add	r12, r15
      ec:	cf 0c       	add	r12, r15
      ee:	cf 0c       	add	r12, r15
      f0:	78 0c       	add	r7, r8
      f2:	7e 0c       	add	r7, r14
      f4:	8f 0c       	add	r8, r15
      f6:	a0 0c       	add	r10, r0
      f8:	b5 0c       	add	r11, r5
      fa:	14 26       	eor	r1, r20
      fc:	e7 24       	eor	r14, r7
      fe:	f6 24       	eor	r15, r6
     100:	f1 24       	eor	r15, r1
     102:	f1 24       	eor	r15, r1
     104:	f1 24       	eor	r15, r1
     106:	f1 24       	eor	r15, r1
     108:	f1 24       	eor	r15, r1
     10a:	f1 24       	eor	r15, r1
     10c:	f1 24       	eor	r15, r1
     10e:	f1 24       	eor	r15, r1
     110:	f1 24       	eor	r15, r1
     112:	f1 24       	eor	r15, r1
     114:	22 26       	eor	r2, r18
     116:	f1 24       	eor	r15, r1
     118:	f1 24       	eor	r15, r1
     11a:	f1 24       	eor	r15, r1
     11c:	9d 24       	eor	r9, r13
     11e:	f1 24       	eor	r15, r1
     120:	f6 24       	eor	r15, r6
     122:	f1 24       	eor	r15, r1
     124:	f1 24       	eor	r15, r1
     126:	e5 25       	eor	r30, r5
     128:	73 27       	eor	r23, r19
     12a:	75 27       	eor	r23, r21
     12c:	75 27       	eor	r23, r21
     12e:	75 27       	eor	r23, r21
     130:	75 27       	eor	r23, r21
     132:	75 27       	eor	r23, r21
     134:	75 27       	eor	r23, r21
     136:	71 27       	eor	r23, r17
     138:	75 27       	eor	r23, r21
     13a:	75 27       	eor	r23, r21
     13c:	75 27       	eor	r23, r21
     13e:	75 27       	eor	r23, r21
     140:	75 27       	eor	r23, r21
     142:	78 27       	eor	r23, r24
     144:	77 27       	eor	r23, r23
     146:	61 27       	eor	r22, r17
     148:	63 27       	eor	r22, r19
     14a:	65 27       	eor	r22, r21
     14c:	67 27       	eor	r22, r23
     14e:	69 27       	eor	r22, r25
     150:	6b 27       	eor	r22, r27
     152:	6d 27       	eor	r22, r29
     154:	6f 27       	eor	r22, r31
     156:	9a 33       	cpi	r25, 0x3A	; 58
     158:	aa 33       	cpi	r26, 0x3A	; 58
     15a:	aa 33       	cpi	r26, 0x3A	; 58
     15c:	aa 33       	cpi	r26, 0x3A	; 58
     15e:	aa 33       	cpi	r26, 0x3A	; 58
     160:	aa 33       	cpi	r26, 0x3A	; 58
     162:	aa 33       	cpi	r26, 0x3A	; 58
     164:	aa 33       	cpi	r26, 0x3A	; 58
     166:	aa 33       	cpi	r26, 0x3A	; 58
     168:	aa 33       	cpi	r26, 0x3A	; 58
     16a:	aa 33       	cpi	r26, 0x3A	; 58
     16c:	aa 33       	cpi	r26, 0x3A	; 58
     16e:	aa 33       	cpi	r26, 0x3A	; 58
     170:	aa 33       	cpi	r26, 0x3A	; 58
     172:	aa 33       	cpi	r26, 0x3A	; 58
     174:	aa 33       	cpi	r26, 0x3A	; 58
     176:	aa 33       	cpi	r26, 0x3A	; 58
     178:	aa 33       	cpi	r26, 0x3A	; 58
     17a:	aa 33       	cpi	r26, 0x3A	; 58
     17c:	aa 33       	cpi	r26, 0x3A	; 58
     17e:	aa 33       	cpi	r26, 0x3A	; 58
     180:	aa 33       	cpi	r26, 0x3A	; 58
     182:	aa 33       	cpi	r26, 0x3A	; 58
     184:	aa 33       	cpi	r26, 0x3A	; 58
     186:	aa 33       	cpi	r26, 0x3A	; 58
     188:	aa 33       	cpi	r26, 0x3A	; 58
     18a:	aa 33       	cpi	r26, 0x3A	; 58
     18c:	aa 33       	cpi	r26, 0x3A	; 58
     18e:	aa 33       	cpi	r26, 0x3A	; 58
     190:	aa 33       	cpi	r26, 0x3A	; 58
     192:	aa 33       	cpi	r26, 0x3A	; 58
     194:	aa 33       	cpi	r26, 0x3A	; 58
     196:	aa 33       	cpi	r26, 0x3A	; 58
     198:	aa 33       	cpi	r26, 0x3A	; 58
     19a:	aa 33       	cpi	r26, 0x3A	; 58
     19c:	aa 33       	cpi	r26, 0x3A	; 58
     19e:	aa 33       	cpi	r26, 0x3A	; 58
     1a0:	aa 33       	cpi	r26, 0x3A	; 58
     1a2:	aa 33       	cpi	r26, 0x3A	; 58
     1a4:	aa 33       	cpi	r26, 0x3A	; 58
     1a6:	aa 33       	cpi	r26, 0x3A	; 58
     1a8:	aa 33       	cpi	r26, 0x3A	; 58
     1aa:	aa 33       	cpi	r26, 0x3A	; 58
     1ac:	aa 33       	cpi	r26, 0x3A	; 58
     1ae:	aa 33       	cpi	r26, 0x3A	; 58
     1b0:	aa 33       	cpi	r26, 0x3A	; 58
     1b2:	aa 33       	cpi	r26, 0x3A	; 58
     1b4:	aa 33       	cpi	r26, 0x3A	; 58
     1b6:	aa 33       	cpi	r26, 0x3A	; 58
     1b8:	aa 33       	cpi	r26, 0x3A	; 58
     1ba:	aa 33       	cpi	r26, 0x3A	; 58
     1bc:	aa 33       	cpi	r26, 0x3A	; 58
     1be:	76 33       	cpi	r23, 0x36	; 54
     1c0:	aa 33       	cpi	r26, 0x3A	; 58
     1c2:	aa 33       	cpi	r26, 0x3A	; 58
     1c4:	aa 33       	cpi	r26, 0x3A	; 58
     1c6:	aa 33       	cpi	r26, 0x3A	; 58
     1c8:	aa 33       	cpi	r26, 0x3A	; 58
     1ca:	aa 33       	cpi	r26, 0x3A	; 58
     1cc:	aa 33       	cpi	r26, 0x3A	; 58
     1ce:	3d 33       	cpi	r19, 0x3D	; 61
     1d0:	39 33       	cpi	r19, 0x39	; 57
     1d2:	aa 33       	cpi	r26, 0x3A	; 58
     1d4:	60 33       	cpi	r22, 0x30	; 48
     1d6:	aa 33       	cpi	r26, 0x3A	; 58
     1d8:	aa 33       	cpi	r26, 0x3A	; 58
     1da:	4a 33       	cpi	r20, 0x3A	; 58
     1dc:	aa 33       	cpi	r26, 0x3A	; 58
     1de:	aa 33       	cpi	r26, 0x3A	; 58
     1e0:	8a 33       	cpi	r24, 0x3A	; 58
     1e2:	e3 3c       	cpi	r30, 0xC3	; 195
     1e4:	09 3d       	cpi	r16, 0xD9	; 217
     1e6:	30 3d       	cpi	r19, 0xD0	; 208
     1e8:	58 3d       	cpi	r21, 0xD8	; 216
     1ea:	7f 3d       	cpi	r23, 0xDF	; 223
     1ec:	a9 3d       	cpi	r26, 0xD9	; 217
     1ee:	d2 3d       	cpi	r29, 0xD2	; 210
     1f0:	fc 3d       	cpi	r31, 0xDC	; 220
     1f2:	73 3e       	cpi	r23, 0xE3	; 227
     1f4:	9d 3e       	cpi	r25, 0xED	; 237
     1f6:	05 a8       	ldd	r0, Z+53	; 0x35
     1f8:	4c cd       	rjmp	.-1384   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     1fa:	b2 d4       	rcall	.+2404   	; 0xb60 <_ZN6BMP18018bmp180_getpressureEv+0x6a>
     1fc:	4e b9       	out	0x0e, r20	; 14
     1fe:	38 36       	cpi	r19, 0x68	; 104
     200:	a9 02       	muls	r26, r25
     202:	0c 50       	subi	r16, 0x0C	; 12
     204:	b9 91       	ld	r27, Y+
     206:	86 88       	ldd	r8, Z+22	; 0x16
     208:	08 3c       	cpi	r16, 0xC8	; 200
     20a:	a6 aa       	std	Z+54, r10	; 0x36
     20c:	aa 2a       	or	r10, r26
     20e:	be 00       	.word	0x00be	; ????
     210:	00 00       	nop
     212:	80 3f       	cpi	r24, 0xF0	; 240
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <_ZN6BMP18021bmp180_gettemperatureEv+0x130>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__trampolines_end>:
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	f8 fc       	.word	0xfcf8	; ????
     29a:	fe 1e       	adc	r15, r30
     29c:	07 07       	cpc	r16, r23
     29e:	07 07       	cpc	r16, r23
     2a0:	1e fe       	.word	0xfe1e	; ????
     2a2:	fc f8       	.word	0xf8fc	; ????
     2a4:	f0 00       	.word	0x00f0	; ????
     2a6:	00 07       	cpc	r16, r16
     2a8:	0f 3f       	cpi	r16, 0xFF	; 255
     2aa:	3f 7c       	andi	r19, 0xCF	; 207
     2ac:	70 70       	andi	r23, 0x00	; 0
     2ae:	70 70       	andi	r23, 0x00	; 0
     2b0:	7c 3f       	cpi	r23, 0xFC	; 252
     2b2:	1f 1f       	adc	r17, r31
     2b4:	07 00       	.word	0x0007	; ????
     2b6:	00 00       	nop
     2b8:	00 06       	cpc	r0, r16
     2ba:	07 07       	cpc	r16, r23
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
	...
     2cc:	7f 7f       	andi	r23, 0xFF	; 255
     2ce:	7f 7f       	andi	r23, 0xFF	; 255
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 38       	cpi	r16, 0x80	; 128
     2d8:	3c 3e       	cpi	r19, 0xEC	; 236
     2da:	3e 0f       	add	r19, r30
     2dc:	07 07       	cpc	r16, r23
     2de:	07 cf       	rjmp	.-498    	; 0xee <__SREG__+0xaf>
     2e0:	ff fe       	.word	0xfeff	; ????
     2e2:	fe 38       	cpi	r31, 0x8E	; 142
     2e4:	00 00       	nop
     2e6:	00 40       	sbci	r16, 0x00	; 0
     2e8:	40 60       	ori	r20, 0x00	; 0
     2ea:	70 78       	andi	r23, 0x80	; 128
     2ec:	7c 7e       	andi	r23, 0xEC	; 236
     2ee:	7f 77       	andi	r23, 0x7F	; 127
     2f0:	73 71       	andi	r23, 0x13	; 19
     2f2:	70 70       	andi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 18       	sub	r0, r0
     2f8:	1c 1e       	adc	r1, r28
     2fa:	1e 0f       	add	r17, r30
     2fc:	c7 c7       	rjmp	.+3982   	; 0x128c <send_cmd+0xe>
     2fe:	e7 ff       	sbrs	r30, 7
     300:	fe be       	out	0x3e, r15	; 62
     302:	9c 00       	.word	0x009c	; ????
     304:	00 00       	nop
     306:	00 0c       	add	r0, r0
     308:	1c 3c       	cpi	r17, 0xCC	; 204
     30a:	3c 78       	andi	r19, 0x8C	; 140
     30c:	70 70       	andi	r23, 0x00	; 0
     30e:	70 79       	andi	r23, 0x90	; 144
     310:	7f 3f       	cpi	r23, 0xFF	; 255
     312:	1f 0f       	add	r17, r31
     314:	00 00       	nop
     316:	00 00       	nop
     318:	80 c0       	rjmp	.+256    	; 0x41a <_ZL7font5x8+0x44>
     31a:	e0 70       	andi	r30, 0x00	; 0
     31c:	38 1c       	adc	r3, r8
     31e:	1e ff       	.word	0xff1e	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff 00       	.word	0x00ff	; ????
     324:	00 00       	nop
     326:	06 07       	cpc	r16, r22
     328:	07 07       	cpc	r16, r23
     32a:	06 06       	cpc	r0, r22
     32c:	06 06       	cpc	r0, r22
     32e:	06 7f       	andi	r16, 0xF6	; 246
     330:	7f 7f       	andi	r23, 0xFF	; 255
     332:	7f 06       	cpc	r7, r31
     334:	06 00       	.word	0x0006	; ????
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	f0 ff       	sbrs	r31, 0
     33c:	ff ff       	.word	0xffff	; ????
     33e:	e7 e7       	ldi	r30, 0x77	; 119
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	c7 87       	std	Z+15, r28	; 0x0f
     344:	00 00       	nop
     346:	00 00       	nop
     348:	38 78       	andi	r19, 0x88	; 136
     34a:	71 70       	andi	r23, 0x01	; 1
     34c:	70 70       	andi	r23, 0x00	; 0
     34e:	70 70       	andi	r23, 0x00	; 0
     350:	39 3f       	cpi	r19, 0xF9	; 249
     352:	3f 1f       	adc	r19, r31
     354:	0f 00       	.word	0x000f	; ????
     356:	00 80       	ld	r0, Z
     358:	e0 f0       	brcs	.+56     	; 0x392 <__trampolines_end+0xfc>
     35a:	f8 fc       	.word	0xfcf8	; ????
     35c:	7f 7f       	andi	r23, 0xFF	; 255
     35e:	6f 67       	ori	r22, 0x7F	; 127
     360:	e1 e1       	ldi	r30, 0x11	; 17
     362:	c0 80       	ld	r12, Z
     364:	00 00       	nop
     366:	00 0f       	add	r16, r16
     368:	1f 3f       	cpi	r17, 0xFF	; 255
     36a:	3f 78       	andi	r19, 0x8F	; 143
     36c:	70 70       	andi	r23, 0x00	; 0
     36e:	70 70       	andi	r23, 0x00	; 0
     370:	78 3f       	cpi	r23, 0xF8	; 248
     372:	3f 1f       	adc	r19, r31
     374:	0f 00       	.word	0x000f	; ????
     376:	00 07       	cpc	r16, r16
     378:	07 07       	cpc	r16, r23
     37a:	07 07       	cpc	r16, r23
     37c:	c7 e7       	ldi	r28, 0x77	; 119
     37e:	f7 ff       	sbrs	r31, 7
     380:	7f 3f       	cpi	r23, 0xFF	; 255
     382:	1f 07       	cpc	r17, r31
     384:	03 01       	movw	r0, r6
     386:	00 20       	and	r0, r0
     388:	38 7c       	andi	r19, 0xC8	; 200
     38a:	7e 3f       	cpi	r23, 0xFE	; 254
     38c:	0f 07       	cpc	r16, r31
     38e:	03 00       	.word	0x0003	; ????
	...
     398:	00 1c       	adc	r0, r0
     39a:	be fe       	.word	0xfebe	; ????
     39c:	ff e7       	ldi	r31, 0x7F	; 127
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <_ZN6BMP18018bmp180_getpressureEv+0x30>
     3a0:	e7 ff       	sbrs	r30, 7
     3a2:	fe be       	out	0x3e, r15	; 62
     3a4:	1c 00       	.word	0x001c	; ????
     3a6:	00 00       	nop
     3a8:	0e 3f       	cpi	r16, 0xFE	; 254
     3aa:	3f 7f       	andi	r19, 0xFF	; 255
     3ac:	71 60       	ori	r23, 0x01	; 1
     3ae:	60 60       	ori	r22, 0x00	; 0
     3b0:	71 7f       	andi	r23, 0xF1	; 241
     3b2:	3f 3f       	cpi	r19, 0xFF	; 255
     3b4:	0f 00       	.word	0x000f	; ????
     3b6:	00 78       	andi	r16, 0x80	; 128
     3b8:	fc fe       	.word	0xfefc	; ????
     3ba:	fe 8f       	std	Y+30, r31	; 0x1e
     3bc:	07 07       	cpc	r16, r23
     3be:	07 07       	cpc	r16, r23
     3c0:	8f fe       	.word	0xfe8f	; ????
     3c2:	fe fc       	.word	0xfcfe	; ????
     3c4:	f8 00       	.word	0x00f8	; ????
     3c6:	00 00       	nop
     3c8:	00 01       	movw	r0, r0
     3ca:	43 43       	sbci	r20, 0x33	; 51
     3cc:	73 7b       	andi	r23, 0xB3	; 179
     3ce:	7f 7f       	andi	r23, 0xFF	; 255
     3d0:	1f 0f       	add	r17, r31
     3d2:	07 03       	mulsu	r16, r23
	...

000003d6 <_ZL7font5x8>:
     3d6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     3e6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     3f6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     406:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     416:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     426:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     436:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     446:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     456:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     466:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     476:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     486:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     496:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     4a6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     4b6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     4c6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     4d6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     4e6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     4f6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     506:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     516:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     526:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     536:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     546:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     556:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     566:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     576:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     586:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     596:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     5a6:	00 10 08 08 10 08                                   ......

000005ac <__c.2179>:
     5ac:	6e 61 6e 00                                         nan.

000005b0 <__c.2177>:
     5b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     600:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     610:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     620:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     630:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     640:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     650:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     660:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     670:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     680:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     690:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000006ae <__ctors_start>:
     6ae:	e4 40       	sbci	r30, 0x04	; 4

000006b0 <__ctors_end>:
     6b0:	07 41       	sbci	r16, 0x17	; 23

000006b2 <__dtors_end>:
     6b2:	11 24       	eor	r1, r1
     6b4:	1f be       	out	0x3f, r1	; 63
     6b6:	cf ef       	ldi	r28, 0xFF	; 255
     6b8:	d0 e4       	ldi	r29, 0x40	; 64
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	cd bf       	out	0x3d, r28	; 61

000006be <__do_copy_data>:
     6be:	14 e0       	ldi	r17, 0x04	; 4
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	e2 ec       	ldi	r30, 0xC2	; 194
     6c6:	fe e9       	ldi	r31, 0x9E	; 158
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	0b bf       	out	0x3b, r16	; 59
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__do_copy_data+0x14>
     6ce:	07 90       	elpm	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	ae 34       	cpi	r26, 0x4E	; 78
     6d4:	b1 07       	cpc	r27, r17
     6d6:	d9 f7       	brne	.-10     	; 0x6ce <__do_copy_data+0x10>

000006d8 <__do_clear_bss>:
     6d8:	2e e0       	ldi	r18, 0x0E	; 14
     6da:	ae e4       	ldi	r26, 0x4E	; 78
     6dc:	b4 e0       	ldi	r27, 0x04	; 4
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <.do_clear_bss_start>

000006e0 <.do_clear_bss_loop>:
     6e0:	1d 92       	st	X+, r1

000006e2 <.do_clear_bss_start>:
     6e2:	a0 3b       	cpi	r26, 0xB0	; 176
     6e4:	b2 07       	cpc	r27, r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <.do_clear_bss_loop>

000006e8 <__do_global_ctors>:
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d3 e0       	ldi	r29, 0x03	; 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__do_global_ctors+0x10>
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <__tablejump2__>
     6f8:	c7 35       	cpi	r28, 0x57	; 87
     6fa:	d1 07       	cpc	r29, r17
     6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__do_global_ctors+0x8>
     6fe:	0e 94 42 3a 	call	0x7484	; 0x7484 <main>
     702:	0c 94 55 4f 	jmp	0x9eaa	; 0x9eaa <__do_global_dtors>

00000706 <__bad_interrupt>:
     706:	7c cc       	rjmp	.-1800   	; 0x0 <__vectors>

00000708 <_ZN6BMP180D1Ev>:
	bmp180_getcalibration();
	
} //BMP180

// default destructor
BMP180::~BMP180()
     708:	8e 96       	adiw	r24, 0x2e	; 46
     70a:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <_ZN3I2CD1Ev>
     70e:	08 95       	ret

00000710 <_ZN6BMP18015bmp180_writememEhh>:
{
} //~BMP180bmp180_regac2

void BMP180::bmp180_writemem(uint8_t reg, uint8_t value){
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	06 2f       	mov	r16, r22
     71a:	14 2f       	mov	r17, r20
	i2c.twi_start();
     71c:	ec 01       	movw	r28, r24
     71e:	ae 96       	adiw	r28, 0x2e	; 46
     720:	ce 01       	movw	r24, r28
     722:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN3I2C9twi_startEv>
	i2c.twi_write(BMP180_ADDR | I2C_WRITE);
     726:	6e ee       	ldi	r22, 0xEE	; 238
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     72e:	60 2f       	mov	r22, r16
     730:	ce 01       	movw	r24, r28
     732:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(value);
     736:	61 2f       	mov	r22, r17
     738:	ce 01       	movw	r24, r28
     73a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 49 26 	call	0x4c92	; 0x4c92 <_ZN3I2C8twi_stopEv>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <_ZN6BMP1806readS8Eh>:

int8_t BMP180::readS8(uint8_t reg){
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	16 2f       	mov	r17, r22
	i2c.twi_start();
     756:	ec 01       	movw	r28, r24
     758:	ae 96       	adiw	r28, 0x2e	; 46
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     760:	6e ee       	ldi	r22, 0xEE	; 238
     762:	ce 01       	movw	r24, r28
     764:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     768:	61 2f       	mov	r22, r17
     76a:	ce 01       	movw	r24, r28
     76c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     770:	ce 01       	movw	r24, r28
     772:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     776:	6f ee       	ldi	r22, 0xEF	; 239
     778:	ce 01       	movw	r24, r28
     77a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
	int8_t ergeb = i2c.twi_read(0);
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	ce 01       	movw	r24, r28
     782:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN3I2C8twi_readEh>
     786:	18 2f       	mov	r17, r24
	i2c.twi_stop();
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 49 26 	call	0x4c92	; 0x4c92 <_ZN3I2C8twi_stopEv>
	return ergeb;
}
     78e:	81 2f       	mov	r24, r17
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	08 95       	ret

00000798 <_ZN6BMP1806readU8Eh>:
int16_t BMP180::readS16(uint8_t reg){
	int8_t	hi = readS8(reg);
	uint8_t	lo = readU8(reg+1);
	return ( hi << 8) + lo;
}
uint8_t BMP180::readU8(uint8_t reg){
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	16 2f       	mov	r17, r22
		i2c.twi_start();
     7a0:	ec 01       	movw	r28, r24
     7a2:	ae 96       	adiw	r28, 0x2e	; 46
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN3I2C9twi_startEv>
		i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     7aa:	6e ee       	ldi	r22, 0xEE	; 238
     7ac:	ce 01       	movw	r24, r28
     7ae:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
		i2c.twi_write(reg);
     7b2:	61 2f       	mov	r22, r17
     7b4:	ce 01       	movw	r24, r28
     7b6:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
		i2c.twi_start();
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN3I2C9twi_startEv>
		i2c.twi_write((BMP180_ADDR | I2C_READ));
     7c0:	6f ee       	ldi	r22, 0xEF	; 239
     7c2:	ce 01       	movw	r24, r28
     7c4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
		uint8_t ergeb = i2c.twi_read(0);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	ce 01       	movw	r24, r28
     7cc:	0e 94 5d 26 	call	0x4cba	; 0x4cba <_ZN3I2C8twi_readEh>
     7d0:	18 2f       	mov	r17, r24
		i2c.twi_stop();
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 49 26 	call	0x4c92	; 0x4c92 <_ZN3I2C8twi_stopEv>
		return ergeb;
}
     7d8:	81 2f       	mov	r24, r17
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	08 95       	ret

000007e2 <_ZN6BMP1807readS16Eh>:
	i2c.twi_write((BMP180_ADDR | I2C_READ));
	int8_t ergeb = i2c.twi_read(0);
	i2c.twi_stop();
	return ergeb;
}
int16_t BMP180::readS16(uint8_t reg){
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	8c 01       	movw	r16, r24
     7ec:	d6 2f       	mov	r29, r22
	int8_t	hi = readS8(reg);
     7ee:	af df       	rcall	.-162    	; 0x74e <_ZN6BMP1806readS8Eh>
     7f0:	c8 2f       	mov	r28, r24
	uint8_t	lo = readU8(reg+1);
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	6d 0f       	add	r22, r29
     7f6:	c8 01       	movw	r24, r16
     7f8:	cf df       	rcall	.-98     	; 0x798 <_ZN6BMP1806readU8Eh>
	return ( hi << 8) + lo;
     7fa:	2c 2f       	mov	r18, r28
     7fc:	cc 0f       	add	r28, r28
     7fe:	33 0b       	sbc	r19, r19
     800:	32 2f       	mov	r19, r18
     802:	22 27       	eor	r18, r18
}
     804:	a9 01       	movw	r20, r18
     806:	48 0f       	add	r20, r24
     808:	51 1d       	adc	r21, r1
     80a:	ca 01       	movw	r24, r20
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <_ZN6BMP1807readU16Eh>:
		i2c.twi_write((BMP180_ADDR | I2C_READ));
		uint8_t ergeb = i2c.twi_read(0);
		i2c.twi_stop();
		return ergeb;
}
uint16_t BMP180::readU16(uint8_t reg){
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	8c 01       	movw	r16, r24
     820:	d6 2f       	mov	r29, r22
	uint8_t	hi = readU8(reg);
     822:	ba df       	rcall	.-140    	; 0x798 <_ZN6BMP1806readU8Eh>
     824:	c8 2f       	mov	r28, r24
	uint8_t	lo = readU8(reg+1);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	6d 0f       	add	r22, r29
     82a:	c8 01       	movw	r24, r16
     82c:	b5 df       	rcall	.-150    	; 0x798 <_ZN6BMP1806readU8Eh>
	return (hi << 8) + lo;
     82e:	2c 2f       	mov	r18, r28
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	32 2f       	mov	r19, r18
     834:	22 27       	eor	r18, r18
}
     836:	a9 01       	movw	r20, r18
     838:	48 0f       	add	r20, r24
     83a:	51 1d       	adc	r21, r1
     83c:	ca 01       	movw	r24, r20
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <_ZN6BMP1807readU32Eh>:
uint32_t BMP180::readU32(uint8_t reg){
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	7c 01       	movw	r14, r24
     856:	16 2f       	mov	r17, r22
	uint8_t hix	= readS8(reg);
     858:	7a df       	rcall	.-268    	; 0x74e <_ZN6BMP1806readS8Eh>
     85a:	c8 2f       	mov	r28, r24
	uint8_t hi	= readU8(reg+1);
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	61 0f       	add	r22, r17
     860:	c7 01       	movw	r24, r14
     862:	9a df       	rcall	.-204    	; 0x798 <_ZN6BMP1806readU8Eh>
     864:	d8 2f       	mov	r29, r24
	uint8_t lo	= readU8(reg+2);
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	61 0f       	add	r22, r17
     86a:	c7 01       	movw	r24, r14
     86c:	95 df       	rcall	.-214    	; 0x798 <_ZN6BMP1806readU8Eh>
	return (((int32_t) hix << 16) + ((uint32_t) hi << 8) +(uint32_t) lo);
     86e:	4d 2f       	mov	r20, r29
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	76 2f       	mov	r23, r22
     878:	65 2f       	mov	r22, r21
     87a:	54 2f       	mov	r21, r20
     87c:	44 27       	eor	r20, r20
     87e:	48 0f       	add	r20, r24
     880:	51 1d       	adc	r21, r1
     882:	61 1d       	adc	r22, r1
     884:	71 1d       	adc	r23, r1
     886:	8c 2f       	mov	r24, r28
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	a0 e0       	ldi	r26, 0x00	; 0
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	dc 01       	movw	r26, r24
     890:	99 27       	eor	r25, r25
     892:	88 27       	eor	r24, r24
     894:	8a 01       	movw	r16, r20
     896:	9b 01       	movw	r18, r22
     898:	08 0f       	add	r16, r24
     89a:	19 1f       	adc	r17, r25
     89c:	2a 1f       	adc	r18, r26
     89e:	3b 1f       	adc	r19, r27
     8a0:	c9 01       	movw	r24, r18
     8a2:	b8 01       	movw	r22, r16
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <_ZN6BMP18021bmp180_getcalibrationEv>:

void BMP180::bmp180_getcalibration() {
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	bmp180_regac1	= readS16(BMP180_RAC1);
     8b8:	6a ea       	ldi	r22, 0xAA	; 170
     8ba:	93 df       	rcall	.-218    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8bc:	99 8b       	std	Y+17, r25	; 0x11
     8be:	88 8b       	std	Y+16, r24	; 0x10
	bmp180_regac2	= readS16(BMP180_RAC2);
     8c0:	6c ea       	ldi	r22, 0xAC	; 172
     8c2:	ce 01       	movw	r24, r28
     8c4:	8e df       	rcall	.-228    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8c6:	9b 8b       	std	Y+19, r25	; 0x13
     8c8:	8a 8b       	std	Y+18, r24	; 0x12
	bmp180_regac3	= readS16(BMP180_RAC3);
     8ca:	6e ea       	ldi	r22, 0xAE	; 174
     8cc:	ce 01       	movw	r24, r28
     8ce:	89 df       	rcall	.-238    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8d0:	9d 8b       	std	Y+21, r25	; 0x15
     8d2:	8c 8b       	std	Y+20, r24	; 0x14
	bmp180_regac4	= readU16(BMP180_RAC4);
     8d4:	60 eb       	ldi	r22, 0xB0	; 176
     8d6:	ce 01       	movw	r24, r28
     8d8:	9e df       	rcall	.-196    	; 0x816 <_ZN6BMP1807readU16Eh>
     8da:	99 a3       	std	Y+33, r25	; 0x21
     8dc:	88 a3       	std	Y+32, r24	; 0x20
	bmp180_regac5	= readU16(BMP180_RAC5);
     8de:	62 eb       	ldi	r22, 0xB2	; 178
     8e0:	ce 01       	movw	r24, r28
     8e2:	99 df       	rcall	.-206    	; 0x816 <_ZN6BMP1807readU16Eh>
     8e4:	9b a3       	std	Y+35, r25	; 0x23
     8e6:	8a a3       	std	Y+34, r24	; 0x22
	bmp180_regac6	= readU16(BMP180_RAC6);
     8e8:	64 eb       	ldi	r22, 0xB4	; 180
     8ea:	ce 01       	movw	r24, r28
     8ec:	94 df       	rcall	.-216    	; 0x816 <_ZN6BMP1807readU16Eh>
     8ee:	9d a3       	std	Y+37, r25	; 0x25
     8f0:	8c a3       	std	Y+36, r24	; 0x24
	bmp180_regb1	= readS16(BMP180_RB1);
     8f2:	66 eb       	ldi	r22, 0xB6	; 182
     8f4:	ce 01       	movw	r24, r28
     8f6:	75 df       	rcall	.-278    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     8f8:	9f 8b       	std	Y+23, r25	; 0x17
     8fa:	8e 8b       	std	Y+22, r24	; 0x16
	bmp180_regb2	= readS16(BMP180_RB2);
     8fc:	68 eb       	ldi	r22, 0xB8	; 184
     8fe:	ce 01       	movw	r24, r28
     900:	70 df       	rcall	.-288    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     902:	99 8f       	std	Y+25, r25	; 0x19
     904:	88 8f       	std	Y+24, r24	; 0x18
	bmp180_regmb	= readS16(BMP180_RMB);
     906:	6a eb       	ldi	r22, 0xBA	; 186
     908:	ce 01       	movw	r24, r28
     90a:	6b df       	rcall	.-298    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     90c:	9b 8f       	std	Y+27, r25	; 0x1b
     90e:	8a 8f       	std	Y+26, r24	; 0x1a
	bmp180_regmc	= readS16(BMP180_RMC);
     910:	6c eb       	ldi	r22, 0xBC	; 188
     912:	ce 01       	movw	r24, r28
     914:	66 df       	rcall	.-308    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     916:	9d 8f       	std	Y+29, r25	; 0x1d
     918:	8c 8f       	std	Y+28, r24	; 0x1c
	bmp180_regmd	= readS16(BMP180_RMD);
     91a:	6e eb       	ldi	r22, 0xBE	; 190
     91c:	ce 01       	movw	r24, r28
     91e:	61 df       	rcall	.-318    	; 0x7e2 <_ZN6BMP1807readS16Eh>
     920:	9f 8f       	std	Y+31, r25	; 0x1f
     922:	8e 8f       	std	Y+30, r24	; 0x1e
	bmp180_regb2	= 41;
	bmp180_regmb	= -32768;
	bmp180_regmc	= -11786;
	bmp180_regmd	= 2331;
	*/
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <_ZN6BMP180C1Ev>:


#include "BMP180.h"

// default constructor
BMP180::BMP180()
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	8e 96       	adiw	r24, 0x2e	; 46
     932:	0e 94 40 26 	call	0x4c80	; 0x4c80 <_ZN3I2CC1Ev>
{
	bmp180_rawtemperature = 0;
     936:	1e a2       	std	Y+38, r1	; 0x26
     938:	1f a2       	std	Y+39, r1	; 0x27
     93a:	18 a6       	std	Y+40, r1	; 0x28
     93c:	19 a6       	std	Y+41, r1	; 0x29
	bmp180_rawpressure = 0;
     93e:	1a a6       	std	Y+42, r1	; 0x2a
     940:	1b a6       	std	Y+43, r1	; 0x2b
     942:	1c a6       	std	Y+44, r1	; 0x2c
     944:	1d a6       	std	Y+45, r1	; 0x2d
	pressure0 = PRESSURE00;
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e5       	ldi	r25, 0x50	; 80
     94a:	ad e7       	ldi	r26, 0x7D	; 125
     94c:	b4 e4       	ldi	r27, 0x44	; 68
     94e:	8c 83       	std	Y+4, r24	; 0x04
     950:	9d 83       	std	Y+5, r25	; 0x05
     952:	ae 83       	std	Y+6, r26	; 0x06
     954:	bf 83       	std	Y+7, r27	; 0x07
	
	bmp180_getcalibration();
     956:	ce 01       	movw	r24, r28
     958:	ac df       	rcall	.-168    	; 0x8b2 <_ZN6BMP18021bmp180_getcalibrationEv>
	
} //BMP180
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <_ZN6BMP18021bmp180_gettemperatureEv>:
	altitude  = pow(altitude,1/5.255);
	altitude  = 1-altitude;
	altitude *= 44330;
}

void BMP180::bmp180_gettemperature(){
     960:	2f 92       	push	r2
     962:	3f 92       	push	r3
     964:	4f 92       	push	r4
     966:	5f 92       	push	r5
     968:	6f 92       	push	r6
     96a:	7f 92       	push	r7
     96c:	8f 92       	push	r8
     96e:	9f 92       	push	r9
     970:	af 92       	push	r10
     972:	bf 92       	push	r11
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	28 97       	sbiw	r28, 0x08	; 8
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	2c 01       	movw	r4, r24
	
	int16_t ut;
	int64_t x1,x2;

	//read raw temperature
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADTEMPERATURE);
     996:	4e e2       	ldi	r20, 0x2E	; 46
     998:	64 ef       	ldi	r22, 0xF4	; 244
     99a:	ba de       	rcall	.-652    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99c:	8f e0       	ldi	r24, 0x0F	; 15
     99e:	97 e2       	ldi	r25, 0x27	; 39
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <_ZN6BMP18021bmp180_gettemperatureEv+0x40>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <_ZN6BMP18021bmp180_gettemperatureEv+0x46>
     9a6:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 2);
	ut  = readS16(BMP180_REGCONTROLOUTPUT);
     9a8:	66 ef       	ldi	r22, 0xF6	; 246
     9aa:	c2 01       	movw	r24, r4
     9ac:	1a df       	rcall	.-460    	; 0x7e2 <_ZN6BMP1807readS16Eh>

	//calculate raw temperature
	x1	  = ( ut - bmp180_regac6);
     9ae:	f2 01       	movw	r30, r4
     9b0:	24 a1       	ldd	r18, Z+36	; 0x24
     9b2:	35 a1       	ldd	r19, Z+37	; 0x25
     9b4:	82 1b       	sub	r24, r18
     9b6:	93 0b       	sbc	r25, r19
     9b8:	6c 01       	movw	r12, r24
	x1	 *= bmp180_regac5;
     9ba:	42 a1       	ldd	r20, Z+34	; 0x22
     9bc:	53 a1       	ldd	r21, Z+35	; 0x23
     9be:	ac 2c       	mov	r10, r12
     9c0:	bd 2c       	mov	r11, r13
     9c2:	c1 2c       	mov	r12, r1
     9c4:	d1 2c       	mov	r13, r1
     9c6:	e1 2c       	mov	r14, r1
     9c8:	f1 2c       	mov	r15, r1
     9ca:	00 e0       	ldi	r16, 0x00	; 0
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	24 2f       	mov	r18, r20
     9d0:	35 2f       	mov	r19, r21
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
	x1	>>= 15;
     9e2:	0f e0       	ldi	r16, 0x0F	; 15
     9e4:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     9e8:	29 83       	std	Y+1, r18	; 0x01
     9ea:	3a 83       	std	Y+2, r19	; 0x02
     9ec:	4b 83       	std	Y+3, r20	; 0x03
     9ee:	5c 83       	std	Y+4, r21	; 0x04
     9f0:	6d 83       	std	Y+5, r22	; 0x05
     9f2:	7e 83       	std	Y+6, r23	; 0x06
     9f4:	8f 83       	std	Y+7, r24	; 0x07
     9f6:	98 87       	std	Y+8, r25	; 0x08
	x2	  = bmp180_regmc;
     9f8:	f2 01       	movw	r30, r4
     9fa:	35 8d       	ldd	r19, Z+29	; 0x1d
     9fc:	24 8d       	ldd	r18, Z+28	; 0x1c
     9fe:	93 2f       	mov	r25, r19
     a00:	99 0f       	add	r25, r25
     a02:	99 0b       	sbc	r25, r25
	x2	<<= 11;
     a04:	49 2f       	mov	r20, r25
     a06:	59 2f       	mov	r21, r25
     a08:	69 2f       	mov	r22, r25
     a0a:	79 2f       	mov	r23, r25
     a0c:	89 2f       	mov	r24, r25
     a0e:	0b e0       	ldi	r16, 0x0B	; 11
     a10:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     a14:	62 2e       	mov	r6, r18
     a16:	73 2e       	mov	r7, r19
     a18:	84 2e       	mov	r8, r20
     a1a:	95 2e       	mov	r9, r21
     a1c:	b6 2f       	mov	r27, r22
     a1e:	a7 2f       	mov	r26, r23
     a20:	28 2e       	mov	r2, r24
     a22:	39 2e       	mov	r3, r25
	x2	 /= (x1 + bmp180_regmd);
     a24:	37 8d       	ldd	r19, Z+31	; 0x1f
     a26:	26 8d       	ldd	r18, Z+30	; 0x1e
     a28:	93 2f       	mov	r25, r19
     a2a:	99 0f       	add	r25, r25
     a2c:	99 0b       	sbc	r25, r25
     a2e:	49 2f       	mov	r20, r25
     a30:	59 2f       	mov	r21, r25
     a32:	69 2f       	mov	r22, r25
     a34:	79 2f       	mov	r23, r25
     a36:	89 2f       	mov	r24, r25
     a38:	a9 80       	ldd	r10, Y+1	; 0x01
     a3a:	ba 80       	ldd	r11, Y+2	; 0x02
     a3c:	cb 80       	ldd	r12, Y+3	; 0x03
     a3e:	dc 80       	ldd	r13, Y+4	; 0x04
     a40:	ed 80       	ldd	r14, Y+5	; 0x05
     a42:	fe 80       	ldd	r15, Y+6	; 0x06
     a44:	0f 81       	ldd	r16, Y+7	; 0x07
     a46:	18 85       	ldd	r17, Y+8	; 0x08
     a48:	0e 94 57 4c 	call	0x98ae	; 0x98ae <__adddi3>
     a4c:	a2 2e       	mov	r10, r18
     a4e:	b3 2e       	mov	r11, r19
     a50:	c4 2e       	mov	r12, r20
     a52:	d5 2e       	mov	r13, r21
     a54:	e6 2e       	mov	r14, r22
     a56:	f7 2e       	mov	r15, r23
     a58:	08 2f       	mov	r16, r24
     a5a:	19 2f       	mov	r17, r25
     a5c:	26 2d       	mov	r18, r6
     a5e:	37 2d       	mov	r19, r7
     a60:	48 2d       	mov	r20, r8
     a62:	59 2d       	mov	r21, r9
     a64:	6b 2f       	mov	r22, r27
     a66:	7a 2f       	mov	r23, r26
     a68:	82 2d       	mov	r24, r2
     a6a:	93 2d       	mov	r25, r3
     a6c:	0e 94 52 4b 	call	0x96a4	; 0x96a4 <__divdi3>
     a70:	82 2e       	mov	r8, r18
     a72:	93 2e       	mov	r9, r19
     a74:	a4 2e       	mov	r10, r20
     a76:	b5 2e       	mov	r11, r21
	bmp180_rawtemperature = x1 + x2;
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	ab 81       	ldd	r26, Y+3	; 0x03
     a7e:	bc 81       	ldd	r27, Y+4	; 0x04
     a80:	88 0d       	add	r24, r8
     a82:	99 1d       	adc	r25, r9
     a84:	aa 1d       	adc	r26, r10
     a86:	bb 1d       	adc	r27, r11
     a88:	f2 01       	movw	r30, r4
     a8a:	86 a3       	std	Z+38, r24	; 0x26
     a8c:	97 a3       	std	Z+39, r25	; 0x27
     a8e:	a0 a7       	std	Z+40, r26	; 0x28
     a90:	b1 a7       	std	Z+41, r27	; 0x29
	
	//bmp180_rawtemperature = 4008;
	temperature	 = (bmp180_rawtemperature+8);
     a92:	bc 01       	movw	r22, r24
     a94:	cd 01       	movw	r24, r26
     a96:	68 5f       	subi	r22, 0xF8	; 248
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	8f 4f       	sbci	r24, 0xFF	; 255
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
	temperature	/= 16.0;
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5d e3       	ldi	r21, 0x3D	; 61
     aaa:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
	temperature	/= 10.0;
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	40 e2       	ldi	r20, 0x20	; 32
     ab4:	51 e4       	ldi	r21, 0x41	; 65
     ab6:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
     aba:	f2 01       	movw	r30, r4
     abc:	60 87       	std	Z+8, r22	; 0x08
     abe:	71 87       	std	Z+9, r23	; 0x09
     ac0:	82 87       	std	Z+10, r24	; 0x0a
     ac2:	93 87       	std	Z+11, r25	; 0x0b
	
}
     ac4:	28 96       	adiw	r28, 0x08	; 8
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	bf 90       	pop	r11
     ae2:	af 90       	pop	r10
     ae4:	9f 90       	pop	r9
     ae6:	8f 90       	pop	r8
     ae8:	7f 90       	pop	r7
     aea:	6f 90       	pop	r6
     aec:	5f 90       	pop	r5
     aee:	4f 90       	pop	r4
     af0:	3f 90       	pop	r3
     af2:	2f 90       	pop	r2
     af4:	08 95       	ret

00000af6 <_ZN6BMP18018bmp180_getpressureEv>:
	bmp180_regmc	= -11786;
	bmp180_regmd	= 2331;
	*/
}

void BMP180::bmp180_getpressure(){
     af6:	2f 92       	push	r2
     af8:	3f 92       	push	r3
     afa:	4f 92       	push	r4
     afc:	5f 92       	push	r5
     afe:	6f 92       	push	r6
     b00:	7f 92       	push	r7
     b02:	8f 92       	push	r8
     b04:	9f 92       	push	r9
     b06:	af 92       	push	r10
     b08:	bf 92       	push	r11
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	a2 97       	sbiw	r28, 0x22	; 34
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	1c 01       	movw	r2, r24
	int64_t up;
	int64_t x1,x2,x3,b3,b6,p;
	uint64_t b4,b7;

	bmp180_gettemperature();
     b2c:	19 df       	rcall	.-462    	; 0x960 <_ZN6BMP18021bmp180_gettemperatureEv>

	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
     b2e:	44 ef       	ldi	r20, 0xF4	; 244
     b30:	64 ef       	ldi	r22, 0xF4	; 244
     b32:	c1 01       	movw	r24, r2
     b34:	ed dd       	rcall	.-1062   	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
     b36:	8f e1       	ldi	r24, 0x1F	; 31
     b38:	9b ec       	ldi	r25, 0xCB	; 203
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <_ZN6BMP18018bmp180_getpressureEv+0x44>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <_ZN6BMP18018bmp180_getpressureEv+0x4a>
     b40:	00 00       	nop
	_delay_ms(2 + (3<<BMP180_MODE));
	
	up   = readU32(BMP180_REGCONTROLOUTPUT);
     b42:	66 ef       	ldi	r22, 0xF6	; 246
     b44:	c1 01       	movw	r24, r2
     b46:	80 de       	rcall	.-768    	; 0x848 <_ZN6BMP1807readU32Eh>
     b48:	5b 01       	movw	r10, r22
     b4a:	6c 01       	movw	r12, r24
     b4c:	e1 2c       	mov	r14, r1
     b4e:	f1 2c       	mov	r15, r1
     b50:	87 01       	movw	r16, r14
     b52:	6c 87       	std	Y+12, r22	; 0x0c
     b54:	bd 86       	std	Y+13, r11	; 0x0d
     b56:	ce 86       	std	Y+14, r12	; 0x0e
     b58:	df 86       	std	Y+15, r13	; 0x0f
     b5a:	e8 8a       	std	Y+16, r14	; 0x10
     b5c:	f9 8a       	std	Y+17, r15	; 0x11
     b5e:	0a 8b       	std	Y+18, r16	; 0x12
     b60:	1b 8b       	std	Y+19, r17	; 0x13
	up >>= (8-BMP180_MODE);

	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
     b62:	f1 01       	movw	r30, r2
     b64:	86 a1       	ldd	r24, Z+38	; 0x26
     b66:	97 a1       	ldd	r25, Z+39	; 0x27
     b68:	a0 a5       	ldd	r26, Z+40	; 0x28
     b6a:	b1 a5       	ldd	r27, Z+41	; 0x29
     b6c:	2c 01       	movw	r4, r24
     b6e:	3d 01       	movw	r6, r26
     b70:	f0 ea       	ldi	r31, 0xA0	; 160
     b72:	4f 1a       	sub	r4, r31
     b74:	ff e0       	ldi	r31, 0x0F	; 15
     b76:	5f 0a       	sbc	r5, r31
     b78:	61 08       	sbc	r6, r1
     b7a:	71 08       	sbc	r7, r1
     b7c:	63 01       	movw	r12, r6
     b7e:	52 01       	movw	r10, r4
     b80:	dd 0c       	add	r13, r13
     b82:	aa 08       	sbc	r10, r10
     b84:	ba 2c       	mov	r11, r10
     b86:	65 01       	movw	r12, r10
     b88:	a9 82       	std	Y+1, r10	; 0x01
     b8a:	ba 82       	std	Y+2, r11	; 0x02
     b8c:	cb 82       	std	Y+3, r12	; 0x03
     b8e:	dc 82       	std	Y+4, r13	; 0x04
	x1   = b6*b6;
     b90:	a4 2c       	mov	r10, r4
     b92:	b5 2c       	mov	r11, r5
     b94:	c6 2c       	mov	r12, r6
     b96:	d7 2c       	mov	r13, r7
     b98:	e9 80       	ldd	r14, Y+1	; 0x01
     b9a:	fe 2c       	mov	r15, r14
     b9c:	0e 2d       	mov	r16, r14
     b9e:	1e 2d       	mov	r17, r14
     ba0:	24 2d       	mov	r18, r4
     ba2:	35 2d       	mov	r19, r5
     ba4:	46 2d       	mov	r20, r6
     ba6:	57 2d       	mov	r21, r7
     ba8:	60 2f       	mov	r22, r16
     baa:	70 2f       	mov	r23, r16
     bac:	80 2f       	mov	r24, r16
     bae:	9e 2d       	mov	r25, r14
     bb0:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
	x1 >>= 12;
     bb4:	0c e0       	ldi	r16, 0x0C	; 12
     bb6:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     bba:	2c 8b       	std	Y+20, r18	; 0x14
     bbc:	3d 8b       	std	Y+21, r19	; 0x15
     bbe:	4e 8b       	std	Y+22, r20	; 0x16
     bc0:	5f 8b       	std	Y+23, r21	; 0x17
     bc2:	6a 8f       	std	Y+26, r22	; 0x1a
     bc4:	7b 8f       	std	Y+27, r23	; 0x1b
     bc6:	8c 8f       	std	Y+28, r24	; 0x1c
     bc8:	9d 8f       	std	Y+29, r25	; 0x1d
	x1  *= bmp180_regb2;
     bca:	d1 01       	movw	r26, r2
     bcc:	59 96       	adiw	r26, 0x19	; 25
     bce:	3c 91       	ld	r19, X
     bd0:	59 97       	sbiw	r26, 0x19	; 25
     bd2:	58 96       	adiw	r26, 0x18	; 24
     bd4:	2c 91       	ld	r18, X
     bd6:	93 2f       	mov	r25, r19
     bd8:	99 0f       	add	r25, r25
     bda:	99 0b       	sbc	r25, r25
     bdc:	ac 88       	ldd	r10, Y+20	; 0x14
     bde:	bd 88       	ldd	r11, Y+21	; 0x15
     be0:	c4 2e       	mov	r12, r20
     be2:	d5 2e       	mov	r13, r21
     be4:	e6 2e       	mov	r14, r22
     be6:	f7 2e       	mov	r15, r23
     be8:	08 2f       	mov	r16, r24
     bea:	1d 8d       	ldd	r17, Y+29	; 0x1d
     bec:	49 2f       	mov	r20, r25
     bee:	59 2f       	mov	r21, r25
     bf0:	69 2f       	mov	r22, r25
     bf2:	79 2f       	mov	r23, r25
     bf4:	89 2f       	mov	r24, r25
     bf6:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
     bfa:	29 87       	std	Y+9, r18	; 0x09
     bfc:	3a 87       	std	Y+10, r19	; 0x0a
     bfe:	4b 87       	std	Y+11, r20	; 0x0b
     c00:	58 8f       	std	Y+24, r21	; 0x18
     c02:	86 2e       	mov	r8, r22
     c04:	97 2e       	mov	r9, r23
     c06:	8f 8f       	std	Y+31, r24	; 0x1f
     c08:	9e 8f       	std	Y+30, r25	; 0x1e
	x1 >>= 11;
	x2   = bmp180_regac2 * b6;
     c0a:	f1 01       	movw	r30, r2
     c0c:	33 89       	ldd	r19, Z+19	; 0x13
     c0e:	22 89       	ldd	r18, Z+18	; 0x12
     c10:	93 2f       	mov	r25, r19
     c12:	99 0f       	add	r25, r25
     c14:	99 0b       	sbc	r25, r25
     c16:	a4 2c       	mov	r10, r4
     c18:	b5 2c       	mov	r11, r5
     c1a:	c6 2c       	mov	r12, r6
     c1c:	d7 2c       	mov	r13, r7
     c1e:	e9 80       	ldd	r14, Y+1	; 0x01
     c20:	fe 2c       	mov	r15, r14
     c22:	0e 2d       	mov	r16, r14
     c24:	1e 2d       	mov	r17, r14
     c26:	49 2f       	mov	r20, r25
     c28:	59 2f       	mov	r21, r25
     c2a:	69 2f       	mov	r22, r25
     c2c:	79 2f       	mov	r23, r25
     c2e:	89 2f       	mov	r24, r25
     c30:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
     c34:	a2 2e       	mov	r10, r18
     c36:	b3 2e       	mov	r11, r19
     c38:	c4 2e       	mov	r12, r20
     c3a:	d5 2e       	mov	r13, r21
     c3c:	e6 2e       	mov	r14, r22
     c3e:	f7 2e       	mov	r15, r23
     c40:	18 2f       	mov	r17, r24
     c42:	a9 2f       	mov	r26, r25
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
     c44:	f1 01       	movw	r30, r2
     c46:	80 89       	ldd	r24, Z+16	; 0x10
     c48:	91 89       	ldd	r25, Z+17	; 0x11
     c4a:	fc 01       	movw	r30, r24
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	fa a3       	std	Y+34, r31	; 0x22
     c56:	e9 a3       	std	Y+33, r30	; 0x21
     c58:	ef 2f       	mov	r30, r31
     c5a:	ee 0f       	add	r30, r30
     c5c:	ee 0b       	sbc	r30, r30
	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
	x1   = b6*b6;
	x1 >>= 12;
	x1  *= bmp180_regb2;
	x1 >>= 11;
     c5e:	29 85       	ldd	r18, Y+9	; 0x09
     c60:	3a 85       	ldd	r19, Y+10	; 0x0a
     c62:	4b 85       	ldd	r20, Y+11	; 0x0b
     c64:	58 8d       	ldd	r21, Y+24	; 0x18
     c66:	68 2d       	mov	r22, r8
     c68:	79 2d       	mov	r23, r9
     c6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c6e:	0b e0       	ldi	r16, 0x0B	; 11
     c70:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     c74:	b2 2f       	mov	r27, r18
     c76:	3a 87       	std	Y+10, r19	; 0x0a
     c78:	84 2e       	mov	r8, r20
     c7a:	95 2e       	mov	r9, r21
     c7c:	6e 8f       	std	Y+30, r22	; 0x1e
     c7e:	78 8f       	std	Y+24, r23	; 0x18
     c80:	8b 87       	std	Y+11, r24	; 0x0b
     c82:	f9 2f       	mov	r31, r25
	x2   = bmp180_regac2 * b6;
	x2 >>= 11;
     c84:	2a 2d       	mov	r18, r10
     c86:	3b 2d       	mov	r19, r11
     c88:	4c 2d       	mov	r20, r12
     c8a:	5d 2d       	mov	r21, r13
     c8c:	6e 2d       	mov	r22, r14
     c8e:	7f 2d       	mov	r23, r15
     c90:	81 2f       	mov	r24, r17
     c92:	9a 2f       	mov	r25, r26
     c94:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     c98:	a2 2e       	mov	r10, r18
     c9a:	b3 2e       	mov	r11, r19
     c9c:	c4 2e       	mov	r12, r20
     c9e:	d5 2e       	mov	r13, r21
     ca0:	e6 2e       	mov	r14, r22
     ca2:	f7 2e       	mov	r15, r23
     ca4:	08 2f       	mov	r16, r24
     ca6:	19 2f       	mov	r17, r25
	x3   = x1 + x2;
     ca8:	2b 2f       	mov	r18, r27
     caa:	3a 85       	ldd	r19, Y+10	; 0x0a
     cac:	48 2d       	mov	r20, r8
     cae:	59 2d       	mov	r21, r9
     cb0:	6e 8d       	ldd	r22, Y+30	; 0x1e
     cb2:	78 8d       	ldd	r23, Y+24	; 0x18
     cb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb6:	9f 2f       	mov	r25, r31
     cb8:	0e 94 57 4c 	call	0x98ae	; 0x98ae <__adddi3>
     cbc:	a2 2e       	mov	r10, r18
     cbe:	b3 2e       	mov	r11, r19
     cc0:	c4 2e       	mov	r12, r20
     cc2:	d5 2e       	mov	r13, r21
     cc4:	e6 2e       	mov	r14, r22
     cc6:	f7 2e       	mov	r15, r23
     cc8:	08 2f       	mov	r16, r24
     cca:	19 2f       	mov	r17, r25
	b3   = bmp180_regac1 * 4 +x3;
     ccc:	29 a1       	ldd	r18, Y+33	; 0x21
     cce:	3a a1       	ldd	r19, Y+34	; 0x22
     cd0:	4e 2f       	mov	r20, r30
     cd2:	5e 2f       	mov	r21, r30
     cd4:	6e 2f       	mov	r22, r30
     cd6:	7e 2f       	mov	r23, r30
     cd8:	8e 2f       	mov	r24, r30
     cda:	9e 2f       	mov	r25, r30
     cdc:	0e 94 57 4c 	call	0x98ae	; 0x98ae <__adddi3>
	b3 <<= BMP180_MODE;
     ce0:	03 e0       	ldi	r16, 0x03	; 3
     ce2:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
	b3  += 2;
     ce6:	a2 e0       	ldi	r26, 0x02	; 2
     ce8:	0e 94 60 4c 	call	0x98c0	; 0x98c0 <__adddi3_s8>
     cec:	29 87       	std	Y+9, r18	; 0x09
     cee:	3a 87       	std	Y+10, r19	; 0x0a
     cf0:	4b 87       	std	Y+11, r20	; 0x0b
     cf2:	58 8f       	std	Y+24, r21	; 0x18
     cf4:	69 8f       	std	Y+25, r22	; 0x19
     cf6:	7e 8f       	std	Y+30, r23	; 0x1e
     cf8:	8f 8f       	std	Y+31, r24	; 0x1f
     cfa:	98 a3       	std	Y+32, r25	; 0x20
	b3  >>= 2;
	x1   = bmp180_regac3 * b6;
     cfc:	d1 01       	movw	r26, r2
     cfe:	55 96       	adiw	r26, 0x15	; 21
     d00:	3c 91       	ld	r19, X
     d02:	55 97       	sbiw	r26, 0x15	; 21
     d04:	54 96       	adiw	r26, 0x14	; 20
     d06:	2c 91       	ld	r18, X
     d08:	93 2f       	mov	r25, r19
     d0a:	99 0f       	add	r25, r25
     d0c:	99 0b       	sbc	r25, r25
     d0e:	a4 2c       	mov	r10, r4
     d10:	b5 2c       	mov	r11, r5
     d12:	c6 2c       	mov	r12, r6
     d14:	d7 2c       	mov	r13, r7
     d16:	e9 80       	ldd	r14, Y+1	; 0x01
     d18:	fe 2c       	mov	r15, r14
     d1a:	0e 2d       	mov	r16, r14
     d1c:	1e 2d       	mov	r17, r14
     d1e:	49 2f       	mov	r20, r25
     d20:	59 2f       	mov	r21, r25
     d22:	69 2f       	mov	r22, r25
     d24:	79 2f       	mov	r23, r25
     d26:	89 2f       	mov	r24, r25
     d28:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
     d2c:	72 2e       	mov	r7, r18
     d2e:	43 2e       	mov	r4, r19
     d30:	54 2e       	mov	r5, r20
     d32:	65 2e       	mov	r6, r21
     d34:	86 2e       	mov	r8, r22
     d36:	97 2e       	mov	r9, r23
     d38:	89 a3       	std	Y+33, r24	; 0x21
     d3a:	99 83       	std	Y+1, r25	; 0x01
	x1 >>= 13;
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
     d3c:	f1 01       	movw	r30, r2
     d3e:	b7 88       	ldd	r11, Z+23	; 0x17
     d40:	a6 88       	ldd	r10, Z+22	; 0x16
     d42:	1b 2d       	mov	r17, r11
     d44:	11 0f       	add	r17, r17
     d46:	11 0b       	sbc	r17, r17
     d48:	c1 2e       	mov	r12, r17
     d4a:	d1 2e       	mov	r13, r17
     d4c:	e1 2e       	mov	r14, r17
     d4e:	f1 2e       	mov	r15, r17
     d50:	01 2f       	mov	r16, r17
     d52:	2c 89       	ldd	r18, Y+20	; 0x14
     d54:	3d 89       	ldd	r19, Y+21	; 0x15
     d56:	4e 89       	ldd	r20, Y+22	; 0x16
     d58:	5f 89       	ldd	r21, Y+23	; 0x17
     d5a:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d5c:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d60:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d62:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
     d66:	a2 2e       	mov	r10, r18
     d68:	b3 2e       	mov	r11, r19
     d6a:	c4 2e       	mov	r12, r20
     d6c:	d5 2e       	mov	r13, r21
     d6e:	e6 2e       	mov	r14, r22
     d70:	f7 2e       	mov	r15, r23
     d72:	18 2f       	mov	r17, r24
     d74:	b9 2f       	mov	r27, r25
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  >>= 2;
	x1   = bmp180_regac3 * b6;
	x1 >>= 13;
     d76:	27 2d       	mov	r18, r7
     d78:	34 2d       	mov	r19, r4
     d7a:	45 2d       	mov	r20, r5
     d7c:	56 2d       	mov	r21, r6
     d7e:	68 2d       	mov	r22, r8
     d80:	79 2d       	mov	r23, r9
     d82:	89 a1       	ldd	r24, Y+33	; 0x21
     d84:	99 81       	ldd	r25, Y+1	; 0x01
     d86:	0d e0       	ldi	r16, 0x0D	; 13
     d88:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     d8c:	62 2e       	mov	r6, r18
     d8e:	83 2e       	mov	r8, r19
     d90:	94 2e       	mov	r9, r20
     d92:	55 2e       	mov	r5, r21
     d94:	76 2e       	mov	r7, r22
     d96:	a7 2f       	mov	r26, r23
     d98:	f8 2f       	mov	r31, r24
     d9a:	e9 2f       	mov	r30, r25
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
	x2 >>= 16;
     d9c:	2a 2d       	mov	r18, r10
     d9e:	3b 2d       	mov	r19, r11
     da0:	4c 2d       	mov	r20, r12
     da2:	5d 2d       	mov	r21, r13
     da4:	6e 2d       	mov	r22, r14
     da6:	7f 2d       	mov	r23, r15
     da8:	81 2f       	mov	r24, r17
     daa:	9b 2f       	mov	r25, r27
     dac:	00 e1       	ldi	r16, 0x10	; 16
     dae:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     db2:	a2 2e       	mov	r10, r18
     db4:	b3 2e       	mov	r11, r19
     db6:	c4 2e       	mov	r12, r20
     db8:	d5 2e       	mov	r13, r21
     dba:	e6 2e       	mov	r14, r22
     dbc:	f7 2e       	mov	r15, r23
     dbe:	08 2f       	mov	r16, r24
     dc0:	19 2f       	mov	r17, r25
	x3   = x1 + x2;
     dc2:	26 2d       	mov	r18, r6
     dc4:	38 2d       	mov	r19, r8
     dc6:	49 2d       	mov	r20, r9
     dc8:	55 2d       	mov	r21, r5
     dca:	67 2d       	mov	r22, r7
     dcc:	7a 2f       	mov	r23, r26
     dce:	8f 2f       	mov	r24, r31
     dd0:	9e 2f       	mov	r25, r30
     dd2:	0e 94 57 4c 	call	0x98ae	; 0x98ae <__adddi3>
	x3  += 2;
     dd6:	a2 e0       	ldi	r26, 0x02	; 2
     dd8:	0e 94 60 4c 	call	0x98c0	; 0x98c0 <__adddi3_s8>
	x3 >>= 2;
     ddc:	02 e0       	ldi	r16, 0x02	; 2
     dde:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
	b4   = (uint64_t)(x3+32768);
     de2:	30 58       	subi	r19, 0x80	; 128
     de4:	4f 4f       	sbci	r20, 0xFF	; 255
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	6f 4f       	sbci	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	8f 4f       	sbci	r24, 0xFF	; 255
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
	b4  *= bmp180_regac4;
     df0:	d1 01       	movw	r26, r2
     df2:	90 96       	adiw	r26, 0x20	; 32
     df4:	ed 91       	ld	r30, X+
     df6:	fc 91       	ld	r31, X
     df8:	91 97       	sbiw	r26, 0x21	; 33
     dfa:	5f 01       	movw	r10, r30
     dfc:	c1 2c       	mov	r12, r1
     dfe:	d1 2c       	mov	r13, r1
     e00:	e1 2c       	mov	r14, r1
     e02:	f1 2c       	mov	r15, r1
     e04:	87 01       	movw	r16, r14
     e06:	e9 83       	std	Y+1, r30	; 0x01
     e08:	ba 82       	std	Y+2, r11	; 0x02
     e0a:	cb 82       	std	Y+3, r12	; 0x03
     e0c:	dc 82       	std	Y+4, r13	; 0x04
     e0e:	ed 82       	std	Y+5, r14	; 0x05
     e10:	fe 82       	std	Y+6, r15	; 0x06
     e12:	0f 83       	std	Y+7, r16	; 0x07
     e14:	18 87       	std	Y+8, r17	; 0x08
     e16:	c1 2c       	mov	r12, r1
     e18:	d1 2c       	mov	r13, r1
     e1a:	e1 2c       	mov	r14, r1
     e1c:	f1 2c       	mov	r15, r1
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
	b4 >>= 15;
     e26:	0f e0       	ldi	r16, 0x0F	; 15
     e28:	0e 94 3b 4c 	call	0x9876	; 0x9876 <__lshrdi3>
     e2c:	62 2e       	mov	r6, r18
     e2e:	53 2e       	mov	r5, r19
     e30:	44 2e       	mov	r4, r20
     e32:	59 83       	std	Y+1, r21	; 0x01
     e34:	6c 8b       	std	Y+20, r22	; 0x14
     e36:	7d 8b       	std	Y+21, r23	; 0x15
     e38:	8e 8b       	std	Y+22, r24	; 0x16
     e3a:	9f 8b       	std	Y+23, r25	; 0x17
	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
	_delay_ms(2 + (3<<BMP180_MODE));
	
	up   = readU32(BMP180_REGCONTROLOUTPUT);
	up >>= (8-BMP180_MODE);
     e3c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e3e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e40:	4e 85       	ldd	r20, Y+14	; 0x0e
     e42:	5f 85       	ldd	r21, Y+15	; 0x0f
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	05 e0       	ldi	r16, 0x05	; 5
     e4e:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     e52:	82 2e       	mov	r8, r18
     e54:	93 2e       	mov	r9, r19
     e56:	e4 2f       	mov	r30, r20
     e58:	75 2e       	mov	r7, r21
     e5a:	b6 2f       	mov	r27, r22
     e5c:	a7 2f       	mov	r26, r23
     e5e:	8c 87       	std	Y+12, r24	; 0x0c
     e60:	f9 2f       	mov	r31, r25
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  >>= 2;
     e62:	29 85       	ldd	r18, Y+9	; 0x09
     e64:	3a 85       	ldd	r19, Y+10	; 0x0a
     e66:	4b 85       	ldd	r20, Y+11	; 0x0b
     e68:	58 8d       	ldd	r21, Y+24	; 0x18
     e6a:	69 8d       	ldd	r22, Y+25	; 0x19
     e6c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e70:	98 a1       	ldd	r25, Y+32	; 0x20
     e72:	02 e0       	ldi	r16, 0x02	; 2
     e74:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
     e78:	a2 2e       	mov	r10, r18
     e7a:	b3 2e       	mov	r11, r19
     e7c:	c4 2e       	mov	r12, r20
     e7e:	d5 2e       	mov	r13, r21
     e80:	e6 2e       	mov	r14, r22
     e82:	f7 2e       	mov	r15, r23
     e84:	08 2f       	mov	r16, r24
     e86:	19 2f       	mov	r17, r25
	x3  += 2;
	x3 >>= 2;
	b4   = (uint64_t)(x3+32768);
	b4  *= bmp180_regac4;
	b4 >>= 15;
	b7   = ((uint64_t)up - b3);
     e88:	28 2d       	mov	r18, r8
     e8a:	39 2d       	mov	r19, r9
     e8c:	4e 2f       	mov	r20, r30
     e8e:	57 2d       	mov	r21, r7
     e90:	6b 2f       	mov	r22, r27
     e92:	7a 2f       	mov	r23, r26
     e94:	8c 85       	ldd	r24, Y+12	; 0x0c
     e96:	9f 2f       	mov	r25, r31
     e98:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
     e9c:	82 2e       	mov	r8, r18
     e9e:	93 2e       	mov	r9, r19
     ea0:	4a 87       	std	Y+10, r20	; 0x0a
     ea2:	59 87       	std	Y+9, r21	; 0x09
     ea4:	b6 2f       	mov	r27, r22
     ea6:	a7 2f       	mov	r26, r23
     ea8:	f8 2f       	mov	r31, r24
     eaa:	e9 2f       	mov	r30, r25
	b7  *= (50000 >> BMP180_MODE);
     eac:	03 e0       	ldi	r16, 0x03	; 3
     eae:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     eb2:	a8 2c       	mov	r10, r8
     eb4:	b9 2c       	mov	r11, r9
     eb6:	ca 84       	ldd	r12, Y+10	; 0x0a
     eb8:	d9 84       	ldd	r13, Y+9	; 0x09
     eba:	eb 2e       	mov	r14, r27
     ebc:	fa 2e       	mov	r15, r26
     ebe:	0f 2f       	mov	r16, r31
     ec0:	1e 2f       	mov	r17, r30
     ec2:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
     ec6:	a2 2e       	mov	r10, r18
     ec8:	b3 2e       	mov	r11, r19
     eca:	c4 2e       	mov	r12, r20
     ecc:	d5 2e       	mov	r13, r21
     ece:	e6 2e       	mov	r14, r22
     ed0:	f7 2e       	mov	r15, r23
     ed2:	78 2e       	mov	r7, r24
     ed4:	19 2f       	mov	r17, r25
     ed6:	03 e0       	ldi	r16, 0x03	; 3
     ed8:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     edc:	07 2d       	mov	r16, r7
     ede:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
     ee2:	03 e0       	ldi	r16, 0x03	; 3
     ee4:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     ee8:	a8 2c       	mov	r10, r8
     eea:	b9 2c       	mov	r11, r9
     eec:	ca 84       	ldd	r12, Y+10	; 0x0a
     eee:	d9 84       	ldd	r13, Y+9	; 0x09
     ef0:	eb 2e       	mov	r14, r27
     ef2:	fa 2e       	mov	r15, r26
     ef4:	0f 2f       	mov	r16, r31
     ef6:	1e 2f       	mov	r17, r30
     ef8:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
     efc:	02 e0       	ldi	r16, 0x02	; 2
     efe:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     f02:	0f 2f       	mov	r16, r31
     f04:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
     f08:	01 e0       	ldi	r16, 0x01	; 1
     f0a:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     f0e:	0f 2f       	mov	r16, r31
     f10:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
     f14:	01 e0       	ldi	r16, 0x01	; 1
     f16:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     f1a:	82 2e       	mov	r8, r18
     f1c:	93 2e       	mov	r9, r19
     f1e:	f4 2f       	mov	r31, r20
     f20:	75 2e       	mov	r7, r21
     f22:	b6 2f       	mov	r27, r22
     f24:	a7 2f       	mov	r26, r23
     f26:	89 87       	std	Y+9, r24	; 0x09
     f28:	9a 87       	std	Y+10, r25	; 0x0a
	if (b7 < 0x80000000){
     f2a:	2f 3f       	cpi	r18, 0xFF	; 255
     f2c:	0f ef       	ldi	r16, 0xFF	; 255
     f2e:	30 07       	cpc	r19, r16
     f30:	40 07       	cpc	r20, r16
     f32:	0f e7       	ldi	r16, 0x7F	; 127
     f34:	50 07       	cpc	r21, r16
     f36:	61 05       	cpc	r22, r1
     f38:	71 05       	cpc	r23, r1
     f3a:	81 05       	cpc	r24, r1
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <_ZN6BMP18018bmp180_getpressureEv+0x44c>
     f40:	b0 f4       	brcc	.+44     	; 0xf6e <_ZN6BMP18018bmp180_getpressureEv+0x478>
		p  = b7*2;
     f42:	01 e0       	ldi	r16, 0x01	; 1
     f44:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
		p /= b4;
     f48:	a6 2c       	mov	r10, r6
     f4a:	b5 2c       	mov	r11, r5
     f4c:	c4 2c       	mov	r12, r4
     f4e:	d9 80       	ldd	r13, Y+1	; 0x01
     f50:	ec 88       	ldd	r14, Y+20	; 0x14
     f52:	fd 88       	ldd	r15, Y+21	; 0x15
     f54:	0e 89       	ldd	r16, Y+22	; 0x16
     f56:	1f 89       	ldd	r17, Y+23	; 0x17
     f58:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivdi3>
     f5c:	29 83       	std	Y+1, r18	; 0x01
     f5e:	3a 83       	std	Y+2, r19	; 0x02
     f60:	4b 83       	std	Y+3, r20	; 0x03
     f62:	5c 83       	std	Y+4, r21	; 0x04
     f64:	6d 83       	std	Y+5, r22	; 0x05
     f66:	7e 83       	std	Y+6, r23	; 0x06
     f68:	8f 83       	std	Y+7, r24	; 0x07
     f6a:	98 87       	std	Y+8, r25	; 0x08
     f6c:	24 c0       	rjmp	.+72     	; 0xfb6 <_ZN6BMP18018bmp180_getpressureEv+0x4c0>
	}
	else {
		p  = b7/b4;
     f6e:	a6 2c       	mov	r10, r6
     f70:	b5 2c       	mov	r11, r5
     f72:	c4 2c       	mov	r12, r4
     f74:	d9 80       	ldd	r13, Y+1	; 0x01
     f76:	ec 88       	ldd	r14, Y+20	; 0x14
     f78:	fd 88       	ldd	r15, Y+21	; 0x15
     f7a:	0e 89       	ldd	r16, Y+22	; 0x16
     f7c:	1f 89       	ldd	r17, Y+23	; 0x17
     f7e:	28 2d       	mov	r18, r8
     f80:	39 2d       	mov	r19, r9
     f82:	4f 2f       	mov	r20, r31
     f84:	57 2d       	mov	r21, r7
     f86:	6b 2f       	mov	r22, r27
     f88:	7a 2f       	mov	r23, r26
     f8a:	89 85       	ldd	r24, Y+9	; 0x09
     f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8e:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivdi3>
		p *= p;
     f92:	a2 2e       	mov	r10, r18
     f94:	b3 2e       	mov	r11, r19
     f96:	c4 2e       	mov	r12, r20
     f98:	d5 2e       	mov	r13, r21
     f9a:	e6 2e       	mov	r14, r22
     f9c:	f7 2e       	mov	r15, r23
     f9e:	08 2f       	mov	r16, r24
     fa0:	19 2f       	mov	r17, r25
     fa2:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
     fa6:	29 83       	std	Y+1, r18	; 0x01
     fa8:	3a 83       	std	Y+2, r19	; 0x02
     faa:	4b 83       	std	Y+3, r20	; 0x03
     fac:	5c 83       	std	Y+4, r21	; 0x04
     fae:	6d 83       	std	Y+5, r22	; 0x05
     fb0:	7e 83       	std	Y+6, r23	; 0x06
     fb2:	8f 83       	std	Y+7, r24	; 0x07
     fb4:	98 87       	std	Y+8, r25	; 0x08
	}
	x1   = (p >> 8);
     fb6:	29 81       	ldd	r18, Y+1	; 0x01
     fb8:	3a 81       	ldd	r19, Y+2	; 0x02
     fba:	4b 81       	ldd	r20, Y+3	; 0x03
     fbc:	5c 81       	ldd	r21, Y+4	; 0x04
     fbe:	6d 81       	ldd	r22, Y+5	; 0x05
     fc0:	7e 81       	ldd	r23, Y+6	; 0x06
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	98 85       	ldd	r25, Y+8	; 0x08
     fc6:	08 e0       	ldi	r16, 0x08	; 8
     fc8:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
	x1  *= (p >> 8);
     fcc:	a2 2e       	mov	r10, r18
     fce:	b3 2e       	mov	r11, r19
     fd0:	c4 2e       	mov	r12, r20
     fd2:	d5 2e       	mov	r13, r21
     fd4:	e6 2e       	mov	r14, r22
     fd6:	f7 2e       	mov	r15, r23
     fd8:	08 2f       	mov	r16, r24
     fda:	19 2f       	mov	r17, r25
     fdc:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <__muldi3>
     fe0:	a2 2e       	mov	r10, r18
     fe2:	b3 2e       	mov	r11, r19
     fe4:	c4 2e       	mov	r12, r20
     fe6:	d5 2e       	mov	r13, r21
     fe8:	e6 2e       	mov	r14, r22
     fea:	f7 2e       	mov	r15, r23
     fec:	e8 2f       	mov	r30, r24
     fee:	19 2f       	mov	r17, r25
	x1   = (x1 * 3038);
     ff0:	03 e0       	ldi	r16, 0x03	; 3
     ff2:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
     ff6:	0e 2f       	mov	r16, r30
     ff8:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
     ffc:	a2 2e       	mov	r10, r18
     ffe:	b3 2e       	mov	r11, r19
    1000:	c4 2e       	mov	r12, r20
    1002:	d5 2e       	mov	r13, r21
    1004:	e6 2e       	mov	r14, r22
    1006:	f7 2e       	mov	r15, r23
    1008:	e8 2f       	mov	r30, r24
    100a:	19 2f       	mov	r17, r25
    100c:	03 e0       	ldi	r16, 0x03	; 3
    100e:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
    1012:	0e 2f       	mov	r16, r30
    1014:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
    1018:	a2 2e       	mov	r10, r18
    101a:	b3 2e       	mov	r11, r19
    101c:	c4 2e       	mov	r12, r20
    101e:	d5 2e       	mov	r13, r21
    1020:	e6 2e       	mov	r14, r22
    1022:	f7 2e       	mov	r15, r23
    1024:	e8 2f       	mov	r30, r24
    1026:	19 2f       	mov	r17, r25
    1028:	05 e0       	ldi	r16, 0x05	; 5
    102a:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
    102e:	0e 2f       	mov	r16, r30
    1030:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
    1034:	01 e0       	ldi	r16, 0x01	; 1
    1036:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
    103a:	72 2e       	mov	r7, r18
    103c:	53 2e       	mov	r5, r19
    103e:	64 2e       	mov	r6, r20
    1040:	f5 2f       	mov	r31, r21
    1042:	46 2e       	mov	r4, r22
    1044:	b7 2f       	mov	r27, r23
    1046:	a8 2f       	mov	r26, r24
    1048:	99 87       	std	Y+9, r25	; 0x09
	x1 >>= 16;
	x2   = (-7357 * p);
    104a:	29 81       	ldd	r18, Y+1	; 0x01
    104c:	3a 81       	ldd	r19, Y+2	; 0x02
    104e:	4b 81       	ldd	r20, Y+3	; 0x03
    1050:	5c 81       	ldd	r21, Y+4	; 0x04
    1052:	6d 81       	ldd	r22, Y+5	; 0x05
    1054:	7e 81       	ldd	r23, Y+6	; 0x06
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	05 e0       	ldi	r16, 0x05	; 5
    105c:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
    1060:	a9 80       	ldd	r10, Y+1	; 0x01
    1062:	ba 80       	ldd	r11, Y+2	; 0x02
    1064:	cb 80       	ldd	r12, Y+3	; 0x03
    1066:	dc 80       	ldd	r13, Y+4	; 0x04
    1068:	ed 80       	ldd	r14, Y+5	; 0x05
    106a:	fe 80       	ldd	r15, Y+6	; 0x06
    106c:	0f 81       	ldd	r16, Y+7	; 0x07
    106e:	18 85       	ldd	r17, Y+8	; 0x08
    1070:	0e 94 57 4c 	call	0x98ae	; 0x98ae <__adddi3>
    1074:	03 e0       	ldi	r16, 0x03	; 3
    1076:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
    107a:	0f 81       	ldd	r16, Y+7	; 0x07
    107c:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
    1080:	02 e0       	ldi	r16, 0x02	; 2
    1082:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
    1086:	0f 81       	ldd	r16, Y+7	; 0x07
    1088:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
    108c:	a2 2e       	mov	r10, r18
    108e:	b3 2e       	mov	r11, r19
    1090:	c4 2e       	mov	r12, r20
    1092:	d5 2e       	mov	r13, r21
    1094:	e6 2e       	mov	r14, r22
    1096:	f7 2e       	mov	r15, r23
    1098:	e8 2f       	mov	r30, r24
    109a:	19 2f       	mov	r17, r25
    109c:	03 e0       	ldi	r16, 0x03	; 3
    109e:	0e 94 20 4c 	call	0x9840	; 0x9840 <__ashldi3>
    10a2:	0e 2f       	mov	r16, r30
    10a4:	0e 94 6c 4c 	call	0x98d8	; 0x98d8 <__subdi3>
    10a8:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <__negdi2>
	x2 >>= 16;
    10ac:	00 e1       	ldi	r16, 0x10	; 16
    10ae:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
    10b2:	82 2e       	mov	r8, r18
    10b4:	93 2e       	mov	r9, r19
    10b6:	a4 2e       	mov	r10, r20
    10b8:	b5 2e       	mov	r11, r21
    10ba:	75 01       	movw	r14, r10
    10bc:	64 01       	movw	r12, r8
    10be:	1f ec       	ldi	r17, 0xCF	; 207
    10c0:	c1 0e       	add	r12, r17
    10c2:	1e e0       	ldi	r17, 0x0E	; 14
    10c4:	d1 1e       	adc	r13, r17
    10c6:	e1 1c       	adc	r14, r1
    10c8:	f1 1c       	adc	r15, r1
		p *= p;
	}
	x1   = (p >> 8);
	x1  *= (p >> 8);
	x1   = (x1 * 3038);
	x1 >>= 16;
    10ca:	27 2d       	mov	r18, r7
    10cc:	35 2d       	mov	r19, r5
    10ce:	46 2d       	mov	r20, r6
    10d0:	5f 2f       	mov	r21, r31
    10d2:	64 2d       	mov	r22, r4
    10d4:	7b 2f       	mov	r23, r27
    10d6:	8a 2f       	mov	r24, r26
    10d8:	99 85       	ldd	r25, Y+9	; 0x09
    10da:	0e 94 39 4c 	call	0x9872	; 0x9872 <__ashrdi3>
    10de:	42 2e       	mov	r4, r18
    10e0:	53 2e       	mov	r5, r19
    10e2:	64 2e       	mov	r6, r20
    10e4:	75 2e       	mov	r7, r21
	x2   = (-7357 * p);
	x2 >>= 16;
	bmp180_rawpressure   = (x1 + x2 + 3791);
    10e6:	d7 01       	movw	r26, r14
    10e8:	c6 01       	movw	r24, r12
    10ea:	84 0d       	add	r24, r4
    10ec:	95 1d       	adc	r25, r5
    10ee:	a6 1d       	adc	r26, r6
    10f0:	b7 1d       	adc	r27, r7
	bmp180_rawpressure >>= 4;
    10f2:	68 94       	set
    10f4:	13 f8       	bld	r1, 3
    10f6:	b5 95       	asr	r27
    10f8:	a7 95       	ror	r26
    10fa:	97 95       	ror	r25
    10fc:	87 95       	ror	r24
    10fe:	16 94       	lsr	r1
    1100:	d1 f7       	brne	.-12     	; 0x10f6 <_ZN6BMP18018bmp180_getpressureEv+0x600>
	bmp180_rawpressure  += p;
    1102:	29 81       	ldd	r18, Y+1	; 0x01
    1104:	3a 81       	ldd	r19, Y+2	; 0x02
    1106:	4b 81       	ldd	r20, Y+3	; 0x03
    1108:	5c 81       	ldd	r21, Y+4	; 0x04
    110a:	28 0f       	add	r18, r24
    110c:	39 1f       	adc	r19, r25
    110e:	4a 1f       	adc	r20, r26
    1110:	5b 1f       	adc	r21, r27
    1112:	ca 01       	movw	r24, r20
    1114:	b9 01       	movw	r22, r18
    1116:	d1 01       	movw	r26, r2
    1118:	9a 96       	adiw	r26, 0x2a	; 42
    111a:	2d 93       	st	X+, r18
    111c:	3d 93       	st	X+, r19
    111e:	4d 93       	st	X+, r20
    1120:	5c 93       	st	X, r21
    1122:	9d 97       	sbiw	r26, 0x2d	; 45
	//Korrektur heuristisch 
	//bmp180_rawpressure  -= 24000;
	
	pressure = (bmp180_rawpressure+BMP180_UNITPAOFFSET)/100.0;
    1124:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	48 ec       	ldi	r20, 0xC8	; 200
    112e:	52 e4       	ldi	r21, 0x42	; 66
    1130:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    1134:	f1 01       	movw	r30, r2
    1136:	60 83       	st	Z, r22
    1138:	71 83       	std	Z+1, r23	; 0x01
    113a:	82 83       	std	Z+2, r24	; 0x02
    113c:	93 83       	std	Z+3, r25	; 0x03
	
}
    113e:	a2 96       	adiw	r28, 0x22	; 34
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	9f 90       	pop	r9
    1160:	8f 90       	pop	r8
    1162:	7f 90       	pop	r7
    1164:	6f 90       	pop	r6
    1166:	5f 90       	pop	r5
    1168:	4f 90       	pop	r4
    116a:	3f 90       	pop	r3
    116c:	2f 90       	pop	r2
    116e:	08 95       	ret

00001170 <_ZN6BMP18018bmp180_getaltitudeEv>:

void BMP180::bmp180_getaltitude(){
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
	bmp180_getpressure();
    1176:	bf dc       	rcall	.-1666   	; 0xaf6 <_ZN6BMP18018bmp180_getpressureEv>
	altitude  = pressure/pressure0;
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	4e 81       	ldd	r20, Y+6	; 0x06
    117e:	5f 81       	ldd	r21, Y+7	; 0x07
    1180:	68 81       	ld	r22, Y
    1182:	79 81       	ldd	r23, Y+1	; 0x01
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
	altitude  = pow(altitude,1/5.255);
    118c:	2e ea       	ldi	r18, 0xAE	; 174
    118e:	3c ed       	ldi	r19, 0xDC	; 220
    1190:	42 e4       	ldi	r20, 0x42	; 66
    1192:	5e e3       	ldi	r21, 0x3E	; 62
    1194:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <pow>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
	altitude  = 1-altitude;
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e8       	ldi	r24, 0x80	; 128
    11a2:	9f e3       	ldi	r25, 0x3F	; 63
    11a4:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
	altitude *= 44330;
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	3a e2       	ldi	r19, 0x2A	; 42
    11ac:	4d e2       	ldi	r20, 0x2D	; 45
    11ae:	57 e4       	ldi	r21, 0x47	; 71
    11b0:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    11b4:	6c 87       	std	Y+12, r22	; 0x0c
    11b6:	7d 87       	std	Y+13, r23	; 0x0d
    11b8:	8e 87       	std	Y+14, r24	; 0x0e
    11ba:	9f 87       	std	Y+15, r25	; 0x0f
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    11c2:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5));// | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
    11c4:	84 b1       	in	r24, 0x04	; 4
    11c6:	8f 75       	andi	r24, 0x5F	; 95
    11c8:	84 b9       	out	0x04, r24	; 4
	CS_HIGH();
    11ca:	2c 9a       	sbi	0x05, 4	; 5
    11cc:	08 95       	ret

000011ce <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    11ce:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    11d0:	0d b4       	in	r0, 0x2d	; 45
    11d2:	07 fe       	sbrs	r0, 7
    11d4:	fd cf       	rjmp	.-6      	; 0x11d0 <xchg_spi+0x2>
	return SPDR;
    11d6:	8e b5       	in	r24, 0x2e	; 46
}
    11d8:	08 95       	ret

000011da <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    11da:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	f7 cf       	rjmp	.-18     	; 0x11ce <xchg_spi>
    11e0:	08 95       	ret

000011e2 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
    11e2:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	f3 df       	rcall	.-26     	; 0x11ce <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
    11e8:	82 e3       	ldi	r24, 0x32	; 50
    11ea:	80 93 4f 04 	sts	0x044F, r24
	do{
		d = xchg_spi(0xFF);
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	ee df       	rcall	.-36     	; 0x11ce <xchg_spi>
	}while (d != 0xFF && Timer2);
    11f2:	8f 3f       	cpi	r24, 0xFF	; 255
    11f4:	41 f0       	breq	.+16     	; 0x1206 <select+0x24>
    11f6:	80 91 4f 04 	lds	r24, 0x044F
    11fa:	81 11       	cpse	r24, r1
    11fc:	f8 cf       	rjmp	.-16     	; 0x11ee <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    11fe:	ed df       	rcall	.-38     	; 0x11da <deselect>
	return 0;	/* Timeout */
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    120a:	08 95       	ret

0000120c <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    1218:	84 e1       	ldi	r24, 0x14	; 20
    121a:	80 93 50 04 	sts	0x0450, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	d6 df       	rcall	.-84     	; 0x11ce <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    1222:	8f 3f       	cpi	r24, 0xFF	; 255
    1224:	39 f4       	brne	.+14     	; 0x1234 <rcvr_datablock+0x28>
    1226:	90 91 50 04 	lds	r25, 0x0450
    122a:	91 11       	cpse	r25, r1
    122c:	f8 cf       	rjmp	.-16     	; 0x121e <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	20 c0       	rjmp	.+64     	; 0x1274 <rcvr_datablock+0x68>
    1234:	8e 3f       	cpi	r24, 0xFE	; 254
    1236:	e1 f4       	brne	.+56     	; 0x1270 <rcvr_datablock+0x64>
void rcvr_spi_multi (
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	cli();
    1238:	f8 94       	cli
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	8e bd       	out	0x2e, r24	; 46
    123e:	0d b4       	in	r0, 0x2d	; 45
    1240:	07 fe       	sbrs	r0, 7
    1242:	fd cf       	rjmp	.-6      	; 0x123e <rcvr_datablock+0x32>
    1244:	9e b5       	in	r25, 0x2e	; 46
    1246:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    1248:	8e bd       	out	0x2e, r24	; 46
    124a:	0d b4       	in	r0, 0x2d	; 45
    124c:	07 fe       	sbrs	r0, 7
    124e:	fd cf       	rjmp	.-6      	; 0x124a <rcvr_datablock+0x3e>
    1250:	22 96       	adiw	r28, 0x02	; 2
    1252:	9e b5       	in	r25, 0x2e	; 46
    1254:	fe 01       	movw	r30, r28
    1256:	31 97       	sbiw	r30, 0x01	; 1
    1258:	90 83       	st	Z, r25
	} while (cnt -= 2);
    125a:	02 50       	subi	r16, 0x02	; 2
    125c:	11 09       	sbc	r17, r1
    125e:	71 f7       	brne	.-36     	; 0x123c <rcvr_datablock+0x30>
	sei();
    1260:	78 94       	sei
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	b4 df       	rcall	.-152    	; 0x11ce <xchg_spi>
	xchg_spi(0xFF);
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	b2 df       	rcall	.-156    	; 0x11ce <xchg_spi>

	return 1;						/* Return with success */
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <rcvr_datablock+0x68>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	c8 2f       	mov	r28, r24
    128a:	d4 2f       	mov	r29, r20
    128c:	15 2f       	mov	r17, r21
    128e:	06 2f       	mov	r16, r22
    1290:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1292:	88 23       	and	r24, r24
    1294:	4c f4       	brge	.+18     	; 0x12a8 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	ba 01       	movw	r22, r20
    129c:	87 e3       	ldi	r24, 0x37	; 55
    129e:	ef df       	rcall	.-34     	; 0x127e <send_cmd>
		if (res > 1) return res;
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <send_cmd+0x28>
    12a4:	3c c0       	rjmp	.+120    	; 0x131e <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    12a6:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    12a8:	cc 30       	cpi	r28, 0x0C	; 12
    12aa:	f1 f0       	breq	.+60     	; 0x12e8 <send_cmd+0x6a>
		deselect();
    12ac:	96 df       	rcall	.-212    	; 0x11da <deselect>
		if (!select()) return 0xFF;
    12ae:	99 df       	rcall	.-206    	; 0x11e2 <select>
    12b0:	89 2b       	or	r24, r25
    12b2:	c1 f0       	breq	.+48     	; 0x12e4 <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    12b4:	8c 2f       	mov	r24, r28
    12b6:	80 64       	ori	r24, 0x40	; 64
    12b8:	8a df       	rcall	.-236    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    12ba:	8f 2d       	mov	r24, r15
    12bc:	88 df       	rcall	.-240    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    12be:	80 2f       	mov	r24, r16
    12c0:	86 df       	rcall	.-244    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    12c2:	81 2f       	mov	r24, r17
    12c4:	84 df       	rcall	.-248    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    12c6:	8d 2f       	mov	r24, r29
    12c8:	82 df       	rcall	.-252    	; 0x11ce <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    12ca:	cc 23       	and	r28, r28
    12cc:	29 f1       	breq	.+74     	; 0x1318 <send_cmd+0x9a>
    12ce:	21 c0       	rjmp	.+66     	; 0x1312 <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	7d df       	rcall	.-262    	; 0x11ce <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    12d4:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	7a df       	rcall	.-268    	; 0x11ce <xchg_spi>
	while ((res & 0x80) && --n);
    12da:	88 23       	and	r24, r24
    12dc:	04 f5       	brge	.+64     	; 0x131e <send_cmd+0xa0>
    12de:	c1 50       	subi	r28, 0x01	; 1
    12e0:	d1 f7       	brne	.-12     	; 0x12d6 <send_cmd+0x58>
    12e2:	1d c0       	rjmp	.+58     	; 0x131e <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	1b c0       	rjmp	.+54     	; 0x131e <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    12e8:	8c e4       	ldi	r24, 0x4C	; 76
    12ea:	71 df       	rcall	.-286    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    12ec:	8f 2d       	mov	r24, r15
    12ee:	6f df       	rcall	.-290    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    12f0:	80 2f       	mov	r24, r16
    12f2:	6d df       	rcall	.-294    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    12f4:	81 2f       	mov	r24, r17
    12f6:	6b df       	rcall	.-298    	; 0x11ce <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    12f8:	8d 2f       	mov	r24, r29
    12fa:	69 df       	rcall	.-302    	; 0x11ce <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	67 df       	rcall	.-306    	; 0x11ce <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    1300:	cc 30       	cpi	r28, 0x0C	; 12
    1302:	31 f3       	breq	.-52     	; 0x12d0 <send_cmd+0x52>
    1304:	e7 cf       	rjmp	.-50     	; 0x12d4 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    1306:	87 e8       	ldi	r24, 0x87	; 135
    1308:	62 df       	rcall	.-316    	; 0x11ce <xchg_spi>
    130a:	e4 cf       	rjmp	.-56     	; 0x12d4 <send_cmd+0x56>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	5f df       	rcall	.-322    	; 0x11ce <xchg_spi>
    1310:	e1 cf       	rjmp	.-62     	; 0x12d4 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    1312:	c8 30       	cpi	r28, 0x08	; 8
    1314:	c1 f3       	breq	.-16     	; 0x1306 <send_cmd+0x88>
    1316:	fa cf       	rjmp	.-12     	; 0x130c <send_cmd+0x8e>
	xchg_spi(n);
    1318:	85 e9       	ldi	r24, 0x95	; 149
    131a:	59 df       	rcall	.-334    	; 0x11ce <xchg_spi>
    131c:	db cf       	rjmp	.-74     	; 0x12d4 <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	08 95       	ret

0000132a <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	ec 01       	movw	r28, r24
    1332:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    1334:	92 e3       	ldi	r25, 0x32	; 50
    1336:	90 93 4f 04 	sts	0x044F, r25
	do{
		d = xchg_spi(0xFF);
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	48 df       	rcall	.-368    	; 0x11ce <xchg_spi>
	}while (d != 0xFF && Timer2);
    133e:	8f 3f       	cpi	r24, 0xFF	; 255
    1340:	31 f0       	breq	.+12     	; 0x134e <xmit_datablock+0x24>
    1342:	90 91 4f 04 	lds	r25, 0x044F
    1346:	91 11       	cpse	r25, r1
    1348:	f8 cf       	rjmp	.-16     	; 0x133a <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	28 c0       	rjmp	.+80     	; 0x139e <xmit_datablock+0x74>

	xchg_spi(token);					/* Xmit data token */
    134e:	81 2f       	mov	r24, r17
    1350:	3e df       	rcall	.-388    	; 0x11ce <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    1352:	1d 3f       	cpi	r17, 0xFD	; 253
    1354:	11 f1       	breq	.+68     	; 0x139a <xmit_datablock+0x70>
void xmit_spi_multi (
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	cli();
    1356:	f8 94       	cli
    1358:	9e 01       	movw	r18, r28
    135a:	3e 5f       	subi	r19, 0xFE	; 254
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    135c:	88 81       	ld	r24, Y
    135e:	8e bd       	out	0x2e, r24	; 46
    1360:	0d b4       	in	r0, 0x2d	; 45
    1362:	07 fe       	sbrs	r0, 7
    1364:	fd cf       	rjmp	.-6      	; 0x1360 <xmit_datablock+0x36>
    1366:	22 96       	adiw	r28, 0x02	; 2
    1368:	fe 01       	movw	r30, r28
    136a:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    136c:	80 81       	ld	r24, Z
    136e:	8e bd       	out	0x2e, r24	; 46
    1370:	0d b4       	in	r0, 0x2d	; 45
    1372:	07 fe       	sbrs	r0, 7
    1374:	fd cf       	rjmp	.-6      	; 0x1370 <xmit_datablock+0x46>
	} while (cnt -= 2);
    1376:	2c 17       	cp	r18, r28
    1378:	3d 07       	cpc	r19, r29
    137a:	81 f7       	brne	.-32     	; 0x135c <xmit_datablock+0x32>
	sei();
    137c:	78 94       	sei
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, CLUSTERSIZE);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	26 df       	rcall	.-436    	; 0x11ce <xchg_spi>
		xchg_spi(0xFF);
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	24 df       	rcall	.-440    	; 0x11ce <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	22 df       	rcall	.-444    	; 0x11ce <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    138a:	28 2f       	mov	r18, r24
    138c:	2f 71       	andi	r18, 0x1F	; 31
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	25 30       	cpi	r18, 0x05	; 5
    1394:	21 f0       	breq	.+8      	; 0x139e <xmit_datablock+0x74>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <xmit_datablock+0x74>
		return 0;
	}

	return 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	08 95       	ret

000013a6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <disk_initialize+0x12>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <disk_initialize+0x14>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    13be:	81 11       	cpse	r24, r1
    13c0:	9b c0       	rjmp	.+310    	; 0x14f8 <disk_initialize+0x152>
	power_off();						/* Turn off the socket power to reset the card */
    13c2:	ff de       	rcall	.-514    	; 0x11c2 <power_off>
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
    13c4:	80 91 06 01 	lds	r24, 0x0106
    13c8:	82 ff       	sbrs	r24, 2
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <disk_initialize+0x2c>
    13cc:	80 91 06 01 	lds	r24, 0x0106
    13d0:	9e c0       	rjmp	.+316    	; 0x150e <disk_initialize+0x168>

static
void power_on (void)
{
	//PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
	DDRB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
    13d2:	84 b1       	in	r24, 0x04	; 4
    13d4:	80 6b       	ori	r24, 0xB0	; 176
    13d6:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PORTB6);
    13d8:	26 98       	cbi	0x04, 6	; 4
	CS_HIGH();
    13da:	2c 9a       	sbi	0x05, 4	; 5

	SPSR = 0x01;			/* SPI 2x mode */
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	8d bd       	out	0x2d, r24	; 45
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    13e0:	82 e5       	ldi	r24, 0x52	; 82
    13e2:	8c bd       	out	0x2c, r24	; 44
    13e4:	1a e0       	ldi	r17, 0x0A	; 10
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
//	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	f2 de       	rcall	.-540    	; 0x11ce <xchg_spi>
    13ea:	11 50       	subi	r17, 0x01	; 1
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <disk_initialize+0x40>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	ba 01       	movw	r22, r20
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	43 df       	rcall	.-378    	; 0x127e <send_cmd>
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <disk_initialize+0x58>
    13fc:	84 c0       	rjmp	.+264    	; 0x1506 <disk_initialize+0x160>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    13fe:	84 e6       	ldi	r24, 0x64	; 100
    1400:	80 93 50 04 	sts	0x0450, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    1404:	4a ea       	ldi	r20, 0xAA	; 170
    1406:	51 e0       	ldi	r21, 0x01	; 1
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	88 e0       	ldi	r24, 0x08	; 8
    140e:	37 df       	rcall	.-402    	; 0x127e <send_cmd>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <disk_initialize+0x70>
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <disk_initialize+0xee>
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	6c 01       	movw	r12, r24
    141c:	7e 01       	movw	r14, r28
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	e9 0e       	add	r14, r25
    1422:	f1 1c       	adc	r15, r1
    1424:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	d2 de       	rcall	.-604    	; 0x11ce <xchg_spi>
    142a:	f8 01       	movw	r30, r16
    142c:	81 93       	st	Z+, r24
    142e:	8f 01       	movw	r16, r30
    1430:	ee 15       	cp	r30, r14
    1432:	ff 05       	cpc	r31, r15
    1434:	c1 f7       	brne	.-16     	; 0x1426 <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	09 f0       	breq	.+2      	; 0x143e <disk_initialize+0x98>
    143c:	64 c0       	rjmp	.+200    	; 0x1506 <disk_initialize+0x160>
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	8a 3a       	cpi	r24, 0xAA	; 170
    1442:	09 f0       	breq	.+2      	; 0x1446 <disk_initialize+0xa0>
    1444:	60 c0       	rjmp	.+192    	; 0x1506 <disk_initialize+0x160>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1446:	80 91 50 04 	lds	r24, 0x0450
    144a:	88 23       	and	r24, r24
    144c:	41 f0       	breq	.+16     	; 0x145e <disk_initialize+0xb8>
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e4       	ldi	r23, 0x40	; 64
    1456:	89 ea       	ldi	r24, 0xA9	; 169
    1458:	12 df       	rcall	.-476    	; 0x127e <send_cmd>
    145a:	81 11       	cpse	r24, r1
    145c:	f4 cf       	rjmp	.-24     	; 0x1446 <disk_initialize+0xa0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    145e:	80 91 50 04 	lds	r24, 0x0450
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <disk_initialize+0xc2>
    1466:	4f c0       	rjmp	.+158    	; 0x1506 <disk_initialize+0x160>
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	ba 01       	movw	r22, r20
    146e:	8a e3       	ldi	r24, 0x3A	; 58
    1470:	06 df       	rcall	.-500    	; 0x127e <send_cmd>
    1472:	81 11       	cpse	r24, r1
    1474:	48 c0       	rjmp	.+144    	; 0x1506 <disk_initialize+0x160>
    1476:	76 01       	movw	r14, r12
    1478:	14 e0       	ldi	r17, 0x04	; 4
    147a:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	a7 de       	rcall	.-690    	; 0x11ce <xchg_spi>
    1480:	f7 01       	movw	r30, r14
    1482:	81 93       	st	Z+, r24
    1484:	7f 01       	movw	r14, r30
    1486:	1e 13       	cpse	r17, r30
    1488:	f9 cf       	rjmp	.-14     	; 0x147c <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	86 fd       	sbrc	r24, 6
    148e:	36 c0       	rjmp	.+108    	; 0x14fc <disk_initialize+0x156>
    1490:	84 e0       	ldi	r24, 0x04	; 4
    1492:	35 c0       	rjmp	.+106    	; 0x14fe <disk_initialize+0x158>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	ba 01       	movw	r22, r20
    149a:	89 ea       	ldi	r24, 0xA9	; 169
    149c:	f0 de       	rcall	.-544    	; 0x127e <send_cmd>
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	18 f0       	brcs	.+6      	; 0x14a8 <disk_initialize+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    14a2:	01 e0       	ldi	r16, 0x01	; 1
    14a4:	11 e0       	ldi	r17, 0x01	; 1
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <disk_initialize+0x106>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    14a8:	02 e0       	ldi	r16, 0x02	; 2
    14aa:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    14ac:	90 91 50 04 	lds	r25, 0x0450
    14b0:	99 23       	and	r25, r25
    14b2:	39 f0       	breq	.+14     	; 0x14c2 <disk_initialize+0x11c>
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	ba 01       	movw	r22, r20
    14ba:	81 2f       	mov	r24, r17
    14bc:	e0 de       	rcall	.-576    	; 0x127e <send_cmd>
    14be:	81 11       	cpse	r24, r1
    14c0:	f5 cf       	rjmp	.-22     	; 0x14ac <disk_initialize+0x106>
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
    14c2:	80 91 50 04 	lds	r24, 0x0450
    14c6:	88 23       	and	r24, r24
    14c8:	f1 f0       	breq	.+60     	; 0x1506 <disk_initialize+0x160>
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	52 e0       	ldi	r21, 0x02	; 2
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 e1       	ldi	r24, 0x10	; 16
    14d4:	d4 de       	rcall	.-600    	; 0x127e <send_cmd>
    14d6:	81 11       	cpse	r24, r1
    14d8:	16 c0       	rjmp	.+44     	; 0x1506 <disk_initialize+0x160>
				ty = 0;
		}
	}
	CardType = ty;
    14da:	00 93 4e 04 	sts	0x044E, r16
	deselect();
    14de:	7d de       	rcall	.-774    	; 0x11da <deselect>

	if (ty) {			/* Initialization succeded */
    14e0:	00 23       	and	r16, r16
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <disk_initialize+0x14a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    14e4:	80 91 06 01 	lds	r24, 0x0106
    14e8:	8e 7f       	andi	r24, 0xFE	; 254
    14ea:	80 93 06 01 	sts	0x0106, r24
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <disk_initialize+0x14c>
//		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    14f0:	68 de       	rcall	.-816    	; 0x11c2 <power_off>
	}

	return Stat;
    14f2:	80 91 06 01 	lds	r24, 0x0106
    14f6:	0b c0       	rjmp	.+22     	; 0x150e <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    14fc:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    14fe:	80 93 4e 04 	sts	0x044E, r24
	deselect();
    1502:	6b de       	rcall	.-810    	; 0x11da <deselect>
    1504:	ef cf       	rjmp	.-34     	; 0x14e4 <disk_initialize+0x13e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1506:	10 92 4e 04 	sts	0x044E, r1
	deselect();
    150a:	67 de       	rcall	.-818    	; 0x11da <deselect>
    150c:	f1 cf       	rjmp	.-30     	; 0x14f0 <disk_initialize+0x14a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	08 95       	ret

00001528 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1528:	81 11       	cpse	r24, r1
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <disk_status+0xa>
	return Stat;
    152c:	80 91 06 01 	lds	r24, 0x0106
    1530:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1532:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    1534:	08 95       	ret

00001536 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    1542:	81 11       	cpse	r24, r1
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <disk_read+0x8e>
    1546:	01 15       	cp	r16, r1
    1548:	11 05       	cpc	r17, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <disk_read+0x18>
    154c:	3d c0       	rjmp	.+122    	; 0x15c8 <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    154e:	80 91 06 01 	lds	r24, 0x0106
    1552:	80 fd       	sbrc	r24, 0
    1554:	3b c0       	rjmp	.+118    	; 0x15cc <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    1556:	80 91 4e 04 	lds	r24, 0x044E
    155a:	83 fd       	sbrc	r24, 3
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <disk_read+0x3a>
    155e:	01 2e       	mov	r0, r17
    1560:	19 e0       	ldi	r17, 0x09	; 9
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	44 1f       	adc	r20, r20
    1568:	55 1f       	adc	r21, r21
    156a:	1a 95       	dec	r17
    156c:	d1 f7       	brne	.-12     	; 0x1562 <disk_read+0x2c>
    156e:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    1570:	02 30       	cpi	r16, 0x02	; 2
    1572:	11 05       	cpc	r17, r1
    1574:	28 f4       	brcc	.+10     	; 0x1580 <disk_read+0x4a>
    1576:	0f 2e       	mov	r0, r31
    1578:	f1 e1       	ldi	r31, 0x11	; 17
    157a:	ff 2e       	mov	r15, r31
    157c:	f0 2d       	mov	r31, r0
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <disk_read+0x52>
    1580:	0f 2e       	mov	r0, r31
    1582:	f2 e1       	ldi	r31, 0x12	; 18
    1584:	ff 2e       	mov	r15, r31
    1586:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    1588:	ba 01       	movw	r22, r20
    158a:	a9 01       	movw	r20, r18
    158c:	8f 2d       	mov	r24, r15
    158e:	77 de       	rcall	.-786    	; 0x127e <send_cmd>
    1590:	81 11       	cpse	r24, r1
    1592:	12 c0       	rjmp	.+36     	; 0x15b8 <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, CLUSTERSIZE)) break;
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	72 e0       	ldi	r23, 0x02	; 2
    1598:	ce 01       	movw	r24, r28
    159a:	38 de       	rcall	.-912    	; 0x120c <rcvr_datablock>
    159c:	89 2b       	or	r24, r25
    159e:	21 f0       	breq	.+8      	; 0x15a8 <disk_read+0x72>
			buff += CLUSTERSIZE;
    15a0:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    15a2:	01 50       	subi	r16, 0x01	; 1
    15a4:	11 09       	sbc	r17, r1
    15a6:	b1 f7       	brne	.-20     	; 0x1594 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    15a8:	82 e1       	ldi	r24, 0x12	; 18
    15aa:	f8 12       	cpse	r15, r24
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <disk_read+0x82>
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	ba 01       	movw	r22, r20
    15b4:	8c e0       	ldi	r24, 0x0C	; 12
    15b6:	63 de       	rcall	.-826    	; 0x127e <send_cmd>
	}
	deselect();
    15b8:	10 de       	rcall	.-992    	; 0x11da <deselect>

	return count ? RES_ERROR : RES_OK;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	01 2b       	or	r16, r17
    15be:	39 f4       	brne	.+14     	; 0x15ce <disk_read+0x98>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <disk_read+0x98>
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    15cc:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	08 95       	ret

000015da <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	eb 01       	movw	r28, r22
    15ec:	69 01       	movw	r12, r18
    15ee:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    15f0:	81 11       	cpse	r24, r1
    15f2:	51 c0       	rjmp	.+162    	; 0x1696 <disk_write+0xbc>
    15f4:	01 15       	cp	r16, r1
    15f6:	11 05       	cpc	r17, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <disk_write+0x22>
    15fa:	4f c0       	rjmp	.+158    	; 0x169a <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    15fc:	80 91 06 01 	lds	r24, 0x0106
    1600:	80 fd       	sbrc	r24, 0
    1602:	4d c0       	rjmp	.+154    	; 0x169e <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1604:	80 91 06 01 	lds	r24, 0x0106
    1608:	82 fd       	sbrc	r24, 2
    160a:	4b c0       	rjmp	.+150    	; 0x16a2 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    160c:	80 91 4e 04 	lds	r24, 0x044E
    1610:	83 fd       	sbrc	r24, 3
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <disk_write+0x4c>
    1614:	0b 2e       	mov	r0, r27
    1616:	b9 e0       	ldi	r27, 0x09	; 9
    1618:	cc 0c       	add	r12, r12
    161a:	dd 1c       	adc	r13, r13
    161c:	ee 1c       	adc	r14, r14
    161e:	ff 1c       	adc	r15, r15
    1620:	ba 95       	dec	r27
    1622:	d1 f7       	brne	.-12     	; 0x1618 <disk_write+0x3e>
    1624:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    1626:	01 30       	cpi	r16, 0x01	; 1
    1628:	11 05       	cpc	r17, r1
    162a:	89 f4       	brne	.+34     	; 0x164e <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    162c:	b7 01       	movw	r22, r14
    162e:	a6 01       	movw	r20, r12
    1630:	88 e1       	ldi	r24, 0x18	; 24
    1632:	25 de       	rcall	.-950    	; 0x127e <send_cmd>
    1634:	81 11       	cpse	r24, r1
    1636:	29 c0       	rjmp	.+82     	; 0x168a <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    1638:	6e ef       	ldi	r22, 0xFE	; 254
    163a:	ce 01       	movw	r24, r28
    163c:	76 de       	rcall	.-788    	; 0x132a <xmit_datablock>
    163e:	31 e0       	ldi	r19, 0x01	; 1
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	89 2b       	or	r24, r25
    1644:	09 f0       	breq	.+2      	; 0x1648 <disk_write+0x6e>
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	03 2f       	mov	r16, r19
    164a:	12 2f       	mov	r17, r18
    164c:	1e c0       	rjmp	.+60     	; 0x168a <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    164e:	86 70       	andi	r24, 0x06	; 6
    1650:	29 f0       	breq	.+10     	; 0x165c <disk_write+0x82>
    1652:	a8 01       	movw	r20, r16
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	87 e9       	ldi	r24, 0x97	; 151
    165a:	11 de       	rcall	.-990    	; 0x127e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    165c:	b7 01       	movw	r22, r14
    165e:	a6 01       	movw	r20, r12
    1660:	89 e1       	ldi	r24, 0x19	; 25
    1662:	0d de       	rcall	.-998    	; 0x127e <send_cmd>
    1664:	81 11       	cpse	r24, r1
    1666:	11 c0       	rjmp	.+34     	; 0x168a <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1668:	6c ef       	ldi	r22, 0xFC	; 252
    166a:	ce 01       	movw	r24, r28
    166c:	5e de       	rcall	.-836    	; 0x132a <xmit_datablock>
    166e:	89 2b       	or	r24, r25
    1670:	21 f0       	breq	.+8      	; 0x167a <disk_write+0xa0>
				buff += CLUSTERSIZE;
    1672:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    1674:	01 50       	subi	r16, 0x01	; 1
    1676:	11 09       	sbc	r17, r1
    1678:	b9 f7       	brne	.-18     	; 0x1668 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    167a:	6d ef       	ldi	r22, 0xFD	; 253
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	54 de       	rcall	.-856    	; 0x132a <xmit_datablock>
    1682:	89 2b       	or	r24, r25
    1684:	11 f4       	brne	.+4      	; 0x168a <disk_write+0xb0>
				count = 1;
    1686:	01 e0       	ldi	r16, 0x01	; 1
    1688:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    168a:	a7 dd       	rcall	.-1202   	; 0x11da <deselect>

	return count ? RES_ERROR : RES_OK;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	01 2b       	or	r16, r17
    1690:	49 f4       	brne	.+18     	; 0x16a4 <disk_write+0xca>
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	07 c0       	rjmp	.+14     	; 0x16a4 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    1696:	84 e0       	ldi	r24, 0x04	; 4
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <disk_write+0xca>
    169a:	84 e0       	ldi	r24, 0x04	; 4
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    16a2:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	cf 90       	pop	r12
    16b4:	08 95       	ret

000016b6 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	60 97       	sbiw	r28, 0x10	; 16
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    16d2:	81 11       	cpse	r24, r1
    16d4:	7c c1       	rjmp	.+760    	; 0x19ce <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    16d6:	80 91 06 01 	lds	r24, 0x0106
    16da:	80 fd       	sbrc	r24, 0
    16dc:	7a c1       	rjmp	.+756    	; 0x19d2 <disk_ioctl+0x31c>
    16de:	7a 01       	movw	r14, r20

	switch (cmd) {
    16e0:	06 2f       	mov	r16, r22
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	07 33       	cpi	r16, 0x37	; 55
    16e6:	11 05       	cpc	r17, r1
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <disk_ioctl+0x36>
    16ea:	59 c1       	rjmp	.+690    	; 0x199e <disk_ioctl+0x2e8>
    16ec:	f8 01       	movw	r30, r16
    16ee:	ea 5b       	subi	r30, 0xBA	; 186
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	0c 94 dd 4a 	jmp	0x95ba	; 0x95ba <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    16f6:	75 dd       	rcall	.-1302   	; 0x11e2 <select>
    16f8:	11 e0       	ldi	r17, 0x01	; 1
    16fa:	89 2b       	or	r24, r25
    16fc:	09 f4       	brne	.+2      	; 0x1700 <disk_ioctl+0x4a>
    16fe:	64 c1       	rjmp	.+712    	; 0x19c8 <disk_ioctl+0x312>
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	62 c1       	rjmp	.+708    	; 0x19c8 <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	ba 01       	movw	r22, r20
    170a:	89 e0       	ldi	r24, 0x09	; 9
    170c:	b8 dd       	rcall	.-1168   	; 0x127e <send_cmd>
    170e:	81 11       	cpse	r24, r1
    1710:	48 c1       	rjmp	.+656    	; 0x19a2 <disk_ioctl+0x2ec>
    1712:	60 e1       	ldi	r22, 0x10	; 16
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	78 dd       	rcall	.-1296   	; 0x120c <rcvr_datablock>
    171c:	89 2b       	or	r24, r25
    171e:	09 f4       	brne	.+2      	; 0x1722 <disk_ioctl+0x6c>
    1720:	42 c1       	rjmp	.+644    	; 0x19a6 <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	82 95       	swap	r24
    1726:	86 95       	lsr	r24
    1728:	86 95       	lsr	r24
    172a:	83 70       	andi	r24, 0x03	; 3
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	31 f5       	brne	.+76     	; 0x177c <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    1730:	88 85       	ldd	r24, Y+8	; 0x08
    1732:	8f 73       	andi	r24, 0x3F	; 63
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	dc 01       	movw	r26, r24
    173c:	99 27       	eor	r25, r25
    173e:	88 27       	eor	r24, r24
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	a1 1d       	adc	r26, r1
    1744:	b1 1d       	adc	r27, r1
    1746:	29 85       	ldd	r18, Y+9	; 0x09
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	32 2f       	mov	r19, r18
    174c:	22 27       	eor	r18, r18
    174e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1750:	24 0f       	add	r18, r20
    1752:	31 1d       	adc	r19, r1
    1754:	82 0f       	add	r24, r18
    1756:	93 1f       	adc	r25, r19
    1758:	a1 1d       	adc	r26, r1
    175a:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    175c:	07 2e       	mov	r0, r23
    175e:	7a e0       	ldi	r23, 0x0A	; 10
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	aa 1f       	adc	r26, r26
    1766:	bb 1f       	adc	r27, r27
    1768:	7a 95       	dec	r23
    176a:	d1 f7       	brne	.-12     	; 0x1760 <disk_ioctl+0xaa>
    176c:	70 2d       	mov	r23, r0
    176e:	f7 01       	movw	r30, r14
    1770:	80 83       	st	Z, r24
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	a2 83       	std	Z+2, r26	; 0x02
    1776:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    1778:	10 e0       	ldi	r17, 0x00	; 0
    177a:	26 c1       	rjmp	.+588    	; 0x19c8 <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	82 95       	swap	r24
    1780:	86 95       	lsr	r24
    1782:	86 95       	lsr	r24
    1784:	83 70       	andi	r24, 0x03	; 3
    1786:	28 85       	ldd	r18, Y+8	; 0x08
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	f4 e0       	ldi	r31, 0x04	; 4
    178c:	2f 9f       	mul	r18, r31
    178e:	80 0d       	add	r24, r0
    1790:	91 1d       	adc	r25, r1
    1792:	11 24       	eor	r1, r1
    1794:	9c 01       	movw	r18, r24
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	8f 81       	ldd	r24, Y+7	; 0x07
    179c:	83 70       	andi	r24, 0x03	; 3
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	98 2f       	mov	r25, r24
    17a2:	88 27       	eor	r24, r24
    17a4:	99 0f       	add	r25, r25
    17a6:	99 0f       	add	r25, r25
    17a8:	82 0f       	add	r24, r18
    17aa:	93 1f       	adc	r25, r19
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    17b0:	3e 81       	ldd	r19, Y+6	; 0x06
    17b2:	3f 70       	andi	r19, 0x0F	; 15
    17b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    17b6:	22 1f       	adc	r18, r18
    17b8:	22 27       	eor	r18, r18
    17ba:	22 1f       	adc	r18, r18
    17bc:	32 0f       	add	r19, r18
    17be:	2a 85       	ldd	r18, Y+10	; 0x0a
    17c0:	23 70       	andi	r18, 0x03	; 3
    17c2:	22 0f       	add	r18, r18
    17c4:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    17c6:	27 50       	subi	r18, 0x07	; 7
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <disk_ioctl+0x11c>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	aa 1f       	adc	r26, r26
    17d0:	bb 1f       	adc	r27, r27
    17d2:	2a 95       	dec	r18
    17d4:	d2 f7       	brpl	.-12     	; 0x17ca <disk_ioctl+0x114>
    17d6:	f7 01       	movw	r30, r14
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    17e2:	f2 c0       	rjmp	.+484    	; 0x19c8 <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    17e4:	10 91 4e 04 	lds	r17, 0x044E
    17e8:	12 ff       	sbrs	r17, 2
    17ea:	2a c0       	rjmp	.+84     	; 0x1840 <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	ba 01       	movw	r22, r20
    17f2:	8d e8       	ldi	r24, 0x8D	; 141
    17f4:	44 dd       	rcall	.-1400   	; 0x127e <send_cmd>
    17f6:	81 11       	cpse	r24, r1
    17f8:	d8 c0       	rjmp	.+432    	; 0x19aa <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	e8 dc       	rcall	.-1584   	; 0x11ce <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    17fe:	60 e1       	ldi	r22, 0x10	; 16
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	ce 01       	movw	r24, r28
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	02 dd       	rcall	.-1532   	; 0x120c <rcvr_datablock>
    1808:	89 2b       	or	r24, r25
    180a:	09 f4       	brne	.+2      	; 0x180e <disk_ioctl+0x158>
    180c:	d0 c0       	rjmp	.+416    	; 0x19ae <disk_ioctl+0x2f8>
    180e:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	dd dc       	rcall	.-1606   	; 0x11ce <xchg_spi>
    1814:	11 50       	subi	r17, 0x01	; 1
    1816:	e1 f7       	brne	.-8      	; 0x1810 <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1818:	2b 85       	ldd	r18, Y+11	; 0x0b
    181a:	22 95       	swap	r18
    181c:	2f 70       	andi	r18, 0x0F	; 15
    181e:	80 e1       	ldi	r24, 0x10	; 16
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <disk_ioctl+0x17a>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	aa 1f       	adc	r26, r26
    182e:	bb 1f       	adc	r27, r27
    1830:	2a 95       	dec	r18
    1832:	d2 f7       	brpl	.-12     	; 0x1828 <disk_ioctl+0x172>
    1834:	f7 01       	movw	r30, r14
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
    183e:	c4 c0       	rjmp	.+392    	; 0x19c8 <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	ba 01       	movw	r22, r20
    1846:	89 e0       	ldi	r24, 0x09	; 9
    1848:	1a dd       	rcall	.-1484   	; 0x127e <send_cmd>
    184a:	81 11       	cpse	r24, r1
    184c:	b2 c0       	rjmp	.+356    	; 0x19b2 <disk_ioctl+0x2fc>
    184e:	60 e1       	ldi	r22, 0x10	; 16
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	da dc       	rcall	.-1612   	; 0x120c <rcvr_datablock>
    1858:	89 2b       	or	r24, r25
    185a:	09 f4       	brne	.+2      	; 0x185e <disk_ioctl+0x1a8>
    185c:	ac c0       	rjmp	.+344    	; 0x19b6 <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
    185e:	11 ff       	sbrs	r17, 1
    1860:	20 c0       	rjmp	.+64     	; 0x18a2 <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1862:	8c 85       	ldd	r24, Y+12	; 0x0c
    1864:	88 1f       	adc	r24, r24
    1866:	88 27       	eor	r24, r24
    1868:	88 1f       	adc	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1870:	2f 73       	andi	r18, 0x3F	; 63
    1872:	82 0f       	add	r24, r18
    1874:	91 1d       	adc	r25, r1
    1876:	82 0f       	add	r24, r18
    1878:	91 1d       	adc	r25, r1
    187a:	2e 85       	ldd	r18, Y+14	; 0x0e
    187c:	22 95       	swap	r18
    187e:	26 95       	lsr	r18
    1880:	26 95       	lsr	r18
    1882:	23 70       	andi	r18, 0x03	; 3
    1884:	21 50       	subi	r18, 0x01	; 1
    1886:	02 c0       	rjmp	.+4      	; 0x188c <disk_ioctl+0x1d6>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	2a 95       	dec	r18
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <disk_ioctl+0x1d2>
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	f7 01       	movw	r30, r14
    1896:	80 83       	st	Z, r24
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	a2 83       	std	Z+2, r26	; 0x02
    189c:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	93 c0       	rjmp	.+294    	; 0x19c8 <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    18a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a4:	28 2f       	mov	r18, r24
    18a6:	23 70       	andi	r18, 0x03	; 3
    18a8:	82 95       	swap	r24
    18aa:	86 95       	lsr	r24
    18ac:	87 70       	andi	r24, 0x07	; 7
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	f8 e0       	ldi	r31, 0x08	; 8
    18b2:	2f 9f       	mul	r18, r31
    18b4:	80 0d       	add	r24, r0
    18b6:	91 1d       	adc	r25, r1
    18b8:	11 24       	eor	r1, r1
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    18be:	2c 77       	andi	r18, 0x7C	; 124
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	35 95       	asr	r19
    18c4:	27 95       	ror	r18
    18c6:	35 95       	asr	r19
    18c8:	27 95       	ror	r18
    18ca:	2f 5f       	subi	r18, 0xFF	; 255
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	82 9f       	mul	r24, r18
    18d0:	a0 01       	movw	r20, r0
    18d2:	83 9f       	mul	r24, r19
    18d4:	50 0d       	add	r21, r0
    18d6:	92 9f       	mul	r25, r18
    18d8:	50 0d       	add	r21, r0
    18da:	11 24       	eor	r1, r1
    18dc:	ca 01       	movw	r24, r20
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	f7 01       	movw	r30, r14
    18e4:	80 83       	st	Z, r24
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	a2 83       	std	Z+2, r26	; 0x02
    18ea:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	6c c0       	rjmp	.+216    	; 0x19c8 <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    18f0:	80 91 4e 04 	lds	r24, 0x044E
    18f4:	fa 01       	movw	r30, r20
    18f6:	80 83       	st	Z, r24
		res = RES_OK;
    18f8:	10 e0       	ldi	r17, 0x00	; 0
		break;
    18fa:	66 c0       	rjmp	.+204    	; 0x19c8 <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	ba 01       	movw	r22, r20
    1902:	89 e0       	ldi	r24, 0x09	; 9
    1904:	bc dc       	rcall	.-1672   	; 0x127e <send_cmd>
    1906:	81 11       	cpse	r24, r1
    1908:	58 c0       	rjmp	.+176    	; 0x19ba <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
    190a:	60 e1       	ldi	r22, 0x10	; 16
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	c7 01       	movw	r24, r14
    1910:	7d dc       	rcall	.-1798   	; 0x120c <rcvr_datablock>
    1912:	11 e0       	ldi	r17, 0x01	; 1
    1914:	89 2b       	or	r24, r25
    1916:	09 f4       	brne	.+2      	; 0x191a <disk_ioctl+0x264>
    1918:	57 c0       	rjmp	.+174    	; 0x19c8 <disk_ioctl+0x312>
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	55 c0       	rjmp	.+170    	; 0x19c8 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	ba 01       	movw	r22, r20
    1924:	8a e0       	ldi	r24, 0x0A	; 10
    1926:	ab dc       	rcall	.-1706   	; 0x127e <send_cmd>
    1928:	81 11       	cpse	r24, r1
    192a:	49 c0       	rjmp	.+146    	; 0x19be <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
    192c:	60 e1       	ldi	r22, 0x10	; 16
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	c7 01       	movw	r24, r14
    1932:	6c dc       	rcall	.-1832   	; 0x120c <rcvr_datablock>
    1934:	11 e0       	ldi	r17, 0x01	; 1
    1936:	89 2b       	or	r24, r25
    1938:	09 f4       	brne	.+2      	; 0x193c <disk_ioctl+0x286>
    193a:	46 c0       	rjmp	.+140    	; 0x19c8 <disk_ioctl+0x312>
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	44 c0       	rjmp	.+136    	; 0x19c8 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	ba 01       	movw	r22, r20
    1946:	8a e3       	ldi	r24, 0x3A	; 58
    1948:	9a dc       	rcall	.-1740   	; 0x127e <send_cmd>
    194a:	81 11       	cpse	r24, r1
    194c:	3a c0       	rjmp	.+116    	; 0x19c2 <disk_ioctl+0x30c>
    194e:	87 01       	movw	r16, r14
    1950:	f4 e0       	ldi	r31, 0x04	; 4
    1952:	ef 0e       	add	r14, r31
    1954:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	3a dc       	rcall	.-1932   	; 0x11ce <xchg_spi>
    195a:	f8 01       	movw	r30, r16
    195c:	81 93       	st	Z+, r24
    195e:	8f 01       	movw	r16, r30
    1960:	ee 15       	cp	r30, r14
    1962:	ff 05       	cpc	r31, r15
    1964:	c1 f7       	brne	.-16     	; 0x1956 <disk_ioctl+0x2a0>
			res = RES_OK;
    1966:	10 e0       	ldi	r17, 0x00	; 0
    1968:	2f c0       	rjmp	.+94     	; 0x19c8 <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	ba 01       	movw	r22, r20
    1970:	8d e8       	ldi	r24, 0x8D	; 141
    1972:	85 dc       	rcall	.-1782   	; 0x127e <send_cmd>
    1974:	81 11       	cpse	r24, r1
    1976:	27 c0       	rjmp	.+78     	; 0x19c6 <disk_ioctl+0x310>
			xchg_spi(0xFF);
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	29 dc       	rcall	.-1966   	; 0x11ce <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    197c:	60 e4       	ldi	r22, 0x40	; 64
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	c7 01       	movw	r24, r14
    1982:	44 dc       	rcall	.-1912   	; 0x120c <rcvr_datablock>
    1984:	11 e0       	ldi	r17, 0x01	; 1
    1986:	89 2b       	or	r24, r25
    1988:	f9 f0       	breq	.+62     	; 0x19c8 <disk_ioctl+0x312>
    198a:	10 e0       	ldi	r17, 0x00	; 0
    198c:	1d c0       	rjmp	.+58     	; 0x19c8 <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    198e:	19 dc       	rcall	.-1998   	; 0x11c2 <power_off>
		Stat |= STA_NOINIT;
    1990:	80 91 06 01 	lds	r24, 0x0106
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	80 93 06 01 	sts	0x0106, r24
		res = RES_OK;
    199a:	10 e0       	ldi	r17, 0x00	; 0
		break;
    199c:	15 c0       	rjmp	.+42     	; 0x19c8 <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
    199e:	14 e0       	ldi	r17, 0x04	; 4
    19a0:	13 c0       	rjmp	.+38     	; 0x19c8 <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    19a2:	11 e0       	ldi	r17, 0x01	; 1
    19a4:	11 c0       	rjmp	.+34     	; 0x19c8 <disk_ioctl+0x312>
    19a6:	11 e0       	ldi	r17, 0x01	; 1
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <disk_ioctl+0x312>
    19aa:	11 e0       	ldi	r17, 0x01	; 1
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <disk_ioctl+0x312>
    19ae:	11 e0       	ldi	r17, 0x01	; 1
    19b0:	0b c0       	rjmp	.+22     	; 0x19c8 <disk_ioctl+0x312>
    19b2:	11 e0       	ldi	r17, 0x01	; 1
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <disk_ioctl+0x312>
    19b6:	11 e0       	ldi	r17, 0x01	; 1
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <disk_ioctl+0x312>
    19ba:	11 e0       	ldi	r17, 0x01	; 1
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <disk_ioctl+0x312>
    19be:	11 e0       	ldi	r17, 0x01	; 1
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <disk_ioctl+0x312>
    19c2:	11 e0       	ldi	r17, 0x01	; 1
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <disk_ioctl+0x312>
    19c6:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    19c8:	08 dc       	rcall	.-2032   	; 0x11da <deselect>

	return res;
    19ca:	81 2f       	mov	r24, r17
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    19ce:	84 e0       	ldi	r24, 0x04	; 4
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    19d2:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    19d4:	60 96       	adiw	r28, 0x10	; 16
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	08 95       	ret

000019ee <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    19ee:	80 91 50 04 	lds	r24, 0x0450
	if (n) Timer1 = --n;
    19f2:	88 23       	and	r24, r24
    19f4:	19 f0       	breq	.+6      	; 0x19fc <disk_timerproc+0xe>
    19f6:	81 50       	subi	r24, 0x01	; 1
    19f8:	80 93 50 04 	sts	0x0450, r24
	n = Timer2;
    19fc:	80 91 4f 04 	lds	r24, 0x044F
	if (n) Timer2 = --n;
    1a00:	88 23       	and	r24, r24
    1a02:	19 f0       	breq	.+6      	; 0x1a0a <disk_timerproc+0x1c>
    1a04:	81 50       	subi	r24, 0x01	; 1
    1a06:	80 93 4f 04 	sts	0x044F, r24
	
	s = Stat;
    1a0a:	80 91 06 01 	lds	r24, 0x0106
//	if (MMC_CD)				/* Card inserted */
//		s &= ~STA_NODISK;
//	else					/* Socket empty */
//		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    1a0e:	80 93 06 01 	sts	0x0106, r24
    1a12:	08 95       	ret

00001a14 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
    1a14:	9c 5f       	subi	r25, 0xFC	; 252
    1a16:	0c 94 44 26 	jmp	0x4c88	; 0x4c88 <_ZN3I2CD1Ev>
    1a1a:	08 95       	ret

00001a1c <_ZN7Display10clearFrameEv>:
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	9c 5f       	subi	r25, 0xFC	; 252
    1a20:	11 92       	st	Z+, r1
    1a22:	e8 17       	cp	r30, r24
    1a24:	f9 07       	cpc	r31, r25
    1a26:	e1 f7       	brne	.-8      	; 0x1a20 <_ZN7Display10clearFrameEv+0x4>
    1a28:	08 95       	ret

00001a2a <_ZN7Display15ssd1306_commandEh>:
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	16 2f       	mov	r17, r22
    1a32:	ec 01       	movw	r28, r24
    1a34:	dc 5f       	subi	r29, 0xFC	; 252
    1a36:	ce 01       	movw	r24, r28
    1a38:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN3I2C9twi_startEv>
    1a3c:	68 e7       	ldi	r22, 0x78	; 120
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	ce 01       	movw	r24, r28
    1a48:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
    1a4c:	61 2f       	mov	r22, r17
    1a4e:	ce 01       	movw	r24, r28
    1a50:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
    1a54:	ce 01       	movw	r24, r28
    1a56:	0e 94 49 26 	call	0x4c92	; 0x4c92 <_ZN3I2C8twi_stopEv>
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	08 95       	ret

00001a62 <_ZN7Display17InitializeDisplayEv>:
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	ec 01       	movw	r28, r24
    1a68:	6e ea       	ldi	r22, 0xAE	; 174
    1a6a:	df df       	rcall	.-66     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a6c:	65 ed       	ldi	r22, 0xD5	; 213
    1a6e:	ce 01       	movw	r24, r28
    1a70:	dc df       	rcall	.-72     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a72:	60 e8       	ldi	r22, 0x80	; 128
    1a74:	ce 01       	movw	r24, r28
    1a76:	d9 df       	rcall	.-78     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a78:	68 ea       	ldi	r22, 0xA8	; 168
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	d6 df       	rcall	.-84     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a7e:	6f e3       	ldi	r22, 0x3F	; 63
    1a80:	ce 01       	movw	r24, r28
    1a82:	d3 df       	rcall	.-90     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a84:	63 ed       	ldi	r22, 0xD3	; 211
    1a86:	ce 01       	movw	r24, r28
    1a88:	d0 df       	rcall	.-96     	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	cd df       	rcall	.-102    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a90:	60 e4       	ldi	r22, 0x40	; 64
    1a92:	ce 01       	movw	r24, r28
    1a94:	ca df       	rcall	.-108    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a96:	6d e8       	ldi	r22, 0x8D	; 141
    1a98:	ce 01       	movw	r24, r28
    1a9a:	c7 df       	rcall	.-114    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1a9c:	64 e1       	ldi	r22, 0x14	; 20
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	c4 df       	rcall	.-120    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aa2:	60 e2       	ldi	r22, 0x20	; 32
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	c1 df       	rcall	.-126    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	ce 01       	movw	r24, r28
    1aac:	be df       	rcall	.-132    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aae:	61 ea       	ldi	r22, 0xA1	; 161
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	bb df       	rcall	.-138    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ab4:	68 ec       	ldi	r22, 0xC8	; 200
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	b8 df       	rcall	.-144    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aba:	6a ed       	ldi	r22, 0xDA	; 218
    1abc:	ce 01       	movw	r24, r28
    1abe:	b5 df       	rcall	.-150    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ac0:	62 e1       	ldi	r22, 0x12	; 18
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	b2 df       	rcall	.-156    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ac6:	61 e8       	ldi	r22, 0x81	; 129
    1ac8:	ce 01       	movw	r24, r28
    1aca:	af df       	rcall	.-162    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1acc:	6f ec       	ldi	r22, 0xCF	; 207
    1ace:	ce 01       	movw	r24, r28
    1ad0:	ac df       	rcall	.-168    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ad2:	69 ed       	ldi	r22, 0xD9	; 217
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	a9 df       	rcall	.-174    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ad8:	61 ef       	ldi	r22, 0xF1	; 241
    1ada:	ce 01       	movw	r24, r28
    1adc:	a6 df       	rcall	.-180    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ade:	6b ed       	ldi	r22, 0xDB	; 219
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	a3 df       	rcall	.-186    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1ae4:	60 e4       	ldi	r22, 0x40	; 64
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	a0 df       	rcall	.-192    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1aea:	64 ea       	ldi	r22, 0xA4	; 164
    1aec:	ce 01       	movw	r24, r28
    1aee:	9d df       	rcall	.-198    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1af0:	66 ea       	ldi	r22, 0xA6	; 166
    1af2:	ce 01       	movw	r24, r28
    1af4:	9a df       	rcall	.-204    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1af6:	6f ea       	ldi	r22, 0xAF	; 175
    1af8:	ce 01       	movw	r24, r28
    1afa:	97 df       	rcall	.-210    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <_ZN7DisplayC1Ev>:
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	ec 01       	movw	r28, r24
    1b08:	9c 5f       	subi	r25, 0xFC	; 252
    1b0a:	0e 94 40 26 	call	0x4c80	; 0x4c80 <_ZN3I2CC1Ev>
    1b0e:	ce 01       	movw	r24, r28
    1b10:	a8 df       	rcall	.-176    	; 0x1a62 <_ZN7Display17InitializeDisplayEv>
    1b12:	ce 01       	movw	r24, r28
    1b14:	83 df       	rcall	.-250    	; 0x1a1c <_ZN7Display10clearFrameEv>
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <_ZN7Display9sendFrameEv>:
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
    1b2a:	61 e2       	ldi	r22, 0x21	; 33
    1b2c:	7e df       	rcall	.-260    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	ce 01       	movw	r24, r28
    1b32:	7b df       	rcall	.-266    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b34:	6f e7       	ldi	r22, 0x7F	; 127
    1b36:	ce 01       	movw	r24, r28
    1b38:	78 df       	rcall	.-272    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b3a:	62 e2       	ldi	r22, 0x22	; 34
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	75 df       	rcall	.-278    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	ce 01       	movw	r24, r28
    1b44:	72 df       	rcall	.-284    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b46:	67 e0       	ldi	r22, 0x07	; 7
    1b48:	ce 01       	movw	r24, r28
    1b4a:	6f df       	rcall	.-290    	; 0x1a2a <_ZN7Display15ssd1306_commandEh>
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	1c 5f       	subi	r17, 0xFC	; 252
    1b50:	c8 01       	movw	r24, r16
    1b52:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN3I2C9twi_startEv>
    1b56:	68 e7       	ldi	r22, 0x78	; 120
    1b58:	c8 01       	movw	r24, r16
    1b5a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
    1b5e:	60 e4       	ldi	r22, 0x40	; 64
    1b60:	c8 01       	movw	r24, r16
    1b62:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
    1b66:	78 01       	movw	r14, r16
    1b68:	69 91       	ld	r22, Y+
    1b6a:	c8 01       	movw	r24, r16
    1b6c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN3I2C9twi_writeEh>
    1b70:	ce 15       	cp	r28, r14
    1b72:	df 05       	cpc	r29, r15
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <_ZN7Display9sendFrameEv+0x4c>
    1b76:	c8 01       	movw	r24, r16
    1b78:	0e 94 49 26 	call	0x4c92	; 0x4c92 <_ZN3I2C8twi_stopEv>
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	08 95       	ret

00001b8a <_ZN7Display9drawPixelEhhh>:
    1b8a:	66 23       	and	r22, r22
    1b8c:	ac f1       	brlt	.+106    	; 0x1bf8 <_ZN7Display9drawPixelEhhh+0x6e>
    1b8e:	40 34       	cpi	r20, 0x40	; 64
    1b90:	98 f5       	brcc	.+102    	; 0x1bf8 <_ZN7Display9drawPixelEhhh+0x6e>
    1b92:	21 11       	cpse	r18, r1
    1b94:	19 c0       	rjmp	.+50     	; 0x1bc8 <_ZN7Display9drawPixelEhhh+0x3e>
    1b96:	24 2f       	mov	r18, r20
    1b98:	26 95       	lsr	r18
    1b9a:	26 95       	lsr	r18
    1b9c:	26 95       	lsr	r18
    1b9e:	50 e8       	ldi	r21, 0x80	; 128
    1ba0:	25 9f       	mul	r18, r21
    1ba2:	90 01       	movw	r18, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	26 0f       	add	r18, r22
    1ba8:	31 1d       	adc	r19, r1
    1baa:	fc 01       	movw	r30, r24
    1bac:	e2 0f       	add	r30, r18
    1bae:	f3 1f       	adc	r31, r19
    1bb0:	47 70       	andi	r20, 0x07	; 7
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <_ZN7Display9drawPixelEhhh+0x32>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	4a 95       	dec	r20
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <_ZN7Display9drawPixelEhhh+0x2e>
    1bc0:	90 81       	ld	r25, Z
    1bc2:	89 2b       	or	r24, r25
    1bc4:	80 83       	st	Z, r24
    1bc6:	08 95       	ret
    1bc8:	24 2f       	mov	r18, r20
    1bca:	26 95       	lsr	r18
    1bcc:	26 95       	lsr	r18
    1bce:	26 95       	lsr	r18
    1bd0:	30 e8       	ldi	r19, 0x80	; 128
    1bd2:	23 9f       	mul	r18, r19
    1bd4:	f0 01       	movw	r30, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	e6 0f       	add	r30, r22
    1bda:	f1 1d       	adc	r31, r1
    1bdc:	e8 0f       	add	r30, r24
    1bde:	f9 1f       	adc	r31, r25
    1be0:	47 70       	andi	r20, 0x07	; 7
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <_ZN7Display9drawPixelEhhh+0x62>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	4a 95       	dec	r20
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <_ZN7Display9drawPixelEhhh+0x5e>
    1bf0:	80 95       	com	r24
    1bf2:	90 81       	ld	r25, Z
    1bf4:	89 23       	and	r24, r25
    1bf6:	80 83       	st	Z, r24
    1bf8:	08 95       	ret

00001bfa <_ZN7Display9drawVLineEhhh>:
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	22 23       	and	r18, r18
    1c06:	69 f0       	breq	.+26     	; 0x1c22 <_ZN7Display9drawVLineEhhh+0x28>
    1c08:	c4 2f       	mov	r28, r20
    1c0a:	f6 2e       	mov	r15, r22
    1c0c:	8c 01       	movw	r16, r24
    1c0e:	d2 2f       	mov	r29, r18
    1c10:	d4 0f       	add	r29, r20
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	4c 2f       	mov	r20, r28
    1c16:	6f 2d       	mov	r22, r15
    1c18:	c8 01       	movw	r24, r16
    1c1a:	b7 df       	rcall	.-146    	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1c1c:	cf 5f       	subi	r28, 0xFF	; 255
    1c1e:	cd 13       	cpse	r28, r29
    1c20:	f8 cf       	rjmp	.-16     	; 0x1c12 <_ZN7Display9drawVLineEhhh+0x18>
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	08 95       	ret

00001c2e <_ZN7Display9drawHLineEhhh>:
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	22 23       	and	r18, r18
    1c3a:	69 f0       	breq	.+26     	; 0x1c56 <_ZN7Display9drawHLineEhhh+0x28>
    1c3c:	f4 2e       	mov	r15, r20
    1c3e:	c6 2f       	mov	r28, r22
    1c40:	8c 01       	movw	r16, r24
    1c42:	d2 2f       	mov	r29, r18
    1c44:	d6 0f       	add	r29, r22
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	4f 2d       	mov	r20, r15
    1c4a:	6c 2f       	mov	r22, r28
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	9d df       	rcall	.-198    	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1c50:	cf 5f       	subi	r28, 0xFF	; 255
    1c52:	cd 13       	cpse	r28, r29
    1c54:	f8 cf       	rjmp	.-16     	; 0x1c46 <_ZN7Display9drawHLineEhhh+0x18>
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	08 95       	ret

00001c62 <_ZN7Display13drawRectangleEhhhhh>:
    1c62:	5f 92       	push	r5
    1c64:	6f 92       	push	r6
    1c66:	7f 92       	push	r7
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	6c 01       	movw	r12, r24
    1c82:	76 2e       	mov	r7, r22
    1c84:	84 2e       	mov	r8, r20
    1c86:	c2 2f       	mov	r28, r18
    1c88:	a2 2e       	mov	r10, r18
    1c8a:	a6 1a       	sub	r10, r22
    1c8c:	a3 94       	inc	r10
    1c8e:	d0 2f       	mov	r29, r16
    1c90:	d4 1b       	sub	r29, r20
    1c92:	ee 20       	and	r14, r14
    1c94:	29 f0       	breq	.+10     	; 0x1ca0 <_ZN7Display13drawRectangleEhhhhh+0x3e>
    1c96:	b1 2c       	mov	r11, r1
    1c98:	1a 14       	cp	r1, r10
    1c9a:	1b 04       	cpc	r1, r11
    1c9c:	24 f1       	brlt	.+72     	; 0x1ce6 <_ZN7Display13drawRectangleEhhhhh+0x84>
    1c9e:	2e c0       	rjmp	.+92     	; 0x1cfc <_ZN7Display13drawRectangleEhhhhh+0x9a>
    1ca0:	2a 2d       	mov	r18, r10
    1ca2:	c5 df       	rcall	.-118    	; 0x1c2e <_ZN7Display9drawHLineEhhh>
    1ca4:	2a 2d       	mov	r18, r10
    1ca6:	40 2f       	mov	r20, r16
    1ca8:	67 2d       	mov	r22, r7
    1caa:	c6 01       	movw	r24, r12
    1cac:	c0 df       	rcall	.-128    	; 0x1c2e <_ZN7Display9drawHLineEhhh>
    1cae:	2d 2f       	mov	r18, r29
    1cb0:	48 2d       	mov	r20, r8
    1cb2:	67 2d       	mov	r22, r7
    1cb4:	c6 01       	movw	r24, r12
    1cb6:	a1 df       	rcall	.-190    	; 0x1bfa <_ZN7Display9drawVLineEhhh>
    1cb8:	2d 2f       	mov	r18, r29
    1cba:	48 2d       	mov	r20, r8
    1cbc:	6c 2f       	mov	r22, r28
    1cbe:	c6 01       	movw	r24, r12
    1cc0:	9c df       	rcall	.-200    	; 0x1bfa <_ZN7Display9drawVLineEhhh>
    1cc2:	1c c0       	rjmp	.+56     	; 0x1cfc <_ZN7Display13drawRectangleEhhhhh+0x9a>
    1cc4:	4c 2f       	mov	r20, r28
    1cc6:	48 0d       	add	r20, r8
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	69 2d       	mov	r22, r9
    1ccc:	c6 01       	movw	r24, r12
    1cce:	5d df       	rcall	.-326    	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1cd0:	21 96       	adiw	r28, 0x01	; 1
    1cd2:	0c 17       	cp	r16, r28
    1cd4:	1d 07       	cpc	r17, r29
    1cd6:	b4 f7       	brge	.-20     	; 0x1cc4 <_ZN7Display13drawRectangleEhhhhh+0x62>
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	e8 1a       	sub	r14, r24
    1cdc:	f8 0a       	sbc	r15, r24
    1cde:	ea 14       	cp	r14, r10
    1ce0:	fb 04       	cpc	r15, r11
    1ce2:	3c f0       	brlt	.+14     	; 0x1cf2 <_ZN7Display13drawRectangleEhhhhh+0x90>
    1ce4:	0b c0       	rjmp	.+22     	; 0x1cfc <_ZN7Display13drawRectangleEhhhhh+0x9a>
    1ce6:	e1 2c       	mov	r14, r1
    1ce8:	f1 2c       	mov	r15, r1
    1cea:	0d 2f       	mov	r16, r29
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	51 2c       	mov	r5, r1
    1cf0:	61 2c       	mov	r6, r1
    1cf2:	c5 2d       	mov	r28, r5
    1cf4:	d6 2d       	mov	r29, r6
    1cf6:	97 2c       	mov	r9, r7
    1cf8:	9e 0c       	add	r9, r14
    1cfa:	e4 cf       	rjmp	.-56     	; 0x1cc4 <_ZN7Display13drawRectangleEhhhhh+0x62>
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	df 90       	pop	r13
    1d0a:	cf 90       	pop	r12
    1d0c:	bf 90       	pop	r11
    1d0e:	af 90       	pop	r10
    1d10:	9f 90       	pop	r9
    1d12:	8f 90       	pop	r8
    1d14:	7f 90       	pop	r7
    1d16:	6f 90       	pop	r6
    1d18:	5f 90       	pop	r5
    1d1a:	08 95       	ret

00001d1c <_ZN7Display9draw_ASCIEhhh>:
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	61 32       	cpi	r22, 0x21	; 33
    1d26:	08 f4       	brcc	.+2      	; 0x1d2a <_ZN7Display9draw_ASCIEhhh+0xe>
    1d28:	3e c0       	rjmp	.+124    	; 0x1da6 <_ZN7Display9draw_ASCIEhhh+0x8a>
    1d2a:	a4 2f       	mov	r26, r20
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	02 2f       	mov	r16, r18
    1d30:	06 95       	lsr	r16
    1d32:	06 95       	lsr	r16
    1d34:	06 95       	lsr	r16
    1d36:	30 e8       	ldi	r19, 0x80	; 128
    1d38:	03 9f       	mul	r16, r19
    1d3a:	80 01       	movw	r16, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	61 52       	subi	r22, 0x21	; 33
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	fb 01       	movw	r30, r22
    1d44:	ee 0f       	add	r30, r30
    1d46:	ff 1f       	adc	r31, r31
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	e6 0f       	add	r30, r22
    1d4e:	f7 1f       	adc	r31, r23
    1d50:	ea 52       	subi	r30, 0x2A	; 42
    1d52:	fc 4f       	sbci	r31, 0xFC	; 252
    1d54:	ad 01       	movw	r20, r26
    1d56:	40 0f       	add	r20, r16
    1d58:	51 1f       	adc	r21, r17
    1d5a:	ec 01       	movw	r28, r24
    1d5c:	c4 0f       	add	r28, r20
    1d5e:	d5 1f       	adc	r29, r21
    1d60:	00 58       	subi	r16, 0x80	; 128
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	a0 0f       	add	r26, r16
    1d66:	b1 1f       	adc	r27, r17
    1d68:	a8 0f       	add	r26, r24
    1d6a:	b9 1f       	adc	r27, r25
    1d6c:	4b 5f       	subi	r20, 0xFB	; 251
    1d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d70:	48 0f       	add	r20, r24
    1d72:	59 1f       	adc	r21, r25
    1d74:	27 70       	andi	r18, 0x07	; 7
    1d76:	64 91       	lpm	r22, Z
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <_ZN7Display9draw_ASCIEhhh+0x66>
    1d7e:	66 0f       	add	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <_ZN7Display9draw_ASCIEhhh+0x62>
    1d86:	98 81       	ld	r25, Y
    1d88:	96 2b       	or	r25, r22
    1d8a:	99 93       	st	Y+, r25
    1d8c:	67 2f       	mov	r22, r23
    1d8e:	77 27       	eor	r23, r23
    1d90:	61 15       	cp	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <_ZN7Display9draw_ASCIEhhh+0x80>
    1d96:	8c 91       	ld	r24, X
    1d98:	68 2b       	or	r22, r24
    1d9a:	6c 93       	st	X, r22
    1d9c:	31 96       	adiw	r30, 0x01	; 1
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	c4 17       	cp	r28, r20
    1da2:	d5 07       	cpc	r29, r21
    1da4:	41 f7       	brne	.-48     	; 0x1d76 <_ZN7Display9draw_ASCIEhhh+0x5a>
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <_ZN7Display16draw_number16x16Ehhh>:
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	6a 30       	cpi	r22, 0x0A	; 10
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <_ZN7Display16draw_number16x16Ehhh+0x16>
    1dc4:	66 c0       	rjmp	.+204    	; 0x1e92 <_ZN7Display16draw_number16x16Ehhh+0xe2>
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	02 2f       	mov	r16, r18
    1dca:	06 95       	lsr	r16
    1dcc:	06 95       	lsr	r16
    1dce:	06 95       	lsr	r16
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	d8 01       	movw	r26, r16
    1dd4:	b6 95       	lsr	r27
    1dd6:	ba 2f       	mov	r27, r26
    1dd8:	aa 27       	eor	r26, r26
    1dda:	b7 95       	ror	r27
    1ddc:	a7 95       	ror	r26
    1dde:	0f 5f       	subi	r16, 0xFF	; 255
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	16 95       	lsr	r17
    1de4:	10 2f       	mov	r17, r16
    1de6:	00 27       	eor	r16, r16
    1de8:	17 95       	ror	r17
    1dea:	07 95       	ror	r16
    1dec:	7d 01       	movw	r14, r26
    1dee:	30 e8       	ldi	r19, 0x80	; 128
    1df0:	e3 0e       	add	r14, r19
    1df2:	f1 1c       	adc	r15, r1
    1df4:	e4 0e       	add	r14, r20
    1df6:	f5 1e       	adc	r15, r21
    1df8:	e8 0e       	add	r14, r24
    1dfa:	f9 1e       	adc	r15, r25
    1dfc:	ea 01       	movw	r28, r20
    1dfe:	c0 0f       	add	r28, r16
    1e00:	d1 1f       	adc	r29, r17
    1e02:	60 97       	sbiw	r28, 0x10	; 16
    1e04:	c8 0f       	add	r28, r24
    1e06:	d9 1f       	adc	r29, r25
    1e08:	04 0f       	add	r16, r20
    1e0a:	15 1f       	adc	r17, r21
    1e0c:	00 59       	subi	r16, 0x90	; 144
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	08 0f       	add	r16, r24
    1e12:	19 1f       	adc	r17, r25
    1e14:	a4 0f       	add	r26, r20
    1e16:	b5 1f       	adc	r27, r21
    1e18:	a8 0f       	add	r26, r24
    1e1a:	b9 1f       	adc	r27, r25
    1e1c:	80 e2       	ldi	r24, 0x20	; 32
    1e1e:	68 9f       	mul	r22, r24
    1e20:	b0 01       	movw	r22, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	27 70       	andi	r18, 0x07	; 7
    1e2a:	fa 01       	movw	r30, r20
    1e2c:	e6 0f       	add	r30, r22
    1e2e:	f7 1f       	adc	r31, r23
    1e30:	ea 56       	subi	r30, 0x6A	; 106
    1e32:	fd 4f       	sbci	r31, 0xFD	; 253
    1e34:	e4 91       	lpm	r30, Z
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <_ZN7Display16draw_number16x16Ehhh+0x90>
    1e3c:	ee 0f       	add	r30, r30
    1e3e:	ff 1f       	adc	r31, r31
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <_ZN7Display16draw_number16x16Ehhh+0x8c>
    1e44:	40 31       	cpi	r20, 0x10	; 16
    1e46:	68 f4       	brcc	.+26     	; 0x1e62 <_ZN7Display16draw_number16x16Ehhh+0xb2>
    1e48:	8c 91       	ld	r24, X
    1e4a:	8e 2b       	or	r24, r30
    1e4c:	8c 93       	st	X, r24
    1e4e:	cf 2e       	mov	r12, r31
    1e50:	dd 24       	eor	r13, r13
    1e52:	c1 14       	cp	r12, r1
    1e54:	d1 04       	cpc	r13, r1
    1e56:	89 f0       	breq	.+34     	; 0x1e7a <_ZN7Display16draw_number16x16Ehhh+0xca>
    1e58:	f7 01       	movw	r30, r14
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8c 29       	or	r24, r12
    1e5e:	80 83       	st	Z, r24
    1e60:	0c c0       	rjmp	.+24     	; 0x1e7a <_ZN7Display16draw_number16x16Ehhh+0xca>
    1e62:	88 81       	ld	r24, Y
    1e64:	8e 2b       	or	r24, r30
    1e66:	88 83       	st	Y, r24
    1e68:	cf 2e       	mov	r12, r31
    1e6a:	dd 24       	eor	r13, r13
    1e6c:	c1 14       	cp	r12, r1
    1e6e:	d1 04       	cpc	r13, r1
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <_ZN7Display16draw_number16x16Ehhh+0xca>
    1e72:	f8 01       	movw	r30, r16
    1e74:	80 81       	ld	r24, Z
    1e76:	8c 29       	or	r24, r12
    1e78:	80 83       	st	Z, r24
    1e7a:	4f 5f       	subi	r20, 0xFF	; 255
    1e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7e:	ff ef       	ldi	r31, 0xFF	; 255
    1e80:	ef 1a       	sub	r14, r31
    1e82:	ff 0a       	sbc	r15, r31
    1e84:	21 96       	adiw	r28, 0x01	; 1
    1e86:	0f 5f       	subi	r16, 0xFF	; 255
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	40 32       	cpi	r20, 0x20	; 32
    1e8e:	51 05       	cpc	r21, r1
    1e90:	61 f6       	brne	.-104    	; 0x1e2a <_ZN7Display16draw_number16x16Ehhh+0x7a>
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	08 95       	ret

00001ea4 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1ea4:	2f 92       	push	r2
    1ea6:	3f 92       	push	r3
    1ea8:	4f 92       	push	r4
    1eaa:	5f 92       	push	r5
    1eac:	6f 92       	push	r6
    1eae:	7f 92       	push	r7
    1eb0:	8f 92       	push	r8
    1eb2:	9f 92       	push	r9
    1eb4:	af 92       	push	r10
    1eb6:	bf 92       	push	r11
    1eb8:	cf 92       	push	r12
    1eba:	df 92       	push	r13
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	27 97       	sbiw	r28, 0x07	; 7
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	9f 83       	std	Y+7, r25	; 0x07
    1eda:	8e 83       	std	Y+6, r24	; 0x06
    1edc:	6d 83       	std	Y+5, r22	; 0x05
    1ede:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    1ee0:	00 23       	and	r16, r16
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <_ZN7Display6analogEhhhh+0x42>
    1ee4:	26 c1       	rjmp	.+588    	; 0x2132 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    1ee6:	62 2f       	mov	r22, r18
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 ec       	ldi	r20, 0xC0	; 192
    1ef8:	50 e4       	ldi	r21, 0x40	; 64
    1efa:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    1efe:	2b ed       	ldi	r18, 0xDB	; 219
    1f00:	3f e0       	ldi	r19, 0x0F	; 15
    1f02:	49 e4       	ldi	r20, 0x49	; 73
    1f04:	50 e4       	ldi	r21, 0x40	; 64
    1f06:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	44 e3       	ldi	r20, 0x34	; 52
    1f10:	53 e4       	ldi	r21, 0x43	; 67
    1f12:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    1f16:	2b ed       	ldi	r18, 0xDB	; 219
    1f18:	3f e0       	ldi	r19, 0x0F	; 15
    1f1a:	49 ec       	ldi	r20, 0xC9	; 201
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    1f22:	6b 01       	movw	r12, r22
    1f24:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1f26:	0e 94 c9 43 	call	0x8792	; 0x8792 <cos>
    1f2a:	4b 01       	movw	r8, r22
    1f2c:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1f2e:	c7 01       	movw	r24, r14
    1f30:	b6 01       	movw	r22, r12
    1f32:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <sin>
    1f36:	2b 01       	movw	r4, r22
    1f38:	3c 01       	movw	r6, r24
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1f3e:	b8 01       	movw	r22, r16
    1f40:	01 2e       	mov	r0, r17
    1f42:	00 0c       	add	r0, r0
    1f44:	88 0b       	sbc	r24, r24
    1f46:	99 0b       	sbc	r25, r25
    1f48:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    1f4c:	6b 01       	movw	r12, r22
    1f4e:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1f50:	a3 01       	movw	r20, r6
    1f52:	92 01       	movw	r18, r4
    1f54:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	48 ef       	ldi	r20, 0xF8	; 248
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    1f64:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    1f68:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1f6a:	a5 01       	movw	r20, r10
    1f6c:	94 01       	movw	r18, r8
    1f6e:	c7 01       	movw	r24, r14
    1f70:	b6 01       	movw	r22, r12
    1f72:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	48 ef       	ldi	r20, 0xF8	; 248
    1f7c:	51 e4       	ldi	r21, 0x41	; 65
    1f7e:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    1f82:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	42 2d       	mov	r20, r2
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	fd dd       	rcall	.-1030   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    1f90:	0f 5f       	subi	r16, 0xFF	; 255
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1f94:	09 31       	cpi	r16, 0x19	; 25
    1f96:	11 05       	cpc	r17, r1
    1f98:	91 f6       	brne	.-92     	; 0x1f3e <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1f9a:	63 2d       	mov	r22, r3
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    1fa6:	69 83       	std	Y+1, r22	; 0x01
    1fa8:	7a 83       	std	Y+2, r23	; 0x02
    1faa:	8b 83       	std	Y+3, r24	; 0x03
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 ec       	ldi	r20, 0xC0	; 192
    1fb4:	50 e4       	ldi	r21, 0x40	; 64
    1fb6:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    1fba:	2b ed       	ldi	r18, 0xDB	; 219
    1fbc:	3f e0       	ldi	r19, 0x0F	; 15
    1fbe:	49 e4       	ldi	r20, 0x49	; 73
    1fc0:	50 e4       	ldi	r21, 0x40	; 64
    1fc2:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	44 e3       	ldi	r20, 0x34	; 52
    1fcc:	53 e4       	ldi	r21, 0x43	; 67
    1fce:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    1fd2:	2b ed       	ldi	r18, 0xDB	; 219
    1fd4:	3f e0       	ldi	r19, 0x0F	; 15
    1fd6:	49 ec       	ldi	r20, 0xC9	; 201
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    1fde:	6b 01       	movw	r12, r22
    1fe0:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1fe2:	0e 94 c9 43 	call	0x8792	; 0x8792 <cos>
    1fe6:	2b 01       	movw	r4, r22
    1fe8:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1fea:	c7 01       	movw	r24, r14
    1fec:	b6 01       	movw	r22, r12
    1fee:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <sin>
    1ff2:	4b 01       	movw	r8, r22
    1ff4:	5c 01       	movw	r10, r24
    1ff6:	00 e0       	ldi	r16, 0x00	; 0
    1ff8:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1ffa:	b8 01       	movw	r22, r16
    1ffc:	01 2e       	mov	r0, r17
    1ffe:	00 0c       	add	r0, r0
    2000:	88 0b       	sbc	r24, r24
    2002:	99 0b       	sbc	r25, r25
    2004:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    2008:	6b 01       	movw	r12, r22
    200a:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    200c:	a5 01       	movw	r20, r10
    200e:	94 01       	movw	r18, r8
    2010:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	48 ef       	ldi	r20, 0xF8	; 248
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    2020:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    2024:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    2026:	a3 01       	movw	r20, r6
    2028:	92 01       	movw	r18, r4
    202a:	c7 01       	movw	r24, r14
    202c:	b6 01       	movw	r22, r12
    202e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	48 ef       	ldi	r20, 0xF8	; 248
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    203e:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	43 2d       	mov	r20, r3
    2046:	8e 81       	ldd	r24, Y+6	; 0x06
    2048:	9f 81       	ldd	r25, Y+7	; 0x07
    204a:	9f dd       	rcall	.-1218   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    204c:	0f 5f       	subi	r16, 0xFF	; 255
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    2050:	05 31       	cpi	r16, 0x15	; 21
    2052:	11 05       	cpc	r17, r1
    2054:	91 f6       	brne	.-92     	; 0x1ffa <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    2056:	2d 81       	ldd	r18, Y+5	; 0x05
    2058:	62 2f       	mov	r22, r18
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 ef       	ldi	r20, 0xF0	; 240
    206a:	51 e4       	ldi	r21, 0x41	; 65
    206c:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2070:	6b 01       	movw	r12, r22
    2072:	7c 01       	movw	r14, r24
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	69 81       	ldd	r22, Y+1	; 0x01
    207e:	7a 81       	ldd	r23, Y+2	; 0x02
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	c7 01       	movw	r24, r14
    208e:	b6 01       	movw	r22, r12
    2090:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    2094:	2b ed       	ldi	r18, 0xDB	; 219
    2096:	3f e0       	ldi	r19, 0x0F	; 15
    2098:	49 e4       	ldi	r20, 0x49	; 73
    209a:	50 e4       	ldi	r21, 0x40	; 64
    209c:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	44 e3       	ldi	r20, 0x34	; 52
    20a6:	53 e4       	ldi	r21, 0x43	; 67
    20a8:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    20ac:	2b ed       	ldi	r18, 0xDB	; 219
    20ae:	3f e0       	ldi	r19, 0x0F	; 15
    20b0:	49 ec       	ldi	r20, 0xC9	; 201
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    20b8:	6b 01       	movw	r12, r22
    20ba:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    20bc:	0e 94 c9 43 	call	0x8792	; 0x8792 <cos>
    20c0:	4b 01       	movw	r8, r22
    20c2:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    20c4:	c7 01       	movw	r24, r14
    20c6:	b6 01       	movw	r22, r12
    20c8:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <sin>
    20cc:	2b 01       	movw	r4, r22
    20ce:	3c 01       	movw	r6, r24
    20d0:	00 e0       	ldi	r16, 0x00	; 0
    20d2:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    20d4:	b8 01       	movw	r22, r16
    20d6:	01 2e       	mov	r0, r17
    20d8:	00 0c       	add	r0, r0
    20da:	88 0b       	sbc	r24, r24
    20dc:	99 0b       	sbc	r25, r25
    20de:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    20e2:	6b 01       	movw	r12, r22
    20e4:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    20e6:	a3 01       	movw	r20, r6
    20e8:	92 01       	movw	r18, r4
    20ea:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	48 ef       	ldi	r20, 0xF8	; 248
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    20fa:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    20fe:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    2100:	a5 01       	movw	r20, r10
    2102:	94 01       	movw	r18, r8
    2104:	c7 01       	movw	r24, r14
    2106:	b6 01       	movw	r22, r12
    2108:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	48 ef       	ldi	r20, 0xF8	; 248
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    2118:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	43 2d       	mov	r20, r3
    2120:	8e 81       	ldd	r24, Y+6	; 0x06
    2122:	9f 81       	ldd	r25, Y+7	; 0x07
    2124:	32 dd       	rcall	.-1436   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    2126:	0f 5f       	subi	r16, 0xFF	; 255
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    212a:	0d 30       	cpi	r16, 0x0D	; 13
    212c:	11 05       	cpc	r17, r1
    212e:	91 f6       	brne	.-92     	; 0x20d4 <_ZN7Display6analogEhhhh+0x230>
    2130:	cb c0       	rjmp	.+406    	; 0x22c8 <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    2132:	64 2f       	mov	r22, r20
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    213e:	69 83       	std	Y+1, r22	; 0x01
    2140:	7a 83       	std	Y+2, r23	; 0x02
    2142:	8b 83       	std	Y+3, r24	; 0x03
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 ec       	ldi	r20, 0xC0	; 192
    214c:	50 e4       	ldi	r21, 0x40	; 64
    214e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2152:	2b ed       	ldi	r18, 0xDB	; 219
    2154:	3f e0       	ldi	r19, 0x0F	; 15
    2156:	49 e4       	ldi	r20, 0x49	; 73
    2158:	50 e4       	ldi	r21, 0x40	; 64
    215a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	44 e3       	ldi	r20, 0x34	; 52
    2164:	53 e4       	ldi	r21, 0x43	; 67
    2166:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    216a:	2b ed       	ldi	r18, 0xDB	; 219
    216c:	3f e0       	ldi	r19, 0x0F	; 15
    216e:	49 ec       	ldi	r20, 0xC9	; 201
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    2176:	6b 01       	movw	r12, r22
    2178:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    217a:	0e 94 c9 43 	call	0x8792	; 0x8792 <cos>
    217e:	2b 01       	movw	r4, r22
    2180:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    2182:	c7 01       	movw	r24, r14
    2184:	b6 01       	movw	r22, r12
    2186:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <sin>
    218a:	4b 01       	movw	r8, r22
    218c:	5c 01       	movw	r10, r24
    218e:	00 e0       	ldi	r16, 0x00	; 0
    2190:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    2192:	b8 01       	movw	r22, r16
    2194:	01 2e       	mov	r0, r17
    2196:	00 0c       	add	r0, r0
    2198:	88 0b       	sbc	r24, r24
    219a:	99 0b       	sbc	r25, r25
    219c:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    21a0:	6b 01       	movw	r12, r22
    21a2:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    21a4:	a5 01       	movw	r20, r10
    21a6:	94 01       	movw	r18, r8
    21a8:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	48 ef       	ldi	r20, 0xF8	; 248
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    21b8:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    21bc:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    21be:	a3 01       	movw	r20, r6
    21c0:	92 01       	movw	r18, r4
    21c2:	c7 01       	movw	r24, r14
    21c4:	b6 01       	movw	r22, r12
    21c6:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	48 ef       	ldi	r20, 0xF8	; 248
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    21d6:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	43 2d       	mov	r20, r3
    21de:	8e 81       	ldd	r24, Y+6	; 0x06
    21e0:	9f 81       	ldd	r25, Y+7	; 0x07
    21e2:	d3 dc       	rcall	.-1626   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    21e4:	0f 5f       	subi	r16, 0xFF	; 255
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    21e8:	09 31       	cpi	r16, 0x19	; 25
    21ea:	11 05       	cpc	r17, r1
    21ec:	91 f6       	brne	.-92     	; 0x2192 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    21ee:	ed 81       	ldd	r30, Y+5	; 0x05
    21f0:	6e 2f       	mov	r22, r30
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 ef       	ldi	r20, 0xF0	; 240
    2202:	51 e4       	ldi	r21, 0x41	; 65
    2204:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2208:	6b 01       	movw	r12, r22
    220a:	7c 01       	movw	r14, r24
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	69 81       	ldd	r22, Y+1	; 0x01
    2216:	7a 81       	ldd	r23, Y+2	; 0x02
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	c7 01       	movw	r24, r14
    2226:	b6 01       	movw	r22, r12
    2228:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    222c:	2b ed       	ldi	r18, 0xDB	; 219
    222e:	3f e0       	ldi	r19, 0x0F	; 15
    2230:	49 e4       	ldi	r20, 0x49	; 73
    2232:	50 e4       	ldi	r21, 0x40	; 64
    2234:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	44 e3       	ldi	r20, 0x34	; 52
    223e:	53 e4       	ldi	r21, 0x43	; 67
    2240:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    2244:	2b ed       	ldi	r18, 0xDB	; 219
    2246:	3f e0       	ldi	r19, 0x0F	; 15
    2248:	49 ec       	ldi	r20, 0xC9	; 201
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    2250:	6b 01       	movw	r12, r22
    2252:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    2254:	0e 94 c9 43 	call	0x8792	; 0x8792 <cos>
    2258:	4b 01       	movw	r8, r22
    225a:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    225c:	c7 01       	movw	r24, r14
    225e:	b6 01       	movw	r22, r12
    2260:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <sin>
    2264:	2b 01       	movw	r4, r22
    2266:	3c 01       	movw	r6, r24
    2268:	00 e0       	ldi	r16, 0x00	; 0
    226a:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    226c:	b8 01       	movw	r22, r16
    226e:	01 2e       	mov	r0, r17
    2270:	00 0c       	add	r0, r0
    2272:	88 0b       	sbc	r24, r24
    2274:	99 0b       	sbc	r25, r25
    2276:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    227a:	6b 01       	movw	r12, r22
    227c:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    227e:	a3 01       	movw	r20, r6
    2280:	92 01       	movw	r18, r4
    2282:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	48 ef       	ldi	r20, 0xF8	; 248
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    2292:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    2296:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    2298:	a5 01       	movw	r20, r10
    229a:	94 01       	movw	r18, r8
    229c:	c7 01       	movw	r24, r14
    229e:	b6 01       	movw	r22, r12
    22a0:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	48 ef       	ldi	r20, 0xF8	; 248
    22aa:	51 e4       	ldi	r21, 0x41	; 65
    22ac:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    22b0:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	43 2d       	mov	r20, r3
    22b8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ba:	9f 81       	ldd	r25, Y+7	; 0x07
    22bc:	66 dc       	rcall	.-1844   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
    22be:	0f 5f       	subi	r16, 0xFF	; 255
    22c0:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    22c2:	01 31       	cpi	r16, 0x11	; 17
    22c4:	11 05       	cpc	r17, r1
    22c6:	91 f6       	brne	.-92     	; 0x226c <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	4a e1       	ldi	r20, 0x1A	; 26
    22cc:	61 e3       	ldi	r22, 0x31	; 49
    22ce:	8e 81       	ldd	r24, Y+6	; 0x06
    22d0:	9f 81       	ldd	r25, Y+7	; 0x07
    22d2:	24 dd       	rcall	.-1464   	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	62 e3       	ldi	r22, 0x32	; 50
    22da:	8e 81       	ldd	r24, Y+6	; 0x06
    22dc:	9f 81       	ldd	r25, Y+7	; 0x07
    22de:	1e dd       	rcall	.-1476   	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    22e0:	2c e1       	ldi	r18, 0x1C	; 28
    22e2:	4a e3       	ldi	r20, 0x3A	; 58
    22e4:	63 e3       	ldi	r22, 0x33	; 51
    22e6:	8e 81       	ldd	r24, Y+6	; 0x06
    22e8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ea:	18 dd       	rcall	.-1488   	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    22ec:	28 e3       	ldi	r18, 0x38	; 56
    22ee:	4d e1       	ldi	r20, 0x1D	; 29
    22f0:	66 e3       	ldi	r22, 0x36	; 54
    22f2:	8e 81       	ldd	r24, Y+6	; 0x06
    22f4:	9f 81       	ldd	r25, Y+7	; 0x07
    22f6:	12 dd       	rcall	.-1500   	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    22f8:	2c e1       	ldi	r18, 0x1C	; 28
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	69 e3       	ldi	r22, 0x39	; 57
    22fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2300:	9f 81       	ldd	r25, Y+7	; 0x07
    2302:	0c dd       	rcall	.-1512   	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	48 e0       	ldi	r20, 0x08	; 8
    2308:	6c e2       	ldi	r22, 0x2C	; 44
    230a:	8e 81       	ldd	r24, Y+6	; 0x06
    230c:	9f 81       	ldd	r25, Y+7	; 0x07
    230e:	3d dc       	rcall	.-1926   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	42 e1       	ldi	r20, 0x12	; 18
    2314:	65 e3       	ldi	r22, 0x35	; 53
    2316:	8e 81       	ldd	r24, Y+6	; 0x06
    2318:	9f 81       	ldd	r25, Y+7	; 0x07
    231a:	37 dc       	rcall	.-1938   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	4c e2       	ldi	r20, 0x2C	; 44
    2320:	65 e3       	ldi	r22, 0x35	; 53
    2322:	8e 81       	ldd	r24, Y+6	; 0x06
    2324:	9f 81       	ldd	r25, Y+7	; 0x07
    2326:	31 dc       	rcall	.-1950   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	45 e3       	ldi	r20, 0x35	; 53
    232c:	6b e2       	ldi	r22, 0x2B	; 43
    232e:	8e 81       	ldd	r24, Y+6	; 0x06
    2330:	9f 81       	ldd	r25, Y+7	; 0x07
    2332:	2b dc       	rcall	.-1962   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	45 e3       	ldi	r20, 0x35	; 53
    2338:	61 e1       	ldi	r22, 0x11	; 17
    233a:	8e 81       	ldd	r24, Y+6	; 0x06
    233c:	9f 81       	ldd	r25, Y+7	; 0x07
    233e:	25 dc       	rcall	.-1974   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	4c e2       	ldi	r20, 0x2C	; 44
    2344:	68 e0       	ldi	r22, 0x08	; 8
    2346:	8e 81       	ldd	r24, Y+6	; 0x06
    2348:	9f 81       	ldd	r25, Y+7	; 0x07
    234a:	1f dc       	rcall	.-1986   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	41 e1       	ldi	r20, 0x11	; 17
    2350:	68 e0       	ldi	r22, 0x08	; 8
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	19 dc       	rcall	.-1998   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	48 e0       	ldi	r20, 0x08	; 8
    235c:	62 e1       	ldi	r22, 0x12	; 18
    235e:	8e 81       	ldd	r24, Y+6	; 0x06
    2360:	9f 81       	ldd	r25, Y+7	; 0x07
    2362:	13 dc       	rcall	.-2010   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
}
    2364:	27 96       	adiw	r28, 0x07	; 7
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	ff 90       	pop	r15
    237a:	ef 90       	pop	r14
    237c:	df 90       	pop	r13
    237e:	cf 90       	pop	r12
    2380:	bf 90       	pop	r11
    2382:	af 90       	pop	r10
    2384:	9f 90       	pop	r9
    2386:	8f 90       	pop	r8
    2388:	7f 90       	pop	r7
    238a:	6f 90       	pop	r6
    238c:	5f 90       	pop	r5
    238e:	4f 90       	pop	r4
    2390:	3f 90       	pop	r3
    2392:	2f 90       	pop	r2
    2394:	08 95       	ret

00002396 <_ZN7Display8drawBATTEahh>:

void Display::drawBATT(int8_t status, uint8_t xpos, uint8_t ypos){
    2396:	cf 92       	push	r12
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	0f 93       	push	r16
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	6c 01       	movw	r12, r24
    23a4:	d4 2f       	mov	r29, r20
    23a6:	c2 2f       	mov	r28, r18
	}
	else
	{
		drawRectangle(xpos+2,ypos+1,xpos+11,ypos+6,true);
	}*/
	if (status <= 10 && status >= 1)
    23a8:	8f ef       	ldi	r24, 0xFF	; 255
    23aa:	86 0f       	add	r24, r22
    23ac:	8a 30       	cpi	r24, 0x0A	; 10
    23ae:	60 f4       	brcc	.+24     	; 0x23c8 <_ZN7Display8drawBATTEahh+0x32>
	{
		drawRectangle(xpos+11,ypos+1,xpos+11,ypos+6,true);
    23b0:	ee 24       	eor	r14, r14
    23b2:	e3 94       	inc	r14
    23b4:	06 e0       	ldi	r16, 0x06	; 6
    23b6:	02 0f       	add	r16, r18
    23b8:	6b e0       	ldi	r22, 0x0B	; 11
    23ba:	64 0f       	add	r22, r20
    23bc:	26 2f       	mov	r18, r22
    23be:	41 e0       	ldi	r20, 0x01	; 1
    23c0:	4c 0f       	add	r20, r28
    23c2:	c6 01       	movw	r24, r12
    23c4:	4e dc       	rcall	.-1892   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
    23c6:	48 c0       	rjmp	.+144    	; 0x2458 <_ZN7Display8drawBATTEahh+0xc2>
	}
	else if (status <= 20)
    23c8:	65 31       	cpi	r22, 0x15	; 21
    23ca:	6c f4       	brge	.+26     	; 0x23e6 <_ZN7Display8drawBATTEahh+0x50>
	{
		drawRectangle(xpos+10,ypos+1,xpos+11,ypos+6,true);
    23cc:	ee 24       	eor	r14, r14
    23ce:	e3 94       	inc	r14
    23d0:	06 e0       	ldi	r16, 0x06	; 6
    23d2:	02 0f       	add	r16, r18
    23d4:	2b e0       	ldi	r18, 0x0B	; 11
    23d6:	24 0f       	add	r18, r20
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	4c 0f       	add	r20, r28
    23dc:	6a e0       	ldi	r22, 0x0A	; 10
    23de:	6d 0f       	add	r22, r29
    23e0:	c6 01       	movw	r24, r12
    23e2:	3f dc       	rcall	.-1922   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
    23e4:	39 c0       	rjmp	.+114    	; 0x2458 <_ZN7Display8drawBATTEahh+0xc2>
	}
	else if (status <= 30)
    23e6:	6f 31       	cpi	r22, 0x1F	; 31
    23e8:	6c f4       	brge	.+26     	; 0x2404 <_ZN7Display8drawBATTEahh+0x6e>
	{
		drawRectangle(xpos+8,ypos+1,xpos+11,ypos+6,true);
    23ea:	ee 24       	eor	r14, r14
    23ec:	e3 94       	inc	r14
    23ee:	06 e0       	ldi	r16, 0x06	; 6
    23f0:	02 0f       	add	r16, r18
    23f2:	2b e0       	ldi	r18, 0x0B	; 11
    23f4:	24 0f       	add	r18, r20
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	4c 0f       	add	r20, r28
    23fa:	68 e0       	ldi	r22, 0x08	; 8
    23fc:	6d 0f       	add	r22, r29
    23fe:	c6 01       	movw	r24, r12
    2400:	30 dc       	rcall	.-1952   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
    2402:	2a c0       	rjmp	.+84     	; 0x2458 <_ZN7Display8drawBATTEahh+0xc2>
	}
	else if (status <= 40)
    2404:	69 32       	cpi	r22, 0x29	; 41
    2406:	6c f4       	brge	.+26     	; 0x2422 <_ZN7Display8drawBATTEahh+0x8c>
	{
		drawRectangle(xpos+6,ypos+1,xpos+11,ypos+6,true);
    2408:	ee 24       	eor	r14, r14
    240a:	e3 94       	inc	r14
    240c:	06 e0       	ldi	r16, 0x06	; 6
    240e:	02 0f       	add	r16, r18
    2410:	2b e0       	ldi	r18, 0x0B	; 11
    2412:	24 0f       	add	r18, r20
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	4c 0f       	add	r20, r28
    2418:	66 e0       	ldi	r22, 0x06	; 6
    241a:	6d 0f       	add	r22, r29
    241c:	c6 01       	movw	r24, r12
    241e:	21 dc       	rcall	.-1982   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
    2420:	1b c0       	rjmp	.+54     	; 0x2458 <_ZN7Display8drawBATTEahh+0xc2>
	}
	else if (status <= 50)
    2422:	63 33       	cpi	r22, 0x33	; 51
    2424:	6c f4       	brge	.+26     	; 0x2440 <_ZN7Display8drawBATTEahh+0xaa>
	{
		drawRectangle(xpos+4,ypos+1,xpos+11,ypos+6,true);
    2426:	ee 24       	eor	r14, r14
    2428:	e3 94       	inc	r14
    242a:	06 e0       	ldi	r16, 0x06	; 6
    242c:	02 0f       	add	r16, r18
    242e:	2b e0       	ldi	r18, 0x0B	; 11
    2430:	24 0f       	add	r18, r20
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	4c 0f       	add	r20, r28
    2436:	64 e0       	ldi	r22, 0x04	; 4
    2438:	6d 0f       	add	r22, r29
    243a:	c6 01       	movw	r24, r12
    243c:	12 dc       	rcall	.-2012   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
    243e:	0c c0       	rjmp	.+24     	; 0x2458 <_ZN7Display8drawBATTEahh+0xc2>
	}
	else
	{
		drawRectangle(xpos+2,ypos+1,xpos+11,ypos+6,true);
    2440:	ee 24       	eor	r14, r14
    2442:	e3 94       	inc	r14
    2444:	06 e0       	ldi	r16, 0x06	; 6
    2446:	02 0f       	add	r16, r18
    2448:	2b e0       	ldi	r18, 0x0B	; 11
    244a:	24 0f       	add	r18, r20
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	4c 0f       	add	r20, r28
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	6d 0f       	add	r22, r29
    2454:	c6 01       	movw	r24, r12
    2456:	05 dc       	rcall	.-2038   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
	}
	
	drawRectangle(xpos+1,ypos,xpos+12,ypos+7,false);
    2458:	07 e0       	ldi	r16, 0x07	; 7
    245a:	0c 0f       	add	r16, r28
    245c:	2c e0       	ldi	r18, 0x0C	; 12
    245e:	2d 0f       	add	r18, r29
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	6d 0f       	add	r22, r29
    2464:	e1 2c       	mov	r14, r1
    2466:	4c 2f       	mov	r20, r28
    2468:	c6 01       	movw	r24, r12
    246a:	fb db       	rcall	.-2058   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
	drawPixel(xpos,ypos+2,false);
    246c:	42 e0       	ldi	r20, 0x02	; 2
    246e:	4c 0f       	add	r20, r28
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	6d 2f       	mov	r22, r29
    2474:	c6 01       	movw	r24, r12
    2476:	89 db       	rcall	.-2286   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	drawPixel(xpos,ypos+3,false);
    2478:	43 e0       	ldi	r20, 0x03	; 3
    247a:	4c 0f       	add	r20, r28
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	6d 2f       	mov	r22, r29
    2480:	c6 01       	movw	r24, r12
    2482:	83 db       	rcall	.-2298   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
	drawPixel(xpos,ypos+4,false);
    2484:	44 e0       	ldi	r20, 0x04	; 4
    2486:	4c 0f       	add	r20, r28
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	6d 2f       	mov	r22, r29
    248c:	c6 01       	movw	r24, r12
    248e:	7d db       	rcall	.-2310   	; 0x1b8a <_ZN7Display9drawPixelEhhh>
}
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	0f 91       	pop	r16
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	cf 90       	pop	r12
    249c:	08 95       	ret

0000249e <_ZN7Display7drawGPSEhhh>:

void Display::drawGPS(uint8_t status, uint8_t xpos, uint8_t ypos){
    249e:	cf 92       	push	r12
    24a0:	df 92       	push	r13
    24a2:	ef 92       	push	r14
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	6c 01       	movw	r12, r24
    24ae:	16 2f       	mov	r17, r22
    24b0:	c4 2f       	mov	r28, r20
    24b2:	d2 2f       	mov	r29, r18
	drawRectangle(xpos,ypos,xpos+7,ypos+7,false);
    24b4:	07 e0       	ldi	r16, 0x07	; 7
    24b6:	02 0f       	add	r16, r18
    24b8:	27 e0       	ldi	r18, 0x07	; 7
    24ba:	24 0f       	add	r18, r20
    24bc:	e1 2c       	mov	r14, r1
    24be:	4d 2f       	mov	r20, r29
    24c0:	6c 2f       	mov	r22, r28
    24c2:	cf db       	rcall	.-2146   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
	if (status == 1)
    24c4:	11 30       	cpi	r17, 0x01	; 1
    24c6:	69 f4       	brne	.+26     	; 0x24e2 <_ZN7Display7drawGPSEhhh+0x44>
	{
		drawRectangle(xpos+1,ypos+1,xpos+6,ypos+3,true);
    24c8:	03 e0       	ldi	r16, 0x03	; 3
    24ca:	0d 0f       	add	r16, r29
    24cc:	26 e0       	ldi	r18, 0x06	; 6
    24ce:	2c 0f       	add	r18, r28
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	4d 0f       	add	r20, r29
    24d4:	61 e0       	ldi	r22, 0x01	; 1
    24d6:	6c 0f       	add	r22, r28
    24d8:	ee 24       	eor	r14, r14
    24da:	e3 94       	inc	r14
    24dc:	c6 01       	movw	r24, r12
    24de:	c1 db       	rcall	.-2174   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
    24e0:	0e c0       	rjmp	.+28     	; 0x24fe <_ZN7Display7drawGPSEhhh+0x60>
	}
	else if (status == 3)
    24e2:	13 30       	cpi	r17, 0x03	; 3
    24e4:	61 f4       	brne	.+24     	; 0x24fe <_ZN7Display7drawGPSEhhh+0x60>
	{
		drawRectangle(xpos+1,ypos+1,xpos+6,ypos+6,true);
    24e6:	06 e0       	ldi	r16, 0x06	; 6
    24e8:	0d 0f       	add	r16, r29
    24ea:	26 e0       	ldi	r18, 0x06	; 6
    24ec:	2c 0f       	add	r18, r28
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	4d 0f       	add	r20, r29
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	6c 0f       	add	r22, r28
    24f6:	ee 24       	eor	r14, r14
    24f8:	e3 94       	inc	r14
    24fa:	c6 01       	movw	r24, r12
    24fc:	b2 db       	rcall	.-2204   	; 0x1c62 <_ZN7Display13drawRectangleEhhhhh>
	}
	//draw_ASCI(status+'0',xpos-charsize,ypos);
}
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	cf 90       	pop	r12
    250c:	08 95       	ret

0000250e <mem_cpy>:

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    250e:	41 15       	cp	r20, r1
    2510:	51 05       	cpc	r21, r1
    2512:	51 f0       	breq	.+20     	; 0x2528 <mem_cpy+0x1a>
    2514:	a6 2f       	mov	r26, r22
    2516:	b7 2f       	mov	r27, r23
    2518:	fc 01       	movw	r30, r24
    251a:	48 0f       	add	r20, r24
    251c:	59 1f       	adc	r21, r25
    251e:	9d 91       	ld	r25, X+
    2520:	91 93       	st	Z+, r25
    2522:	e4 17       	cp	r30, r20
    2524:	f5 07       	cpc	r31, r21
    2526:	d9 f7       	brne	.-10     	; 0x251e <mem_cpy+0x10>
    2528:	08 95       	ret

0000252a <ld_clust>:
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	dc 01       	movw	r26, r24
    2530:	fb 01       	movw	r30, r22
    2532:	93 8d       	ldd	r25, Z+27	; 0x1b
    2534:	69 2f       	mov	r22, r25
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	76 2f       	mov	r23, r22
    253a:	66 27       	eor	r22, r22
    253c:	82 8d       	ldd	r24, Z+26	; 0x1a
    253e:	68 2b       	or	r22, r24
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	2c 91       	ld	r18, X
    2546:	23 30       	cpi	r18, 0x03	; 3
    2548:	79 f4       	brne	.+30     	; 0x2568 <ld_clust+0x3e>
    254a:	05 89       	ldd	r16, Z+21	; 0x15
    254c:	10 e0       	ldi	r17, 0x00	; 0
    254e:	10 2f       	mov	r17, r16
    2550:	00 27       	eor	r16, r16
    2552:	24 89       	ldd	r18, Z+20	; 0x14
    2554:	02 2b       	or	r16, r18
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	98 01       	movw	r18, r16
    255c:	11 27       	eor	r17, r17
    255e:	00 27       	eor	r16, r16
    2560:	60 2b       	or	r22, r16
    2562:	71 2b       	or	r23, r17
    2564:	82 2b       	or	r24, r18
    2566:	93 2b       	or	r25, r19
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	08 95       	ret

0000256e <get_ldnumber>:
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	ec 01       	movw	r28, r24
    2574:	a8 81       	ld	r26, Y
    2576:	b9 81       	ldd	r27, Y+1	; 0x01
    2578:	10 97       	sbiw	r26, 0x00	; 0
    257a:	f9 f0       	breq	.+62     	; 0x25ba <get_ldnumber+0x4c>
    257c:	4c 91       	ld	r20, X
    257e:	41 32       	cpi	r20, 0x21	; 33
    2580:	58 f0       	brcs	.+22     	; 0x2598 <get_ldnumber+0x2a>
    2582:	4a 33       	cpi	r20, 0x3A	; 58
    2584:	31 f1       	breq	.+76     	; 0x25d2 <get_ldnumber+0x64>
    2586:	fd 01       	movw	r30, r26
    2588:	31 96       	adiw	r30, 0x01	; 1
    258a:	9f 01       	movw	r18, r30
    258c:	91 91       	ld	r25, Z+
    258e:	91 32       	cpi	r25, 0x21	; 33
    2590:	28 f0       	brcs	.+10     	; 0x259c <get_ldnumber+0x2e>
    2592:	9a 33       	cpi	r25, 0x3A	; 58
    2594:	d1 f7       	brne	.-12     	; 0x258a <get_ldnumber+0x1c>
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <get_ldnumber+0x32>
    2598:	94 2f       	mov	r25, r20
    259a:	9d 01       	movw	r18, r26
    259c:	9a 33       	cpi	r25, 0x3A	; 58
    259e:	81 f4       	brne	.+32     	; 0x25c0 <get_ldnumber+0x52>
    25a0:	cd 01       	movw	r24, r26
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	28 17       	cp	r18, r24
    25a6:	39 07       	cpc	r19, r25
    25a8:	71 f4       	brne	.+28     	; 0x25c6 <get_ldnumber+0x58>
    25aa:	40 33       	cpi	r20, 0x30	; 48
    25ac:	79 f4       	brne	.+30     	; 0x25cc <get_ldnumber+0x5e>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	b9 83       	std	Y+1, r27	; 0x01
    25b2:	a8 83       	st	Y, r26
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e c0       	rjmp	.+28     	; 0x25d6 <get_ldnumber+0x68>
    25ba:	8f ef       	ldi	r24, 0xFF	; 255
    25bc:	9f ef       	ldi	r25, 0xFF	; 255
    25be:	0b c0       	rjmp	.+22     	; 0x25d6 <get_ldnumber+0x68>
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	08 c0       	rjmp	.+16     	; 0x25d6 <get_ldnumber+0x68>
    25c6:	8f ef       	ldi	r24, 0xFF	; 255
    25c8:	9f ef       	ldi	r25, 0xFF	; 255
    25ca:	05 c0       	rjmp	.+10     	; 0x25d6 <get_ldnumber+0x68>
    25cc:	8f ef       	ldi	r24, 0xFF	; 255
    25ce:	9f ef       	ldi	r25, 0xFF	; 255
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <get_ldnumber+0x68>
    25d2:	9d 01       	movw	r18, r26
    25d4:	e5 cf       	rjmp	.-54     	; 0x25a0 <get_ldnumber+0x32>
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	08 95       	ret

000025dc <sync_window>:
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	fc 01       	movw	r30, r24
    25f6:	24 81       	ldd	r18, Z+4	; 0x04
    25f8:	22 23       	and	r18, r18
    25fa:	09 f4       	brne	.+2      	; 0x25fe <sync_window+0x22>
    25fc:	46 c0       	rjmp	.+140    	; 0x268a <sync_window+0xae>
    25fe:	ec 01       	movw	r28, r24
    2600:	c2 a4       	ldd	r12, Z+42	; 0x2a
    2602:	d3 a4       	ldd	r13, Z+43	; 0x2b
    2604:	e4 a4       	ldd	r14, Z+44	; 0x2c
    2606:	f5 a4       	ldd	r15, Z+45	; 0x2d
    2608:	5c 01       	movw	r10, r24
    260a:	fe e2       	ldi	r31, 0x2E	; 46
    260c:	af 0e       	add	r10, r31
    260e:	b1 1c       	adc	r11, r1
    2610:	01 e0       	ldi	r16, 0x01	; 1
    2612:	10 e0       	ldi	r17, 0x00	; 0
    2614:	a7 01       	movw	r20, r14
    2616:	96 01       	movw	r18, r12
    2618:	b5 01       	movw	r22, r10
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    2620:	81 11       	cpse	r24, r1
    2622:	35 c0       	rjmp	.+106    	; 0x268e <sync_window+0xb2>
    2624:	1c 82       	std	Y+4, r1	; 0x04
    2626:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2628:	9f 8d       	ldd	r25, Y+31	; 0x1f
    262a:	a8 a1       	ldd	r26, Y+32	; 0x20
    262c:	b9 a1       	ldd	r27, Y+33	; 0x21
    262e:	b7 01       	movw	r22, r14
    2630:	a6 01       	movw	r20, r12
    2632:	48 1b       	sub	r20, r24
    2634:	59 0b       	sbc	r21, r25
    2636:	6a 0b       	sbc	r22, r26
    2638:	7b 0b       	sbc	r23, r27
    263a:	8e 89       	ldd	r24, Y+22	; 0x16
    263c:	9f 89       	ldd	r25, Y+23	; 0x17
    263e:	a8 8d       	ldd	r26, Y+24	; 0x18
    2640:	b9 8d       	ldd	r27, Y+25	; 0x19
    2642:	48 17       	cp	r20, r24
    2644:	59 07       	cpc	r21, r25
    2646:	6a 07       	cpc	r22, r26
    2648:	7b 07       	cpc	r23, r27
    264a:	18 f5       	brcc	.+70     	; 0x2692 <sync_window+0xb6>
    264c:	8b 80       	ldd	r8, Y+3	; 0x03
    264e:	91 2c       	mov	r9, r1
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	88 16       	cp	r8, r24
    2654:	91 04       	cpc	r9, r1
    2656:	f8 f0       	brcs	.+62     	; 0x2696 <sync_window+0xba>
    2658:	8e 89       	ldd	r24, Y+22	; 0x16
    265a:	9f 89       	ldd	r25, Y+23	; 0x17
    265c:	a8 8d       	ldd	r26, Y+24	; 0x18
    265e:	b9 8d       	ldd	r27, Y+25	; 0x19
    2660:	c8 0e       	add	r12, r24
    2662:	d9 1e       	adc	r13, r25
    2664:	ea 1e       	adc	r14, r26
    2666:	fb 1e       	adc	r15, r27
    2668:	01 e0       	ldi	r16, 0x01	; 1
    266a:	10 e0       	ldi	r17, 0x00	; 0
    266c:	a7 01       	movw	r20, r14
    266e:	96 01       	movw	r18, r12
    2670:	b5 01       	movw	r22, r10
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    2678:	e1 e0       	ldi	r30, 0x01	; 1
    267a:	8e 1a       	sub	r8, r30
    267c:	91 08       	sbc	r9, r1
    267e:	f1 e0       	ldi	r31, 0x01	; 1
    2680:	8f 16       	cp	r8, r31
    2682:	91 04       	cpc	r9, r1
    2684:	49 f7       	brne	.-46     	; 0x2658 <sync_window+0x7c>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <sync_window+0xbc>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	05 c0       	rjmp	.+10     	; 0x2698 <sync_window+0xbc>
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <sync_window+0xbc>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <sync_window+0xbc>
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	df 90       	pop	r13
    26a6:	cf 90       	pop	r12
    26a8:	bf 90       	pop	r11
    26aa:	af 90       	pop	r10
    26ac:	9f 90       	pop	r9
    26ae:	8f 90       	pop	r8
    26b0:	08 95       	ret

000026b2 <move_window>:
    26b2:	8f 92       	push	r8
    26b4:	9f 92       	push	r9
    26b6:	af 92       	push	r10
    26b8:	bf 92       	push	r11
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	ec 01       	movw	r28, r24
    26c6:	4a 01       	movw	r8, r20
    26c8:	5b 01       	movw	r10, r22
    26ca:	8a a5       	ldd	r24, Y+42	; 0x2a
    26cc:	9b a5       	ldd	r25, Y+43	; 0x2b
    26ce:	ac a5       	ldd	r26, Y+44	; 0x2c
    26d0:	bd a5       	ldd	r27, Y+45	; 0x2d
    26d2:	84 17       	cp	r24, r20
    26d4:	95 07       	cpc	r25, r21
    26d6:	a6 07       	cpc	r26, r22
    26d8:	b7 07       	cpc	r27, r23
    26da:	e1 f0       	breq	.+56     	; 0x2714 <move_window+0x62>
    26dc:	ce 01       	movw	r24, r28
    26de:	7e df       	rcall	.-260    	; 0x25dc <sync_window>
    26e0:	f8 2e       	mov	r15, r24
    26e2:	81 11       	cpse	r24, r1
    26e4:	18 c0       	rjmp	.+48     	; 0x2716 <move_window+0x64>
    26e6:	01 e0       	ldi	r16, 0x01	; 1
    26e8:	10 e0       	ldi	r17, 0x00	; 0
    26ea:	a5 01       	movw	r20, r10
    26ec:	94 01       	movw	r18, r8
    26ee:	be 01       	movw	r22, r28
    26f0:	62 5d       	subi	r22, 0xD2	; 210
    26f2:	7f 4f       	sbci	r23, 0xFF	; 255
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <disk_read>
    26fa:	88 23       	and	r24, r24
    26fc:	31 f0       	breq	.+12     	; 0x270a <move_window+0x58>
    26fe:	ff 24       	eor	r15, r15
    2700:	f3 94       	inc	r15
    2702:	88 24       	eor	r8, r8
    2704:	8a 94       	dec	r8
    2706:	98 2c       	mov	r9, r8
    2708:	54 01       	movw	r10, r8
    270a:	8a a6       	std	Y+42, r8	; 0x2a
    270c:	9b a6       	std	Y+43, r9	; 0x2b
    270e:	ac a6       	std	Y+44, r10	; 0x2c
    2710:	bd a6       	std	Y+45, r11	; 0x2d
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <move_window+0x64>
    2714:	f1 2c       	mov	r15, r1
    2716:	8f 2d       	mov	r24, r15
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	bf 90       	pop	r11
    2724:	af 90       	pop	r10
    2726:	9f 90       	pop	r9
    2728:	8f 90       	pop	r8
    272a:	08 95       	ret

0000272c <check_fs>:
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	ec 01       	movw	r28, r24
    2732:	1c 82       	std	Y+4, r1	; 0x04
    2734:	8f ef       	ldi	r24, 0xFF	; 255
    2736:	9f ef       	ldi	r25, 0xFF	; 255
    2738:	dc 01       	movw	r26, r24
    273a:	8a a7       	std	Y+42, r24	; 0x2a
    273c:	9b a7       	std	Y+43, r25	; 0x2b
    273e:	ac a7       	std	Y+44, r26	; 0x2c
    2740:	bd a7       	std	Y+45, r27	; 0x2d
    2742:	ce 01       	movw	r24, r28
    2744:	b6 df       	rcall	.-148    	; 0x26b2 <move_window>
    2746:	81 11       	cpse	r24, r1
    2748:	51 c0       	rjmp	.+162    	; 0x27ec <check_fs+0xc0>
    274a:	fe 01       	movw	r30, r28
    274c:	e3 5d       	subi	r30, 0xD3	; 211
    274e:	fd 4f       	sbci	r31, 0xFD	; 253
    2750:	80 81       	ld	r24, Z
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	98 2f       	mov	r25, r24
    2756:	88 27       	eor	r24, r24
    2758:	31 97       	sbiw	r30, 0x01	; 1
    275a:	20 81       	ld	r18, Z
    275c:	82 2b       	or	r24, r18
    275e:	85 35       	cpi	r24, 0x55	; 85
    2760:	9a 4a       	sbci	r25, 0xAA	; 170
    2762:	09 f0       	breq	.+2      	; 0x2766 <check_fs+0x3a>
    2764:	45 c0       	rjmp	.+138    	; 0x27f0 <check_fs+0xc4>
    2766:	e5 5c       	subi	r30, 0xC5	; 197
    2768:	f1 40       	sbci	r31, 0x01	; 1
    276a:	20 81       	ld	r18, Z
    276c:	31 97       	sbiw	r30, 0x01	; 1
    276e:	80 81       	ld	r24, Z
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	a0 e0       	ldi	r26, 0x00	; 0
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	dc 01       	movw	r26, r24
    2778:	99 27       	eor	r25, r25
    277a:	88 27       	eor	r24, r24
    277c:	b2 2b       	or	r27, r18
    277e:	32 97       	sbiw	r30, 0x02	; 2
    2780:	20 81       	ld	r18, Z
    2782:	82 2b       	or	r24, r18
    2784:	31 96       	adiw	r30, 0x01	; 1
    2786:	40 81       	ld	r20, Z
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	54 2f       	mov	r21, r20
    278c:	44 27       	eor	r20, r20
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	84 2b       	or	r24, r20
    2794:	95 2b       	or	r25, r21
    2796:	a6 2b       	or	r26, r22
    2798:	b7 2b       	or	r27, r23
    279a:	bb 27       	eor	r27, r27
    279c:	86 34       	cpi	r24, 0x46	; 70
    279e:	91 44       	sbci	r25, 0x41	; 65
    27a0:	a4 45       	sbci	r26, 0x54	; 84
    27a2:	b1 05       	cpc	r27, r1
    27a4:	39 f1       	breq	.+78     	; 0x27f4 <check_fs+0xc8>
    27a6:	7e 96       	adiw	r30, 0x1e	; 30
    27a8:	80 81       	ld	r24, Z
    27aa:	31 97       	sbiw	r30, 0x01	; 1
    27ac:	40 81       	ld	r20, Z
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	ba 01       	movw	r22, r20
    27b6:	55 27       	eor	r21, r21
    27b8:	44 27       	eor	r20, r20
    27ba:	78 2b       	or	r23, r24
    27bc:	32 97       	sbiw	r30, 0x02	; 2
    27be:	80 81       	ld	r24, Z
    27c0:	48 2b       	or	r20, r24
    27c2:	cf 57       	subi	r28, 0x7F	; 127
    27c4:	df 4f       	sbci	r29, 0xFF	; 255
    27c6:	88 81       	ld	r24, Y
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	98 2f       	mov	r25, r24
    27cc:	88 27       	eor	r24, r24
    27ce:	a0 e0       	ldi	r26, 0x00	; 0
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	48 2b       	or	r20, r24
    27d4:	59 2b       	or	r21, r25
    27d6:	6a 2b       	or	r22, r26
    27d8:	7b 2b       	or	r23, r27
    27da:	77 27       	eor	r23, r23
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	46 34       	cpi	r20, 0x46	; 70
    27e0:	51 44       	sbci	r21, 0x41	; 65
    27e2:	64 45       	sbci	r22, 0x54	; 84
    27e4:	71 05       	cpc	r23, r1
    27e6:	39 f4       	brne	.+14     	; 0x27f6 <check_fs+0xca>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <check_fs+0xca>
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	03 c0       	rjmp	.+6      	; 0x27f6 <check_fs+0xca>
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <check_fs+0xca>
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	08 95       	ret

000027fc <validate>:
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	c9 f0       	breq	.+50     	; 0x2832 <validate+0x36>
    2800:	dc 01       	movw	r26, r24
    2802:	ed 91       	ld	r30, X+
    2804:	fc 91       	ld	r31, X
    2806:	11 97       	sbiw	r26, 0x01	; 1
    2808:	30 97       	sbiw	r30, 0x00	; 0
    280a:	a9 f0       	breq	.+42     	; 0x2836 <validate+0x3a>
    280c:	20 81       	ld	r18, Z
    280e:	22 23       	and	r18, r18
    2810:	a1 f0       	breq	.+40     	; 0x283a <validate+0x3e>
    2812:	26 81       	ldd	r18, Z+6	; 0x06
    2814:	37 81       	ldd	r19, Z+7	; 0x07
    2816:	12 96       	adiw	r26, 0x02	; 2
    2818:	8d 91       	ld	r24, X+
    281a:	9c 91       	ld	r25, X
    281c:	13 97       	sbiw	r26, 0x03	; 3
    281e:	28 17       	cp	r18, r24
    2820:	39 07       	cpc	r19, r25
    2822:	69 f4       	brne	.+26     	; 0x283e <validate+0x42>
    2824:	81 81       	ldd	r24, Z+1	; 0x01
    2826:	0e 94 94 0a 	call	0x1528	; 0x1528 <disk_status>
    282a:	80 ff       	sbrs	r24, 0
    282c:	0a c0       	rjmp	.+20     	; 0x2842 <validate+0x46>
    282e:	89 e0       	ldi	r24, 0x09	; 9
    2830:	08 95       	ret
    2832:	89 e0       	ldi	r24, 0x09	; 9
    2834:	08 95       	ret
    2836:	89 e0       	ldi	r24, 0x09	; 9
    2838:	08 95       	ret
    283a:	89 e0       	ldi	r24, 0x09	; 9
    283c:	08 95       	ret
    283e:	89 e0       	ldi	r24, 0x09	; 9
    2840:	08 95       	ret
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	08 95       	ret

00002846 <find_volume>:
    2846:	2f 92       	push	r2
    2848:	3f 92       	push	r3
    284a:	4f 92       	push	r4
    284c:	5f 92       	push	r5
    284e:	6f 92       	push	r6
    2850:	7f 92       	push	r7
    2852:	8f 92       	push	r8
    2854:	9f 92       	push	r9
    2856:	af 92       	push	r10
    2858:	bf 92       	push	r11
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	6d 97       	sbiw	r28, 0x1d	; 29
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	6c 01       	movw	r12, r24
    287c:	cb 01       	movw	r24, r22
    287e:	b4 2e       	mov	r11, r20
    2880:	d6 01       	movw	r26, r12
    2882:	1d 92       	st	X+, r1
    2884:	1c 92       	st	X, r1
    2886:	73 de       	rcall	.-794    	; 0x256e <get_ldnumber>
    2888:	7c 01       	movw	r14, r24
    288a:	99 23       	and	r25, r25
    288c:	0c f4       	brge	.+2      	; 0x2890 <find_volume+0x4a>
    288e:	d7 c2       	rjmp	.+1454   	; 0x2e3e <find_volume+0x5f8>
    2890:	fc 01       	movw	r30, r24
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	ed 5a       	subi	r30, 0xAD	; 173
    2898:	fb 4f       	sbci	r31, 0xFB	; 251
    289a:	00 81       	ld	r16, Z
    289c:	11 81       	ldd	r17, Z+1	; 0x01
    289e:	01 15       	cp	r16, r1
    28a0:	11 05       	cpc	r17, r1
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <find_volume+0x60>
    28a4:	ce c2       	rjmp	.+1436   	; 0x2e42 <find_volume+0x5fc>
    28a6:	f6 01       	movw	r30, r12
    28a8:	11 83       	std	Z+1, r17	; 0x01
    28aa:	00 83       	st	Z, r16
    28ac:	d8 01       	movw	r26, r16
    28ae:	8c 91       	ld	r24, X
    28b0:	88 23       	and	r24, r24
    28b2:	69 f0       	breq	.+26     	; 0x28ce <find_volume+0x88>
    28b4:	11 96       	adiw	r26, 0x01	; 1
    28b6:	8c 91       	ld	r24, X
    28b8:	0e 94 94 0a 	call	0x1528	; 0x1528 <disk_status>
    28bc:	80 fd       	sbrc	r24, 0
    28be:	07 c0       	rjmp	.+14     	; 0x28ce <find_volume+0x88>
    28c0:	bb 20       	and	r11, r11
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <find_volume+0x80>
    28c4:	c0 c2       	rjmp	.+1408   	; 0x2e46 <find_volume+0x600>
    28c6:	82 ff       	sbrs	r24, 2
    28c8:	c0 c2       	rjmp	.+1408   	; 0x2e4a <find_volume+0x604>
    28ca:	8a e0       	ldi	r24, 0x0A	; 10
    28cc:	65 c3       	rjmp	.+1738   	; 0x2f98 <find_volume+0x752>
    28ce:	f8 01       	movw	r30, r16
    28d0:	10 82       	st	Z, r1
    28d2:	e1 82       	std	Z+1, r14	; 0x01
    28d4:	8e 2d       	mov	r24, r14
    28d6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <disk_initialize>
    28da:	80 fd       	sbrc	r24, 0
    28dc:	b8 c2       	rjmp	.+1392   	; 0x2e4e <find_volume+0x608>
    28de:	bb 20       	and	r11, r11
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <find_volume+0x9e>
    28e2:	d5 c2       	rjmp	.+1450   	; 0x2e8e <find_volume+0x648>
    28e4:	82 fd       	sbrc	r24, 2
    28e6:	b5 c2       	rjmp	.+1386   	; 0x2e52 <find_volume+0x60c>
    28e8:	d2 c2       	rjmp	.+1444   	; 0x2e8e <find_volume+0x648>
    28ea:	df 01       	movw	r26, r30
    28ec:	17 97       	sbiw	r26, 0x07	; 7
    28ee:	8c 91       	ld	r24, X
    28f0:	88 23       	and	r24, r24
    28f2:	b9 f0       	breq	.+46     	; 0x2922 <find_volume+0xdc>
    28f4:	14 96       	adiw	r26, 0x04	; 4
    28f6:	cc 90       	ld	r12, X
    28f8:	80 81       	ld	r24, Z
    28fa:	d1 2c       	mov	r13, r1
    28fc:	e1 2c       	mov	r14, r1
    28fe:	f1 2c       	mov	r15, r1
    2900:	f8 2a       	or	r15, r24
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	8c 91       	ld	r24, X
    2906:	e8 2a       	or	r14, r24
    2908:	11 97       	sbiw	r26, 0x01	; 1
    290a:	ac 91       	ld	r26, X
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	ba 2f       	mov	r27, r26
    2910:	aa 27       	eor	r26, r26
    2912:	cd 01       	movw	r24, r26
    2914:	a0 e0       	ldi	r26, 0x00	; 0
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	c8 2a       	or	r12, r24
    291a:	d9 2a       	or	r13, r25
    291c:	ea 2a       	or	r14, r26
    291e:	fb 2a       	or	r15, r27
    2920:	04 c0       	rjmp	.+8      	; 0x292a <find_volume+0xe4>
    2922:	c8 2c       	mov	r12, r8
    2924:	d9 2c       	mov	r13, r9
    2926:	e7 2e       	mov	r14, r23
    2928:	f6 2e       	mov	r15, r22
    292a:	d9 01       	movw	r26, r18
    292c:	cd 92       	st	X+, r12
    292e:	dd 92       	st	X+, r13
    2930:	ed 92       	st	X+, r14
    2932:	fd 92       	st	X+, r15
    2934:	9d 01       	movw	r18, r26
    2936:	70 96       	adiw	r30, 0x10	; 16
    2938:	e4 17       	cp	r30, r20
    293a:	f5 07       	cpc	r31, r21
    293c:	b1 f6       	brne	.-84     	; 0x28ea <find_volume+0xa4>
    293e:	4e 01       	movw	r8, r28
    2940:	b1 e1       	ldi	r27, 0x11	; 17
    2942:	8b 0e       	add	r8, r27
    2944:	91 1c       	adc	r9, r1
    2946:	68 94       	set
    2948:	77 24       	eor	r7, r7
    294a:	71 f8       	bld	r7, 1
    294c:	f5 01       	movw	r30, r10
    294e:	c1 90       	ld	r12, Z+
    2950:	d1 90       	ld	r13, Z+
    2952:	e1 90       	ld	r14, Z+
    2954:	f1 90       	ld	r15, Z+
    2956:	5f 01       	movw	r10, r30
    2958:	c1 14       	cp	r12, r1
    295a:	d1 04       	cpc	r13, r1
    295c:	e1 04       	cpc	r14, r1
    295e:	f1 04       	cpc	r15, r1
    2960:	39 f0       	breq	.+14     	; 0x2970 <find_volume+0x12a>
    2962:	b7 01       	movw	r22, r14
    2964:	a6 01       	movw	r20, r12
    2966:	c8 01       	movw	r24, r16
    2968:	e1 de       	rcall	.-574    	; 0x272c <check_fs>
    296a:	81 11       	cpse	r24, r1
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <find_volume+0x12c>
    296e:	0d c0       	rjmp	.+26     	; 0x298a <find_volume+0x144>
    2970:	87 2d       	mov	r24, r7
    2972:	a8 14       	cp	r10, r8
    2974:	b9 04       	cpc	r11, r9
    2976:	51 f7       	brne	.-44     	; 0x294c <find_volume+0x106>
    2978:	03 c0       	rjmp	.+6      	; 0x2980 <find_volume+0x13a>
    297a:	c1 2c       	mov	r12, r1
    297c:	d1 2c       	mov	r13, r1
    297e:	76 01       	movw	r14, r12
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	09 f4       	brne	.+2      	; 0x2986 <find_volume+0x140>
    2984:	68 c2       	rjmp	.+1232   	; 0x2e56 <find_volume+0x610>
    2986:	81 11       	cpse	r24, r1
    2988:	68 c2       	rjmp	.+1232   	; 0x2e5a <find_volume+0x614>
    298a:	d8 01       	movw	r26, r16
    298c:	da 96       	adiw	r26, 0x3a	; 58
    298e:	8c 91       	ld	r24, X
    2990:	da 97       	sbiw	r26, 0x3a	; 58
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	98 2f       	mov	r25, r24
    2996:	88 27       	eor	r24, r24
    2998:	d9 96       	adiw	r26, 0x39	; 57
    299a:	2c 91       	ld	r18, X
    299c:	82 2b       	or	r24, r18
    299e:	81 15       	cp	r24, r1
    29a0:	92 40       	sbci	r25, 0x02	; 2
    29a2:	09 f0       	breq	.+2      	; 0x29a6 <find_volume+0x160>
    29a4:	5c c2       	rjmp	.+1208   	; 0x2e5e <find_volume+0x618>
    29a6:	f8 01       	movw	r30, r16
    29a8:	eb 5b       	subi	r30, 0xBB	; 187
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 80       	ld	r8, Z
    29ae:	91 2c       	mov	r9, r1
    29b0:	98 2c       	mov	r9, r8
    29b2:	88 24       	eor	r8, r8
    29b4:	31 97       	sbiw	r30, 0x01	; 1
    29b6:	80 81       	ld	r24, Z
    29b8:	88 2a       	or	r8, r24
    29ba:	a1 2c       	mov	r10, r1
    29bc:	b1 2c       	mov	r11, r1
    29be:	81 14       	cp	r8, r1
    29c0:	91 04       	cpc	r9, r1
    29c2:	a1 04       	cpc	r10, r1
    29c4:	b1 04       	cpc	r11, r1
    29c6:	e9 f4       	brne	.+58     	; 0x2a02 <find_volume+0x1bc>
    29c8:	71 96       	adiw	r30, 0x11	; 17
    29ca:	80 81       	ld	r24, Z
    29cc:	31 97       	sbiw	r30, 0x01	; 1
    29ce:	80 80       	ld	r8, Z
    29d0:	91 2c       	mov	r9, r1
    29d2:	a1 2c       	mov	r10, r1
    29d4:	b1 2c       	mov	r11, r1
    29d6:	54 01       	movw	r10, r8
    29d8:	99 24       	eor	r9, r9
    29da:	88 24       	eor	r8, r8
    29dc:	b8 2a       	or	r11, r24
    29de:	32 97       	sbiw	r30, 0x02	; 2
    29e0:	80 81       	ld	r24, Z
    29e2:	a5 01       	movw	r20, r10
    29e4:	94 01       	movw	r18, r8
    29e6:	28 2b       	or	r18, r24
    29e8:	da 01       	movw	r26, r20
    29ea:	c9 01       	movw	r24, r18
    29ec:	31 96       	adiw	r30, 0x01	; 1
    29ee:	80 80       	ld	r8, Z
    29f0:	91 2c       	mov	r9, r1
    29f2:	98 2c       	mov	r9, r8
    29f4:	88 24       	eor	r8, r8
    29f6:	a1 2c       	mov	r10, r1
    29f8:	b1 2c       	mov	r11, r1
    29fa:	88 2a       	or	r8, r24
    29fc:	99 2a       	or	r9, r25
    29fe:	aa 2a       	or	r10, r26
    2a00:	bb 2a       	or	r11, r27
    2a02:	d8 01       	movw	r26, r16
    2a04:	56 96       	adiw	r26, 0x16	; 22
    2a06:	8d 92       	st	X+, r8
    2a08:	9d 92       	st	X+, r9
    2a0a:	ad 92       	st	X+, r10
    2a0c:	bc 92       	st	X, r11
    2a0e:	59 97       	sbiw	r26, 0x19	; 25
    2a10:	de 96       	adiw	r26, 0x3e	; 62
    2a12:	ac 91       	ld	r26, X
    2a14:	f8 01       	movw	r30, r16
    2a16:	a3 83       	std	Z+3, r26	; 0x03
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	8a 0f       	add	r24, r26
    2a1c:	82 30       	cpi	r24, 0x02	; 2
    2a1e:	08 f0       	brcs	.+2      	; 0x2a22 <find_volume+0x1dc>
    2a20:	20 c2       	rjmp	.+1088   	; 0x2e62 <find_volume+0x61c>
    2a22:	f3 ad       	ldd	r31, Z+59	; 0x3b
    2a24:	f9 8b       	std	Y+17, r31	; 0x11
    2a26:	2f 2f       	mov	r18, r31
    2a28:	f8 01       	movw	r30, r16
    2a2a:	22 83       	std	Z+2, r18	; 0x02
    2a2c:	22 23       	and	r18, r18
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <find_volume+0x1ec>
    2a30:	1a c2       	rjmp	.+1076   	; 0x2e66 <find_volume+0x620>
    2a32:	82 2f       	mov	r24, r18
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9c 01       	movw	r18, r24
    2a38:	21 50       	subi	r18, 0x01	; 1
    2a3a:	31 09       	sbc	r19, r1
    2a3c:	82 23       	and	r24, r18
    2a3e:	93 23       	and	r25, r19
    2a40:	89 2b       	or	r24, r25
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <find_volume+0x200>
    2a44:	12 c2       	rjmp	.+1060   	; 0x2e6a <find_volume+0x624>
    2a46:	e0 5c       	subi	r30, 0xC0	; 192
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	98 2f       	mov	r25, r24
    2a50:	88 27       	eor	r24, r24
    2a52:	f8 01       	movw	r30, r16
    2a54:	27 ad       	ldd	r18, Z+63	; 0x3f
    2a56:	1c 01       	movw	r2, r24
    2a58:	22 2a       	or	r2, r18
    2a5a:	31 86       	std	Z+9, r3	; 0x09
    2a5c:	20 86       	std	Z+8, r2	; 0x08
    2a5e:	c1 01       	movw	r24, r2
    2a60:	8f 70       	andi	r24, 0x0F	; 15
    2a62:	99 27       	eor	r25, r25
    2a64:	89 2b       	or	r24, r25
    2a66:	09 f0       	breq	.+2      	; 0x2a6a <find_volume+0x224>
    2a68:	02 c2       	rjmp	.+1028   	; 0x2e6e <find_volume+0x628>
    2a6a:	ee 5b       	subi	r30, 0xBE	; 190
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	40 80       	ld	r4, Z
    2a70:	51 2c       	mov	r5, r1
    2a72:	54 2c       	mov	r5, r4
    2a74:	44 24       	eor	r4, r4
    2a76:	31 97       	sbiw	r30, 0x01	; 1
    2a78:	80 81       	ld	r24, Z
    2a7a:	48 2a       	or	r4, r24
    2a7c:	61 2c       	mov	r6, r1
    2a7e:	71 2c       	mov	r7, r1
    2a80:	41 14       	cp	r4, r1
    2a82:	51 04       	cpc	r5, r1
    2a84:	61 04       	cpc	r6, r1
    2a86:	71 04       	cpc	r7, r1
    2a88:	d1 f4       	brne	.+52     	; 0x2abe <find_volume+0x278>
    2a8a:	70 96       	adiw	r30, 0x10	; 16
    2a8c:	80 81       	ld	r24, Z
    2a8e:	31 97       	sbiw	r30, 0x01	; 1
    2a90:	40 80       	ld	r4, Z
    2a92:	51 2c       	mov	r5, r1
    2a94:	61 2c       	mov	r6, r1
    2a96:	71 2c       	mov	r7, r1
    2a98:	32 01       	movw	r6, r4
    2a9a:	55 24       	eor	r5, r5
    2a9c:	44 24       	eor	r4, r4
    2a9e:	78 2a       	or	r7, r24
    2aa0:	32 97       	sbiw	r30, 0x02	; 2
    2aa2:	80 81       	ld	r24, Z
    2aa4:	48 2a       	or	r4, r24
    2aa6:	31 96       	adiw	r30, 0x01	; 1
    2aa8:	80 81       	ld	r24, Z
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	98 2f       	mov	r25, r24
    2aae:	88 27       	eor	r24, r24
    2ab0:	ac 01       	movw	r20, r24
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	44 2a       	or	r4, r20
    2ab8:	55 2a       	or	r5, r21
    2aba:	66 2a       	or	r6, r22
    2abc:	77 2a       	or	r7, r23
    2abe:	f8 01       	movw	r30, r16
    2ac0:	85 ad       	ldd	r24, Z+61	; 0x3d
    2ac2:	e8 2f       	mov	r30, r24
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	3e 2f       	mov	r19, r30
    2ac8:	22 27       	eor	r18, r18
    2aca:	f8 01       	movw	r30, r16
    2acc:	84 ad       	ldd	r24, Z+60	; 0x3c
    2ace:	f9 01       	movw	r30, r18
    2ad0:	e8 2b       	or	r30, r24
    2ad2:	30 97       	sbiw	r30, 0x00	; 0
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <find_volume+0x292>
    2ad6:	cd c1       	rjmp	.+922    	; 0x2e72 <find_volume+0x62c>
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	a5 01       	movw	r20, r10
    2adc:	94 01       	movw	r18, r8
    2ade:	0e 94 f5 4a 	call	0x95ea	; 0x95ea <__muluhisi3>
    2ae2:	6a 8f       	std	Y+26, r22	; 0x1a
    2ae4:	7b 8f       	std	Y+27, r23	; 0x1b
    2ae6:	8c 8f       	std	Y+28, r24	; 0x1c
    2ae8:	9d 8f       	std	Y+29, r25	; 0x1d
    2aea:	9f 01       	movw	r18, r30
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	2e 8b       	std	Y+22, r18	; 0x16
    2af2:	3f 8b       	std	Y+23, r19	; 0x17
    2af4:	48 8f       	std	Y+24, r20	; 0x18
    2af6:	59 8f       	std	Y+25, r21	; 0x19
    2af8:	c1 01       	movw	r24, r2
    2afa:	92 95       	swap	r25
    2afc:	82 95       	swap	r24
    2afe:	8f 70       	andi	r24, 0x0F	; 15
    2b00:	89 27       	eor	r24, r25
    2b02:	9f 70       	andi	r25, 0x0F	; 15
    2b04:	89 27       	eor	r24, r25
    2b06:	28 0f       	add	r18, r24
    2b08:	39 1f       	adc	r19, r25
    2b0a:	41 1d       	adc	r20, r1
    2b0c:	51 1d       	adc	r21, r1
    2b0e:	da 01       	movw	r26, r20
    2b10:	c9 01       	movw	r24, r18
    2b12:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2b14:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2b16:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2b18:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2b1a:	28 0f       	add	r18, r24
    2b1c:	39 1f       	adc	r19, r25
    2b1e:	4a 1f       	adc	r20, r26
    2b20:	5b 1f       	adc	r21, r27
    2b22:	2a 8b       	std	Y+18, r18	; 0x12
    2b24:	3b 8b       	std	Y+19, r19	; 0x13
    2b26:	4c 8b       	std	Y+20, r20	; 0x14
    2b28:	5d 8b       	std	Y+21, r21	; 0x15
    2b2a:	42 16       	cp	r4, r18
    2b2c:	53 06       	cpc	r5, r19
    2b2e:	64 06       	cpc	r6, r20
    2b30:	75 06       	cpc	r7, r21
    2b32:	08 f4       	brcc	.+2      	; 0x2b36 <find_volume+0x2f0>
    2b34:	a0 c1       	rjmp	.+832    	; 0x2e76 <find_volume+0x630>
    2b36:	c3 01       	movw	r24, r6
    2b38:	b2 01       	movw	r22, r4
    2b3a:	62 1b       	sub	r22, r18
    2b3c:	73 0b       	sbc	r23, r19
    2b3e:	84 0b       	sbc	r24, r20
    2b40:	95 0b       	sbc	r25, r21
    2b42:	e9 89       	ldd	r30, Y+17	; 0x11
    2b44:	2e 2f       	mov	r18, r30
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	0e 94 bb 4a 	call	0x9576	; 0x9576 <__udivmodsi4>
    2b50:	da 01       	movw	r26, r20
    2b52:	c9 01       	movw	r24, r18
    2b54:	21 15       	cp	r18, r1
    2b56:	31 05       	cpc	r19, r1
    2b58:	41 05       	cpc	r20, r1
    2b5a:	51 05       	cpc	r21, r1
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <find_volume+0x31a>
    2b5e:	8d c1       	rjmp	.+794    	; 0x2e7a <find_volume+0x634>
    2b60:	26 3f       	cpi	r18, 0xF6	; 246
    2b62:	ff e0       	ldi	r31, 0x0F	; 15
    2b64:	3f 07       	cpc	r19, r31
    2b66:	41 05       	cpc	r20, r1
    2b68:	51 05       	cpc	r21, r1
    2b6a:	18 f0       	brcs	.+6      	; 0x2b72 <find_volume+0x32c>
    2b6c:	e2 e0       	ldi	r30, 0x02	; 2
    2b6e:	e9 8b       	std	Y+17, r30	; 0x11
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <find_volume+0x330>
    2b72:	f1 e0       	ldi	r31, 0x01	; 1
    2b74:	f9 8b       	std	Y+17, r31	; 0x11
    2b76:	86 3f       	cpi	r24, 0xF6	; 246
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	a1 05       	cpc	r26, r1
    2b7c:	b1 05       	cpc	r27, r1
    2b7e:	08 f0       	brcs	.+2      	; 0x2b82 <find_volume+0x33c>
    2b80:	9d c1       	rjmp	.+826    	; 0x2ebc <find_volume+0x676>
    2b82:	29 01       	movw	r4, r18
    2b84:	3a 01       	movw	r6, r20
    2b86:	82 e0       	ldi	r24, 0x02	; 2
    2b88:	48 0e       	add	r4, r24
    2b8a:	51 1c       	adc	r5, r1
    2b8c:	61 1c       	adc	r6, r1
    2b8e:	71 1c       	adc	r7, r1
    2b90:	d8 01       	movw	r26, r16
    2b92:	52 96       	adiw	r26, 0x12	; 18
    2b94:	4d 92       	st	X+, r4
    2b96:	5d 92       	st	X+, r5
    2b98:	6d 92       	st	X+, r6
    2b9a:	7c 92       	st	X, r7
    2b9c:	55 97       	sbiw	r26, 0x15	; 21
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	c2 8e       	std	Z+26, r12	; 0x1a
    2ba2:	d3 8e       	std	Z+27, r13	; 0x1b
    2ba4:	e4 8e       	std	Z+28, r14	; 0x1c
    2ba6:	f5 8e       	std	Z+29, r15	; 0x1d
    2ba8:	8e 89       	ldd	r24, Y+22	; 0x16
    2baa:	9f 89       	ldd	r25, Y+23	; 0x17
    2bac:	a8 8d       	ldd	r26, Y+24	; 0x18
    2bae:	b9 8d       	ldd	r27, Y+25	; 0x19
    2bb0:	8c 0d       	add	r24, r12
    2bb2:	9d 1d       	adc	r25, r13
    2bb4:	ae 1d       	adc	r26, r14
    2bb6:	bf 1d       	adc	r27, r15
    2bb8:	86 8f       	std	Z+30, r24	; 0x1e
    2bba:	97 8f       	std	Z+31, r25	; 0x1f
    2bbc:	a0 a3       	std	Z+32, r26	; 0x20
    2bbe:	b1 a3       	std	Z+33, r27	; 0x21
    2bc0:	4a 89       	ldd	r20, Y+18	; 0x12
    2bc2:	5b 89       	ldd	r21, Y+19	; 0x13
    2bc4:	6c 89       	ldd	r22, Y+20	; 0x14
    2bc6:	7d 89       	ldd	r23, Y+21	; 0x15
    2bc8:	4c 0d       	add	r20, r12
    2bca:	5d 1d       	adc	r21, r13
    2bcc:	6e 1d       	adc	r22, r14
    2bce:	7f 1d       	adc	r23, r15
    2bd0:	46 a3       	std	Z+38, r20	; 0x26
    2bd2:	57 a3       	std	Z+39, r21	; 0x27
    2bd4:	60 a7       	std	Z+40, r22	; 0x28
    2bd6:	71 a7       	std	Z+41, r23	; 0x29
    2bd8:	f9 89       	ldd	r31, Y+17	; 0x11
    2bda:	f3 30       	cpi	r31, 0x03	; 3
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <find_volume+0x39a>
    2bde:	44 c0       	rjmp	.+136    	; 0x2c68 <find_volume+0x422>
    2be0:	23 28       	or	r2, r3
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <find_volume+0x3a0>
    2be4:	4c c1       	rjmp	.+664    	; 0x2e7e <find_volume+0x638>
    2be6:	f8 01       	movw	r30, r16
    2be8:	e3 5a       	subi	r30, 0xA3	; 163
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	20 81       	ld	r18, Z
    2bee:	31 97       	sbiw	r30, 0x01	; 1
    2bf0:	80 81       	ld	r24, Z
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	99 27       	eor	r25, r25
    2bfc:	88 27       	eor	r24, r24
    2bfe:	b2 2b       	or	r27, r18
    2c00:	32 97       	sbiw	r30, 0x02	; 2
    2c02:	20 81       	ld	r18, Z
    2c04:	ac 01       	movw	r20, r24
    2c06:	bd 01       	movw	r22, r26
    2c08:	42 2b       	or	r20, r18
    2c0a:	31 96       	adiw	r30, 0x01	; 1
    2c0c:	80 81       	ld	r24, Z
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	92 2f       	mov	r25, r18
    2c14:	88 27       	eor	r24, r24
    2c16:	a0 e0       	ldi	r26, 0x00	; 0
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	84 2b       	or	r24, r20
    2c1c:	95 2b       	or	r25, r21
    2c1e:	a6 2b       	or	r26, r22
    2c20:	b7 2b       	or	r27, r23
    2c22:	f8 01       	movw	r30, r16
    2c24:	82 a3       	std	Z+34, r24	; 0x22
    2c26:	93 a3       	std	Z+35, r25	; 0x23
    2c28:	a4 a3       	std	Z+36, r26	; 0x24
    2c2a:	b5 a3       	std	Z+37, r27	; 0x25
    2c2c:	44 0c       	add	r4, r4
    2c2e:	55 1c       	adc	r5, r5
    2c30:	66 1c       	adc	r6, r6
    2c32:	77 1c       	adc	r7, r7
    2c34:	44 0c       	add	r4, r4
    2c36:	55 1c       	adc	r5, r5
    2c38:	66 1c       	adc	r6, r6
    2c3a:	77 1c       	adc	r7, r7
    2c3c:	ff ef       	ldi	r31, 0xFF	; 255
    2c3e:	4f 0e       	add	r4, r31
    2c40:	f1 e0       	ldi	r31, 0x01	; 1
    2c42:	5f 1e       	adc	r5, r31
    2c44:	61 1c       	adc	r6, r1
    2c46:	71 1c       	adc	r7, r1
    2c48:	03 2e       	mov	r0, r19
    2c4a:	39 e0       	ldi	r19, 0x09	; 9
    2c4c:	76 94       	lsr	r7
    2c4e:	67 94       	ror	r6
    2c50:	57 94       	ror	r5
    2c52:	47 94       	ror	r4
    2c54:	3a 95       	dec	r19
    2c56:	d1 f7       	brne	.-12     	; 0x2c4c <find_volume+0x406>
    2c58:	30 2d       	mov	r19, r0
    2c5a:	84 14       	cp	r8, r4
    2c5c:	95 04       	cpc	r9, r5
    2c5e:	a6 04       	cpc	r10, r6
    2c60:	b7 04       	cpc	r11, r7
    2c62:	08 f4       	brcc	.+2      	; 0x2c66 <find_volume+0x420>
    2c64:	0e c1       	rjmp	.+540    	; 0x2e82 <find_volume+0x63c>
    2c66:	56 c1       	rjmp	.+684    	; 0x2f14 <find_volume+0x6ce>
    2c68:	23 28       	or	r2, r3
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <find_volume+0x428>
    2c6c:	0c c1       	rjmp	.+536    	; 0x2e86 <find_volume+0x640>
    2c6e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2c70:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2c72:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2c74:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2c76:	82 0f       	add	r24, r18
    2c78:	93 1f       	adc	r25, r19
    2c7a:	a4 1f       	adc	r26, r20
    2c7c:	b5 1f       	adc	r27, r21
    2c7e:	f8 01       	movw	r30, r16
    2c80:	82 a3       	std	Z+34, r24	; 0x22
    2c82:	93 a3       	std	Z+35, r25	; 0x23
    2c84:	a4 a3       	std	Z+36, r26	; 0x24
    2c86:	b5 a3       	std	Z+37, r27	; 0x25
    2c88:	f9 89       	ldd	r31, Y+17	; 0x11
    2c8a:	f2 30       	cpi	r31, 0x02	; 2
    2c8c:	29 f4       	brne	.+10     	; 0x2c98 <find_volume+0x452>
    2c8e:	44 0c       	add	r4, r4
    2c90:	55 1c       	adc	r5, r5
    2c92:	66 1c       	adc	r6, r6
    2c94:	77 1c       	adc	r7, r7
    2c96:	6a c1       	rjmp	.+724    	; 0x2f6c <find_volume+0x726>
    2c98:	a3 e0       	ldi	r26, 0x03	; 3
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	a3 01       	movw	r20, r6
    2c9e:	92 01       	movw	r18, r4
    2ca0:	0e 94 f5 4a 	call	0x95ea	; 0x95ea <__muluhisi3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	b6 95       	lsr	r27
    2caa:	a7 95       	ror	r26
    2cac:	97 95       	ror	r25
    2cae:	87 95       	ror	r24
    2cb0:	21 e0       	ldi	r18, 0x01	; 1
    2cb2:	42 22       	and	r4, r18
    2cb4:	55 24       	eor	r5, r5
    2cb6:	66 24       	eor	r6, r6
    2cb8:	77 24       	eor	r7, r7
    2cba:	48 0e       	add	r4, r24
    2cbc:	59 1e       	adc	r5, r25
    2cbe:	6a 1e       	adc	r6, r26
    2cc0:	7b 1e       	adc	r7, r27
    2cc2:	54 c1       	rjmp	.+680    	; 0x2f6c <find_volume+0x726>
    2cc4:	b7 01       	movw	r22, r14
    2cc6:	a6 01       	movw	r20, r12
    2cc8:	4f 5f       	subi	r20, 0xFF	; 255
    2cca:	5f 4f       	sbci	r21, 0xFF	; 255
    2ccc:	6f 4f       	sbci	r22, 0xFF	; 255
    2cce:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd0:	c8 01       	movw	r24, r16
    2cd2:	ef dc       	rcall	.-1570   	; 0x26b2 <move_window>
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	96 c0       	rjmp	.+300    	; 0x2e04 <find_volume+0x5be>
    2cd8:	d8 01       	movw	r26, r16
    2cda:	15 96       	adiw	r26, 0x05	; 5
    2cdc:	1c 92       	st	X, r1
    2cde:	f8 01       	movw	r30, r16
    2ce0:	e3 5d       	subi	r30, 0xD3	; 211
    2ce2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce4:	80 81       	ld	r24, Z
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	98 2f       	mov	r25, r24
    2cea:	88 27       	eor	r24, r24
    2cec:	31 97       	sbiw	r30, 0x01	; 1
    2cee:	20 81       	ld	r18, Z
    2cf0:	82 2b       	or	r24, r18
    2cf2:	85 35       	cpi	r24, 0x55	; 85
    2cf4:	9a 4a       	sbci	r25, 0xAA	; 170
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <find_volume+0x4b4>
    2cf8:	88 c0       	rjmp	.+272    	; 0x2e0a <find_volume+0x5c4>
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	21 a9       	ldd	r18, Z+49	; 0x31
    2cfe:	80 a9       	ldd	r24, Z+48	; 0x30
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a0 e0       	ldi	r26, 0x00	; 0
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	dc 01       	movw	r26, r24
    2d08:	99 27       	eor	r25, r25
    2d0a:	88 27       	eor	r24, r24
    2d0c:	b2 2b       	or	r27, r18
    2d0e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2d10:	ac 01       	movw	r20, r24
    2d12:	bd 01       	movw	r22, r26
    2d14:	42 2b       	or	r20, r18
    2d16:	27 a5       	ldd	r18, Z+47	; 0x2f
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	92 2f       	mov	r25, r18
    2d1c:	88 27       	eor	r24, r24
    2d1e:	a0 e0       	ldi	r26, 0x00	; 0
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	84 2b       	or	r24, r20
    2d24:	95 2b       	or	r25, r21
    2d26:	a6 2b       	or	r26, r22
    2d28:	b7 2b       	or	r27, r23
    2d2a:	82 35       	cpi	r24, 0x52	; 82
    2d2c:	92 45       	sbci	r25, 0x52	; 82
    2d2e:	a1 46       	sbci	r26, 0x61	; 97
    2d30:	b1 44       	sbci	r27, 0x41	; 65
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <find_volume+0x4f0>
    2d34:	6d c0       	rjmp	.+218    	; 0x2e10 <find_volume+0x5ca>
    2d36:	f8 01       	movw	r30, r16
    2d38:	eb 5e       	subi	r30, 0xEB	; 235
    2d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3c:	20 81       	ld	r18, Z
    2d3e:	31 97       	sbiw	r30, 0x01	; 1
    2d40:	80 81       	ld	r24, Z
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	a0 e0       	ldi	r26, 0x00	; 0
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	dc 01       	movw	r26, r24
    2d4a:	99 27       	eor	r25, r25
    2d4c:	88 27       	eor	r24, r24
    2d4e:	b2 2b       	or	r27, r18
    2d50:	32 97       	sbiw	r30, 0x02	; 2
    2d52:	20 81       	ld	r18, Z
    2d54:	ac 01       	movw	r20, r24
    2d56:	bd 01       	movw	r22, r26
    2d58:	42 2b       	or	r20, r18
    2d5a:	31 96       	adiw	r30, 0x01	; 1
    2d5c:	20 81       	ld	r18, Z
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	92 2f       	mov	r25, r18
    2d62:	88 27       	eor	r24, r24
    2d64:	a0 e0       	ldi	r26, 0x00	; 0
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	84 2b       	or	r24, r20
    2d6a:	95 2b       	or	r25, r21
    2d6c:	a6 2b       	or	r26, r22
    2d6e:	b7 2b       	or	r27, r23
    2d70:	82 37       	cpi	r24, 0x72	; 114
    2d72:	92 47       	sbci	r25, 0x72	; 114
    2d74:	a1 44       	sbci	r26, 0x41	; 65
    2d76:	b1 46       	sbci	r27, 0x61	; 97
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <find_volume+0x536>
    2d7a:	4d c0       	rjmp	.+154    	; 0x2e16 <find_volume+0x5d0>
    2d7c:	36 96       	adiw	r30, 0x06	; 6
    2d7e:	20 81       	ld	r18, Z
    2d80:	31 97       	sbiw	r30, 0x01	; 1
    2d82:	80 81       	ld	r24, Z
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a0 e0       	ldi	r26, 0x00	; 0
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	99 27       	eor	r25, r25
    2d8e:	88 27       	eor	r24, r24
    2d90:	b2 2b       	or	r27, r18
    2d92:	32 97       	sbiw	r30, 0x02	; 2
    2d94:	20 81       	ld	r18, Z
    2d96:	ac 01       	movw	r20, r24
    2d98:	bd 01       	movw	r22, r26
    2d9a:	42 2b       	or	r20, r18
    2d9c:	31 96       	adiw	r30, 0x01	; 1
    2d9e:	20 81       	ld	r18, Z
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	92 2f       	mov	r25, r18
    2da4:	88 27       	eor	r24, r24
    2da6:	a0 e0       	ldi	r26, 0x00	; 0
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	84 2b       	or	r24, r20
    2dac:	95 2b       	or	r25, r21
    2dae:	a6 2b       	or	r26, r22
    2db0:	b7 2b       	or	r27, r23
    2db2:	f8 01       	movw	r30, r16
    2db4:	86 87       	std	Z+14, r24	; 0x0e
    2db6:	97 87       	std	Z+15, r25	; 0x0f
    2db8:	a0 8b       	std	Z+16, r26	; 0x10
    2dba:	b1 8b       	std	Z+17, r27	; 0x11
    2dbc:	e3 5e       	subi	r30, 0xE3	; 227
    2dbe:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc0:	20 81       	ld	r18, Z
    2dc2:	31 97       	sbiw	r30, 0x01	; 1
    2dc4:	80 81       	ld	r24, Z
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	a0 e0       	ldi	r26, 0x00	; 0
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	dc 01       	movw	r26, r24
    2dce:	99 27       	eor	r25, r25
    2dd0:	88 27       	eor	r24, r24
    2dd2:	b2 2b       	or	r27, r18
    2dd4:	32 97       	sbiw	r30, 0x02	; 2
    2dd6:	20 81       	ld	r18, Z
    2dd8:	ac 01       	movw	r20, r24
    2dda:	bd 01       	movw	r22, r26
    2ddc:	42 2b       	or	r20, r18
    2dde:	31 96       	adiw	r30, 0x01	; 1
    2de0:	20 81       	ld	r18, Z
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	92 2f       	mov	r25, r18
    2de6:	88 27       	eor	r24, r24
    2de8:	a0 e0       	ldi	r26, 0x00	; 0
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	84 2b       	or	r24, r20
    2dee:	95 2b       	or	r25, r21
    2df0:	a6 2b       	or	r26, r22
    2df2:	b7 2b       	or	r27, r23
    2df4:	f8 01       	movw	r30, r16
    2df6:	82 87       	std	Z+10, r24	; 0x0a
    2df8:	93 87       	std	Z+11, r25	; 0x0b
    2dfa:	a4 87       	std	Z+12, r26	; 0x0c
    2dfc:	b5 87       	std	Z+13, r27	; 0x0d
    2dfe:	f3 e0       	ldi	r31, 0x03	; 3
    2e00:	f9 8b       	std	Y+17, r31	; 0x11
    2e02:	0b c0       	rjmp	.+22     	; 0x2e1a <find_volume+0x5d4>
    2e04:	e3 e0       	ldi	r30, 0x03	; 3
    2e06:	e9 8b       	std	Y+17, r30	; 0x11
    2e08:	08 c0       	rjmp	.+16     	; 0x2e1a <find_volume+0x5d4>
    2e0a:	f3 e0       	ldi	r31, 0x03	; 3
    2e0c:	f9 8b       	std	Y+17, r31	; 0x11
    2e0e:	05 c0       	rjmp	.+10     	; 0x2e1a <find_volume+0x5d4>
    2e10:	e3 e0       	ldi	r30, 0x03	; 3
    2e12:	e9 8b       	std	Y+17, r30	; 0x11
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <find_volume+0x5d4>
    2e16:	f3 e0       	ldi	r31, 0x03	; 3
    2e18:	f9 8b       	std	Y+17, r31	; 0x11
    2e1a:	e9 89       	ldd	r30, Y+17	; 0x11
    2e1c:	d8 01       	movw	r26, r16
    2e1e:	ec 93       	st	X, r30
    2e20:	80 91 51 04 	lds	r24, 0x0451
    2e24:	90 91 52 04 	lds	r25, 0x0452
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	90 93 52 04 	sts	0x0452, r25
    2e2e:	80 93 51 04 	sts	0x0451, r24
    2e32:	17 96       	adiw	r26, 0x07	; 7
    2e34:	9c 93       	st	X, r25
    2e36:	8e 93       	st	-X, r24
    2e38:	16 97       	sbiw	r26, 0x06	; 6
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	ad c0       	rjmp	.+346    	; 0x2f98 <find_volume+0x752>
    2e3e:	8b e0       	ldi	r24, 0x0B	; 11
    2e40:	ab c0       	rjmp	.+342    	; 0x2f98 <find_volume+0x752>
    2e42:	8c e0       	ldi	r24, 0x0C	; 12
    2e44:	a9 c0       	rjmp	.+338    	; 0x2f98 <find_volume+0x752>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	a7 c0       	rjmp	.+334    	; 0x2f98 <find_volume+0x752>
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	a5 c0       	rjmp	.+330    	; 0x2f98 <find_volume+0x752>
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	a3 c0       	rjmp	.+326    	; 0x2f98 <find_volume+0x752>
    2e52:	8a e0       	ldi	r24, 0x0A	; 10
    2e54:	a1 c0       	rjmp	.+322    	; 0x2f98 <find_volume+0x752>
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	9f c0       	rjmp	.+318    	; 0x2f98 <find_volume+0x752>
    2e5a:	8d e0       	ldi	r24, 0x0D	; 13
    2e5c:	9d c0       	rjmp	.+314    	; 0x2f98 <find_volume+0x752>
    2e5e:	8d e0       	ldi	r24, 0x0D	; 13
    2e60:	9b c0       	rjmp	.+310    	; 0x2f98 <find_volume+0x752>
    2e62:	8d e0       	ldi	r24, 0x0D	; 13
    2e64:	99 c0       	rjmp	.+306    	; 0x2f98 <find_volume+0x752>
    2e66:	8d e0       	ldi	r24, 0x0D	; 13
    2e68:	97 c0       	rjmp	.+302    	; 0x2f98 <find_volume+0x752>
    2e6a:	8d e0       	ldi	r24, 0x0D	; 13
    2e6c:	95 c0       	rjmp	.+298    	; 0x2f98 <find_volume+0x752>
    2e6e:	8d e0       	ldi	r24, 0x0D	; 13
    2e70:	93 c0       	rjmp	.+294    	; 0x2f98 <find_volume+0x752>
    2e72:	8d e0       	ldi	r24, 0x0D	; 13
    2e74:	91 c0       	rjmp	.+290    	; 0x2f98 <find_volume+0x752>
    2e76:	8d e0       	ldi	r24, 0x0D	; 13
    2e78:	8f c0       	rjmp	.+286    	; 0x2f98 <find_volume+0x752>
    2e7a:	8d e0       	ldi	r24, 0x0D	; 13
    2e7c:	8d c0       	rjmp	.+282    	; 0x2f98 <find_volume+0x752>
    2e7e:	8d e0       	ldi	r24, 0x0D	; 13
    2e80:	8b c0       	rjmp	.+278    	; 0x2f98 <find_volume+0x752>
    2e82:	8d e0       	ldi	r24, 0x0D	; 13
    2e84:	89 c0       	rjmp	.+274    	; 0x2f98 <find_volume+0x752>
    2e86:	8d e0       	ldi	r24, 0x0D	; 13
    2e88:	87 c0       	rjmp	.+270    	; 0x2f98 <find_volume+0x752>
    2e8a:	8d e0       	ldi	r24, 0x0D	; 13
    2e8c:	85 c0       	rjmp	.+266    	; 0x2f98 <find_volume+0x752>
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	50 e0       	ldi	r21, 0x00	; 0
    2e92:	ba 01       	movw	r22, r20
    2e94:	c8 01       	movw	r24, r16
    2e96:	4a dc       	rcall	.-1900   	; 0x272c <check_fs>
    2e98:	81 30       	cpi	r24, 0x01	; 1
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <find_volume+0x658>
    2e9c:	6e cd       	rjmp	.-1316   	; 0x297a <find_volume+0x134>
    2e9e:	9e 01       	movw	r18, r28
    2ea0:	2f 5f       	subi	r18, 0xFF	; 255
    2ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea4:	59 01       	movw	r10, r18
    2ea6:	f8 01       	movw	r30, r16
    2ea8:	e9 50       	subi	r30, 0x09	; 9
    2eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2eac:	a8 01       	movw	r20, r16
    2eae:	49 5c       	subi	r20, 0xC9	; 201
    2eb0:	5d 4f       	sbci	r21, 0xFD	; 253
    2eb2:	81 2c       	mov	r8, r1
    2eb4:	91 2c       	mov	r9, r1
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	17 cd       	rjmp	.-1490   	; 0x28ea <find_volume+0xa4>
    2ebc:	29 01       	movw	r4, r18
    2ebe:	3a 01       	movw	r6, r20
    2ec0:	62 e0       	ldi	r22, 0x02	; 2
    2ec2:	46 0e       	add	r4, r22
    2ec4:	51 1c       	adc	r5, r1
    2ec6:	61 1c       	adc	r6, r1
    2ec8:	71 1c       	adc	r7, r1
    2eca:	d8 01       	movw	r26, r16
    2ecc:	52 96       	adiw	r26, 0x12	; 18
    2ece:	4d 92       	st	X+, r4
    2ed0:	5d 92       	st	X+, r5
    2ed2:	6d 92       	st	X+, r6
    2ed4:	7c 92       	st	X, r7
    2ed6:	55 97       	sbiw	r26, 0x15	; 21
    2ed8:	f8 01       	movw	r30, r16
    2eda:	c2 8e       	std	Z+26, r12	; 0x1a
    2edc:	d3 8e       	std	Z+27, r13	; 0x1b
    2ede:	e4 8e       	std	Z+28, r14	; 0x1c
    2ee0:	f5 8e       	std	Z+29, r15	; 0x1d
    2ee2:	8e 89       	ldd	r24, Y+22	; 0x16
    2ee4:	9f 89       	ldd	r25, Y+23	; 0x17
    2ee6:	a8 8d       	ldd	r26, Y+24	; 0x18
    2ee8:	b9 8d       	ldd	r27, Y+25	; 0x19
    2eea:	8c 0d       	add	r24, r12
    2eec:	9d 1d       	adc	r25, r13
    2eee:	ae 1d       	adc	r26, r14
    2ef0:	bf 1d       	adc	r27, r15
    2ef2:	86 8f       	std	Z+30, r24	; 0x1e
    2ef4:	97 8f       	std	Z+31, r25	; 0x1f
    2ef6:	a0 a3       	std	Z+32, r26	; 0x20
    2ef8:	b1 a3       	std	Z+33, r27	; 0x21
    2efa:	8a 89       	ldd	r24, Y+18	; 0x12
    2efc:	9b 89       	ldd	r25, Y+19	; 0x13
    2efe:	ac 89       	ldd	r26, Y+20	; 0x14
    2f00:	bd 89       	ldd	r27, Y+21	; 0x15
    2f02:	8c 0d       	add	r24, r12
    2f04:	9d 1d       	adc	r25, r13
    2f06:	ae 1d       	adc	r26, r14
    2f08:	bf 1d       	adc	r27, r15
    2f0a:	86 a3       	std	Z+38, r24	; 0x26
    2f0c:	97 a3       	std	Z+39, r25	; 0x27
    2f0e:	a0 a7       	std	Z+40, r26	; 0x28
    2f10:	b1 a7       	std	Z+41, r27	; 0x29
    2f12:	66 ce       	rjmp	.-820    	; 0x2be0 <find_volume+0x39a>
    2f14:	8f ef       	ldi	r24, 0xFF	; 255
    2f16:	9f ef       	ldi	r25, 0xFF	; 255
    2f18:	dc 01       	movw	r26, r24
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	86 87       	std	Z+14, r24	; 0x0e
    2f1e:	97 87       	std	Z+15, r25	; 0x0f
    2f20:	a0 8b       	std	Z+16, r26	; 0x10
    2f22:	b1 8b       	std	Z+17, r27	; 0x11
    2f24:	82 87       	std	Z+10, r24	; 0x0a
    2f26:	93 87       	std	Z+11, r25	; 0x0b
    2f28:	a4 87       	std	Z+12, r26	; 0x0c
    2f2a:	b5 87       	std	Z+13, r27	; 0x0d
    2f2c:	80 e8       	ldi	r24, 0x80	; 128
    2f2e:	85 83       	std	Z+5, r24	; 0x05
    2f30:	e1 5a       	subi	r30, 0xA1	; 161
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	98 2f       	mov	r25, r24
    2f3a:	88 27       	eor	r24, r24
    2f3c:	31 97       	sbiw	r30, 0x01	; 1
    2f3e:	20 81       	ld	r18, Z
    2f40:	82 2b       	or	r24, r18
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <find_volume+0x702>
    2f46:	be ce       	rjmp	.-644    	; 0x2cc4 <find_volume+0x47e>
    2f48:	f3 e0       	ldi	r31, 0x03	; 3
    2f4a:	f9 8b       	std	Y+17, r31	; 0x11
    2f4c:	66 cf       	rjmp	.-308    	; 0x2e1a <find_volume+0x5d4>
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	9f ef       	ldi	r25, 0xFF	; 255
    2f52:	dc 01       	movw	r26, r24
    2f54:	f8 01       	movw	r30, r16
    2f56:	86 87       	std	Z+14, r24	; 0x0e
    2f58:	97 87       	std	Z+15, r25	; 0x0f
    2f5a:	a0 8b       	std	Z+16, r26	; 0x10
    2f5c:	b1 8b       	std	Z+17, r27	; 0x11
    2f5e:	82 87       	std	Z+10, r24	; 0x0a
    2f60:	93 87       	std	Z+11, r25	; 0x0b
    2f62:	a4 87       	std	Z+12, r26	; 0x0c
    2f64:	b5 87       	std	Z+13, r27	; 0x0d
    2f66:	80 e8       	ldi	r24, 0x80	; 128
    2f68:	85 83       	std	Z+5, r24	; 0x05
    2f6a:	57 cf       	rjmp	.-338    	; 0x2e1a <find_volume+0x5d4>
    2f6c:	ff ef       	ldi	r31, 0xFF	; 255
    2f6e:	4f 0e       	add	r4, r31
    2f70:	f1 e0       	ldi	r31, 0x01	; 1
    2f72:	5f 1e       	adc	r5, r31
    2f74:	61 1c       	adc	r6, r1
    2f76:	71 1c       	adc	r7, r1
    2f78:	03 2e       	mov	r0, r19
    2f7a:	39 e0       	ldi	r19, 0x09	; 9
    2f7c:	76 94       	lsr	r7
    2f7e:	67 94       	ror	r6
    2f80:	57 94       	ror	r5
    2f82:	47 94       	ror	r4
    2f84:	3a 95       	dec	r19
    2f86:	d1 f7       	brne	.-12     	; 0x2f7c <find_volume+0x736>
    2f88:	30 2d       	mov	r19, r0
    2f8a:	84 14       	cp	r8, r4
    2f8c:	95 04       	cpc	r9, r5
    2f8e:	a6 04       	cpc	r10, r6
    2f90:	b7 04       	cpc	r11, r7
    2f92:	08 f4       	brcc	.+2      	; 0x2f96 <find_volume+0x750>
    2f94:	7a cf       	rjmp	.-268    	; 0x2e8a <find_volume+0x644>
    2f96:	db cf       	rjmp	.-74     	; 0x2f4e <find_volume+0x708>
    2f98:	6d 96       	adiw	r28, 0x1d	; 29
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	df 90       	pop	r13
    2fb2:	cf 90       	pop	r12
    2fb4:	bf 90       	pop	r11
    2fb6:	af 90       	pop	r10
    2fb8:	9f 90       	pop	r9
    2fba:	8f 90       	pop	r8
    2fbc:	7f 90       	pop	r7
    2fbe:	6f 90       	pop	r6
    2fc0:	5f 90       	pop	r5
    2fc2:	4f 90       	pop	r4
    2fc4:	3f 90       	pop	r3
    2fc6:	2f 90       	pop	r2
    2fc8:	08 95       	ret

00002fca <clust2sect>:
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	9a 01       	movw	r18, r20
    2fd6:	ab 01       	movw	r20, r22
    2fd8:	22 50       	subi	r18, 0x02	; 2
    2fda:	31 09       	sbc	r19, r1
    2fdc:	41 09       	sbc	r20, r1
    2fde:	51 09       	sbc	r21, r1
    2fe0:	c2 88       	ldd	r12, Z+18	; 0x12
    2fe2:	d3 88       	ldd	r13, Z+19	; 0x13
    2fe4:	e4 88       	ldd	r14, Z+20	; 0x14
    2fe6:	f5 88       	ldd	r15, Z+21	; 0x15
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	c8 1a       	sub	r12, r24
    2fec:	d1 08       	sbc	r13, r1
    2fee:	e1 08       	sbc	r14, r1
    2ff0:	f1 08       	sbc	r15, r1
    2ff2:	2c 15       	cp	r18, r12
    2ff4:	3d 05       	cpc	r19, r13
    2ff6:	4e 05       	cpc	r20, r14
    2ff8:	5f 05       	cpc	r21, r15
    2ffa:	68 f4       	brcc	.+26     	; 0x3016 <clust2sect+0x4c>
    2ffc:	a2 81       	ldd	r26, Z+2	; 0x02
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	0e 94 f5 4a 	call	0x95ea	; 0x95ea <__muluhisi3>
    3004:	c6 a0       	ldd	r12, Z+38	; 0x26
    3006:	d7 a0       	ldd	r13, Z+39	; 0x27
    3008:	e0 a4       	ldd	r14, Z+40	; 0x28
    300a:	f1 a4       	ldd	r15, Z+41	; 0x29
    300c:	6c 0d       	add	r22, r12
    300e:	7d 1d       	adc	r23, r13
    3010:	8e 1d       	adc	r24, r14
    3012:	9f 1d       	adc	r25, r15
    3014:	03 c0       	rjmp	.+6      	; 0x301c <clust2sect+0x52>
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	70 e0       	ldi	r23, 0x00	; 0
    301a:	cb 01       	movw	r24, r22
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
    3024:	08 95       	ret

00003026 <get_fat>:
    3026:	af 92       	push	r10
    3028:	bf 92       	push	r11
    302a:	cf 92       	push	r12
    302c:	df 92       	push	r13
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	ec 01       	movw	r28, r24
    303c:	6a 01       	movw	r12, r20
    303e:	7b 01       	movw	r14, r22
    3040:	42 30       	cpi	r20, 0x02	; 2
    3042:	51 05       	cpc	r21, r1
    3044:	61 05       	cpc	r22, r1
    3046:	71 05       	cpc	r23, r1
    3048:	08 f4       	brcc	.+2      	; 0x304c <get_fat+0x26>
    304a:	c3 c0       	rjmp	.+390    	; 0x31d2 <get_fat+0x1ac>
    304c:	8a 89       	ldd	r24, Y+18	; 0x12
    304e:	9b 89       	ldd	r25, Y+19	; 0x13
    3050:	ac 89       	ldd	r26, Y+20	; 0x14
    3052:	bd 89       	ldd	r27, Y+21	; 0x15
    3054:	48 17       	cp	r20, r24
    3056:	59 07       	cpc	r21, r25
    3058:	6a 07       	cpc	r22, r26
    305a:	7b 07       	cpc	r23, r27
    305c:	08 f0       	brcs	.+2      	; 0x3060 <get_fat+0x3a>
    305e:	be c0       	rjmp	.+380    	; 0x31dc <get_fat+0x1b6>
    3060:	88 81       	ld	r24, Y
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	09 f4       	brne	.+2      	; 0x3068 <get_fat+0x42>
    3066:	4b c0       	rjmp	.+150    	; 0x30fe <get_fat+0xd8>
    3068:	83 30       	cpi	r24, 0x03	; 3
    306a:	09 f4       	brne	.+2      	; 0x306e <get_fat+0x48>
    306c:	6c c0       	rjmp	.+216    	; 0x3146 <get_fat+0x120>
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	09 f0       	breq	.+2      	; 0x3074 <get_fat+0x4e>
    3072:	b9 c0       	rjmp	.+370    	; 0x31e6 <get_fat+0x1c0>
    3074:	8a 01       	movw	r16, r20
    3076:	16 95       	lsr	r17
    3078:	07 95       	ror	r16
    307a:	04 0f       	add	r16, r20
    307c:	15 1f       	adc	r17, r21
    307e:	c8 01       	movw	r24, r16
    3080:	89 2f       	mov	r24, r25
    3082:	99 27       	eor	r25, r25
    3084:	86 95       	lsr	r24
    3086:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3088:	5f 8d       	ldd	r21, Y+31	; 0x1f
    308a:	68 a1       	ldd	r22, Y+32	; 0x20
    308c:	79 a1       	ldd	r23, Y+33	; 0x21
    308e:	48 0f       	add	r20, r24
    3090:	59 1f       	adc	r21, r25
    3092:	61 1d       	adc	r22, r1
    3094:	71 1d       	adc	r23, r1
    3096:	ce 01       	movw	r24, r28
    3098:	0c db       	rcall	.-2536   	; 0x26b2 <move_window>
    309a:	81 11       	cpse	r24, r1
    309c:	a9 c0       	rjmp	.+338    	; 0x31f0 <get_fat+0x1ca>
    309e:	58 01       	movw	r10, r16
    30a0:	8f ef       	ldi	r24, 0xFF	; 255
    30a2:	a8 1a       	sub	r10, r24
    30a4:	b8 0a       	sbc	r11, r24
    30a6:	11 70       	andi	r17, 0x01	; 1
    30a8:	fe 01       	movw	r30, r28
    30aa:	e0 0f       	add	r30, r16
    30ac:	f1 1f       	adc	r31, r17
    30ae:	16 a5       	ldd	r17, Z+46	; 0x2e
    30b0:	c5 01       	movw	r24, r10
    30b2:	89 2f       	mov	r24, r25
    30b4:	99 27       	eor	r25, r25
    30b6:	86 95       	lsr	r24
    30b8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    30ba:	5f 8d       	ldd	r21, Y+31	; 0x1f
    30bc:	68 a1       	ldd	r22, Y+32	; 0x20
    30be:	79 a1       	ldd	r23, Y+33	; 0x21
    30c0:	48 0f       	add	r20, r24
    30c2:	59 1f       	adc	r21, r25
    30c4:	61 1d       	adc	r22, r1
    30c6:	71 1d       	adc	r23, r1
    30c8:	ce 01       	movw	r24, r28
    30ca:	f3 da       	rcall	.-2586   	; 0x26b2 <move_window>
    30cc:	81 11       	cpse	r24, r1
    30ce:	94 c0       	rjmp	.+296    	; 0x31f8 <get_fat+0x1d2>
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	b8 22       	and	r11, r24
    30d4:	ca 0d       	add	r28, r10
    30d6:	db 1d       	adc	r29, r11
    30d8:	8e a5       	ldd	r24, Y+46	; 0x2e
    30da:	61 2f       	mov	r22, r17
    30dc:	70 e0       	ldi	r23, 0x00	; 0
    30de:	78 2b       	or	r23, r24
    30e0:	c0 fe       	sbrs	r12, 0
    30e2:	09 c0       	rjmp	.+18     	; 0x30f6 <get_fat+0xd0>
    30e4:	72 95       	swap	r23
    30e6:	62 95       	swap	r22
    30e8:	6f 70       	andi	r22, 0x0F	; 15
    30ea:	67 27       	eor	r22, r23
    30ec:	7f 70       	andi	r23, 0x0F	; 15
    30ee:	67 27       	eor	r22, r23
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	8c c0       	rjmp	.+280    	; 0x320e <get_fat+0x1e8>
    30f6:	7f 70       	andi	r23, 0x0F	; 15
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	88 c0       	rjmp	.+272    	; 0x320e <get_fat+0x1e8>
    30fe:	45 2f       	mov	r20, r21
    3100:	56 2f       	mov	r21, r22
    3102:	67 2f       	mov	r22, r23
    3104:	77 27       	eor	r23, r23
    3106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3108:	9f 8d       	ldd	r25, Y+31	; 0x1f
    310a:	a8 a1       	ldd	r26, Y+32	; 0x20
    310c:	b9 a1       	ldd	r27, Y+33	; 0x21
    310e:	48 0f       	add	r20, r24
    3110:	59 1f       	adc	r21, r25
    3112:	6a 1f       	adc	r22, r26
    3114:	7b 1f       	adc	r23, r27
    3116:	ce 01       	movw	r24, r28
    3118:	cc da       	rcall	.-2664   	; 0x26b2 <move_window>
    311a:	81 11       	cpse	r24, r1
    311c:	71 c0       	rjmp	.+226    	; 0x3200 <get_fat+0x1da>
    311e:	cc 0c       	add	r12, r12
    3120:	dd 1c       	adc	r13, r13
    3122:	ee 1c       	adc	r14, r14
    3124:	ff 1c       	adc	r15, r15
    3126:	e8 94       	clt
    3128:	c0 f8       	bld	r12, 0
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	d8 22       	and	r13, r24
    312e:	ee 24       	eor	r14, r14
    3130:	ff 24       	eor	r15, r15
    3132:	fe 01       	movw	r30, r28
    3134:	ec 0d       	add	r30, r12
    3136:	fd 1d       	adc	r31, r13
    3138:	66 a5       	ldd	r22, Z+46	; 0x2e
    313a:	87 a5       	ldd	r24, Z+47	; 0x2f
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	78 2b       	or	r23, r24
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	64 c0       	rjmp	.+200    	; 0x320e <get_fat+0x1e8>
    3146:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3148:	9f 8d       	ldd	r25, Y+31	; 0x1f
    314a:	a8 a1       	ldd	r26, Y+32	; 0x20
    314c:	b9 a1       	ldd	r27, Y+33	; 0x21
    314e:	68 94       	set
    3150:	16 f8       	bld	r1, 6
    3152:	76 95       	lsr	r23
    3154:	67 95       	ror	r22
    3156:	57 95       	ror	r21
    3158:	47 95       	ror	r20
    315a:	16 94       	lsr	r1
    315c:	d1 f7       	brne	.-12     	; 0x3152 <get_fat+0x12c>
    315e:	48 0f       	add	r20, r24
    3160:	59 1f       	adc	r21, r25
    3162:	6a 1f       	adc	r22, r26
    3164:	7b 1f       	adc	r23, r27
    3166:	ce 01       	movw	r24, r28
    3168:	a4 da       	rcall	.-2744   	; 0x26b2 <move_window>
    316a:	81 11       	cpse	r24, r1
    316c:	4d c0       	rjmp	.+154    	; 0x3208 <get_fat+0x1e2>
    316e:	cc 0c       	add	r12, r12
    3170:	dd 1c       	adc	r13, r13
    3172:	ee 1c       	adc	r14, r14
    3174:	ff 1c       	adc	r15, r15
    3176:	cc 0c       	add	r12, r12
    3178:	dd 1c       	adc	r13, r13
    317a:	ee 1c       	adc	r14, r14
    317c:	ff 1c       	adc	r15, r15
    317e:	8c ef       	ldi	r24, 0xFC	; 252
    3180:	c8 22       	and	r12, r24
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	d8 22       	and	r13, r24
    3186:	ee 24       	eor	r14, r14
    3188:	ff 24       	eor	r15, r15
    318a:	f6 01       	movw	r30, r12
    318c:	be 96       	adiw	r30, 0x2e	; 46
    318e:	ec 0f       	add	r30, r28
    3190:	fd 1f       	adc	r31, r29
    3192:	22 81       	ldd	r18, Z+2	; 0x02
    3194:	63 81       	ldd	r22, Z+3	; 0x03
    3196:	86 2f       	mov	r24, r22
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a0 e0       	ldi	r26, 0x00	; 0
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	b8 2f       	mov	r27, r24
    31a0:	aa 27       	eor	r26, r26
    31a2:	99 27       	eor	r25, r25
    31a4:	88 27       	eor	r24, r24
    31a6:	ac 01       	movw	r20, r24
    31a8:	bd 01       	movw	r22, r26
    31aa:	62 2b       	or	r22, r18
    31ac:	81 81       	ldd	r24, Z+1	; 0x01
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	98 2f       	mov	r25, r24
    31b2:	88 27       	eor	r24, r24
    31b4:	a0 e0       	ldi	r26, 0x00	; 0
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	84 2b       	or	r24, r20
    31ba:	95 2b       	or	r25, r21
    31bc:	a6 2b       	or	r26, r22
    31be:	b7 2b       	or	r27, r23
    31c0:	fe 01       	movw	r30, r28
    31c2:	ec 0d       	add	r30, r12
    31c4:	fd 1d       	adc	r31, r13
    31c6:	26 a5       	ldd	r18, Z+46	; 0x2e
    31c8:	82 2b       	or	r24, r18
    31ca:	bc 01       	movw	r22, r24
    31cc:	cd 01       	movw	r24, r26
    31ce:	9f 70       	andi	r25, 0x0F	; 15
    31d0:	1e c0       	rjmp	.+60     	; 0x320e <get_fat+0x1e8>
    31d2:	61 e0       	ldi	r22, 0x01	; 1
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	19 c0       	rjmp	.+50     	; 0x320e <get_fat+0x1e8>
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	14 c0       	rjmp	.+40     	; 0x320e <get_fat+0x1e8>
    31e6:	61 e0       	ldi	r22, 0x01	; 1
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <get_fat+0x1e8>
    31f0:	6f ef       	ldi	r22, 0xFF	; 255
    31f2:	7f ef       	ldi	r23, 0xFF	; 255
    31f4:	cb 01       	movw	r24, r22
    31f6:	0b c0       	rjmp	.+22     	; 0x320e <get_fat+0x1e8>
    31f8:	6f ef       	ldi	r22, 0xFF	; 255
    31fa:	7f ef       	ldi	r23, 0xFF	; 255
    31fc:	cb 01       	movw	r24, r22
    31fe:	07 c0       	rjmp	.+14     	; 0x320e <get_fat+0x1e8>
    3200:	6f ef       	ldi	r22, 0xFF	; 255
    3202:	7f ef       	ldi	r23, 0xFF	; 255
    3204:	cb 01       	movw	r24, r22
    3206:	03 c0       	rjmp	.+6      	; 0x320e <get_fat+0x1e8>
    3208:	6f ef       	ldi	r22, 0xFF	; 255
    320a:	7f ef       	ldi	r23, 0xFF	; 255
    320c:	cb 01       	movw	r24, r22
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	1f 91       	pop	r17
    3214:	0f 91       	pop	r16
    3216:	ff 90       	pop	r15
    3218:	ef 90       	pop	r14
    321a:	df 90       	pop	r13
    321c:	cf 90       	pop	r12
    321e:	bf 90       	pop	r11
    3220:	af 90       	pop	r10
    3222:	08 95       	ret

00003224 <dir_sdi>:
    3224:	af 92       	push	r10
    3226:	bf 92       	push	r11
    3228:	cf 92       	push	r12
    322a:	df 92       	push	r13
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	ec 01       	movw	r28, r24
    323a:	8b 01       	movw	r16, r22
    323c:	7d 83       	std	Y+5, r23	; 0x05
    323e:	6c 83       	std	Y+4, r22	; 0x04
    3240:	ce 80       	ldd	r12, Y+6	; 0x06
    3242:	df 80       	ldd	r13, Y+7	; 0x07
    3244:	e8 84       	ldd	r14, Y+8	; 0x08
    3246:	f9 84       	ldd	r15, Y+9	; 0x09
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	c8 16       	cp	r12, r24
    324c:	d1 04       	cpc	r13, r1
    324e:	e1 04       	cpc	r14, r1
    3250:	f1 04       	cpc	r15, r1
    3252:	09 f4       	brne	.+2      	; 0x3256 <dir_sdi+0x32>
    3254:	8a c0       	rjmp	.+276    	; 0x336a <dir_sdi+0x146>
    3256:	e8 81       	ld	r30, Y
    3258:	f9 81       	ldd	r31, Y+1	; 0x01
    325a:	82 89       	ldd	r24, Z+18	; 0x12
    325c:	93 89       	ldd	r25, Z+19	; 0x13
    325e:	a4 89       	ldd	r26, Z+20	; 0x14
    3260:	b5 89       	ldd	r27, Z+21	; 0x15
    3262:	c8 16       	cp	r12, r24
    3264:	d9 06       	cpc	r13, r25
    3266:	ea 06       	cpc	r14, r26
    3268:	fb 06       	cpc	r15, r27
    326a:	08 f0       	brcs	.+2      	; 0x326e <dir_sdi+0x4a>
    326c:	80 c0       	rjmp	.+256    	; 0x336e <dir_sdi+0x14a>
    326e:	c1 14       	cp	r12, r1
    3270:	d1 04       	cpc	r13, r1
    3272:	e1 04       	cpc	r14, r1
    3274:	f1 04       	cpc	r15, r1
    3276:	c1 f4       	brne	.+48     	; 0x32a8 <dir_sdi+0x84>
    3278:	80 81       	ld	r24, Z
    327a:	83 30       	cpi	r24, 0x03	; 3
    327c:	41 f4       	brne	.+16     	; 0x328e <dir_sdi+0x6a>
    327e:	82 a1       	ldd	r24, Z+34	; 0x22
    3280:	93 a1       	ldd	r25, Z+35	; 0x23
    3282:	a4 a1       	ldd	r26, Z+36	; 0x24
    3284:	b5 a1       	ldd	r27, Z+37	; 0x25
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	a1 05       	cpc	r26, r1
    328a:	b1 05       	cpc	r27, r1
    328c:	59 f4       	brne	.+22     	; 0x32a4 <dir_sdi+0x80>
    328e:	80 85       	ldd	r24, Z+8	; 0x08
    3290:	91 85       	ldd	r25, Z+9	; 0x09
    3292:	08 17       	cp	r16, r24
    3294:	19 07       	cpc	r17, r25
    3296:	08 f0       	brcs	.+2      	; 0x329a <dir_sdi+0x76>
    3298:	6c c0       	rjmp	.+216    	; 0x3372 <dir_sdi+0x14e>
    329a:	62 a1       	ldd	r22, Z+34	; 0x22
    329c:	73 a1       	ldd	r23, Z+35	; 0x23
    329e:	84 a1       	ldd	r24, Z+36	; 0x24
    32a0:	95 a1       	ldd	r25, Z+37	; 0x25
    32a2:	35 c0       	rjmp	.+106    	; 0x330e <dir_sdi+0xea>
    32a4:	6c 01       	movw	r12, r24
    32a6:	7d 01       	movw	r14, r26
    32a8:	a2 80       	ldd	r10, Z+2	; 0x02
    32aa:	80 e1       	ldi	r24, 0x10	; 16
    32ac:	a8 9e       	mul	r10, r24
    32ae:	50 01       	movw	r10, r0
    32b0:	11 24       	eor	r1, r1
    32b2:	0a 15       	cp	r16, r10
    32b4:	1b 05       	cpc	r17, r11
    32b6:	30 f1       	brcs	.+76     	; 0x3304 <dir_sdi+0xe0>
    32b8:	b7 01       	movw	r22, r14
    32ba:	a6 01       	movw	r20, r12
    32bc:	88 81       	ld	r24, Y
    32be:	99 81       	ldd	r25, Y+1	; 0x01
    32c0:	b2 de       	rcall	.-668    	; 0x3026 <get_fat>
    32c2:	6b 01       	movw	r12, r22
    32c4:	7c 01       	movw	r14, r24
    32c6:	8f ef       	ldi	r24, 0xFF	; 255
    32c8:	c8 16       	cp	r12, r24
    32ca:	d8 06       	cpc	r13, r24
    32cc:	e8 06       	cpc	r14, r24
    32ce:	f8 06       	cpc	r15, r24
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <dir_sdi+0xb0>
    32d2:	51 c0       	rjmp	.+162    	; 0x3376 <dir_sdi+0x152>
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	c8 16       	cp	r12, r24
    32d8:	d1 04       	cpc	r13, r1
    32da:	e1 04       	cpc	r14, r1
    32dc:	f1 04       	cpc	r15, r1
    32de:	08 f4       	brcc	.+2      	; 0x32e2 <dir_sdi+0xbe>
    32e0:	4c c0       	rjmp	.+152    	; 0x337a <dir_sdi+0x156>
    32e2:	e8 81       	ld	r30, Y
    32e4:	f9 81       	ldd	r31, Y+1	; 0x01
    32e6:	82 89       	ldd	r24, Z+18	; 0x12
    32e8:	93 89       	ldd	r25, Z+19	; 0x13
    32ea:	a4 89       	ldd	r26, Z+20	; 0x14
    32ec:	b5 89       	ldd	r27, Z+21	; 0x15
    32ee:	c8 16       	cp	r12, r24
    32f0:	d9 06       	cpc	r13, r25
    32f2:	ea 06       	cpc	r14, r26
    32f4:	fb 06       	cpc	r15, r27
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <dir_sdi+0xd6>
    32f8:	42 c0       	rjmp	.+132    	; 0x337e <dir_sdi+0x15a>
    32fa:	0a 19       	sub	r16, r10
    32fc:	1b 09       	sbc	r17, r11
    32fe:	0a 15       	cp	r16, r10
    3300:	1b 05       	cpc	r17, r11
    3302:	d0 f6       	brcc	.-76     	; 0x32b8 <dir_sdi+0x94>
    3304:	b7 01       	movw	r22, r14
    3306:	a6 01       	movw	r20, r12
    3308:	88 81       	ld	r24, Y
    330a:	99 81       	ldd	r25, Y+1	; 0x01
    330c:	5e de       	rcall	.-836    	; 0x2fca <clust2sect>
    330e:	ca 86       	std	Y+10, r12	; 0x0a
    3310:	db 86       	std	Y+11, r13	; 0x0b
    3312:	ec 86       	std	Y+12, r14	; 0x0c
    3314:	fd 86       	std	Y+13, r15	; 0x0d
    3316:	61 15       	cp	r22, r1
    3318:	71 05       	cpc	r23, r1
    331a:	81 05       	cpc	r24, r1
    331c:	91 05       	cpc	r25, r1
    331e:	89 f1       	breq	.+98     	; 0x3382 <dir_sdi+0x15e>
    3320:	98 01       	movw	r18, r16
    3322:	32 95       	swap	r19
    3324:	22 95       	swap	r18
    3326:	2f 70       	andi	r18, 0x0F	; 15
    3328:	23 27       	eor	r18, r19
    332a:	3f 70       	andi	r19, 0x0F	; 15
    332c:	23 27       	eor	r18, r19
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	82 0f       	add	r24, r18
    3334:	93 1f       	adc	r25, r19
    3336:	a1 1d       	adc	r26, r1
    3338:	b1 1d       	adc	r27, r1
    333a:	8e 87       	std	Y+14, r24	; 0x0e
    333c:	9f 87       	std	Y+15, r25	; 0x0f
    333e:	a8 8b       	std	Y+16, r26	; 0x10
    3340:	b9 8b       	std	Y+17, r27	; 0x11
    3342:	0f 70       	andi	r16, 0x0F	; 15
    3344:	11 27       	eor	r17, r17
    3346:	00 0f       	add	r16, r16
    3348:	11 1f       	adc	r17, r17
    334a:	02 95       	swap	r16
    334c:	12 95       	swap	r17
    334e:	10 7f       	andi	r17, 0xF0	; 240
    3350:	10 27       	eor	r17, r16
    3352:	00 7f       	andi	r16, 0xF0	; 240
    3354:	10 27       	eor	r17, r16
    3356:	02 5d       	subi	r16, 0xD2	; 210
    3358:	1f 4f       	sbci	r17, 0xFF	; 255
    335a:	88 81       	ld	r24, Y
    335c:	99 81       	ldd	r25, Y+1	; 0x01
    335e:	80 0f       	add	r24, r16
    3360:	91 1f       	adc	r25, r17
    3362:	9b 8b       	std	Y+19, r25	; 0x13
    3364:	8a 8b       	std	Y+18, r24	; 0x12
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	0d c0       	rjmp	.+26     	; 0x3384 <dir_sdi+0x160>
    336a:	82 e0       	ldi	r24, 0x02	; 2
    336c:	0b c0       	rjmp	.+22     	; 0x3384 <dir_sdi+0x160>
    336e:	82 e0       	ldi	r24, 0x02	; 2
    3370:	09 c0       	rjmp	.+18     	; 0x3384 <dir_sdi+0x160>
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	07 c0       	rjmp	.+14     	; 0x3384 <dir_sdi+0x160>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	05 c0       	rjmp	.+10     	; 0x3384 <dir_sdi+0x160>
    337a:	82 e0       	ldi	r24, 0x02	; 2
    337c:	03 c0       	rjmp	.+6      	; 0x3384 <dir_sdi+0x160>
    337e:	82 e0       	ldi	r24, 0x02	; 2
    3380:	01 c0       	rjmp	.+2      	; 0x3384 <dir_sdi+0x160>
    3382:	82 e0       	ldi	r24, 0x02	; 2
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	ff 90       	pop	r15
    338e:	ef 90       	pop	r14
    3390:	df 90       	pop	r13
    3392:	cf 90       	pop	r12
    3394:	bf 90       	pop	r11
    3396:	af 90       	pop	r10
    3398:	08 95       	ret

0000339a <put_fat>:
    339a:	4f 92       	push	r4
    339c:	5f 92       	push	r5
    339e:	6f 92       	push	r6
    33a0:	7f 92       	push	r7
    33a2:	8f 92       	push	r8
    33a4:	9f 92       	push	r9
    33a6:	af 92       	push	r10
    33a8:	bf 92       	push	r11
    33aa:	cf 92       	push	r12
    33ac:	df 92       	push	r13
    33ae:	ef 92       	push	r14
    33b0:	ff 92       	push	r15
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	ec 01       	movw	r28, r24
    33bc:	6a 01       	movw	r12, r20
    33be:	7b 01       	movw	r14, r22
    33c0:	28 01       	movw	r4, r16
    33c2:	39 01       	movw	r6, r18
    33c4:	42 30       	cpi	r20, 0x02	; 2
    33c6:	51 05       	cpc	r21, r1
    33c8:	61 05       	cpc	r22, r1
    33ca:	71 05       	cpc	r23, r1
    33cc:	08 f4       	brcc	.+2      	; 0x33d0 <put_fat+0x36>
    33ce:	d8 c0       	rjmp	.+432    	; 0x3580 <put_fat+0x1e6>
    33d0:	8a 89       	ldd	r24, Y+18	; 0x12
    33d2:	9b 89       	ldd	r25, Y+19	; 0x13
    33d4:	ac 89       	ldd	r26, Y+20	; 0x14
    33d6:	bd 89       	ldd	r27, Y+21	; 0x15
    33d8:	48 17       	cp	r20, r24
    33da:	59 07       	cpc	r21, r25
    33dc:	6a 07       	cpc	r22, r26
    33de:	7b 07       	cpc	r23, r27
    33e0:	08 f0       	brcs	.+2      	; 0x33e4 <put_fat+0x4a>
    33e2:	d0 c0       	rjmp	.+416    	; 0x3584 <put_fat+0x1ea>
    33e4:	88 81       	ld	r24, Y
    33e6:	82 30       	cpi	r24, 0x02	; 2
    33e8:	09 f4       	brne	.+2      	; 0x33ec <put_fat+0x52>
    33ea:	62 c0       	rjmp	.+196    	; 0x34b0 <put_fat+0x116>
    33ec:	83 30       	cpi	r24, 0x03	; 3
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <put_fat+0x58>
    33f0:	85 c0       	rjmp	.+266    	; 0x34fc <put_fat+0x162>
    33f2:	81 30       	cpi	r24, 0x01	; 1
    33f4:	09 f0       	breq	.+2      	; 0x33f8 <put_fat+0x5e>
    33f6:	c8 c0       	rjmp	.+400    	; 0x3588 <put_fat+0x1ee>
    33f8:	5a 01       	movw	r10, r20
    33fa:	b6 94       	lsr	r11
    33fc:	a7 94       	ror	r10
    33fe:	a4 0e       	add	r10, r20
    3400:	b5 1e       	adc	r11, r21
    3402:	c5 01       	movw	r24, r10
    3404:	89 2f       	mov	r24, r25
    3406:	99 27       	eor	r25, r25
    3408:	86 95       	lsr	r24
    340a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    340c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    340e:	68 a1       	ldd	r22, Y+32	; 0x20
    3410:	79 a1       	ldd	r23, Y+33	; 0x21
    3412:	48 0f       	add	r20, r24
    3414:	59 1f       	adc	r21, r25
    3416:	61 1d       	adc	r22, r1
    3418:	71 1d       	adc	r23, r1
    341a:	ce 01       	movw	r24, r28
    341c:	4a d9       	rcall	.-3436   	; 0x26b2 <move_window>
    341e:	18 2f       	mov	r17, r24
    3420:	81 11       	cpse	r24, r1
    3422:	d0 c0       	rjmp	.+416    	; 0x35c4 <put_fat+0x22a>
    3424:	45 01       	movw	r8, r10
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	88 1a       	sub	r8, r24
    342a:	98 0a       	sbc	r9, r24
    342c:	a1 e0       	ldi	r26, 0x01	; 1
    342e:	ba 22       	and	r11, r26
    3430:	c0 fe       	sbrs	r12, 0
    3432:	20 c0       	rjmp	.+64     	; 0x3474 <put_fat+0xda>
    3434:	fe 01       	movw	r30, r28
    3436:	ea 0d       	add	r30, r10
    3438:	fb 1d       	adc	r31, r11
    343a:	86 a5       	ldd	r24, Z+46	; 0x2e
    343c:	28 2f       	mov	r18, r24
    343e:	2f 70       	andi	r18, 0x0F	; 15
    3440:	b0 e1       	ldi	r27, 0x10	; 16
    3442:	4b 9e       	mul	r4, r27
    3444:	c0 01       	movw	r24, r0
    3446:	11 24       	eor	r1, r1
    3448:	82 2b       	or	r24, r18
    344a:	86 a7       	std	Z+46, r24	; 0x2e
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	8c 83       	std	Y+4, r24	; 0x04
    3450:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3452:	5f 8d       	ldd	r21, Y+31	; 0x1f
    3454:	68 a1       	ldd	r22, Y+32	; 0x20
    3456:	79 a1       	ldd	r23, Y+33	; 0x21
    3458:	c4 01       	movw	r24, r8
    345a:	89 2f       	mov	r24, r25
    345c:	99 27       	eor	r25, r25
    345e:	86 95       	lsr	r24
    3460:	48 0f       	add	r20, r24
    3462:	59 1f       	adc	r21, r25
    3464:	61 1d       	adc	r22, r1
    3466:	71 1d       	adc	r23, r1
    3468:	ce 01       	movw	r24, r28
    346a:	23 d9       	rcall	.-3514   	; 0x26b2 <move_window>
    346c:	88 23       	and	r24, r24
    346e:	09 f4       	brne	.+2      	; 0x3472 <put_fat+0xd8>
    3470:	91 c0       	rjmp	.+290    	; 0x3594 <put_fat+0x1fa>
    3472:	8c c0       	rjmp	.+280    	; 0x358c <put_fat+0x1f2>
    3474:	fe 01       	movw	r30, r28
    3476:	ea 0d       	add	r30, r10
    3478:	fb 1d       	adc	r31, r11
    347a:	46 a6       	std	Z+46, r4	; 0x2e
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	8c 83       	std	Y+4, r24	; 0x04
    3480:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3482:	5f 8d       	ldd	r21, Y+31	; 0x1f
    3484:	68 a1       	ldd	r22, Y+32	; 0x20
    3486:	79 a1       	ldd	r23, Y+33	; 0x21
    3488:	c4 01       	movw	r24, r8
    348a:	89 2f       	mov	r24, r25
    348c:	99 27       	eor	r25, r25
    348e:	86 95       	lsr	r24
    3490:	48 0f       	add	r20, r24
    3492:	59 1f       	adc	r21, r25
    3494:	61 1d       	adc	r22, r1
    3496:	71 1d       	adc	r23, r1
    3498:	ce 01       	movw	r24, r28
    349a:	0b d9       	rcall	.-3562   	; 0x26b2 <move_window>
    349c:	88 23       	and	r24, r24
    349e:	09 f4       	brne	.+2      	; 0x34a2 <put_fat+0x108>
    34a0:	84 c0       	rjmp	.+264    	; 0x35aa <put_fat+0x210>
    34a2:	76 c0       	rjmp	.+236    	; 0x3590 <put_fat+0x1f6>
    34a4:	ec 0f       	add	r30, r28
    34a6:	fd 1f       	adc	r31, r29
    34a8:	46 a6       	std	Z+46, r4	; 0x2e
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	8c 83       	std	Y+4, r24	; 0x04
    34ae:	8a c0       	rjmp	.+276    	; 0x35c4 <put_fat+0x22a>
    34b0:	45 2f       	mov	r20, r21
    34b2:	56 2f       	mov	r21, r22
    34b4:	67 2f       	mov	r22, r23
    34b6:	77 27       	eor	r23, r23
    34b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34bc:	a8 a1       	ldd	r26, Y+32	; 0x20
    34be:	b9 a1       	ldd	r27, Y+33	; 0x21
    34c0:	48 0f       	add	r20, r24
    34c2:	59 1f       	adc	r21, r25
    34c4:	6a 1f       	adc	r22, r26
    34c6:	7b 1f       	adc	r23, r27
    34c8:	ce 01       	movw	r24, r28
    34ca:	f3 d8       	rcall	.-3610   	; 0x26b2 <move_window>
    34cc:	18 2f       	mov	r17, r24
    34ce:	81 11       	cpse	r24, r1
    34d0:	79 c0       	rjmp	.+242    	; 0x35c4 <put_fat+0x22a>
    34d2:	cc 0c       	add	r12, r12
    34d4:	dd 1c       	adc	r13, r13
    34d6:	ee 1c       	adc	r14, r14
    34d8:	ff 1c       	adc	r15, r15
    34da:	e8 94       	clt
    34dc:	c0 f8       	bld	r12, 0
    34de:	31 e0       	ldi	r19, 0x01	; 1
    34e0:	d3 22       	and	r13, r19
    34e2:	ee 24       	eor	r14, r14
    34e4:	ff 24       	eor	r15, r15
    34e6:	fe 01       	movw	r30, r28
    34e8:	ec 0d       	add	r30, r12
    34ea:	fd 1d       	adc	r31, r13
    34ec:	46 a6       	std	Z+46, r4	; 0x2e
    34ee:	fe 01       	movw	r30, r28
    34f0:	ec 0d       	add	r30, r12
    34f2:	fd 1d       	adc	r31, r13
    34f4:	57 a6       	std	Z+47, r5	; 0x2f
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	8c 83       	std	Y+4, r24	; 0x04
    34fa:	64 c0       	rjmp	.+200    	; 0x35c4 <put_fat+0x22a>
    34fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3500:	a8 a1       	ldd	r26, Y+32	; 0x20
    3502:	b9 a1       	ldd	r27, Y+33	; 0x21
    3504:	68 94       	set
    3506:	16 f8       	bld	r1, 6
    3508:	76 95       	lsr	r23
    350a:	67 95       	ror	r22
    350c:	57 95       	ror	r21
    350e:	47 95       	ror	r20
    3510:	16 94       	lsr	r1
    3512:	d1 f7       	brne	.-12     	; 0x3508 <put_fat+0x16e>
    3514:	48 0f       	add	r20, r24
    3516:	59 1f       	adc	r21, r25
    3518:	6a 1f       	adc	r22, r26
    351a:	7b 1f       	adc	r23, r27
    351c:	ce 01       	movw	r24, r28
    351e:	c9 d8       	rcall	.-3694   	; 0x26b2 <move_window>
    3520:	18 2f       	mov	r17, r24
    3522:	81 11       	cpse	r24, r1
    3524:	4f c0       	rjmp	.+158    	; 0x35c4 <put_fat+0x22a>
    3526:	cc 0c       	add	r12, r12
    3528:	dd 1c       	adc	r13, r13
    352a:	ee 1c       	adc	r14, r14
    352c:	ff 1c       	adc	r15, r15
    352e:	cc 0c       	add	r12, r12
    3530:	dd 1c       	adc	r13, r13
    3532:	ee 1c       	adc	r14, r14
    3534:	ff 1c       	adc	r15, r15
    3536:	8c ef       	ldi	r24, 0xFC	; 252
    3538:	c8 22       	and	r12, r24
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	d8 22       	and	r13, r24
    353e:	ee 24       	eor	r14, r14
    3540:	ff 24       	eor	r15, r15
    3542:	f6 01       	movw	r30, r12
    3544:	be 96       	adiw	r30, 0x2e	; 46
    3546:	ec 0f       	add	r30, r28
    3548:	fd 1f       	adc	r31, r29
    354a:	83 81       	ldd	r24, Z+3	; 0x03
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	a0 e0       	ldi	r26, 0x00	; 0
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	b8 2f       	mov	r27, r24
    3554:	aa 27       	eor	r26, r26
    3556:	99 27       	eor	r25, r25
    3558:	88 27       	eor	r24, r24
    355a:	cc 0e       	add	r12, r28
    355c:	dd 1e       	adc	r13, r29
    355e:	88 27       	eor	r24, r24
    3560:	99 27       	eor	r25, r25
    3562:	aa 27       	eor	r26, r26
    3564:	b0 7f       	andi	r27, 0xF0	; 240
    3566:	48 2a       	or	r4, r24
    3568:	59 2a       	or	r5, r25
    356a:	6a 2a       	or	r6, r26
    356c:	7b 2a       	or	r7, r27
    356e:	d6 01       	movw	r26, r12
    3570:	9e 96       	adiw	r26, 0x2e	; 46
    3572:	4c 92       	st	X, r4
    3574:	51 82       	std	Z+1, r5	; 0x01
    3576:	62 82       	std	Z+2, r6	; 0x02
    3578:	73 82       	std	Z+3, r7	; 0x03
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	8c 83       	std	Y+4, r24	; 0x04
    357e:	22 c0       	rjmp	.+68     	; 0x35c4 <put_fat+0x22a>
    3580:	12 e0       	ldi	r17, 0x02	; 2
    3582:	20 c0       	rjmp	.+64     	; 0x35c4 <put_fat+0x22a>
    3584:	12 e0       	ldi	r17, 0x02	; 2
    3586:	1e c0       	rjmp	.+60     	; 0x35c4 <put_fat+0x22a>
    3588:	12 e0       	ldi	r17, 0x02	; 2
    358a:	1c c0       	rjmp	.+56     	; 0x35c4 <put_fat+0x22a>
    358c:	18 2f       	mov	r17, r24
    358e:	1a c0       	rjmp	.+52     	; 0x35c4 <put_fat+0x22a>
    3590:	18 2f       	mov	r17, r24
    3592:	18 c0       	rjmp	.+48     	; 0x35c4 <put_fat+0x22a>
    3594:	f4 01       	movw	r30, r8
    3596:	f1 70       	andi	r31, 0x01	; 1
    3598:	68 94       	set
    359a:	13 f8       	bld	r1, 3
    359c:	76 94       	lsr	r7
    359e:	67 94       	ror	r6
    35a0:	57 94       	ror	r5
    35a2:	47 94       	ror	r4
    35a4:	16 94       	lsr	r1
    35a6:	d1 f7       	brne	.-12     	; 0x359c <put_fat+0x202>
    35a8:	7d cf       	rjmp	.-262    	; 0x34a4 <put_fat+0x10a>
    35aa:	f4 01       	movw	r30, r8
    35ac:	f1 70       	andi	r31, 0x01	; 1
    35ae:	de 01       	movw	r26, r28
    35b0:	ae 0f       	add	r26, r30
    35b2:	bf 1f       	adc	r27, r31
    35b4:	9e 96       	adiw	r26, 0x2e	; 46
    35b6:	9c 91       	ld	r25, X
    35b8:	90 7f       	andi	r25, 0xF0	; 240
    35ba:	85 2d       	mov	r24, r5
    35bc:	8f 70       	andi	r24, 0x0F	; 15
    35be:	49 2e       	mov	r4, r25
    35c0:	48 2a       	or	r4, r24
    35c2:	70 cf       	rjmp	.-288    	; 0x34a4 <put_fat+0x10a>
    35c4:	81 2f       	mov	r24, r17
    35c6:	df 91       	pop	r29
    35c8:	cf 91       	pop	r28
    35ca:	1f 91       	pop	r17
    35cc:	0f 91       	pop	r16
    35ce:	ff 90       	pop	r15
    35d0:	ef 90       	pop	r14
    35d2:	df 90       	pop	r13
    35d4:	cf 90       	pop	r12
    35d6:	bf 90       	pop	r11
    35d8:	af 90       	pop	r10
    35da:	9f 90       	pop	r9
    35dc:	8f 90       	pop	r8
    35de:	7f 90       	pop	r7
    35e0:	6f 90       	pop	r6
    35e2:	5f 90       	pop	r5
    35e4:	4f 90       	pop	r4
    35e6:	08 95       	ret

000035e8 <create_chain>:
    35e8:	2f 92       	push	r2
    35ea:	3f 92       	push	r3
    35ec:	4f 92       	push	r4
    35ee:	5f 92       	push	r5
    35f0:	6f 92       	push	r6
    35f2:	7f 92       	push	r7
    35f4:	8f 92       	push	r8
    35f6:	9f 92       	push	r9
    35f8:	af 92       	push	r10
    35fa:	bf 92       	push	r11
    35fc:	cf 92       	push	r12
    35fe:	df 92       	push	r13
    3600:	ef 92       	push	r14
    3602:	ff 92       	push	r15
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	ec 01       	movw	r28, r24
    360e:	2a 01       	movw	r4, r20
    3610:	3b 01       	movw	r6, r22
    3612:	41 15       	cp	r20, r1
    3614:	51 05       	cpc	r21, r1
    3616:	61 05       	cpc	r22, r1
    3618:	71 05       	cpc	r23, r1
    361a:	b9 f4       	brne	.+46     	; 0x364a <create_chain+0x62>
    361c:	8a 84       	ldd	r8, Y+10	; 0x0a
    361e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3620:	ac 84       	ldd	r10, Y+12	; 0x0c
    3622:	bd 84       	ldd	r11, Y+13	; 0x0d
    3624:	81 14       	cp	r8, r1
    3626:	91 04       	cpc	r9, r1
    3628:	a1 04       	cpc	r10, r1
    362a:	b1 04       	cpc	r11, r1
    362c:	59 f1       	breq	.+86     	; 0x3684 <create_chain+0x9c>
    362e:	8a 89       	ldd	r24, Y+18	; 0x12
    3630:	9b 89       	ldd	r25, Y+19	; 0x13
    3632:	ac 89       	ldd	r26, Y+20	; 0x14
    3634:	bd 89       	ldd	r27, Y+21	; 0x15
    3636:	88 16       	cp	r8, r24
    3638:	99 06       	cpc	r9, r25
    363a:	aa 06       	cpc	r10, r26
    363c:	bb 06       	cpc	r11, r27
    363e:	30 f1       	brcs	.+76     	; 0x368c <create_chain+0xa4>
    3640:	81 2c       	mov	r8, r1
    3642:	91 2c       	mov	r9, r1
    3644:	54 01       	movw	r10, r8
    3646:	83 94       	inc	r8
    3648:	21 c0       	rjmp	.+66     	; 0x368c <create_chain+0xa4>
    364a:	ed dc       	rcall	.-1574   	; 0x3026 <get_fat>
    364c:	6b 01       	movw	r12, r22
    364e:	7c 01       	movw	r14, r24
    3650:	62 30       	cpi	r22, 0x02	; 2
    3652:	71 05       	cpc	r23, r1
    3654:	81 05       	cpc	r24, r1
    3656:	91 05       	cpc	r25, r1
    3658:	08 f4       	brcc	.+2      	; 0x365c <create_chain+0x74>
    365a:	96 c0       	rjmp	.+300    	; 0x3788 <create_chain+0x1a0>
    365c:	8f ef       	ldi	r24, 0xFF	; 255
    365e:	c8 16       	cp	r12, r24
    3660:	d8 06       	cpc	r13, r24
    3662:	e8 06       	cpc	r14, r24
    3664:	f8 06       	cpc	r15, r24
    3666:	09 f4       	brne	.+2      	; 0x366a <create_chain+0x82>
    3668:	94 c0       	rjmp	.+296    	; 0x3792 <create_chain+0x1aa>
    366a:	8a 89       	ldd	r24, Y+18	; 0x12
    366c:	9b 89       	ldd	r25, Y+19	; 0x13
    366e:	ac 89       	ldd	r26, Y+20	; 0x14
    3670:	bd 89       	ldd	r27, Y+21	; 0x15
    3672:	c8 16       	cp	r12, r24
    3674:	d9 06       	cpc	r13, r25
    3676:	ea 06       	cpc	r14, r26
    3678:	fb 06       	cpc	r15, r27
    367a:	08 f4       	brcc	.+2      	; 0x367e <create_chain+0x96>
    367c:	8f c0       	rjmp	.+286    	; 0x379c <create_chain+0x1b4>
    367e:	53 01       	movw	r10, r6
    3680:	42 01       	movw	r8, r4
    3682:	04 c0       	rjmp	.+8      	; 0x368c <create_chain+0xa4>
    3684:	81 2c       	mov	r8, r1
    3686:	91 2c       	mov	r9, r1
    3688:	54 01       	movw	r10, r8
    368a:	83 94       	inc	r8
    368c:	75 01       	movw	r14, r10
    368e:	64 01       	movw	r12, r8
    3690:	68 94       	set
    3692:	22 24       	eor	r2, r2
    3694:	21 f8       	bld	r2, 1
    3696:	31 2c       	mov	r3, r1
    3698:	00 e0       	ldi	r16, 0x00	; 0
    369a:	10 e0       	ldi	r17, 0x00	; 0
    369c:	2f ef       	ldi	r18, 0xFF	; 255
    369e:	c2 1a       	sub	r12, r18
    36a0:	d2 0a       	sbc	r13, r18
    36a2:	e2 0a       	sbc	r14, r18
    36a4:	f2 0a       	sbc	r15, r18
    36a6:	8a 89       	ldd	r24, Y+18	; 0x12
    36a8:	9b 89       	ldd	r25, Y+19	; 0x13
    36aa:	ac 89       	ldd	r26, Y+20	; 0x14
    36ac:	bd 89       	ldd	r27, Y+21	; 0x15
    36ae:	c8 16       	cp	r12, r24
    36b0:	d9 06       	cpc	r13, r25
    36b2:	ea 06       	cpc	r14, r26
    36b4:	fb 06       	cpc	r15, r27
    36b6:	58 f0       	brcs	.+22     	; 0x36ce <create_chain+0xe6>
    36b8:	82 e0       	ldi	r24, 0x02	; 2
    36ba:	88 16       	cp	r8, r24
    36bc:	91 04       	cpc	r9, r1
    36be:	a1 04       	cpc	r10, r1
    36c0:	b1 04       	cpc	r11, r1
    36c2:	08 f4       	brcc	.+2      	; 0x36c6 <create_chain+0xde>
    36c4:	70 c0       	rjmp	.+224    	; 0x37a6 <create_chain+0x1be>
    36c6:	c2 2c       	mov	r12, r2
    36c8:	d3 2c       	mov	r13, r3
    36ca:	e0 2e       	mov	r14, r16
    36cc:	f1 2e       	mov	r15, r17
    36ce:	b7 01       	movw	r22, r14
    36d0:	a6 01       	movw	r20, r12
    36d2:	ce 01       	movw	r24, r28
    36d4:	a8 dc       	rcall	.-1712   	; 0x3026 <get_fat>
    36d6:	61 15       	cp	r22, r1
    36d8:	71 05       	cpc	r23, r1
    36da:	81 05       	cpc	r24, r1
    36dc:	91 05       	cpc	r25, r1
    36de:	99 f0       	breq	.+38     	; 0x3706 <create_chain+0x11e>
    36e0:	6f 3f       	cpi	r22, 0xFF	; 255
    36e2:	2f ef       	ldi	r18, 0xFF	; 255
    36e4:	72 07       	cpc	r23, r18
    36e6:	82 07       	cpc	r24, r18
    36e8:	92 07       	cpc	r25, r18
    36ea:	09 f4       	brne	.+2      	; 0x36ee <create_chain+0x106>
    36ec:	61 c0       	rjmp	.+194    	; 0x37b0 <create_chain+0x1c8>
    36ee:	61 30       	cpi	r22, 0x01	; 1
    36f0:	71 05       	cpc	r23, r1
    36f2:	81 05       	cpc	r24, r1
    36f4:	91 05       	cpc	r25, r1
    36f6:	09 f4       	brne	.+2      	; 0x36fa <create_chain+0x112>
    36f8:	60 c0       	rjmp	.+192    	; 0x37ba <create_chain+0x1d2>
    36fa:	c8 14       	cp	r12, r8
    36fc:	d9 04       	cpc	r13, r9
    36fe:	ea 04       	cpc	r14, r10
    3700:	fb 04       	cpc	r15, r11
    3702:	61 f6       	brne	.-104    	; 0x369c <create_chain+0xb4>
    3704:	5f c0       	rjmp	.+190    	; 0x37c4 <create_chain+0x1dc>
    3706:	8c 2c       	mov	r8, r12
    3708:	9d 2c       	mov	r9, r13
    370a:	ae 2c       	mov	r10, r14
    370c:	bf 2c       	mov	r11, r15
    370e:	0f ef       	ldi	r16, 0xFF	; 255
    3710:	1f ef       	ldi	r17, 0xFF	; 255
    3712:	2f ef       	ldi	r18, 0xFF	; 255
    3714:	3f e0       	ldi	r19, 0x0F	; 15
    3716:	b7 01       	movw	r22, r14
    3718:	a6 01       	movw	r20, r12
    371a:	ce 01       	movw	r24, r28
    371c:	3e de       	rcall	.-900    	; 0x339a <put_fat>
    371e:	81 11       	cpse	r24, r1
    3720:	2c c0       	rjmp	.+88     	; 0x377a <create_chain+0x192>
    3722:	41 14       	cp	r4, r1
    3724:	51 04       	cpc	r5, r1
    3726:	61 04       	cpc	r6, r1
    3728:	71 04       	cpc	r7, r1
    372a:	51 f0       	breq	.+20     	; 0x3740 <create_chain+0x158>
    372c:	0c 2d       	mov	r16, r12
    372e:	1d 2d       	mov	r17, r13
    3730:	2e 2d       	mov	r18, r14
    3732:	3f 2d       	mov	r19, r15
    3734:	b3 01       	movw	r22, r6
    3736:	a2 01       	movw	r20, r4
    3738:	ce 01       	movw	r24, r28
    373a:	2f de       	rcall	.-930    	; 0x339a <put_fat>
    373c:	81 11       	cpse	r24, r1
    373e:	1d c0       	rjmp	.+58     	; 0x377a <create_chain+0x192>
    3740:	8a 86       	std	Y+10, r8	; 0x0a
    3742:	9b 86       	std	Y+11, r9	; 0x0b
    3744:	ac 86       	std	Y+12, r10	; 0x0c
    3746:	bd 86       	std	Y+13, r11	; 0x0d
    3748:	8e 85       	ldd	r24, Y+14	; 0x0e
    374a:	9f 85       	ldd	r25, Y+15	; 0x0f
    374c:	a8 89       	ldd	r26, Y+16	; 0x10
    374e:	b9 89       	ldd	r27, Y+17	; 0x11
    3750:	8f 3f       	cpi	r24, 0xFF	; 255
    3752:	2f ef       	ldi	r18, 0xFF	; 255
    3754:	92 07       	cpc	r25, r18
    3756:	a2 07       	cpc	r26, r18
    3758:	b2 07       	cpc	r27, r18
    375a:	c9 f1       	breq	.+114    	; 0x37ce <create_chain+0x1e6>
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	a1 09       	sbc	r26, r1
    3760:	b1 09       	sbc	r27, r1
    3762:	8e 87       	std	Y+14, r24	; 0x0e
    3764:	9f 87       	std	Y+15, r25	; 0x0f
    3766:	a8 8b       	std	Y+16, r26	; 0x10
    3768:	b9 8b       	std	Y+17, r27	; 0x11
    376a:	8d 81       	ldd	r24, Y+5	; 0x05
    376c:	81 60       	ori	r24, 0x01	; 1
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	6c 2d       	mov	r22, r12
    3772:	7d 2d       	mov	r23, r13
    3774:	8e 2d       	mov	r24, r14
    3776:	9f 2d       	mov	r25, r15
    3778:	33 c0       	rjmp	.+102    	; 0x37e0 <create_chain+0x1f8>
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	69 f1       	breq	.+90     	; 0x37d8 <create_chain+0x1f0>
    377e:	61 e0       	ldi	r22, 0x01	; 1
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	2c c0       	rjmp	.+88     	; 0x37e0 <create_chain+0x1f8>
    3788:	61 e0       	ldi	r22, 0x01	; 1
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	27 c0       	rjmp	.+78     	; 0x37e0 <create_chain+0x1f8>
    3792:	6f ef       	ldi	r22, 0xFF	; 255
    3794:	7f ef       	ldi	r23, 0xFF	; 255
    3796:	8f ef       	ldi	r24, 0xFF	; 255
    3798:	9f ef       	ldi	r25, 0xFF	; 255
    379a:	22 c0       	rjmp	.+68     	; 0x37e0 <create_chain+0x1f8>
    379c:	6c 2d       	mov	r22, r12
    379e:	7d 2d       	mov	r23, r13
    37a0:	8e 2d       	mov	r24, r14
    37a2:	9f 2d       	mov	r25, r15
    37a4:	1d c0       	rjmp	.+58     	; 0x37e0 <create_chain+0x1f8>
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	18 c0       	rjmp	.+48     	; 0x37e0 <create_chain+0x1f8>
    37b0:	6f ef       	ldi	r22, 0xFF	; 255
    37b2:	7f ef       	ldi	r23, 0xFF	; 255
    37b4:	8f ef       	ldi	r24, 0xFF	; 255
    37b6:	9f ef       	ldi	r25, 0xFF	; 255
    37b8:	13 c0       	rjmp	.+38     	; 0x37e0 <create_chain+0x1f8>
    37ba:	61 e0       	ldi	r22, 0x01	; 1
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	0e c0       	rjmp	.+28     	; 0x37e0 <create_chain+0x1f8>
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	70 e0       	ldi	r23, 0x00	; 0
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	09 c0       	rjmp	.+18     	; 0x37e0 <create_chain+0x1f8>
    37ce:	6c 2d       	mov	r22, r12
    37d0:	7d 2d       	mov	r23, r13
    37d2:	8e 2d       	mov	r24, r14
    37d4:	9f 2d       	mov	r25, r15
    37d6:	04 c0       	rjmp	.+8      	; 0x37e0 <create_chain+0x1f8>
    37d8:	6f ef       	ldi	r22, 0xFF	; 255
    37da:	7f ef       	ldi	r23, 0xFF	; 255
    37dc:	8f ef       	ldi	r24, 0xFF	; 255
    37de:	9f ef       	ldi	r25, 0xFF	; 255
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	bf 90       	pop	r11
    37f2:	af 90       	pop	r10
    37f4:	9f 90       	pop	r9
    37f6:	8f 90       	pop	r8
    37f8:	7f 90       	pop	r7
    37fa:	6f 90       	pop	r6
    37fc:	5f 90       	pop	r5
    37fe:	4f 90       	pop	r4
    3800:	3f 90       	pop	r3
    3802:	2f 90       	pop	r2
    3804:	08 95       	ret

00003806 <dir_next>:
    3806:	7f 92       	push	r7
    3808:	8f 92       	push	r8
    380a:	9f 92       	push	r9
    380c:	af 92       	push	r10
    380e:	bf 92       	push	r11
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	dc 01       	movw	r26, r24
    3822:	14 96       	adiw	r26, 0x04	; 4
    3824:	cd 91       	ld	r28, X+
    3826:	dc 91       	ld	r29, X
    3828:	15 97       	sbiw	r26, 0x05	; 5
    382a:	21 96       	adiw	r28, 0x01	; 1
    382c:	09 f4       	brne	.+2      	; 0x3830 <dir_next+0x2a>
    382e:	03 c1       	rjmp	.+518    	; 0x3a36 <dir_next+0x230>
    3830:	1e 96       	adiw	r26, 0x0e	; 14
    3832:	8d 90       	ld	r8, X+
    3834:	9d 90       	ld	r9, X+
    3836:	ad 90       	ld	r10, X+
    3838:	bc 90       	ld	r11, X
    383a:	51 97       	sbiw	r26, 0x11	; 17
    383c:	81 14       	cp	r8, r1
    383e:	91 04       	cpc	r9, r1
    3840:	a1 04       	cpc	r10, r1
    3842:	b1 04       	cpc	r11, r1
    3844:	09 f4       	brne	.+2      	; 0x3848 <dir_next+0x42>
    3846:	f9 c0       	rjmp	.+498    	; 0x3a3a <dir_next+0x234>
    3848:	7b 01       	movw	r14, r22
    384a:	8c 01       	movw	r16, r24
    384c:	6e 01       	movw	r12, r28
    384e:	bf e0       	ldi	r27, 0x0F	; 15
    3850:	cb 22       	and	r12, r27
    3852:	dd 24       	eor	r13, r13
    3854:	c1 14       	cp	r12, r1
    3856:	d1 04       	cpc	r13, r1
    3858:	09 f0       	breq	.+2      	; 0x385c <dir_next+0x56>
    385a:	d1 c0       	rjmp	.+418    	; 0x39fe <dir_next+0x1f8>
    385c:	ef ef       	ldi	r30, 0xFF	; 255
    385e:	8e 1a       	sub	r8, r30
    3860:	9e 0a       	sbc	r9, r30
    3862:	ae 0a       	sbc	r10, r30
    3864:	be 0a       	sbc	r11, r30
    3866:	dc 01       	movw	r26, r24
    3868:	1e 96       	adiw	r26, 0x0e	; 14
    386a:	8d 92       	st	X+, r8
    386c:	9d 92       	st	X+, r9
    386e:	ad 92       	st	X+, r10
    3870:	bc 92       	st	X, r11
    3872:	51 97       	sbiw	r26, 0x11	; 17
    3874:	1a 96       	adiw	r26, 0x0a	; 10
    3876:	4d 91       	ld	r20, X+
    3878:	5d 91       	ld	r21, X+
    387a:	6d 91       	ld	r22, X+
    387c:	7c 91       	ld	r23, X
    387e:	1d 97       	sbiw	r26, 0x0d	; 13
    3880:	41 15       	cp	r20, r1
    3882:	51 05       	cpc	r21, r1
    3884:	61 05       	cpc	r22, r1
    3886:	71 05       	cpc	r23, r1
    3888:	49 f4       	brne	.+18     	; 0x389c <dir_next+0x96>
    388a:	ed 91       	ld	r30, X+
    388c:	fc 91       	ld	r31, X
    388e:	80 85       	ldd	r24, Z+8	; 0x08
    3890:	91 85       	ldd	r25, Z+9	; 0x09
    3892:	c8 17       	cp	r28, r24
    3894:	d9 07       	cpc	r29, r25
    3896:	08 f0       	brcs	.+2      	; 0x389a <dir_next+0x94>
    3898:	d2 c0       	rjmp	.+420    	; 0x3a3e <dir_next+0x238>
    389a:	b1 c0       	rjmp	.+354    	; 0x39fe <dir_next+0x1f8>
    389c:	dc 01       	movw	r26, r24
    389e:	ed 91       	ld	r30, X+
    38a0:	fc 91       	ld	r31, X
    38a2:	22 81       	ldd	r18, Z+2	; 0x02
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	21 50       	subi	r18, 0x01	; 1
    38a8:	31 09       	sbc	r19, r1
    38aa:	ce 01       	movw	r24, r28
    38ac:	92 95       	swap	r25
    38ae:	82 95       	swap	r24
    38b0:	8f 70       	andi	r24, 0x0F	; 15
    38b2:	89 27       	eor	r24, r25
    38b4:	9f 70       	andi	r25, 0x0F	; 15
    38b6:	89 27       	eor	r24, r25
    38b8:	28 23       	and	r18, r24
    38ba:	39 23       	and	r19, r25
    38bc:	23 2b       	or	r18, r19
    38be:	09 f0       	breq	.+2      	; 0x38c2 <dir_next+0xbc>
    38c0:	9e c0       	rjmp	.+316    	; 0x39fe <dir_next+0x1f8>
    38c2:	cf 01       	movw	r24, r30
    38c4:	b0 db       	rcall	.-2208   	; 0x3026 <get_fat>
    38c6:	4b 01       	movw	r8, r22
    38c8:	5c 01       	movw	r10, r24
    38ca:	62 30       	cpi	r22, 0x02	; 2
    38cc:	71 05       	cpc	r23, r1
    38ce:	81 05       	cpc	r24, r1
    38d0:	91 05       	cpc	r25, r1
    38d2:	08 f4       	brcc	.+2      	; 0x38d6 <dir_next+0xd0>
    38d4:	b6 c0       	rjmp	.+364    	; 0x3a42 <dir_next+0x23c>
    38d6:	6f 3f       	cpi	r22, 0xFF	; 255
    38d8:	7f 4f       	sbci	r23, 0xFF	; 255
    38da:	8f 4f       	sbci	r24, 0xFF	; 255
    38dc:	9f 4f       	sbci	r25, 0xFF	; 255
    38de:	09 f4       	brne	.+2      	; 0x38e2 <dir_next+0xdc>
    38e0:	b2 c0       	rjmp	.+356    	; 0x3a46 <dir_next+0x240>
    38e2:	d8 01       	movw	r26, r16
    38e4:	ed 91       	ld	r30, X+
    38e6:	fc 91       	ld	r31, X
    38e8:	82 89       	ldd	r24, Z+18	; 0x12
    38ea:	93 89       	ldd	r25, Z+19	; 0x13
    38ec:	a4 89       	ldd	r26, Z+20	; 0x14
    38ee:	b5 89       	ldd	r27, Z+21	; 0x15
    38f0:	88 16       	cp	r8, r24
    38f2:	99 06       	cpc	r9, r25
    38f4:	aa 06       	cpc	r10, r26
    38f6:	bb 06       	cpc	r11, r27
    38f8:	08 f4       	brcc	.+2      	; 0x38fc <dir_next+0xf6>
    38fa:	70 c0       	rjmp	.+224    	; 0x39dc <dir_next+0x1d6>
    38fc:	ef 28       	or	r14, r15
    38fe:	09 f4       	brne	.+2      	; 0x3902 <dir_next+0xfc>
    3900:	a4 c0       	rjmp	.+328    	; 0x3a4a <dir_next+0x244>
    3902:	d8 01       	movw	r26, r16
    3904:	1a 96       	adiw	r26, 0x0a	; 10
    3906:	4d 91       	ld	r20, X+
    3908:	5d 91       	ld	r21, X+
    390a:	6d 91       	ld	r22, X+
    390c:	7c 91       	ld	r23, X
    390e:	1d 97       	sbiw	r26, 0x0d	; 13
    3910:	cf 01       	movw	r24, r30
    3912:	6a de       	rcall	.-812    	; 0x35e8 <create_chain>
    3914:	4b 01       	movw	r8, r22
    3916:	5c 01       	movw	r10, r24
    3918:	61 15       	cp	r22, r1
    391a:	71 05       	cpc	r23, r1
    391c:	81 05       	cpc	r24, r1
    391e:	91 05       	cpc	r25, r1
    3920:	09 f4       	brne	.+2      	; 0x3924 <dir_next+0x11e>
    3922:	95 c0       	rjmp	.+298    	; 0x3a4e <dir_next+0x248>
    3924:	61 30       	cpi	r22, 0x01	; 1
    3926:	71 05       	cpc	r23, r1
    3928:	81 05       	cpc	r24, r1
    392a:	91 05       	cpc	r25, r1
    392c:	09 f4       	brne	.+2      	; 0x3930 <dir_next+0x12a>
    392e:	91 c0       	rjmp	.+290    	; 0x3a52 <dir_next+0x24c>
    3930:	6f 3f       	cpi	r22, 0xFF	; 255
    3932:	7f 4f       	sbci	r23, 0xFF	; 255
    3934:	8f 4f       	sbci	r24, 0xFF	; 255
    3936:	9f 4f       	sbci	r25, 0xFF	; 255
    3938:	09 f4       	brne	.+2      	; 0x393c <dir_next+0x136>
    393a:	8d c0       	rjmp	.+282    	; 0x3a56 <dir_next+0x250>
    393c:	d8 01       	movw	r26, r16
    393e:	8d 91       	ld	r24, X+
    3940:	9c 91       	ld	r25, X
    3942:	0e 94 ee 12 	call	0x25dc	; 0x25dc <sync_window>
    3946:	81 11       	cpse	r24, r1
    3948:	88 c0       	rjmp	.+272    	; 0x3a5a <dir_next+0x254>
    394a:	f8 01       	movw	r30, r16
    394c:	80 81       	ld	r24, Z
    394e:	91 81       	ldd	r25, Z+1	; 0x01
    3950:	fc 01       	movw	r30, r24
    3952:	be 96       	adiw	r30, 0x2e	; 46
    3954:	82 5d       	subi	r24, 0xD2	; 210
    3956:	9d 4f       	sbci	r25, 0xFD	; 253
    3958:	11 92       	st	Z+, r1
    395a:	e8 17       	cp	r30, r24
    395c:	f9 07       	cpc	r31, r25
    395e:	e1 f7       	brne	.-8      	; 0x3958 <dir_next+0x152>
    3960:	d8 01       	movw	r26, r16
    3962:	ed 90       	ld	r14, X+
    3964:	fc 90       	ld	r15, X
    3966:	b5 01       	movw	r22, r10
    3968:	a4 01       	movw	r20, r8
    396a:	c7 01       	movw	r24, r14
    396c:	2e db       	rcall	.-2468   	; 0x2fca <clust2sect>
    396e:	f7 01       	movw	r30, r14
    3970:	62 a7       	std	Z+42, r22	; 0x2a
    3972:	73 a7       	std	Z+43, r23	; 0x2b
    3974:	84 a7       	std	Z+44, r24	; 0x2c
    3976:	95 a7       	std	Z+45, r25	; 0x2d
    3978:	e1 2c       	mov	r14, r1
    397a:	f1 2c       	mov	r15, r1
    397c:	77 24       	eor	r7, r7
    397e:	73 94       	inc	r7
    3980:	19 c0       	rjmp	.+50     	; 0x39b4 <dir_next+0x1ae>
    3982:	74 82       	std	Z+4, r7	; 0x04
    3984:	d8 01       	movw	r26, r16
    3986:	8d 91       	ld	r24, X+
    3988:	9c 91       	ld	r25, X
    398a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <sync_window>
    398e:	81 11       	cpse	r24, r1
    3990:	66 c0       	rjmp	.+204    	; 0x3a5e <dir_next+0x258>
    3992:	d8 01       	movw	r26, r16
    3994:	ed 91       	ld	r30, X+
    3996:	fc 91       	ld	r31, X
    3998:	82 a5       	ldd	r24, Z+42	; 0x2a
    399a:	93 a5       	ldd	r25, Z+43	; 0x2b
    399c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    399e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    39a0:	01 96       	adiw	r24, 0x01	; 1
    39a2:	a1 1d       	adc	r26, r1
    39a4:	b1 1d       	adc	r27, r1
    39a6:	82 a7       	std	Z+42, r24	; 0x2a
    39a8:	93 a7       	std	Z+43, r25	; 0x2b
    39aa:	a4 a7       	std	Z+44, r26	; 0x2c
    39ac:	b5 a7       	std	Z+45, r27	; 0x2d
    39ae:	bf ef       	ldi	r27, 0xFF	; 255
    39b0:	eb 1a       	sub	r14, r27
    39b2:	fb 0a       	sbc	r15, r27
    39b4:	d8 01       	movw	r26, r16
    39b6:	ed 91       	ld	r30, X+
    39b8:	fc 91       	ld	r31, X
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	e8 16       	cp	r14, r24
    39c0:	f9 06       	cpc	r15, r25
    39c2:	f8 f2       	brcs	.-66     	; 0x3982 <dir_next+0x17c>
    39c4:	82 a5       	ldd	r24, Z+42	; 0x2a
    39c6:	93 a5       	ldd	r25, Z+43	; 0x2b
    39c8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    39ca:	b5 a5       	ldd	r27, Z+45	; 0x2d
    39cc:	8e 19       	sub	r24, r14
    39ce:	9f 09       	sbc	r25, r15
    39d0:	a1 09       	sbc	r26, r1
    39d2:	b1 09       	sbc	r27, r1
    39d4:	82 a7       	std	Z+42, r24	; 0x2a
    39d6:	93 a7       	std	Z+43, r25	; 0x2b
    39d8:	a4 a7       	std	Z+44, r26	; 0x2c
    39da:	b5 a7       	std	Z+45, r27	; 0x2d
    39dc:	f8 01       	movw	r30, r16
    39de:	82 86       	std	Z+10, r8	; 0x0a
    39e0:	93 86       	std	Z+11, r9	; 0x0b
    39e2:	a4 86       	std	Z+12, r10	; 0x0c
    39e4:	b5 86       	std	Z+13, r11	; 0x0d
    39e6:	b5 01       	movw	r22, r10
    39e8:	a4 01       	movw	r20, r8
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	ed da       	rcall	.-2598   	; 0x2fca <clust2sect>
    39f0:	d8 01       	movw	r26, r16
    39f2:	1e 96       	adiw	r26, 0x0e	; 14
    39f4:	6d 93       	st	X+, r22
    39f6:	7d 93       	st	X+, r23
    39f8:	8d 93       	st	X+, r24
    39fa:	9c 93       	st	X, r25
    39fc:	51 97       	sbiw	r26, 0x11	; 17
    39fe:	f8 01       	movw	r30, r16
    3a00:	d5 83       	std	Z+5, r29	; 0x05
    3a02:	c4 83       	std	Z+4, r28	; 0x04
    3a04:	cc 0c       	add	r12, r12
    3a06:	dd 1c       	adc	r13, r13
    3a08:	cc 0c       	add	r12, r12
    3a0a:	dd 1c       	adc	r13, r13
    3a0c:	cc 0c       	add	r12, r12
    3a0e:	dd 1c       	adc	r13, r13
    3a10:	cc 0c       	add	r12, r12
    3a12:	dd 1c       	adc	r13, r13
    3a14:	cc 0c       	add	r12, r12
    3a16:	dd 1c       	adc	r13, r13
    3a18:	fe e2       	ldi	r31, 0x2E	; 46
    3a1a:	cf 0e       	add	r12, r31
    3a1c:	d1 1c       	adc	r13, r1
    3a1e:	d8 01       	movw	r26, r16
    3a20:	8d 91       	ld	r24, X+
    3a22:	9c 91       	ld	r25, X
    3a24:	11 97       	sbiw	r26, 0x01	; 1
    3a26:	c8 0e       	add	r12, r24
    3a28:	d9 1e       	adc	r13, r25
    3a2a:	53 96       	adiw	r26, 0x13	; 19
    3a2c:	dc 92       	st	X, r13
    3a2e:	ce 92       	st	-X, r12
    3a30:	52 97       	sbiw	r26, 0x12	; 18
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	15 c0       	rjmp	.+42     	; 0x3a60 <dir_next+0x25a>
    3a36:	84 e0       	ldi	r24, 0x04	; 4
    3a38:	13 c0       	rjmp	.+38     	; 0x3a60 <dir_next+0x25a>
    3a3a:	84 e0       	ldi	r24, 0x04	; 4
    3a3c:	11 c0       	rjmp	.+34     	; 0x3a60 <dir_next+0x25a>
    3a3e:	84 e0       	ldi	r24, 0x04	; 4
    3a40:	0f c0       	rjmp	.+30     	; 0x3a60 <dir_next+0x25a>
    3a42:	82 e0       	ldi	r24, 0x02	; 2
    3a44:	0d c0       	rjmp	.+26     	; 0x3a60 <dir_next+0x25a>
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	0b c0       	rjmp	.+22     	; 0x3a60 <dir_next+0x25a>
    3a4a:	84 e0       	ldi	r24, 0x04	; 4
    3a4c:	09 c0       	rjmp	.+18     	; 0x3a60 <dir_next+0x25a>
    3a4e:	87 e0       	ldi	r24, 0x07	; 7
    3a50:	07 c0       	rjmp	.+14     	; 0x3a60 <dir_next+0x25a>
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	05 c0       	rjmp	.+10     	; 0x3a60 <dir_next+0x25a>
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	03 c0       	rjmp	.+6      	; 0x3a60 <dir_next+0x25a>
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	01 c0       	rjmp	.+2      	; 0x3a60 <dir_next+0x25a>
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	1f 91       	pop	r17
    3a66:	0f 91       	pop	r16
    3a68:	ff 90       	pop	r15
    3a6a:	ef 90       	pop	r14
    3a6c:	df 90       	pop	r13
    3a6e:	cf 90       	pop	r12
    3a70:	bf 90       	pop	r11
    3a72:	af 90       	pop	r10
    3a74:	9f 90       	pop	r9
    3a76:	8f 90       	pop	r8
    3a78:	7f 90       	pop	r7
    3a7a:	08 95       	ret

00003a7c <f_mount>:
    3a7c:	1f 93       	push	r17
    3a7e:	cf 93       	push	r28
    3a80:	df 93       	push	r29
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <f_mount+0x8>
    3a84:	00 d0       	rcall	.+0      	; 0x3a86 <f_mount+0xa>
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <f_mount+0xc>
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
    3a90:	7e 83       	std	Y+6, r23	; 0x06
    3a92:	6d 83       	std	Y+5, r22	; 0x05
    3a94:	14 2f       	mov	r17, r20
    3a96:	7a 83       	std	Y+2, r23	; 0x02
    3a98:	69 83       	std	Y+1, r22	; 0x01
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	01 96       	adiw	r24, 0x01	; 1
    3a9e:	0e 94 b7 12 	call	0x256e	; 0x256e <get_ldnumber>
    3aa2:	99 23       	and	r25, r25
    3aa4:	34 f1       	brlt	.+76     	; 0x3af2 <f_mount+0x76>
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	ee 0f       	add	r30, r30
    3aaa:	ff 1f       	adc	r31, r31
    3aac:	ed 5a       	subi	r30, 0xAD	; 173
    3aae:	fb 4f       	sbci	r31, 0xFB	; 251
    3ab0:	01 90       	ld	r0, Z+
    3ab2:	f0 81       	ld	r31, Z
    3ab4:	e0 2d       	mov	r30, r0
    3ab6:	30 97       	sbiw	r30, 0x00	; 0
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <f_mount+0x40>
    3aba:	10 82       	st	Z, r1
    3abc:	eb 81       	ldd	r30, Y+3	; 0x03
    3abe:	fc 81       	ldd	r31, Y+4	; 0x04
    3ac0:	30 97       	sbiw	r30, 0x00	; 0
    3ac2:	e9 f0       	breq	.+58     	; 0x3afe <f_mount+0x82>
    3ac4:	10 82       	st	Z, r1
    3ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	fc 01       	movw	r30, r24
    3ad0:	ed 5a       	subi	r30, 0xAD	; 173
    3ad2:	fb 4f       	sbci	r31, 0xFB	; 251
    3ad4:	31 83       	std	Z+1, r19	; 0x01
    3ad6:	20 83       	st	Z, r18
    3ad8:	23 2b       	or	r18, r19
    3ada:	69 f0       	breq	.+26     	; 0x3af6 <f_mount+0x7a>
    3adc:	11 30       	cpi	r17, 0x01	; 1
    3ade:	69 f4       	brne	.+26     	; 0x3afa <f_mount+0x7e>
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	be 01       	movw	r22, r28
    3ae4:	6b 5f       	subi	r22, 0xFB	; 251
    3ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae8:	ce 01       	movw	r24, r28
    3aea:	03 96       	adiw	r24, 0x03	; 3
    3aec:	0e 94 23 14 	call	0x2846	; 0x2846 <find_volume>
    3af0:	0e c0       	rjmp	.+28     	; 0x3b0e <f_mount+0x92>
    3af2:	8b e0       	ldi	r24, 0x0B	; 11
    3af4:	0c c0       	rjmp	.+24     	; 0x3b0e <f_mount+0x92>
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	0a c0       	rjmp	.+20     	; 0x3b0e <f_mount+0x92>
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	08 c0       	rjmp	.+16     	; 0x3b0e <f_mount+0x92>
    3afe:	88 0f       	add	r24, r24
    3b00:	99 1f       	adc	r25, r25
    3b02:	fc 01       	movw	r30, r24
    3b04:	ed 5a       	subi	r30, 0xAD	; 173
    3b06:	fb 4f       	sbci	r31, 0xFB	; 251
    3b08:	11 82       	std	Z+1, r1	; 0x01
    3b0a:	10 82       	st	Z, r1
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	26 96       	adiw	r28, 0x06	; 6
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	1f 91       	pop	r17
    3b20:	08 95       	ret

00003b22 <f_open>:
    3b22:	2f 92       	push	r2
    3b24:	3f 92       	push	r3
    3b26:	4f 92       	push	r4
    3b28:	5f 92       	push	r5
    3b2a:	6f 92       	push	r6
    3b2c:	7f 92       	push	r7
    3b2e:	8f 92       	push	r8
    3b30:	9f 92       	push	r9
    3b32:	af 92       	push	r10
    3b34:	bf 92       	push	r11
    3b36:	cf 92       	push	r12
    3b38:	df 92       	push	r13
    3b3a:	ef 92       	push	r14
    3b3c:	ff 92       	push	r15
    3b3e:	0f 93       	push	r16
    3b40:	1f 93       	push	r17
    3b42:	cf 93       	push	r28
    3b44:	df 93       	push	r29
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	ae 97       	sbiw	r28, 0x2e	; 46
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	7c a3       	std	Y+36, r23	; 0x24
    3b58:	6b a3       	std	Y+35, r22	; 0x23
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <f_open+0x3e>
    3b5e:	83 c2       	rjmp	.+1286   	; 0x4066 <f_open+0x544>
    3b60:	4d a3       	std	Y+37, r20	; 0x25
    3b62:	1c 01       	movw	r2, r24
    3b64:	dc 01       	movw	r26, r24
    3b66:	1d 92       	st	X+, r1
    3b68:	1c 92       	st	X, r1
    3b6a:	4e 71       	andi	r20, 0x1E	; 30
    3b6c:	be 01       	movw	r22, r28
    3b6e:	6d 5d       	subi	r22, 0xDD	; 221
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	ce 01       	movw	r24, r28
    3b74:	01 96       	adiw	r24, 0x01	; 1
    3b76:	0e 94 23 14 	call	0x2846	; 0x2846 <find_volume>
    3b7a:	81 11       	cpse	r24, r1
    3b7c:	03 c3       	rjmp	.+1542   	; 0x4184 <__stack+0x85>
    3b7e:	ce 01       	movw	r24, r28
    3b80:	47 96       	adiw	r24, 0x17	; 23
    3b82:	9e 8b       	std	Y+22, r25	; 0x16
    3b84:	8d 8b       	std	Y+21, r24	; 0x15
    3b86:	cb a0       	ldd	r12, Y+35	; 0x23
    3b88:	dc a0       	ldd	r13, Y+36	; 0x24
    3b8a:	f6 01       	movw	r30, r12
    3b8c:	80 81       	ld	r24, Z
    3b8e:	8f 32       	cpi	r24, 0x2F	; 47
    3b90:	11 f0       	breq	.+4      	; 0x3b96 <f_open+0x74>
    3b92:	8c 35       	cpi	r24, 0x5C	; 92
    3b94:	19 f4       	brne	.+6      	; 0x3b9c <f_open+0x7a>
    3b96:	ff ef       	ldi	r31, 0xFF	; 255
    3b98:	cf 1a       	sub	r12, r31
    3b9a:	df 0a       	sbc	r13, r31
    3b9c:	2d a1       	ldd	r18, Y+37	; 0x25
    3b9e:	2f 71       	andi	r18, 0x1F	; 31
    3ba0:	29 a7       	std	Y+41, r18	; 0x29
    3ba2:	1f 82       	std	Y+7, r1	; 0x07
    3ba4:	18 86       	std	Y+8, r1	; 0x08
    3ba6:	19 86       	std	Y+9, r1	; 0x09
    3ba8:	1a 86       	std	Y+10, r1	; 0x0a
    3baa:	d6 01       	movw	r26, r12
    3bac:	8c 91       	ld	r24, X
    3bae:	80 32       	cpi	r24, 0x20	; 32
    3bb0:	68 f4       	brcc	.+26     	; 0x3bcc <f_open+0xaa>
    3bb2:	60 e0       	ldi	r22, 0x00	; 0
    3bb4:	70 e0       	ldi	r23, 0x00	; 0
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	01 96       	adiw	r24, 0x01	; 1
    3bba:	34 db       	rcall	.-2456   	; 0x3224 <dir_sdi>
    3bbc:	1c 8a       	std	Y+20, r1	; 0x14
    3bbe:	1b 8a       	std	Y+19, r1	; 0x13
    3bc0:	e1 2c       	mov	r14, r1
    3bc2:	f1 2c       	mov	r15, r1
    3bc4:	88 23       	and	r24, r24
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <f_open+0xa8>
    3bc8:	91 c2       	rjmp	.+1314   	; 0x40ec <f_open+0x5ca>
    3bca:	87 c2       	rjmp	.+1294   	; 0x40da <f_open+0x5b8>
    3bcc:	68 94       	set
    3bce:	bb 24       	eor	r11, r11
    3bd0:	b5 f8       	bld	r11, 5
    3bd2:	a1 2c       	mov	r10, r1
    3bd4:	71 2c       	mov	r7, r1
    3bd6:	68 94       	set
    3bd8:	66 24       	eor	r6, r6
    3bda:	63 f8       	bld	r6, 3
    3bdc:	51 2c       	mov	r5, r1
    3bde:	41 2c       	mov	r4, r1
    3be0:	6a a6       	std	Y+42, r6	; 0x2a
    3be2:	5e a6       	std	Y+46, r5	; 0x2e
    3be4:	f6 01       	movw	r30, r12
    3be6:	af 01       	movw	r20, r30
    3be8:	81 91       	ld	r24, Z+
    3bea:	8f 32       	cpi	r24, 0x2F	; 47
    3bec:	e1 f3       	breq	.-8      	; 0x3be6 <f_open+0xc4>
    3bee:	8c 35       	cpi	r24, 0x5C	; 92
    3bf0:	d1 f3       	breq	.-12     	; 0x3be6 <f_open+0xc4>
    3bf2:	0d 89       	ldd	r16, Y+21	; 0x15
    3bf4:	1e 89       	ldd	r17, Y+22	; 0x16
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	c8 01       	movw	r24, r16
    3bfa:	0b 96       	adiw	r24, 0x0b	; 11
    3bfc:	b1 92       	st	Z+, r11
    3bfe:	e8 17       	cp	r30, r24
    3c00:	f9 07       	cpc	r31, r25
    3c02:	e1 f7       	brne	.-8      	; 0x3bfc <f_open+0xda>
    3c04:	6a 01       	movw	r12, r20
    3c06:	ea 2c       	mov	r14, r10
    3c08:	f7 2c       	mov	r15, r7
    3c0a:	8a 2d       	mov	r24, r10
    3c0c:	97 2d       	mov	r25, r7
    3c0e:	86 2c       	mov	r8, r6
    3c10:	95 2c       	mov	r9, r5
    3c12:	74 2d       	mov	r23, r4
    3c14:	da 01       	movw	r26, r20
    3c16:	01 96       	adiw	r24, 0x01	; 1
    3c18:	6d 91       	ld	r22, X+
    3c1a:	61 32       	cpi	r22, 0x21	; 33
    3c1c:	08 f4       	brcc	.+2      	; 0x3c20 <f_open+0xfe>
    3c1e:	3c c2       	rjmp	.+1144   	; 0x4098 <f_open+0x576>
    3c20:	6f 32       	cpi	r22, 0x2F	; 47
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <f_open+0x104>
    3c24:	3e c2       	rjmp	.+1148   	; 0x40a2 <f_open+0x580>
    3c26:	6c 35       	cpi	r22, 0x5C	; 92
    3c28:	09 f4       	brne	.+2      	; 0x3c2c <f_open+0x10a>
    3c2a:	3b c2       	rjmp	.+1142   	; 0x40a2 <f_open+0x580>
    3c2c:	6e 32       	cpi	r22, 0x2E	; 46
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <f_open+0x110>
    3c30:	1c c2       	rjmp	.+1080   	; 0x406a <f_open+0x548>
    3c32:	e8 14       	cp	r14, r8
    3c34:	f9 04       	cpc	r15, r9
    3c36:	08 f0       	brcs	.+2      	; 0x3c3a <f_open+0x118>
    3c38:	79 c2       	rjmp	.+1266   	; 0x412c <__stack+0x2d>
    3c3a:	0a c0       	rjmp	.+20     	; 0x3c50 <f_open+0x12e>
    3c3c:	77 0f       	add	r23, r23
    3c3e:	77 0f       	add	r23, r23
    3c40:	ea a4       	ldd	r14, Y+42	; 0x2a
    3c42:	fe a4       	ldd	r15, Y+46	; 0x2e
    3c44:	0f 2e       	mov	r0, r31
    3c46:	fb e0       	ldi	r31, 0x0B	; 11
    3c48:	8f 2e       	mov	r8, r31
    3c4a:	f0 2d       	mov	r31, r0
    3c4c:	91 2c       	mov	r9, r1
    3c4e:	e3 cf       	rjmp	.-58     	; 0x3c16 <f_open+0xf4>
    3c50:	66 23       	and	r22, r22
    3c52:	0c f0       	brlt	.+2      	; 0x3c56 <f_open+0x134>
    3c54:	10 c2       	rjmp	.+1056   	; 0x4076 <f_open+0x554>
    3c56:	73 60       	ori	r23, 0x03	; 3
    3c58:	e6 2f       	mov	r30, r22
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	ea 56       	subi	r30, 0x6A	; 106
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	60 81       	ld	r22, Z
    3c62:	09 c2       	rjmp	.+1042   	; 0x4076 <f_open+0x554>
    3c64:	81 91       	ld	r24, Z+
    3c66:	88 23       	and	r24, r24
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <f_open+0x14a>
    3c6a:	0f c2       	rjmp	.+1054   	; 0x408a <f_open+0x568>
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	48 17       	cp	r20, r24
    3c70:	59 07       	cpc	r21, r25
    3c72:	c1 f7       	brne	.-16     	; 0x3c64 <f_open+0x142>
    3c74:	86 e0       	ldi	r24, 0x06	; 6
    3c76:	77 c2       	rjmp	.+1262   	; 0x4166 <__stack+0x67>
    3c78:	72 60       	ori	r23, 0x02	; 2
    3c7a:	06 c0       	rjmp	.+12     	; 0x3c88 <f_open+0x166>
    3c7c:	2f e9       	ldi	r18, 0x9F	; 159
    3c7e:	26 0f       	add	r18, r22
    3c80:	2a 31       	cpi	r18, 0x1A	; 26
    3c82:	10 f4       	brcc	.+4      	; 0x3c88 <f_open+0x166>
    3c84:	71 60       	ori	r23, 0x01	; 1
    3c86:	60 52       	subi	r22, 0x20	; 32
    3c88:	f8 01       	movw	r30, r16
    3c8a:	ee 0d       	add	r30, r14
    3c8c:	ff 1d       	adc	r31, r15
    3c8e:	60 83       	st	Z, r22
    3c90:	f7 01       	movw	r30, r14
    3c92:	31 96       	adiw	r30, 0x01	; 1
    3c94:	7f 01       	movw	r14, r30
    3c96:	bf cf       	rjmp	.-130    	; 0x3c16 <f_open+0xf4>
    3c98:	ef 28       	or	r14, r15
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <f_open+0x17c>
    3c9c:	47 c2       	rjmp	.+1166   	; 0x412c <__stack+0x2d>
    3c9e:	d8 01       	movw	r26, r16
    3ca0:	2c 91       	ld	r18, X
    3ca2:	25 3e       	cpi	r18, 0xE5	; 229
    3ca4:	11 f4       	brne	.+4      	; 0x3caa <f_open+0x188>
    3ca6:	e5 e0       	ldi	r30, 0x05	; 5
    3ca8:	ec 93       	st	X, r30
    3caa:	f8 e0       	ldi	r31, 0x08	; 8
    3cac:	8f 16       	cp	r8, r31
    3cae:	91 04       	cpc	r9, r1
    3cb0:	19 f4       	brne	.+6      	; 0x3cb8 <f_open+0x196>
    3cb2:	79 2f       	mov	r23, r25
    3cb4:	77 0f       	add	r23, r23
    3cb6:	77 0f       	add	r23, r23
    3cb8:	97 2f       	mov	r25, r23
    3cba:	93 70       	andi	r25, 0x03	; 3
    3cbc:	91 30       	cpi	r25, 0x01	; 1
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <f_open+0x1a0>
    3cc0:	80 61       	ori	r24, 0x10	; 16
    3cc2:	97 2f       	mov	r25, r23
    3cc4:	9c 70       	andi	r25, 0x0C	; 12
    3cc6:	94 30       	cpi	r25, 0x04	; 4
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <f_open+0x1aa>
    3cca:	88 60       	ori	r24, 0x08	; 8
    3ccc:	d8 01       	movw	r26, r16
    3cce:	1b 96       	adiw	r26, 0x0b	; 11
    3cd0:	8c 93       	st	X, r24
    3cd2:	6a 2d       	mov	r22, r10
    3cd4:	77 2d       	mov	r23, r7
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	01 96       	adiw	r24, 0x01	; 1
    3cda:	a4 da       	rcall	.-2744   	; 0x3224 <dir_sdi>
    3cdc:	81 11       	cpse	r24, r1
    3cde:	ec c1       	rjmp	.+984    	; 0x40b8 <f_open+0x596>
    3ce0:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ce2:	58 89       	ldd	r21, Y+16	; 0x10
    3ce4:	69 89       	ldd	r22, Y+17	; 0x11
    3ce6:	7a 89       	ldd	r23, Y+18	; 0x12
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	9a 81       	ldd	r25, Y+2	; 0x02
    3cec:	0e 94 59 13 	call	0x26b2	; 0x26b2 <move_window>
    3cf0:	81 11       	cpse	r24, r1
    3cf2:	e2 c1       	rjmp	.+964    	; 0x40b8 <f_open+0x596>
    3cf4:	6b 89       	ldd	r22, Y+19	; 0x13
    3cf6:	7c 89       	ldd	r23, Y+20	; 0x14
    3cf8:	fb 01       	movw	r30, r22
    3cfa:	80 81       	ld	r24, Z
    3cfc:	88 23       	and	r24, r24
    3cfe:	d1 f0       	breq	.+52     	; 0x3d34 <f_open+0x212>
    3d00:	83 85       	ldd	r24, Z+11	; 0x0b
    3d02:	83 fd       	sbrc	r24, 3
    3d04:	0f c0       	rjmp	.+30     	; 0x3d24 <f_open+0x202>
    3d06:	4d 89       	ldd	r20, Y+21	; 0x15
    3d08:	5e 89       	ldd	r21, Y+22	; 0x16
    3d0a:	da 01       	movw	r26, r20
    3d0c:	9b 01       	movw	r18, r22
    3d0e:	25 5f       	subi	r18, 0xF5	; 245
    3d10:	3f 4f       	sbci	r19, 0xFF	; 255
    3d12:	04 c0       	rjmp	.+8      	; 0x3d1c <f_open+0x1fa>
    3d14:	e2 17       	cp	r30, r18
    3d16:	f3 07       	cpc	r31, r19
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <f_open+0x1fa>
    3d1a:	c8 c1       	rjmp	.+912    	; 0x40ac <f_open+0x58a>
    3d1c:	91 91       	ld	r25, Z+
    3d1e:	8d 91       	ld	r24, X+
    3d20:	98 17       	cp	r25, r24
    3d22:	c1 f3       	breq	.-16     	; 0x3d14 <f_open+0x1f2>
    3d24:	6a 2d       	mov	r22, r10
    3d26:	77 2d       	mov	r23, r7
    3d28:	ce 01       	movw	r24, r28
    3d2a:	01 96       	adiw	r24, 0x01	; 1
    3d2c:	6c dd       	rcall	.-1320   	; 0x3806 <dir_next>
    3d2e:	88 23       	and	r24, r24
    3d30:	b9 f2       	breq	.-82     	; 0x3ce0 <f_open+0x1be>
    3d32:	c2 c1       	rjmp	.+900    	; 0x40b8 <f_open+0x596>
    3d34:	ed 89       	ldd	r30, Y+21	; 0x15
    3d36:	fe 89       	ldd	r31, Y+22	; 0x16
    3d38:	93 85       	ldd	r25, Z+11	; 0x0b
    3d3a:	92 fd       	sbrc	r25, 2
    3d3c:	0d c2       	rjmp	.+1050   	; 0x4158 <__stack+0x59>
    3d3e:	85 e0       	ldi	r24, 0x05	; 5
    3d40:	12 c2       	rjmp	.+1060   	; 0x4166 <__stack+0x67>
    3d42:	db 01       	movw	r26, r22
    3d44:	1b 96       	adiw	r26, 0x0b	; 11
    3d46:	8c 91       	ld	r24, X
    3d48:	84 ff       	sbrs	r24, 4
    3d4a:	08 c2       	rjmp	.+1040   	; 0x415c <__stack+0x5d>
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d50:	0e 94 95 12 	call	0x252a	; 0x252a <ld_clust>
    3d54:	6f 83       	std	Y+7, r22	; 0x07
    3d56:	78 87       	std	Y+8, r23	; 0x08
    3d58:	89 87       	std	Y+9, r24	; 0x09
    3d5a:	9a 87       	std	Y+10, r25	; 0x0a
    3d5c:	43 cf       	rjmp	.-378    	; 0x3be4 <f_open+0xc2>
    3d5e:	81 11       	cpse	r24, r1
    3d60:	ef c1       	rjmp	.+990    	; 0x4140 <__stack+0x41>
    3d62:	44 c0       	rjmp	.+136    	; 0x3dec <f_open+0x2ca>
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	70 e0       	ldi	r23, 0x00	; 0
    3d68:	ce 01       	movw	r24, r28
    3d6a:	01 96       	adiw	r24, 0x01	; 1
    3d6c:	5b da       	rcall	.-2890   	; 0x3224 <dir_sdi>
    3d6e:	81 11       	cpse	r24, r1
    3d70:	06 c2       	rjmp	.+1036   	; 0x417e <__stack+0x7f>
    3d72:	4f 85       	ldd	r20, Y+15	; 0x0f
    3d74:	58 89       	ldd	r21, Y+16	; 0x10
    3d76:	69 89       	ldd	r22, Y+17	; 0x11
    3d78:	7a 89       	ldd	r23, Y+18	; 0x12
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <move_window>
    3d82:	81 11       	cpse	r24, r1
    3d84:	fc c1       	rjmp	.+1016   	; 0x417e <__stack+0x7f>
    3d86:	eb 89       	ldd	r30, Y+19	; 0x13
    3d88:	fc 89       	ldd	r31, Y+20	; 0x14
    3d8a:	80 81       	ld	r24, Z
    3d8c:	85 3e       	cpi	r24, 0xE5	; 229
    3d8e:	51 f0       	breq	.+20     	; 0x3da4 <f_open+0x282>
    3d90:	88 23       	and	r24, r24
    3d92:	41 f0       	breq	.+16     	; 0x3da4 <f_open+0x282>
    3d94:	61 e0       	ldi	r22, 0x01	; 1
    3d96:	70 e0       	ldi	r23, 0x00	; 0
    3d98:	ce 01       	movw	r24, r28
    3d9a:	01 96       	adiw	r24, 0x01	; 1
    3d9c:	34 dd       	rcall	.-1432   	; 0x3806 <dir_next>
    3d9e:	88 23       	and	r24, r24
    3da0:	41 f3       	breq	.-48     	; 0x3d72 <f_open+0x250>
    3da2:	ed c1       	rjmp	.+986    	; 0x417e <__stack+0x7f>
    3da4:	4f 85       	ldd	r20, Y+15	; 0x0f
    3da6:	58 89       	ldd	r21, Y+16	; 0x10
    3da8:	69 89       	ldd	r22, Y+17	; 0x11
    3daa:	7a 89       	ldd	r23, Y+18	; 0x12
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	9a 81       	ldd	r25, Y+2	; 0x02
    3db0:	0e 94 59 13 	call	0x26b2	; 0x26b2 <move_window>
    3db4:	81 11       	cpse	r24, r1
    3db6:	ca c1       	rjmp	.+916    	; 0x414c <__stack+0x4d>
    3db8:	eb 89       	ldd	r30, Y+19	; 0x13
    3dba:	fc 89       	ldd	r31, Y+20	; 0x14
    3dbc:	cf 01       	movw	r24, r30
    3dbe:	80 96       	adiw	r24, 0x20	; 32
    3dc0:	11 92       	st	Z+, r1
    3dc2:	e8 17       	cp	r30, r24
    3dc4:	f9 07       	cpc	r31, r25
    3dc6:	e1 f7       	brne	.-8      	; 0x3dc0 <f_open+0x29e>
    3dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    3dca:	7e 89       	ldd	r23, Y+22	; 0x16
    3dcc:	4b e0       	ldi	r20, 0x0B	; 11
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd4:	0e 94 87 12 	call	0x250e	; 0x250e <mem_cpy>
    3dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    3dda:	fa 81       	ldd	r31, Y+2	; 0x02
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	84 83       	std	Z+4, r24	; 0x04
    3de0:	b9 a5       	ldd	r27, Y+41	; 0x29
    3de2:	b8 60       	ori	r27, 0x08	; 8
    3de4:	b9 a7       	std	Y+41, r27	; 0x29
    3de6:	eb 88       	ldd	r14, Y+19	; 0x13
    3de8:	fc 88       	ldd	r15, Y+20	; 0x14
    3dea:	08 c0       	rjmp	.+16     	; 0x3dfc <f_open+0x2da>
    3dec:	f7 01       	movw	r30, r14
    3dee:	83 85       	ldd	r24, Z+11	; 0x0b
    3df0:	81 71       	andi	r24, 0x11	; 17
    3df2:	09 f0       	breq	.+2      	; 0x3df6 <f_open+0x2d4>
    3df4:	82 c1       	rjmp	.+772    	; 0x40fa <f_open+0x5d8>
    3df6:	fd a1       	ldd	r31, Y+37	; 0x25
    3df8:	f2 fd       	sbrc	r31, 2
    3dfa:	81 c1       	rjmp	.+770    	; 0x40fe <f_open+0x5dc>
    3dfc:	29 a5       	ldd	r18, Y+41	; 0x29
    3dfe:	23 ff       	sbrs	r18, 3
    3e00:	db c0       	rjmp	.+438    	; 0x3fb8 <f_open+0x496>
    3e02:	0e 94 63 31 	call	0x62c6	; 0x62c6 <get_fattime>
    3e06:	d7 01       	movw	r26, r14
    3e08:	1e 96       	adiw	r26, 0x0e	; 14
    3e0a:	6c 93       	st	X, r22
    3e0c:	1e 97       	sbiw	r26, 0x0e	; 14
    3e0e:	47 2f       	mov	r20, r23
    3e10:	55 27       	eor	r21, r21
    3e12:	1f 96       	adiw	r26, 0x0f	; 15
    3e14:	4c 93       	st	X, r20
    3e16:	1f 97       	sbiw	r26, 0x0f	; 15
    3e18:	4c 01       	movw	r8, r24
    3e1a:	aa 24       	eor	r10, r10
    3e1c:	bb 24       	eor	r11, r11
    3e1e:	50 96       	adiw	r26, 0x10	; 16
    3e20:	8c 92       	st	X, r8
    3e22:	50 97       	sbiw	r26, 0x10	; 16
    3e24:	09 2f       	mov	r16, r25
    3e26:	11 27       	eor	r17, r17
    3e28:	22 27       	eor	r18, r18
    3e2a:	33 27       	eor	r19, r19
    3e2c:	51 96       	adiw	r26, 0x11	; 17
    3e2e:	0c 93       	st	X, r16
    3e30:	51 97       	sbiw	r26, 0x11	; 17
    3e32:	56 96       	adiw	r26, 0x16	; 22
    3e34:	6c 93       	st	X, r22
    3e36:	56 97       	sbiw	r26, 0x16	; 22
    3e38:	57 96       	adiw	r26, 0x17	; 23
    3e3a:	4c 93       	st	X, r20
    3e3c:	57 97       	sbiw	r26, 0x17	; 23
    3e3e:	58 96       	adiw	r26, 0x18	; 24
    3e40:	8c 92       	st	X, r8
    3e42:	58 97       	sbiw	r26, 0x18	; 24
    3e44:	59 96       	adiw	r26, 0x19	; 25
    3e46:	0c 93       	st	X, r16
    3e48:	59 97       	sbiw	r26, 0x19	; 25
    3e4a:	1b 96       	adiw	r26, 0x0b	; 11
    3e4c:	1c 92       	st	X, r1
    3e4e:	1b 97       	sbiw	r26, 0x0b	; 11
    3e50:	5c 96       	adiw	r26, 0x1c	; 28
    3e52:	1c 92       	st	X, r1
    3e54:	5c 97       	sbiw	r26, 0x1c	; 28
    3e56:	5d 96       	adiw	r26, 0x1d	; 29
    3e58:	1c 92       	st	X, r1
    3e5a:	5d 97       	sbiw	r26, 0x1d	; 29
    3e5c:	5e 96       	adiw	r26, 0x1e	; 30
    3e5e:	1c 92       	st	X, r1
    3e60:	5e 97       	sbiw	r26, 0x1e	; 30
    3e62:	5f 96       	adiw	r26, 0x1f	; 31
    3e64:	1c 92       	st	X, r1
    3e66:	c9 80       	ldd	r12, Y+1	; 0x01
    3e68:	da 80       	ldd	r13, Y+2	; 0x02
    3e6a:	b7 01       	movw	r22, r14
    3e6c:	c6 01       	movw	r24, r12
    3e6e:	0e 94 95 12 	call	0x252a	; 0x252a <ld_clust>
    3e72:	4b 01       	movw	r8, r22
    3e74:	5c 01       	movw	r10, r24
    3e76:	f7 01       	movw	r30, r14
    3e78:	12 8e       	std	Z+26, r1	; 0x1a
    3e7a:	13 8e       	std	Z+27, r1	; 0x1b
    3e7c:	14 8a       	std	Z+20, r1	; 0x14
    3e7e:	15 8a       	std	Z+21, r1	; 0x15
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	d6 01       	movw	r26, r12
    3e84:	14 96       	adiw	r26, 0x04	; 4
    3e86:	8c 93       	st	X, r24
    3e88:	14 97       	sbiw	r26, 0x04	; 4
    3e8a:	81 14       	cp	r8, r1
    3e8c:	91 04       	cpc	r9, r1
    3e8e:	a1 04       	cpc	r10, r1
    3e90:	b1 04       	cpc	r11, r1
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <f_open+0x374>
    3e94:	91 c0       	rjmp	.+290    	; 0x3fb8 <f_open+0x496>
    3e96:	9a 96       	adiw	r26, 0x2a	; 42
    3e98:	2d 91       	ld	r18, X+
    3e9a:	3d 91       	ld	r19, X+
    3e9c:	4d 91       	ld	r20, X+
    3e9e:	5c 91       	ld	r21, X
    3ea0:	9d 97       	sbiw	r26, 0x2d	; 45
    3ea2:	2a a7       	std	Y+42, r18	; 0x2a
    3ea4:	3b a7       	std	Y+43, r19	; 0x2b
    3ea6:	4c a7       	std	Y+44, r20	; 0x2c
    3ea8:	5d a7       	std	Y+45, r21	; 0x2d
    3eaa:	b2 e0       	ldi	r27, 0x02	; 2
    3eac:	8b 16       	cp	r8, r27
    3eae:	91 04       	cpc	r9, r1
    3eb0:	a1 04       	cpc	r10, r1
    3eb2:	b1 04       	cpc	r11, r1
    3eb4:	08 f4       	brcc	.+2      	; 0x3eb8 <f_open+0x396>
    3eb6:	28 c1       	rjmp	.+592    	; 0x4108 <__stack+0x9>
    3eb8:	f6 01       	movw	r30, r12
    3eba:	82 89       	ldd	r24, Z+18	; 0x12
    3ebc:	93 89       	ldd	r25, Z+19	; 0x13
    3ebe:	a4 89       	ldd	r26, Z+20	; 0x14
    3ec0:	b5 89       	ldd	r27, Z+21	; 0x15
    3ec2:	88 16       	cp	r8, r24
    3ec4:	99 06       	cpc	r9, r25
    3ec6:	aa 06       	cpc	r10, r26
    3ec8:	bb 06       	cpc	r11, r27
    3eca:	08 f0       	brcs	.+2      	; 0x3ece <f_open+0x3ac>
    3ecc:	1f c1       	rjmp	.+574    	; 0x410c <__stack+0xd>
    3ece:	8d a2       	std	Y+37, r8	; 0x25
    3ed0:	9e a2       	std	Y+38, r9	; 0x26
    3ed2:	af a2       	std	Y+39, r10	; 0x27
    3ed4:	b8 a6       	std	Y+40, r11	; 0x28
    3ed6:	3f c0       	rjmp	.+126    	; 0x3f56 <f_open+0x434>
    3ed8:	4d a1       	ldd	r20, Y+37	; 0x25
    3eda:	5e a1       	ldd	r21, Y+38	; 0x26
    3edc:	6f a1       	ldd	r22, Y+39	; 0x27
    3ede:	78 a5       	ldd	r23, Y+40	; 0x28
    3ee0:	c6 01       	movw	r24, r12
    3ee2:	a1 d8       	rcall	.-3774   	; 0x3026 <get_fat>
    3ee4:	2b 01       	movw	r4, r22
    3ee6:	3c 01       	movw	r6, r24
    3ee8:	61 15       	cp	r22, r1
    3eea:	71 05       	cpc	r23, r1
    3eec:	81 05       	cpc	r24, r1
    3eee:	91 05       	cpc	r25, r1
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <f_open+0x3d2>
    3ef2:	40 c0       	rjmp	.+128    	; 0x3f74 <f_open+0x452>
    3ef4:	61 30       	cpi	r22, 0x01	; 1
    3ef6:	71 05       	cpc	r23, r1
    3ef8:	81 05       	cpc	r24, r1
    3efa:	91 05       	cpc	r25, r1
    3efc:	09 f4       	brne	.+2      	; 0x3f00 <f_open+0x3de>
    3efe:	08 c1       	rjmp	.+528    	; 0x4110 <__stack+0x11>
    3f00:	6f 3f       	cpi	r22, 0xFF	; 255
    3f02:	7f 4f       	sbci	r23, 0xFF	; 255
    3f04:	8f 4f       	sbci	r24, 0xFF	; 255
    3f06:	9f 4f       	sbci	r25, 0xFF	; 255
    3f08:	09 f4       	brne	.+2      	; 0x3f0c <f_open+0x3ea>
    3f0a:	04 c1       	rjmp	.+520    	; 0x4114 <__stack+0x15>
    3f0c:	00 e0       	ldi	r16, 0x00	; 0
    3f0e:	10 e0       	ldi	r17, 0x00	; 0
    3f10:	98 01       	movw	r18, r16
    3f12:	4d a1       	ldd	r20, Y+37	; 0x25
    3f14:	5e a1       	ldd	r21, Y+38	; 0x26
    3f16:	6f a1       	ldd	r22, Y+39	; 0x27
    3f18:	78 a5       	ldd	r23, Y+40	; 0x28
    3f1a:	c6 01       	movw	r24, r12
    3f1c:	3e da       	rcall	.-2948   	; 0x339a <put_fat>
    3f1e:	81 11       	cpse	r24, r1
    3f20:	fa c0       	rjmp	.+500    	; 0x4116 <__stack+0x17>
    3f22:	f6 01       	movw	r30, r12
    3f24:	86 85       	ldd	r24, Z+14	; 0x0e
    3f26:	97 85       	ldd	r25, Z+15	; 0x0f
    3f28:	a0 89       	ldd	r26, Z+16	; 0x10
    3f2a:	b1 89       	ldd	r27, Z+17	; 0x11
    3f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f2e:	ff ef       	ldi	r31, 0xFF	; 255
    3f30:	9f 07       	cpc	r25, r31
    3f32:	af 07       	cpc	r26, r31
    3f34:	bf 07       	cpc	r27, r31
    3f36:	59 f0       	breq	.+22     	; 0x3f4e <f_open+0x42c>
    3f38:	01 96       	adiw	r24, 0x01	; 1
    3f3a:	a1 1d       	adc	r26, r1
    3f3c:	b1 1d       	adc	r27, r1
    3f3e:	f6 01       	movw	r30, r12
    3f40:	86 87       	std	Z+14, r24	; 0x0e
    3f42:	97 87       	std	Z+15, r25	; 0x0f
    3f44:	a0 8b       	std	Z+16, r26	; 0x10
    3f46:	b1 8b       	std	Z+17, r27	; 0x11
    3f48:	85 81       	ldd	r24, Z+5	; 0x05
    3f4a:	81 60       	ori	r24, 0x01	; 1
    3f4c:	85 83       	std	Z+5, r24	; 0x05
    3f4e:	4d a2       	std	Y+37, r4	; 0x25
    3f50:	5e a2       	std	Y+38, r5	; 0x26
    3f52:	6f a2       	std	Y+39, r6	; 0x27
    3f54:	78 a6       	std	Y+40, r7	; 0x28
    3f56:	f6 01       	movw	r30, r12
    3f58:	82 89       	ldd	r24, Z+18	; 0x12
    3f5a:	93 89       	ldd	r25, Z+19	; 0x13
    3f5c:	a4 89       	ldd	r26, Z+20	; 0x14
    3f5e:	b5 89       	ldd	r27, Z+21	; 0x15
    3f60:	2d a1       	ldd	r18, Y+37	; 0x25
    3f62:	3e a1       	ldd	r19, Y+38	; 0x26
    3f64:	4f a1       	ldd	r20, Y+39	; 0x27
    3f66:	58 a5       	ldd	r21, Y+40	; 0x28
    3f68:	28 17       	cp	r18, r24
    3f6a:	39 07       	cpc	r19, r25
    3f6c:	4a 07       	cpc	r20, r26
    3f6e:	5b 07       	cpc	r21, r27
    3f70:	08 f4       	brcc	.+2      	; 0x3f74 <f_open+0x452>
    3f72:	b2 cf       	rjmp	.-156    	; 0x3ed8 <f_open+0x3b6>
    3f74:	89 81       	ldd	r24, Y+1	; 0x01
    3f76:	9a 81       	ldd	r25, Y+2	; 0x02
    3f78:	31 e0       	ldi	r19, 0x01	; 1
    3f7a:	83 1a       	sub	r8, r19
    3f7c:	91 08       	sbc	r9, r1
    3f7e:	a1 08       	sbc	r10, r1
    3f80:	b1 08       	sbc	r11, r1
    3f82:	dc 01       	movw	r26, r24
    3f84:	1a 96       	adiw	r26, 0x0a	; 10
    3f86:	8d 92       	st	X+, r8
    3f88:	9d 92       	st	X+, r9
    3f8a:	ad 92       	st	X+, r10
    3f8c:	bc 92       	st	X, r11
    3f8e:	1d 97       	sbiw	r26, 0x0d	; 13
    3f90:	4a a5       	ldd	r20, Y+42	; 0x2a
    3f92:	5b a5       	ldd	r21, Y+43	; 0x2b
    3f94:	6c a5       	ldd	r22, Y+44	; 0x2c
    3f96:	7d a5       	ldd	r23, Y+45	; 0x2d
    3f98:	0e 94 59 13 	call	0x26b2	; 0x26b2 <move_window>
    3f9c:	88 23       	and	r24, r24
    3f9e:	79 f0       	breq	.+30     	; 0x3fbe <f_open+0x49c>
    3fa0:	f1 c0       	rjmp	.+482    	; 0x4184 <__stack+0x85>
    3fa2:	81 11       	cpse	r24, r1
    3fa4:	bf c0       	rjmp	.+382    	; 0x4124 <__stack+0x25>
    3fa6:	f7 01       	movw	r30, r14
    3fa8:	83 85       	ldd	r24, Z+11	; 0x0b
    3faa:	84 fd       	sbrc	r24, 4
    3fac:	b8 c0       	rjmp	.+368    	; 0x411e <__stack+0x1f>
    3fae:	fd a1       	ldd	r31, Y+37	; 0x25
    3fb0:	f1 ff       	sbrs	r31, 1
    3fb2:	02 c0       	rjmp	.+4      	; 0x3fb8 <f_open+0x496>
    3fb4:	80 fd       	sbrc	r24, 0
    3fb6:	b5 c0       	rjmp	.+362    	; 0x4122 <__stack+0x23>
    3fb8:	29 a5       	ldd	r18, Y+41	; 0x29
    3fba:	23 ff       	sbrs	r18, 3
    3fbc:	03 c0       	rjmp	.+6      	; 0x3fc4 <f_open+0x4a2>
    3fbe:	39 a5       	ldd	r19, Y+41	; 0x29
    3fc0:	30 62       	ori	r19, 0x20	; 32
    3fc2:	39 a7       	std	Y+41, r19	; 0x29
    3fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc8:	82 a5       	ldd	r24, Z+42	; 0x2a
    3fca:	93 a5       	ldd	r25, Z+43	; 0x2b
    3fcc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3fce:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3fd0:	f1 01       	movw	r30, r2
    3fd2:	82 8f       	std	Z+26, r24	; 0x1a
    3fd4:	93 8f       	std	Z+27, r25	; 0x1b
    3fd6:	a4 8f       	std	Z+28, r26	; 0x1c
    3fd8:	b5 8f       	std	Z+29, r27	; 0x1d
    3fda:	f7 8e       	std	Z+31, r15	; 0x1f
    3fdc:	e6 8e       	std	Z+30, r14	; 0x1e
    3fde:	e9 a5       	ldd	r30, Y+41	; 0x29
    3fe0:	d1 01       	movw	r26, r2
    3fe2:	14 96       	adiw	r26, 0x04	; 4
    3fe4:	ec 93       	st	X, r30
    3fe6:	14 97       	sbiw	r26, 0x04	; 4
    3fe8:	15 96       	adiw	r26, 0x05	; 5
    3fea:	1c 92       	st	X, r1
    3fec:	09 81       	ldd	r16, Y+1	; 0x01
    3fee:	1a 81       	ldd	r17, Y+2	; 0x02
    3ff0:	b7 01       	movw	r22, r14
    3ff2:	c8 01       	movw	r24, r16
    3ff4:	0e 94 95 12 	call	0x252a	; 0x252a <ld_clust>
    3ff8:	d1 01       	movw	r26, r2
    3ffa:	1e 96       	adiw	r26, 0x0e	; 14
    3ffc:	6d 93       	st	X+, r22
    3ffe:	7d 93       	st	X+, r23
    4000:	8d 93       	st	X+, r24
    4002:	9c 93       	st	X, r25
    4004:	51 97       	sbiw	r26, 0x11	; 17
    4006:	f7 01       	movw	r30, r14
    4008:	27 8d       	ldd	r18, Z+31	; 0x1f
    400a:	86 8d       	ldd	r24, Z+30	; 0x1e
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	a0 e0       	ldi	r26, 0x00	; 0
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	dc 01       	movw	r26, r24
    4014:	99 27       	eor	r25, r25
    4016:	88 27       	eor	r24, r24
    4018:	b2 2b       	or	r27, r18
    401a:	24 8d       	ldd	r18, Z+28	; 0x1c
    401c:	ac 01       	movw	r20, r24
    401e:	bd 01       	movw	r22, r26
    4020:	42 2b       	or	r20, r18
    4022:	25 8d       	ldd	r18, Z+29	; 0x1d
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	92 2f       	mov	r25, r18
    4028:	88 27       	eor	r24, r24
    402a:	a0 e0       	ldi	r26, 0x00	; 0
    402c:	b0 e0       	ldi	r27, 0x00	; 0
    402e:	84 2b       	or	r24, r20
    4030:	95 2b       	or	r25, r21
    4032:	a6 2b       	or	r26, r22
    4034:	b7 2b       	or	r27, r23
    4036:	f1 01       	movw	r30, r2
    4038:	82 87       	std	Z+10, r24	; 0x0a
    403a:	93 87       	std	Z+11, r25	; 0x0b
    403c:	a4 87       	std	Z+12, r26	; 0x0c
    403e:	b5 87       	std	Z+13, r27	; 0x0d
    4040:	16 82       	std	Z+6, r1	; 0x06
    4042:	17 82       	std	Z+7, r1	; 0x07
    4044:	10 86       	std	Z+8, r1	; 0x08
    4046:	11 86       	std	Z+9, r1	; 0x09
    4048:	16 8a       	std	Z+22, r1	; 0x16
    404a:	17 8a       	std	Z+23, r1	; 0x17
    404c:	10 8e       	std	Z+24, r1	; 0x18
    404e:	11 8e       	std	Z+25, r1	; 0x19
    4050:	11 83       	std	Z+1, r17	; 0x01
    4052:	00 83       	st	Z, r16
    4054:	d8 01       	movw	r26, r16
    4056:	16 96       	adiw	r26, 0x06	; 6
    4058:	8d 91       	ld	r24, X+
    405a:	9c 91       	ld	r25, X
    405c:	17 97       	sbiw	r26, 0x07	; 7
    405e:	93 83       	std	Z+3, r25	; 0x03
    4060:	82 83       	std	Z+2, r24	; 0x02
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	8f c0       	rjmp	.+286    	; 0x4184 <__stack+0x85>
    4066:	89 e0       	ldi	r24, 0x09	; 9
    4068:	8d c0       	rjmp	.+282    	; 0x4184 <__stack+0x85>
    406a:	e8 e0       	ldi	r30, 0x08	; 8
    406c:	8e 16       	cp	r8, r30
    406e:	91 04       	cpc	r9, r1
    4070:	09 f4       	brne	.+2      	; 0x4074 <f_open+0x552>
    4072:	e4 cd       	rjmp	.-1080   	; 0x3c3c <f_open+0x11a>
    4074:	75 c0       	rjmp	.+234    	; 0x4160 <__stack+0x61>
    4076:	46 2f       	mov	r20, r22
    4078:	50 e0       	ldi	r21, 0x00	; 0
    407a:	42 32       	cpi	r20, 0x22	; 34
    407c:	51 05       	cpc	r21, r1
    407e:	09 f4       	brne	.+2      	; 0x4082 <f_open+0x560>
    4080:	71 c0       	rjmp	.+226    	; 0x4164 <__stack+0x65>
    4082:	e8 e0       	ldi	r30, 0x08	; 8
    4084:	f1 e0       	ldi	r31, 0x01	; 1
    4086:	9c 01       	movw	r18, r24
    4088:	ed cd       	rjmp	.-1062   	; 0x3c64 <f_open+0x142>
    408a:	c9 01       	movw	r24, r18
    408c:	2f eb       	ldi	r18, 0xBF	; 191
    408e:	26 0f       	add	r18, r22
    4090:	2a 31       	cpi	r18, 0x1A	; 26
    4092:	08 f4       	brcc	.+2      	; 0x4096 <f_open+0x574>
    4094:	f1 cd       	rjmp	.-1054   	; 0x3c78 <f_open+0x156>
    4096:	f2 cd       	rjmp	.-1052   	; 0x3c7c <f_open+0x15a>
    4098:	c8 0e       	add	r12, r24
    409a:	d9 1e       	adc	r13, r25
    409c:	97 2f       	mov	r25, r23
    409e:	84 e0       	ldi	r24, 0x04	; 4
    40a0:	fb cd       	rjmp	.-1034   	; 0x3c98 <f_open+0x176>
    40a2:	c8 0e       	add	r12, r24
    40a4:	d9 1e       	adc	r13, r25
    40a6:	97 2f       	mov	r25, r23
    40a8:	84 2d       	mov	r24, r4
    40aa:	f6 cd       	rjmp	.-1044   	; 0x3c98 <f_open+0x176>
    40ac:	da 01       	movw	r26, r20
    40ae:	1b 96       	adiw	r26, 0x0b	; 11
    40b0:	8c 91       	ld	r24, X
    40b2:	82 ff       	sbrs	r24, 2
    40b4:	46 ce       	rjmp	.-884    	; 0x3d42 <f_open+0x220>
    40b6:	0d c0       	rjmp	.+26     	; 0x40d2 <f_open+0x5b0>
    40b8:	ed 89       	ldd	r30, Y+21	; 0x15
    40ba:	fe 89       	ldd	r31, Y+22	; 0x16
    40bc:	93 85       	ldd	r25, Z+11	; 0x0b
    40be:	84 30       	cpi	r24, 0x04	; 4
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <f_open+0x5a2>
    40c2:	3b ce       	rjmp	.-906    	; 0x3d3a <f_open+0x218>
    40c4:	eb 88       	ldd	r14, Y+19	; 0x13
    40c6:	fc 88       	ldd	r15, Y+20	; 0x14
    40c8:	9d a1       	ldd	r25, Y+37	; 0x25
    40ca:	9c 71       	andi	r25, 0x1C	; 28
    40cc:	09 f0       	breq	.+2      	; 0x40d0 <f_open+0x5ae>
    40ce:	47 ce       	rjmp	.-882    	; 0x3d5e <f_open+0x23c>
    40d0:	68 cf       	rjmp	.-304    	; 0x3fa2 <f_open+0x480>
    40d2:	7b 01       	movw	r14, r22
    40d4:	67 2b       	or	r22, r23
    40d6:	29 f4       	brne	.+10     	; 0x40e2 <f_open+0x5c0>
    40d8:	09 c0       	rjmp	.+18     	; 0x40ec <f_open+0x5ca>
    40da:	0d a1       	ldd	r16, Y+37	; 0x25
    40dc:	0c 71       	andi	r16, 0x1C	; 28
    40de:	81 f5       	brne	.+96     	; 0x4140 <__stack+0x41>
    40e0:	21 c0       	rjmp	.+66     	; 0x4124 <__stack+0x25>
    40e2:	8d a1       	ldd	r24, Y+37	; 0x25
    40e4:	8c 71       	andi	r24, 0x1C	; 28
    40e6:	09 f0       	breq	.+2      	; 0x40ea <f_open+0x5c8>
    40e8:	81 ce       	rjmp	.-766    	; 0x3dec <f_open+0x2ca>
    40ea:	5d cf       	rjmp	.-326    	; 0x3fa6 <f_open+0x484>
    40ec:	0d a1       	ldd	r16, Y+37	; 0x25
    40ee:	0c 71       	andi	r16, 0x1C	; 28
    40f0:	51 f5       	brne	.+84     	; 0x4146 <__stack+0x47>
    40f2:	e1 2c       	mov	r14, r1
    40f4:	f1 2c       	mov	r15, r1
    40f6:	86 e0       	ldi	r24, 0x06	; 6
    40f8:	15 c0       	rjmp	.+42     	; 0x4124 <__stack+0x25>
    40fa:	87 e0       	ldi	r24, 0x07	; 7
    40fc:	01 c0       	rjmp	.+2      	; 0x4100 <__stack+0x1>
    40fe:	88 e0       	ldi	r24, 0x08	; 8
    4100:	88 23       	and	r24, r24
    4102:	09 f4       	brne	.+2      	; 0x4106 <__stack+0x7>
    4104:	59 cf       	rjmp	.-334    	; 0x3fb8 <f_open+0x496>
    4106:	3e c0       	rjmp	.+124    	; 0x4184 <__stack+0x85>
    4108:	82 e0       	ldi	r24, 0x02	; 2
    410a:	05 c0       	rjmp	.+10     	; 0x4116 <__stack+0x17>
    410c:	82 e0       	ldi	r24, 0x02	; 2
    410e:	03 c0       	rjmp	.+6      	; 0x4116 <__stack+0x17>
    4110:	82 e0       	ldi	r24, 0x02	; 2
    4112:	01 c0       	rjmp	.+2      	; 0x4116 <__stack+0x17>
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	88 23       	and	r24, r24
    4118:	09 f4       	brne	.+2      	; 0x411c <__stack+0x1d>
    411a:	51 cf       	rjmp	.-350    	; 0x3fbe <f_open+0x49c>
    411c:	33 c0       	rjmp	.+102    	; 0x4184 <__stack+0x85>
    411e:	84 e0       	ldi	r24, 0x04	; 4
    4120:	01 c0       	rjmp	.+2      	; 0x4124 <__stack+0x25>
    4122:	87 e0       	ldi	r24, 0x07	; 7
    4124:	88 23       	and	r24, r24
    4126:	09 f4       	brne	.+2      	; 0x412a <__stack+0x2b>
    4128:	5a cf       	rjmp	.-332    	; 0x3fde <f_open+0x4bc>
    412a:	2c c0       	rjmp	.+88     	; 0x4184 <__stack+0x85>
    412c:	eb 88       	ldd	r14, Y+19	; 0x13
    412e:	fc 88       	ldd	r15, Y+20	; 0x14
    4130:	86 e0       	ldi	r24, 0x06	; 6
    4132:	d3 cf       	rjmp	.-90     	; 0x40da <f_open+0x5b8>
    4134:	b9 a5       	ldd	r27, Y+41	; 0x29
    4136:	b8 60       	ori	r27, 0x08	; 8
    4138:	b9 a7       	std	Y+41, r27	; 0x29
    413a:	eb 88       	ldd	r14, Y+19	; 0x13
    413c:	fc 88       	ldd	r15, Y+20	; 0x14
    413e:	f2 cf       	rjmp	.-28     	; 0x4124 <__stack+0x25>
    4140:	84 30       	cpi	r24, 0x04	; 4
    4142:	c1 f7       	brne	.-16     	; 0x4134 <__stack+0x35>
    4144:	0f ce       	rjmp	.-994    	; 0x3d64 <f_open+0x242>
    4146:	86 e0       	ldi	r24, 0x06	; 6
    4148:	01 c0       	rjmp	.+2      	; 0x414c <__stack+0x4d>
    414a:	87 e0       	ldi	r24, 0x07	; 7
    414c:	e9 a5       	ldd	r30, Y+41	; 0x29
    414e:	e8 60       	ori	r30, 0x08	; 8
    4150:	e9 a7       	std	Y+41, r30	; 0x29
    4152:	eb 88       	ldd	r14, Y+19	; 0x13
    4154:	fc 88       	ldd	r15, Y+20	; 0x14
    4156:	e6 cf       	rjmp	.-52     	; 0x4124 <__stack+0x25>
    4158:	84 e0       	ldi	r24, 0x04	; 4
    415a:	05 c0       	rjmp	.+10     	; 0x4166 <__stack+0x67>
    415c:	85 e0       	ldi	r24, 0x05	; 5
    415e:	03 c0       	rjmp	.+6      	; 0x4166 <__stack+0x67>
    4160:	86 e0       	ldi	r24, 0x06	; 6
    4162:	01 c0       	rjmp	.+2      	; 0x4166 <__stack+0x67>
    4164:	86 e0       	ldi	r24, 0x06	; 6
    4166:	eb 88       	ldd	r14, Y+19	; 0x13
    4168:	fc 88       	ldd	r15, Y+20	; 0x14
    416a:	9d a1       	ldd	r25, Y+37	; 0x25
    416c:	9c 71       	andi	r25, 0x1C	; 28
    416e:	41 f7       	brne	.-48     	; 0x4140 <__stack+0x41>
    4170:	18 cf       	rjmp	.-464    	; 0x3fa2 <f_open+0x480>
    4172:	f9 a5       	ldd	r31, Y+41	; 0x29
    4174:	f8 60       	ori	r31, 0x08	; 8
    4176:	f9 a7       	std	Y+41, r31	; 0x29
    4178:	eb 88       	ldd	r14, Y+19	; 0x13
    417a:	fc 88       	ldd	r15, Y+20	; 0x14
    417c:	d3 cf       	rjmp	.-90     	; 0x4124 <__stack+0x25>
    417e:	84 30       	cpi	r24, 0x04	; 4
    4180:	21 f3       	breq	.-56     	; 0x414a <__stack+0x4b>
    4182:	f7 cf       	rjmp	.-18     	; 0x4172 <__stack+0x73>
    4184:	ae 96       	adiw	r28, 0x2e	; 46
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	de bf       	out	0x3e, r29	; 62
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	cd bf       	out	0x3d, r28	; 61
    4190:	df 91       	pop	r29
    4192:	cf 91       	pop	r28
    4194:	1f 91       	pop	r17
    4196:	0f 91       	pop	r16
    4198:	ff 90       	pop	r15
    419a:	ef 90       	pop	r14
    419c:	df 90       	pop	r13
    419e:	cf 90       	pop	r12
    41a0:	bf 90       	pop	r11
    41a2:	af 90       	pop	r10
    41a4:	9f 90       	pop	r9
    41a6:	8f 90       	pop	r8
    41a8:	7f 90       	pop	r7
    41aa:	6f 90       	pop	r6
    41ac:	5f 90       	pop	r5
    41ae:	4f 90       	pop	r4
    41b0:	3f 90       	pop	r3
    41b2:	2f 90       	pop	r2
    41b4:	08 95       	ret

000041b6 <f_write>:
    41b6:	3f 92       	push	r3
    41b8:	4f 92       	push	r4
    41ba:	5f 92       	push	r5
    41bc:	6f 92       	push	r6
    41be:	7f 92       	push	r7
    41c0:	8f 92       	push	r8
    41c2:	9f 92       	push	r9
    41c4:	af 92       	push	r10
    41c6:	bf 92       	push	r11
    41c8:	cf 92       	push	r12
    41ca:	df 92       	push	r13
    41cc:	ef 92       	push	r14
    41ce:	ff 92       	push	r15
    41d0:	0f 93       	push	r16
    41d2:	1f 93       	push	r17
    41d4:	cf 93       	push	r28
    41d6:	df 93       	push	r29
    41d8:	00 d0       	rcall	.+0      	; 0x41da <f_write+0x24>
    41da:	00 d0       	rcall	.+0      	; 0x41dc <f_write+0x26>
    41dc:	00 d0       	rcall	.+0      	; 0x41de <f_write+0x28>
    41de:	cd b7       	in	r28, 0x3d	; 61
    41e0:	de b7       	in	r29, 0x3e	; 62
    41e2:	9e 83       	std	Y+6, r25	; 0x06
    41e4:	8d 83       	std	Y+5, r24	; 0x05
    41e6:	4b 01       	movw	r8, r22
    41e8:	6a 01       	movw	r12, r20
    41ea:	59 01       	movw	r10, r18
    41ec:	d9 01       	movw	r26, r18
    41ee:	1d 92       	st	X+, r1
    41f0:	1c 92       	st	X, r1
    41f2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <validate>
    41f6:	81 11       	cpse	r24, r1
    41f8:	c0 c1       	rjmp	.+896    	; 0x457a <f_write+0x3c4>
    41fa:	ed 81       	ldd	r30, Y+5	; 0x05
    41fc:	fe 81       	ldd	r31, Y+6	; 0x06
    41fe:	85 81       	ldd	r24, Z+5	; 0x05
    4200:	81 11       	cpse	r24, r1
    4202:	bb c1       	rjmp	.+886    	; 0x457a <f_write+0x3c4>
    4204:	84 81       	ldd	r24, Z+4	; 0x04
    4206:	81 ff       	sbrs	r24, 1
    4208:	b7 c1       	rjmp	.+878    	; 0x4578 <f_write+0x3c2>
    420a:	86 81       	ldd	r24, Z+6	; 0x06
    420c:	97 81       	ldd	r25, Z+7	; 0x07
    420e:	a0 85       	ldd	r26, Z+8	; 0x08
    4210:	b1 85       	ldd	r27, Z+9	; 0x09
    4212:	ac 01       	movw	r20, r24
    4214:	bd 01       	movw	r22, r26
    4216:	4c 0d       	add	r20, r12
    4218:	5d 1d       	adc	r21, r13
    421a:	61 1d       	adc	r22, r1
    421c:	71 1d       	adc	r23, r1
    421e:	48 17       	cp	r20, r24
    4220:	59 07       	cpc	r21, r25
    4222:	6a 07       	cpc	r22, r26
    4224:	7b 07       	cpc	r23, r27
    4226:	08 f4       	brcc	.+2      	; 0x422a <f_write+0x74>
    4228:	8a c1       	rjmp	.+788    	; 0x453e <f_write+0x388>
    422a:	c1 14       	cp	r12, r1
    422c:	d1 04       	cpc	r13, r1
    422e:	09 f4       	brne	.+2      	; 0x4232 <f_write+0x7c>
    4230:	86 c1       	rjmp	.+780    	; 0x453e <f_write+0x388>
    4232:	b0 96       	adiw	r30, 0x20	; 32
    4234:	fc 83       	std	Y+4, r31	; 0x04
    4236:	eb 83       	std	Y+3, r30	; 0x03
    4238:	ed 81       	ldd	r30, Y+5	; 0x05
    423a:	fe 81       	ldd	r31, Y+6	; 0x06
    423c:	86 81       	ldd	r24, Z+6	; 0x06
    423e:	97 81       	ldd	r25, Z+7	; 0x07
    4240:	a0 85       	ldd	r26, Z+8	; 0x08
    4242:	b1 85       	ldd	r27, Z+9	; 0x09
    4244:	ac 01       	movw	r20, r24
    4246:	bd 01       	movw	r22, r26
    4248:	51 70       	andi	r21, 0x01	; 1
    424a:	66 27       	eor	r22, r22
    424c:	77 27       	eor	r23, r23
    424e:	45 2b       	or	r20, r21
    4250:	46 2b       	or	r20, r22
    4252:	47 2b       	or	r20, r23
    4254:	09 f0       	breq	.+2      	; 0x4258 <f_write+0xa2>
    4256:	32 c1       	rjmp	.+612    	; 0x44bc <f_write+0x306>
    4258:	e0 80       	ld	r14, Z
    425a:	f1 80       	ldd	r15, Z+1	; 0x01
    425c:	f7 01       	movw	r30, r14
    425e:	22 81       	ldd	r18, Z+2	; 0x02
    4260:	21 50       	subi	r18, 0x01	; 1
    4262:	ac 01       	movw	r20, r24
    4264:	bd 01       	movw	r22, r26
    4266:	03 2e       	mov	r0, r19
    4268:	39 e0       	ldi	r19, 0x09	; 9
    426a:	76 95       	lsr	r23
    426c:	67 95       	ror	r22
    426e:	57 95       	ror	r21
    4270:	47 95       	ror	r20
    4272:	3a 95       	dec	r19
    4274:	d1 f7       	brne	.-12     	; 0x426a <f_write+0xb4>
    4276:	30 2d       	mov	r19, r0
    4278:	32 2e       	mov	r3, r18
    427a:	34 22       	and	r3, r20
    427c:	09 f0       	breq	.+2      	; 0x4280 <f_write+0xca>
    427e:	52 c0       	rjmp	.+164    	; 0x4324 <f_write+0x16e>
    4280:	89 2b       	or	r24, r25
    4282:	8a 2b       	or	r24, r26
    4284:	8b 2b       	or	r24, r27
    4286:	99 f4       	brne	.+38     	; 0x42ae <f_write+0xf8>
    4288:	ad 81       	ldd	r26, Y+5	; 0x05
    428a:	be 81       	ldd	r27, Y+6	; 0x06
    428c:	1e 96       	adiw	r26, 0x0e	; 14
    428e:	6d 91       	ld	r22, X+
    4290:	7d 91       	ld	r23, X+
    4292:	8d 91       	ld	r24, X+
    4294:	9c 91       	ld	r25, X
    4296:	51 97       	sbiw	r26, 0x11	; 17
    4298:	61 15       	cp	r22, r1
    429a:	71 05       	cpc	r23, r1
    429c:	81 05       	cpc	r24, r1
    429e:	91 05       	cpc	r25, r1
    42a0:	a1 f4       	brne	.+40     	; 0x42ca <f_write+0x114>
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	ba 01       	movw	r22, r20
    42a8:	c7 01       	movw	r24, r14
    42aa:	9e d9       	rcall	.-3268   	; 0x35e8 <create_chain>
    42ac:	08 c0       	rjmp	.+16     	; 0x42be <f_write+0x108>
    42ae:	ed 81       	ldd	r30, Y+5	; 0x05
    42b0:	fe 81       	ldd	r31, Y+6	; 0x06
    42b2:	42 89       	ldd	r20, Z+18	; 0x12
    42b4:	53 89       	ldd	r21, Z+19	; 0x13
    42b6:	64 89       	ldd	r22, Z+20	; 0x14
    42b8:	75 89       	ldd	r23, Z+21	; 0x15
    42ba:	c7 01       	movw	r24, r14
    42bc:	95 d9       	rcall	.-3286   	; 0x35e8 <create_chain>
    42be:	61 15       	cp	r22, r1
    42c0:	71 05       	cpc	r23, r1
    42c2:	81 05       	cpc	r24, r1
    42c4:	91 05       	cpc	r25, r1
    42c6:	09 f4       	brne	.+2      	; 0x42ca <f_write+0x114>
    42c8:	3a c1       	rjmp	.+628    	; 0x453e <f_write+0x388>
    42ca:	61 30       	cpi	r22, 0x01	; 1
    42cc:	71 05       	cpc	r23, r1
    42ce:	81 05       	cpc	r24, r1
    42d0:	91 05       	cpc	r25, r1
    42d2:	31 f4       	brne	.+12     	; 0x42e0 <f_write+0x12a>
    42d4:	82 e0       	ldi	r24, 0x02	; 2
    42d6:	ad 81       	ldd	r26, Y+5	; 0x05
    42d8:	be 81       	ldd	r27, Y+6	; 0x06
    42da:	15 96       	adiw	r26, 0x05	; 5
    42dc:	8c 93       	st	X, r24
    42de:	4d c1       	rjmp	.+666    	; 0x457a <f_write+0x3c4>
    42e0:	6f 3f       	cpi	r22, 0xFF	; 255
    42e2:	bf ef       	ldi	r27, 0xFF	; 255
    42e4:	7b 07       	cpc	r23, r27
    42e6:	8b 07       	cpc	r24, r27
    42e8:	9b 07       	cpc	r25, r27
    42ea:	29 f4       	brne	.+10     	; 0x42f6 <f_write+0x140>
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	ed 81       	ldd	r30, Y+5	; 0x05
    42f0:	fe 81       	ldd	r31, Y+6	; 0x06
    42f2:	85 83       	std	Z+5, r24	; 0x05
    42f4:	42 c1       	rjmp	.+644    	; 0x457a <f_write+0x3c4>
    42f6:	ad 81       	ldd	r26, Y+5	; 0x05
    42f8:	be 81       	ldd	r27, Y+6	; 0x06
    42fa:	52 96       	adiw	r26, 0x12	; 18
    42fc:	6d 93       	st	X+, r22
    42fe:	7d 93       	st	X+, r23
    4300:	8d 93       	st	X+, r24
    4302:	9c 93       	st	X, r25
    4304:	55 97       	sbiw	r26, 0x15	; 21
    4306:	1e 96       	adiw	r26, 0x0e	; 14
    4308:	4d 90       	ld	r4, X+
    430a:	5d 90       	ld	r5, X+
    430c:	6d 90       	ld	r6, X+
    430e:	7c 90       	ld	r7, X
    4310:	51 97       	sbiw	r26, 0x11	; 17
    4312:	45 28       	or	r4, r5
    4314:	46 28       	or	r4, r6
    4316:	47 28       	or	r4, r7
    4318:	29 f4       	brne	.+10     	; 0x4324 <f_write+0x16e>
    431a:	fd 01       	movw	r30, r26
    431c:	66 87       	std	Z+14, r22	; 0x0e
    431e:	77 87       	std	Z+15, r23	; 0x0f
    4320:	80 8b       	std	Z+16, r24	; 0x10
    4322:	91 8b       	std	Z+17, r25	; 0x11
    4324:	ad 81       	ldd	r26, Y+5	; 0x05
    4326:	be 81       	ldd	r27, Y+6	; 0x06
    4328:	14 96       	adiw	r26, 0x04	; 4
    432a:	8c 91       	ld	r24, X
    432c:	14 97       	sbiw	r26, 0x04	; 4
    432e:	86 ff       	sbrs	r24, 6
    4330:	1e c0       	rjmp	.+60     	; 0x436e <f_write+0x1b8>
    4332:	56 96       	adiw	r26, 0x16	; 22
    4334:	2d 91       	ld	r18, X+
    4336:	3d 91       	ld	r19, X+
    4338:	4d 91       	ld	r20, X+
    433a:	5c 91       	ld	r21, X
    433c:	59 97       	sbiw	r26, 0x19	; 25
    433e:	ed 91       	ld	r30, X+
    4340:	fc 91       	ld	r31, X
    4342:	01 e0       	ldi	r16, 0x01	; 1
    4344:	10 e0       	ldi	r17, 0x00	; 0
    4346:	6b 81       	ldd	r22, Y+3	; 0x03
    4348:	7c 81       	ldd	r23, Y+4	; 0x04
    434a:	81 81       	ldd	r24, Z+1	; 0x01
    434c:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    4350:	88 23       	and	r24, r24
    4352:	29 f0       	breq	.+10     	; 0x435e <f_write+0x1a8>
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	ed 81       	ldd	r30, Y+5	; 0x05
    4358:	fe 81       	ldd	r31, Y+6	; 0x06
    435a:	85 83       	std	Z+5, r24	; 0x05
    435c:	0e c1       	rjmp	.+540    	; 0x457a <f_write+0x3c4>
    435e:	ad 81       	ldd	r26, Y+5	; 0x05
    4360:	be 81       	ldd	r27, Y+6	; 0x06
    4362:	14 96       	adiw	r26, 0x04	; 4
    4364:	8c 91       	ld	r24, X
    4366:	14 97       	sbiw	r26, 0x04	; 4
    4368:	8f 7b       	andi	r24, 0xBF	; 191
    436a:	14 96       	adiw	r26, 0x04	; 4
    436c:	8c 93       	st	X, r24
    436e:	ed 81       	ldd	r30, Y+5	; 0x05
    4370:	fe 81       	ldd	r31, Y+6	; 0x06
    4372:	01 90       	ld	r0, Z+
    4374:	f0 81       	ld	r31, Z
    4376:	e0 2d       	mov	r30, r0
    4378:	fa 83       	std	Y+2, r31	; 0x02
    437a:	e9 83       	std	Y+1, r30	; 0x01
    437c:	ad 81       	ldd	r26, Y+5	; 0x05
    437e:	be 81       	ldd	r27, Y+6	; 0x06
    4380:	52 96       	adiw	r26, 0x12	; 18
    4382:	4d 91       	ld	r20, X+
    4384:	5d 91       	ld	r21, X+
    4386:	6d 91       	ld	r22, X+
    4388:	7c 91       	ld	r23, X
    438a:	55 97       	sbiw	r26, 0x15	; 21
    438c:	cf 01       	movw	r24, r30
    438e:	0e 94 e5 17 	call	0x2fca	; 0x2fca <clust2sect>
    4392:	61 15       	cp	r22, r1
    4394:	71 05       	cpc	r23, r1
    4396:	81 05       	cpc	r24, r1
    4398:	91 05       	cpc	r25, r1
    439a:	29 f4       	brne	.+10     	; 0x43a6 <f_write+0x1f0>
    439c:	82 e0       	ldi	r24, 0x02	; 2
    439e:	ed 81       	ldd	r30, Y+5	; 0x05
    43a0:	fe 81       	ldd	r31, Y+6	; 0x06
    43a2:	85 83       	std	Z+5, r24	; 0x05
    43a4:	ea c0       	rjmp	.+468    	; 0x457a <f_write+0x3c4>
    43a6:	2b 01       	movw	r4, r22
    43a8:	3c 01       	movw	r6, r24
    43aa:	43 0c       	add	r4, r3
    43ac:	51 1c       	adc	r5, r1
    43ae:	61 1c       	adc	r6, r1
    43b0:	71 1c       	adc	r7, r1
    43b2:	76 01       	movw	r14, r12
    43b4:	ef 2c       	mov	r14, r15
    43b6:	ff 24       	eor	r15, r15
    43b8:	e6 94       	lsr	r14
    43ba:	e1 14       	cp	r14, r1
    43bc:	f1 04       	cpc	r15, r1
    43be:	09 f4       	brne	.+2      	; 0x43c2 <f_write+0x20c>
    43c0:	4a c0       	rjmp	.+148    	; 0x4456 <f_write+0x2a0>
    43c2:	a9 81       	ldd	r26, Y+1	; 0x01
    43c4:	ba 81       	ldd	r27, Y+2	; 0x02
    43c6:	12 96       	adiw	r26, 0x02	; 2
    43c8:	4c 91       	ld	r20, X
    43ca:	24 2f       	mov	r18, r20
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	c7 01       	movw	r24, r14
    43d0:	83 0d       	add	r24, r3
    43d2:	91 1d       	adc	r25, r1
    43d4:	28 17       	cp	r18, r24
    43d6:	39 07       	cpc	r19, r25
    43d8:	18 f4       	brcc	.+6      	; 0x43e0 <f_write+0x22a>
    43da:	79 01       	movw	r14, r18
    43dc:	e3 18       	sub	r14, r3
    43de:	f1 08       	sbc	r15, r1
    43e0:	87 01       	movw	r16, r14
    43e2:	a3 01       	movw	r20, r6
    43e4:	92 01       	movw	r18, r4
    43e6:	b4 01       	movw	r22, r8
    43e8:	e9 81       	ldd	r30, Y+1	; 0x01
    43ea:	fa 81       	ldd	r31, Y+2	; 0x02
    43ec:	81 81       	ldd	r24, Z+1	; 0x01
    43ee:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    43f2:	88 23       	and	r24, r24
    43f4:	31 f0       	breq	.+12     	; 0x4402 <f_write+0x24c>
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	ad 81       	ldd	r26, Y+5	; 0x05
    43fa:	be 81       	ldd	r27, Y+6	; 0x06
    43fc:	15 96       	adiw	r26, 0x05	; 5
    43fe:	8c 93       	st	X, r24
    4400:	bc c0       	rjmp	.+376    	; 0x457a <f_write+0x3c4>
    4402:	ed 81       	ldd	r30, Y+5	; 0x05
    4404:	fe 81       	ldd	r31, Y+6	; 0x06
    4406:	86 89       	ldd	r24, Z+22	; 0x16
    4408:	97 89       	ldd	r25, Z+23	; 0x17
    440a:	a0 8d       	ldd	r26, Z+24	; 0x18
    440c:	b1 8d       	ldd	r27, Z+25	; 0x19
    440e:	84 19       	sub	r24, r4
    4410:	95 09       	sbc	r25, r5
    4412:	a6 09       	sbc	r26, r6
    4414:	b7 09       	sbc	r27, r7
    4416:	a7 01       	movw	r20, r14
    4418:	60 e0       	ldi	r22, 0x00	; 0
    441a:	70 e0       	ldi	r23, 0x00	; 0
    441c:	84 17       	cp	r24, r20
    441e:	95 07       	cpc	r25, r21
    4420:	a6 07       	cpc	r26, r22
    4422:	b7 07       	cpc	r27, r23
    4424:	a0 f4       	brcc	.+40     	; 0x444e <f_write+0x298>
    4426:	98 2f       	mov	r25, r24
    4428:	88 27       	eor	r24, r24
    442a:	99 0f       	add	r25, r25
    442c:	b4 01       	movw	r22, r8
    442e:	68 0f       	add	r22, r24
    4430:	79 1f       	adc	r23, r25
    4432:	40 e0       	ldi	r20, 0x00	; 0
    4434:	52 e0       	ldi	r21, 0x02	; 2
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	0e 94 87 12 	call	0x250e	; 0x250e <mem_cpy>
    443e:	ad 81       	ldd	r26, Y+5	; 0x05
    4440:	be 81       	ldd	r27, Y+6	; 0x06
    4442:	14 96       	adiw	r26, 0x04	; 4
    4444:	8c 91       	ld	r24, X
    4446:	14 97       	sbiw	r26, 0x04	; 4
    4448:	8f 7b       	andi	r24, 0xBF	; 191
    444a:	14 96       	adiw	r26, 0x04	; 4
    444c:	8c 93       	st	X, r24
    444e:	fe 2c       	mov	r15, r14
    4450:	ee 24       	eor	r14, r14
    4452:	ff 0c       	add	r15, r15
    4454:	58 c0       	rjmp	.+176    	; 0x4506 <f_write+0x350>
    4456:	ed 81       	ldd	r30, Y+5	; 0x05
    4458:	fe 81       	ldd	r31, Y+6	; 0x06
    445a:	86 89       	ldd	r24, Z+22	; 0x16
    445c:	97 89       	ldd	r25, Z+23	; 0x17
    445e:	a0 8d       	ldd	r26, Z+24	; 0x18
    4460:	b1 8d       	ldd	r27, Z+25	; 0x19
    4462:	84 15       	cp	r24, r4
    4464:	95 05       	cpc	r25, r5
    4466:	a6 05       	cpc	r26, r6
    4468:	b7 05       	cpc	r27, r7
    446a:	01 f1       	breq	.+64     	; 0x44ac <f_write+0x2f6>
    446c:	46 81       	ldd	r20, Z+6	; 0x06
    446e:	57 81       	ldd	r21, Z+7	; 0x07
    4470:	60 85       	ldd	r22, Z+8	; 0x08
    4472:	71 85       	ldd	r23, Z+9	; 0x09
    4474:	82 85       	ldd	r24, Z+10	; 0x0a
    4476:	93 85       	ldd	r25, Z+11	; 0x0b
    4478:	a4 85       	ldd	r26, Z+12	; 0x0c
    447a:	b5 85       	ldd	r27, Z+13	; 0x0d
    447c:	48 17       	cp	r20, r24
    447e:	59 07       	cpc	r21, r25
    4480:	6a 07       	cpc	r22, r26
    4482:	7b 07       	cpc	r23, r27
    4484:	98 f4       	brcc	.+38     	; 0x44ac <f_write+0x2f6>
    4486:	01 e0       	ldi	r16, 0x01	; 1
    4488:	10 e0       	ldi	r17, 0x00	; 0
    448a:	a3 01       	movw	r20, r6
    448c:	92 01       	movw	r18, r4
    448e:	6b 81       	ldd	r22, Y+3	; 0x03
    4490:	7c 81       	ldd	r23, Y+4	; 0x04
    4492:	a9 81       	ldd	r26, Y+1	; 0x01
    4494:	ba 81       	ldd	r27, Y+2	; 0x02
    4496:	11 96       	adiw	r26, 0x01	; 1
    4498:	8c 91       	ld	r24, X
    449a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <disk_read>
    449e:	88 23       	and	r24, r24
    44a0:	29 f0       	breq	.+10     	; 0x44ac <f_write+0x2f6>
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	ed 81       	ldd	r30, Y+5	; 0x05
    44a6:	fe 81       	ldd	r31, Y+6	; 0x06
    44a8:	85 83       	std	Z+5, r24	; 0x05
    44aa:	67 c0       	rjmp	.+206    	; 0x457a <f_write+0x3c4>
    44ac:	ad 81       	ldd	r26, Y+5	; 0x05
    44ae:	be 81       	ldd	r27, Y+6	; 0x06
    44b0:	56 96       	adiw	r26, 0x16	; 22
    44b2:	4d 92       	st	X+, r4
    44b4:	5d 92       	st	X+, r5
    44b6:	6d 92       	st	X+, r6
    44b8:	7c 92       	st	X, r7
    44ba:	59 97       	sbiw	r26, 0x19	; 25
    44bc:	ed 81       	ldd	r30, Y+5	; 0x05
    44be:	fe 81       	ldd	r31, Y+6	; 0x06
    44c0:	86 81       	ldd	r24, Z+6	; 0x06
    44c2:	97 81       	ldd	r25, Z+7	; 0x07
    44c4:	a0 85       	ldd	r26, Z+8	; 0x08
    44c6:	b1 85       	ldd	r27, Z+9	; 0x09
    44c8:	ac 01       	movw	r20, r24
    44ca:	51 70       	andi	r21, 0x01	; 1
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	32 e0       	ldi	r19, 0x02	; 2
    44d0:	24 1b       	sub	r18, r20
    44d2:	35 0b       	sbc	r19, r21
    44d4:	76 01       	movw	r14, r12
    44d6:	2c 15       	cp	r18, r12
    44d8:	3d 05       	cpc	r19, r13
    44da:	08 f4       	brcc	.+2      	; 0x44de <f_write+0x328>
    44dc:	79 01       	movw	r14, r18
    44de:	91 70       	andi	r25, 0x01	; 1
    44e0:	aa 27       	eor	r26, r26
    44e2:	bb 27       	eor	r27, r27
    44e4:	80 96       	adiw	r24, 0x20	; 32
    44e6:	a7 01       	movw	r20, r14
    44e8:	b4 01       	movw	r22, r8
    44ea:	2d 81       	ldd	r18, Y+5	; 0x05
    44ec:	3e 81       	ldd	r19, Y+6	; 0x06
    44ee:	82 0f       	add	r24, r18
    44f0:	93 1f       	adc	r25, r19
    44f2:	0e 94 87 12 	call	0x250e	; 0x250e <mem_cpy>
    44f6:	ad 81       	ldd	r26, Y+5	; 0x05
    44f8:	be 81       	ldd	r27, Y+6	; 0x06
    44fa:	14 96       	adiw	r26, 0x04	; 4
    44fc:	8c 91       	ld	r24, X
    44fe:	14 97       	sbiw	r26, 0x04	; 4
    4500:	80 64       	ori	r24, 0x40	; 64
    4502:	14 96       	adiw	r26, 0x04	; 4
    4504:	8c 93       	st	X, r24
    4506:	8e 0c       	add	r8, r14
    4508:	9f 1c       	adc	r9, r15
    450a:	ed 81       	ldd	r30, Y+5	; 0x05
    450c:	fe 81       	ldd	r31, Y+6	; 0x06
    450e:	86 81       	ldd	r24, Z+6	; 0x06
    4510:	97 81       	ldd	r25, Z+7	; 0x07
    4512:	a0 85       	ldd	r26, Z+8	; 0x08
    4514:	b1 85       	ldd	r27, Z+9	; 0x09
    4516:	8e 0d       	add	r24, r14
    4518:	9f 1d       	adc	r25, r15
    451a:	a1 1d       	adc	r26, r1
    451c:	b1 1d       	adc	r27, r1
    451e:	86 83       	std	Z+6, r24	; 0x06
    4520:	97 83       	std	Z+7, r25	; 0x07
    4522:	a0 87       	std	Z+8, r26	; 0x08
    4524:	b1 87       	std	Z+9, r27	; 0x09
    4526:	d5 01       	movw	r26, r10
    4528:	8d 91       	ld	r24, X+
    452a:	9c 91       	ld	r25, X
    452c:	11 97       	sbiw	r26, 0x01	; 1
    452e:	8e 0d       	add	r24, r14
    4530:	9f 1d       	adc	r25, r15
    4532:	8d 93       	st	X+, r24
    4534:	9c 93       	st	X, r25
    4536:	ce 18       	sub	r12, r14
    4538:	df 08       	sbc	r13, r15
    453a:	09 f0       	breq	.+2      	; 0x453e <f_write+0x388>
    453c:	7d ce       	rjmp	.-774    	; 0x4238 <f_write+0x82>
    453e:	ed 81       	ldd	r30, Y+5	; 0x05
    4540:	fe 81       	ldd	r31, Y+6	; 0x06
    4542:	86 81       	ldd	r24, Z+6	; 0x06
    4544:	97 81       	ldd	r25, Z+7	; 0x07
    4546:	a0 85       	ldd	r26, Z+8	; 0x08
    4548:	b1 85       	ldd	r27, Z+9	; 0x09
    454a:	42 85       	ldd	r20, Z+10	; 0x0a
    454c:	53 85       	ldd	r21, Z+11	; 0x0b
    454e:	64 85       	ldd	r22, Z+12	; 0x0c
    4550:	75 85       	ldd	r23, Z+13	; 0x0d
    4552:	48 17       	cp	r20, r24
    4554:	59 07       	cpc	r21, r25
    4556:	6a 07       	cpc	r22, r26
    4558:	7b 07       	cpc	r23, r27
    455a:	20 f4       	brcc	.+8      	; 0x4564 <f_write+0x3ae>
    455c:	82 87       	std	Z+10, r24	; 0x0a
    455e:	93 87       	std	Z+11, r25	; 0x0b
    4560:	a4 87       	std	Z+12, r26	; 0x0c
    4562:	b5 87       	std	Z+13, r27	; 0x0d
    4564:	ad 81       	ldd	r26, Y+5	; 0x05
    4566:	be 81       	ldd	r27, Y+6	; 0x06
    4568:	14 96       	adiw	r26, 0x04	; 4
    456a:	8c 91       	ld	r24, X
    456c:	14 97       	sbiw	r26, 0x04	; 4
    456e:	80 62       	ori	r24, 0x20	; 32
    4570:	14 96       	adiw	r26, 0x04	; 4
    4572:	8c 93       	st	X, r24
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	01 c0       	rjmp	.+2      	; 0x457a <f_write+0x3c4>
    4578:	87 e0       	ldi	r24, 0x07	; 7
    457a:	26 96       	adiw	r28, 0x06	; 6
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	df 91       	pop	r29
    4588:	cf 91       	pop	r28
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	df 90       	pop	r13
    4594:	cf 90       	pop	r12
    4596:	bf 90       	pop	r11
    4598:	af 90       	pop	r10
    459a:	9f 90       	pop	r9
    459c:	8f 90       	pop	r8
    459e:	7f 90       	pop	r7
    45a0:	6f 90       	pop	r6
    45a2:	5f 90       	pop	r5
    45a4:	4f 90       	pop	r4
    45a6:	3f 90       	pop	r3
    45a8:	08 95       	ret

000045aa <putc_bfd>:
    45aa:	ef 92       	push	r14
    45ac:	ff 92       	push	r15
    45ae:	0f 93       	push	r16
    45b0:	1f 93       	push	r17
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	00 d0       	rcall	.+0      	; 0x45b8 <putc_bfd+0xe>
    45b8:	cd b7       	in	r28, 0x3d	; 61
    45ba:	de b7       	in	r29, 0x3e	; 62
    45bc:	fc 01       	movw	r30, r24
    45be:	22 81       	ldd	r18, Z+2	; 0x02
    45c0:	33 81       	ldd	r19, Z+3	; 0x03
    45c2:	33 23       	and	r19, r19
    45c4:	6c f1       	brlt	.+90     	; 0x4620 <putc_bfd+0x76>
    45c6:	8c 01       	movw	r16, r24
    45c8:	79 01       	movw	r14, r18
    45ca:	ff ef       	ldi	r31, 0xFF	; 255
    45cc:	ef 1a       	sub	r14, r31
    45ce:	ff 0a       	sbc	r15, r31
    45d0:	fc 01       	movw	r30, r24
    45d2:	e2 0f       	add	r30, r18
    45d4:	f3 1f       	adc	r31, r19
    45d6:	66 83       	std	Z+6, r22	; 0x06
    45d8:	8d e3       	ldi	r24, 0x3D	; 61
    45da:	e8 16       	cp	r14, r24
    45dc:	f1 04       	cpc	r15, r1
    45de:	c4 f0       	brlt	.+48     	; 0x4610 <putc_bfd+0x66>
    45e0:	9e 01       	movw	r18, r28
    45e2:	2f 5f       	subi	r18, 0xFF	; 255
    45e4:	3f 4f       	sbci	r19, 0xFF	; 255
    45e6:	a7 01       	movw	r20, r14
    45e8:	b8 01       	movw	r22, r16
    45ea:	6a 5f       	subi	r22, 0xFA	; 250
    45ec:	7f 4f       	sbci	r23, 0xFF	; 255
    45ee:	f8 01       	movw	r30, r16
    45f0:	80 81       	ld	r24, Z
    45f2:	91 81       	ldd	r25, Z+1	; 0x01
    45f4:	e0 dd       	rcall	.-1088   	; 0x41b6 <f_write>
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	29 81       	ldd	r18, Y+1	; 0x01
    45fc:	3a 81       	ldd	r19, Y+2	; 0x02
    45fe:	e2 16       	cp	r14, r18
    4600:	f3 06       	cpc	r15, r19
    4602:	11 f4       	brne	.+4      	; 0x4608 <putc_bfd+0x5e>
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	ee 24       	eor	r14, r14
    460a:	ff 24       	eor	r15, r15
    460c:	e8 1a       	sub	r14, r24
    460e:	f9 0a       	sbc	r15, r25
    4610:	f8 01       	movw	r30, r16
    4612:	f3 82       	std	Z+3, r15	; 0x03
    4614:	e2 82       	std	Z+2, r14	; 0x02
    4616:	84 81       	ldd	r24, Z+4	; 0x04
    4618:	95 81       	ldd	r25, Z+5	; 0x05
    461a:	01 96       	adiw	r24, 0x01	; 1
    461c:	95 83       	std	Z+5, r25	; 0x05
    461e:	84 83       	std	Z+4, r24	; 0x04
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	df 91       	pop	r29
    4626:	cf 91       	pop	r28
    4628:	1f 91       	pop	r17
    462a:	0f 91       	pop	r16
    462c:	ff 90       	pop	r15
    462e:	ef 90       	pop	r14
    4630:	08 95       	ret

00004632 <f_sync>:
    4632:	0f 93       	push	r16
    4634:	1f 93       	push	r17
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	ec 01       	movw	r28, r24
    463c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <validate>
    4640:	81 11       	cpse	r24, r1
    4642:	b5 c0       	rjmp	.+362    	; 0x47ae <f_sync+0x17c>
    4644:	8c 81       	ldd	r24, Y+4	; 0x04
    4646:	85 ff       	sbrs	r24, 5
    4648:	b4 c0       	rjmp	.+360    	; 0x47b2 <f_sync+0x180>
    464a:	86 ff       	sbrs	r24, 6
    464c:	13 c0       	rjmp	.+38     	; 0x4674 <f_sync+0x42>
    464e:	2e 89       	ldd	r18, Y+22	; 0x16
    4650:	3f 89       	ldd	r19, Y+23	; 0x17
    4652:	48 8d       	ldd	r20, Y+24	; 0x18
    4654:	59 8d       	ldd	r21, Y+25	; 0x19
    4656:	e8 81       	ld	r30, Y
    4658:	f9 81       	ldd	r31, Y+1	; 0x01
    465a:	01 e0       	ldi	r16, 0x01	; 1
    465c:	10 e0       	ldi	r17, 0x00	; 0
    465e:	be 01       	movw	r22, r28
    4660:	60 5e       	subi	r22, 0xE0	; 224
    4662:	7f 4f       	sbci	r23, 0xFF	; 255
    4664:	81 81       	ldd	r24, Z+1	; 0x01
    4666:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    466a:	81 11       	cpse	r24, r1
    466c:	a4 c0       	rjmp	.+328    	; 0x47b6 <f_sync+0x184>
    466e:	8c 81       	ldd	r24, Y+4	; 0x04
    4670:	8f 7b       	andi	r24, 0xBF	; 191
    4672:	8c 83       	std	Y+4, r24	; 0x04
    4674:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4676:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4678:	6c 8d       	ldd	r22, Y+28	; 0x1c
    467a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    467c:	88 81       	ld	r24, Y
    467e:	99 81       	ldd	r25, Y+1	; 0x01
    4680:	0e 94 59 13 	call	0x26b2	; 0x26b2 <move_window>
    4684:	81 11       	cpse	r24, r1
    4686:	99 c0       	rjmp	.+306    	; 0x47ba <f_sync+0x188>
    4688:	0e 8d       	ldd	r16, Y+30	; 0x1e
    468a:	1f 8d       	ldd	r17, Y+31	; 0x1f
    468c:	f8 01       	movw	r30, r16
    468e:	83 85       	ldd	r24, Z+11	; 0x0b
    4690:	80 62       	ori	r24, 0x20	; 32
    4692:	83 87       	std	Z+11, r24	; 0x0b
    4694:	8a 85       	ldd	r24, Y+10	; 0x0a
    4696:	84 8f       	std	Z+28, r24	; 0x1c
    4698:	8b 85       	ldd	r24, Y+11	; 0x0b
    469a:	85 8f       	std	Z+29, r24	; 0x1d
    469c:	8c 85       	ldd	r24, Y+12	; 0x0c
    469e:	86 8f       	std	Z+30, r24	; 0x1e
    46a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46a2:	87 8f       	std	Z+31, r24	; 0x1f
    46a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    46a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    46a8:	a8 89       	ldd	r26, Y+16	; 0x10
    46aa:	b9 89       	ldd	r27, Y+17	; 0x11
    46ac:	82 8f       	std	Z+26, r24	; 0x1a
    46ae:	93 8f       	std	Z+27, r25	; 0x1b
    46b0:	cd 01       	movw	r24, r26
    46b2:	aa 27       	eor	r26, r26
    46b4:	bb 27       	eor	r27, r27
    46b6:	84 8b       	std	Z+20, r24	; 0x14
    46b8:	95 8b       	std	Z+21, r25	; 0x15
    46ba:	0e 94 63 31 	call	0x62c6	; 0x62c6 <get_fattime>
    46be:	f8 01       	movw	r30, r16
    46c0:	66 8b       	std	Z+22, r22	; 0x16
    46c2:	77 8b       	std	Z+23, r23	; 0x17
    46c4:	80 8f       	std	Z+24, r24	; 0x18
    46c6:	91 8f       	std	Z+25, r25	; 0x19
    46c8:	12 8a       	std	Z+18, r1	; 0x12
    46ca:	13 8a       	std	Z+19, r1	; 0x13
    46cc:	8c 81       	ldd	r24, Y+4	; 0x04
    46ce:	8f 7d       	andi	r24, 0xDF	; 223
    46d0:	8c 83       	std	Y+4, r24	; 0x04
    46d2:	e8 81       	ld	r30, Y
    46d4:	f9 81       	ldd	r31, Y+1	; 0x01
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	84 83       	std	Z+4, r24	; 0x04
    46da:	09 90       	ld	r0, Y+
    46dc:	d8 81       	ld	r29, Y
    46de:	c0 2d       	mov	r28, r0
    46e0:	ce 01       	movw	r24, r28
    46e2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <sync_window>
    46e6:	81 11       	cpse	r24, r1
    46e8:	6a c0       	rjmp	.+212    	; 0x47be <f_sync+0x18c>
    46ea:	88 81       	ld	r24, Y
    46ec:	83 30       	cpi	r24, 0x03	; 3
    46ee:	09 f0       	breq	.+2      	; 0x46f2 <f_sync+0xc0>
    46f0:	53 c0       	rjmp	.+166    	; 0x4798 <f_sync+0x166>
    46f2:	8d 81       	ldd	r24, Y+5	; 0x05
    46f4:	81 30       	cpi	r24, 0x01	; 1
    46f6:	09 f0       	breq	.+2      	; 0x46fa <f_sync+0xc8>
    46f8:	4f c0       	rjmp	.+158    	; 0x4798 <f_sync+0x166>
    46fa:	be 01       	movw	r22, r28
    46fc:	62 5d       	subi	r22, 0xD2	; 210
    46fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4700:	fb 01       	movw	r30, r22
    4702:	ce 01       	movw	r24, r28
    4704:	82 5d       	subi	r24, 0xD2	; 210
    4706:	9d 4f       	sbci	r25, 0xFD	; 253
    4708:	11 92       	st	Z+, r1
    470a:	e8 17       	cp	r30, r24
    470c:	f9 07       	cpc	r31, r25
    470e:	e1 f7       	brne	.-8      	; 0x4708 <f_sync+0xd6>
    4710:	85 e5       	ldi	r24, 0x55	; 85
    4712:	fe 01       	movw	r30, r28
    4714:	e4 5d       	subi	r30, 0xD4	; 212
    4716:	fd 4f       	sbci	r31, 0xFD	; 253
    4718:	80 83       	st	Z, r24
    471a:	8a ea       	ldi	r24, 0xAA	; 170
    471c:	31 96       	adiw	r30, 0x01	; 1
    471e:	80 83       	st	Z, r24
    4720:	82 e5       	ldi	r24, 0x52	; 82
    4722:	8e a7       	std	Y+46, r24	; 0x2e
    4724:	8f a7       	std	Y+47, r24	; 0x2f
    4726:	81 e6       	ldi	r24, 0x61	; 97
    4728:	88 ab       	std	Y+48, r24	; 0x30
    472a:	91 e4       	ldi	r25, 0x41	; 65
    472c:	99 ab       	std	Y+49, r25	; 0x31
    472e:	22 e7       	ldi	r18, 0x72	; 114
    4730:	7b 97       	sbiw	r30, 0x1b	; 27
    4732:	20 83       	st	Z, r18
    4734:	31 96       	adiw	r30, 0x01	; 1
    4736:	20 83       	st	Z, r18
    4738:	31 96       	adiw	r30, 0x01	; 1
    473a:	90 83       	st	Z, r25
    473c:	31 96       	adiw	r30, 0x01	; 1
    473e:	80 83       	st	Z, r24
    4740:	3e 85       	ldd	r19, Y+14	; 0x0e
    4742:	2f 85       	ldd	r18, Y+15	; 0x0f
    4744:	98 89       	ldd	r25, Y+16	; 0x10
    4746:	89 89       	ldd	r24, Y+17	; 0x11
    4748:	31 96       	adiw	r30, 0x01	; 1
    474a:	30 83       	st	Z, r19
    474c:	31 96       	adiw	r30, 0x01	; 1
    474e:	20 83       	st	Z, r18
    4750:	31 96       	adiw	r30, 0x01	; 1
    4752:	90 83       	st	Z, r25
    4754:	31 96       	adiw	r30, 0x01	; 1
    4756:	80 83       	st	Z, r24
    4758:	3a 85       	ldd	r19, Y+10	; 0x0a
    475a:	2b 85       	ldd	r18, Y+11	; 0x0b
    475c:	9c 85       	ldd	r25, Y+12	; 0x0c
    475e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4760:	31 96       	adiw	r30, 0x01	; 1
    4762:	30 83       	st	Z, r19
    4764:	31 96       	adiw	r30, 0x01	; 1
    4766:	20 83       	st	Z, r18
    4768:	31 96       	adiw	r30, 0x01	; 1
    476a:	90 83       	st	Z, r25
    476c:	31 96       	adiw	r30, 0x01	; 1
    476e:	80 83       	st	Z, r24
    4770:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4772:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4774:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4776:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4778:	9c 01       	movw	r18, r24
    477a:	ad 01       	movw	r20, r26
    477c:	2f 5f       	subi	r18, 0xFF	; 255
    477e:	3f 4f       	sbci	r19, 0xFF	; 255
    4780:	4f 4f       	sbci	r20, 0xFF	; 255
    4782:	5f 4f       	sbci	r21, 0xFF	; 255
    4784:	2a a7       	std	Y+42, r18	; 0x2a
    4786:	3b a7       	std	Y+43, r19	; 0x2b
    4788:	4c a7       	std	Y+44, r20	; 0x2c
    478a:	5d a7       	std	Y+45, r21	; 0x2d
    478c:	01 e0       	ldi	r16, 0x01	; 1
    478e:	10 e0       	ldi	r17, 0x00	; 0
    4790:	89 81       	ldd	r24, Y+1	; 0x01
    4792:	0e 94 ed 0a 	call	0x15da	; 0x15da <disk_write>
    4796:	1d 82       	std	Y+5, r1	; 0x05
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	50 e0       	ldi	r21, 0x00	; 0
    479c:	60 e0       	ldi	r22, 0x00	; 0
    479e:	89 81       	ldd	r24, Y+1	; 0x01
    47a0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <disk_ioctl>
    47a4:	91 e0       	ldi	r25, 0x01	; 1
    47a6:	81 11       	cpse	r24, r1
    47a8:	0b c0       	rjmp	.+22     	; 0x47c0 <f_sync+0x18e>
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	09 c0       	rjmp	.+18     	; 0x47c0 <f_sync+0x18e>
    47ae:	98 2f       	mov	r25, r24
    47b0:	07 c0       	rjmp	.+14     	; 0x47c0 <f_sync+0x18e>
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	05 c0       	rjmp	.+10     	; 0x47c0 <f_sync+0x18e>
    47b6:	91 e0       	ldi	r25, 0x01	; 1
    47b8:	03 c0       	rjmp	.+6      	; 0x47c0 <f_sync+0x18e>
    47ba:	98 2f       	mov	r25, r24
    47bc:	01 c0       	rjmp	.+2      	; 0x47c0 <f_sync+0x18e>
    47be:	98 2f       	mov	r25, r24
    47c0:	89 2f       	mov	r24, r25
    47c2:	df 91       	pop	r29
    47c4:	cf 91       	pop	r28
    47c6:	1f 91       	pop	r17
    47c8:	0f 91       	pop	r16
    47ca:	08 95       	ret

000047cc <f_close>:
    47cc:	cf 93       	push	r28
    47ce:	df 93       	push	r29
    47d0:	ec 01       	movw	r28, r24
    47d2:	2f df       	rcall	.-418    	; 0x4632 <f_sync>
    47d4:	81 11       	cpse	r24, r1
    47d6:	07 c0       	rjmp	.+14     	; 0x47e6 <f_close+0x1a>
    47d8:	ce 01       	movw	r24, r28
    47da:	0e 94 fe 13 	call	0x27fc	; 0x27fc <validate>
    47de:	81 11       	cpse	r24, r1
    47e0:	02 c0       	rjmp	.+4      	; 0x47e6 <f_close+0x1a>
    47e2:	19 82       	std	Y+1, r1	; 0x01
    47e4:	18 82       	st	Y, r1
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	08 95       	ret

000047ec <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    47ec:	2f 92       	push	r2
    47ee:	3f 92       	push	r3
    47f0:	4f 92       	push	r4
    47f2:	5f 92       	push	r5
    47f4:	6f 92       	push	r6
    47f6:	7f 92       	push	r7
    47f8:	8f 92       	push	r8
    47fa:	9f 92       	push	r9
    47fc:	af 92       	push	r10
    47fe:	bf 92       	push	r11
    4800:	cf 92       	push	r12
    4802:	df 92       	push	r13
    4804:	ef 92       	push	r14
    4806:	ff 92       	push	r15
    4808:	0f 93       	push	r16
    480a:	1f 93       	push	r17
    480c:	cf 93       	push	r28
    480e:	df 93       	push	r29
    4810:	cd b7       	in	r28, 0x3d	; 61
    4812:	de b7       	in	r29, 0x3e	; 62
    4814:	cc 55       	subi	r28, 0x5C	; 92
    4816:	d1 09       	sbc	r29, r1
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	f8 94       	cli
    481c:	de bf       	out	0x3e, r29	; 62
    481e:	0f be       	out	0x3f, r0	; 63
    4820:	cd bf       	out	0x3d, r28	; 61
    4822:	e5 96       	adiw	r28, 0x35	; 53
    4824:	ee ac       	ldd	r14, Y+62	; 0x3e
    4826:	ff ac       	ldd	r15, Y+63	; 0x3f
    4828:	e5 97       	sbiw	r28, 0x35	; 53
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    482a:	e3 96       	adiw	r28, 0x33	; 51
    482c:	8e ad       	ldd	r24, Y+62	; 0x3e
    482e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4830:	e3 97       	sbiw	r28, 0x33	; 51
    4832:	9c 8b       	std	Y+20, r25	; 0x14
    4834:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    4836:	1e 8a       	std	Y+22, r1	; 0x16
    4838:	1d 8a       	std	Y+21, r1	; 0x15
    483a:	18 8e       	std	Y+24, r1	; 0x18
    483c:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    483e:	2e 01       	movw	r4, r28
    4840:	25 e7       	ldi	r18, 0x75	; 117
    4842:	42 0e       	add	r4, r18
    4844:	51 1c       	adc	r5, r1
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
			f |= 8;
		}
		i = 0;
    4846:	21 2c       	mov	r2, r1
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    4848:	0f 2e       	mov	r0, r31
    484a:	f7 e0       	ldi	r31, 0x07	; 7
    484c:	3f 2e       	mov	r3, r31
    484e:	f0 2d       	mov	r31, r0
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4850:	d7 01       	movw	r26, r14
    4852:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    4854:	66 23       	and	r22, r22
    4856:	09 f4       	brne	.+2      	; 0x485a <f_printf+0x6e>
    4858:	8e c1       	rjmp	.+796    	; 0x4b76 <f_printf+0x38a>
		if (c != '%') {				/* Non escape character */
    485a:	65 32       	cpi	r22, 0x25	; 37
    485c:	39 f0       	breq	.+14     	; 0x486c <f_printf+0x80>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    485e:	bf ef       	ldi	r27, 0xFF	; 255
    4860:	eb 1a       	sub	r14, r27
    4862:	fb 0a       	sbc	r15, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    4864:	ce 01       	movw	r24, r28
    4866:	43 96       	adiw	r24, 0x13	; 19
    4868:	a0 de       	rcall	.-704    	; 0x45aa <putc_bfd>
			continue;
    486a:	f2 cf       	rjmp	.-28     	; 0x4850 <f_printf+0x64>
		}
		w = f = 0;
		c = *fmt++;
    486c:	f7 01       	movw	r30, r14
    486e:	d1 80       	ldd	r13, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    4870:	f0 e3       	ldi	r31, 0x30	; 48
    4872:	df 12       	cpse	r13, r31
    4874:	09 c0       	rjmp	.+18     	; 0x4888 <f_printf+0x9c>
			f = 1; c = *fmt++;
    4876:	d7 01       	movw	r26, r14
    4878:	12 96       	adiw	r26, 0x02	; 2
    487a:	dc 90       	ld	r13, X
    487c:	f7 01       	movw	r30, r14
    487e:	33 96       	adiw	r30, 0x03	; 3
    4880:	7f 01       	movw	r14, r30
    4882:	77 24       	eor	r7, r7
    4884:	73 94       	inc	r7
    4886:	11 c0       	rjmp	.+34     	; 0x48aa <f_printf+0xbe>
		} else {
			if (c == '-') {			/* Flag: left justified */
    4888:	fd e2       	ldi	r31, 0x2D	; 45
    488a:	df 16       	cp	r13, r31
    488c:	29 f0       	breq	.+10     	; 0x4898 <f_printf+0xac>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    488e:	22 e0       	ldi	r18, 0x02	; 2
    4890:	e2 0e       	add	r14, r18
    4892:	f1 1c       	adc	r15, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    4894:	71 2c       	mov	r7, r1
    4896:	09 c0       	rjmp	.+18     	; 0x48aa <f_printf+0xbe>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    4898:	d7 01       	movw	r26, r14
    489a:	12 96       	adiw	r26, 0x02	; 2
    489c:	dc 90       	ld	r13, X
    489e:	f7 01       	movw	r30, r14
    48a0:	33 96       	adiw	r30, 0x03	; 3
    48a2:	7f 01       	movw	r14, r30
    48a4:	68 94       	set
    48a6:	77 24       	eor	r7, r7
    48a8:	71 f8       	bld	r7, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    48aa:	80 ed       	ldi	r24, 0xD0	; 208
    48ac:	8d 0d       	add	r24, r13
    48ae:	8a 30       	cpi	r24, 0x0A	; 10
    48b0:	f0 f4       	brcc	.+60     	; 0x48ee <f_printf+0x102>
    48b2:	02 2d       	mov	r16, r2
    48b4:	10 e0       	ldi	r17, 0x00	; 0
    48b6:	8d 2d       	mov	r24, r13
			w = w * 10 + c - '0';
    48b8:	98 01       	movw	r18, r16
    48ba:	22 0f       	add	r18, r18
    48bc:	33 1f       	adc	r19, r19
    48be:	00 0f       	add	r16, r16
    48c0:	11 1f       	adc	r17, r17
    48c2:	00 0f       	add	r16, r16
    48c4:	11 1f       	adc	r17, r17
    48c6:	00 0f       	add	r16, r16
    48c8:	11 1f       	adc	r17, r17
    48ca:	02 0f       	add	r16, r18
    48cc:	13 1f       	adc	r17, r19
    48ce:	08 0f       	add	r16, r24
    48d0:	11 1d       	adc	r17, r1
    48d2:	00 53       	subi	r16, 0x30	; 48
    48d4:	11 09       	sbc	r17, r1
			c = *fmt++;
    48d6:	ff ef       	ldi	r31, 0xFF	; 255
    48d8:	ef 1a       	sub	r14, r31
    48da:	ff 0a       	sbc	r15, r31
    48dc:	f7 01       	movw	r30, r14
    48de:	31 97       	sbiw	r30, 0x01	; 1
    48e0:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    48e2:	90 ed       	ldi	r25, 0xD0	; 208
    48e4:	98 0f       	add	r25, r24
    48e6:	9a 30       	cpi	r25, 0x0A	; 10
    48e8:	38 f3       	brcs	.-50     	; 0x48b8 <f_printf+0xcc>
    48ea:	d8 2e       	mov	r13, r24
    48ec:	02 c0       	rjmp	.+4      	; 0x48f2 <f_printf+0x106>
    48ee:	02 2d       	mov	r16, r2
    48f0:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    48f2:	8d 2d       	mov	r24, r13
    48f4:	8f 7d       	andi	r24, 0xDF	; 223
    48f6:	8c 34       	cpi	r24, 0x4C	; 76
    48f8:	41 f4       	brne	.+16     	; 0x490a <f_printf+0x11e>
			f |= 4; c = *fmt++;
    48fa:	27 2d       	mov	r18, r7
    48fc:	24 60       	ori	r18, 0x04	; 4
    48fe:	72 2e       	mov	r7, r18
    4900:	d7 01       	movw	r26, r14
    4902:	dc 90       	ld	r13, X
    4904:	f7 01       	movw	r30, r14
    4906:	31 96       	adiw	r30, 0x01	; 1
    4908:	7f 01       	movw	r14, r30
		}
		if (!c) break;
    490a:	dd 20       	and	r13, r13
    490c:	09 f4       	brne	.+2      	; 0x4910 <f_printf+0x124>
    490e:	33 c1       	rjmp	.+614    	; 0x4b76 <f_printf+0x38a>
		d = c;
		if (IsLower(d)) d -= 0x20;
    4910:	8f e9       	ldi	r24, 0x9F	; 159
    4912:	8d 0d       	add	r24, r13
    4914:	8a 31       	cpi	r24, 0x1A	; 26
    4916:	18 f4       	brcc	.+6      	; 0x491e <f_printf+0x132>
    4918:	30 ee       	ldi	r19, 0xE0	; 224
    491a:	3d 0d       	add	r19, r13
    491c:	01 c0       	rjmp	.+2      	; 0x4920 <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    491e:	3d 2d       	mov	r19, r13
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    4920:	83 2f       	mov	r24, r19
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	fc 01       	movw	r30, r24
    4926:	e2 54       	subi	r30, 0x42	; 66
    4928:	f1 09       	sbc	r31, r1
    492a:	e7 31       	cpi	r30, 0x17	; 23
    492c:	f1 05       	cpc	r31, r1
    492e:	08 f0       	brcs	.+2      	; 0x4932 <f_printf+0x146>
    4930:	58 c0       	rjmp	.+176    	; 0x49e2 <f_printf+0x1f6>
    4932:	e3 58       	subi	r30, 0x83	; 131
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	0c 94 dd 4a 	jmp	0x95ba	; 0x95ba <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    493a:	f2 01       	movw	r30, r4
    493c:	a0 80       	ld	r10, Z
    493e:	b1 80       	ldd	r11, Z+1	; 0x01
    4940:	f2 e0       	ldi	r31, 0x02	; 2
    4942:	4f 0e       	add	r4, r31
    4944:	51 1c       	adc	r5, r1
			for (j = 0; p[j]; j++) ;
    4946:	d5 01       	movw	r26, r10
    4948:	6c 91       	ld	r22, X
    494a:	66 23       	and	r22, r22
    494c:	09 f4       	brne	.+2      	; 0x4950 <f_printf+0x164>
    494e:	38 c1       	rjmp	.+624    	; 0x4bc0 <f_printf+0x3d4>
    4950:	f5 01       	movw	r30, r10
    4952:	31 96       	adiw	r30, 0x01	; 1
    4954:	c2 2c       	mov	r12, r2
    4956:	d1 2c       	mov	r13, r1
    4958:	bf ef       	ldi	r27, 0xFF	; 255
    495a:	cb 1a       	sub	r12, r27
    495c:	db 0a       	sbc	r13, r27
    495e:	81 91       	ld	r24, Z+
    4960:	81 11       	cpse	r24, r1
    4962:	fa cf       	rjmp	.-12     	; 0x4958 <f_printf+0x16c>
    4964:	2a c1       	rjmp	.+596    	; 0x4bba <f_printf+0x3ce>
    4966:	c2 2c       	mov	r12, r2
    4968:	d1 2c       	mov	r13, r1
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    496a:	66 24       	eor	r6, r6
    496c:	63 94       	inc	r6
    496e:	71 2c       	mov	r7, r1
    4970:	46 01       	movw	r8, r12
    4972:	60 e2       	ldi	r22, 0x20	; 32
    4974:	ce 01       	movw	r24, r28
    4976:	43 96       	adiw	r24, 0x13	; 19
    4978:	18 de       	rcall	.-976    	; 0x45aa <putc_bfd>
    497a:	ef ef       	ldi	r30, 0xFF	; 255
    497c:	8e 1a       	sub	r8, r30
    497e:	9e 0a       	sbc	r9, r30
    4980:	80 16       	cp	r8, r16
    4982:	91 06       	cpc	r9, r17
    4984:	b0 f3       	brcs	.-20     	; 0x4972 <f_printf+0x186>
    4986:	93 01       	movw	r18, r6
    4988:	2c 19       	sub	r18, r12
    498a:	3d 09       	sbc	r19, r13
    498c:	69 01       	movw	r12, r18
    498e:	c0 0e       	add	r12, r16
    4990:	d1 1e       	adc	r13, r17
			}
			while (*p) putc_bfd(&pb, *p++);
    4992:	d5 01       	movw	r26, r10
    4994:	6c 91       	ld	r22, X
    4996:	66 23       	and	r22, r22
    4998:	59 f0       	breq	.+22     	; 0x49b0 <f_printf+0x1c4>
    499a:	bf ef       	ldi	r27, 0xFF	; 255
    499c:	ab 1a       	sub	r10, r27
    499e:	bb 0a       	sbc	r11, r27
    49a0:	ce 01       	movw	r24, r28
    49a2:	43 96       	adiw	r24, 0x13	; 19
    49a4:	02 de       	rcall	.-1020   	; 0x45aa <putc_bfd>
    49a6:	f5 01       	movw	r30, r10
    49a8:	61 91       	ld	r22, Z+
    49aa:	5f 01       	movw	r10, r30
    49ac:	61 11       	cpse	r22, r1
    49ae:	f8 cf       	rjmp	.-16     	; 0x49a0 <f_printf+0x1b4>
			while (j++ < w) putc_bfd(&pb, ' ');
    49b0:	c0 16       	cp	r12, r16
    49b2:	d1 06       	cpc	r13, r17
    49b4:	08 f0       	brcs	.+2      	; 0x49b8 <f_printf+0x1cc>
    49b6:	4c cf       	rjmp	.-360    	; 0x4850 <f_printf+0x64>
    49b8:	60 e2       	ldi	r22, 0x20	; 32
    49ba:	ce 01       	movw	r24, r28
    49bc:	43 96       	adiw	r24, 0x13	; 19
    49be:	f5 dd       	rcall	.-1046   	; 0x45aa <putc_bfd>
    49c0:	ff ef       	ldi	r31, 0xFF	; 255
    49c2:	cf 1a       	sub	r12, r31
    49c4:	df 0a       	sbc	r13, r31
    49c6:	c0 16       	cp	r12, r16
    49c8:	d1 06       	cpc	r13, r17
    49ca:	b0 f3       	brcs	.-20     	; 0x49b8 <f_printf+0x1cc>
    49cc:	41 cf       	rjmp	.-382    	; 0x4850 <f_printf+0x64>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    49ce:	82 01       	movw	r16, r4
    49d0:	0e 5f       	subi	r16, 0xFE	; 254
    49d2:	1f 4f       	sbci	r17, 0xFF	; 255
    49d4:	d2 01       	movw	r26, r4
    49d6:	6c 91       	ld	r22, X
    49d8:	ce 01       	movw	r24, r28
    49da:	43 96       	adiw	r24, 0x13	; 19
    49dc:	e6 dd       	rcall	.-1076   	; 0x45aa <putc_bfd>
    49de:	28 01       	movw	r4, r16
    49e0:	37 cf       	rjmp	.-402    	; 0x4850 <f_printf+0x64>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    49e2:	6d 2d       	mov	r22, r13
    49e4:	ce 01       	movw	r24, r28
    49e6:	43 96       	adiw	r24, 0x13	; 19
    49e8:	e0 dd       	rcall	.-1088   	; 0x45aa <putc_bfd>
    49ea:	32 cf       	rjmp	.-412    	; 0x4850 <f_printf+0x64>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    49ec:	72 fe       	sbrs	r7, 2
    49ee:	0e c0       	rjmp	.+28     	; 0x4a0c <f_printf+0x220>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    49f0:	aa e0       	ldi	r26, 0x0A	; 10
    49f2:	01 c0       	rjmp	.+2      	; 0x49f6 <f_printf+0x20a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    49f4:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    49f6:	f2 01       	movw	r30, r4
    49f8:	60 81       	ld	r22, Z
    49fa:	71 81       	ldd	r23, Z+1	; 0x01
    49fc:	82 81       	ldd	r24, Z+2	; 0x02
    49fe:	93 81       	ldd	r25, Z+3	; 0x03
    4a00:	b4 e0       	ldi	r27, 0x04	; 4
    4a02:	4b 0e       	add	r4, r27
    4a04:	51 1c       	adc	r5, r1
		if (d == 'D' && (v & 0x80000000)) {
    4a06:	34 34       	cpi	r19, 0x44	; 68
    4a08:	31 f5       	brne	.+76     	; 0x4a56 <f_printf+0x26a>
    4a0a:	19 c0       	rjmp	.+50     	; 0x4a3e <f_printf+0x252>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    4a0c:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4a0e:	34 34       	cpi	r19, 0x44	; 68
    4a10:	61 f4       	brne	.+24     	; 0x4a2a <f_printf+0x23e>
    4a12:	f2 01       	movw	r30, r4
    4a14:	60 81       	ld	r22, Z
    4a16:	71 81       	ldd	r23, Z+1	; 0x01
    4a18:	07 2e       	mov	r0, r23
    4a1a:	00 0c       	add	r0, r0
    4a1c:	88 0b       	sbc	r24, r24
    4a1e:	99 0b       	sbc	r25, r25
    4a20:	92 01       	movw	r18, r4
    4a22:	2e 5f       	subi	r18, 0xFE	; 254
    4a24:	3f 4f       	sbci	r19, 0xFF	; 255
    4a26:	29 01       	movw	r4, r18
    4a28:	0a c0       	rjmp	.+20     	; 0x4a3e <f_printf+0x252>
    4a2a:	f2 01       	movw	r30, r4
    4a2c:	60 81       	ld	r22, Z
    4a2e:	71 81       	ldd	r23, Z+1	; 0x01
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	92 01       	movw	r18, r4
    4a36:	2e 5f       	subi	r18, 0xFE	; 254
    4a38:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3a:	29 01       	movw	r4, r18
    4a3c:	0c c0       	rjmp	.+24     	; 0x4a56 <f_printf+0x26a>
		if (d == 'D' && (v & 0x80000000)) {
    4a3e:	99 23       	and	r25, r25
    4a40:	54 f4       	brge	.+20     	; 0x4a56 <f_printf+0x26a>
			v = 0 - v;
    4a42:	90 95       	com	r25
    4a44:	80 95       	com	r24
    4a46:	70 95       	com	r23
    4a48:	61 95       	neg	r22
    4a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a4e:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    4a50:	37 2d       	mov	r19, r7
    4a52:	38 60       	ori	r19, 0x08	; 8
    4a54:	73 2e       	mov	r7, r19
    4a56:	ae 01       	movw	r20, r28
    4a58:	4d 5f       	subi	r20, 0xFD	; 253
    4a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a5c:	5a 01       	movw	r10, r20
		}
		i = 0;
    4a5e:	82 2c       	mov	r8, r2
    4a60:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    4a62:	2a 2f       	mov	r18, r26
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e0       	ldi	r20, 0x00	; 0
    4a68:	50 e0       	ldi	r21, 0x00	; 0
    4a6a:	6d 96       	adiw	r28, 0x1d	; 29
    4a6c:	2c af       	std	Y+60, r18	; 0x3c
    4a6e:	3d af       	std	Y+61, r19	; 0x3d
    4a70:	4e af       	std	Y+62, r20	; 0x3e
    4a72:	5f af       	std	Y+63, r21	; 0x3f
    4a74:	6d 97       	sbiw	r28, 0x1d	; 29
    4a76:	97 01       	movw	r18, r14
    4a78:	78 01       	movw	r14, r16
    4a7a:	1d 2d       	mov	r17, r13
    4a7c:	69 01       	movw	r12, r18
    4a7e:	6d 96       	adiw	r28, 0x1d	; 29
    4a80:	2c ad       	ldd	r18, Y+60	; 0x3c
    4a82:	3d ad       	ldd	r19, Y+61	; 0x3d
    4a84:	4e ad       	ldd	r20, Y+62	; 0x3e
    4a86:	5f ad       	ldd	r21, Y+63	; 0x3f
    4a88:	6d 97       	sbiw	r28, 0x1d	; 29
    4a8a:	0e 94 bb 4a 	call	0x9576	; 0x9576 <__udivmodsi4>
    4a8e:	f6 2f       	mov	r31, r22
    4a90:	e6 2f       	mov	r30, r22
    4a92:	62 2f       	mov	r22, r18
    4a94:	73 2f       	mov	r23, r19
    4a96:	84 2f       	mov	r24, r20
    4a98:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    4a9a:	fa 30       	cpi	r31, 0x0A	; 10
    4a9c:	30 f0       	brcs	.+12     	; 0x4aaa <f_printf+0x2be>
    4a9e:	18 37       	cpi	r17, 0x78	; 120
    4aa0:	11 f0       	breq	.+4      	; 0x4aa6 <f_printf+0x2ba>
    4aa2:	e3 2d       	mov	r30, r3
    4aa4:	01 c0       	rjmp	.+2      	; 0x4aa8 <f_printf+0x2bc>
    4aa6:	e7 e2       	ldi	r30, 0x27	; 39
    4aa8:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    4aaa:	3f ef       	ldi	r19, 0xFF	; 255
    4aac:	83 1a       	sub	r8, r19
    4aae:	93 0a       	sbc	r9, r19
    4ab0:	e0 5d       	subi	r30, 0xD0	; 208
    4ab2:	d5 01       	movw	r26, r10
    4ab4:	ed 93       	st	X+, r30
    4ab6:	5d 01       	movw	r10, r26
		} while (v && i < sizeof s / sizeof s[0]);
    4ab8:	61 15       	cp	r22, r1
    4aba:	71 05       	cpc	r23, r1
    4abc:	81 05       	cpc	r24, r1
    4abe:	91 05       	cpc	r25, r1
    4ac0:	21 f0       	breq	.+8      	; 0x4aca <f_printf+0x2de>
    4ac2:	b0 e1       	ldi	r27, 0x10	; 16
    4ac4:	8b 16       	cp	r8, r27
    4ac6:	91 04       	cpc	r9, r1
    4ac8:	d1 f6       	brne	.-76     	; 0x4a7e <f_printf+0x292>
    4aca:	87 01       	movw	r16, r14
    4acc:	76 01       	movw	r14, r12
		if (f & 8) s[i++] = '-';
    4ace:	73 fe       	sbrs	r7, 3
    4ad0:	0c c0       	rjmp	.+24     	; 0x4aea <f_printf+0x2fe>
    4ad2:	e3 e0       	ldi	r30, 0x03	; 3
    4ad4:	f0 e0       	ldi	r31, 0x00	; 0
    4ad6:	ec 0f       	add	r30, r28
    4ad8:	fd 1f       	adc	r31, r29
    4ada:	e8 0d       	add	r30, r8
    4adc:	f9 1d       	adc	r31, r9
    4ade:	2d e2       	ldi	r18, 0x2D	; 45
    4ae0:	20 83       	st	Z, r18
    4ae2:	a4 01       	movw	r20, r8
    4ae4:	4f 5f       	subi	r20, 0xFF	; 255
    4ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ae8:	4a 01       	movw	r8, r20
		j = i; d = (f & 1) ? '0' : ' ';
    4aea:	70 fc       	sbrc	r7, 0
    4aec:	04 c0       	rjmp	.+8      	; 0x4af6 <f_printf+0x30a>
    4aee:	68 94       	set
    4af0:	66 24       	eor	r6, r6
    4af2:	65 f8       	bld	r6, 5
    4af4:	04 c0       	rjmp	.+8      	; 0x4afe <f_printf+0x312>
    4af6:	0f 2e       	mov	r0, r31
    4af8:	f0 e3       	ldi	r31, 0x30	; 48
    4afa:	6f 2e       	mov	r6, r31
    4afc:	f0 2d       	mov	r31, r0
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    4afe:	71 fc       	sbrc	r7, 1
    4b00:	15 c0       	rjmp	.+42     	; 0x4b2c <f_printf+0x340>
    4b02:	64 01       	movw	r12, r8
    4b04:	5f ef       	ldi	r21, 0xFF	; 255
    4b06:	c5 1a       	sub	r12, r21
    4b08:	d5 0a       	sbc	r13, r21
    4b0a:	80 16       	cp	r8, r16
    4b0c:	91 06       	cpc	r9, r17
    4b0e:	08 f4       	brcc	.+2      	; 0x4b12 <f_printf+0x326>
    4b10:	65 c0       	rjmp	.+202    	; 0x4bdc <f_printf+0x3f0>
    4b12:	0d c0       	rjmp	.+26     	; 0x4b2e <f_printf+0x342>
    4b14:	8f ef       	ldi	r24, 0xFF	; 255
    4b16:	c8 1a       	sub	r12, r24
    4b18:	d8 0a       	sbc	r13, r24
    4b1a:	c0 16       	cp	r12, r16
    4b1c:	d1 06       	cpc	r13, r17
    4b1e:	08 f4       	brcc	.+2      	; 0x4b22 <f_printf+0x336>
    4b20:	58 c0       	rjmp	.+176    	; 0x4bd2 <f_printf+0x3e6>
    4b22:	68 01       	movw	r12, r16
    4b24:	9f ef       	ldi	r25, 0xFF	; 255
    4b26:	c9 1a       	sub	r12, r25
    4b28:	d9 0a       	sbc	r13, r25
    4b2a:	01 c0       	rjmp	.+2      	; 0x4b2e <f_printf+0x342>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    4b2c:	64 01       	movw	r12, r8
    4b2e:	0f 2e       	mov	r0, r31
    4b30:	f3 e0       	ldi	r31, 0x03	; 3
    4b32:	af 2e       	mov	r10, r31
    4b34:	b1 2c       	mov	r11, r1
    4b36:	f0 2d       	mov	r31, r0
    4b38:	ac 0e       	add	r10, r28
    4b3a:	bd 1e       	adc	r11, r29
    4b3c:	a8 0c       	add	r10, r8
    4b3e:	b9 1c       	adc	r11, r9
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    4b40:	a1 e0       	ldi	r26, 0x01	; 1
    4b42:	8a 1a       	sub	r8, r26
    4b44:	91 08       	sbc	r9, r1
    4b46:	f5 01       	movw	r30, r10
    4b48:	62 91       	ld	r22, -Z
    4b4a:	5f 01       	movw	r10, r30
    4b4c:	ce 01       	movw	r24, r28
    4b4e:	43 96       	adiw	r24, 0x13	; 19
    4b50:	2c dd       	rcall	.-1448   	; 0x45aa <putc_bfd>
    4b52:	81 14       	cp	r8, r1
    4b54:	91 04       	cpc	r9, r1
    4b56:	a1 f7       	brne	.-24     	; 0x4b40 <f_printf+0x354>
		while (j++ < w) putc_bfd(&pb, d);
    4b58:	c0 16       	cp	r12, r16
    4b5a:	d1 06       	cpc	r13, r17
    4b5c:	08 f0       	brcs	.+2      	; 0x4b60 <f_printf+0x374>
    4b5e:	78 ce       	rjmp	.-784    	; 0x4850 <f_printf+0x64>
    4b60:	66 2d       	mov	r22, r6
    4b62:	ce 01       	movw	r24, r28
    4b64:	43 96       	adiw	r24, 0x13	; 19
    4b66:	21 dd       	rcall	.-1470   	; 0x45aa <putc_bfd>
    4b68:	ff ef       	ldi	r31, 0xFF	; 255
    4b6a:	cf 1a       	sub	r12, r31
    4b6c:	df 0a       	sbc	r13, r31
    4b6e:	c0 16       	cp	r12, r16
    4b70:	d1 06       	cpc	r13, r17
    4b72:	b0 f3       	brcs	.-20     	; 0x4b60 <f_printf+0x374>
    4b74:	6d ce       	rjmp	.-806    	; 0x4850 <f_printf+0x64>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    4b76:	4d 89       	ldd	r20, Y+21	; 0x15
    4b78:	5e 89       	ldd	r21, Y+22	; 0x16
    4b7a:	55 23       	and	r21, r21
    4b7c:	ac f0       	brlt	.+42     	; 0x4ba8 <f_printf+0x3bc>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    4b7e:	9e 01       	movw	r18, r28
    4b80:	2f 5f       	subi	r18, 0xFF	; 255
    4b82:	3f 4f       	sbci	r19, 0xFF	; 255
    4b84:	be 01       	movw	r22, r28
    4b86:	67 5e       	subi	r22, 0xE7	; 231
    4b88:	7f 4f       	sbci	r23, 0xFF	; 255
    4b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    4b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    4b8e:	13 db       	rcall	.-2522   	; 0x41b6 <f_write>
    4b90:	81 11       	cpse	r24, r1
    4b92:	0d c0       	rjmp	.+26     	; 0x4bae <f_printf+0x3c2>
		&& (UINT)pb.idx == nw) return pb.nchr;
    4b94:	2d 89       	ldd	r18, Y+21	; 0x15
    4b96:	3e 89       	ldd	r19, Y+22	; 0x16
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9c:	28 17       	cp	r18, r24
    4b9e:	39 07       	cpc	r19, r25
    4ba0:	49 f4       	brne	.+18     	; 0x4bb4 <f_printf+0x3c8>
    4ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ba6:	52 c0       	rjmp	.+164    	; 0x4c4c <f_printf+0x460>
	return EOF;
    4ba8:	8f ef       	ldi	r24, 0xFF	; 255
    4baa:	9f ef       	ldi	r25, 0xFF	; 255
    4bac:	4f c0       	rjmp	.+158    	; 0x4c4c <f_printf+0x460>
    4bae:	8f ef       	ldi	r24, 0xFF	; 255
    4bb0:	9f ef       	ldi	r25, 0xFF	; 255
    4bb2:	4c c0       	rjmp	.+152    	; 0x4c4c <f_printf+0x460>
    4bb4:	8f ef       	ldi	r24, 0xFF	; 255
    4bb6:	9f ef       	ldi	r25, 0xFF	; 255
    4bb8:	49 c0       	rjmp	.+146    	; 0x4c4c <f_printf+0x460>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
    4bba:	71 fe       	sbrs	r7, 1
    4bbc:	19 c0       	rjmp	.+50     	; 0x4bf0 <f_printf+0x404>
    4bbe:	ed ce       	rjmp	.-550    	; 0x499a <f_printf+0x1ae>
    4bc0:	71 fe       	sbrs	r7, 1
    4bc2:	1f c0       	rjmp	.+62     	; 0x4c02 <f_printf+0x416>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    4bc4:	c2 2c       	mov	r12, r2
    4bc6:	d1 2c       	mov	r13, r1
    4bc8:	f3 ce       	rjmp	.-538    	; 0x49b0 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4bca:	72 fc       	sbrc	r7, 2
    4bcc:	13 cf       	rjmp	.-474    	; 0x49f4 <f_printf+0x208>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    4bce:	a0 e1       	ldi	r26, 0x10	; 16
    4bd0:	2c cf       	rjmp	.-424    	; 0x4a2a <f_printf+0x23e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    4bd2:	66 2d       	mov	r22, r6
    4bd4:	ce 01       	movw	r24, r28
    4bd6:	43 96       	adiw	r24, 0x13	; 19
    4bd8:	e8 dc       	rcall	.-1584   	; 0x45aa <putc_bfd>
    4bda:	9c cf       	rjmp	.-200    	; 0x4b14 <f_printf+0x328>
    4bdc:	66 2d       	mov	r22, r6
    4bde:	ce 01       	movw	r24, r28
    4be0:	43 96       	adiw	r24, 0x13	; 19
    4be2:	e3 dc       	rcall	.-1594   	; 0x45aa <putc_bfd>
    4be4:	64 01       	movw	r12, r8
    4be6:	96 cf       	rjmp	.-212    	; 0x4b14 <f_printf+0x328>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    4be8:	d5 01       	movw	r26, r10
    4bea:	6c 91       	ld	r22, X
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    4bec:	63 01       	movw	r12, r6
    4bee:	d5 ce       	rjmp	.-598    	; 0x499a <f_printf+0x1ae>
    4bf0:	36 01       	movw	r6, r12
    4bf2:	bf ef       	ldi	r27, 0xFF	; 255
    4bf4:	6b 1a       	sub	r6, r27
    4bf6:	7b 0a       	sbc	r7, r27
    4bf8:	c0 16       	cp	r12, r16
    4bfa:	d1 06       	cpc	r13, r17
    4bfc:	08 f4       	brcc	.+2      	; 0x4c00 <f_printf+0x414>
    4bfe:	b8 ce       	rjmp	.-656    	; 0x4970 <f_printf+0x184>
    4c00:	f3 cf       	rjmp	.-26     	; 0x4be8 <f_printf+0x3fc>
    4c02:	01 15       	cp	r16, r1
    4c04:	11 05       	cpc	r17, r1
    4c06:	09 f0       	breq	.+2      	; 0x4c0a <f_printf+0x41e>
    4c08:	ae ce       	rjmp	.-676    	; 0x4966 <f_printf+0x17a>
    4c0a:	cc 24       	eor	r12, r12
    4c0c:	c3 94       	inc	r12
    4c0e:	d1 2c       	mov	r13, r1
    4c10:	cf ce       	rjmp	.-610    	; 0x49b0 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4c12:	f2 01       	movw	r30, r4
    4c14:	60 81       	ld	r22, Z
    4c16:	71 81       	ldd	r23, Z+1	; 0x01
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	92 01       	movw	r18, r4
    4c1e:	2c 5f       	subi	r18, 0xFC	; 252
    4c20:	3f 4f       	sbci	r19, 0xFF	; 255
    4c22:	29 01       	movw	r4, r18
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    4c24:	a2 e0       	ldi	r26, 0x02	; 2
    4c26:	17 cf       	rjmp	.-466    	; 0x4a56 <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4c28:	72 fc       	sbrc	r7, 2
    4c2a:	f3 cf       	rjmp	.-26     	; 0x4c12 <f_printf+0x426>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    4c2c:	a2 e0       	ldi	r26, 0x02	; 2
    4c2e:	ef ce       	rjmp	.-546    	; 0x4a0e <f_printf+0x222>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4c30:	d2 01       	movw	r26, r4
    4c32:	6d 91       	ld	r22, X+
    4c34:	7d 91       	ld	r23, X+
    4c36:	8d 91       	ld	r24, X+
    4c38:	9c 91       	ld	r25, X
    4c3a:	f2 01       	movw	r30, r4
    4c3c:	34 96       	adiw	r30, 0x04	; 4
    4c3e:	2f 01       	movw	r4, r30
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    4c40:	a8 e0       	ldi	r26, 0x08	; 8
    4c42:	09 cf       	rjmp	.-494    	; 0x4a56 <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4c44:	72 fc       	sbrc	r7, 2
    4c46:	f4 cf       	rjmp	.-24     	; 0x4c30 <f_printf+0x444>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    4c48:	a8 e0       	ldi	r26, 0x08	; 8
    4c4a:	ef ce       	rjmp	.-546    	; 0x4a2a <f_printf+0x23e>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    4c4c:	c4 5a       	subi	r28, 0xA4	; 164
    4c4e:	df 4f       	sbci	r29, 0xFF	; 255
    4c50:	0f b6       	in	r0, 0x3f	; 63
    4c52:	f8 94       	cli
    4c54:	de bf       	out	0x3e, r29	; 62
    4c56:	0f be       	out	0x3f, r0	; 63
    4c58:	cd bf       	out	0x3d, r28	; 61
    4c5a:	df 91       	pop	r29
    4c5c:	cf 91       	pop	r28
    4c5e:	1f 91       	pop	r17
    4c60:	0f 91       	pop	r16
    4c62:	ff 90       	pop	r15
    4c64:	ef 90       	pop	r14
    4c66:	df 90       	pop	r13
    4c68:	cf 90       	pop	r12
    4c6a:	bf 90       	pop	r11
    4c6c:	af 90       	pop	r10
    4c6e:	9f 90       	pop	r9
    4c70:	8f 90       	pop	r8
    4c72:	7f 90       	pop	r7
    4c74:	6f 90       	pop	r6
    4c76:	5f 90       	pop	r5
    4c78:	4f 90       	pop	r4
    4c7a:	3f 90       	pop	r3
    4c7c:	2f 90       	pop	r2
    4c7e:	08 95       	ret

00004c80 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    4c80:	82 e0       	ldi	r24, 0x02	; 2
    4c82:	80 93 b8 00 	sts	0x00B8, r24
    4c86:	08 95       	ret

00004c88 <_ZN3I2CD1Ev>:
    4c88:	08 95       	ret

00004c8a <_ZN3I2C9twi_startEv>:
    4c8a:	84 ea       	ldi	r24, 0xA4	; 164
    4c8c:	80 93 bc 00 	sts	0x00BC, r24
    4c90:	08 95       	ret

00004c92 <_ZN3I2C8twi_stopEv>:
    4c92:	84 e9       	ldi	r24, 0x94	; 148
    4c94:	80 93 bc 00 	sts	0x00BC, r24
    4c98:	08 95       	ret

00004c9a <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    4c9a:	ec eb       	ldi	r30, 0xBC	; 188
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	80 81       	ld	r24, Z
    4ca0:	88 23       	and	r24, r24
    4ca2:	ec f7       	brge	.-6      	; 0x4c9e <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    4ca4:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    4ca8:	84 e8       	ldi	r24, 0x84	; 132
    4caa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    4cae:	ec eb       	ldi	r30, 0xBC	; 188
    4cb0:	f0 e0       	ldi	r31, 0x00	; 0
    4cb2:	80 81       	ld	r24, Z
    4cb4:	88 23       	and	r24, r24
    4cb6:	ec f7       	brge	.-6      	; 0x4cb2 <_ZN3I2C9twi_writeEh+0x18>
}
    4cb8:	08 95       	ret

00004cba <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    4cba:	66 23       	and	r22, r22
    4cbc:	21 f0       	breq	.+8      	; 0x4cc6 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4cbe:	84 ec       	ldi	r24, 0xC4	; 196
    4cc0:	80 93 bc 00 	sts	0x00BC, r24
    4cc4:	03 c0       	rjmp	.+6      	; 0x4ccc <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    4cc6:	84 e8       	ldi	r24, 0x84	; 132
    4cc8:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    4ccc:	ec eb       	ldi	r30, 0xBC	; 188
    4cce:	f0 e0       	ldi	r31, 0x00	; 0
    4cd0:	80 81       	ld	r24, Z
    4cd2:	88 23       	and	r24, r24
    4cd4:	ec f7       	brge	.-6      	; 0x4cd0 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    4cd6:	80 91 bb 00 	lds	r24, 0x00BB
    4cda:	08 95       	ret

00004cdc <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    4cdc:	2a b1       	in	r18, 0x0a	; 10
    4cde:	20 66       	ori	r18, 0x60	; 96
    4ce0:	2a b9       	out	0x0a, r18	; 10
    4ce2:	28 b1       	in	r18, 0x08	; 8
    4ce4:	23 7f       	andi	r18, 0xF3	; 243
    4ce6:	28 b9       	out	0x08, r18	; 8
    4ce8:	27 b1       	in	r18, 0x07	; 7
    4cea:	2c 60       	ori	r18, 0x0C	; 12
    4cec:	27 b9       	out	0x07, r18	; 7
    4cee:	2a b1       	in	r18, 0x0a	; 10
    4cf0:	23 7e       	andi	r18, 0xE3	; 227
    4cf2:	2a b9       	out	0x0a, r18	; 10
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	0c 96       	adiw	r24, 0x0c	; 12
    4cf8:	11 92       	st	Z+, r1
    4cfa:	e8 17       	cp	r30, r24
    4cfc:	f9 07       	cpc	r31, r25
    4cfe:	e1 f7       	brne	.-8      	; 0x4cf8 <_ZN9InterfaceC1Ev+0x1c>
    4d00:	08 95       	ret

00004d02 <_ZN9InterfaceD1Ev>:
    4d02:	08 95       	ret

00004d04 <_ZN9Interface7paradebEPVhhPh>:
    4d04:	fb 01       	movw	r30, r22
    4d06:	80 81       	ld	r24, Z
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	04 2e       	mov	r0, r20
    4d0c:	02 c0       	rjmp	.+4      	; 0x4d12 <_ZN9Interface7paradebEPVhhPh+0xe>
    4d0e:	95 95       	asr	r25
    4d10:	87 95       	ror	r24
    4d12:	0a 94       	dec	r0
    4d14:	e2 f7       	brpl	.-8      	; 0x4d0e <_ZN9Interface7paradebEPVhhPh+0xa>
    4d16:	80 ff       	sbrs	r24, 0
    4d18:	05 c0       	rjmp	.+10     	; 0x4d24 <_ZN9Interface7paradebEPVhhPh+0x20>
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	f9 01       	movw	r30, r18
    4d1e:	80 83       	st	Z, r24
    4d20:	80 e0       	ldi	r24, 0x00	; 0
    4d22:	08 95       	ret
    4d24:	f9 01       	movw	r30, r18
    4d26:	80 81       	ld	r24, Z
    4d28:	81 30       	cpi	r24, 0x01	; 1
    4d2a:	71 f4       	brne	.+28     	; 0x4d48 <_ZN9Interface7paradebEPVhhPh+0x44>
    4d2c:	fb 01       	movw	r30, r22
    4d2e:	60 81       	ld	r22, Z
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	fb 01       	movw	r30, r22
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <_ZN9Interface7paradebEPVhhPh+0x36>
    4d36:	f5 95       	asr	r31
    4d38:	e7 95       	ror	r30
    4d3a:	4a 95       	dec	r20
    4d3c:	e2 f7       	brpl	.-8      	; 0x4d36 <_ZN9Interface7paradebEPVhhPh+0x32>
    4d3e:	e0 fd       	sbrc	r30, 0
    4d40:	03 c0       	rjmp	.+6      	; 0x4d48 <_ZN9Interface7paradebEPVhhPh+0x44>
    4d42:	f9 01       	movw	r30, r18
    4d44:	10 82       	st	Z, r1
    4d46:	08 95       	ret
    4d48:	f9 01       	movw	r30, r18
    4d4a:	10 82       	st	Z, r1
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	08 95       	ret

00004d50 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    4d50:	1f 93       	push	r17
    4d52:	cf 93       	push	r28
    4d54:	df 93       	push	r29
    4d56:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    4d58:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4d5a:	82 e0       	ldi	r24, 0x02	; 2
    4d5c:	8a 95       	dec	r24
    4d5e:	f1 f7       	brne	.-4      	; 0x4d5c <_ZN9Interface6TasterEv+0xc>
    4d60:	00 c0       	rjmp	.+0      	; 0x4d62 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
    4d62:	9e 01       	movw	r18, r28
    4d64:	2e 5f       	subi	r18, 0xFE	; 254
    4d66:	3f 4f       	sbci	r19, 0xFF	; 255
    4d68:	44 e0       	ldi	r20, 0x04	; 4
    4d6a:	69 e2       	ldi	r22, 0x29	; 41
    4d6c:	70 e0       	ldi	r23, 0x00	; 0
    4d6e:	ce 01       	movw	r24, r28
    4d70:	c9 df       	rcall	.-110    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4d72:	81 11       	cpse	r24, r1
    4d74:	14 c0       	rjmp	.+40     	; 0x4d9e <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
    4d76:	9e 01       	movw	r18, r28
    4d78:	2f 5f       	subi	r18, 0xFF	; 255
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	43 e0       	ldi	r20, 0x03	; 3
    4d7e:	69 e2       	ldi	r22, 0x29	; 41
    4d80:	70 e0       	ldi	r23, 0x00	; 0
    4d82:	ce 01       	movw	r24, r28
    4d84:	bf df       	rcall	.-130    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4d86:	81 11       	cpse	r24, r1
    4d88:	0c c0       	rjmp	.+24     	; 0x4da2 <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    4d8a:	9e 01       	movw	r18, r28
    4d8c:	42 e0       	ldi	r20, 0x02	; 2
    4d8e:	69 e2       	ldi	r22, 0x29	; 41
    4d90:	70 e0       	ldi	r23, 0x00	; 0
    4d92:	ce 01       	movw	r24, r28
    4d94:	b7 df       	rcall	.-146    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4d96:	88 23       	and	r24, r24
    4d98:	31 f0       	breq	.+12     	; 0x4da6 <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    4d9a:	11 e3       	ldi	r17, 0x31	; 49
    4d9c:	05 c0       	rjmp	.+10     	; 0x4da8 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    4d9e:	13 e3       	ldi	r17, 0x33	; 51
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    4da2:	12 e3       	ldi	r17, 0x32	; 50
    4da4:	01 c0       	rjmp	.+2      	; 0x4da8 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    4da6:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    4da8:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    4daa:	42 9a       	sbi	0x08, 2	; 8
    4dac:	82 e0       	ldi	r24, 0x02	; 2
    4dae:	8a 95       	dec	r24
    4db0:	f1 f7       	brne	.-4      	; 0x4dae <_ZN9Interface6TasterEv+0x5e>
    4db2:	00 c0       	rjmp	.+0      	; 0x4db4 <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    4db4:	9e 01       	movw	r18, r28
    4db6:	2b 5f       	subi	r18, 0xFB	; 251
    4db8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dba:	44 e0       	ldi	r20, 0x04	; 4
    4dbc:	69 e2       	ldi	r22, 0x29	; 41
    4dbe:	70 e0       	ldi	r23, 0x00	; 0
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	a0 df       	rcall	.-192    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4dc4:	81 11       	cpse	r24, r1
    4dc6:	16 c0       	rjmp	.+44     	; 0x4df4 <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    4dc8:	9e 01       	movw	r18, r28
    4dca:	2c 5f       	subi	r18, 0xFC	; 252
    4dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dce:	43 e0       	ldi	r20, 0x03	; 3
    4dd0:	69 e2       	ldi	r22, 0x29	; 41
    4dd2:	70 e0       	ldi	r23, 0x00	; 0
    4dd4:	ce 01       	movw	r24, r28
    4dd6:	96 df       	rcall	.-212    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4dd8:	81 11       	cpse	r24, r1
    4dda:	0e c0       	rjmp	.+28     	; 0x4df8 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    4ddc:	9e 01       	movw	r18, r28
    4dde:	2d 5f       	subi	r18, 0xFD	; 253
    4de0:	3f 4f       	sbci	r19, 0xFF	; 255
    4de2:	42 e0       	ldi	r20, 0x02	; 2
    4de4:	69 e2       	ldi	r22, 0x29	; 41
    4de6:	70 e0       	ldi	r23, 0x00	; 0
    4de8:	ce 01       	movw	r24, r28
    4dea:	8c df       	rcall	.-232    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4dec:	88 23       	and	r24, r24
    4dee:	29 f0       	breq	.+10     	; 0x4dfa <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    4df0:	14 e3       	ldi	r17, 0x34	; 52
    4df2:	03 c0       	rjmp	.+6      	; 0x4dfa <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    4df4:	16 e3       	ldi	r17, 0x36	; 54
    4df6:	01 c0       	rjmp	.+2      	; 0x4dfa <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    4df8:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    4dfa:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    4dfc:	5e 9a       	sbi	0x0b, 6	; 11
    4dfe:	82 e0       	ldi	r24, 0x02	; 2
    4e00:	8a 95       	dec	r24
    4e02:	f1 f7       	brne	.-4      	; 0x4e00 <_ZN9Interface6TasterEv+0xb0>
    4e04:	00 c0       	rjmp	.+0      	; 0x4e06 <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    4e06:	9e 01       	movw	r18, r28
    4e08:	28 5f       	subi	r18, 0xF8	; 248
    4e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e0c:	44 e0       	ldi	r20, 0x04	; 4
    4e0e:	69 e2       	ldi	r22, 0x29	; 41
    4e10:	70 e0       	ldi	r23, 0x00	; 0
    4e12:	ce 01       	movw	r24, r28
    4e14:	77 df       	rcall	.-274    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4e16:	81 11       	cpse	r24, r1
    4e18:	16 c0       	rjmp	.+44     	; 0x4e46 <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    4e1a:	9e 01       	movw	r18, r28
    4e1c:	29 5f       	subi	r18, 0xF9	; 249
    4e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e20:	43 e0       	ldi	r20, 0x03	; 3
    4e22:	69 e2       	ldi	r22, 0x29	; 41
    4e24:	70 e0       	ldi	r23, 0x00	; 0
    4e26:	ce 01       	movw	r24, r28
    4e28:	6d df       	rcall	.-294    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4e2a:	81 11       	cpse	r24, r1
    4e2c:	0e c0       	rjmp	.+28     	; 0x4e4a <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    4e2e:	9e 01       	movw	r18, r28
    4e30:	2a 5f       	subi	r18, 0xFA	; 250
    4e32:	3f 4f       	sbci	r19, 0xFF	; 255
    4e34:	42 e0       	ldi	r20, 0x02	; 2
    4e36:	69 e2       	ldi	r22, 0x29	; 41
    4e38:	70 e0       	ldi	r23, 0x00	; 0
    4e3a:	ce 01       	movw	r24, r28
    4e3c:	63 df       	rcall	.-314    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4e3e:	88 23       	and	r24, r24
    4e40:	29 f0       	breq	.+10     	; 0x4e4c <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    4e42:	17 e3       	ldi	r17, 0x37	; 55
    4e44:	03 c0       	rjmp	.+6      	; 0x4e4c <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    4e46:	19 e3       	ldi	r17, 0x39	; 57
    4e48:	01 c0       	rjmp	.+2      	; 0x4e4c <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    4e4a:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    4e4c:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    4e4e:	5d 9a       	sbi	0x0b, 5	; 11
    4e50:	82 e0       	ldi	r24, 0x02	; 2
    4e52:	8a 95       	dec	r24
    4e54:	f1 f7       	brne	.-4      	; 0x4e52 <_ZN9Interface6TasterEv+0x102>
    4e56:	00 c0       	rjmp	.+0      	; 0x4e58 <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    4e58:	9e 01       	movw	r18, r28
    4e5a:	25 5f       	subi	r18, 0xF5	; 245
    4e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e5e:	44 e0       	ldi	r20, 0x04	; 4
    4e60:	69 e2       	ldi	r22, 0x29	; 41
    4e62:	70 e0       	ldi	r23, 0x00	; 0
    4e64:	ce 01       	movw	r24, r28
    4e66:	4e df       	rcall	.-356    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4e68:	81 11       	cpse	r24, r1
    4e6a:	16 c0       	rjmp	.+44     	; 0x4e98 <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    4e6c:	9e 01       	movw	r18, r28
    4e6e:	26 5f       	subi	r18, 0xF6	; 246
    4e70:	3f 4f       	sbci	r19, 0xFF	; 255
    4e72:	43 e0       	ldi	r20, 0x03	; 3
    4e74:	69 e2       	ldi	r22, 0x29	; 41
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	ce 01       	movw	r24, r28
    4e7a:	44 df       	rcall	.-376    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4e7c:	81 11       	cpse	r24, r1
    4e7e:	0e c0       	rjmp	.+28     	; 0x4e9c <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    4e80:	9e 01       	movw	r18, r28
    4e82:	27 5f       	subi	r18, 0xF7	; 247
    4e84:	3f 4f       	sbci	r19, 0xFF	; 255
    4e86:	42 e0       	ldi	r20, 0x02	; 2
    4e88:	69 e2       	ldi	r22, 0x29	; 41
    4e8a:	70 e0       	ldi	r23, 0x00	; 0
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	3a df       	rcall	.-396    	; 0x4d04 <_ZN9Interface7paradebEPVhhPh>
    4e90:	88 23       	and	r24, r24
    4e92:	29 f0       	breq	.+10     	; 0x4e9e <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    4e94:	1a e2       	ldi	r17, 0x2A	; 42
    4e96:	03 c0       	rjmp	.+6      	; 0x4e9e <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    4e98:	13 e2       	ldi	r17, 0x23	; 35
    4e9a:	01 c0       	rjmp	.+2      	; 0x4e9e <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    4e9c:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    4e9e:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    4ea0:	81 2f       	mov	r24, r17
    4ea2:	df 91       	pop	r29
    4ea4:	cf 91       	pop	r28
    4ea6:	1f 91       	pop	r17
    4ea8:	08 95       	ret

00004eaa <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    4eaa:	52 df       	rcall	.-348    	; 0x4d50 <_ZN9Interface6TasterEv>
    4eac:	48 2f       	mov	r20, r24
    4eae:	50 e0       	ldi	r21, 0x00	; 0
    4eb0:	fa 01       	movw	r30, r20
    4eb2:	b3 97       	sbiw	r30, 0x23	; 35
    4eb4:	e7 31       	cpi	r30, 0x17	; 23
    4eb6:	f1 05       	cpc	r31, r1
    4eb8:	c0 f4       	brcc	.+48     	; 0x4eea <_ZN9Interface7unifiedEv+0x40>
    4eba:	ec 56       	subi	r30, 0x6C	; 108
    4ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebe:	0c 94 dd 4a 	jmp	0x95ba	; 0x95ba <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    4ec2:	85 e7       	ldi	r24, 0x75	; 117
    4ec4:	08 95       	ret
		break;
	case '3':
		return 'A';
    4ec6:	81 e4       	ldi	r24, 0x41	; 65
    4ec8:	08 95       	ret
		break;
	case '4':
		return 'l';
    4eca:	8c e6       	ldi	r24, 0x6C	; 108
    4ecc:	08 95       	ret
		break;
	case '5':
		return 'o';
    4ece:	8f e6       	ldi	r24, 0x6F	; 111
    4ed0:	08 95       	ret
		break;
	case '6':
		return 'r';
    4ed2:	82 e7       	ldi	r24, 0x72	; 114
    4ed4:	08 95       	ret
		break;
	case '7':
		return 'Y';
    4ed6:	89 e5       	ldi	r24, 0x59	; 89
    4ed8:	08 95       	ret
		break;
	case '8':
		return 'd';
    4eda:	84 e6       	ldi	r24, 0x64	; 100
    4edc:	08 95       	ret
		break;
	case '9':
		return 'X';
    4ede:	88 e5       	ldi	r24, 0x58	; 88
    4ee0:	08 95       	ret
		break;
	case '*':
		return 'e';
    4ee2:	85 e6       	ldi	r24, 0x65	; 101
    4ee4:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    4ee6:	8d e6       	ldi	r24, 0x6D	; 109
    4ee8:	08 95       	ret
		break;
	default:
		return ' ';
    4eea:	80 e2       	ldi	r24, 0x20	; 32
    4eec:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    4eee:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    4ef0:	08 95       	ret

00004ef2 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    4ef2:	cf 93       	push	r28
    4ef4:	df 93       	push	r29
    4ef6:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    4ef8:	ce 01       	movw	r24, r28
    4efa:	2a df       	rcall	.-428    	; 0x4d50 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    4efc:	80 53       	subi	r24, 0x30	; 48
    4efe:	8a 30       	cpi	r24, 0x0A	; 10
    4f00:	d8 f7       	brcc	.-10     	; 0x4ef8 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    4f02:	df 91       	pop	r29
    4f04:	cf 91       	pop	r28
    4f06:	08 95       	ret

00004f08 <_ZN7LSM303DD1Ev>:
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    4f08:	80 96       	adiw	r24, 0x20	; 32
    4f0a:	be ce       	rjmp	.-644    	; 0x4c88 <_ZN3I2CD1Ev>
    4f0c:	08 95       	ret

00004f0e <_ZN7LSM303D14LSM303_commandEhh>:
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	06 2f       	mov	r16, r22
    4f18:	14 2f       	mov	r17, r20
    4f1a:	ec 01       	movw	r28, r24
    4f1c:	a0 96       	adiw	r28, 0x20	; 32
    4f1e:	ce 01       	movw	r24, r28
    4f20:	b4 de       	rcall	.-664    	; 0x4c8a <_ZN3I2C9twi_startEv>
    4f22:	6a e3       	ldi	r22, 0x3A	; 58
    4f24:	ce 01       	movw	r24, r28
    4f26:	b9 de       	rcall	.-654    	; 0x4c9a <_ZN3I2C9twi_writeEh>
    4f28:	60 2f       	mov	r22, r16
    4f2a:	ce 01       	movw	r24, r28
    4f2c:	b6 de       	rcall	.-660    	; 0x4c9a <_ZN3I2C9twi_writeEh>
    4f2e:	61 2f       	mov	r22, r17
    4f30:	ce 01       	movw	r24, r28
    4f32:	b3 de       	rcall	.-666    	; 0x4c9a <_ZN3I2C9twi_writeEh>
    4f34:	ce 01       	movw	r24, r28
    4f36:	ad de       	rcall	.-678    	; 0x4c92 <_ZN3I2C8twi_stopEv>
    4f38:	df 91       	pop	r29
    4f3a:	cf 91       	pop	r28
    4f3c:	1f 91       	pop	r17
    4f3e:	0f 91       	pop	r16
    4f40:	08 95       	ret

00004f42 <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    4f42:	40 e0       	ldi	r20, 0x00	; 0
    4f44:	6e e2       	ldi	r22, 0x2E	; 46
    4f46:	e3 cf       	rjmp	.-58     	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
    4f48:	08 95       	ret

00004f4a <_ZN7LSM303D8MAGNModeEh>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::MAGNMode(uint8_t mode){
	if (mode == 1){
    4f4a:	61 30       	cpi	r22, 0x01	; 1
    4f4c:	21 f4       	brne	.+8      	; 0x4f56 <_ZN7LSM303D8MAGNModeEh+0xc>
		LSM303_command(CTRL7,(1<<MD0));
    4f4e:	41 e0       	ldi	r20, 0x01	; 1
    4f50:	66 e2       	ldi	r22, 0x26	; 38
    4f52:	dd cf       	rjmp	.-70     	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
    4f54:	08 95       	ret
	}
	else if (mode == 2){
    4f56:	62 30       	cpi	r22, 0x02	; 2
    4f58:	21 f4       	brne	.+8      	; 0x4f62 <_ZN7LSM303D8MAGNModeEh+0x18>
		LSM303_command(CTRL7,0x00);
    4f5a:	40 e0       	ldi	r20, 0x00	; 0
    4f5c:	66 e2       	ldi	r22, 0x26	; 38
    4f5e:	d7 cf       	rjmp	.-82     	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
    4f60:	08 95       	ret
	}
	else{
		LSM303_command(CTRL7,(1<<MD1));
    4f62:	42 e0       	ldi	r20, 0x02	; 2
    4f64:	66 e2       	ldi	r22, 0x26	; 38
    4f66:	d3 cf       	rjmp	.-90     	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
    4f68:	08 95       	ret

00004f6a <_ZN7LSM303D11LSM303_initEv>:
	achsen_A[2] =(int16_t) (input[1]<<8 | input[0]);
	achsen_A[0] =(int16_t) (input[3]<<8 | input[2]);
	achsen_A[1] =(int16_t) (input[5]<<8 | input[4]);
}

void LSM303D::LSM303_init(){
    4f6a:	cf 93       	push	r28
    4f6c:	df 93       	push	r29
    4f6e:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    4f70:	47 e4       	ldi	r20, 0x47	; 71
    4f72:	60 e2       	ldi	r22, 0x20	; 32
    4f74:	cc df       	rcall	.-104    	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
		
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    4f76:	40 e0       	ldi	r20, 0x00	; 0
    4f78:	61 e2       	ldi	r22, 0x21	; 33
    4f7a:	ce 01       	movw	r24, r28
    4f7c:	c8 df       	rcall	.-112    	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
		
	//Temperatursensor aus, Magnetometer 25Hz
	LSM303_command(CTRL5,(1<<M_RES0)|(1<<M_RES1)|(1<<M_ODR1)|(0<<M_ODR0));
    4f7e:	48 e6       	ldi	r20, 0x68	; 104
    4f80:	64 e2       	ldi	r22, 0x24	; 36
    4f82:	ce 01       	movw	r24, r28
    4f84:	c4 df       	rcall	.-120    	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
	
	//Magnetometer +-2gaus
	LSM303_command(CTRL6,(1<<MFS0));
    4f86:	40 e2       	ldi	r20, 0x20	; 32
    4f88:	65 e2       	ldi	r22, 0x25	; 37
    4f8a:	ce 01       	movw	r24, r28
    4f8c:	c0 df       	rcall	.-128    	; 0x4f0e <_ZN7LSM303D14LSM303_commandEhh>
	
	//MagnMode continuus
	MAGNMode(2);
    4f8e:	62 e0       	ldi	r22, 0x02	; 2
    4f90:	ce 01       	movw	r24, r28
    4f92:	db df       	rcall	.-74     	; 0x4f4a <_ZN7LSM303D8MAGNModeEh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    4f94:	ce 01       	movw	r24, r28
    4f96:	d5 df       	rcall	.-86     	; 0x4f42 <_ZN7LSM303D13ACCBypassmodeEv>
}
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	08 95       	ret

00004f9e <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	ec 01       	movw	r28, r24
    4fa4:	80 96       	adiw	r24, 0x20	; 32
    4fa6:	6c de       	rcall	.-808    	; 0x4c80 <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera			=0;
    4fa8:	1d 86       	std	Y+13, r1	; 0x0d
    4faa:	1c 86       	std	Y+12, r1	; 0x0c
	angle_M			=0.0;
    4fac:	1e 86       	std	Y+14, r1	; 0x0e
    4fae:	1f 86       	std	Y+15, r1	; 0x0f
    4fb0:	18 8a       	std	Y+16, r1	; 0x10
    4fb2:	19 8a       	std	Y+17, r1	; 0x11
	roll			=0.0;
    4fb4:	1a 8a       	std	Y+18, r1	; 0x12
    4fb6:	1b 8a       	std	Y+19, r1	; 0x13
    4fb8:	1c 8a       	std	Y+20, r1	; 0x14
    4fba:	1d 8a       	std	Y+21, r1	; 0x15
	pitch			=0.0;
    4fbc:	1e 8a       	std	Y+22, r1	; 0x16
    4fbe:	1f 8a       	std	Y+23, r1	; 0x17
    4fc0:	18 8e       	std	Y+24, r1	; 0x18
    4fc2:	19 8e       	std	Y+25, r1	; 0x19
	Schrittzaehler	=0;
    4fc4:	1b 8e       	std	Y+27, r1	; 0x1b
    4fc6:	1a 8e       	std	Y+26, r1	; 0x1a
	gravity			=0;
    4fc8:	1c 8e       	std	Y+28, r1	; 0x1c
    4fca:	1d 8e       	std	Y+29, r1	; 0x1d
    4fcc:	1e 8e       	std	Y+30, r1	; 0x1e
    4fce:	1f 8e       	std	Y+31, r1	; 0x1f
	higher			=0;
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e7 51       	subi	r30, 0x17	; 23
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	10 82       	st	Z, r1
    4fd8:	11 82       	std	Z+1, r1	; 0x01
    4fda:	12 82       	std	Z+2, r1	; 0x02
    4fdc:	13 82       	std	Z+3, r1	; 0x03
	lower			=0;
    4fde:	34 96       	adiw	r30, 0x04	; 4
    4fe0:	10 82       	st	Z, r1
    4fe2:	11 82       	std	Z+1, r1	; 0x01
    4fe4:	12 82       	std	Z+2, r1	; 0x02
    4fe6:	13 82       	std	Z+3, r1	; 0x03
	threschold		=27;	//aus Erfahrung
    4fe8:	34 96       	adiw	r30, 0x04	; 4
    4fea:	8b e1       	ldi	r24, 0x1B	; 27
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	91 83       	std	Z+1, r25	; 0x01
    4ff0:	80 83       	st	Z, r24
    4ff2:	de 01       	movw	r26, r28
    4ff4:	32 96       	adiw	r30, 0x02	; 2
    4ff6:	ce 01       	movw	r24, r28
    4ff8:	06 96       	adiw	r24, 0x06	; 6
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]	=0;
    4ffa:	1d 92       	st	X+, r1
    4ffc:	1d 92       	st	X+, r1
		achsen_M[i]	=0;
    4ffe:	15 96       	adiw	r26, 0x05	; 5
    5000:	1c 92       	st	X, r1
    5002:	1e 92       	st	-X, r1
    5004:	14 97       	sbiw	r26, 0x04	; 4
		offset_M[i]	=0;
    5006:	11 92       	st	Z+, r1
    5008:	11 92       	st	Z+, r1
		min[i]		=0;
    500a:	13 86       	std	Z+11, r1	; 0x0b
    500c:	12 86       	std	Z+10, r1	; 0x0a
		max[i]		=0;
    500e:	15 82       	std	Z+5, r1	; 0x05
    5010:	14 82       	std	Z+4, r1	; 0x04
	Schrittzaehler	=0;
	gravity			=0;
	higher			=0;
	lower			=0;
	threschold		=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
    5012:	a8 17       	cp	r26, r24
    5014:	b9 07       	cpc	r27, r25
    5016:	89 f7       	brne	.-30     	; 0x4ffa <_ZN7LSM303DC1Ev+0x5c>
    5018:	fe 01       	movw	r30, r28
    501a:	b1 96       	adiw	r30, 0x21	; 33
    501c:	9e 01       	movw	r18, r28
    501e:	27 51       	subi	r18, 0x17	; 23
    5020:	3f 4f       	sbci	r19, 0xFF	; 255
		min[i]		=0;
		max[i]		=0;
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    5022:	11 92       	st	Z+, r1
    5024:	11 92       	st	Z+, r1
    5026:	11 92       	st	Z+, r1
    5028:	11 92       	st	Z+, r1
		achsen_M[i]	=0;
		offset_M[i]	=0;
		min[i]		=0;
		max[i]		=0;
	}
	for (uint8_t i=0;i<50;i++)
    502a:	e2 17       	cp	r30, r18
    502c:	f3 07       	cpc	r31, r19
    502e:	c9 f7       	brne	.-14     	; 0x5022 <_ZN7LSM303DC1Ev+0x84>
	{
		Daten[i]=0;
	}
	
	LSM303_init();
    5030:	ce 01       	movw	r24, r28
    5032:	9b df       	rcall	.-202    	; 0x4f6a <_ZN7LSM303D11LSM303_initEv>
} //LSM303D
    5034:	df 91       	pop	r29
    5036:	cf 91       	pop	r28
    5038:	08 95       	ret

0000503a <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    503a:	80 e0       	ldi	r24, 0x00	; 0
    503c:	08 95       	ret

0000503e <_ZN3uhr11tastendruckEPh>:
    503e:	fc 01       	movw	r30, r24
    5040:	db 01       	movw	r26, r22
    5042:	9c 91       	ld	r25, X
    5044:	95 36       	cpi	r25, 0x65	; 101
    5046:	39 f4       	brne	.+14     	; 0x5056 <_ZN3uhr11tastendruckEPh+0x18>
    5048:	81 a5       	ldd	r24, Z+41	; 0x29
    504a:	81 30       	cpi	r24, 0x01	; 1
    504c:	11 f4       	brne	.+4      	; 0x5052 <_ZN3uhr11tastendruckEPh+0x14>
    504e:	11 a6       	std	Z+41, r1	; 0x29
    5050:	02 c0       	rjmp	.+4      	; 0x5056 <_ZN3uhr11tastendruckEPh+0x18>
    5052:	81 e0       	ldi	r24, 0x01	; 1
    5054:	81 a7       	std	Z+41, r24	; 0x29
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	08 95       	ret

0000505a <_ZN13einstellungen11tastendruckEPh>:
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	08 95       	ret

0000505e <_ZN5menue11tastendruckEPh>:
    505e:	80 e0       	ldi	r24, 0x00	; 0
    5060:	08 95       	ret

00005062 <_ZN3uhr4drawEv>:
    5062:	0f 93       	push	r16
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	ec 01       	movw	r28, r24
    506a:	8f 89       	ldd	r24, Y+23	; 0x17
    506c:	98 8d       	ldd	r25, Y+24	; 0x18
    506e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    5072:	e8 81       	ld	r30, Y
    5074:	f9 81       	ldd	r31, Y+1	; 0x01
    5076:	01 90       	ld	r0, Z+
    5078:	f0 81       	ld	r31, Z
    507a:	e0 2d       	mov	r30, r0
    507c:	ce 01       	movw	r24, r28
    507e:	09 95       	icall
    5080:	e8 81       	ld	r30, Y
    5082:	f9 81       	ldd	r31, Y+1	; 0x01
    5084:	02 80       	ldd	r0, Z+2	; 0x02
    5086:	f3 81       	ldd	r31, Z+3	; 0x03
    5088:	e0 2d       	mov	r30, r0
    508a:	ce 01       	movw	r24, r28
    508c:	09 95       	icall
    508e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5090:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5092:	09 a5       	ldd	r16, Y+41	; 0x29
    5094:	22 89       	ldd	r18, Z+18	; 0x12
    5096:	41 89       	ldd	r20, Z+17	; 0x11
    5098:	60 89       	ldd	r22, Z+16	; 0x10
    509a:	8f 89       	ldd	r24, Y+23	; 0x17
    509c:	98 8d       	ldd	r25, Y+24	; 0x18
    509e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN7Display6analogEhhhh>
    50a2:	e9 8d       	ldd	r30, Y+25	; 0x19
    50a4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50a6:	60 81       	ld	r22, Z
    50a8:	60 53       	subi	r22, 0x30	; 48
    50aa:	2d e0       	ldi	r18, 0x0D	; 13
    50ac:	46 e4       	ldi	r20, 0x46	; 70
    50ae:	8f 89       	ldd	r24, Y+23	; 0x17
    50b0:	98 8d       	ldd	r25, Y+24	; 0x18
    50b2:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    50b6:	e9 8d       	ldd	r30, Y+25	; 0x19
    50b8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50ba:	61 81       	ldd	r22, Z+1	; 0x01
    50bc:	60 53       	subi	r22, 0x30	; 48
    50be:	2d e0       	ldi	r18, 0x0D	; 13
    50c0:	46 e5       	ldi	r20, 0x56	; 86
    50c2:	8f 89       	ldd	r24, Y+23	; 0x17
    50c4:	98 8d       	ldd	r25, Y+24	; 0x18
    50c6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    50ca:	e9 8d       	ldd	r30, Y+25	; 0x19
    50cc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50ce:	63 81       	ldd	r22, Z+3	; 0x03
    50d0:	60 53       	subi	r22, 0x30	; 48
    50d2:	22 e2       	ldi	r18, 0x22	; 34
    50d4:	46 e4       	ldi	r20, 0x46	; 70
    50d6:	8f 89       	ldd	r24, Y+23	; 0x17
    50d8:	98 8d       	ldd	r25, Y+24	; 0x18
    50da:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    50de:	e9 8d       	ldd	r30, Y+25	; 0x19
    50e0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50e2:	64 81       	ldd	r22, Z+4	; 0x04
    50e4:	60 53       	subi	r22, 0x30	; 48
    50e6:	22 e2       	ldi	r18, 0x22	; 34
    50e8:	46 e5       	ldi	r20, 0x56	; 86
    50ea:	8f 89       	ldd	r24, Y+23	; 0x17
    50ec:	98 8d       	ldd	r25, Y+24	; 0x18
    50ee:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    50f2:	8f 89       	ldd	r24, Y+23	; 0x17
    50f4:	98 8d       	ldd	r25, Y+24	; 0x18
    50f6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	0f 91       	pop	r16
    5100:	08 95       	ret

00005102 <_ZN9offscreen4drawEv>:
    5102:	cf 93       	push	r28
    5104:	df 93       	push	r29
    5106:	ec 01       	movw	r28, r24
    5108:	8f 89       	ldd	r24, Y+23	; 0x17
    510a:	98 8d       	ldd	r25, Y+24	; 0x18
    510c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    5110:	8f 89       	ldd	r24, Y+23	; 0x17
    5112:	98 8d       	ldd	r25, Y+24	; 0x18
    5114:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    5118:	df 91       	pop	r29
    511a:	cf 91       	pop	r28
    511c:	08 95       	ret

0000511e <_ZN3uhr6bottomEv>:
    511e:	ef 92       	push	r14
    5120:	ff 92       	push	r15
    5122:	0f 93       	push	r16
    5124:	1f 93       	push	r17
    5126:	cf 93       	push	r28
    5128:	7c 01       	movw	r14, r24
    512a:	c1 e4       	ldi	r28, 0x41	; 65
    512c:	00 e0       	ldi	r16, 0x00	; 0
    512e:	10 e0       	ldi	r17, 0x00	; 0
    5130:	d7 01       	movw	r26, r14
    5132:	59 96       	adiw	r26, 0x19	; 25
    5134:	ed 91       	ld	r30, X+
    5136:	fc 91       	ld	r31, X
    5138:	5a 97       	sbiw	r26, 0x1a	; 26
    513a:	e0 0f       	add	r30, r16
    513c:	f1 1f       	adc	r31, r17
    513e:	28 e3       	ldi	r18, 0x38	; 56
    5140:	4c 2f       	mov	r20, r28
    5142:	60 85       	ldd	r22, Z+8	; 0x08
    5144:	57 96       	adiw	r26, 0x17	; 23
    5146:	8d 91       	ld	r24, X+
    5148:	9c 91       	ld	r25, X
    514a:	58 97       	sbiw	r26, 0x18	; 24
    514c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5150:	0f 5f       	subi	r16, 0xFF	; 255
    5152:	1f 4f       	sbci	r17, 0xFF	; 255
    5154:	ca 5f       	subi	r28, 0xFA	; 250
    5156:	c1 37       	cpi	r28, 0x71	; 113
    5158:	59 f7       	brne	.-42     	; 0x5130 <_ZN3uhr6bottomEv+0x12>
    515a:	cf 91       	pop	r28
    515c:	1f 91       	pop	r17
    515e:	0f 91       	pop	r16
    5160:	ff 90       	pop	r15
    5162:	ef 90       	pop	r14
    5164:	08 95       	ret

00005166 <_ZN7monitor6bottomEv>:
    5166:	ef 92       	push	r14
    5168:	ff 92       	push	r15
    516a:	0f 93       	push	r16
    516c:	1f 93       	push	r17
    516e:	cf 93       	push	r28
    5170:	7c 01       	movw	r14, r24
    5172:	c0 e5       	ldi	r28, 0x50	; 80
    5174:	00 e0       	ldi	r16, 0x00	; 0
    5176:	10 e0       	ldi	r17, 0x00	; 0
    5178:	d7 01       	movw	r26, r14
    517a:	59 96       	adiw	r26, 0x19	; 25
    517c:	ed 91       	ld	r30, X+
    517e:	fc 91       	ld	r31, X
    5180:	5a 97       	sbiw	r26, 0x1a	; 26
    5182:	e0 0f       	add	r30, r16
    5184:	f1 1f       	adc	r31, r17
    5186:	28 e3       	ldi	r18, 0x38	; 56
    5188:	4c 2f       	mov	r20, r28
    518a:	60 85       	ldd	r22, Z+8	; 0x08
    518c:	57 96       	adiw	r26, 0x17	; 23
    518e:	8d 91       	ld	r24, X+
    5190:	9c 91       	ld	r25, X
    5192:	58 97       	sbiw	r26, 0x18	; 24
    5194:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5198:	0f 5f       	subi	r16, 0xFF	; 255
    519a:	1f 4f       	sbci	r17, 0xFF	; 255
    519c:	ca 5f       	subi	r28, 0xFA	; 250
    519e:	c0 38       	cpi	r28, 0x80	; 128
    51a0:	59 f7       	brne	.-42     	; 0x5178 <_ZN7monitor6bottomEv+0x12>
    51a2:	cf 91       	pop	r28
    51a4:	1f 91       	pop	r17
    51a6:	0f 91       	pop	r16
    51a8:	ff 90       	pop	r15
    51aa:	ef 90       	pop	r14
    51ac:	08 95       	ret

000051ae <_ZN5tacho4drawEv>:
    51ae:	8f 92       	push	r8
    51b0:	9f 92       	push	r9
    51b2:	af 92       	push	r10
    51b4:	bf 92       	push	r11
    51b6:	ef 92       	push	r14
    51b8:	ff 92       	push	r15
    51ba:	0f 93       	push	r16
    51bc:	1f 93       	push	r17
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	ec 01       	movw	r28, r24
    51c4:	8f 89       	ldd	r24, Y+23	; 0x17
    51c6:	98 8d       	ldd	r25, Y+24	; 0x18
    51c8:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    51cc:	e8 81       	ld	r30, Y
    51ce:	f9 81       	ldd	r31, Y+1	; 0x01
    51d0:	01 90       	ld	r0, Z+
    51d2:	f0 81       	ld	r31, Z
    51d4:	e0 2d       	mov	r30, r0
    51d6:	ce 01       	movw	r24, r28
    51d8:	09 95       	icall
    51da:	e8 81       	ld	r30, Y
    51dc:	f9 81       	ldd	r31, Y+1	; 0x01
    51de:	02 80       	ldd	r0, Z+2	; 0x02
    51e0:	f3 81       	ldd	r31, Z+3	; 0x03
    51e2:	e0 2d       	mov	r30, r0
    51e4:	ce 01       	movw	r24, r28
    51e6:	09 95       	icall
    51e8:	20 e8       	ldi	r18, 0x80	; 128
    51ea:	47 e3       	ldi	r20, 0x37	; 55
    51ec:	60 e0       	ldi	r22, 0x00	; 0
    51ee:	8f 89       	ldd	r24, Y+23	; 0x17
    51f0:	98 8d       	ldd	r25, Y+24	; 0x18
    51f2:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
    51f6:	25 e4       	ldi	r18, 0x45	; 69
    51f8:	4f e0       	ldi	r20, 0x0F	; 15
    51fa:	60 e0       	ldi	r22, 0x00	; 0
    51fc:	8f 89       	ldd	r24, Y+23	; 0x17
    51fe:	98 8d       	ldd	r25, Y+24	; 0x18
    5200:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
    5204:	2b e3       	ldi	r18, 0x3B	; 59
    5206:	47 e0       	ldi	r20, 0x07	; 7
    5208:	65 e4       	ldi	r22, 0x45	; 69
    520a:	8f 89       	ldd	r24, Y+23	; 0x17
    520c:	98 8d       	ldd	r25, Y+24	; 0x18
    520e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
    5212:	20 e1       	ldi	r18, 0x10	; 16
    5214:	40 e0       	ldi	r20, 0x00	; 0
    5216:	65 e4       	ldi	r22, 0x45	; 69
    5218:	8f 89       	ldd	r24, Y+23	; 0x17
    521a:	98 8d       	ldd	r25, Y+24	; 0x18
    521c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN7Display9drawVLineEhhh>
    5220:	21 e4       	ldi	r18, 0x41	; 65
    5222:	47 e2       	ldi	r20, 0x27	; 39
    5224:	6f e3       	ldi	r22, 0x3F	; 63
    5226:	8f 89       	ldd	r24, Y+23	; 0x17
    5228:	98 8d       	ldd	r25, Y+24	; 0x18
    522a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
    522e:	20 e3       	ldi	r18, 0x30	; 48
    5230:	40 e1       	ldi	r20, 0x10	; 16
    5232:	6f e3       	ldi	r22, 0x3F	; 63
    5234:	8f 89       	ldd	r24, Y+23	; 0x17
    5236:	98 8d       	ldd	r25, Y+24	; 0x18
    5238:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN7Display9drawVLineEhhh>
    523c:	21 e4       	ldi	r18, 0x41	; 65
    523e:	48 e1       	ldi	r20, 0x18	; 24
    5240:	6f e3       	ldi	r22, 0x3F	; 63
    5242:	8f 89       	ldd	r24, Y+23	; 0x17
    5244:	98 8d       	ldd	r25, Y+24	; 0x18
    5246:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN7Display9drawHLineEhhh>
    524a:	e9 8d       	ldd	r30, Y+25	; 0x19
    524c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    524e:	60 81       	ld	r22, Z
    5250:	60 53       	subi	r22, 0x30	; 48
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	40 e0       	ldi	r20, 0x00	; 0
    5256:	8f 89       	ldd	r24, Y+23	; 0x17
    5258:	98 8d       	ldd	r25, Y+24	; 0x18
    525a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    525e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5260:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5262:	61 81       	ldd	r22, Z+1	; 0x01
    5264:	60 53       	subi	r22, 0x30	; 48
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	40 e1       	ldi	r20, 0x10	; 16
    526a:	8f 89       	ldd	r24, Y+23	; 0x17
    526c:	98 8d       	ldd	r25, Y+24	; 0x18
    526e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    5272:	e9 8d       	ldd	r30, Y+25	; 0x19
    5274:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5276:	63 81       	ldd	r22, Z+3	; 0x03
    5278:	60 53       	subi	r22, 0x30	; 48
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	45 e2       	ldi	r20, 0x25	; 37
    527e:	8f 89       	ldd	r24, Y+23	; 0x17
    5280:	98 8d       	ldd	r25, Y+24	; 0x18
    5282:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    5286:	e9 8d       	ldd	r30, Y+25	; 0x19
    5288:	fa 8d       	ldd	r31, Y+26	; 0x1a
    528a:	64 81       	ldd	r22, Z+4	; 0x04
    528c:	60 53       	subi	r22, 0x30	; 48
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	45 e3       	ldi	r20, 0x35	; 53
    5292:	8f 89       	ldd	r24, Y+23	; 0x17
    5294:	98 8d       	ldd	r25, Y+24	; 0x18
    5296:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    529a:	7e 01       	movw	r14, r28
    529c:	22 e0       	ldi	r18, 0x02	; 2
    529e:	e2 0e       	add	r14, r18
    52a0:	f1 1c       	adc	r15, r1
    52a2:	80 91 bf 08 	lds	r24, 0x08BF
    52a6:	8f 93       	push	r24
    52a8:	80 91 be 08 	lds	r24, 0x08BE
    52ac:	8f 93       	push	r24
    52ae:	80 91 bd 08 	lds	r24, 0x08BD
    52b2:	8f 93       	push	r24
    52b4:	80 91 bc 08 	lds	r24, 0x08BC
    52b8:	8f 93       	push	r24
    52ba:	86 e9       	ldi	r24, 0x96	; 150
    52bc:	91 e0       	ldi	r25, 0x01	; 1
    52be:	9f 93       	push	r25
    52c0:	8f 93       	push	r24
    52c2:	ff 92       	push	r15
    52c4:	ef 92       	push	r14
    52c6:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    52ca:	8e 8b       	std	Y+22, r24	; 0x16
    52cc:	18 e0       	ldi	r17, 0x08	; 8
    52ce:	18 1b       	sub	r17, r24
    52d0:	8d b7       	in	r24, 0x3d	; 61
    52d2:	9e b7       	in	r25, 0x3e	; 62
    52d4:	08 96       	adiw	r24, 0x08	; 8
    52d6:	0f b6       	in	r0, 0x3f	; 63
    52d8:	f8 94       	cli
    52da:	9e bf       	out	0x3e, r25	; 62
    52dc:	0f be       	out	0x3f, r0	; 63
    52de:	8d bf       	out	0x3d, r24	; 61
    52e0:	18 30       	cpi	r17, 0x08	; 8
    52e2:	f8 f4       	brcc	.+62     	; 0x5322 <_ZN5tacho4drawEv+0x174>
    52e4:	01 2f       	mov	r16, r17
    52e6:	02 95       	swap	r16
    52e8:	00 7f       	andi	r16, 0xF0	; 240
    52ea:	8e 89       	ldd	r24, Y+22	; 0x16
    52ec:	fe 01       	movw	r30, r28
    52ee:	e1 0f       	add	r30, r17
    52f0:	f1 1d       	adc	r31, r1
    52f2:	e8 0f       	add	r30, r24
    52f4:	f1 1d       	adc	r31, r1
    52f6:	36 97       	sbiw	r30, 0x06	; 6
    52f8:	60 81       	ld	r22, Z
    52fa:	6e 32       	cpi	r22, 0x2E	; 46
    52fc:	39 f4       	brne	.+14     	; 0x530c <_ZN5tacho4drawEv+0x15e>
    52fe:	20 e2       	ldi	r18, 0x20	; 32
    5300:	40 2f       	mov	r20, r16
    5302:	8f 89       	ldd	r24, Y+23	; 0x17
    5304:	98 8d       	ldd	r25, Y+24	; 0x18
    5306:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    530a:	07 c0       	rjmp	.+14     	; 0x531a <_ZN5tacho4drawEv+0x16c>
    530c:	60 53       	subi	r22, 0x30	; 48
    530e:	28 e1       	ldi	r18, 0x18	; 24
    5310:	40 2f       	mov	r20, r16
    5312:	8f 89       	ldd	r24, Y+23	; 0x17
    5314:	98 8d       	ldd	r25, Y+24	; 0x18
    5316:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    531a:	1f 5f       	subi	r17, 0xFF	; 255
    531c:	00 5f       	subi	r16, 0xF0	; 240
    531e:	18 30       	cpi	r17, 0x08	; 8
    5320:	21 f7       	brne	.-56     	; 0x52ea <_ZN5tacho4drawEv+0x13c>
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	4a e7       	ldi	r20, 0x7A	; 122
    5328:	54 e4       	ldi	r21, 0x44	; 68
    532a:	60 91 b8 08 	lds	r22, 0x08B8
    532e:	70 91 b9 08 	lds	r23, 0x08B9
    5332:	80 91 ba 08 	lds	r24, 0x08BA
    5336:	90 91 bb 08 	lds	r25, 0x08BB
    533a:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    533e:	9f 93       	push	r25
    5340:	8f 93       	push	r24
    5342:	7f 93       	push	r23
    5344:	6f 93       	push	r22
    5346:	8c e9       	ldi	r24, 0x9C	; 156
    5348:	91 e0       	ldi	r25, 0x01	; 1
    534a:	9f 93       	push	r25
    534c:	8f 93       	push	r24
    534e:	ff 92       	push	r15
    5350:	ef 92       	push	r14
    5352:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    5356:	8e 8b       	std	Y+22, r24	; 0x16
    5358:	2d b7       	in	r18, 0x3d	; 61
    535a:	3e b7       	in	r19, 0x3e	; 62
    535c:	28 5f       	subi	r18, 0xF8	; 248
    535e:	3f 4f       	sbci	r19, 0xFF	; 255
    5360:	0f b6       	in	r0, 0x3f	; 63
    5362:	f8 94       	cli
    5364:	3e bf       	out	0x3e, r19	; 62
    5366:	0f be       	out	0x3f, r0	; 63
    5368:	2d bf       	out	0x3d, r18	; 61
    536a:	88 23       	and	r24, r24
    536c:	89 f0       	breq	.+34     	; 0x5390 <_ZN5tacho4drawEv+0x1e2>
    536e:	06 e4       	ldi	r16, 0x46	; 70
    5370:	10 e0       	ldi	r17, 0x00	; 0
    5372:	fe 01       	movw	r30, r28
    5374:	e1 0f       	add	r30, r17
    5376:	f1 1d       	adc	r31, r1
    5378:	20 e1       	ldi	r18, 0x10	; 16
    537a:	40 2f       	mov	r20, r16
    537c:	62 81       	ldd	r22, Z+2	; 0x02
    537e:	8f 89       	ldd	r24, Y+23	; 0x17
    5380:	98 8d       	ldd	r25, Y+24	; 0x18
    5382:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5386:	1f 5f       	subi	r17, 0xFF	; 255
    5388:	0a 5f       	subi	r16, 0xFA	; 250
    538a:	8e 89       	ldd	r24, Y+22	; 0x16
    538c:	18 17       	cp	r17, r24
    538e:	88 f3       	brcs	.-30     	; 0x5372 <_ZN5tacho4drawEv+0x1c4>
    5390:	80 91 b7 08 	lds	r24, 0x08B7
    5394:	8f 93       	push	r24
    5396:	80 91 b6 08 	lds	r24, 0x08B6
    539a:	8f 93       	push	r24
    539c:	80 91 b5 08 	lds	r24, 0x08B5
    53a0:	8f 93       	push	r24
    53a2:	80 91 b4 08 	lds	r24, 0x08B4
    53a6:	8f 93       	push	r24
    53a8:	83 ea       	ldi	r24, 0xA3	; 163
    53aa:	91 e0       	ldi	r25, 0x01	; 1
    53ac:	9f 93       	push	r25
    53ae:	8f 93       	push	r24
    53b0:	ff 92       	push	r15
    53b2:	ef 92       	push	r14
    53b4:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    53b8:	8e 8b       	std	Y+22, r24	; 0x16
    53ba:	2d b7       	in	r18, 0x3d	; 61
    53bc:	3e b7       	in	r19, 0x3e	; 62
    53be:	28 5f       	subi	r18, 0xF8	; 248
    53c0:	3f 4f       	sbci	r19, 0xFF	; 255
    53c2:	0f b6       	in	r0, 0x3f	; 63
    53c4:	f8 94       	cli
    53c6:	3e bf       	out	0x3e, r19	; 62
    53c8:	0f be       	out	0x3f, r0	; 63
    53ca:	2d bf       	out	0x3d, r18	; 61
    53cc:	88 23       	and	r24, r24
    53ce:	89 f0       	breq	.+34     	; 0x53f2 <_ZN5tacho4drawEv+0x244>
    53d0:	06 e4       	ldi	r16, 0x46	; 70
    53d2:	10 e0       	ldi	r17, 0x00	; 0
    53d4:	fe 01       	movw	r30, r28
    53d6:	e1 0f       	add	r30, r17
    53d8:	f1 1d       	adc	r31, r1
    53da:	28 e2       	ldi	r18, 0x28	; 40
    53dc:	40 2f       	mov	r20, r16
    53de:	62 81       	ldd	r22, Z+2	; 0x02
    53e0:	8f 89       	ldd	r24, Y+23	; 0x17
    53e2:	98 8d       	ldd	r25, Y+24	; 0x18
    53e4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    53e8:	1f 5f       	subi	r17, 0xFF	; 255
    53ea:	0a 5f       	subi	r16, 0xFA	; 250
    53ec:	8e 89       	ldd	r24, Y+22	; 0x16
    53ee:	18 17       	cp	r17, r24
    53f0:	88 f3       	brcs	.-30     	; 0x53d4 <_ZN5tacho4drawEv+0x226>
    53f2:	80 90 b0 08 	lds	r8, 0x08B0
    53f6:	90 90 b1 08 	lds	r9, 0x08B1
    53fa:	a0 90 b2 08 	lds	r10, 0x08B2
    53fe:	b0 90 b3 08 	lds	r11, 0x08B3
    5402:	c5 01       	movw	r24, r10
    5404:	b4 01       	movw	r22, r8
    5406:	2c e3       	ldi	r18, 0x3C	; 60
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	40 e0       	ldi	r20, 0x00	; 0
    540c:	50 e0       	ldi	r21, 0x00	; 0
    540e:	0e 94 bb 4a 	call	0x9576	; 0x9576 <__udivmodsi4>
    5412:	1f 92       	push	r1
    5414:	6f 93       	push	r22
    5416:	1f 92       	push	r1
    5418:	2f 93       	push	r18
    541a:	c5 01       	movw	r24, r10
    541c:	b4 01       	movw	r22, r8
    541e:	20 e1       	ldi	r18, 0x10	; 16
    5420:	3e e0       	ldi	r19, 0x0E	; 14
    5422:	40 e0       	ldi	r20, 0x00	; 0
    5424:	50 e0       	ldi	r21, 0x00	; 0
    5426:	0e 94 bb 4a 	call	0x9576	; 0x9576 <__udivmodsi4>
    542a:	1f 92       	push	r1
    542c:	2f 93       	push	r18
    542e:	8c ea       	ldi	r24, 0xAC	; 172
    5430:	91 e0       	ldi	r25, 0x01	; 1
    5432:	9f 93       	push	r25
    5434:	8f 93       	push	r24
    5436:	ff 92       	push	r15
    5438:	ef 92       	push	r14
    543a:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    543e:	8e 8b       	std	Y+22, r24	; 0x16
    5440:	2d b7       	in	r18, 0x3d	; 61
    5442:	3e b7       	in	r19, 0x3e	; 62
    5444:	26 5f       	subi	r18, 0xF6	; 246
    5446:	3f 4f       	sbci	r19, 0xFF	; 255
    5448:	0f b6       	in	r0, 0x3f	; 63
    544a:	f8 94       	cli
    544c:	3e bf       	out	0x3e, r19	; 62
    544e:	0f be       	out	0x3f, r0	; 63
    5450:	2d bf       	out	0x3d, r18	; 61
    5452:	88 23       	and	r24, r24
    5454:	89 f0       	breq	.+34     	; 0x5478 <_ZN5tacho4drawEv+0x2ca>
    5456:	06 e4       	ldi	r16, 0x46	; 70
    5458:	10 e0       	ldi	r17, 0x00	; 0
    545a:	fe 01       	movw	r30, r28
    545c:	e1 0f       	add	r30, r17
    545e:	f1 1d       	adc	r31, r1
    5460:	20 e3       	ldi	r18, 0x30	; 48
    5462:	40 2f       	mov	r20, r16
    5464:	62 81       	ldd	r22, Z+2	; 0x02
    5466:	8f 89       	ldd	r24, Y+23	; 0x17
    5468:	98 8d       	ldd	r25, Y+24	; 0x18
    546a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    546e:	1f 5f       	subi	r17, 0xFF	; 255
    5470:	0a 5f       	subi	r16, 0xFA	; 250
    5472:	8e 89       	ldd	r24, Y+22	; 0x16
    5474:	18 17       	cp	r17, r24
    5476:	88 f3       	brcs	.-30     	; 0x545a <_ZN5tacho4drawEv+0x2ac>
    5478:	60 91 b0 08 	lds	r22, 0x08B0
    547c:	70 91 b1 08 	lds	r23, 0x08B1
    5480:	80 91 b2 08 	lds	r24, 0x08B2
    5484:	90 91 b3 08 	lds	r25, 0x08B3
    5488:	61 15       	cp	r22, r1
    548a:	71 05       	cpc	r23, r1
    548c:	81 05       	cpc	r24, r1
    548e:	91 05       	cpc	r25, r1
    5490:	b1 f4       	brne	.+44     	; 0x54be <_ZN5tacho4drawEv+0x310>
    5492:	1f 92       	push	r1
    5494:	1f 92       	push	r1
    5496:	1f 92       	push	r1
    5498:	1f 92       	push	r1
    549a:	83 ea       	ldi	r24, 0xA3	; 163
    549c:	91 e0       	ldi	r25, 0x01	; 1
    549e:	9f 93       	push	r25
    54a0:	8f 93       	push	r24
    54a2:	ff 92       	push	r15
    54a4:	ef 92       	push	r14
    54a6:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    54aa:	8e 8b       	std	Y+22, r24	; 0x16
    54ac:	8d b7       	in	r24, 0x3d	; 61
    54ae:	9e b7       	in	r25, 0x3e	; 62
    54b0:	08 96       	adiw	r24, 0x08	; 8
    54b2:	0f b6       	in	r0, 0x3f	; 63
    54b4:	f8 94       	cli
    54b6:	9e bf       	out	0x3e, r25	; 62
    54b8:	0f be       	out	0x3f, r0	; 63
    54ba:	8d bf       	out	0x3d, r24	; 61
    54bc:	2a c0       	rjmp	.+84     	; 0x5512 <_ZN5tacho4drawEv+0x364>
    54be:	0e 94 65 44 	call	0x88ca	; 0x88ca <__floatunsisf>
    54c2:	9b 01       	movw	r18, r22
    54c4:	ac 01       	movw	r20, r24
    54c6:	60 91 b8 08 	lds	r22, 0x08B8
    54ca:	70 91 b9 08 	lds	r23, 0x08B9
    54ce:	80 91 ba 08 	lds	r24, 0x08BA
    54d2:	90 91 bb 08 	lds	r25, 0x08BB
    54d6:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    54da:	26 e6       	ldi	r18, 0x66	; 102
    54dc:	36 e6       	ldi	r19, 0x66	; 102
    54de:	46 e6       	ldi	r20, 0x66	; 102
    54e0:	50 e4       	ldi	r21, 0x40	; 64
    54e2:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    54e6:	9f 93       	push	r25
    54e8:	8f 93       	push	r24
    54ea:	7f 93       	push	r23
    54ec:	6f 93       	push	r22
    54ee:	83 ea       	ldi	r24, 0xA3	; 163
    54f0:	91 e0       	ldi	r25, 0x01	; 1
    54f2:	9f 93       	push	r25
    54f4:	8f 93       	push	r24
    54f6:	ff 92       	push	r15
    54f8:	ef 92       	push	r14
    54fa:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    54fe:	8e 8b       	std	Y+22, r24	; 0x16
    5500:	2d b7       	in	r18, 0x3d	; 61
    5502:	3e b7       	in	r19, 0x3e	; 62
    5504:	28 5f       	subi	r18, 0xF8	; 248
    5506:	3f 4f       	sbci	r19, 0xFF	; 255
    5508:	0f b6       	in	r0, 0x3f	; 63
    550a:	f8 94       	cli
    550c:	3e bf       	out	0x3e, r19	; 62
    550e:	0f be       	out	0x3f, r0	; 63
    5510:	2d bf       	out	0x3d, r18	; 61
    5512:	8e 89       	ldd	r24, Y+22	; 0x16
    5514:	88 23       	and	r24, r24
    5516:	89 f0       	breq	.+34     	; 0x553a <_ZN5tacho4drawEv+0x38c>
    5518:	0b e4       	ldi	r16, 0x4B	; 75
    551a:	10 e0       	ldi	r17, 0x00	; 0
    551c:	fe 01       	movw	r30, r28
    551e:	e1 0f       	add	r30, r17
    5520:	f1 1d       	adc	r31, r1
    5522:	28 e0       	ldi	r18, 0x08	; 8
    5524:	40 2f       	mov	r20, r16
    5526:	62 81       	ldd	r22, Z+2	; 0x02
    5528:	8f 89       	ldd	r24, Y+23	; 0x17
    552a:	98 8d       	ldd	r25, Y+24	; 0x18
    552c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5530:	1f 5f       	subi	r17, 0xFF	; 255
    5532:	0a 5f       	subi	r16, 0xFA	; 250
    5534:	8e 89       	ldd	r24, Y+22	; 0x16
    5536:	18 17       	cp	r17, r24
    5538:	88 f3       	brcs	.-30     	; 0x551c <_ZN5tacho4drawEv+0x36e>
    553a:	8f 89       	ldd	r24, Y+23	; 0x17
    553c:	98 8d       	ldd	r25, Y+24	; 0x18
    553e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	1f 91       	pop	r17
    5548:	0f 91       	pop	r16
    554a:	ff 90       	pop	r15
    554c:	ef 90       	pop	r14
    554e:	bf 90       	pop	r11
    5550:	af 90       	pop	r10
    5552:	9f 90       	pop	r9
    5554:	8f 90       	pop	r8
    5556:	08 95       	ret

00005558 <_ZN7wandern4drawEv>:
    5558:	2f 92       	push	r2
    555a:	3f 92       	push	r3
    555c:	4f 92       	push	r4
    555e:	5f 92       	push	r5
    5560:	6f 92       	push	r6
    5562:	7f 92       	push	r7
    5564:	8f 92       	push	r8
    5566:	9f 92       	push	r9
    5568:	af 92       	push	r10
    556a:	bf 92       	push	r11
    556c:	cf 92       	push	r12
    556e:	df 92       	push	r13
    5570:	ef 92       	push	r14
    5572:	ff 92       	push	r15
    5574:	0f 93       	push	r16
    5576:	1f 93       	push	r17
    5578:	cf 93       	push	r28
    557a:	df 93       	push	r29
    557c:	cd b7       	in	r28, 0x3d	; 61
    557e:	de b7       	in	r29, 0x3e	; 62
    5580:	2a 97       	sbiw	r28, 0x0a	; 10
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	f8 94       	cli
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	cd bf       	out	0x3d, r28	; 61
    558c:	9a 87       	std	Y+10, r25	; 0x0a
    558e:	89 87       	std	Y+9, r24	; 0x09
    5590:	dc 01       	movw	r26, r24
    5592:	57 96       	adiw	r26, 0x17	; 23
    5594:	8d 91       	ld	r24, X+
    5596:	9c 91       	ld	r25, X
    5598:	58 97       	sbiw	r26, 0x18	; 24
    559a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    559e:	a9 85       	ldd	r26, Y+9	; 0x09
    55a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    55a2:	ed 91       	ld	r30, X+
    55a4:	fc 91       	ld	r31, X
    55a6:	11 97       	sbiw	r26, 0x01	; 1
    55a8:	01 90       	ld	r0, Z+
    55aa:	f0 81       	ld	r31, Z
    55ac:	e0 2d       	mov	r30, r0
    55ae:	cd 01       	movw	r24, r26
    55b0:	09 95       	icall
    55b2:	a9 85       	ldd	r26, Y+9	; 0x09
    55b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    55b6:	ed 91       	ld	r30, X+
    55b8:	fc 91       	ld	r31, X
    55ba:	11 97       	sbiw	r26, 0x01	; 1
    55bc:	02 80       	ldd	r0, Z+2	; 0x02
    55be:	f3 81       	ldd	r31, Z+3	; 0x03
    55c0:	e0 2d       	mov	r30, r0
    55c2:	cd 01       	movw	r24, r26
    55c4:	09 95       	icall
    55c6:	c0 90 ee 08 	lds	r12, 0x08EE
    55ca:	d0 90 ef 08 	lds	r13, 0x08EF
    55ce:	e0 90 f0 08 	lds	r14, 0x08F0
    55d2:	f0 90 f1 08 	lds	r15, 0x08F1
    55d6:	c7 01       	movw	r24, r14
    55d8:	b6 01       	movw	r22, r12
    55da:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    55de:	a6 2e       	mov	r10, r22
    55e0:	06 2e       	mov	r0, r22
    55e2:	00 0c       	add	r0, r0
    55e4:	77 0b       	sbc	r23, r23
    55e6:	88 0b       	sbc	r24, r24
    55e8:	99 0b       	sbc	r25, r25
    55ea:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    55ee:	9b 01       	movw	r18, r22
    55f0:	ac 01       	movw	r20, r24
    55f2:	c7 01       	movw	r24, r14
    55f4:	b6 01       	movw	r22, r12
    55f6:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    55fa:	20 e0       	ldi	r18, 0x00	; 0
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	40 e7       	ldi	r20, 0x70	; 112
    5600:	52 e4       	ldi	r21, 0x42	; 66
    5602:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    5606:	69 83       	std	Y+1, r22	; 0x01
    5608:	7a 83       	std	Y+2, r23	; 0x02
    560a:	8b 83       	std	Y+3, r24	; 0x03
    560c:	9c 83       	std	Y+4, r25	; 0x04
    560e:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    5612:	b6 2e       	mov	r11, r22
    5614:	40 90 da 08 	lds	r4, 0x08DA
    5618:	50 90 db 08 	lds	r5, 0x08DB
    561c:	60 90 dc 08 	lds	r6, 0x08DC
    5620:	70 90 dd 08 	lds	r7, 0x08DD
    5624:	c3 01       	movw	r24, r6
    5626:	b2 01       	movw	r22, r4
    5628:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    562c:	6b 01       	movw	r12, r22
    562e:	7c 01       	movw	r14, r24
    5630:	07 2e       	mov	r0, r23
    5632:	00 0c       	add	r0, r0
    5634:	88 0b       	sbc	r24, r24
    5636:	99 0b       	sbc	r25, r25
    5638:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    563c:	9b 01       	movw	r18, r22
    563e:	ac 01       	movw	r20, r24
    5640:	c3 01       	movw	r24, r6
    5642:	b2 01       	movw	r22, r4
    5644:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    5648:	20 e0       	ldi	r18, 0x00	; 0
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	40 e7       	ldi	r20, 0x70	; 112
    564e:	52 e4       	ldi	r21, 0x42	; 66
    5650:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    5654:	2b 01       	movw	r4, r22
    5656:	3c 01       	movw	r6, r24
    5658:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    565c:	96 2e       	mov	r9, r22
    565e:	06 2e       	mov	r0, r22
    5660:	00 0c       	add	r0, r0
    5662:	77 0b       	sbc	r23, r23
    5664:	88 0b       	sbc	r24, r24
    5666:	99 0b       	sbc	r25, r25
    5668:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    566c:	9b 01       	movw	r18, r22
    566e:	ac 01       	movw	r20, r24
    5670:	c3 01       	movw	r24, r6
    5672:	b2 01       	movw	r22, r4
    5674:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    5678:	20 e0       	ldi	r18, 0x00	; 0
    567a:	30 e0       	ldi	r19, 0x00	; 0
    567c:	40 e7       	ldi	r20, 0x70	; 112
    567e:	52 e4       	ldi	r21, 0x42	; 66
    5680:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    5684:	16 2f       	mov	r17, r22
    5686:	87 2e       	mov	r8, r23
    5688:	38 2e       	mov	r3, r24
    568a:	29 2e       	mov	r2, r25
    568c:	69 84       	ldd	r6, Y+9	; 0x09
    568e:	7a 84       	ldd	r7, Y+10	; 0x0a
    5690:	b2 e0       	ldi	r27, 0x02	; 2
    5692:	6b 0e       	add	r6, r27
    5694:	71 1c       	adc	r7, r1
    5696:	6b 2d       	mov	r22, r11
    5698:	0b 2c       	mov	r0, r11
    569a:	00 0c       	add	r0, r0
    569c:	77 0b       	sbc	r23, r23
    569e:	88 0b       	sbc	r24, r24
    56a0:	99 0b       	sbc	r25, r25
    56a2:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    56a6:	9b 01       	movw	r18, r22
    56a8:	ac 01       	movw	r20, r24
    56aa:	69 81       	ldd	r22, Y+1	; 0x01
    56ac:	7a 81       	ldd	r23, Y+2	; 0x02
    56ae:	8b 81       	ldd	r24, Y+3	; 0x03
    56b0:	9c 81       	ldd	r25, Y+4	; 0x04
    56b2:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	40 e7       	ldi	r20, 0x70	; 112
    56bc:	52 e4       	ldi	r21, 0x42	; 66
    56be:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    56c2:	9f 93       	push	r25
    56c4:	8f 93       	push	r24
    56c6:	7f 93       	push	r23
    56c8:	6f 93       	push	r22
    56ca:	8b 2d       	mov	r24, r11
    56cc:	0b 2c       	mov	r0, r11
    56ce:	00 0c       	add	r0, r0
    56d0:	99 0b       	sbc	r25, r25
    56d2:	9f 93       	push	r25
    56d4:	bf 92       	push	r11
    56d6:	8a 2d       	mov	r24, r10
    56d8:	0a 2c       	mov	r0, r10
    56da:	00 0c       	add	r0, r0
    56dc:	99 0b       	sbc	r25, r25
    56de:	9f 93       	push	r25
    56e0:	af 92       	push	r10
    56e2:	8b eb       	ldi	r24, 0xBB	; 187
    56e4:	91 e0       	ldi	r25, 0x01	; 1
    56e6:	9f 93       	push	r25
    56e8:	8f 93       	push	r24
    56ea:	7f 92       	push	r7
    56ec:	6f 92       	push	r6
    56ee:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    56f2:	e9 85       	ldd	r30, Y+9	; 0x09
    56f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    56f6:	86 8b       	std	Z+22, r24	; 0x16
    56f8:	0f b6       	in	r0, 0x3f	; 63
    56fa:	f8 94       	cli
    56fc:	de bf       	out	0x3e, r29	; 62
    56fe:	0f be       	out	0x3f, r0	; 63
    5700:	cd bf       	out	0x3d, r28	; 61
    5702:	88 23       	and	r24, r24
    5704:	c1 f0       	breq	.+48     	; 0x5736 <_ZN7wandern4drawEv+0x1de>
    5706:	00 e0       	ldi	r16, 0x00	; 0
    5708:	b1 2c       	mov	r11, r1
    570a:	e9 85       	ldd	r30, Y+9	; 0x09
    570c:	fa 85       	ldd	r31, Y+10	; 0x0a
    570e:	eb 0d       	add	r30, r11
    5710:	f1 1d       	adc	r31, r1
    5712:	20 e1       	ldi	r18, 0x10	; 16
    5714:	40 2f       	mov	r20, r16
    5716:	62 81       	ldd	r22, Z+2	; 0x02
    5718:	a9 85       	ldd	r26, Y+9	; 0x09
    571a:	ba 85       	ldd	r27, Y+10	; 0x0a
    571c:	57 96       	adiw	r26, 0x17	; 23
    571e:	8d 91       	ld	r24, X+
    5720:	9c 91       	ld	r25, X
    5722:	58 97       	sbiw	r26, 0x18	; 24
    5724:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5728:	b3 94       	inc	r11
    572a:	0a 5f       	subi	r16, 0xFA	; 250
    572c:	e9 85       	ldd	r30, Y+9	; 0x09
    572e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5730:	86 89       	ldd	r24, Z+22	; 0x16
    5732:	b8 16       	cp	r11, r24
    5734:	50 f3       	brcs	.-44     	; 0x570a <_ZN7wandern4drawEv+0x1b2>
    5736:	2f 92       	push	r2
    5738:	3f 92       	push	r3
    573a:	8f 92       	push	r8
    573c:	1f 93       	push	r17
    573e:	89 2d       	mov	r24, r9
    5740:	09 2c       	mov	r0, r9
    5742:	00 0c       	add	r0, r0
    5744:	99 0b       	sbc	r25, r25
    5746:	9f 93       	push	r25
    5748:	9f 92       	push	r9
    574a:	df 92       	push	r13
    574c:	cf 92       	push	r12
    574e:	81 ed       	ldi	r24, 0xD1	; 209
    5750:	91 e0       	ldi	r25, 0x01	; 1
    5752:	9f 93       	push	r25
    5754:	8f 93       	push	r24
    5756:	7f 92       	push	r7
    5758:	6f 92       	push	r6
    575a:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    575e:	a9 85       	ldd	r26, Y+9	; 0x09
    5760:	ba 85       	ldd	r27, Y+10	; 0x0a
    5762:	56 96       	adiw	r26, 0x16	; 22
    5764:	8c 93       	st	X, r24
    5766:	0f b6       	in	r0, 0x3f	; 63
    5768:	f8 94       	cli
    576a:	de bf       	out	0x3e, r29	; 62
    576c:	0f be       	out	0x3f, r0	; 63
    576e:	cd bf       	out	0x3d, r28	; 61
    5770:	88 23       	and	r24, r24
    5772:	c1 f0       	breq	.+48     	; 0x57a4 <_ZN7wandern4drawEv+0x24c>
    5774:	10 e0       	ldi	r17, 0x00	; 0
    5776:	f1 2c       	mov	r15, r1
    5778:	e9 85       	ldd	r30, Y+9	; 0x09
    577a:	fa 85       	ldd	r31, Y+10	; 0x0a
    577c:	ef 0d       	add	r30, r15
    577e:	f1 1d       	adc	r31, r1
    5780:	28 e1       	ldi	r18, 0x18	; 24
    5782:	41 2f       	mov	r20, r17
    5784:	62 81       	ldd	r22, Z+2	; 0x02
    5786:	a9 85       	ldd	r26, Y+9	; 0x09
    5788:	ba 85       	ldd	r27, Y+10	; 0x0a
    578a:	57 96       	adiw	r26, 0x17	; 23
    578c:	8d 91       	ld	r24, X+
    578e:	9c 91       	ld	r25, X
    5790:	58 97       	sbiw	r26, 0x18	; 24
    5792:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5796:	f3 94       	inc	r15
    5798:	1a 5f       	subi	r17, 0xFA	; 250
    579a:	e9 85       	ldd	r30, Y+9	; 0x09
    579c:	fa 85       	ldd	r31, Y+10	; 0x0a
    579e:	86 89       	ldd	r24, Z+22	; 0x16
    57a0:	f8 16       	cp	r15, r24
    57a2:	50 f3       	brcs	.-44     	; 0x5778 <_ZN7wandern4drawEv+0x220>
    57a4:	80 91 c9 08 	lds	r24, 0x08C9
    57a8:	8f 93       	push	r24
    57aa:	80 91 c8 08 	lds	r24, 0x08C8
    57ae:	8f 93       	push	r24
    57b0:	80 91 c7 08 	lds	r24, 0x08C7
    57b4:	8f 93       	push	r24
    57b6:	80 91 c6 08 	lds	r24, 0x08C6
    57ba:	8f 93       	push	r24
    57bc:	86 ee       	ldi	r24, 0xE6	; 230
    57be:	91 e0       	ldi	r25, 0x01	; 1
    57c0:	9f 93       	push	r25
    57c2:	8f 93       	push	r24
    57c4:	7f 92       	push	r7
    57c6:	6f 92       	push	r6
    57c8:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    57cc:	a9 85       	ldd	r26, Y+9	; 0x09
    57ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    57d0:	56 96       	adiw	r26, 0x16	; 22
    57d2:	8c 93       	st	X, r24
    57d4:	0f b6       	in	r0, 0x3f	; 63
    57d6:	f8 94       	cli
    57d8:	de bf       	out	0x3e, r29	; 62
    57da:	0f be       	out	0x3f, r0	; 63
    57dc:	cd bf       	out	0x3d, r28	; 61
    57de:	88 23       	and	r24, r24
    57e0:	c1 f0       	breq	.+48     	; 0x5812 <_ZN7wandern4drawEv+0x2ba>
    57e2:	10 e0       	ldi	r17, 0x00	; 0
    57e4:	f1 2c       	mov	r15, r1
    57e6:	e9 85       	ldd	r30, Y+9	; 0x09
    57e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    57ea:	ef 0d       	add	r30, r15
    57ec:	f1 1d       	adc	r31, r1
    57ee:	20 e2       	ldi	r18, 0x20	; 32
    57f0:	41 2f       	mov	r20, r17
    57f2:	62 81       	ldd	r22, Z+2	; 0x02
    57f4:	a9 85       	ldd	r26, Y+9	; 0x09
    57f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    57f8:	57 96       	adiw	r26, 0x17	; 23
    57fa:	8d 91       	ld	r24, X+
    57fc:	9c 91       	ld	r25, X
    57fe:	58 97       	sbiw	r26, 0x18	; 24
    5800:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5804:	f3 94       	inc	r15
    5806:	1a 5f       	subi	r17, 0xFA	; 250
    5808:	e9 85       	ldd	r30, Y+9	; 0x09
    580a:	fa 85       	ldd	r31, Y+10	; 0x0a
    580c:	86 89       	ldd	r24, Z+22	; 0x16
    580e:	f8 16       	cp	r15, r24
    5810:	50 f3       	brcs	.-44     	; 0x57e6 <_ZN7wandern4drawEv+0x28e>
    5812:	80 91 c0 08 	lds	r24, 0x08C0
    5816:	1f 92       	push	r1
    5818:	8f 93       	push	r24
    581a:	80 91 c1 08 	lds	r24, 0x08C1
    581e:	1f 92       	push	r1
    5820:	8f 93       	push	r24
    5822:	80 91 c2 08 	lds	r24, 0x08C2
    5826:	1f 92       	push	r1
    5828:	8f 93       	push	r24
    582a:	80 91 c3 08 	lds	r24, 0x08C3
    582e:	1f 92       	push	r1
    5830:	8f 93       	push	r24
    5832:	80 91 c4 08 	lds	r24, 0x08C4
    5836:	1f 92       	push	r1
    5838:	8f 93       	push	r24
    583a:	80 91 c5 08 	lds	r24, 0x08C5
    583e:	1f 92       	push	r1
    5840:	8f 93       	push	r24
    5842:	80 ef       	ldi	r24, 0xF0	; 240
    5844:	91 e0       	ldi	r25, 0x01	; 1
    5846:	9f 93       	push	r25
    5848:	8f 93       	push	r24
    584a:	7f 92       	push	r7
    584c:	6f 92       	push	r6
    584e:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    5852:	a9 85       	ldd	r26, Y+9	; 0x09
    5854:	ba 85       	ldd	r27, Y+10	; 0x0a
    5856:	56 96       	adiw	r26, 0x16	; 22
    5858:	8c 93       	st	X, r24
    585a:	0f b6       	in	r0, 0x3f	; 63
    585c:	f8 94       	cli
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	0f be       	out	0x3f, r0	; 63
    5862:	cd bf       	out	0x3d, r28	; 61
    5864:	88 23       	and	r24, r24
    5866:	c1 f0       	breq	.+48     	; 0x5898 <_ZN7wandern4drawEv+0x340>
    5868:	10 e0       	ldi	r17, 0x00	; 0
    586a:	f1 2c       	mov	r15, r1
    586c:	e9 85       	ldd	r30, Y+9	; 0x09
    586e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5870:	ef 0d       	add	r30, r15
    5872:	f1 1d       	adc	r31, r1
    5874:	28 e2       	ldi	r18, 0x28	; 40
    5876:	41 2f       	mov	r20, r17
    5878:	62 81       	ldd	r22, Z+2	; 0x02
    587a:	a9 85       	ldd	r26, Y+9	; 0x09
    587c:	ba 85       	ldd	r27, Y+10	; 0x0a
    587e:	57 96       	adiw	r26, 0x17	; 23
    5880:	8d 91       	ld	r24, X+
    5882:	9c 91       	ld	r25, X
    5884:	58 97       	sbiw	r26, 0x18	; 24
    5886:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    588a:	f3 94       	inc	r15
    588c:	1a 5f       	subi	r17, 0xFA	; 250
    588e:	e9 85       	ldd	r30, Y+9	; 0x09
    5890:	fa 85       	ldd	r31, Y+10	; 0x0a
    5892:	86 89       	ldd	r24, Z+22	; 0x16
    5894:	f8 16       	cp	r15, r24
    5896:	50 f3       	brcs	.-44     	; 0x586c <_ZN7wandern4drawEv+0x314>
    5898:	ec e4       	ldi	r30, 0x4C	; 76
    589a:	f9 e0       	ldi	r31, 0x09	; 9
    589c:	83 85       	ldd	r24, Z+11	; 0x0b
    589e:	8f 93       	push	r24
    58a0:	82 85       	ldd	r24, Z+10	; 0x0a
    58a2:	8f 93       	push	r24
    58a4:	81 85       	ldd	r24, Z+9	; 0x09
    58a6:	8f 93       	push	r24
    58a8:	80 85       	ldd	r24, Z+8	; 0x08
    58aa:	8f 93       	push	r24
    58ac:	83 81       	ldd	r24, Z+3	; 0x03
    58ae:	8f 93       	push	r24
    58b0:	82 81       	ldd	r24, Z+2	; 0x02
    58b2:	8f 93       	push	r24
    58b4:	81 81       	ldd	r24, Z+1	; 0x01
    58b6:	8f 93       	push	r24
    58b8:	80 81       	ld	r24, Z
    58ba:	8f 93       	push	r24
    58bc:	8e e0       	ldi	r24, 0x0E	; 14
    58be:	92 e0       	ldi	r25, 0x02	; 2
    58c0:	9f 93       	push	r25
    58c2:	8f 93       	push	r24
    58c4:	7f 92       	push	r7
    58c6:	6f 92       	push	r6
    58c8:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    58cc:	a9 85       	ldd	r26, Y+9	; 0x09
    58ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    58d0:	56 96       	adiw	r26, 0x16	; 22
    58d2:	8c 93       	st	X, r24
    58d4:	0f b6       	in	r0, 0x3f	; 63
    58d6:	f8 94       	cli
    58d8:	de bf       	out	0x3e, r29	; 62
    58da:	0f be       	out	0x3f, r0	; 63
    58dc:	cd bf       	out	0x3d, r28	; 61
    58de:	88 23       	and	r24, r24
    58e0:	c1 f0       	breq	.+48     	; 0x5912 <_ZN7wandern4drawEv+0x3ba>
    58e2:	10 e0       	ldi	r17, 0x00	; 0
    58e4:	f1 2c       	mov	r15, r1
    58e6:	e9 85       	ldd	r30, Y+9	; 0x09
    58e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    58ea:	ef 0d       	add	r30, r15
    58ec:	f1 1d       	adc	r31, r1
    58ee:	20 e3       	ldi	r18, 0x30	; 48
    58f0:	41 2f       	mov	r20, r17
    58f2:	62 81       	ldd	r22, Z+2	; 0x02
    58f4:	a9 85       	ldd	r26, Y+9	; 0x09
    58f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    58f8:	57 96       	adiw	r26, 0x17	; 23
    58fa:	8d 91       	ld	r24, X+
    58fc:	9c 91       	ld	r25, X
    58fe:	58 97       	sbiw	r26, 0x18	; 24
    5900:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5904:	f3 94       	inc	r15
    5906:	1a 5f       	subi	r17, 0xFA	; 250
    5908:	e9 85       	ldd	r30, Y+9	; 0x09
    590a:	fa 85       	ldd	r31, Y+10	; 0x0a
    590c:	86 89       	ldd	r24, Z+22	; 0x16
    590e:	f8 16       	cp	r15, r24
    5910:	50 f3       	brcs	.-44     	; 0x58e6 <_ZN7wandern4drawEv+0x38e>
    5912:	ec e4       	ldi	r30, 0x4C	; 76
    5914:	f9 e0       	ldi	r31, 0x09	; 9
    5916:	87 85       	ldd	r24, Z+15	; 0x0f
    5918:	8f 93       	push	r24
    591a:	86 85       	ldd	r24, Z+14	; 0x0e
    591c:	8f 93       	push	r24
    591e:	85 85       	ldd	r24, Z+13	; 0x0d
    5920:	8f 93       	push	r24
    5922:	84 85       	ldd	r24, Z+12	; 0x0c
    5924:	8f 93       	push	r24
    5926:	85 e1       	ldi	r24, 0x15	; 21
    5928:	92 e0       	ldi	r25, 0x02	; 2
    592a:	9f 93       	push	r25
    592c:	8f 93       	push	r24
    592e:	7f 92       	push	r7
    5930:	6f 92       	push	r6
    5932:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    5936:	a9 85       	ldd	r26, Y+9	; 0x09
    5938:	ba 85       	ldd	r27, Y+10	; 0x0a
    593a:	56 96       	adiw	r26, 0x16	; 22
    593c:	8c 93       	st	X, r24
    593e:	0f b6       	in	r0, 0x3f	; 63
    5940:	f8 94       	cli
    5942:	de bf       	out	0x3e, r29	; 62
    5944:	0f be       	out	0x3f, r0	; 63
    5946:	cd bf       	out	0x3d, r28	; 61
    5948:	88 23       	and	r24, r24
    594a:	c1 f0       	breq	.+48     	; 0x597c <_ZN7wandern4drawEv+0x424>
    594c:	00 e0       	ldi	r16, 0x00	; 0
    594e:	10 e0       	ldi	r17, 0x00	; 0
    5950:	e9 85       	ldd	r30, Y+9	; 0x09
    5952:	fa 85       	ldd	r31, Y+10	; 0x0a
    5954:	e1 0f       	add	r30, r17
    5956:	f1 1d       	adc	r31, r1
    5958:	28 e3       	ldi	r18, 0x38	; 56
    595a:	40 2f       	mov	r20, r16
    595c:	62 81       	ldd	r22, Z+2	; 0x02
    595e:	a9 85       	ldd	r26, Y+9	; 0x09
    5960:	ba 85       	ldd	r27, Y+10	; 0x0a
    5962:	57 96       	adiw	r26, 0x17	; 23
    5964:	8d 91       	ld	r24, X+
    5966:	9c 91       	ld	r25, X
    5968:	58 97       	sbiw	r26, 0x18	; 24
    596a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    596e:	1f 5f       	subi	r17, 0xFF	; 255
    5970:	0a 5f       	subi	r16, 0xFA	; 250
    5972:	e9 85       	ldd	r30, Y+9	; 0x09
    5974:	fa 85       	ldd	r31, Y+10	; 0x0a
    5976:	86 89       	ldd	r24, Z+22	; 0x16
    5978:	18 17       	cp	r17, r24
    597a:	50 f3       	brcs	.-44     	; 0x5950 <_ZN7wandern4drawEv+0x3f8>
    597c:	a9 85       	ldd	r26, Y+9	; 0x09
    597e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5980:	57 96       	adiw	r26, 0x17	; 23
    5982:	8d 91       	ld	r24, X+
    5984:	9c 91       	ld	r25, X
    5986:	58 97       	sbiw	r26, 0x18	; 24
    5988:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    598c:	2a 96       	adiw	r28, 0x0a	; 10
    598e:	0f b6       	in	r0, 0x3f	; 63
    5990:	f8 94       	cli
    5992:	de bf       	out	0x3e, r29	; 62
    5994:	0f be       	out	0x3f, r0	; 63
    5996:	cd bf       	out	0x3d, r28	; 61
    5998:	df 91       	pop	r29
    599a:	cf 91       	pop	r28
    599c:	1f 91       	pop	r17
    599e:	0f 91       	pop	r16
    59a0:	ff 90       	pop	r15
    59a2:	ef 90       	pop	r14
    59a4:	df 90       	pop	r13
    59a6:	cf 90       	pop	r12
    59a8:	bf 90       	pop	r11
    59aa:	af 90       	pop	r10
    59ac:	9f 90       	pop	r9
    59ae:	8f 90       	pop	r8
    59b0:	7f 90       	pop	r7
    59b2:	6f 90       	pop	r6
    59b4:	5f 90       	pop	r5
    59b6:	4f 90       	pop	r4
    59b8:	3f 90       	pop	r3
    59ba:	2f 90       	pop	r2
    59bc:	08 95       	ret

000059be <_ZN5menue4drawEv>:
    59be:	ef 92       	push	r14
    59c0:	ff 92       	push	r15
    59c2:	0f 93       	push	r16
    59c4:	1f 93       	push	r17
    59c6:	cf 93       	push	r28
    59c8:	df 93       	push	r29
    59ca:	ec 01       	movw	r28, r24
    59cc:	8f 89       	ldd	r24, Y+23	; 0x17
    59ce:	98 8d       	ldd	r25, Y+24	; 0x18
    59d0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    59d4:	e8 81       	ld	r30, Y
    59d6:	f9 81       	ldd	r31, Y+1	; 0x01
    59d8:	01 90       	ld	r0, Z+
    59da:	f0 81       	ld	r31, Z
    59dc:	e0 2d       	mov	r30, r0
    59de:	ce 01       	movw	r24, r28
    59e0:	09 95       	icall
    59e2:	e8 81       	ld	r30, Y
    59e4:	f9 81       	ldd	r31, Y+1	; 0x01
    59e6:	02 80       	ldd	r0, Z+2	; 0x02
    59e8:	f3 81       	ldd	r31, Z+3	; 0x03
    59ea:	e0 2d       	mov	r30, r0
    59ec:	ce 01       	movw	r24, r28
    59ee:	09 95       	icall
    59f0:	7e 01       	movw	r14, r28
    59f2:	82 e0       	ldi	r24, 0x02	; 2
    59f4:	e8 0e       	add	r14, r24
    59f6:	f1 1c       	adc	r15, r1
    59f8:	85 e5       	ldi	r24, 0x55	; 85
    59fa:	98 e6       	ldi	r25, 0x68	; 104
    59fc:	a2 e7       	ldi	r26, 0x72	; 114
    59fe:	b0 e0       	ldi	r27, 0x00	; 0
    5a00:	8a 83       	std	Y+2, r24	; 0x02
    5a02:	9b 83       	std	Y+3, r25	; 0x03
    5a04:	ac 83       	std	Y+4, r26	; 0x04
    5a06:	bd 83       	std	Y+5, r27	; 0x05
    5a08:	83 e0       	ldi	r24, 0x03	; 3
    5a0a:	8e 8b       	std	Y+22, r24	; 0x16
    5a0c:	0c e0       	ldi	r16, 0x0C	; 12
    5a0e:	10 e0       	ldi	r17, 0x00	; 0
    5a10:	fe 01       	movw	r30, r28
    5a12:	e1 0f       	add	r30, r17
    5a14:	f1 1d       	adc	r31, r1
    5a16:	20 e1       	ldi	r18, 0x10	; 16
    5a18:	40 2f       	mov	r20, r16
    5a1a:	62 81       	ldd	r22, Z+2	; 0x02
    5a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a20:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5a24:	1f 5f       	subi	r17, 0xFF	; 255
    5a26:	0a 5f       	subi	r16, 0xFA	; 250
    5a28:	8e 89       	ldd	r24, Y+22	; 0x16
    5a2a:	18 17       	cp	r17, r24
    5a2c:	88 f3       	brcs	.-30     	; 0x5a10 <_ZN5menue4drawEv+0x52>
    5a2e:	86 e0       	ldi	r24, 0x06	; 6
    5a30:	eb e1       	ldi	r30, 0x1B	; 27
    5a32:	f2 e0       	ldi	r31, 0x02	; 2
    5a34:	d7 01       	movw	r26, r14
    5a36:	01 90       	ld	r0, Z+
    5a38:	0d 92       	st	X+, r0
    5a3a:	8a 95       	dec	r24
    5a3c:	e1 f7       	brne	.-8      	; 0x5a36 <_ZN5menue4drawEv+0x78>
    5a3e:	85 e0       	ldi	r24, 0x05	; 5
    5a40:	8e 8b       	std	Y+22, r24	; 0x16
    5a42:	0c e0       	ldi	r16, 0x0C	; 12
    5a44:	10 e0       	ldi	r17, 0x00	; 0
    5a46:	fe 01       	movw	r30, r28
    5a48:	e1 0f       	add	r30, r17
    5a4a:	f1 1d       	adc	r31, r1
    5a4c:	28 e1       	ldi	r18, 0x18	; 24
    5a4e:	40 2f       	mov	r20, r16
    5a50:	62 81       	ldd	r22, Z+2	; 0x02
    5a52:	8f 89       	ldd	r24, Y+23	; 0x17
    5a54:	98 8d       	ldd	r25, Y+24	; 0x18
    5a56:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5a5a:	1f 5f       	subi	r17, 0xFF	; 255
    5a5c:	0a 5f       	subi	r16, 0xFA	; 250
    5a5e:	8e 89       	ldd	r24, Y+22	; 0x16
    5a60:	18 17       	cp	r17, r24
    5a62:	88 f3       	brcs	.-30     	; 0x5a46 <_ZN5menue4drawEv+0x88>
    5a64:	88 e0       	ldi	r24, 0x08	; 8
    5a66:	e1 e2       	ldi	r30, 0x21	; 33
    5a68:	f2 e0       	ldi	r31, 0x02	; 2
    5a6a:	d7 01       	movw	r26, r14
    5a6c:	01 90       	ld	r0, Z+
    5a6e:	0d 92       	st	X+, r0
    5a70:	8a 95       	dec	r24
    5a72:	e1 f7       	brne	.-8      	; 0x5a6c <_ZN5menue4drawEv+0xae>
    5a74:	87 e0       	ldi	r24, 0x07	; 7
    5a76:	8e 8b       	std	Y+22, r24	; 0x16
    5a78:	0c e0       	ldi	r16, 0x0C	; 12
    5a7a:	10 e0       	ldi	r17, 0x00	; 0
    5a7c:	fe 01       	movw	r30, r28
    5a7e:	e1 0f       	add	r30, r17
    5a80:	f1 1d       	adc	r31, r1
    5a82:	20 e2       	ldi	r18, 0x20	; 32
    5a84:	40 2f       	mov	r20, r16
    5a86:	62 81       	ldd	r22, Z+2	; 0x02
    5a88:	8f 89       	ldd	r24, Y+23	; 0x17
    5a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a8c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5a90:	1f 5f       	subi	r17, 0xFF	; 255
    5a92:	0a 5f       	subi	r16, 0xFA	; 250
    5a94:	8e 89       	ldd	r24, Y+22	; 0x16
    5a96:	18 17       	cp	r17, r24
    5a98:	88 f3       	brcs	.-30     	; 0x5a7c <_ZN5menue4drawEv+0xbe>
    5a9a:	8e e0       	ldi	r24, 0x0E	; 14
    5a9c:	e9 e2       	ldi	r30, 0x29	; 41
    5a9e:	f2 e0       	ldi	r31, 0x02	; 2
    5aa0:	d7 01       	movw	r26, r14
    5aa2:	01 90       	ld	r0, Z+
    5aa4:	0d 92       	st	X+, r0
    5aa6:	8a 95       	dec	r24
    5aa8:	e1 f7       	brne	.-8      	; 0x5aa2 <_ZN5menue4drawEv+0xe4>
    5aaa:	8d e0       	ldi	r24, 0x0D	; 13
    5aac:	8e 8b       	std	Y+22, r24	; 0x16
    5aae:	0c e0       	ldi	r16, 0x0C	; 12
    5ab0:	10 e0       	ldi	r17, 0x00	; 0
    5ab2:	fe 01       	movw	r30, r28
    5ab4:	e1 0f       	add	r30, r17
    5ab6:	f1 1d       	adc	r31, r1
    5ab8:	28 e2       	ldi	r18, 0x28	; 40
    5aba:	40 2f       	mov	r20, r16
    5abc:	62 81       	ldd	r22, Z+2	; 0x02
    5abe:	8f 89       	ldd	r24, Y+23	; 0x17
    5ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ac2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5ac6:	1f 5f       	subi	r17, 0xFF	; 255
    5ac8:	0a 5f       	subi	r16, 0xFA	; 250
    5aca:	8e 89       	ldd	r24, Y+22	; 0x16
    5acc:	18 17       	cp	r17, r24
    5ace:	88 f3       	brcs	.-30     	; 0x5ab2 <_ZN5menue4drawEv+0xf4>
    5ad0:	8c e0       	ldi	r24, 0x0C	; 12
    5ad2:	e7 e3       	ldi	r30, 0x37	; 55
    5ad4:	f2 e0       	ldi	r31, 0x02	; 2
    5ad6:	d7 01       	movw	r26, r14
    5ad8:	01 90       	ld	r0, Z+
    5ada:	0d 92       	st	X+, r0
    5adc:	8a 95       	dec	r24
    5ade:	e1 f7       	brne	.-8      	; 0x5ad8 <_ZN5menue4drawEv+0x11a>
    5ae0:	8b e0       	ldi	r24, 0x0B	; 11
    5ae2:	8e 8b       	std	Y+22, r24	; 0x16
    5ae4:	0c e0       	ldi	r16, 0x0C	; 12
    5ae6:	10 e0       	ldi	r17, 0x00	; 0
    5ae8:	fe 01       	movw	r30, r28
    5aea:	e1 0f       	add	r30, r17
    5aec:	f1 1d       	adc	r31, r1
    5aee:	20 e3       	ldi	r18, 0x30	; 48
    5af0:	40 2f       	mov	r20, r16
    5af2:	62 81       	ldd	r22, Z+2	; 0x02
    5af4:	8f 89       	ldd	r24, Y+23	; 0x17
    5af6:	98 8d       	ldd	r25, Y+24	; 0x18
    5af8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5afc:	1f 5f       	subi	r17, 0xFF	; 255
    5afe:	0a 5f       	subi	r16, 0xFA	; 250
    5b00:	8e 89       	ldd	r24, Y+22	; 0x16
    5b02:	18 17       	cp	r17, r24
    5b04:	88 f3       	brcs	.-30     	; 0x5ae8 <_ZN5menue4drawEv+0x12a>
    5b06:	2d a1       	ldd	r18, Y+37	; 0x25
    5b08:	22 0f       	add	r18, r18
    5b0a:	22 0f       	add	r18, r18
    5b0c:	22 0f       	add	r18, r18
    5b0e:	20 5f       	subi	r18, 0xF0	; 240
    5b10:	40 e0       	ldi	r20, 0x00	; 0
    5b12:	6e e3       	ldi	r22, 0x3E	; 62
    5b14:	8f 89       	ldd	r24, Y+23	; 0x17
    5b16:	98 8d       	ldd	r25, Y+24	; 0x18
    5b18:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    5b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    5b20:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    5b24:	df 91       	pop	r29
    5b26:	cf 91       	pop	r28
    5b28:	1f 91       	pop	r17
    5b2a:	0f 91       	pop	r16
    5b2c:	ff 90       	pop	r15
    5b2e:	ef 90       	pop	r14
    5b30:	08 95       	ret

00005b32 <_ZN9wilkommen4drawEv>:
    5b32:	ef 92       	push	r14
    5b34:	ff 92       	push	r15
    5b36:	0f 93       	push	r16
    5b38:	1f 93       	push	r17
    5b3a:	cf 93       	push	r28
    5b3c:	df 93       	push	r29
    5b3e:	ec 01       	movw	r28, r24
    5b40:	8f 89       	ldd	r24, Y+23	; 0x17
    5b42:	98 8d       	ldd	r25, Y+24	; 0x18
    5b44:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
    5b48:	7e 01       	movw	r14, r28
    5b4a:	22 e0       	ldi	r18, 0x02	; 2
    5b4c:	e2 0e       	add	r14, r18
    5b4e:	f1 1c       	adc	r15, r1
    5b50:	8f e0       	ldi	r24, 0x0F	; 15
    5b52:	e3 e4       	ldi	r30, 0x43	; 67
    5b54:	f2 e0       	ldi	r31, 0x02	; 2
    5b56:	d7 01       	movw	r26, r14
    5b58:	01 90       	ld	r0, Z+
    5b5a:	0d 92       	st	X+, r0
    5b5c:	8a 95       	dec	r24
    5b5e:	e1 f7       	brne	.-8      	; 0x5b58 <_ZN9wilkommen4drawEv+0x26>
    5b60:	8e e0       	ldi	r24, 0x0E	; 14
    5b62:	8e 8b       	std	Y+22, r24	; 0x16
    5b64:	00 e0       	ldi	r16, 0x00	; 0
    5b66:	10 e0       	ldi	r17, 0x00	; 0
    5b68:	fe 01       	movw	r30, r28
    5b6a:	e1 0f       	add	r30, r17
    5b6c:	f1 1d       	adc	r31, r1
    5b6e:	20 e0       	ldi	r18, 0x00	; 0
    5b70:	40 2f       	mov	r20, r16
    5b72:	62 81       	ldd	r22, Z+2	; 0x02
    5b74:	8f 89       	ldd	r24, Y+23	; 0x17
    5b76:	98 8d       	ldd	r25, Y+24	; 0x18
    5b78:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5b7c:	1f 5f       	subi	r17, 0xFF	; 255
    5b7e:	0a 5f       	subi	r16, 0xFA	; 250
    5b80:	8e 89       	ldd	r24, Y+22	; 0x16
    5b82:	18 17       	cp	r17, r24
    5b84:	88 f3       	brcs	.-30     	; 0x5b68 <_ZN9wilkommen4drawEv+0x36>
    5b86:	8f e0       	ldi	r24, 0x0F	; 15
    5b88:	e2 e5       	ldi	r30, 0x52	; 82
    5b8a:	f2 e0       	ldi	r31, 0x02	; 2
    5b8c:	d7 01       	movw	r26, r14
    5b8e:	01 90       	ld	r0, Z+
    5b90:	0d 92       	st	X+, r0
    5b92:	8a 95       	dec	r24
    5b94:	e1 f7       	brne	.-8      	; 0x5b8e <_ZN9wilkommen4drawEv+0x5c>
    5b96:	8e e0       	ldi	r24, 0x0E	; 14
    5b98:	8e 8b       	std	Y+22, r24	; 0x16
    5b9a:	00 e0       	ldi	r16, 0x00	; 0
    5b9c:	10 e0       	ldi	r17, 0x00	; 0
    5b9e:	fe 01       	movw	r30, r28
    5ba0:	e1 0f       	add	r30, r17
    5ba2:	f1 1d       	adc	r31, r1
    5ba4:	28 e0       	ldi	r18, 0x08	; 8
    5ba6:	40 2f       	mov	r20, r16
    5ba8:	62 81       	ldd	r22, Z+2	; 0x02
    5baa:	8f 89       	ldd	r24, Y+23	; 0x17
    5bac:	98 8d       	ldd	r25, Y+24	; 0x18
    5bae:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5bb2:	1f 5f       	subi	r17, 0xFF	; 255
    5bb4:	0a 5f       	subi	r16, 0xFA	; 250
    5bb6:	8e 89       	ldd	r24, Y+22	; 0x16
    5bb8:	18 17       	cp	r17, r24
    5bba:	88 f3       	brcs	.-30     	; 0x5b9e <_ZN9wilkommen4drawEv+0x6c>
    5bbc:	80 e4       	ldi	r24, 0x40	; 64
    5bbe:	8f 93       	push	r24
    5bc0:	84 e4       	ldi	r24, 0x44	; 68
    5bc2:	8f 93       	push	r24
    5bc4:	8a e7       	ldi	r24, 0x7A	; 122
    5bc6:	8f 93       	push	r24
    5bc8:	81 ee       	ldi	r24, 0xE1	; 225
    5bca:	8f 93       	push	r24
    5bcc:	81 e6       	ldi	r24, 0x61	; 97
    5bce:	92 e0       	ldi	r25, 0x02	; 2
    5bd0:	9f 93       	push	r25
    5bd2:	8f 93       	push	r24
    5bd4:	ff 92       	push	r15
    5bd6:	ef 92       	push	r14
    5bd8:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    5bdc:	8e 8b       	std	Y+22, r24	; 0x16
    5bde:	2d b7       	in	r18, 0x3d	; 61
    5be0:	3e b7       	in	r19, 0x3e	; 62
    5be2:	28 5f       	subi	r18, 0xF8	; 248
    5be4:	3f 4f       	sbci	r19, 0xFF	; 255
    5be6:	0f b6       	in	r0, 0x3f	; 63
    5be8:	f8 94       	cli
    5bea:	3e bf       	out	0x3e, r19	; 62
    5bec:	0f be       	out	0x3f, r0	; 63
    5bee:	2d bf       	out	0x3d, r18	; 61
    5bf0:	88 23       	and	r24, r24
    5bf2:	89 f0       	breq	.+34     	; 0x5c16 <_ZN9wilkommen4drawEv+0xe4>
    5bf4:	00 e0       	ldi	r16, 0x00	; 0
    5bf6:	10 e0       	ldi	r17, 0x00	; 0
    5bf8:	fe 01       	movw	r30, r28
    5bfa:	e1 0f       	add	r30, r17
    5bfc:	f1 1d       	adc	r31, r1
    5bfe:	20 e2       	ldi	r18, 0x20	; 32
    5c00:	40 2f       	mov	r20, r16
    5c02:	62 81       	ldd	r22, Z+2	; 0x02
    5c04:	8f 89       	ldd	r24, Y+23	; 0x17
    5c06:	98 8d       	ldd	r25, Y+24	; 0x18
    5c08:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5c0c:	1f 5f       	subi	r17, 0xFF	; 255
    5c0e:	0a 5f       	subi	r16, 0xFA	; 250
    5c10:	8e 89       	ldd	r24, Y+22	; 0x16
    5c12:	18 17       	cp	r17, r24
    5c14:	88 f3       	brcs	.-30     	; 0x5bf8 <_ZN9wilkommen4drawEv+0xc6>
    5c16:	8f 89       	ldd	r24, Y+23	; 0x17
    5c18:	98 8d       	ldd	r25, Y+24	; 0x18
    5c1a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    5c1e:	df 91       	pop	r29
    5c20:	cf 91       	pop	r28
    5c22:	1f 91       	pop	r17
    5c24:	0f 91       	pop	r16
    5c26:	ff 90       	pop	r15
    5c28:	ef 90       	pop	r14
    5c2a:	08 95       	ret

00005c2c <_Z8ADC_Readh>:
    5c2c:	ec e7       	ldi	r30, 0x7C	; 124
    5c2e:	f0 e0       	ldi	r31, 0x00	; 0
    5c30:	90 81       	ld	r25, Z
    5c32:	8f 71       	andi	r24, 0x1F	; 31
    5c34:	90 7e       	andi	r25, 0xE0	; 224
    5c36:	89 2b       	or	r24, r25
    5c38:	80 83       	st	Z, r24
    5c3a:	ea e7       	ldi	r30, 0x7A	; 122
    5c3c:	f0 e0       	ldi	r31, 0x00	; 0
    5c3e:	80 81       	ld	r24, Z
    5c40:	80 64       	ori	r24, 0x40	; 64
    5c42:	80 83       	st	Z, r24
    5c44:	80 81       	ld	r24, Z
    5c46:	86 fd       	sbrc	r24, 6
    5c48:	fd cf       	rjmp	.-6      	; 0x5c44 <_Z8ADC_Readh+0x18>
    5c4a:	80 91 78 00 	lds	r24, 0x0078
    5c4e:	90 91 79 00 	lds	r25, 0x0079
    5c52:	08 95       	ret

00005c54 <_Z7statavva>:
#ifndef BATMAX
#define BATMAX	4.2
#endif

#define numberavv 13.0
int8_t statavv(int8_t stat){
    5c54:	a2 e6       	ldi	r26, 0x62	; 98
    5c56:	b4 e0       	ldi	r27, 0x04	; 4
    5c58:	e3 e6       	ldi	r30, 0x63	; 99
    5c5a:	f4 e0       	ldi	r31, 0x04	; 4
    5c5c:	26 e5       	ldi	r18, 0x56	; 86
    5c5e:	34 e0       	ldi	r19, 0x04	; 4
	static int8_t mavv[(uint8_t)numberavv];
	int16_t summe = 0;
	
	for (uint8_t i=numberavv; i>=1; i--)
	{
		mavv[i] = mavv[i-1];
    5c60:	9e 91       	ld	r25, -X
    5c62:	92 93       	st	-Z, r25
#define numberavv 13.0
int8_t statavv(int8_t stat){
	static int8_t mavv[(uint8_t)numberavv];
	int16_t summe = 0;
	
	for (uint8_t i=numberavv; i>=1; i--)
    5c64:	e2 17       	cp	r30, r18
    5c66:	f3 07       	cpc	r31, r19
    5c68:	d9 f7       	brne	.-10     	; 0x5c60 <_Z7statavva+0xc>
	{
		mavv[i] = mavv[i-1];
	}
	mavv[0] = stat;
    5c6a:	80 93 55 04 	sts	0x0455, r24
    5c6e:	e5 e5       	ldi	r30, 0x55	; 85
    5c70:	f4 e0       	ldi	r31, 0x04	; 4
    5c72:	22 e6       	ldi	r18, 0x62	; 98
    5c74:	34 e0       	ldi	r19, 0x04	; 4
    5c76:	60 e0       	ldi	r22, 0x00	; 0
    5c78:	70 e0       	ldi	r23, 0x00	; 0
	
	for (uint8_t i=0; i<numberavv; i++)
	{
		summe += mavv[i];
    5c7a:	81 91       	ld	r24, Z+
    5c7c:	68 0f       	add	r22, r24
    5c7e:	71 1d       	adc	r23, r1
    5c80:	87 fd       	sbrc	r24, 7
    5c82:	7a 95       	dec	r23
	{
		mavv[i] = mavv[i-1];
	}
	mavv[0] = stat;
	
	for (uint8_t i=0; i<numberavv; i++)
    5c84:	e2 17       	cp	r30, r18
    5c86:	f3 07       	cpc	r31, r19
    5c88:	c1 f7       	brne	.-16     	; 0x5c7a <_Z7statavva+0x26>
	{
		summe += mavv[i];
	}
	
	return summe/numberavv;
    5c8a:	07 2e       	mov	r0, r23
    5c8c:	00 0c       	add	r0, r0
    5c8e:	88 0b       	sbc	r24, r24
    5c90:	99 0b       	sbc	r25, r25
    5c92:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    5c96:	20 e0       	ldi	r18, 0x00	; 0
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	40 e5       	ldi	r20, 0x50	; 80
    5c9c:	51 e4       	ldi	r21, 0x41	; 65
    5c9e:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    5ca2:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    5ca6:	86 2f       	mov	r24, r22
}
    5ca8:	08 95       	ret

00005caa <_Z14Batteriestatusv>:

int8_t Batteriestatus(){
    5caa:	cf 92       	push	r12
    5cac:	df 92       	push	r13
    5cae:	ef 92       	push	r14
    5cb0:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    5cb2:	80 e0       	ldi	r24, 0x00	; 0
    5cb4:	bb df       	rcall	.-138    	; 0x5c2c <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    5cb6:	bc 01       	movw	r22, r24
    5cb8:	80 e0       	ldi	r24, 0x00	; 0
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	0e 94 65 44 	call	0x88ca	; 0x88ca <__floatunsisf>
    5cc0:	20 e0       	ldi	r18, 0x00	; 0
    5cc2:	30 ec       	ldi	r19, 0xC0	; 192
    5cc4:	4f e7       	ldi	r20, 0x7F	; 127
    5cc6:	54 e4       	ldi	r21, 0x44	; 68
    5cc8:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    5ccc:	2c e5       	ldi	r18, 0x5C	; 92
    5cce:	3f e8       	ldi	r19, 0x8F	; 143
    5cd0:	42 e5       	ldi	r20, 0x52	; 82
    5cd2:	50 e4       	ldi	r21, 0x40	; 64
    5cd4:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    5cd8:	2d e0       	ldi	r18, 0x0D	; 13
    5cda:	31 e7       	ldi	r19, 0x71	; 113
    5cdc:	40 e0       	ldi	r20, 0x00	; 0
    5cde:	50 e4       	ldi	r21, 0x40	; 64
    5ce0:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    5ce4:	60 93 48 09 	sts	0x0948, r22
    5ce8:	70 93 49 09 	sts	0x0949, r23
    5cec:	80 93 4a 09 	sts	0x094A, r24
    5cf0:	90 93 4b 09 	sts	0x094B, r25
	float stat = ((batterie-BATMIN)/(BATMAX-BATMIN)*100);
    5cf4:	26 e6       	ldi	r18, 0x66	; 102
    5cf6:	36 e6       	ldi	r19, 0x66	; 102
    5cf8:	46 e6       	ldi	r20, 0x66	; 102
    5cfa:	50 e4       	ldi	r21, 0x40	; 64
    5cfc:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__subsf3>
    5d00:	28 e9       	ldi	r18, 0x98	; 152
    5d02:	39 e9       	ldi	r19, 0x99	; 153
    5d04:	49 e1       	ldi	r20, 0x19	; 25
    5d06:	5f e3       	ldi	r21, 0x3F	; 63
    5d08:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	48 ec       	ldi	r20, 0xC8	; 200
    5d12:	52 e4       	ldi	r21, 0x42	; 66
    5d14:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    5d18:	6b 01       	movw	r12, r22
    5d1a:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    5d1c:	20 e0       	ldi	r18, 0x00	; 0
    5d1e:	30 e0       	ldi	r19, 0x00	; 0
    5d20:	40 e2       	ldi	r20, 0x20	; 32
    5d22:	51 e4       	ldi	r21, 0x41	; 65
    5d24:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    5d28:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
	if (temp%10>=5)
    5d2c:	8d ec       	ldi	r24, 0xCD	; 205
    5d2e:	68 9f       	mul	r22, r24
    5d30:	81 2d       	mov	r24, r1
    5d32:	11 24       	eor	r1, r1
    5d34:	86 95       	lsr	r24
    5d36:	86 95       	lsr	r24
    5d38:	86 95       	lsr	r24
    5d3a:	88 0f       	add	r24, r24
    5d3c:	28 2f       	mov	r18, r24
    5d3e:	22 0f       	add	r18, r18
    5d40:	22 0f       	add	r18, r18
    5d42:	82 0f       	add	r24, r18
    5d44:	96 2f       	mov	r25, r22
    5d46:	98 1b       	sub	r25, r24
    5d48:	95 30       	cpi	r25, 0x05	; 5
    5d4a:	70 f0       	brcs	.+28     	; 0x5d68 <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    5d4c:	c7 01       	movw	r24, r14
    5d4e:	b6 01       	movw	r22, r12
    5d50:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    5d54:	70 e0       	ldi	r23, 0x00	; 0
    5d56:	6f 5f       	subi	r22, 0xFF	; 255
    5d58:	7f 4f       	sbci	r23, 0xFF	; 255
    5d5a:	07 2e       	mov	r0, r23
    5d5c:	00 0c       	add	r0, r0
    5d5e:	88 0b       	sbc	r24, r24
    5d60:	99 0b       	sbc	r25, r25
    5d62:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    5d66:	09 c0       	rjmp	.+18     	; 0x5d7a <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    5d68:	c7 01       	movw	r24, r14
    5d6a:	b6 01       	movw	r22, r12
    5d6c:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    5d70:	70 e0       	ldi	r23, 0x00	; 0
    5d72:	80 e0       	ldi	r24, 0x00	; 0
    5d74:	90 e0       	ldi	r25, 0x00	; 0
    5d76:	0e 94 65 44 	call	0x88ca	; 0x88ca <__floatunsisf>
	}
	
	return statavv(stat);
    5d7a:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    5d7e:	86 2f       	mov	r24, r22
    5d80:	69 df       	rcall	.-302    	; 0x5c54 <_Z7statavva>
}
    5d82:	ff 90       	pop	r15
    5d84:	ef 90       	pop	r14
    5d86:	df 90       	pop	r13
    5d88:	cf 90       	pop	r12
    5d8a:	08 95       	ret

00005d8c <_ZN3uhr6headerEv>:
		}
	return 0;
	}

	//header
	void header(){
    5d8c:	ef 92       	push	r14
    5d8e:	ff 92       	push	r15
    5d90:	0f 93       	push	r16
    5d92:	1f 93       	push	r17
    5d94:	cf 93       	push	r28
    5d96:	7c 01       	movw	r14, r24
    5d98:	c1 e4       	ldi	r28, 0x41	; 65
    5d9a:	00 e0       	ldi	r16, 0x00	; 0
    5d9c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    5d9e:	d7 01       	movw	r26, r14
    5da0:	59 96       	adiw	r26, 0x19	; 25
    5da2:	ed 91       	ld	r30, X+
    5da4:	fc 91       	ld	r31, X
    5da6:	5a 97       	sbiw	r26, 0x1a	; 26
    5da8:	e0 0f       	add	r30, r16
    5daa:	f1 1f       	adc	r31, r17
    5dac:	20 e0       	ldi	r18, 0x00	; 0
    5dae:	4c 2f       	mov	r20, r28
    5db0:	60 81       	ld	r22, Z
    5db2:	57 96       	adiw	r26, 0x17	; 23
    5db4:	8d 91       	ld	r24, X+
    5db6:	9c 91       	ld	r25, X
    5db8:	58 97       	sbiw	r26, 0x18	; 24
    5dba:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5dbe:	0f 5f       	subi	r16, 0xFF	; 255
    5dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc2:	ca 5f       	subi	r28, 0xFA	; 250
    5dc4:	cf 35       	cpi	r28, 0x5F	; 95
    5dc6:	59 f7       	brne	.-42     	; 0x5d9e <_ZN3uhr6headerEv+0x12>
		oled->drawBATT(Batteriestatus(),SSD1306_WIDTH-13-4,0);
    5dc8:	70 df       	rcall	.-288    	; 0x5caa <_Z14Batteriestatusv>
    5dca:	20 e0       	ldi	r18, 0x00	; 0
    5dcc:	4f e6       	ldi	r20, 0x6F	; 111
    5dce:	68 2f       	mov	r22, r24
    5dd0:	f7 01       	movw	r30, r14
    5dd2:	87 89       	ldd	r24, Z+23	; 0x17
    5dd4:	90 8d       	ldd	r25, Z+24	; 0x18
    5dd6:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7Display8drawBATTEahh>
		oled->drawGPS((gpsstatus&((1<<enable)|(1<<fix)))>>enable,SSD1306_WIDTH-27,0);
    5dda:	60 91 3b 09 	lds	r22, 0x093B
    5dde:	62 95       	swap	r22
    5de0:	66 95       	lsr	r22
    5de2:	66 95       	lsr	r22
    5de4:	63 70       	andi	r22, 0x03	; 3
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	45 e6       	ldi	r20, 0x65	; 101
    5dea:	d7 01       	movw	r26, r14
    5dec:	57 96       	adiw	r26, 0x17	; 23
    5dee:	8d 91       	ld	r24, X+
    5df0:	9c 91       	ld	r25, X
    5df2:	58 97       	sbiw	r26, 0x18	; 24
    5df4:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN7Display7drawGPSEhhh>
		/*
		buffersize=sprintf(buffer,"%i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
		}*/
	}
    5df8:	cf 91       	pop	r28
    5dfa:	1f 91       	pop	r17
    5dfc:	0f 91       	pop	r16
    5dfe:	ff 90       	pop	r15
    5e00:	ef 90       	pop	r14
    5e02:	08 95       	ret

00005e04 <_ZN7monitor6headerEv>:
	char* getname(){
		return &name[0];
	}
	
	//draw header and overload it
	virtual void header(){
    5e04:	ef 92       	push	r14
    5e06:	ff 92       	push	r15
    5e08:	0f 93       	push	r16
    5e0a:	1f 93       	push	r17
    5e0c:	cf 93       	push	r28
    5e0e:	7c 01       	movw	r14, r24
    5e10:	c0 e0       	ldi	r28, 0x00	; 0
    5e12:	00 e0       	ldi	r16, 0x00	; 0
    5e14:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    5e16:	d7 01       	movw	r26, r14
    5e18:	59 96       	adiw	r26, 0x19	; 25
    5e1a:	ed 91       	ld	r30, X+
    5e1c:	fc 91       	ld	r31, X
    5e1e:	5a 97       	sbiw	r26, 0x1a	; 26
    5e20:	e0 0f       	add	r30, r16
    5e22:	f1 1f       	adc	r31, r17
    5e24:	20 e0       	ldi	r18, 0x00	; 0
    5e26:	4c 2f       	mov	r20, r28
    5e28:	60 81       	ld	r22, Z
    5e2a:	57 96       	adiw	r26, 0x17	; 23
    5e2c:	8d 91       	ld	r24, X+
    5e2e:	9c 91       	ld	r25, X
    5e30:	58 97       	sbiw	r26, 0x18	; 24
    5e32:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    5e36:	0f 5f       	subi	r16, 0xFF	; 255
    5e38:	1f 4f       	sbci	r17, 0xFF	; 255
    5e3a:	ca 5f       	subi	r28, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	virtual void header(){
		for(uint8_t i=0;i<8;i++){
    5e3c:	c0 33       	cpi	r28, 0x30	; 48
    5e3e:	59 f7       	brne	.-42     	; 0x5e16 <_ZN7monitor6headerEv+0x12>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		oled->drawBATT(Batteriestatus(),SSD1306_WIDTH-13-4,0);
    5e40:	34 df       	rcall	.-408    	; 0x5caa <_Z14Batteriestatusv>
    5e42:	20 e0       	ldi	r18, 0x00	; 0
    5e44:	4f e6       	ldi	r20, 0x6F	; 111
    5e46:	68 2f       	mov	r22, r24
    5e48:	f7 01       	movw	r30, r14
    5e4a:	87 89       	ldd	r24, Z+23	; 0x17
    5e4c:	90 8d       	ldd	r25, Z+24	; 0x18
    5e4e:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7Display8drawBATTEahh>
		oled->drawGPS((gpsstatus&((1<<enable)|(1<<fix)))>>enable,SSD1306_WIDTH-27,0);
    5e52:	60 91 3b 09 	lds	r22, 0x093B
    5e56:	62 95       	swap	r22
    5e58:	66 95       	lsr	r22
    5e5a:	66 95       	lsr	r22
    5e5c:	63 70       	andi	r22, 0x03	; 3
    5e5e:	20 e0       	ldi	r18, 0x00	; 0
    5e60:	45 e6       	ldi	r20, 0x65	; 101
    5e62:	d7 01       	movw	r26, r14
    5e64:	57 96       	adiw	r26, 0x17	; 23
    5e66:	8d 91       	ld	r24, X+
    5e68:	9c 91       	ld	r25, X
    5e6a:	58 97       	sbiw	r26, 0x18	; 24
    5e6c:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN7Display7drawGPSEhhh>
		/*
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
		}*/
	}
    5e70:	cf 91       	pop	r28
    5e72:	1f 91       	pop	r17
    5e74:	0f 91       	pop	r16
    5e76:	ff 90       	pop	r15
    5e78:	ef 90       	pop	r14
    5e7a:	08 95       	ret

00005e7c <_ZN5tacho6headerEv>:
		}
		return 0;
	}

	//header 
	void header(){
    5e7c:	cf 93       	push	r28
    5e7e:	df 93       	push	r29
    5e80:	ec 01       	movw	r28, r24
		oled->drawBATT(Batteriestatus(),SSD1306_WIDTH-13-4,0);
    5e82:	13 df       	rcall	.-474    	; 0x5caa <_Z14Batteriestatusv>
    5e84:	20 e0       	ldi	r18, 0x00	; 0
    5e86:	4f e6       	ldi	r20, 0x6F	; 111
    5e88:	68 2f       	mov	r22, r24
    5e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    5e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    5e8e:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN7Display8drawBATTEahh>
		oled->drawGPS((gpsstatus&((1<<enable)|(1<<fix)))>>enable,SSD1306_WIDTH-27,0);
    5e92:	60 91 3b 09 	lds	r22, 0x093B
    5e96:	62 95       	swap	r22
    5e98:	66 95       	lsr	r22
    5e9a:	66 95       	lsr	r22
    5e9c:	63 70       	andi	r22, 0x03	; 3
    5e9e:	20 e0       	ldi	r18, 0x00	; 0
    5ea0:	45 e6       	ldi	r20, 0x65	; 101
    5ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    5ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    5ea6:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN7Display7drawGPSEhhh>
		/*
		buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
		}*/
	}
    5eaa:	df 91       	pop	r29
    5eac:	cf 91       	pop	r28
    5eae:	08 95       	ret

00005eb0 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    5eb0:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5eb2:	f9 99       	sbic	0x1f, 1	; 31
    5eb4:	fe cf       	rjmp	.-4      	; 0x5eb2 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    5eb6:	92 bd       	out	0x22, r25	; 34
    5eb8:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    5eba:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    5ebc:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    5ebe:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    5ec0:	78 94       	sei
    5ec2:	08 95       	ret

00005ec4 <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    5ec4:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5ec6:	f9 99       	sbic	0x1f, 1	; 31
    5ec8:	fe cf       	rjmp	.-4      	; 0x5ec6 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    5eca:	92 bd       	out	0x22, r25	; 34
    5ecc:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    5ece:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    5ed0:	78 94       	sei
	return EEDR;
    5ed2:	80 b5       	in	r24, 0x20	; 32
}
    5ed4:	08 95       	ret

00005ed6 <__vector_16>:
//schlechte variante der Uhreinstellung
void uhreinstellen();

//SD karten Timer
uint8_t time0zahler;
ISR(TIMER0_COMPA_vect){
    5ed6:	1f 92       	push	r1
    5ed8:	0f 92       	push	r0
    5eda:	0f b6       	in	r0, 0x3f	; 63
    5edc:	0f 92       	push	r0
    5ede:	11 24       	eor	r1, r1
    5ee0:	0b b6       	in	r0, 0x3b	; 59
    5ee2:	0f 92       	push	r0
    5ee4:	2f 93       	push	r18
    5ee6:	3f 93       	push	r19
    5ee8:	4f 93       	push	r20
    5eea:	5f 93       	push	r21
    5eec:	6f 93       	push	r22
    5eee:	7f 93       	push	r23
    5ef0:	8f 93       	push	r24
    5ef2:	9f 93       	push	r25
    5ef4:	af 93       	push	r26
    5ef6:	bf 93       	push	r27
    5ef8:	ef 93       	push	r30
    5efa:	ff 93       	push	r31
	time0zahler++;
    5efc:	90 91 3c 09 	lds	r25, 0x093C
    5f00:	9f 5f       	subi	r25, 0xFF	; 255
    5f02:	90 93 3c 09 	sts	0x093C, r25
	if (time0zahler%20==0)
    5f06:	8d ec       	ldi	r24, 0xCD	; 205
    5f08:	98 9f       	mul	r25, r24
    5f0a:	81 2d       	mov	r24, r1
    5f0c:	11 24       	eor	r1, r1
    5f0e:	82 95       	swap	r24
    5f10:	8f 70       	andi	r24, 0x0F	; 15
    5f12:	88 0f       	add	r24, r24
    5f14:	88 0f       	add	r24, r24
    5f16:	28 2f       	mov	r18, r24
    5f18:	22 0f       	add	r18, r18
    5f1a:	22 0f       	add	r18, r18
    5f1c:	82 0f       	add	r24, r18
    5f1e:	98 13       	cpse	r25, r24
    5f20:	05 c0       	rjmp	.+10     	; 0x5f2c <__vector_16+0x56>
	{
		statusreg |= (1<<updaterate);
    5f22:	80 91 40 09 	lds	r24, 0x0940
    5f26:	81 60       	ori	r24, 0x01	; 1
    5f28:	80 93 40 09 	sts	0x0940, r24
	}
	disk_timerproc();	//Timer der SD Karte
    5f2c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <disk_timerproc>
}
    5f30:	ff 91       	pop	r31
    5f32:	ef 91       	pop	r30
    5f34:	bf 91       	pop	r27
    5f36:	af 91       	pop	r26
    5f38:	9f 91       	pop	r25
    5f3a:	8f 91       	pop	r24
    5f3c:	7f 91       	pop	r23
    5f3e:	6f 91       	pop	r22
    5f40:	5f 91       	pop	r21
    5f42:	4f 91       	pop	r20
    5f44:	3f 91       	pop	r19
    5f46:	2f 91       	pop	r18
    5f48:	0f 90       	pop	r0
    5f4a:	0b be       	out	0x3b, r0	; 59
    5f4c:	0f 90       	pop	r0
    5f4e:	0f be       	out	0x3f, r0	; 63
    5f50:	0f 90       	pop	r0
    5f52:	1f 90       	pop	r1
    5f54:	18 95       	reti

00005f56 <__vector_11>:

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    5f56:	1f 92       	push	r1
    5f58:	0f 92       	push	r0
    5f5a:	0f b6       	in	r0, 0x3f	; 63
    5f5c:	0f 92       	push	r0
    5f5e:	11 24       	eor	r1, r1
    5f60:	0b b6       	in	r0, 0x3b	; 59
    5f62:	0f 92       	push	r0
    5f64:	8f 93       	push	r24
    5f66:	ef 93       	push	r30
    5f68:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    5f6a:	ed e8       	ldi	r30, 0x8D	; 141
    5f6c:	fe e0       	ldi	r31, 0x0E	; 14
    5f6e:	82 89       	ldd	r24, Z+18	; 0x12
    5f70:	8f 5f       	subi	r24, 0xFF	; 255
    5f72:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    5f74:	80 8d       	ldd	r24, Z+24	; 0x18
    5f76:	82 60       	ori	r24, 0x02	; 2
    5f78:	80 8f       	std	Z+24, r24	; 0x18
}
    5f7a:	ff 91       	pop	r31
    5f7c:	ef 91       	pop	r30
    5f7e:	8f 91       	pop	r24
    5f80:	0f 90       	pop	r0
    5f82:	0b be       	out	0x3b, r0	; 59
    5f84:	0f 90       	pop	r0
    5f86:	0f be       	out	0x3f, r0	; 63
    5f88:	0f 90       	pop	r0
    5f8a:	1f 90       	pop	r1
    5f8c:	18 95       	reti

00005f8e <__vector_13>:

ISR(TIMER1_COMPA_vect){
    5f8e:	1f 92       	push	r1
    5f90:	0f 92       	push	r0
    5f92:	0f b6       	in	r0, 0x3f	; 63
    5f94:	0f 92       	push	r0
    5f96:	11 24       	eor	r1, r1
    5f98:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    5f9a:	80 91 40 09 	lds	r24, 0x0940
    5f9e:	81 60       	ori	r24, 0x01	; 1
    5fa0:	80 93 40 09 	sts	0x0940, r24
}
    5fa4:	8f 91       	pop	r24
    5fa6:	0f 90       	pop	r0
    5fa8:	0f be       	out	0x3f, r0	; 63
    5faa:	0f 90       	pop	r0
    5fac:	1f 90       	pop	r1
    5fae:	18 95       	reti

00005fb0 <_Z9GPSENABLEv>:
uint8_t gpsMonat;
uint8_t gpsJahr;
//GPS sachen
void GPSENABLE()
{
	PORTC |=  (1<<PINC4);
    5fb0:	44 9a       	sbi	0x08, 4	; 8
	gpsstatus |= (1<<enable);
    5fb2:	80 91 3b 09 	lds	r24, 0x093B
    5fb6:	80 64       	ori	r24, 0x40	; 64
    5fb8:	80 93 3b 09 	sts	0x093B, r24
    5fbc:	08 95       	ret

00005fbe <_Z10GPSDISABLEv>:
}
void GPSDISABLE()
{
	PORTC &= ~(1<<PINC4);
    5fbe:	44 98       	cbi	0x08, 4	; 8
	gpsstatus &= ~((1<<enable) | (1<<fix));
    5fc0:	80 91 3b 09 	lds	r24, 0x093B
    5fc4:	8f 73       	andi	r24, 0x3F	; 63
    5fc6:	80 93 3b 09 	sts	0x093B, r24
    5fca:	08 95       	ret

00005fcc <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	ec 01       	movw	r28, r24
		if (*tast=='e')
    5fd2:	fb 01       	movw	r30, r22
    5fd4:	90 81       	ld	r25, Z
    5fd6:	95 36       	cpi	r25, 0x65	; 101
    5fd8:	09 f0       	breq	.+2      	; 0x5fdc <_ZN7wandern11tastendruckEPh+0x10>
    5fda:	41 c0       	rjmp	.+130    	; 0x605e <_ZN7wandern11tastendruckEPh+0x92>
		{
			rtc->Stunden	= gpsstunde;
    5fdc:	e9 8d       	ldd	r30, Y+25	; 0x19
    5fde:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5fe0:	80 91 c5 08 	lds	r24, 0x08C5
    5fe4:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    5fe6:	e9 8d       	ldd	r30, Y+25	; 0x19
    5fe8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5fea:	80 91 c4 08 	lds	r24, 0x08C4
    5fee:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    5ff0:	e9 8d       	ldd	r30, Y+25	; 0x19
    5ff2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5ff4:	80 91 c3 08 	lds	r24, 0x08C3
    5ff8:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    5ffa:	e9 8d       	ldd	r30, Y+25	; 0x19
    5ffc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5ffe:	80 91 c2 08 	lds	r24, 0x08C2
    6002:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    6004:	e9 8d       	ldd	r30, Y+25	; 0x19
    6006:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6008:	80 91 c1 08 	lds	r24, 0x08C1
    600c:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    600e:	e9 8d       	ldd	r30, Y+25	; 0x19
    6010:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6012:	80 91 c0 08 	lds	r24, 0x08C0
    6016:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    6018:	89 8d       	ldd	r24, Y+25	; 0x19
    601a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    601c:	0e 94 63 42 	call	0x84c6	; 0x84c6 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    6020:	e9 8d       	ldd	r30, Y+25	; 0x19
    6022:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6024:	61 89       	ldd	r22, Z+17	; 0x11
    6026:	80 e0       	ldi	r24, 0x00	; 0
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	42 df       	rcall	.-380    	; 0x5eb0 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    602c:	e9 8d       	ldd	r30, Y+25	; 0x19
    602e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6030:	60 89       	ldd	r22, Z+16	; 0x10
    6032:	81 e0       	ldi	r24, 0x01	; 1
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	3c df       	rcall	.-392    	; 0x5eb0 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    6038:	e9 8d       	ldd	r30, Y+25	; 0x19
    603a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    603c:	64 89       	ldd	r22, Z+20	; 0x14
    603e:	82 e0       	ldi	r24, 0x02	; 2
    6040:	90 e0       	ldi	r25, 0x00	; 0
    6042:	36 df       	rcall	.-404    	; 0x5eb0 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    6044:	e9 8d       	ldd	r30, Y+25	; 0x19
    6046:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6048:	66 89       	ldd	r22, Z+22	; 0x16
    604a:	83 e0       	ldi	r24, 0x03	; 3
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	30 df       	rcall	.-416    	; 0x5eb0 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    6050:	e9 8d       	ldd	r30, Y+25	; 0x19
    6052:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6054:	67 89       	ldd	r22, Z+23	; 0x17
    6056:	84 e0       	ldi	r24, 0x04	; 4
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	2a df       	rcall	.-428    	; 0x5eb0 <_Z12EEPROM_Writejh>
    605c:	14 c0       	rjmp	.+40     	; 0x6086 <_ZN7wandern11tastendruckEPh+0xba>
		}
		else if (*tast=='A')
    605e:	91 34       	cpi	r25, 0x41	; 65
    6060:	11 f4       	brne	.+4      	; 0x6066 <_ZN7wandern11tastendruckEPh+0x9a>
		{
			GPSENABLE();
    6062:	a6 df       	rcall	.-180    	; 0x5fb0 <_Z9GPSENABLEv>
    6064:	10 c0       	rjmp	.+32     	; 0x6086 <_ZN7wandern11tastendruckEPh+0xba>
		}
		else if (*tast=='B')
    6066:	92 34       	cpi	r25, 0x42	; 66
    6068:	11 f4       	brne	.+4      	; 0x606e <_ZN7wandern11tastendruckEPh+0xa2>
		{
			GPSDISABLE();
    606a:	a9 df       	rcall	.-174    	; 0x5fbe <_Z10GPSDISABLEv>
    606c:	0c c0       	rjmp	.+24     	; 0x6086 <_ZN7wandern11tastendruckEPh+0xba>
		}
		else if (*tast=='X')
    606e:	98 35       	cpi	r25, 0x58	; 88
    6070:	51 f4       	brne	.+20     	; 0x6086 <_ZN7wandern11tastendruckEPh+0xba>
		{
			druck.pressure0 = druck.pressure;
    6072:	ec e4       	ldi	r30, 0x4C	; 76
    6074:	f9 e0       	ldi	r31, 0x09	; 9
    6076:	80 81       	ld	r24, Z
    6078:	91 81       	ldd	r25, Z+1	; 0x01
    607a:	a2 81       	ldd	r26, Z+2	; 0x02
    607c:	b3 81       	ldd	r27, Z+3	; 0x03
    607e:	84 83       	std	Z+4, r24	; 0x04
    6080:	95 83       	std	Z+5, r25	; 0x05
    6082:	a6 83       	std	Z+6, r26	; 0x06
    6084:	b7 83       	std	Z+7, r27	; 0x07
		}
		return 0;
	}
    6086:	80 e0       	ldi	r24, 0x00	; 0
    6088:	df 91       	pop	r29
    608a:	cf 91       	pop	r28
    608c:	08 95       	ret

0000608e <__vector_20>:
}

ISR(USART0_RX_vect){
    608e:	1f 92       	push	r1
    6090:	0f 92       	push	r0
    6092:	0f b6       	in	r0, 0x3f	; 63
    6094:	0f 92       	push	r0
    6096:	11 24       	eor	r1, r1
    6098:	0b b6       	in	r0, 0x3b	; 59
    609a:	0f 92       	push	r0
    609c:	2f 93       	push	r18
    609e:	8f 93       	push	r24
    60a0:	9f 93       	push	r25
    60a2:	ef 93       	push	r30
    60a4:	ff 93       	push	r31
	uint8_t temp = UDR0;
    60a6:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    60aa:	24 32       	cpi	r18, 0x24	; 36
    60ac:	51 f4       	brne	.+20     	; 0x60c2 <__vector_20+0x34>
    60ae:	80 91 3b 09 	lds	r24, 0x093B
    60b2:	98 2f       	mov	r25, r24
    60b4:	9c 70       	andi	r25, 0x0C	; 12
    60b6:	29 f4       	brne	.+10     	; 0x60c2 <__vector_20+0x34>
	{
		gpscounter = 0;
    60b8:	10 92 f2 08 	sts	0x08F2, r1
		gpsstatus |= (1<<message);
    60bc:	81 60       	ori	r24, 0x01	; 1
    60be:	80 93 3b 09 	sts	0x093B, r24
	}
	if ((gpsstatus&(1<<message)))
    60c2:	90 91 3b 09 	lds	r25, 0x093B
    60c6:	90 ff       	sbrs	r25, 0
    60c8:	3c c0       	rjmp	.+120    	; 0x6142 <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    60ca:	80 91 f2 08 	lds	r24, 0x08F2
    60ce:	e8 2f       	mov	r30, r24
    60d0:	f0 e0       	ldi	r31, 0x00	; 0
    60d2:	ed 50       	subi	r30, 0x0D	; 13
    60d4:	f7 4f       	sbci	r31, 0xF7	; 247
    60d6:	20 83       	st	Z, r18
		gpscounter++;
    60d8:	8f 5f       	subi	r24, 0xFF	; 255
    60da:	80 93 f2 08 	sts	0x08F2, r24
		if (gpscounter>72)
    60de:	89 34       	cpi	r24, 0x49	; 73
    60e0:	20 f0       	brcs	.+8      	; 0x60ea <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    60e2:	9e 7f       	andi	r25, 0xFE	; 254
    60e4:	90 93 3b 09 	sts	0x093B, r25
    60e8:	2c c0       	rjmp	.+88     	; 0x6142 <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    60ea:	83 31       	cpi	r24, 0x13	; 19
    60ec:	c9 f4       	brne	.+50     	; 0x6120 <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    60ee:	80 91 f7 08 	lds	r24, 0x08F7
    60f2:	8d 34       	cpi	r24, 0x4D	; 77
    60f4:	89 f4       	brne	.+34     	; 0x6118 <__vector_20+0x8a>
    60f6:	80 91 f8 08 	lds	r24, 0x08F8
    60fa:	83 34       	cpi	r24, 0x43	; 67
    60fc:	69 f4       	brne	.+26     	; 0x6118 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    60fe:	80 91 05 09 	lds	r24, 0x0905
    6102:	81 34       	cpi	r24, 0x41	; 65
    6104:	29 f0       	breq	.+10     	; 0x6110 <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    6106:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    6108:	90 61       	ori	r25, 0x10	; 16
    610a:	90 93 3b 09 	sts	0x093B, r25
    610e:	19 c0       	rjmp	.+50     	; 0x6142 <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    6110:	92 60       	ori	r25, 0x02	; 2
    6112:	90 93 3b 09 	sts	0x093B, r25
    6116:	15 c0       	rjmp	.+42     	; 0x6142 <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    6118:	9c 7f       	andi	r25, 0xFC	; 252
    611a:	90 93 3b 09 	sts	0x093B, r25
    611e:	11 c0       	rjmp	.+34     	; 0x6142 <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    6120:	8a 32       	cpi	r24, 0x2A	; 42
    6122:	39 f4       	brne	.+14     	; 0x6132 <__vector_20+0xa4>
    6124:	94 ff       	sbrs	r25, 4
    6126:	0d c0       	rjmp	.+26     	; 0x6142 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    6128:	9e 7e       	andi	r25, 0xEE	; 238
    612a:	98 60       	ori	r25, 0x08	; 8
    612c:	90 93 3b 09 	sts	0x093B, r25
    6130:	08 c0       	rjmp	.+16     	; 0x6142 <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    6132:	86 34       	cpi	r24, 0x46	; 70
    6134:	31 f4       	brne	.+12     	; 0x6142 <__vector_20+0xb4>
    6136:	91 ff       	sbrs	r25, 1
    6138:	04 c0       	rjmp	.+8      	; 0x6142 <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    613a:	9c 7f       	andi	r25, 0xFC	; 252
    613c:	94 60       	ori	r25, 0x04	; 4
    613e:	90 93 3b 09 	sts	0x093B, r25
		}
	}
}
    6142:	ff 91       	pop	r31
    6144:	ef 91       	pop	r30
    6146:	9f 91       	pop	r25
    6148:	8f 91       	pop	r24
    614a:	2f 91       	pop	r18
    614c:	0f 90       	pop	r0
    614e:	0b be       	out	0x3b, r0	; 59
    6150:	0f 90       	pop	r0
    6152:	0f be       	out	0x3f, r0	; 63
    6154:	0f 90       	pop	r0
    6156:	1f 90       	pop	r1
    6158:	18 95       	reti

0000615a <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    615a:	10 92 bc 08 	sts	0x08BC, r1
    615e:	10 92 bd 08 	sts	0x08BD, r1
    6162:	10 92 be 08 	sts	0x08BE, r1
    6166:	10 92 bf 08 	sts	0x08BF, r1
	strecke = 0;
    616a:	10 92 b8 08 	sts	0x08B8, r1
    616e:	10 92 b9 08 	sts	0x08B9, r1
    6172:	10 92 ba 08 	sts	0x08BA, r1
    6176:	10 92 bb 08 	sts	0x08BB, r1
	maxgeschw = 0;
    617a:	10 92 b4 08 	sts	0x08B4, r1
    617e:	10 92 b5 08 	sts	0x08B5, r1
    6182:	10 92 b6 08 	sts	0x08B6, r1
    6186:	10 92 b7 08 	sts	0x08B7, r1
	Fahrtzeit = 0;
    618a:	10 92 b0 08 	sts	0x08B0, r1
    618e:	10 92 b1 08 	sts	0x08B1, r1
    6192:	10 92 b2 08 	sts	0x08B2, r1
    6196:	10 92 b3 08 	sts	0x08B3, r1
    619a:	08 95       	ret

0000619c <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    619c:	fb 01       	movw	r30, r22
    619e:	80 81       	ld	r24, Z
    61a0:	85 36       	cpi	r24, 0x65	; 101
    61a2:	09 f4       	brne	.+2      	; 0x61a6 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    61a4:	da df       	rcall	.-76     	; 0x615a <_Z6nullenv>
		}
		return 0;
	}
    61a6:	80 e0       	ldi	r24, 0x00	; 0
    61a8:	08 95       	ret

000061aa <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    61aa:	fc 01       	movw	r30, r24
    61ac:	20 81       	ld	r18, Z
    61ae:	30 e0       	ldi	r19, 0x00	; 0
    61b0:	06 2e       	mov	r0, r22
    61b2:	02 c0       	rjmp	.+4      	; 0x61b8 <_Z13reed_debouncePVhh+0xe>
    61b4:	35 95       	asr	r19
    61b6:	27 95       	ror	r18
    61b8:	0a 94       	dec	r0
    61ba:	e2 f7       	brpl	.-8      	; 0x61b4 <_Z13reed_debouncePVhh+0xa>
    61bc:	20 ff       	sbrs	r18, 0
    61be:	16 c0       	rjmp	.+44     	; 0x61ec <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    61c0:	ef e0       	ldi	r30, 0x0F	; 15
    61c2:	f7 e2       	ldi	r31, 0x27	; 39
    61c4:	31 97       	sbiw	r30, 0x01	; 1
    61c6:	f1 f7       	brne	.-4      	; 0x61c4 <_Z13reed_debouncePVhh+0x1a>
    61c8:	00 c0       	rjmp	.+0      	; 0x61ca <_Z13reed_debouncePVhh+0x20>
    61ca:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    61cc:	fc 01       	movw	r30, r24
    61ce:	80 81       	ld	r24, Z
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	02 c0       	rjmp	.+4      	; 0x61d8 <_Z13reed_debouncePVhh+0x2e>
    61d4:	95 95       	asr	r25
    61d6:	87 95       	ror	r24
    61d8:	6a 95       	dec	r22
    61da:	e2 f7       	brpl	.-8      	; 0x61d4 <_Z13reed_debouncePVhh+0x2a>
    61dc:	80 fd       	sbrc	r24, 0
    61de:	08 c0       	rjmp	.+16     	; 0x61f0 <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    61e0:	f2 e0       	ldi	r31, 0x02	; 2
    61e2:	fa 95       	dec	r31
    61e4:	f1 f7       	brne	.-4      	; 0x61e2 <_Z13reed_debouncePVhh+0x38>
    61e6:	00 c0       	rjmp	.+0      	; 0x61e8 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    61e8:	81 e0       	ldi	r24, 0x01	; 1
    61ea:	08 95       	ret
		}
	}
	return 0;
    61ec:	80 e0       	ldi	r24, 0x00	; 0
    61ee:	08 95       	ret
    61f0:	80 e0       	ldi	r24, 0x00	; 0
}
    61f2:	08 95       	ret

000061f4 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    61f4:	cf 92       	push	r12
    61f6:	df 92       	push	r13
    61f8:	ef 92       	push	r14
    61fa:	ff 92       	push	r15
    61fc:	cf 93       	push	r28
    61fe:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    6200:	e4 e8       	ldi	r30, 0x84	; 132
    6202:	f0 e0       	ldi	r31, 0x00	; 0
    6204:	c0 81       	ld	r28, Z
    6206:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    6208:	11 82       	std	Z+1, r1	; 0x01
    620a:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    620c:	2b ed       	ldi	r18, 0xDB	; 219
    620e:	3f e0       	ldi	r19, 0x0F	; 15
    6210:	49 e4       	ldi	r20, 0x49	; 73
    6212:	50 e4       	ldi	r21, 0x40	; 64
    6214:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6218:	26 e6       	ldi	r18, 0x66	; 102
    621a:	36 e6       	ldi	r19, 0x66	; 102
    621c:	46 e6       	ldi	r20, 0x66	; 102
    621e:	50 e4       	ldi	r21, 0x40	; 64
    6220:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6224:	6b 01       	movw	r12, r22
    6226:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    6228:	be 01       	movw	r22, r28
    622a:	80 e0       	ldi	r24, 0x00	; 0
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	0e 94 65 44 	call	0x88ca	; 0x88ca <__floatunsisf>
    6232:	20 e0       	ldi	r18, 0x00	; 0
    6234:	30 e0       	ldi	r19, 0x00	; 0
    6236:	40 e0       	ldi	r20, 0x00	; 0
    6238:	5e e3       	ldi	r21, 0x3E	; 62
    623a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    623e:	2d eb       	ldi	r18, 0xBD	; 189
    6240:	37 e3       	ldi	r19, 0x37	; 55
    6242:	46 e8       	ldi	r20, 0x86	; 134
    6244:	5a e3       	ldi	r21, 0x3A	; 58
    6246:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    624a:	2a e0       	ldi	r18, 0x0A	; 10
    624c:	37 ed       	ldi	r19, 0xD7	; 215
    624e:	43 ea       	ldi	r20, 0xA3	; 163
    6250:	5b e3       	ldi	r21, 0x3B	; 59
    6252:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6256:	9b 01       	movw	r18, r22
    6258:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    625a:	c7 01       	movw	r24, r14
    625c:	b6 01       	movw	r22, r12
    625e:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    6262:	20 91 bc 08 	lds	r18, 0x08BC
    6266:	30 91 bd 08 	lds	r19, 0x08BD
    626a:	40 91 be 08 	lds	r20, 0x08BE
    626e:	50 91 bf 08 	lds	r21, 0x08BF
    6272:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
	geschw /= 2.0;
    6276:	20 e0       	ldi	r18, 0x00	; 0
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	40 e0       	ldi	r20, 0x00	; 0
    627c:	5f e3       	ldi	r21, 0x3F	; 63
    627e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6282:	6b 01       	movw	r12, r22
    6284:	7c 01       	movw	r14, r24
	if (geschw >=160)
    6286:	20 e0       	ldi	r18, 0x00	; 0
    6288:	30 e0       	ldi	r19, 0x00	; 0
    628a:	40 e2       	ldi	r20, 0x20	; 32
    628c:	53 e4       	ldi	r21, 0x43	; 67
    628e:	0e 94 75 45 	call	0x8aea	; 0x8aea <__gesf2>
    6292:	88 23       	and	r24, r24
    6294:	4c f4       	brge	.+18     	; 0x62a8 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    6296:	c0 92 bc 08 	sts	0x08BC, r12
    629a:	d0 92 bd 08 	sts	0x08BD, r13
    629e:	e0 92 be 08 	sts	0x08BE, r14
    62a2:	f0 92 bf 08 	sts	0x08BF, r15
    62a6:	08 c0       	rjmp	.+16     	; 0x62b8 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    62a8:	10 92 bc 08 	sts	0x08BC, r1
    62ac:	10 92 bd 08 	sts	0x08BD, r1
    62b0:	10 92 be 08 	sts	0x08BE, r1
    62b4:	10 92 bf 08 	sts	0x08BF, r1
	}
}
    62b8:	df 91       	pop	r29
    62ba:	cf 91       	pop	r28
    62bc:	ff 90       	pop	r15
    62be:	ef 90       	pop	r14
    62c0:	df 90       	pop	r13
    62c2:	cf 90       	pop	r12
    62c4:	08 95       	ret

000062c6 <get_fattime>:

FATFS FATFS_Obj;
FIL logger;

DWORD get_fattime (void)
{
    62c6:	0f 93       	push	r16
    62c8:	1f 93       	push	r17
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
    62ca:	ed e8       	ldi	r30, 0x8D	; 141
    62cc:	fe e0       	ldi	r31, 0x0E	; 14
    62ce:	24 89       	ldd	r18, Z+20	; 0x14

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
    62d0:	86 89       	ldd	r24, Z+22	; 0x16
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	a0 e0       	ldi	r26, 0x00	; 0
    62d6:	b0 e0       	ldi	r27, 0x00	; 0
    62d8:	07 2e       	mov	r0, r23
    62da:	75 e1       	ldi	r23, 0x15	; 21
    62dc:	88 0f       	add	r24, r24
    62de:	99 1f       	adc	r25, r25
    62e0:	aa 1f       	adc	r26, r26
    62e2:	bb 1f       	adc	r27, r27
    62e4:	7a 95       	dec	r23
    62e6:	d1 f7       	brne	.-12     	; 0x62dc <get_fattime+0x16>
    62e8:	70 2d       	mov	r23, r0
    62ea:	a2 2b       	or	r26, r18
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
    62ec:	40 89       	ldd	r20, Z+16	; 0x10
    62ee:	50 e0       	ldi	r21, 0x00	; 0
    62f0:	60 e0       	ldi	r22, 0x00	; 0
    62f2:	70 e0       	ldi	r23, 0x00	; 0
    62f4:	03 2e       	mov	r0, r19
    62f6:	3b e0       	ldi	r19, 0x0B	; 11
    62f8:	44 0f       	add	r20, r20
    62fa:	55 1f       	adc	r21, r21
    62fc:	66 1f       	adc	r22, r22
    62fe:	77 1f       	adc	r23, r23
    6300:	3a 95       	dec	r19
    6302:	d1 f7       	brne	.-12     	; 0x62f8 <get_fattime+0x32>
    6304:	30 2d       	mov	r19, r0
    6306:	84 2b       	or	r24, r20
    6308:	95 2b       	or	r25, r21
    630a:	a6 2b       	or	r26, r22
    630c:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Minuten << 5)
    630e:	41 89       	ldd	r20, Z+17	; 0x11
    6310:	50 e0       	ldi	r21, 0x00	; 0
    6312:	60 e0       	ldi	r22, 0x00	; 0
    6314:	70 e0       	ldi	r23, 0x00	; 0
    6316:	44 0f       	add	r20, r20
    6318:	55 1f       	adc	r21, r21
    631a:	66 1f       	adc	r22, r22
    631c:	77 1f       	adc	r23, r23
    631e:	44 0f       	add	r20, r20
    6320:	55 1f       	adc	r21, r21
    6322:	66 1f       	adc	r22, r22
    6324:	77 1f       	adc	r23, r23
    6326:	44 0f       	add	r20, r20
    6328:	55 1f       	adc	r21, r21
    632a:	66 1f       	adc	r22, r22
    632c:	77 1f       	adc	r23, r23
    632e:	44 0f       	add	r20, r20
    6330:	55 1f       	adc	r21, r21
    6332:	66 1f       	adc	r22, r22
    6334:	77 1f       	adc	r23, r23
    6336:	44 0f       	add	r20, r20
    6338:	55 1f       	adc	r21, r21
    633a:	66 1f       	adc	r22, r22
    633c:	77 1f       	adc	r23, r23
    633e:	84 2b       	or	r24, r20
    6340:	95 2b       	or	r25, r21
    6342:	a6 2b       	or	r26, r22
    6344:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Sekunden >> 1);
    6346:	42 89       	ldd	r20, Z+18	; 0x12
    6348:	50 e0       	ldi	r21, 0x00	; 0
    634a:	60 e0       	ldi	r22, 0x00	; 0
    634c:	70 e0       	ldi	r23, 0x00	; 0
    634e:	76 95       	lsr	r23
    6350:	67 95       	ror	r22
    6352:	57 95       	ror	r21
    6354:	47 95       	ror	r20
    6356:	48 2b       	or	r20, r24
    6358:	59 2b       	or	r21, r25
    635a:	6a 2b       	or	r22, r26
    635c:	7b 2b       	or	r23, r27
FIL logger;

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
    635e:	87 89       	ldd	r24, Z+23	; 0x17
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	44 96       	adiw	r24, 0x14	; 20
    6364:	09 2e       	mov	r0, r25
    6366:	00 0c       	add	r0, r0
    6368:	aa 0b       	sbc	r26, r26
    636a:	bb 0b       	sbc	r27, r27
    636c:	07 2e       	mov	r0, r23
    636e:	79 e1       	ldi	r23, 0x19	; 25
    6370:	88 0f       	add	r24, r24
    6372:	99 1f       	adc	r25, r25
    6374:	aa 1f       	adc	r26, r26
    6376:	bb 1f       	adc	r27, r27
    6378:	7a 95       	dec	r23
    637a:	d1 f7       	brne	.-12     	; 0x6370 <get_fattime+0xaa>
    637c:	70 2d       	mov	r23, r0
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
    637e:	8a 01       	movw	r16, r20
    6380:	9b 01       	movw	r18, r22
    6382:	08 2b       	or	r16, r24
    6384:	19 2b       	or	r17, r25
    6386:	2a 2b       	or	r18, r26
    6388:	3b 2b       	or	r19, r27
    638a:	c9 01       	movw	r24, r18
    638c:	b8 01       	movw	r22, r16
}
    638e:	1f 91       	pop	r17
    6390:	0f 91       	pop	r16
    6392:	08 95       	ret

00006394 <_Z15initialisierungv>:
		maininterupthandler(Folien[position]);
		gpshandler();
    }
}

void initialisierung(){
    6394:	ff 92       	push	r15
    6396:	0f 93       	push	r16
    6398:	1f 93       	push	r17
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
    639e:	cd b7       	in	r28, 0x3d	; 61
    63a0:	de b7       	in	r29, 0x3e	; 62
    63a2:	a9 97       	sbiw	r28, 0x29	; 41
    63a4:	0f b6       	in	r0, 0x3f	; 63
    63a6:	f8 94       	cli
    63a8:	de bf       	out	0x3e, r29	; 62
    63aa:	0f be       	out	0x3f, r0	; 63
    63ac:	cd bf       	out	0x3d, r28	; 61
	//GPS EN aktivieren	
	DDRC |= (1<<PINC4);
    63ae:	3c 9a       	sbi	0x07, 4	; 7
	//nullen der Flagregister
	anzeige=0;
    63b0:	10 92 41 09 	sts	0x0941, r1
	statusreg=0;
    63b4:	10 92 40 09 	sts	0x0940, r1
	position=0;
    63b8:	10 92 3f 09 	sts	0x093F, r1
	FPS=0;
    63bc:	10 92 3e 09 	sts	0x093E, r1
	FPScount=0;
    63c0:	10 92 3d 09 	sts	0x093D, r1
	time0zahler=0;
    63c4:	10 92 3c 09 	sts	0x093C, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    63c8:	10 92 85 00 	sts	0x0085, r1
    63cc:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    63d0:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    63d4:	85 e0       	ldi	r24, 0x05	; 5
    63d6:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    63da:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    63dc:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    63de:	80 e4       	ldi	r24, 0x40	; 64
    63e0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    63e4:	ea e7       	ldi	r30, 0x7A	; 122
    63e6:	f0 e0       	ldi	r31, 0x00	; 0
    63e8:	83 e0       	ldi	r24, 0x03	; 3
    63ea:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    63ec:	80 81       	ld	r24, Z
    63ee:	80 68       	ori	r24, 0x80	; 128
    63f0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    63f2:	80 81       	ld	r24, Z
    63f4:	80 64       	ori	r24, 0x40	; 64
    63f6:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    63f8:	80 81       	ld	r24, Z
    63fa:	18 2f       	mov	r17, r24
    63fc:	10 74       	andi	r17, 0x40	; 64
    63fe:	86 fd       	sbrc	r24, 6
    6400:	fb cf       	rjmp	.-10     	; 0x63f8 <_Z15initialisierungv+0x64>
	(void) ADCW;
    6402:	80 91 78 00 	lds	r24, 0x0078
    6406:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    640a:	89 b1       	in	r24, 0x09	; 9
    640c:	89 7f       	andi	r24, 0xF9	; 249
    640e:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    6410:	8a b1       	in	r24, 0x0a	; 10
    6412:	89 7f       	andi	r24, 0xF9	; 249
    6414:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    6416:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    641a:	83 e3       	ldi	r24, 0x33	; 51
    641c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    6420:	86 e0       	ldi	r24, 0x06	; 6
    6422:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    6426:	80 e8       	ldi	r24, 0x80	; 128
    6428:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    642c:	10 92 f2 08 	sts	0x08F2, r1
	gpsstatus = (1<<fix);
    6430:	80 93 3b 09 	sts	0x093B, r24
	lat = 0;
    6434:	10 92 ee 08 	sts	0x08EE, r1
    6438:	10 92 ef 08 	sts	0x08EF, r1
    643c:	10 92 f0 08 	sts	0x08F0, r1
    6440:	10 92 f1 08 	sts	0x08F1, r1
	lon = 0;
    6444:	10 92 da 08 	sts	0x08DA, r1
    6448:	10 92 db 08 	sts	0x08DB, r1
    644c:	10 92 dc 08 	sts	0x08DC, r1
    6450:	10 92 dd 08 	sts	0x08DD, r1
	gpsspeed = 0;
    6454:	10 92 c6 08 	sts	0x08C6, r1
    6458:	10 92 c7 08 	sts	0x08C7, r1
    645c:	10 92 c8 08 	sts	0x08C8, r1
    6460:	10 92 c9 08 	sts	0x08C9, r1
	gpsstunde = 0;
    6464:	10 92 c5 08 	sts	0x08C5, r1
	gpsminute = 0;
    6468:	10 92 c4 08 	sts	0x08C4, r1
	gpssekunde = 0;
    646c:	10 92 c3 08 	sts	0x08C3, r1
	gpsTag = 0;
    6470:	10 92 c2 08 	sts	0x08C2, r1
	gpsMonat = 0;
    6474:	10 92 c1 08 	sts	0x08C1, r1
	gpsJahr = 0;
    6478:	10 92 c0 08 	sts	0x08C0, r1
	//GPSDISABLE();
	GPSENABLE();
    647c:	99 dd       	rcall	.-1230   	; 0x5fb0 <_Z9GPSENABLEv>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    647e:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    6480:	8c e8       	ldi	r24, 0x8C	; 140
    6482:	9a e0       	ldi	r25, 0x0A	; 10
    6484:	99 8f       	std	Y+25, r25	; 0x19
    6486:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    6488:	8d e8       	ldi	r24, 0x8D	; 141
    648a:	9e e0       	ldi	r25, 0x0E	; 14
    648c:	9b 8f       	std	Y+27, r25	; 0x1b
    648e:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    6490:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    6492:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    6494:	81 e0       	ldi	r24, 0x01	; 1
    6496:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    6498:	8d e2       	ldi	r24, 0x2D	; 45
    649a:	94 e0       	ldi	r25, 0x04	; 4
    649c:	9a 83       	std	Y+2, r25	; 0x02
    649e:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    64a0:	8c e8       	ldi	r24, 0x8C	; 140
    64a2:	9a e0       	ldi	r25, 0x0A	; 10
    64a4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    64a8:	8f e0       	ldi	r24, 0x0F	; 15
    64aa:	e3 e4       	ldi	r30, 0x43	; 67
    64ac:	f2 e0       	ldi	r31, 0x02	; 2
    64ae:	de 01       	movw	r26, r28
    64b0:	13 96       	adiw	r26, 0x03	; 3
    64b2:	01 90       	ld	r0, Z+
    64b4:	0d 92       	st	X+, r0
    64b6:	8a 95       	dec	r24
    64b8:	e1 f7       	brne	.-8      	; 0x64b2 <_Z15initialisierungv+0x11e>
    64ba:	8e e0       	ldi	r24, 0x0E	; 14
    64bc:	8f 8b       	std	Y+23, r24	; 0x17
    64be:	f1 2e       	mov	r15, r17
    64c0:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    64c2:	e3 e0       	ldi	r30, 0x03	; 3
    64c4:	f0 e0       	ldi	r31, 0x00	; 0
    64c6:	ec 0f       	add	r30, r28
    64c8:	fd 1f       	adc	r31, r29
    64ca:	e0 0f       	add	r30, r16
    64cc:	f1 1d       	adc	r31, r1
    64ce:	20 e0       	ldi	r18, 0x00	; 0
    64d0:	4f 2d       	mov	r20, r15
    64d2:	60 81       	ld	r22, Z
    64d4:	88 8d       	ldd	r24, Y+24	; 0x18
    64d6:	99 8d       	ldd	r25, Y+25	; 0x19
    64d8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    64dc:	0f 5f       	subi	r16, 0xFF	; 255
    64de:	26 e0       	ldi	r18, 0x06	; 6
    64e0:	f2 0e       	add	r15, r18
    64e2:	8f 89       	ldd	r24, Y+23	; 0x17
    64e4:	08 17       	cp	r16, r24
    64e6:	68 f3       	brcs	.-38     	; 0x64c2 <_Z15initialisierungv+0x12e>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    64e8:	8f e0       	ldi	r24, 0x0F	; 15
    64ea:	e2 e5       	ldi	r30, 0x52	; 82
    64ec:	f2 e0       	ldi	r31, 0x02	; 2
    64ee:	de 01       	movw	r26, r28
    64f0:	13 96       	adiw	r26, 0x03	; 3
    64f2:	01 90       	ld	r0, Z+
    64f4:	0d 92       	st	X+, r0
    64f6:	8a 95       	dec	r24
    64f8:	e1 f7       	brne	.-8      	; 0x64f2 <_Z15initialisierungv+0x15e>
    64fa:	8e e0       	ldi	r24, 0x0E	; 14
    64fc:	8f 8b       	std	Y+23, r24	; 0x17
    64fe:	f1 2e       	mov	r15, r17
    6500:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    6502:	e3 e0       	ldi	r30, 0x03	; 3
    6504:	f0 e0       	ldi	r31, 0x00	; 0
    6506:	ec 0f       	add	r30, r28
    6508:	fd 1f       	adc	r31, r29
    650a:	e0 0f       	add	r30, r16
    650c:	f1 1d       	adc	r31, r1
    650e:	28 e0       	ldi	r18, 0x08	; 8
    6510:	4f 2d       	mov	r20, r15
    6512:	60 81       	ld	r22, Z
    6514:	88 8d       	ldd	r24, Y+24	; 0x18
    6516:	99 8d       	ldd	r25, Y+25	; 0x19
    6518:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    651c:	0f 5f       	subi	r16, 0xFF	; 255
    651e:	36 e0       	ldi	r19, 0x06	; 6
    6520:	f3 0e       	add	r15, r19
    6522:	8f 89       	ldd	r24, Y+23	; 0x17
    6524:	08 17       	cp	r16, r24
    6526:	68 f3       	brcs	.-38     	; 0x6502 <_Z15initialisierungv+0x16e>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    6528:	80 e4       	ldi	r24, 0x40	; 64
    652a:	8f 93       	push	r24
    652c:	84 e4       	ldi	r24, 0x44	; 68
    652e:	8f 93       	push	r24
    6530:	8a e7       	ldi	r24, 0x7A	; 122
    6532:	8f 93       	push	r24
    6534:	81 ee       	ldi	r24, 0xE1	; 225
    6536:	8f 93       	push	r24
    6538:	81 e6       	ldi	r24, 0x61	; 97
    653a:	92 e0       	ldi	r25, 0x02	; 2
    653c:	9f 93       	push	r25
    653e:	8f 93       	push	r24
    6540:	ce 01       	movw	r24, r28
    6542:	03 96       	adiw	r24, 0x03	; 3
    6544:	9f 93       	push	r25
    6546:	8f 93       	push	r24
    6548:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    654c:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    654e:	0f b6       	in	r0, 0x3f	; 63
    6550:	f8 94       	cli
    6552:	de bf       	out	0x3e, r29	; 62
    6554:	0f be       	out	0x3f, r0	; 63
    6556:	cd bf       	out	0x3d, r28	; 61
    6558:	88 23       	and	r24, r24
    655a:	99 f0       	breq	.+38     	; 0x6582 <_Z15initialisierungv+0x1ee>
    655c:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    655e:	e3 e0       	ldi	r30, 0x03	; 3
    6560:	f0 e0       	ldi	r31, 0x00	; 0
    6562:	ec 0f       	add	r30, r28
    6564:	fd 1f       	adc	r31, r29
    6566:	e0 0f       	add	r30, r16
    6568:	f1 1d       	adc	r31, r1
    656a:	20 e2       	ldi	r18, 0x20	; 32
    656c:	41 2f       	mov	r20, r17
    656e:	60 81       	ld	r22, Z
    6570:	88 8d       	ldd	r24, Y+24	; 0x18
    6572:	99 8d       	ldd	r25, Y+25	; 0x19
    6574:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    6578:	0f 5f       	subi	r16, 0xFF	; 255
    657a:	1a 5f       	subi	r17, 0xFA	; 250
    657c:	8f 89       	ldd	r24, Y+23	; 0x17
    657e:	08 17       	cp	r16, r24
    6580:	70 f3       	brcs	.-36     	; 0x655e <_Z15initialisierungv+0x1ca>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    6582:	88 8d       	ldd	r24, Y+24	; 0x18
    6584:	99 8d       	ldd	r25, Y+25	; 0x19
    6586:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
    658a:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    658c:	ff e7       	ldi	r31, 0x7F	; 127
    658e:	28 e3       	ldi	r18, 0x38	; 56
    6590:	31 e0       	ldi	r19, 0x01	; 1
    6592:	f1 50       	subi	r31, 0x01	; 1
    6594:	20 40       	sbci	r18, 0x00	; 0
    6596:	30 40       	sbci	r19, 0x00	; 0
    6598:	e1 f7       	brne	.-8      	; 0x6592 <_Z15initialisierungv+0x1fe>
    659a:	00 c0       	rjmp	.+0      	; 0x659c <_Z15initialisierungv+0x208>
    659c:	00 00       	nop
    659e:	9f e7       	ldi	r25, 0x7F	; 127
    65a0:	e8 e3       	ldi	r30, 0x38	; 56
    65a2:	f1 e0       	ldi	r31, 0x01	; 1
    65a4:	91 50       	subi	r25, 0x01	; 1
    65a6:	e0 40       	sbci	r30, 0x00	; 0
    65a8:	f0 40       	sbci	r31, 0x00	; 0
    65aa:	e1 f7       	brne	.-8      	; 0x65a4 <_Z15initialisierungv+0x210>
    65ac:	00 c0       	rjmp	.+0      	; 0x65ae <_Z15initialisierungv+0x21a>
    65ae:	00 00       	nop
    65b0:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    65b2:	61 f7       	brne	.-40     	; 0x658c <_Z15initialisierungv+0x1f8>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
	//Zeit aus speicher
	rtc.Sekunden= 0;
    65b4:	0d e8       	ldi	r16, 0x8D	; 141
    65b6:	1e e0       	ldi	r17, 0x0E	; 14
    65b8:	f8 01       	movw	r30, r16
    65ba:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    65bc:	80 e0       	ldi	r24, 0x00	; 0
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	81 dc       	rcall	.-1790   	; 0x5ec4 <_Z11EEPROM_Readj>
    65c2:	f8 01       	movw	r30, r16
    65c4:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    65c6:	81 e0       	ldi	r24, 0x01	; 1
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	7c dc       	rcall	.-1800   	; 0x5ec4 <_Z11EEPROM_Readj>
    65cc:	f8 01       	movw	r30, r16
    65ce:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    65d0:	82 e0       	ldi	r24, 0x02	; 2
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	77 dc       	rcall	.-1810   	; 0x5ec4 <_Z11EEPROM_Readj>
    65d6:	f8 01       	movw	r30, r16
    65d8:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    65da:	83 e0       	ldi	r24, 0x03	; 3
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	72 dc       	rcall	.-1820   	; 0x5ec4 <_Z11EEPROM_Readj>
    65e0:	f8 01       	movw	r30, r16
    65e2:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    65e4:	84 e0       	ldi	r24, 0x04	; 4
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	6d dc       	rcall	.-1830   	; 0x5ec4 <_Z11EEPROM_Readj>
    65ea:	f8 01       	movw	r30, r16
    65ec:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    65ee:	c8 01       	movw	r24, r16
    65f0:	0e 94 63 42 	call	0x84c6	; 0x84c6 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    65f4:	c8 01       	movw	r24, r16
    65f6:	0e 94 44 43 	call	0x8688	; 0x8688 <_ZN3RTC8RTCstartEv>
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    65fa:	80 b7       	in	r24, 0x30	; 48
    65fc:	80 68       	ori	r24, 0x80	; 128
    65fe:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    6600:	e1 ec       	ldi	r30, 0xC1	; 193
    6602:	f0 e0       	ldi	r31, 0x00	; 0
    6604:	80 81       	ld	r24, Z
    6606:	80 61       	ori	r24, 0x10	; 16
    6608:	80 83       	st	Z, r24
	
	//SD Karten timer init
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mode
    660a:	82 e0       	ldi	r24, 0x02	; 2
    660c:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    660e:	86 e2       	ldi	r24, 0x26	; 38
    6610:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    6612:	ee e6       	ldi	r30, 0x6E	; 110
    6614:	f0 e0       	ldi	r31, 0x00	; 0
    6616:	80 81       	ld	r24, Z
    6618:	82 60       	ori	r24, 0x02	; 2
    661a:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    661c:	85 b5       	in	r24, 0x25	; 37
    661e:	85 60       	ori	r24, 0x05	; 5
    6620:	85 bd       	out	0x25, r24	; 37
	
	sei();
    6622:	78 94       	sei
}
    6624:	a9 96       	adiw	r28, 0x29	; 41
    6626:	0f b6       	in	r0, 0x3f	; 63
    6628:	f8 94       	cli
    662a:	de bf       	out	0x3e, r29	; 62
    662c:	0f be       	out	0x3f, r0	; 63
    662e:	cd bf       	out	0x3d, r28	; 61
    6630:	df 91       	pop	r29
    6632:	cf 91       	pop	r28
    6634:	1f 91       	pop	r17
    6636:	0f 91       	pop	r16
    6638:	ff 90       	pop	r15
    663a:	08 95       	ret

0000663c <_Z15tastaturhandlerP7monitorh>:

void tastaturhandler(monitor *mon, uint8_t taste){
    663c:	cf 93       	push	r28
    663e:	df 93       	push	r29
    6640:	1f 92       	push	r1
    6642:	cd b7       	in	r28, 0x3d	; 61
    6644:	de b7       	in	r29, 0x3e	; 62
    6646:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    6648:	60 32       	cpi	r22, 0x20	; 32
    664a:	09 f4       	brne	.+2      	; 0x664e <_Z15tastaturhandlerP7monitorh+0x12>
    664c:	8e c0       	rjmp	.+284    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
    664e:	dc 01       	movw	r26, r24
	{
		anzeige |= (1<<refreshdisplay);
    6650:	80 91 41 09 	lds	r24, 0x0941
    6654:	81 60       	ori	r24, 0x01	; 1
    6656:	80 93 41 09 	sts	0x0941, r24
		switch (taste)							//Tastendruck ueberpruefen
    665a:	46 2f       	mov	r20, r22
    665c:	50 e0       	ldi	r21, 0x00	; 0
    665e:	fa 01       	movw	r30, r20
    6660:	f0 97       	sbiw	r30, 0x30	; 48
    6662:	e6 34       	cpi	r30, 0x46	; 70
    6664:	f1 05       	cpc	r31, r1
    6666:	08 f0       	brcs	.+2      	; 0x666a <_Z15tastaturhandlerP7monitorh+0x2e>
    6668:	75 c0       	rjmp	.+234    	; 0x6754 <_Z15tastaturhandlerP7monitorh+0x118>
    666a:	e5 55       	subi	r30, 0x55	; 85
    666c:	ff 4f       	sbci	r31, 0xFF	; 255
    666e:	0c 94 dd 4a 	jmp	0x95ba	; 0x95ba <__tablejump2__>
		{
			case 'm':
				position = numberofpages;
    6672:	85 e0       	ldi	r24, 0x05	; 5
    6674:	80 93 3f 09 	sts	0x093F, r24
				break;
    6678:	78 c0       	rjmp	.+240    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
			case 'l':
				if (mon->posx==0)
    667a:	96 96       	adiw	r26, 0x26	; 38
    667c:	8c 91       	ld	r24, X
    667e:	96 97       	sbiw	r26, 0x26	; 38
    6680:	81 11       	cpse	r24, r1
    6682:	04 c0       	rjmp	.+8      	; 0x668c <_Z15tastaturhandlerP7monitorh+0x50>
				{
					position = numberofpages;
    6684:	85 e0       	ldi	r24, 0x05	; 5
    6686:	80 93 3f 09 	sts	0x093F, r24
    668a:	6f c0       	rjmp	.+222    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				else{
					mon->posx--;
    668c:	81 50       	subi	r24, 0x01	; 1
    668e:	96 96       	adiw	r26, 0x26	; 38
    6690:	8c 93       	st	X, r24
    6692:	6b c0       	rjmp	.+214    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				break;
			case 'r':
				if (position==numberofpages)
    6694:	80 91 3f 09 	lds	r24, 0x093F
    6698:	85 30       	cpi	r24, 0x05	; 5
    669a:	29 f4       	brne	.+10     	; 0x66a6 <_Z15tastaturhandlerP7monitorh+0x6a>
				{
					position=mon->posy;
    669c:	95 96       	adiw	r26, 0x25	; 37
    669e:	8c 91       	ld	r24, X
    66a0:	80 93 3f 09 	sts	0x093F, r24
    66a4:	62 c0       	rjmp	.+196    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    66a6:	96 96       	adiw	r26, 0x26	; 38
    66a8:	8c 91       	ld	r24, X
    66aa:	96 97       	sbiw	r26, 0x26	; 38
    66ac:	98 96       	adiw	r26, 0x28	; 40
    66ae:	9c 91       	ld	r25, X
    66b0:	98 97       	sbiw	r26, 0x28	; 40
    66b2:	89 17       	cp	r24, r25
    66b4:	08 f0       	brcs	.+2      	; 0x66b8 <_Z15tastaturhandlerP7monitorh+0x7c>
    66b6:	59 c0       	rjmp	.+178    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				{
					mon->posx++;
    66b8:	8f 5f       	subi	r24, 0xFF	; 255
    66ba:	96 96       	adiw	r26, 0x26	; 38
    66bc:	8c 93       	st	X, r24
    66be:	55 c0       	rjmp	.+170    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				break;
			case 'o':
				if (position==numberofpages)
    66c0:	80 91 3f 09 	lds	r24, 0x093F
    66c4:	85 30       	cpi	r24, 0x05	; 5
    66c6:	29 f4       	brne	.+10     	; 0x66d2 <_Z15tastaturhandlerP7monitorh+0x96>
				{
					position=mon->posy;
    66c8:	95 96       	adiw	r26, 0x25	; 37
    66ca:	8c 91       	ld	r24, X
    66cc:	80 93 3f 09 	sts	0x093F, r24
    66d0:	4c c0       	rjmp	.+152    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    66d2:	96 96       	adiw	r26, 0x26	; 38
    66d4:	8c 91       	ld	r24, X
    66d6:	96 97       	sbiw	r26, 0x26	; 38
    66d8:	98 96       	adiw	r26, 0x28	; 40
    66da:	9c 91       	ld	r25, X
    66dc:	98 97       	sbiw	r26, 0x28	; 40
    66de:	89 17       	cp	r24, r25
    66e0:	08 f0       	brcs	.+2      	; 0x66e4 <_Z15tastaturhandlerP7monitorh+0xa8>
    66e2:	43 c0       	rjmp	.+134    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				{
					mon->posx++;
    66e4:	8f 5f       	subi	r24, 0xFF	; 255
    66e6:	96 96       	adiw	r26, 0x26	; 38
    66e8:	8c 93       	st	X, r24
    66ea:	3f c0       	rjmp	.+126    	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				break;
			case 'd':
				if (!(mon->posy >= mon->maxentries-1))
    66ec:	95 96       	adiw	r26, 0x25	; 37
    66ee:	2c 91       	ld	r18, X
    66f0:	95 97       	sbiw	r26, 0x25	; 37
    66f2:	42 2f       	mov	r20, r18
    66f4:	50 e0       	ldi	r21, 0x00	; 0
    66f6:	97 96       	adiw	r26, 0x27	; 39
    66f8:	8c 91       	ld	r24, X
    66fa:	97 97       	sbiw	r26, 0x27	; 39
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	01 97       	sbiw	r24, 0x01	; 1
    6700:	48 17       	cp	r20, r24
    6702:	59 07       	cpc	r21, r25
    6704:	24 f4       	brge	.+8      	; 0x670e <_Z15tastaturhandlerP7monitorh+0xd2>
				{
					mon->posy++;
    6706:	2f 5f       	subi	r18, 0xFF	; 255
    6708:	95 96       	adiw	r26, 0x25	; 37
    670a:	2c 93       	st	X, r18
    670c:	2e c0       	rjmp	.+92     	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				else{
					mon->posy = 0;
    670e:	95 96       	adiw	r26, 0x25	; 37
    6710:	1c 92       	st	X, r1
    6712:	2b c0       	rjmp	.+86     	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				break;
			case 'u':
				if (!(mon->posy == 0))
    6714:	95 96       	adiw	r26, 0x25	; 37
    6716:	8c 91       	ld	r24, X
    6718:	95 97       	sbiw	r26, 0x25	; 37
    671a:	88 23       	and	r24, r24
    671c:	21 f0       	breq	.+8      	; 0x6726 <_Z15tastaturhandlerP7monitorh+0xea>
				{
					mon->posy--;
    671e:	81 50       	subi	r24, 0x01	; 1
    6720:	95 96       	adiw	r26, 0x25	; 37
    6722:	8c 93       	st	X, r24
    6724:	22 c0       	rjmp	.+68     	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				else{
					mon->posy=mon->maxentries-1;
    6726:	97 96       	adiw	r26, 0x27	; 39
    6728:	8c 91       	ld	r24, X
    672a:	97 97       	sbiw	r26, 0x27	; 39
    672c:	81 50       	subi	r24, 0x01	; 1
    672e:	95 96       	adiw	r26, 0x25	; 37
    6730:	8c 93       	st	X, r24
    6732:	1b c0       	rjmp	.+54     	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				break;
			case '0':
				//Licht an/aus
				if (LED.ison())
    6734:	86 e4       	ldi	r24, 0x46	; 70
    6736:	99 e0       	ldi	r25, 0x09	; 9
    6738:	0e 94 9c 41 	call	0x8338	; 0x8338 <_ZN6Output4isonEv>
    673c:	88 23       	and	r24, r24
    673e:	29 f0       	breq	.+10     	; 0x674a <_Z15tastaturhandlerP7monitorh+0x10e>
				{
					LED.off();
    6740:	86 e4       	ldi	r24, 0x46	; 70
    6742:	99 e0       	ldi	r25, 0x09	; 9
    6744:	0e 94 d7 41 	call	0x83ae	; 0x83ae <_ZN6Output3offEv>
    6748:	10 c0       	rjmp	.+32     	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				else{
					LED.on();
    674a:	86 e4       	ldi	r24, 0x46	; 70
    674c:	99 e0       	ldi	r25, 0x09	; 9
    674e:	0e 94 5f 41 	call	0x82be	; 0x82be <_ZN6Output2onEv>
    6752:	0b c0       	rjmp	.+22     	; 0x676a <_Z15tastaturhandlerP7monitorh+0x12e>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    6754:	ed 91       	ld	r30, X+
    6756:	fc 91       	ld	r31, X
    6758:	11 97       	sbiw	r26, 0x01	; 1
    675a:	04 80       	ldd	r0, Z+4	; 0x04
    675c:	f5 81       	ldd	r31, Z+5	; 0x05
    675e:	e0 2d       	mov	r30, r0
    6760:	be 01       	movw	r22, r28
    6762:	6f 5f       	subi	r22, 0xFF	; 255
    6764:	7f 4f       	sbci	r23, 0xFF	; 255
    6766:	cd 01       	movw	r24, r26
    6768:	09 95       	icall
				break;
		}
	}
}
    676a:	0f 90       	pop	r0
    676c:	df 91       	pop	r29
    676e:	cf 91       	pop	r28
    6770:	08 95       	ret

00006772 <_Z19maininterupthandlerP7monitor>:

void maininterupthandler(monitor *mon){
    6772:	cf 92       	push	r12
    6774:	df 92       	push	r13
    6776:	ef 92       	push	r14
    6778:	ff 92       	push	r15
    677a:	0f 93       	push	r16
    677c:	1f 93       	push	r17
    677e:	cf 93       	push	r28
    6780:	df 93       	push	r29
    6782:	cd b7       	in	r28, 0x3d	; 61
    6784:	de b7       	in	r29, 0x3e	; 62
    6786:	2d 97       	sbiw	r28, 0x0d	; 13
    6788:	0f b6       	in	r0, 0x3f	; 63
    678a:	f8 94       	cli
    678c:	de bf       	out	0x3e, r29	; 62
    678e:	0f be       	out	0x3f, r0	; 63
    6790:	cd bf       	out	0x3d, r28	; 61
    6792:	8c 01       	movw	r16, r24
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    6794:	90 91 3f 09 	lds	r25, 0x093F
    6798:	91 30       	cpi	r25, 0x01	; 1
    679a:	09 f5       	brne	.+66     	; 0x67de <_Z19maininterupthandlerP7monitor+0x6c>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    679c:	67 e0       	ldi	r22, 0x07	; 7
    679e:	80 e2       	ldi	r24, 0x20	; 32
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	03 dd       	rcall	.-1530   	; 0x61aa <_Z13reed_debouncePVhh>
    67a4:	88 23       	and	r24, r24
    67a6:	31 f0       	breq	.+12     	; 0x67b4 <_Z19maininterupthandlerP7monitor+0x42>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    67a8:	63 e3       	ldi	r22, 0x33	; 51
    67aa:	71 e1       	ldi	r23, 0x11	; 17
    67ac:	86 e3       	ldi	r24, 0x36	; 54
    67ae:	9f e3       	ldi	r25, 0x3F	; 63
    67b0:	21 dd       	rcall	.-1470   	; 0x61f4 <_Z15geschwindigkeitf>
    67b2:	be c0       	rjmp	.+380    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    67b4:	80 91 84 00 	lds	r24, 0x0084
    67b8:	90 91 85 00 	lds	r25, 0x0085
    67bc:	8e 38       	cpi	r24, 0x8E	; 142
    67be:	9b 45       	sbci	r25, 0x5B	; 91
    67c0:	08 f4       	brcc	.+2      	; 0x67c4 <_Z19maininterupthandlerP7monitor+0x52>
    67c2:	b6 c0       	rjmp	.+364    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
		{
			TCNT1=0;
    67c4:	10 92 85 00 	sts	0x0085, r1
    67c8:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    67cc:	10 92 bc 08 	sts	0x08BC, r1
    67d0:	10 92 bd 08 	sts	0x08BD, r1
    67d4:	10 92 be 08 	sts	0x08BE, r1
    67d8:	10 92 bf 08 	sts	0x08BF, r1
    67dc:	a9 c0       	rjmp	.+338    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
		}
	}
	//SD Karte mounten bzw. aufnahme starten
	else if (position==3)
    67de:	93 30       	cpi	r25, 0x03	; 3
    67e0:	09 f0       	breq	.+2      	; 0x67e4 <_Z19maininterupthandlerP7monitor+0x72>
    67e2:	a6 c0       	rjmp	.+332    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
	{
		if (mon->posy==3 && mon->posx==1)
    67e4:	d8 01       	movw	r26, r16
    67e6:	95 96       	adiw	r26, 0x25	; 37
    67e8:	8c 91       	ld	r24, X
    67ea:	95 97       	sbiw	r26, 0x25	; 37
    67ec:	83 30       	cpi	r24, 0x03	; 3
    67ee:	81 f5       	brne	.+96     	; 0x6850 <_Z19maininterupthandlerP7monitor+0xde>
    67f0:	96 96       	adiw	r26, 0x26	; 38
    67f2:	8c 91       	ld	r24, X
    67f4:	81 30       	cpi	r24, 0x01	; 1
    67f6:	09 f0       	breq	.+2      	; 0x67fa <_Z19maininterupthandlerP7monitor+0x88>
    67f8:	9b c0       	rjmp	.+310    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
		{
			if (!(statusreg&(1<<mounttingstat)))
    67fa:	80 91 40 09 	lds	r24, 0x0940
    67fe:	81 fd       	sbrc	r24, 1
    6800:	14 c0       	rjmp	.+40     	; 0x682a <_Z19maininterupthandlerP7monitor+0xb8>
			{
				//mounting sd Karte
				if (disk_initialize(0) == 0)
    6802:	80 e0       	ldi	r24, 0x00	; 0
    6804:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <disk_initialize>
    6808:	81 11       	cpse	r24, r1
    680a:	1d c0       	rjmp	.+58     	; 0x6846 <_Z19maininterupthandlerP7monitor+0xd4>
				{
					if (f_mount(&FATFS_Obj,"",0) == 0)
    680c:	40 e0       	ldi	r20, 0x00	; 0
    680e:	65 e1       	ldi	r22, 0x15	; 21
    6810:	73 e0       	ldi	r23, 0x03	; 3
    6812:	82 e8       	ldi	r24, 0x82	; 130
    6814:	96 e0       	ldi	r25, 0x06	; 6
    6816:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <f_mount>
    681a:	81 11       	cpse	r24, r1
    681c:	14 c0       	rjmp	.+40     	; 0x6846 <_Z19maininterupthandlerP7monitor+0xd4>
					{
						statusreg |= (1<<mounttingstat);
    681e:	80 91 40 09 	lds	r24, 0x0940
    6822:	82 60       	ori	r24, 0x02	; 2
    6824:	80 93 40 09 	sts	0x0940, r24
    6828:	0e c0       	rjmp	.+28     	; 0x6846 <_Z19maininterupthandlerP7monitor+0xd4>
					}
				}
			}
			else if (!(statusreg&(1<<loggingstat)))
    682a:	82 fd       	sbrc	r24, 2
    682c:	0c c0       	rjmp	.+24     	; 0x6846 <_Z19maininterupthandlerP7monitor+0xd4>
			{
				f_mount(0,"",0);
    682e:	40 e0       	ldi	r20, 0x00	; 0
    6830:	65 e1       	ldi	r22, 0x15	; 21
    6832:	73 e0       	ldi	r23, 0x03	; 3
    6834:	80 e0       	ldi	r24, 0x00	; 0
    6836:	90 e0       	ldi	r25, 0x00	; 0
    6838:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <f_mount>
				statusreg &= ~(1<<mounttingstat);
    683c:	80 91 40 09 	lds	r24, 0x0940
    6840:	8d 7f       	andi	r24, 0xFD	; 253
    6842:	80 93 40 09 	sts	0x0940, r24
			}
			mon->posx--;
    6846:	f8 01       	movw	r30, r16
    6848:	86 a1       	ldd	r24, Z+38	; 0x26
    684a:	81 50       	subi	r24, 0x01	; 1
    684c:	86 a3       	std	Z+38, r24	; 0x26
    684e:	70 c0       	rjmp	.+224    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
		}
		else if (mon->posy==4 && mon->posx==1)
    6850:	84 30       	cpi	r24, 0x04	; 4
    6852:	09 f0       	breq	.+2      	; 0x6856 <_Z19maininterupthandlerP7monitor+0xe4>
    6854:	6d c0       	rjmp	.+218    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
    6856:	d8 01       	movw	r26, r16
    6858:	96 96       	adiw	r26, 0x26	; 38
    685a:	8c 91       	ld	r24, X
    685c:	81 30       	cpi	r24, 0x01	; 1
    685e:	09 f0       	breq	.+2      	; 0x6862 <_Z19maininterupthandlerP7monitor+0xf0>
    6860:	67 c0       	rjmp	.+206    	; 0x6930 <_Z19maininterupthandlerP7monitor+0x1be>
		{
			if (!(statusreg&(1<<loggingstat)) && (statusreg&(1<<mounttingstat)) )
    6862:	80 91 40 09 	lds	r24, 0x0940
    6866:	82 fd       	sbrc	r24, 2
    6868:	4f c0       	rjmp	.+158    	; 0x6908 <_Z19maininterupthandlerP7monitor+0x196>
    686a:	81 ff       	sbrs	r24, 1
    686c:	4d c0       	rjmp	.+154    	; 0x6908 <_Z19maininterupthandlerP7monitor+0x196>
			{
				if (disk_status(0) == 0)
    686e:	80 e0       	ldi	r24, 0x00	; 0
    6870:	0e 94 94 0a 	call	0x1528	; 0x1528 <disk_status>
    6874:	81 11       	cpse	r24, r1
    6876:	42 c0       	rjmp	.+132    	; 0x68fc <_Z19maininterupthandlerP7monitor+0x18a>
				{
					char name[13];
					sprintf(name,"%02u%02u%02u%02u.txt",rtc.Monat,rtc.Tag,rtc.Stunden,rtc.Minuten);
    6878:	ed e8       	ldi	r30, 0x8D	; 141
    687a:	fe e0       	ldi	r31, 0x0E	; 14
    687c:	81 89       	ldd	r24, Z+17	; 0x11
    687e:	1f 92       	push	r1
    6880:	8f 93       	push	r24
    6882:	80 89       	ldd	r24, Z+16	; 0x10
    6884:	1f 92       	push	r1
    6886:	8f 93       	push	r24
    6888:	84 89       	ldd	r24, Z+20	; 0x14
    688a:	1f 92       	push	r1
    688c:	8f 93       	push	r24
    688e:	86 89       	ldd	r24, Z+22	; 0x16
    6890:	1f 92       	push	r1
    6892:	8f 93       	push	r24
    6894:	8f e6       	ldi	r24, 0x6F	; 111
    6896:	92 e0       	ldi	r25, 0x02	; 2
    6898:	9f 93       	push	r25
    689a:	8f 93       	push	r24
    689c:	fe 01       	movw	r30, r28
    689e:	31 96       	adiw	r30, 0x01	; 1
    68a0:	7f 01       	movw	r14, r30
    68a2:	ff 93       	push	r31
    68a4:	ef 93       	push	r30
    68a6:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
					f_open(&logger, name, FA_OPEN_ALWAYS | FA_WRITE);
    68aa:	42 e1       	ldi	r20, 0x12	; 18
    68ac:	b7 01       	movw	r22, r14
    68ae:	82 e6       	ldi	r24, 0x62	; 98
    68b0:	94 e0       	ldi	r25, 0x04	; 4
    68b2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <f_open>
					//Zeit und GPS
					f_printf(&logger,"#Zeit [s]\tlongitude [1e6]\tLatitude [1e5]\tGPSSpeed [1e2 km/h] ");
    68b6:	84 e8       	ldi	r24, 0x84	; 132
    68b8:	92 e0       	ldi	r25, 0x02	; 2
    68ba:	9f 93       	push	r25
    68bc:	8f 93       	push	r24
    68be:	0f 2e       	mov	r0, r31
    68c0:	f2 e6       	ldi	r31, 0x62	; 98
    68c2:	ef 2e       	mov	r14, r31
    68c4:	f4 e0       	ldi	r31, 0x04	; 4
    68c6:	ff 2e       	mov	r15, r31
    68c8:	f0 2d       	mov	r31, r0
    68ca:	ff 92       	push	r15
    68cc:	ef 92       	push	r14
    68ce:	0e 94 f6 23 	call	0x47ec	; 0x47ec <f_printf>
					//Tacho
					f_printf(&logger,"\tTacho [1e2 km/h] ");
    68d2:	82 ec       	ldi	r24, 0xC2	; 194
    68d4:	92 e0       	ldi	r25, 0x02	; 2
    68d6:	9f 93       	push	r25
    68d8:	8f 93       	push	r24
    68da:	ff 92       	push	r15
    68dc:	ef 92       	push	r14
    68de:	0e 94 f6 23 	call	0x47ec	; 0x47ec <f_printf>
					//Barometer
					f_printf(&logger,"\tTemperatur [10 C] \tDruck [Pa] \tHoeheSee [10 m]\n");
    68e2:	85 ed       	ldi	r24, 0xD5	; 213
    68e4:	92 e0       	ldi	r25, 0x02	; 2
    68e6:	9f 93       	push	r25
    68e8:	8f 93       	push	r24
    68ea:	ff 92       	push	r15
    68ec:	ef 92       	push	r14
    68ee:	0e 94 f6 23 	call	0x47ec	; 0x47ec <f_printf>
    68f2:	0f b6       	in	r0, 0x3f	; 63
    68f4:	f8 94       	cli
    68f6:	de bf       	out	0x3e, r29	; 62
    68f8:	0f be       	out	0x3f, r0	; 63
    68fa:	cd bf       	out	0x3d, r28	; 61
				}
				
				statusreg |= (1<<loggingstat);
    68fc:	80 91 40 09 	lds	r24, 0x0940
    6900:	84 60       	ori	r24, 0x04	; 4
    6902:	80 93 40 09 	sts	0x0940, r24
    6906:	0d c0       	rjmp	.+26     	; 0x6922 <_Z19maininterupthandlerP7monitor+0x1b0>
			}
			else{
				f_sync(&logger);
    6908:	82 e6       	ldi	r24, 0x62	; 98
    690a:	94 e0       	ldi	r25, 0x04	; 4
    690c:	0e 94 19 23 	call	0x4632	; 0x4632 <f_sync>
				f_close(&logger);
    6910:	82 e6       	ldi	r24, 0x62	; 98
    6912:	94 e0       	ldi	r25, 0x04	; 4
    6914:	0e 94 e6 23 	call	0x47cc	; 0x47cc <f_close>
				statusreg &= ~(1<<loggingstat);
    6918:	80 91 40 09 	lds	r24, 0x0940
    691c:	8b 7f       	andi	r24, 0xFB	; 251
    691e:	80 93 40 09 	sts	0x0940, r24
			}
			mon->posx--;
    6922:	d8 01       	movw	r26, r16
    6924:	96 96       	adiw	r26, 0x26	; 38
    6926:	8c 91       	ld	r24, X
    6928:	96 97       	sbiw	r26, 0x26	; 38
    692a:	81 50       	subi	r24, 0x01	; 1
    692c:	96 96       	adiw	r26, 0x26	; 38
    692e:	8c 93       	st	X, r24
		}
	}
	
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
    6930:	90 91 40 09 	lds	r25, 0x0940
    6934:	90 ff       	sbrs	r25, 0
    6936:	0d c0       	rjmp	.+26     	; 0x6952 <_Z19maininterupthandlerP7monitor+0x1e0>
	{
		statusreg &= ~(1<<updaterate);
    6938:	9e 7f       	andi	r25, 0xFE	; 254
    693a:	90 93 40 09 	sts	0x0940, r25
		anzeige |= (1<<refreshdisplay);
    693e:	80 91 41 09 	lds	r24, 0x0941
    6942:	81 60       	ori	r24, 0x01	; 1
    6944:	80 93 41 09 	sts	0x0941, r24
		FPScount++;
    6948:	80 91 3d 09 	lds	r24, 0x093D
    694c:	8f 5f       	subi	r24, 0xFF	; 255
    694e:	80 93 3d 09 	sts	0x093D, r24
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    6952:	80 91 a5 0e 	lds	r24, 0x0EA5
    6956:	81 ff       	sbrs	r24, 1
    6958:	45 c1       	rjmp	.+650    	; 0x6be4 <_Z19maininterupthandlerP7monitor+0x472>
	{
		rtc.zeit();
    695a:	8d e8       	ldi	r24, 0x8D	; 141
    695c:	9e e0       	ldi	r25, 0x0E	; 14
    695e:	0e 94 09 43 	call	0x8612	; 0x8612 <_ZN3RTC4zeitEv>
		druck.bmp180_getaltitude();
    6962:	8c e4       	ldi	r24, 0x4C	; 76
    6964:	99 e0       	ldi	r25, 0x09	; 9
    6966:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN6BMP18018bmp180_getaltitudeEv>
		if (position==1)
    696a:	80 91 3f 09 	lds	r24, 0x093F
    696e:	81 30       	cpi	r24, 0x01	; 1
    6970:	09 f0       	breq	.+2      	; 0x6974 <_Z19maininterupthandlerP7monitor+0x202>
    6972:	57 c0       	rjmp	.+174    	; 0x6a22 <_Z19maininterupthandlerP7monitor+0x2b0>
		{
			if (geschw>maxgeschw)
    6974:	c0 90 bc 08 	lds	r12, 0x08BC
    6978:	d0 90 bd 08 	lds	r13, 0x08BD
    697c:	e0 90 be 08 	lds	r14, 0x08BE
    6980:	f0 90 bf 08 	lds	r15, 0x08BF
    6984:	20 91 b4 08 	lds	r18, 0x08B4
    6988:	30 91 b5 08 	lds	r19, 0x08B5
    698c:	40 91 b6 08 	lds	r20, 0x08B6
    6990:	50 91 b7 08 	lds	r21, 0x08B7
    6994:	c7 01       	movw	r24, r14
    6996:	b6 01       	movw	r22, r12
    6998:	0e 94 75 45 	call	0x8aea	; 0x8aea <__gesf2>
    699c:	18 16       	cp	r1, r24
    699e:	44 f4       	brge	.+16     	; 0x69b0 <_Z19maininterupthandlerP7monitor+0x23e>
			{
				maxgeschw=geschw;
    69a0:	c0 92 b4 08 	sts	0x08B4, r12
    69a4:	d0 92 b5 08 	sts	0x08B5, r13
    69a8:	e0 92 b6 08 	sts	0x08B6, r14
    69ac:	f0 92 b7 08 	sts	0x08B7, r15
			}
			if (geschw >= 1.0)
    69b0:	20 e0       	ldi	r18, 0x00	; 0
    69b2:	30 e0       	ldi	r19, 0x00	; 0
    69b4:	40 e8       	ldi	r20, 0x80	; 128
    69b6:	5f e3       	ldi	r21, 0x3F	; 63
    69b8:	c7 01       	movw	r24, r14
    69ba:	b6 01       	movw	r22, r12
    69bc:	0e 94 75 45 	call	0x8aea	; 0x8aea <__gesf2>
    69c0:	88 23       	and	r24, r24
    69c2:	9c f0       	brlt	.+38     	; 0x69ea <_Z19maininterupthandlerP7monitor+0x278>
			{
				Fahrtzeit++;
    69c4:	80 91 b0 08 	lds	r24, 0x08B0
    69c8:	90 91 b1 08 	lds	r25, 0x08B1
    69cc:	a0 91 b2 08 	lds	r26, 0x08B2
    69d0:	b0 91 b3 08 	lds	r27, 0x08B3
    69d4:	01 96       	adiw	r24, 0x01	; 1
    69d6:	a1 1d       	adc	r26, r1
    69d8:	b1 1d       	adc	r27, r1
    69da:	80 93 b0 08 	sts	0x08B0, r24
    69de:	90 93 b1 08 	sts	0x08B1, r25
    69e2:	a0 93 b2 08 	sts	0x08B2, r26
    69e6:	b0 93 b3 08 	sts	0x08B3, r27
			}
			strecke+=geschw/3.6;
    69ea:	26 e6       	ldi	r18, 0x66	; 102
    69ec:	36 e6       	ldi	r19, 0x66	; 102
    69ee:	46 e6       	ldi	r20, 0x66	; 102
    69f0:	50 e4       	ldi	r21, 0x40	; 64
    69f2:	c7 01       	movw	r24, r14
    69f4:	b6 01       	movw	r22, r12
    69f6:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    69fa:	9b 01       	movw	r18, r22
    69fc:	ac 01       	movw	r20, r24
    69fe:	60 91 b8 08 	lds	r22, 0x08B8
    6a02:	70 91 b9 08 	lds	r23, 0x08B9
    6a06:	80 91 ba 08 	lds	r24, 0x08BA
    6a0a:	90 91 bb 08 	lds	r25, 0x08BB
    6a0e:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6a12:	60 93 b8 08 	sts	0x08B8, r22
    6a16:	70 93 b9 08 	sts	0x08B9, r23
    6a1a:	80 93 ba 08 	sts	0x08BA, r24
    6a1e:	90 93 bb 08 	sts	0x08BB, r25
    6a22:	80 91 40 09 	lds	r24, 0x0940
    6a26:	86 70       	andi	r24, 0x06	; 6
		}
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    6a28:	86 30       	cpi	r24, 0x06	; 6
    6a2a:	09 f0       	breq	.+2      	; 0x6a2e <_Z19maininterupthandlerP7monitor+0x2bc>
    6a2c:	cb c0       	rjmp	.+406    	; 0x6bc4 <_Z19maininterupthandlerP7monitor+0x452>
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
    6a2e:	0f 2e       	mov	r0, r31
    6a30:	fd e8       	ldi	r31, 0x8D	; 141
    6a32:	cf 2e       	mov	r12, r31
    6a34:	fe e0       	ldi	r31, 0x0E	; 14
    6a36:	df 2e       	mov	r13, r31
    6a38:	f0 2d       	mov	r31, r0
    6a3a:	f6 01       	movw	r30, r12
    6a3c:	40 89       	ldd	r20, Z+16	; 0x10
    6a3e:	20 e1       	ldi	r18, 0x10	; 16
    6a40:	3e e0       	ldi	r19, 0x0E	; 14
    6a42:	42 9f       	mul	r20, r18
    6a44:	c0 01       	movw	r24, r0
    6a46:	43 9f       	mul	r20, r19
    6a48:	90 0d       	add	r25, r0
    6a4a:	11 24       	eor	r1, r1
			Sekundenges += rtc.Minuten*60;
    6a4c:	21 89       	ldd	r18, Z+17	; 0x11
    6a4e:	7c 01       	movw	r14, r24
    6a50:	fc e3       	ldi	r31, 0x3C	; 60
    6a52:	2f 9f       	mul	r18, r31
    6a54:	e0 0c       	add	r14, r0
    6a56:	f1 1c       	adc	r15, r1
    6a58:	11 24       	eor	r1, r1
			Sekundenges += rtc.Sekunden;
			//GPS Daten und Zeit
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100));
    6a5a:	20 e0       	ldi	r18, 0x00	; 0
    6a5c:	30 e0       	ldi	r19, 0x00	; 0
    6a5e:	48 ec       	ldi	r20, 0xC8	; 200
    6a60:	52 e4       	ldi	r21, 0x42	; 66
    6a62:	60 91 c6 08 	lds	r22, 0x08C6
    6a66:	70 91 c7 08 	lds	r23, 0x08C7
    6a6a:	80 91 c8 08 	lds	r24, 0x08C8
    6a6e:	90 91 c9 08 	lds	r25, 0x08C9
    6a72:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6a76:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    6a7a:	9f 93       	push	r25
    6a7c:	8f 93       	push	r24
    6a7e:	7f 93       	push	r23
    6a80:	6f 93       	push	r22
    6a82:	20 e0       	ldi	r18, 0x00	; 0
    6a84:	30 e5       	ldi	r19, 0x50	; 80
    6a86:	43 ec       	ldi	r20, 0xC3	; 195
    6a88:	57 e4       	ldi	r21, 0x47	; 71
    6a8a:	60 91 ee 08 	lds	r22, 0x08EE
    6a8e:	70 91 ef 08 	lds	r23, 0x08EF
    6a92:	80 91 f0 08 	lds	r24, 0x08F0
    6a96:	90 91 f1 08 	lds	r25, 0x08F1
    6a9a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6a9e:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    6aa2:	9f 93       	push	r25
    6aa4:	8f 93       	push	r24
    6aa6:	7f 93       	push	r23
    6aa8:	6f 93       	push	r22
    6aaa:	20 e0       	ldi	r18, 0x00	; 0
    6aac:	34 e2       	ldi	r19, 0x24	; 36
    6aae:	44 e7       	ldi	r20, 0x74	; 116
    6ab0:	59 e4       	ldi	r21, 0x49	; 73
    6ab2:	60 91 da 08 	lds	r22, 0x08DA
    6ab6:	70 91 db 08 	lds	r23, 0x08DB
    6aba:	80 91 dc 08 	lds	r24, 0x08DC
    6abe:	90 91 dd 08 	lds	r25, 0x08DD
    6ac2:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6ac6:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    6aca:	9f 93       	push	r25
    6acc:	8f 93       	push	r24
    6ace:	7f 93       	push	r23
    6ad0:	6f 93       	push	r22
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
			Sekundenges += rtc.Minuten*60;
			Sekundenges += rtc.Sekunden;
    6ad2:	d6 01       	movw	r26, r12
    6ad4:	52 96       	adiw	r26, 0x12	; 18
    6ad6:	8c 91       	ld	r24, X
    6ad8:	f7 01       	movw	r30, r14
    6ada:	e8 0f       	add	r30, r24
    6adc:	f1 1d       	adc	r31, r1
    6ade:	cf 01       	movw	r24, r30
			//GPS Daten und Zeit
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100));
    6ae0:	9f 93       	push	r25
    6ae2:	ef 93       	push	r30
    6ae4:	86 e0       	ldi	r24, 0x06	; 6
    6ae6:	93 e0       	ldi	r25, 0x03	; 3
    6ae8:	9f 93       	push	r25
    6aea:	8f 93       	push	r24
    6aec:	0f 2e       	mov	r0, r31
    6aee:	f2 e6       	ldi	r31, 0x62	; 98
    6af0:	ef 2e       	mov	r14, r31
    6af2:	f4 e0       	ldi	r31, 0x04	; 4
    6af4:	ff 2e       	mov	r15, r31
    6af6:	f0 2d       	mov	r31, r0
    6af8:	ff 92       	push	r15
    6afa:	ef 92       	push	r14
    6afc:	0e 94 f6 23 	call	0x47ec	; 0x47ec <f_printf>
			//Tacho
			f_printf(&logger,"%ld\t",(int32_t)(geschw*100));
    6b00:	20 e0       	ldi	r18, 0x00	; 0
    6b02:	30 e0       	ldi	r19, 0x00	; 0
    6b04:	48 ec       	ldi	r20, 0xC8	; 200
    6b06:	52 e4       	ldi	r21, 0x42	; 66
    6b08:	60 91 bc 08 	lds	r22, 0x08BC
    6b0c:	70 91 bd 08 	lds	r23, 0x08BD
    6b10:	80 91 be 08 	lds	r24, 0x08BE
    6b14:	90 91 bf 08 	lds	r25, 0x08BF
    6b18:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6b1c:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    6b20:	9f 93       	push	r25
    6b22:	8f 93       	push	r24
    6b24:	7f 93       	push	r23
    6b26:	6f 93       	push	r22
    6b28:	81 e1       	ldi	r24, 0x11	; 17
    6b2a:	93 e0       	ldi	r25, 0x03	; 3
    6b2c:	9f 93       	push	r25
    6b2e:	8f 93       	push	r24
    6b30:	ff 92       	push	r15
    6b32:	ef 92       	push	r14
    6b34:	0e 94 f6 23 	call	0x47ec	; 0x47ec <f_printf>
			//Barometer
			f_printf(&logger,"%d\t%lu\t%d\n",(int16_t)(druck.temperature*10),(uint32_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    6b38:	0f 2e       	mov	r0, r31
    6b3a:	fc e4       	ldi	r31, 0x4C	; 76
    6b3c:	cf 2e       	mov	r12, r31
    6b3e:	f9 e0       	ldi	r31, 0x09	; 9
    6b40:	df 2e       	mov	r13, r31
    6b42:	f0 2d       	mov	r31, r0
    6b44:	20 e0       	ldi	r18, 0x00	; 0
    6b46:	30 e0       	ldi	r19, 0x00	; 0
    6b48:	40 e2       	ldi	r20, 0x20	; 32
    6b4a:	51 e4       	ldi	r21, 0x41	; 65
    6b4c:	d6 01       	movw	r26, r12
    6b4e:	1c 96       	adiw	r26, 0x0c	; 12
    6b50:	6d 91       	ld	r22, X+
    6b52:	7d 91       	ld	r23, X+
    6b54:	8d 91       	ld	r24, X+
    6b56:	9c 91       	ld	r25, X
    6b58:	1f 97       	sbiw	r26, 0x0f	; 15
    6b5a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6b5e:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    6b62:	7f 93       	push	r23
    6b64:	6f 93       	push	r22
    6b66:	20 e0       	ldi	r18, 0x00	; 0
    6b68:	30 e0       	ldi	r19, 0x00	; 0
    6b6a:	48 ec       	ldi	r20, 0xC8	; 200
    6b6c:	52 e4       	ldi	r21, 0x42	; 66
    6b6e:	f6 01       	movw	r30, r12
    6b70:	60 81       	ld	r22, Z
    6b72:	71 81       	ldd	r23, Z+1	; 0x01
    6b74:	82 81       	ldd	r24, Z+2	; 0x02
    6b76:	93 81       	ldd	r25, Z+3	; 0x03
    6b78:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6b7c:	0e 94 39 44 	call	0x8872	; 0x8872 <__fixunssfsi>
    6b80:	9f 93       	push	r25
    6b82:	8f 93       	push	r24
    6b84:	7f 93       	push	r23
    6b86:	6f 93       	push	r22
    6b88:	20 e0       	ldi	r18, 0x00	; 0
    6b8a:	30 e0       	ldi	r19, 0x00	; 0
    6b8c:	40 e2       	ldi	r20, 0x20	; 32
    6b8e:	51 e4       	ldi	r21, 0x41	; 65
    6b90:	d6 01       	movw	r26, r12
    6b92:	18 96       	adiw	r26, 0x08	; 8
    6b94:	6d 91       	ld	r22, X+
    6b96:	7d 91       	ld	r23, X+
    6b98:	8d 91       	ld	r24, X+
    6b9a:	9c 91       	ld	r25, X
    6b9c:	1b 97       	sbiw	r26, 0x0b	; 11
    6b9e:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6ba2:	0e 94 34 44 	call	0x8868	; 0x8868 <__fixsfsi>
    6ba6:	7f 93       	push	r23
    6ba8:	6f 93       	push	r22
    6baa:	86 e1       	ldi	r24, 0x16	; 22
    6bac:	93 e0       	ldi	r25, 0x03	; 3
    6bae:	9f 93       	push	r25
    6bb0:	8f 93       	push	r24
    6bb2:	ff 92       	push	r15
    6bb4:	ef 92       	push	r14
    6bb6:	0e 94 f6 23 	call	0x47ec	; 0x47ec <f_printf>
    6bba:	0f b6       	in	r0, 0x3f	; 63
    6bbc:	f8 94       	cli
    6bbe:	de bf       	out	0x3e, r29	; 62
    6bc0:	0f be       	out	0x3f, r0	; 63
    6bc2:	cd bf       	out	0x3d, r28	; 61
		}
		
		FPS=FPScount;
    6bc4:	80 91 3d 09 	lds	r24, 0x093D
    6bc8:	80 93 3e 09 	sts	0x093E, r24
		FPScount=0;
    6bcc:	10 92 3d 09 	sts	0x093D, r1
		anzeige |= (1<<refreshdisplay);
    6bd0:	80 91 41 09 	lds	r24, 0x0941
    6bd4:	81 60       	ori	r24, 0x01	; 1
    6bd6:	80 93 41 09 	sts	0x0941, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    6bda:	ed e8       	ldi	r30, 0x8D	; 141
    6bdc:	fe e0       	ldi	r31, 0x0E	; 14
    6bde:	80 8d       	ldd	r24, Z+24	; 0x18
    6be0:	8d 7f       	andi	r24, 0xFD	; 253
    6be2:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    6be4:	80 91 a5 0e 	lds	r24, 0x0EA5
    6be8:	82 ff       	sbrs	r24, 2
    6bea:	13 c0       	rjmp	.+38     	; 0x6c12 <_Z19maininterupthandlerP7monitor+0x4a0>
    6bec:	80 91 40 09 	lds	r24, 0x0940
    6bf0:	86 70       	andi	r24, 0x06	; 6
	{
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    6bf2:	86 30       	cpi	r24, 0x06	; 6
    6bf4:	21 f4       	brne	.+8      	; 0x6bfe <_Z19maininterupthandlerP7monitor+0x48c>
		{
			f_sync(&logger);
    6bf6:	82 e6       	ldi	r24, 0x62	; 98
    6bf8:	94 e0       	ldi	r25, 0x04	; 4
    6bfa:	0e 94 19 23 	call	0x4632	; 0x4632 <f_sync>
		}
		anzeige |= (1<<refreshdisplay);
    6bfe:	80 91 41 09 	lds	r24, 0x0941
    6c02:	81 60       	ori	r24, 0x01	; 1
    6c04:	80 93 41 09 	sts	0x0941, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    6c08:	ed e8       	ldi	r30, 0x8D	; 141
    6c0a:	fe e0       	ldi	r31, 0x0E	; 14
    6c0c:	80 8d       	ldd	r24, Z+24	; 0x18
    6c0e:	8b 7f       	andi	r24, 0xFB	; 251
    6c10:	80 8f       	std	Z+24, r24	; 0x18
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    6c12:	80 91 41 09 	lds	r24, 0x0941
    6c16:	80 ff       	sbrs	r24, 0
    6c18:	0d c0       	rjmp	.+26     	; 0x6c34 <_Z19maininterupthandlerP7monitor+0x4c2>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    6c1a:	d8 01       	movw	r26, r16
    6c1c:	ed 91       	ld	r30, X+
    6c1e:	fc 91       	ld	r31, X
    6c20:	06 80       	ldd	r0, Z+6	; 0x06
    6c22:	f7 81       	ldd	r31, Z+7	; 0x07
    6c24:	e0 2d       	mov	r30, r0
    6c26:	c8 01       	movw	r24, r16
    6c28:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    6c2a:	80 91 41 09 	lds	r24, 0x0941
    6c2e:	8e 7f       	andi	r24, 0xFE	; 254
    6c30:	80 93 41 09 	sts	0x0941, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    6c34:	2d 96       	adiw	r28, 0x0d	; 13
    6c36:	0f b6       	in	r0, 0x3f	; 63
    6c38:	f8 94       	cli
    6c3a:	de bf       	out	0x3e, r29	; 62
    6c3c:	0f be       	out	0x3f, r0	; 63
    6c3e:	cd bf       	out	0x3d, r28	; 61
    6c40:	df 91       	pop	r29
    6c42:	cf 91       	pop	r28
    6c44:	1f 91       	pop	r17
    6c46:	0f 91       	pop	r16
    6c48:	ff 90       	pop	r15
    6c4a:	ef 90       	pop	r14
    6c4c:	df 90       	pop	r13
    6c4e:	cf 90       	pop	r12
    6c50:	08 95       	ret

00006c52 <_Z12gpsmovingavvdd>:

#define gpsmovavvnumber	4.0
void gpsmovingavv(double latneu, double lonneu){
    6c52:	4f 92       	push	r4
    6c54:	5f 92       	push	r5
    6c56:	6f 92       	push	r6
    6c58:	7f 92       	push	r7
    6c5a:	af 92       	push	r10
    6c5c:	bf 92       	push	r11
    6c5e:	cf 92       	push	r12
    6c60:	df 92       	push	r13
    6c62:	ef 92       	push	r14
    6c64:	ff 92       	push	r15
    6c66:	0f 93       	push	r16
    6c68:	1f 93       	push	r17
    6c6a:	cf 93       	push	r28
    6c6c:	df 93       	push	r29
    6c6e:	2b 01       	movw	r4, r22
    6c70:	3c 01       	movw	r6, r24
    6c72:	69 01       	movw	r12, r18
    6c74:	7a 01       	movw	r14, r20
    6c76:	ee ee       	ldi	r30, 0xEE	; 238
    6c78:	f8 e0       	ldi	r31, 0x08	; 8
    6c7a:	aa ed       	ldi	r26, 0xDA	; 218
    6c7c:	b8 e0       	ldi	r27, 0x08	; 8
    6c7e:	0e ed       	ldi	r16, 0xDE	; 222
    6c80:	18 e0       	ldi	r17, 0x08	; 8
	for (uint8_t i = gpsmovavvnumber; i >= 1; i--)
	{
		latavv[i]	= latavv[i-1];
    6c82:	72 91       	ld	r23, -Z
    6c84:	62 91       	ld	r22, -Z
    6c86:	52 91       	ld	r21, -Z
    6c88:	42 91       	ld	r20, -Z
    6c8a:	44 83       	std	Z+4, r20	; 0x04
    6c8c:	55 83       	std	Z+5, r21	; 0x05
    6c8e:	66 83       	std	Z+6, r22	; 0x06
    6c90:	77 83       	std	Z+7, r23	; 0x07
		lonavv[i]	= lonavv[i-1];
    6c92:	7e 91       	ld	r23, -X
    6c94:	6e 91       	ld	r22, -X
    6c96:	5e 91       	ld	r21, -X
    6c98:	4e 91       	ld	r20, -X
    6c9a:	14 96       	adiw	r26, 0x04	; 4
    6c9c:	4d 93       	st	X+, r20
    6c9e:	5d 93       	st	X+, r21
    6ca0:	6d 93       	st	X+, r22
    6ca2:	7c 93       	st	X, r23
    6ca4:	17 97       	sbiw	r26, 0x07	; 7
	}*/
}

#define gpsmovavvnumber	4.0
void gpsmovingavv(double latneu, double lonneu){
	for (uint8_t i = gpsmovavvnumber; i >= 1; i--)
    6ca6:	e0 17       	cp	r30, r16
    6ca8:	f1 07       	cpc	r31, r17
    6caa:	59 f7       	brne	.-42     	; 0x6c82 <_Z12gpsmovingavvdd+0x30>
	{
		latavv[i]	= latavv[i-1];
		lonavv[i]	= lonavv[i-1];
	}
	latavv[0]	= latneu;
    6cac:	40 92 de 08 	sts	0x08DE, r4
    6cb0:	50 92 df 08 	sts	0x08DF, r5
    6cb4:	60 92 e0 08 	sts	0x08E0, r6
    6cb8:	70 92 e1 08 	sts	0x08E1, r7
	lonavv[0]	= lonneu;
    6cbc:	c0 92 ca 08 	sts	0x08CA, r12
    6cc0:	d0 92 cb 08 	sts	0x08CB, r13
    6cc4:	e0 92 cc 08 	sts	0x08CC, r14
    6cc8:	f0 92 cd 08 	sts	0x08CD, r15
    6ccc:	0f 2e       	mov	r0, r31
    6cce:	fa ec       	ldi	r31, 0xCA	; 202
    6cd0:	af 2e       	mov	r10, r31
    6cd2:	f8 e0       	ldi	r31, 0x08	; 8
    6cd4:	bf 2e       	mov	r11, r31
    6cd6:	f0 2d       	mov	r31, r0
    6cd8:	c1 e0       	ldi	r28, 0x01	; 1
    6cda:	d0 e0       	ldi	r29, 0x00	; 0
    6cdc:	c1 2c       	mov	r12, r1
    6cde:	d1 2c       	mov	r13, r1
    6ce0:	76 01       	movw	r14, r12
    6ce2:	26 01       	movw	r4, r12
    6ce4:	37 01       	movw	r6, r14
	
	double summelat	= 0;
	double summelon	= 0;
	for (uint8_t i = 0; i < gpsmovavvnumber; i++)
	{
		summelat	+= latavv[i];
    6ce6:	f8 01       	movw	r30, r16
    6ce8:	21 91       	ld	r18, Z+
    6cea:	31 91       	ld	r19, Z+
    6cec:	41 91       	ld	r20, Z+
    6cee:	51 91       	ld	r21, Z+
    6cf0:	8f 01       	movw	r16, r30
    6cf2:	c3 01       	movw	r24, r6
    6cf4:	b2 01       	movw	r22, r4
    6cf6:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6cfa:	2b 01       	movw	r4, r22
    6cfc:	3c 01       	movw	r6, r24
		summelon	+= lonavv[i];
    6cfe:	f5 01       	movw	r30, r10
    6d00:	21 91       	ld	r18, Z+
    6d02:	31 91       	ld	r19, Z+
    6d04:	41 91       	ld	r20, Z+
    6d06:	51 91       	ld	r21, Z+
    6d08:	5f 01       	movw	r10, r30
    6d0a:	c7 01       	movw	r24, r14
    6d0c:	b6 01       	movw	r22, r12
    6d0e:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6d12:	6b 01       	movw	r12, r22
    6d14:	7c 01       	movw	r14, r24
    6d16:	21 96       	adiw	r28, 0x01	; 1
	latavv[0]	= latneu;
	lonavv[0]	= lonneu;
	
	double summelat	= 0;
	double summelon	= 0;
	for (uint8_t i = 0; i < gpsmovavvnumber; i++)
    6d18:	c5 30       	cpi	r28, 0x05	; 5
    6d1a:	d1 05       	cpc	r29, r1
    6d1c:	21 f7       	brne	.-56     	; 0x6ce6 <_Z12gpsmovingavvdd+0x94>
	{
		summelat	+= latavv[i];
		summelon	+= lonavv[i];
	}
	lat	= summelat/gpsmovavvnumber;
    6d1e:	20 e0       	ldi	r18, 0x00	; 0
    6d20:	30 e0       	ldi	r19, 0x00	; 0
    6d22:	40 e8       	ldi	r20, 0x80	; 128
    6d24:	5e e3       	ldi	r21, 0x3E	; 62
    6d26:	c3 01       	movw	r24, r6
    6d28:	b2 01       	movw	r22, r4
    6d2a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6d2e:	60 93 ee 08 	sts	0x08EE, r22
    6d32:	70 93 ef 08 	sts	0x08EF, r23
    6d36:	80 93 f0 08 	sts	0x08F0, r24
    6d3a:	90 93 f1 08 	sts	0x08F1, r25
	lon	= summelon/gpsmovavvnumber;
    6d3e:	20 e0       	ldi	r18, 0x00	; 0
    6d40:	30 e0       	ldi	r19, 0x00	; 0
    6d42:	40 e8       	ldi	r20, 0x80	; 128
    6d44:	5e e3       	ldi	r21, 0x3E	; 62
    6d46:	c7 01       	movw	r24, r14
    6d48:	b6 01       	movw	r22, r12
    6d4a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    6d4e:	60 93 da 08 	sts	0x08DA, r22
    6d52:	70 93 db 08 	sts	0x08DB, r23
    6d56:	80 93 dc 08 	sts	0x08DC, r24
    6d5a:	90 93 dd 08 	sts	0x08DD, r25
}
    6d5e:	df 91       	pop	r29
    6d60:	cf 91       	pop	r28
    6d62:	1f 91       	pop	r17
    6d64:	0f 91       	pop	r16
    6d66:	ff 90       	pop	r15
    6d68:	ef 90       	pop	r14
    6d6a:	df 90       	pop	r13
    6d6c:	cf 90       	pop	r12
    6d6e:	bf 90       	pop	r11
    6d70:	af 90       	pop	r10
    6d72:	7f 90       	pop	r7
    6d74:	6f 90       	pop	r6
    6d76:	5f 90       	pop	r5
    6d78:	4f 90       	pop	r4
    6d7a:	08 95       	ret

00006d7c <_Z10gpshandlerv>:

void gpshandler(){
    6d7c:	4f 92       	push	r4
    6d7e:	5f 92       	push	r5
    6d80:	6f 92       	push	r6
    6d82:	7f 92       	push	r7
    6d84:	8f 92       	push	r8
    6d86:	9f 92       	push	r9
    6d88:	af 92       	push	r10
    6d8a:	bf 92       	push	r11
    6d8c:	cf 92       	push	r12
    6d8e:	df 92       	push	r13
    6d90:	ef 92       	push	r14
    6d92:	ff 92       	push	r15
    6d94:	0f 93       	push	r16
    6d96:	1f 93       	push	r17
    6d98:	cf 93       	push	r28
    6d9a:	df 93       	push	r29
    6d9c:	00 d0       	rcall	.+0      	; 0x6d9e <_Z10gpshandlerv+0x22>
    6d9e:	00 d0       	rcall	.+0      	; 0x6da0 <_Z10gpshandlerv+0x24>
    6da0:	cd b7       	in	r28, 0x3d	; 61
    6da2:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)))
    6da4:	80 91 3b 09 	lds	r24, 0x093B
    6da8:	82 ff       	sbrs	r24, 2
    6daa:	c8 c2       	rjmp	.+1424   	; 0x733c <_Z10gpshandlerv+0x5c0>
	{
		if (!(gpsstatus&(1<<fix)))
    6dac:	88 23       	and	r24, r24
    6dae:	1c f0       	brlt	.+6      	; 0x6db6 <_Z10gpshandlerv+0x3a>
		{
			gpsstatus |= (1<<fix);
    6db0:	80 68       	ori	r24, 0x80	; 128
    6db2:	80 93 3b 09 	sts	0x093B, r24
		double la	= 0;
		double lo	= 0;
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    6db6:	03 ef       	ldi	r16, 0xF3	; 243
    6db8:	18 e0       	ldi	r17, 0x08	; 8
    6dba:	f8 01       	movw	r30, r16
    6dbc:	80 85       	ldd	r24, Z+8	; 0x08
    6dbe:	22 ed       	ldi	r18, 0xD2	; 210
    6dc0:	28 0f       	add	r18, r24
		}
		double la	= 0;
		double lo	= 0;
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6dc2:	87 81       	ldd	r24, Z+7	; 0x07
    6dc4:	88 0f       	add	r24, r24
    6dc6:	80 56       	subi	r24, 0x60	; 96
    6dc8:	98 2f       	mov	r25, r24
    6dca:	99 0f       	add	r25, r25
    6dcc:	99 0f       	add	r25, r25
    6dce:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6dd0:	82 0f       	add	r24, r18
    6dd2:	80 93 c5 08 	sts	0x08C5, r24
    6dd6:	82 85       	ldd	r24, Z+10	; 0x0a
    6dd8:	20 ed       	ldi	r18, 0xD0	; 208
    6dda:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    6ddc:	81 85       	ldd	r24, Z+9	; 0x09
    6dde:	88 0f       	add	r24, r24
    6de0:	80 56       	subi	r24, 0x60	; 96
    6de2:	98 2f       	mov	r25, r24
    6de4:	99 0f       	add	r25, r25
    6de6:	99 0f       	add	r25, r25
    6de8:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    6dea:	82 0f       	add	r24, r18
    6dec:	80 93 c4 08 	sts	0x08C4, r24
    6df0:	84 85       	ldd	r24, Z+12	; 0x0c
    6df2:	20 ed       	ldi	r18, 0xD0	; 208
    6df4:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6df6:	83 85       	ldd	r24, Z+11	; 0x0b
    6df8:	88 0f       	add	r24, r24
    6dfa:	80 56       	subi	r24, 0x60	; 96
    6dfc:	98 2f       	mov	r25, r24
    6dfe:	99 0f       	add	r25, r25
    6e00:	99 0f       	add	r25, r25
    6e02:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    6e04:	82 0f       	add	r24, r18
    6e06:	80 93 c3 08 	sts	0x08C3, r24
		
		//Latitude
		la =	(gpsdata[20] - '0')*10;
    6e0a:	84 89       	ldd	r24, Z+20	; 0x14
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	c0 97       	sbiw	r24, 0x30	; 48
    6e10:	bc 01       	movw	r22, r24
    6e12:	66 0f       	add	r22, r22
    6e14:	77 1f       	adc	r23, r23
    6e16:	88 0f       	add	r24, r24
    6e18:	99 1f       	adc	r25, r25
    6e1a:	88 0f       	add	r24, r24
    6e1c:	99 1f       	adc	r25, r25
    6e1e:	88 0f       	add	r24, r24
    6e20:	99 1f       	adc	r25, r25
    6e22:	68 0f       	add	r22, r24
    6e24:	79 1f       	adc	r23, r25
    6e26:	07 2e       	mov	r0, r23
    6e28:	00 0c       	add	r0, r0
    6e2a:	88 0b       	sbc	r24, r24
    6e2c:	99 0b       	sbc	r25, r25
    6e2e:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6e32:	6b 01       	movw	r12, r22
    6e34:	7c 01       	movw	r14, r24
		la +=	(gpsdata[21] - '0');
    6e36:	f8 01       	movw	r30, r16
    6e38:	85 89       	ldd	r24, Z+21	; 0x15
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	c0 97       	sbiw	r24, 0x30	; 48
    6e3e:	bc 01       	movw	r22, r24
    6e40:	99 0f       	add	r25, r25
    6e42:	88 0b       	sbc	r24, r24
    6e44:	99 0b       	sbc	r25, r25
    6e46:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6e4a:	a7 01       	movw	r20, r14
    6e4c:	96 01       	movw	r18, r12
    6e4e:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6e52:	6b 01       	movw	r12, r22
    6e54:	7c 01       	movw	r14, r24
		float lamin =	(gpsdata[22] - '0')*10;
    6e56:	f8 01       	movw	r30, r16
    6e58:	46 89       	ldd	r20, Z+22	; 0x16
    6e5a:	50 e0       	ldi	r21, 0x00	; 0
    6e5c:	40 53       	subi	r20, 0x30	; 48
    6e5e:	51 09       	sbc	r21, r1
    6e60:	ca 01       	movw	r24, r20
    6e62:	88 0f       	add	r24, r24
    6e64:	99 1f       	adc	r25, r25
    6e66:	44 0f       	add	r20, r20
    6e68:	55 1f       	adc	r21, r21
    6e6a:	44 0f       	add	r20, r20
    6e6c:	55 1f       	adc	r21, r21
    6e6e:	44 0f       	add	r20, r20
    6e70:	55 1f       	adc	r21, r21
    6e72:	84 0f       	add	r24, r20
    6e74:	95 1f       	adc	r25, r21
    6e76:	bc 01       	movw	r22, r24
    6e78:	99 0f       	add	r25, r25
    6e7a:	88 0b       	sbc	r24, r24
    6e7c:	99 0b       	sbc	r25, r25
    6e7e:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6e82:	4b 01       	movw	r8, r22
    6e84:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[23] - '0');
    6e86:	f8 01       	movw	r30, r16
    6e88:	67 89       	ldd	r22, Z+23	; 0x17
    6e8a:	70 e0       	ldi	r23, 0x00	; 0
    6e8c:	60 53       	subi	r22, 0x30	; 48
    6e8e:	71 09       	sbc	r23, r1
    6e90:	07 2e       	mov	r0, r23
    6e92:	00 0c       	add	r0, r0
    6e94:	88 0b       	sbc	r24, r24
    6e96:	99 0b       	sbc	r25, r25
    6e98:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6e9c:	a5 01       	movw	r20, r10
    6e9e:	94 01       	movw	r18, r8
    6ea0:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6ea4:	4b 01       	movw	r8, r22
    6ea6:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[25] - '0')/10.0;
    6ea8:	f8 01       	movw	r30, r16
    6eaa:	81 8d       	ldd	r24, Z+25	; 0x19
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	c0 97       	sbiw	r24, 0x30	; 48
    6eb0:	bc 01       	movw	r22, r24
    6eb2:	99 0f       	add	r25, r25
    6eb4:	88 0b       	sbc	r24, r24
    6eb6:	99 0b       	sbc	r25, r25
    6eb8:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6ebc:	20 e0       	ldi	r18, 0x00	; 0
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	40 e2       	ldi	r20, 0x20	; 32
    6ec2:	51 e4       	ldi	r21, 0x41	; 65
    6ec4:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    6ec8:	a5 01       	movw	r20, r10
    6eca:	94 01       	movw	r18, r8
    6ecc:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6ed0:	4b 01       	movw	r8, r22
    6ed2:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[26] - '0')/100.0;
    6ed4:	f8 01       	movw	r30, r16
    6ed6:	82 8d       	ldd	r24, Z+26	; 0x1a
    6ed8:	90 e0       	ldi	r25, 0x00	; 0
    6eda:	c0 97       	sbiw	r24, 0x30	; 48
    6edc:	bc 01       	movw	r22, r24
    6ede:	99 0f       	add	r25, r25
    6ee0:	88 0b       	sbc	r24, r24
    6ee2:	99 0b       	sbc	r25, r25
    6ee4:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6ee8:	20 e0       	ldi	r18, 0x00	; 0
    6eea:	30 e0       	ldi	r19, 0x00	; 0
    6eec:	48 ec       	ldi	r20, 0xC8	; 200
    6eee:	52 e4       	ldi	r21, 0x42	; 66
    6ef0:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    6ef4:	a5 01       	movw	r20, r10
    6ef6:	94 01       	movw	r18, r8
    6ef8:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6efc:	4b 01       	movw	r8, r22
    6efe:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[27] - '0')/1000.0;
    6f00:	f8 01       	movw	r30, r16
    6f02:	83 8d       	ldd	r24, Z+27	; 0x1b
    6f04:	90 e0       	ldi	r25, 0x00	; 0
    6f06:	c0 97       	sbiw	r24, 0x30	; 48
    6f08:	bc 01       	movw	r22, r24
    6f0a:	99 0f       	add	r25, r25
    6f0c:	88 0b       	sbc	r24, r24
    6f0e:	99 0b       	sbc	r25, r25
    6f10:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6f14:	20 e0       	ldi	r18, 0x00	; 0
    6f16:	30 e0       	ldi	r19, 0x00	; 0
    6f18:	4a e7       	ldi	r20, 0x7A	; 122
    6f1a:	54 e4       	ldi	r21, 0x44	; 68
    6f1c:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    6f20:	a5 01       	movw	r20, r10
    6f22:	94 01       	movw	r18, r8
    6f24:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6f28:	4b 01       	movw	r8, r22
    6f2a:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[28] - '0')/10000.0;
    6f2c:	f8 01       	movw	r30, r16
    6f2e:	84 8d       	ldd	r24, Z+28	; 0x1c
    6f30:	90 e0       	ldi	r25, 0x00	; 0
    6f32:	c0 97       	sbiw	r24, 0x30	; 48
    6f34:	bc 01       	movw	r22, r24
    6f36:	99 0f       	add	r25, r25
    6f38:	88 0b       	sbc	r24, r24
    6f3a:	99 0b       	sbc	r25, r25
    6f3c:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6f40:	20 e0       	ldi	r18, 0x00	; 0
    6f42:	30 e4       	ldi	r19, 0x40	; 64
    6f44:	4c e1       	ldi	r20, 0x1C	; 28
    6f46:	56 e4       	ldi	r21, 0x46	; 70
    6f48:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    6f4c:	a5 01       	movw	r20, r10
    6f4e:	94 01       	movw	r18, r8
    6f50:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
		la +=	lamin/60.0;
    6f54:	20 e0       	ldi	r18, 0x00	; 0
    6f56:	30 e0       	ldi	r19, 0x00	; 0
    6f58:	40 e7       	ldi	r20, 0x70	; 112
    6f5a:	52 e4       	ldi	r21, 0x42	; 66
    6f5c:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    6f60:	a7 01       	movw	r20, r14
    6f62:	96 01       	movw	r18, r12
    6f64:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6f68:	4b 01       	movw	r8, r22
    6f6a:	5c 01       	movw	r10, r24
		if (gpsdata[30] != 'N')
    6f6c:	f8 01       	movw	r30, r16
    6f6e:	86 8d       	ldd	r24, Z+30	; 0x1e
    6f70:	8e 34       	cpi	r24, 0x4E	; 78
    6f72:	21 f0       	breq	.+8      	; 0x6f7c <_Z10gpshandlerv+0x200>
		{
			la *= -1;
    6f74:	b7 fa       	bst	r11, 7
    6f76:	b0 94       	com	r11
    6f78:	b7 f8       	bld	r11, 7
    6f7a:	b0 94       	com	r11
		}
		
		//Longitude
		lo =	(gpsdata[32] - '0')*100;
    6f7c:	03 ef       	ldi	r16, 0xF3	; 243
    6f7e:	18 e0       	ldi	r17, 0x08	; 8
    6f80:	f8 01       	movw	r30, r16
    6f82:	80 a1       	ldd	r24, Z+32	; 0x20
    6f84:	90 e0       	ldi	r25, 0x00	; 0
    6f86:	c0 97       	sbiw	r24, 0x30	; 48
    6f88:	24 e6       	ldi	r18, 0x64	; 100
    6f8a:	28 9f       	mul	r18, r24
    6f8c:	b0 01       	movw	r22, r0
    6f8e:	29 9f       	mul	r18, r25
    6f90:	70 0d       	add	r23, r0
    6f92:	11 24       	eor	r1, r1
    6f94:	07 2e       	mov	r0, r23
    6f96:	00 0c       	add	r0, r0
    6f98:	88 0b       	sbc	r24, r24
    6f9a:	99 0b       	sbc	r25, r25
    6f9c:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6fa0:	6b 01       	movw	r12, r22
    6fa2:	7c 01       	movw	r14, r24
		lo +=	(gpsdata[33] - '0')*10;
    6fa4:	f8 01       	movw	r30, r16
    6fa6:	81 a1       	ldd	r24, Z+33	; 0x21
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	c0 97       	sbiw	r24, 0x30	; 48
    6fac:	bc 01       	movw	r22, r24
    6fae:	66 0f       	add	r22, r22
    6fb0:	77 1f       	adc	r23, r23
    6fb2:	88 0f       	add	r24, r24
    6fb4:	99 1f       	adc	r25, r25
    6fb6:	88 0f       	add	r24, r24
    6fb8:	99 1f       	adc	r25, r25
    6fba:	88 0f       	add	r24, r24
    6fbc:	99 1f       	adc	r25, r25
    6fbe:	68 0f       	add	r22, r24
    6fc0:	79 1f       	adc	r23, r25
    6fc2:	07 2e       	mov	r0, r23
    6fc4:	00 0c       	add	r0, r0
    6fc6:	88 0b       	sbc	r24, r24
    6fc8:	99 0b       	sbc	r25, r25
    6fca:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6fce:	a7 01       	movw	r20, r14
    6fd0:	96 01       	movw	r18, r12
    6fd2:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6fd6:	6b 01       	movw	r12, r22
    6fd8:	7c 01       	movw	r14, r24
		lo +=	(gpsdata[34] - '0');
    6fda:	f8 01       	movw	r30, r16
    6fdc:	62 a1       	ldd	r22, Z+34	; 0x22
    6fde:	70 e0       	ldi	r23, 0x00	; 0
    6fe0:	60 53       	subi	r22, 0x30	; 48
    6fe2:	71 09       	sbc	r23, r1
    6fe4:	07 2e       	mov	r0, r23
    6fe6:	00 0c       	add	r0, r0
    6fe8:	88 0b       	sbc	r24, r24
    6fea:	99 0b       	sbc	r25, r25
    6fec:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    6ff0:	a7 01       	movw	r20, r14
    6ff2:	96 01       	movw	r18, r12
    6ff4:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    6ff8:	6b 01       	movw	r12, r22
    6ffa:	7c 01       	movw	r14, r24
		float lomin =	(gpsdata[35] - '0')*10;
    6ffc:	f8 01       	movw	r30, r16
    6ffe:	83 a1       	ldd	r24, Z+35	; 0x23
    7000:	90 e0       	ldi	r25, 0x00	; 0
    7002:	c0 97       	sbiw	r24, 0x30	; 48
    7004:	bc 01       	movw	r22, r24
    7006:	66 0f       	add	r22, r22
    7008:	77 1f       	adc	r23, r23
    700a:	88 0f       	add	r24, r24
    700c:	99 1f       	adc	r25, r25
    700e:	88 0f       	add	r24, r24
    7010:	99 1f       	adc	r25, r25
    7012:	88 0f       	add	r24, r24
    7014:	99 1f       	adc	r25, r25
    7016:	68 0f       	add	r22, r24
    7018:	79 1f       	adc	r23, r25
    701a:	07 2e       	mov	r0, r23
    701c:	00 0c       	add	r0, r0
    701e:	88 0b       	sbc	r24, r24
    7020:	99 0b       	sbc	r25, r25
    7022:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    7026:	2b 01       	movw	r4, r22
    7028:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[36] - '0');
    702a:	f8 01       	movw	r30, r16
    702c:	64 a1       	ldd	r22, Z+36	; 0x24
    702e:	70 e0       	ldi	r23, 0x00	; 0
    7030:	60 53       	subi	r22, 0x30	; 48
    7032:	71 09       	sbc	r23, r1
    7034:	07 2e       	mov	r0, r23
    7036:	00 0c       	add	r0, r0
    7038:	88 0b       	sbc	r24, r24
    703a:	99 0b       	sbc	r25, r25
    703c:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    7040:	a3 01       	movw	r20, r6
    7042:	92 01       	movw	r18, r4
    7044:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    7048:	2b 01       	movw	r4, r22
    704a:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[38] - '0')/10.0;
    704c:	f8 01       	movw	r30, r16
    704e:	66 a1       	ldd	r22, Z+38	; 0x26
    7050:	70 e0       	ldi	r23, 0x00	; 0
    7052:	60 53       	subi	r22, 0x30	; 48
    7054:	71 09       	sbc	r23, r1
    7056:	07 2e       	mov	r0, r23
    7058:	00 0c       	add	r0, r0
    705a:	88 0b       	sbc	r24, r24
    705c:	99 0b       	sbc	r25, r25
    705e:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    7062:	20 e0       	ldi	r18, 0x00	; 0
    7064:	30 e0       	ldi	r19, 0x00	; 0
    7066:	40 e2       	ldi	r20, 0x20	; 32
    7068:	51 e4       	ldi	r21, 0x41	; 65
    706a:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    706e:	a3 01       	movw	r20, r6
    7070:	92 01       	movw	r18, r4
    7072:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    7076:	2b 01       	movw	r4, r22
    7078:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[39] - '0')/100.0;
    707a:	f8 01       	movw	r30, r16
    707c:	67 a1       	ldd	r22, Z+39	; 0x27
    707e:	70 e0       	ldi	r23, 0x00	; 0
    7080:	60 53       	subi	r22, 0x30	; 48
    7082:	71 09       	sbc	r23, r1
    7084:	07 2e       	mov	r0, r23
    7086:	00 0c       	add	r0, r0
    7088:	88 0b       	sbc	r24, r24
    708a:	99 0b       	sbc	r25, r25
    708c:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    7090:	20 e0       	ldi	r18, 0x00	; 0
    7092:	30 e0       	ldi	r19, 0x00	; 0
    7094:	48 ec       	ldi	r20, 0xC8	; 200
    7096:	52 e4       	ldi	r21, 0x42	; 66
    7098:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    709c:	a3 01       	movw	r20, r6
    709e:	92 01       	movw	r18, r4
    70a0:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    70a4:	2b 01       	movw	r4, r22
    70a6:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[40] - '0')/1000.0;
    70a8:	f8 01       	movw	r30, r16
    70aa:	60 a5       	ldd	r22, Z+40	; 0x28
    70ac:	70 e0       	ldi	r23, 0x00	; 0
    70ae:	60 53       	subi	r22, 0x30	; 48
    70b0:	71 09       	sbc	r23, r1
    70b2:	07 2e       	mov	r0, r23
    70b4:	00 0c       	add	r0, r0
    70b6:	88 0b       	sbc	r24, r24
    70b8:	99 0b       	sbc	r25, r25
    70ba:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    70be:	20 e0       	ldi	r18, 0x00	; 0
    70c0:	30 e0       	ldi	r19, 0x00	; 0
    70c2:	4a e7       	ldi	r20, 0x7A	; 122
    70c4:	54 e4       	ldi	r21, 0x44	; 68
    70c6:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    70ca:	a3 01       	movw	r20, r6
    70cc:	92 01       	movw	r18, r4
    70ce:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    70d2:	2b 01       	movw	r4, r22
    70d4:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[41] - '0')/10000.0;
    70d6:	f8 01       	movw	r30, r16
    70d8:	61 a5       	ldd	r22, Z+41	; 0x29
    70da:	70 e0       	ldi	r23, 0x00	; 0
    70dc:	60 53       	subi	r22, 0x30	; 48
    70de:	71 09       	sbc	r23, r1
    70e0:	07 2e       	mov	r0, r23
    70e2:	00 0c       	add	r0, r0
    70e4:	88 0b       	sbc	r24, r24
    70e6:	99 0b       	sbc	r25, r25
    70e8:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    70ec:	20 e0       	ldi	r18, 0x00	; 0
    70ee:	30 e4       	ldi	r19, 0x40	; 64
    70f0:	4c e1       	ldi	r20, 0x1C	; 28
    70f2:	56 e4       	ldi	r21, 0x46	; 70
    70f4:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    70f8:	a3 01       	movw	r20, r6
    70fa:	92 01       	movw	r18, r4
    70fc:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
		lo +=			lomin/60.0;
    7100:	20 e0       	ldi	r18, 0x00	; 0
    7102:	30 e0       	ldi	r19, 0x00	; 0
    7104:	40 e7       	ldi	r20, 0x70	; 112
    7106:	52 e4       	ldi	r21, 0x42	; 66
    7108:	0e 94 cc 43 	call	0x8798	; 0x8798 <__divsf3>
    710c:	a7 01       	movw	r20, r14
    710e:	96 01       	movw	r18, r12
    7110:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    7114:	9b 01       	movw	r18, r22
    7116:	ac 01       	movw	r20, r24
		if (gpsdata[43] != 'E')
    7118:	f8 01       	movw	r30, r16
    711a:	83 a5       	ldd	r24, Z+43	; 0x2b
    711c:	85 34       	cpi	r24, 0x45	; 69
    711e:	09 f0       	breq	.+2      	; 0x7122 <_Z10gpshandlerv+0x3a6>
		{
			lo *= -1;
    7120:	50 58       	subi	r21, 0x80	; 128
		}
		
		//Avvaragging
		gpsmovingavv(la,lo);
    7122:	c5 01       	movw	r24, r10
    7124:	b4 01       	movw	r22, r8
    7126:	95 dd       	rcall	.-1238   	; 0x6c52 <_Z12gpsmovingavvdd>
		
		//Speed 
		volatile uint8_t counter = 45;
    7128:	8d e2       	ldi	r24, 0x2D	; 45
    712a:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    712c:	ec 81       	ldd	r30, Y+4	; 0x04
    712e:	f0 e0       	ldi	r31, 0x00	; 0
    7130:	ed 50       	subi	r30, 0x0D	; 13
    7132:	f7 4f       	sbci	r31, 0xF7	; 247
    7134:	80 81       	ld	r24, Z
    7136:	8e 32       	cpi	r24, 0x2E	; 46
    7138:	91 f4       	brne	.+36     	; 0x715e <_Z10gpshandlerv+0x3e2>
			{
				weiter=false;
				counter--;
    713a:	8c 81       	ldd	r24, Y+4	; 0x04
    713c:	81 50       	subi	r24, 0x01	; 1
    713e:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    7140:	8c 81       	ldd	r24, Y+4	; 0x04
    7142:	8f 5f       	subi	r24, 0xFF	; 255
    7144:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    7146:	10 92 c6 08 	sts	0x08C6, r1
    714a:	10 92 c7 08 	sts	0x08C7, r1
    714e:	10 92 c8 08 	sts	0x08C8, r1
    7152:	10 92 c9 08 	sts	0x08C9, r1
		for(uint8_t i=45;i<counter;i++){
    7156:	8c 81       	ldd	r24, Y+4	; 0x04
    7158:	8e 32       	cpi	r24, 0x2E	; 46
    715a:	28 f4       	brcc	.+10     	; 0x7166 <_Z10gpshandlerv+0x3ea>
    715c:	47 c0       	rjmp	.+142    	; 0x71ec <_Z10gpshandlerv+0x470>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    715e:	8c 81       	ldd	r24, Y+4	; 0x04
    7160:	8f 5f       	subi	r24, 0xFF	; 255
    7162:	8c 83       	std	Y+4, r24	; 0x04
    7164:	e3 cf       	rjmp	.-58     	; 0x712c <_Z10gpshandlerv+0x3b0>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    7166:	81 2c       	mov	r8, r1
    7168:	91 2c       	mov	r9, r1
    716a:	54 01       	movw	r10, r8
    716c:	0f 2e       	mov	r0, r31
    716e:	fd e2       	ldi	r31, 0x2D	; 45
    7170:	ff 2e       	mov	r15, r31
    7172:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    7174:	0f 2d       	mov	r16, r15
    7176:	10 e0       	ldi	r17, 0x00	; 0
    7178:	8c 81       	ldd	r24, Y+4	; 0x04
    717a:	90 e0       	ldi	r25, 0x00	; 0
    717c:	80 1b       	sub	r24, r16
    717e:	91 0b       	sbc	r25, r17
    7180:	01 97       	sbiw	r24, 0x01	; 1
    7182:	bc 01       	movw	r22, r24
    7184:	99 0f       	add	r25, r25
    7186:	88 0b       	sbc	r24, r24
    7188:	99 0b       	sbc	r25, r25
    718a:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    718e:	9b 01       	movw	r18, r22
    7190:	ac 01       	movw	r20, r24
    7192:	60 e0       	ldi	r22, 0x00	; 0
    7194:	70 e0       	ldi	r23, 0x00	; 0
    7196:	80 e2       	ldi	r24, 0x20	; 32
    7198:	91 e4       	ldi	r25, 0x41	; 65
    719a:	0e 94 e3 45 	call	0x8bc6	; 0x8bc6 <pow>
    719e:	2b 01       	movw	r4, r22
    71a0:	3c 01       	movw	r6, r24
    71a2:	f8 01       	movw	r30, r16
    71a4:	ed 50       	subi	r30, 0x0D	; 13
    71a6:	f7 4f       	sbci	r31, 0xF7	; 247
    71a8:	60 81       	ld	r22, Z
    71aa:	70 e0       	ldi	r23, 0x00	; 0
    71ac:	60 53       	subi	r22, 0x30	; 48
    71ae:	71 09       	sbc	r23, r1
    71b0:	07 2e       	mov	r0, r23
    71b2:	00 0c       	add	r0, r0
    71b4:	88 0b       	sbc	r24, r24
    71b6:	99 0b       	sbc	r25, r25
    71b8:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    71bc:	a3 01       	movw	r20, r6
    71be:	92 01       	movw	r18, r4
    71c0:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    71c4:	9b 01       	movw	r18, r22
    71c6:	ac 01       	movw	r20, r24
    71c8:	c5 01       	movw	r24, r10
    71ca:	b4 01       	movw	r22, r8
    71cc:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    71d0:	4b 01       	movw	r8, r22
    71d2:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    71d4:	f3 94       	inc	r15
    71d6:	8c 81       	ldd	r24, Y+4	; 0x04
    71d8:	f8 16       	cp	r15, r24
    71da:	60 f2       	brcs	.-104    	; 0x7174 <_Z10gpshandlerv+0x3f8>
    71dc:	80 92 c6 08 	sts	0x08C6, r8
    71e0:	90 92 c7 08 	sts	0x08C7, r9
    71e4:	a0 92 c8 08 	sts	0x08C8, r10
    71e8:	b0 92 c9 08 	sts	0x08C9, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    71ec:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    71ee:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    71f0:	f0 e0       	ldi	r31, 0x00	; 0
    71f2:	ed 50       	subi	r30, 0x0D	; 13
    71f4:	f7 4f       	sbci	r31, 0xF7	; 247
    71f6:	61 81       	ldd	r22, Z+1	; 0x01
    71f8:	70 e0       	ldi	r23, 0x00	; 0
    71fa:	60 53       	subi	r22, 0x30	; 48
    71fc:	71 09       	sbc	r23, r1
    71fe:	07 2e       	mov	r0, r23
    7200:	00 0c       	add	r0, r0
    7202:	88 0b       	sbc	r24, r24
    7204:	99 0b       	sbc	r25, r25
    7206:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    720a:	2d ec       	ldi	r18, 0xCD	; 205
    720c:	3c ec       	ldi	r19, 0xCC	; 204
    720e:	4c ec       	ldi	r20, 0xCC	; 204
    7210:	5d e3       	ldi	r21, 0x3D	; 61
    7212:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    7216:	20 91 c6 08 	lds	r18, 0x08C6
    721a:	30 91 c7 08 	lds	r19, 0x08C7
    721e:	40 91 c8 08 	lds	r20, 0x08C8
    7222:	50 91 c9 08 	lds	r21, 0x08C9
    7226:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
    722a:	6b 01       	movw	r12, r22
    722c:	7c 01       	movw	r14, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    722e:	e1 2f       	mov	r30, r17
    7230:	f0 e0       	ldi	r31, 0x00	; 0
    7232:	ed 50       	subi	r30, 0x0D	; 13
    7234:	f7 4f       	sbci	r31, 0xF7	; 247
    7236:	82 81       	ldd	r24, Z+2	; 0x02
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	c0 97       	sbiw	r24, 0x30	; 48
    723c:	bc 01       	movw	r22, r24
    723e:	99 0f       	add	r25, r25
    7240:	88 0b       	sbc	r24, r24
    7242:	99 0b       	sbc	r25, r25
    7244:	0e 94 67 44 	call	0x88ce	; 0x88ce <__floatsisf>
    7248:	2a e0       	ldi	r18, 0x0A	; 10
    724a:	37 ed       	ldi	r19, 0xD7	; 215
    724c:	43 e2       	ldi	r20, 0x23	; 35
    724e:	5c e3       	ldi	r21, 0x3C	; 60
    7250:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    7254:	9b 01       	movw	r18, r22
    7256:	ac 01       	movw	r20, r24
    7258:	c7 01       	movw	r24, r14
    725a:	b6 01       	movw	r22, r12
    725c:	0e 94 65 43 	call	0x86ca	; 0x86ca <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    7260:	26 e5       	ldi	r18, 0x56	; 86
    7262:	3e e0       	ldi	r19, 0x0E	; 14
    7264:	4d ee       	ldi	r20, 0xED	; 237
    7266:	5f e3       	ldi	r21, 0x3F	; 63
    7268:	0e 94 80 45 	call	0x8b00	; 0x8b00 <__mulsf3>
    726c:	60 93 c6 08 	sts	0x08C6, r22
    7270:	70 93 c7 08 	sts	0x08C7, r23
    7274:	80 93 c8 08 	sts	0x08C8, r24
    7278:	90 93 c9 08 	sts	0x08C9, r25
		
		//date
		counter =19;
    727c:	83 e1       	ldi	r24, 0x13	; 19
    727e:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    7280:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    7282:	8b 81       	ldd	r24, Y+3	; 0x03
    7284:	87 30       	cpi	r24, 0x07	; 7
    7286:	80 f4       	brcc	.+32     	; 0x72a8 <_Z10gpshandlerv+0x52c>
		{
			if (gpsdata[counter] == ',')
    7288:	ec 81       	ldd	r30, Y+4	; 0x04
    728a:	f0 e0       	ldi	r31, 0x00	; 0
    728c:	ed 50       	subi	r30, 0x0D	; 13
    728e:	f7 4f       	sbci	r31, 0xF7	; 247
    7290:	80 81       	ld	r24, Z
    7292:	8c 32       	cpi	r24, 0x2C	; 44
    7294:	19 f4       	brne	.+6      	; 0x729c <_Z10gpshandlerv+0x520>
			{
				nichterreicht++;
    7296:	8b 81       	ldd	r24, Y+3	; 0x03
    7298:	8f 5f       	subi	r24, 0xFF	; 255
    729a:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    729c:	8c 81       	ldd	r24, Y+4	; 0x04
    729e:	8f 5f       	subi	r24, 0xFF	; 255
    72a0:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    72a2:	8b 81       	ldd	r24, Y+3	; 0x03
    72a4:	87 30       	cpi	r24, 0x07	; 7
    72a6:	80 f3       	brcs	.-32     	; 0x7288 <_Z10gpshandlerv+0x50c>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    72a8:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    72aa:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    72ac:	b0 e0       	ldi	r27, 0x00	; 0
    72ae:	ad 50       	subi	r26, 0x0D	; 13
    72b0:	b7 4f       	sbci	r27, 0xF7	; 247
    72b2:	8c 91       	ld	r24, X
    72b4:	88 0f       	add	r24, r24
    72b6:	80 56       	subi	r24, 0x60	; 96
    72b8:	28 2f       	mov	r18, r24
    72ba:	22 0f       	add	r18, r18
    72bc:	22 0f       	add	r18, r18
    72be:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    72c0:	f0 e0       	ldi	r31, 0x00	; 0
    72c2:	ed 50       	subi	r30, 0x0D	; 13
    72c4:	f7 4f       	sbci	r31, 0xF7	; 247
    72c6:	81 81       	ldd	r24, Z+1	; 0x01
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	c0 97       	sbiw	r24, 0x30	; 48
    72cc:	82 0f       	add	r24, r18
    72ce:	91 1d       	adc	r25, r1
    72d0:	80 93 c2 08 	sts	0x08C2, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    72d4:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    72d6:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    72d8:	b0 e0       	ldi	r27, 0x00	; 0
    72da:	ad 50       	subi	r26, 0x0D	; 13
    72dc:	b7 4f       	sbci	r27, 0xF7	; 247
    72de:	12 96       	adiw	r26, 0x02	; 2
    72e0:	8c 91       	ld	r24, X
    72e2:	88 0f       	add	r24, r24
    72e4:	80 56       	subi	r24, 0x60	; 96
    72e6:	28 2f       	mov	r18, r24
    72e8:	22 0f       	add	r18, r18
    72ea:	22 0f       	add	r18, r18
    72ec:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    72ee:	f0 e0       	ldi	r31, 0x00	; 0
    72f0:	ed 50       	subi	r30, 0x0D	; 13
    72f2:	f7 4f       	sbci	r31, 0xF7	; 247
    72f4:	83 81       	ldd	r24, Z+3	; 0x03
    72f6:	90 e0       	ldi	r25, 0x00	; 0
    72f8:	c0 97       	sbiw	r24, 0x30	; 48
    72fa:	82 0f       	add	r24, r18
    72fc:	91 1d       	adc	r25, r1
    72fe:	80 93 c1 08 	sts	0x08C1, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    7302:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    7304:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    7306:	b0 e0       	ldi	r27, 0x00	; 0
    7308:	ad 50       	subi	r26, 0x0D	; 13
    730a:	b7 4f       	sbci	r27, 0xF7	; 247
    730c:	14 96       	adiw	r26, 0x04	; 4
    730e:	8c 91       	ld	r24, X
    7310:	88 0f       	add	r24, r24
    7312:	80 56       	subi	r24, 0x60	; 96
    7314:	28 2f       	mov	r18, r24
    7316:	22 0f       	add	r18, r18
    7318:	22 0f       	add	r18, r18
    731a:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    731c:	f0 e0       	ldi	r31, 0x00	; 0
    731e:	ed 50       	subi	r30, 0x0D	; 13
    7320:	f7 4f       	sbci	r31, 0xF7	; 247
    7322:	85 81       	ldd	r24, Z+5	; 0x05
    7324:	90 e0       	ldi	r25, 0x00	; 0
    7326:	c0 97       	sbiw	r24, 0x30	; 48
    7328:	82 0f       	add	r24, r18
    732a:	91 1d       	adc	r25, r1
    732c:	80 93 c0 08 	sts	0x08C0, r24
		
		gpsstatus &= ~(1<<complete);
    7330:	80 91 3b 09 	lds	r24, 0x093B
    7334:	8b 7f       	andi	r24, 0xFB	; 251
    7336:	80 93 3b 09 	sts	0x093B, r24
    733a:	8f c0       	rjmp	.+286    	; 0x745a <_Z10gpshandlerv+0x6de>
	}
	else if ((gpsstatus&(1<<completenotvalid)))
    733c:	83 ff       	sbrs	r24, 3
    733e:	8d c0       	rjmp	.+282    	; 0x745a <_Z10gpshandlerv+0x6de>
	{
		if (gpsstatus&(1<<fix))
    7340:	88 23       	and	r24, r24
    7342:	1c f4       	brge	.+6      	; 0x734a <_Z10gpshandlerv+0x5ce>
		{
			gpsstatus &= ~(1<<fix);
    7344:	8f 77       	andi	r24, 0x7F	; 127
    7346:	80 93 3b 09 	sts	0x093B, r24
		}
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    734a:	e3 ef       	ldi	r30, 0xF3	; 243
    734c:	f8 e0       	ldi	r31, 0x08	; 8
    734e:	80 85       	ldd	r24, Z+8	; 0x08
    7350:	22 ed       	ldi	r18, 0xD2	; 210
    7352:	28 0f       	add	r18, r24
		if (gpsstatus&(1<<fix))
		{
			gpsstatus &= ~(1<<fix);
		}
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    7354:	87 81       	ldd	r24, Z+7	; 0x07
    7356:	88 0f       	add	r24, r24
    7358:	80 56       	subi	r24, 0x60	; 96
    735a:	98 2f       	mov	r25, r24
    735c:	99 0f       	add	r25, r25
    735e:	99 0f       	add	r25, r25
    7360:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    7362:	82 0f       	add	r24, r18
    7364:	80 93 c5 08 	sts	0x08C5, r24
    7368:	82 85       	ldd	r24, Z+10	; 0x0a
    736a:	20 ed       	ldi	r18, 0xD0	; 208
    736c:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    736e:	81 85       	ldd	r24, Z+9	; 0x09
    7370:	88 0f       	add	r24, r24
    7372:	80 56       	subi	r24, 0x60	; 96
    7374:	98 2f       	mov	r25, r24
    7376:	99 0f       	add	r25, r25
    7378:	99 0f       	add	r25, r25
    737a:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    737c:	82 0f       	add	r24, r18
    737e:	80 93 c4 08 	sts	0x08C4, r24
    7382:	84 85       	ldd	r24, Z+12	; 0x0c
    7384:	20 ed       	ldi	r18, 0xD0	; 208
    7386:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    7388:	83 85       	ldd	r24, Z+11	; 0x0b
    738a:	88 0f       	add	r24, r24
    738c:	80 56       	subi	r24, 0x60	; 96
    738e:	98 2f       	mov	r25, r24
    7390:	99 0f       	add	r25, r25
    7392:	99 0f       	add	r25, r25
    7394:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    7396:	82 0f       	add	r24, r18
    7398:	80 93 c3 08 	sts	0x08C3, r24
		
		volatile uint8_t counter = 19;
    739c:	83 e1       	ldi	r24, 0x13	; 19
    739e:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    73a0:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    73a2:	89 81       	ldd	r24, Y+1	; 0x01
    73a4:	87 30       	cpi	r24, 0x07	; 7
    73a6:	80 f4       	brcc	.+32     	; 0x73c8 <_Z10gpshandlerv+0x64c>
		{
			if (gpsdata[counter] == ',')
    73a8:	ea 81       	ldd	r30, Y+2	; 0x02
    73aa:	f0 e0       	ldi	r31, 0x00	; 0
    73ac:	ed 50       	subi	r30, 0x0D	; 13
    73ae:	f7 4f       	sbci	r31, 0xF7	; 247
    73b0:	80 81       	ld	r24, Z
    73b2:	8c 32       	cpi	r24, 0x2C	; 44
    73b4:	19 f4       	brne	.+6      	; 0x73bc <_Z10gpshandlerv+0x640>
			{
				nichterreicht++;
    73b6:	89 81       	ldd	r24, Y+1	; 0x01
    73b8:	8f 5f       	subi	r24, 0xFF	; 255
    73ba:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    73bc:	8a 81       	ldd	r24, Y+2	; 0x02
    73be:	8f 5f       	subi	r24, 0xFF	; 255
    73c0:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    73c2:	89 81       	ldd	r24, Y+1	; 0x01
    73c4:	87 30       	cpi	r24, 0x07	; 7
    73c6:	80 f3       	brcs	.-32     	; 0x73a8 <_Z10gpshandlerv+0x62c>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    73c8:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    73ca:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    73cc:	b0 e0       	ldi	r27, 0x00	; 0
    73ce:	ad 50       	subi	r26, 0x0D	; 13
    73d0:	b7 4f       	sbci	r27, 0xF7	; 247
    73d2:	8c 91       	ld	r24, X
    73d4:	88 0f       	add	r24, r24
    73d6:	80 56       	subi	r24, 0x60	; 96
    73d8:	28 2f       	mov	r18, r24
    73da:	22 0f       	add	r18, r18
    73dc:	22 0f       	add	r18, r18
    73de:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    73e0:	f0 e0       	ldi	r31, 0x00	; 0
    73e2:	ed 50       	subi	r30, 0x0D	; 13
    73e4:	f7 4f       	sbci	r31, 0xF7	; 247
    73e6:	81 81       	ldd	r24, Z+1	; 0x01
    73e8:	90 e0       	ldi	r25, 0x00	; 0
    73ea:	c0 97       	sbiw	r24, 0x30	; 48
    73ec:	82 0f       	add	r24, r18
    73ee:	91 1d       	adc	r25, r1
    73f0:	80 93 c2 08 	sts	0x08C2, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    73f4:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    73f6:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    73f8:	b0 e0       	ldi	r27, 0x00	; 0
    73fa:	ad 50       	subi	r26, 0x0D	; 13
    73fc:	b7 4f       	sbci	r27, 0xF7	; 247
    73fe:	12 96       	adiw	r26, 0x02	; 2
    7400:	8c 91       	ld	r24, X
    7402:	88 0f       	add	r24, r24
    7404:	80 56       	subi	r24, 0x60	; 96
    7406:	28 2f       	mov	r18, r24
    7408:	22 0f       	add	r18, r18
    740a:	22 0f       	add	r18, r18
    740c:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    740e:	f0 e0       	ldi	r31, 0x00	; 0
    7410:	ed 50       	subi	r30, 0x0D	; 13
    7412:	f7 4f       	sbci	r31, 0xF7	; 247
    7414:	83 81       	ldd	r24, Z+3	; 0x03
    7416:	90 e0       	ldi	r25, 0x00	; 0
    7418:	c0 97       	sbiw	r24, 0x30	; 48
    741a:	82 0f       	add	r24, r18
    741c:	91 1d       	adc	r25, r1
    741e:	80 93 c1 08 	sts	0x08C1, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    7422:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    7424:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    7426:	b0 e0       	ldi	r27, 0x00	; 0
    7428:	ad 50       	subi	r26, 0x0D	; 13
    742a:	b7 4f       	sbci	r27, 0xF7	; 247
    742c:	14 96       	adiw	r26, 0x04	; 4
    742e:	8c 91       	ld	r24, X
    7430:	88 0f       	add	r24, r24
    7432:	80 56       	subi	r24, 0x60	; 96
    7434:	28 2f       	mov	r18, r24
    7436:	22 0f       	add	r18, r18
    7438:	22 0f       	add	r18, r18
    743a:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    743c:	f0 e0       	ldi	r31, 0x00	; 0
    743e:	ed 50       	subi	r30, 0x0D	; 13
    7440:	f7 4f       	sbci	r31, 0xF7	; 247
    7442:	85 81       	ldd	r24, Z+5	; 0x05
    7444:	90 e0       	ldi	r25, 0x00	; 0
    7446:	c0 97       	sbiw	r24, 0x30	; 48
    7448:	82 0f       	add	r24, r18
    744a:	91 1d       	adc	r25, r1
    744c:	80 93 c0 08 	sts	0x08C0, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    7450:	80 91 3b 09 	lds	r24, 0x093B
    7454:	87 7f       	andi	r24, 0xF7	; 247
    7456:	80 93 3b 09 	sts	0x093B, r24
	}
	//fix status pruefen, wenn implementiert
}
    745a:	0f 90       	pop	r0
    745c:	0f 90       	pop	r0
    745e:	0f 90       	pop	r0
    7460:	0f 90       	pop	r0
    7462:	df 91       	pop	r29
    7464:	cf 91       	pop	r28
    7466:	1f 91       	pop	r17
    7468:	0f 91       	pop	r16
    746a:	ff 90       	pop	r15
    746c:	ef 90       	pop	r14
    746e:	df 90       	pop	r13
    7470:	cf 90       	pop	r12
    7472:	bf 90       	pop	r11
    7474:	af 90       	pop	r10
    7476:	9f 90       	pop	r9
    7478:	8f 90       	pop	r8
    747a:	7f 90       	pop	r7
    747c:	6f 90       	pop	r6
    747e:	5f 90       	pop	r5
    7480:	4f 90       	pop	r4
    7482:	08 95       	ret

00007484 <main>:
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
}

int main(void)
{
    7484:	cf 93       	push	r28
    7486:	df 93       	push	r29
    7488:	cd b7       	in	r28, 0x3d	; 61
    748a:	de b7       	in	r29, 0x3e	; 62
    748c:	65 97       	sbiw	r28, 0x15	; 21
    748e:	0f b6       	in	r0, 0x3f	; 63
    7490:	f8 94       	cli
    7492:	de bf       	out	0x3e, r29	; 62
    7494:	0f be       	out	0x3f, r0	; 63
    7496:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    7498:	0e 94 ca 31 	call	0x6394	; 0x6394 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    749c:	8a e2       	ldi	r24, 0x2A	; 42
    749e:	90 e0       	ldi	r25, 0x00	; 0
    74a0:	0e 94 75 4c 	call	0x98ea	; 0x98ea <malloc>
    74a4:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    74a6:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    74a8:	8c e8       	ldi	r24, 0x8C	; 140
    74aa:	9a e0       	ldi	r25, 0x0A	; 10
    74ac:	90 8f       	std	Z+24, r25	; 0x18
    74ae:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    74b0:	8d e8       	ldi	r24, 0x8D	; 141
    74b2:	9e e0       	ldi	r25, 0x0E	; 14
    74b4:	92 8f       	std	Z+26, r25	; 0x1a
    74b6:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    74b8:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    74ba:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    74bc:	81 e0       	ldi	r24, 0x01	; 1
    74be:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    74c0:	8d ef       	ldi	r24, 0xFD	; 253
    74c2:	93 e0       	ldi	r25, 0x03	; 3
    74c4:	91 83       	std	Z+1, r25	; 0x01
    74c6:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    74c8:	85 e5       	ldi	r24, 0x55	; 85
    74ca:	98 e6       	ldi	r25, 0x68	; 104
    74cc:	a2 e7       	ldi	r26, 0x72	; 114
    74ce:	b0 e0       	ldi	r27, 0x00	; 0
    74d0:	89 83       	std	Y+1, r24	; 0x01
    74d2:	9a 83       	std	Y+2, r25	; 0x02
    74d4:	ab 83       	std	Y+3, r26	; 0x03
    74d6:	bc 83       	std	Y+4, r27	; 0x04
    74d8:	9e 01       	movw	r18, r28
    74da:	2f 5f       	subi	r18, 0xFF	; 255
    74dc:	3f 4f       	sbci	r19, 0xFF	; 255
    74de:	cf 01       	movw	r24, r30
    74e0:	4b 96       	adiw	r24, 0x1b	; 27
    74e2:	be 01       	movw	r22, r28
    74e4:	65 5f       	subi	r22, 0xF5	; 245
    74e6:	7f 4f       	sbci	r23, 0xFF	; 255
    74e8:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    74ea:	40 e2       	ldi	r20, 0x20	; 32
    74ec:	50 2f       	mov	r21, r16
    74ee:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    74f0:	54 30       	cpi	r21, 0x04	; 4
    74f2:	28 f4       	brcc	.+10     	; 0x74fe <main+0x7a>
			{
				name[i] = na[i];
    74f4:	d8 01       	movw	r26, r16
    74f6:	5c 91       	ld	r21, X
    74f8:	dc 01       	movw	r26, r24
    74fa:	5c 93       	st	X, r21
    74fc:	02 c0       	rjmp	.+4      	; 0x7502 <main+0x7e>
			}
			else
			{
				name[i] = ' ';
    74fe:	dc 01       	movw	r26, r24
    7500:	4c 93       	st	X, r20
    7502:	0f 5f       	subi	r16, 0xFF	; 255
    7504:	1f 4f       	sbci	r17, 0xFF	; 255
    7506:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    7508:	06 17       	cp	r16, r22
    750a:	17 07       	cpc	r17, r23
    750c:	79 f7       	brne	.-34     	; 0x74ec <main+0x68>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    750e:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    7510:	83 e0       	ldi	r24, 0x03	; 3
    7512:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    7514:	fa 83       	std	Y+2, r31	; 0x02
    7516:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    7518:	89 e2       	ldi	r24, 0x29	; 41
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	0e 94 75 4c 	call	0x98ea	; 0x98ea <malloc>
    7520:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    7522:	fc 01       	movw	r30, r24
    7524:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    7526:	8c e8       	ldi	r24, 0x8C	; 140
    7528:	9a e0       	ldi	r25, 0x0A	; 10
    752a:	90 8f       	std	Z+24, r25	; 0x18
    752c:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    752e:	8d e8       	ldi	r24, 0x8D	; 141
    7530:	9e e0       	ldi	r25, 0x0E	; 14
    7532:	92 8f       	std	Z+26, r25	; 0x1a
    7534:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    7536:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    7538:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    753a:	81 e0       	ldi	r24, 0x01	; 1
    753c:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    753e:	89 e0       	ldi	r24, 0x09	; 9
    7540:	94 e0       	ldi	r25, 0x04	; 4
    7542:	91 83       	std	Z+1, r25	; 0x01
    7544:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    7546:	86 e0       	ldi	r24, 0x06	; 6
    7548:	eb e1       	ldi	r30, 0x1B	; 27
    754a:	f2 e0       	ldi	r31, 0x02	; 2
    754c:	de 01       	movw	r26, r28
    754e:	1d 96       	adiw	r26, 0x0d	; 13
    7550:	01 90       	ld	r0, Z+
    7552:	0d 92       	st	X+, r0
    7554:	8a 95       	dec	r24
    7556:	e1 f7       	brne	.-8      	; 0x7550 <main+0xcc>
    7558:	ce 01       	movw	r24, r28
    755a:	0d 96       	adiw	r24, 0x0d	; 13
    755c:	d8 01       	movw	r26, r16
    755e:	5b 96       	adiw	r26, 0x1b	; 27
    7560:	ae 01       	movw	r20, r28
    7562:	49 5e       	subi	r20, 0xE9	; 233
    7564:	5f 4f       	sbci	r21, 0xFF	; 255
    7566:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    7568:	20 e2       	ldi	r18, 0x20	; 32
    756a:	3e 2f       	mov	r19, r30
    756c:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    756e:	36 30       	cpi	r19, 0x06	; 6
    7570:	18 f4       	brcc	.+6      	; 0x7578 <main+0xf4>
			{
				name[i] = na[i];
    7572:	30 81       	ld	r19, Z
    7574:	3c 93       	st	X, r19
    7576:	01 c0       	rjmp	.+2      	; 0x757a <main+0xf6>
			}
			else
			{
				name[i] = ' ';
    7578:	2c 93       	st	X, r18
    757a:	31 96       	adiw	r30, 0x01	; 1
    757c:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    757e:	e4 17       	cp	r30, r20
    7580:	f5 07       	cpc	r31, r21
    7582:	99 f7       	brne	.-26     	; 0x756a <main+0xe6>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    7584:	0e 94 ad 30 	call	0x615a	; 0x615a <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    7588:	1c 83       	std	Y+4, r17	; 0x04
    758a:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    758c:	89 e2       	ldi	r24, 0x29	; 41
    758e:	90 e0       	ldi	r25, 0x00	; 0
    7590:	0e 94 75 4c 	call	0x98ea	; 0x98ea <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    7594:	dc 01       	movw	r26, r24
    7596:	56 96       	adiw	r26, 0x16	; 22
    7598:	1c 92       	st	X, r1
    759a:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    759c:	2c e8       	ldi	r18, 0x8C	; 140
    759e:	3a e0       	ldi	r19, 0x0A	; 10
    75a0:	58 96       	adiw	r26, 0x18	; 24
    75a2:	3c 93       	st	X, r19
    75a4:	2e 93       	st	-X, r18
    75a6:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    75a8:	2d e8       	ldi	r18, 0x8D	; 141
    75aa:	3e e0       	ldi	r19, 0x0E	; 14
    75ac:	5a 96       	adiw	r26, 0x1a	; 26
    75ae:	3c 93       	st	X, r19
    75b0:	2e 93       	st	-X, r18
    75b2:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    75b4:	95 96       	adiw	r26, 0x25	; 37
    75b6:	1c 92       	st	X, r1
    75b8:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    75ba:	96 96       	adiw	r26, 0x26	; 38
    75bc:	1c 92       	st	X, r1
    75be:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    75c0:	21 e0       	ldi	r18, 0x01	; 1
    75c2:	98 96       	adiw	r26, 0x28	; 40
    75c4:	2c 93       	st	X, r18
    75c6:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    75c8:	25 e1       	ldi	r18, 0x15	; 21
    75ca:	34 e0       	ldi	r19, 0x04	; 4
    75cc:	2d 93       	st	X+, r18
    75ce:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    75d0:	28 e0       	ldi	r18, 0x08	; 8
    75d2:	e1 e2       	ldi	r30, 0x21	; 33
    75d4:	f2 e0       	ldi	r31, 0x02	; 2
    75d6:	de 01       	movw	r26, r28
    75d8:	1d 96       	adiw	r26, 0x0d	; 13
    75da:	01 90       	ld	r0, Z+
    75dc:	0d 92       	st	X+, r0
    75de:	2a 95       	dec	r18
    75e0:	e1 f7       	brne	.-8      	; 0x75da <main+0x156>
    75e2:	9e 01       	movw	r18, r28
    75e4:	23 5f       	subi	r18, 0xF3	; 243
    75e6:	3f 4f       	sbci	r19, 0xFF	; 255
    75e8:	dc 01       	movw	r26, r24
    75ea:	5b 96       	adiw	r26, 0x1b	; 27
    75ec:	be 01       	movw	r22, r28
    75ee:	69 5e       	subi	r22, 0xE9	; 233
    75f0:	7f 4f       	sbci	r23, 0xFF	; 255
    75f2:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    75f4:	40 e2       	ldi	r20, 0x20	; 32
    75f6:	5e 2f       	mov	r21, r30
    75f8:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    75fa:	58 30       	cpi	r21, 0x08	; 8
    75fc:	18 f4       	brcc	.+6      	; 0x7604 <main+0x180>
			{
				name[i] = na[i];
    75fe:	50 81       	ld	r21, Z
    7600:	5c 93       	st	X, r21
    7602:	01 c0       	rjmp	.+2      	; 0x7606 <main+0x182>
			}
			else
			{
				name[i] = ' ';
    7604:	4c 93       	st	X, r20
    7606:	31 96       	adiw	r30, 0x01	; 1
    7608:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    760a:	e6 17       	cp	r30, r22
    760c:	f7 07       	cpc	r31, r23
    760e:	99 f7       	brne	.-26     	; 0x75f6 <main+0x172>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    7610:	9e 83       	std	Y+6, r25	; 0x06
    7612:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    7614:	89 e2       	ldi	r24, 0x29	; 41
    7616:	90 e0       	ldi	r25, 0x00	; 0
    7618:	0e 94 75 4c 	call	0x98ea	; 0x98ea <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    761c:	fc 01       	movw	r30, r24
    761e:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    7620:	2c e8       	ldi	r18, 0x8C	; 140
    7622:	3a e0       	ldi	r19, 0x0A	; 10
    7624:	30 8f       	std	Z+24, r19	; 0x18
    7626:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    7628:	2d e8       	ldi	r18, 0x8D	; 141
    762a:	3e e0       	ldi	r19, 0x0E	; 14
    762c:	32 8f       	std	Z+26, r19	; 0x1a
    762e:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    7630:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    7632:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    7634:	21 e0       	ldi	r18, 0x01	; 1
    7636:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    7638:	21 e2       	ldi	r18, 0x21	; 33
    763a:	34 e0       	ldi	r19, 0x04	; 4
    763c:	31 83       	std	Z+1, r19	; 0x01
    763e:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    7640:	29 e0       	ldi	r18, 0x09	; 9
    7642:	e1 e2       	ldi	r30, 0x21	; 33
    7644:	f3 e0       	ldi	r31, 0x03	; 3
    7646:	de 01       	movw	r26, r28
    7648:	1d 96       	adiw	r26, 0x0d	; 13
    764a:	01 90       	ld	r0, Z+
    764c:	0d 92       	st	X+, r0
    764e:	2a 95       	dec	r18
    7650:	e1 f7       	brne	.-8      	; 0x764a <main+0x1c6>
    7652:	9e 01       	movw	r18, r28
    7654:	23 5f       	subi	r18, 0xF3	; 243
    7656:	3f 4f       	sbci	r19, 0xFF	; 255
    7658:	dc 01       	movw	r26, r24
    765a:	5b 96       	adiw	r26, 0x1b	; 27
    765c:	be 01       	movw	r22, r28
    765e:	69 5e       	subi	r22, 0xE9	; 233
    7660:	7f 4f       	sbci	r23, 0xFF	; 255
    7662:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    7664:	40 e2       	ldi	r20, 0x20	; 32
    7666:	5e 2f       	mov	r21, r30
    7668:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    766a:	59 30       	cpi	r21, 0x09	; 9
    766c:	18 f4       	brcc	.+6      	; 0x7674 <main+0x1f0>
			{
				name[i] = na[i];
    766e:	50 81       	ld	r21, Z
    7670:	5c 93       	st	X, r21
    7672:	01 c0       	rjmp	.+2      	; 0x7676 <main+0x1f2>
			}
			else
			{
				name[i] = ' ';
    7674:	4c 93       	st	X, r20
    7676:	31 96       	adiw	r30, 0x01	; 1
    7678:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    767a:	e6 17       	cp	r30, r22
    767c:	f7 07       	cpc	r31, r23
    767e:	99 f7       	brne	.-26     	; 0x7666 <main+0x1e2>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 5;
    7680:	25 e0       	ldi	r18, 0x05	; 5
    7682:	dc 01       	movw	r26, r24
    7684:	97 96       	adiw	r26, 0x27	; 39
    7686:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    7688:	98 87       	std	Y+8, r25	; 0x08
    768a:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    768c:	89 e2       	ldi	r24, 0x29	; 41
    768e:	90 e0       	ldi	r25, 0x00	; 0
    7690:	0e 94 75 4c 	call	0x98ea	; 0x98ea <malloc>
    7694:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    7696:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    7698:	0f 2e       	mov	r0, r31
    769a:	fc e8       	ldi	r31, 0x8C	; 140
    769c:	cf 2e       	mov	r12, r31
    769e:	fa e0       	ldi	r31, 0x0A	; 10
    76a0:	df 2e       	mov	r13, r31
    76a2:	f0 2d       	mov	r31, r0
    76a4:	d0 8e       	std	Z+24, r13	; 0x18
    76a6:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    76a8:	0f 2e       	mov	r0, r31
    76aa:	fd e8       	ldi	r31, 0x8D	; 141
    76ac:	ef 2e       	mov	r14, r31
    76ae:	fe e0       	ldi	r31, 0x0E	; 14
    76b0:	ff 2e       	mov	r15, r31
    76b2:	f0 2d       	mov	r31, r0
    76b4:	f2 8e       	std	Z+26, r15	; 0x1a
    76b6:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    76b8:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    76ba:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    76bc:	11 e0       	ldi	r17, 0x01	; 1
    76be:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    76c0:	85 e4       	ldi	r24, 0x45	; 69
    76c2:	94 e0       	ldi	r25, 0x04	; 4
    76c4:	91 83       	std	Z+1, r25	; 0x01
    76c6:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    76c8:	fa 87       	std	Y+10, r31	; 0x0a
    76ca:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    76cc:	89 e2       	ldi	r24, 0x29	; 41
    76ce:	90 e0       	ldi	r25, 0x00	; 0
    76d0:	0e 94 75 4c 	call	0x98ea	; 0x98ea <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    76d4:	fc 01       	movw	r30, r24
    76d6:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    76d8:	d0 8e       	std	Z+24, r13	; 0x18
    76da:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    76dc:	f2 8e       	std	Z+26, r15	; 0x1a
    76de:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    76e0:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    76e2:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    76e4:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    76e6:	29 e3       	ldi	r18, 0x39	; 57
    76e8:	34 e0       	ldi	r19, 0x04	; 4
    76ea:	31 83       	std	Z+1, r19	; 0x01
    76ec:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    76ee:	26 e0       	ldi	r18, 0x06	; 6
    76f0:	ea e2       	ldi	r30, 0x2A	; 42
    76f2:	f3 e0       	ldi	r31, 0x03	; 3
    76f4:	de 01       	movw	r26, r28
    76f6:	1d 96       	adiw	r26, 0x0d	; 13
    76f8:	01 90       	ld	r0, Z+
    76fa:	0d 92       	st	X+, r0
    76fc:	2a 95       	dec	r18
    76fe:	e1 f7       	brne	.-8      	; 0x76f8 <main+0x274>
    7700:	9e 01       	movw	r18, r28
    7702:	23 5f       	subi	r18, 0xF3	; 243
    7704:	3f 4f       	sbci	r19, 0xFF	; 255
    7706:	dc 01       	movw	r26, r24
    7708:	5b 96       	adiw	r26, 0x1b	; 27
    770a:	be 01       	movw	r22, r28
    770c:	69 5e       	subi	r22, 0xE9	; 233
    770e:	7f 4f       	sbci	r23, 0xFF	; 255
    7710:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    7712:	40 e2       	ldi	r20, 0x20	; 32
    7714:	5e 2f       	mov	r21, r30
    7716:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    7718:	56 30       	cpi	r21, 0x06	; 6
    771a:	18 f4       	brcc	.+6      	; 0x7722 <main+0x29e>
			{
				name[i] = na[i];
    771c:	50 81       	ld	r21, Z
    771e:	5c 93       	st	X, r21
    7720:	01 c0       	rjmp	.+2      	; 0x7724 <main+0x2a0>
			}
			else
			{
				name[i] = ' ';
    7722:	4c 93       	st	X, r20
    7724:	31 96       	adiw	r30, 0x01	; 1
    7726:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    7728:	e6 17       	cp	r30, r22
    772a:	f7 07       	cpc	r31, r23
    772c:	99 f7       	brne	.-26     	; 0x7714 <main+0x290>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    772e:	dc 01       	movw	r26, r24
    7730:	98 96       	adiw	r26, 0x28	; 40
    7732:	1c 92       	st	X, r1
    7734:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    7736:	25 e0       	ldi	r18, 0x05	; 5
    7738:	97 96       	adiw	r26, 0x27	; 39
    773a:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    773c:	9c 87       	std	Y+12, r25	; 0x0c
    773e:	8b 87       	std	Y+11, r24	; 0x0b
	
	druck.bmp180_getcalibration();
    7740:	8c e4       	ldi	r24, 0x4C	; 76
    7742:	99 e0       	ldi	r25, 0x09	; 9
    7744:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN6BMP18021bmp180_getcalibrationEv>
	//speichern der Werte und per hand rechnen
	
	
	while (1) 
    {
		tastaturhandler(Folien[position],Tastatur.unified());
    7748:	80 e8       	ldi	r24, 0x80	; 128
    774a:	9a e0       	ldi	r25, 0x0A	; 10
    774c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN9Interface7unifiedEv>
    7750:	e0 91 3f 09 	lds	r30, 0x093F
    7754:	f0 e0       	ldi	r31, 0x00	; 0
    7756:	ee 0f       	add	r30, r30
    7758:	ff 1f       	adc	r31, r31
    775a:	21 e0       	ldi	r18, 0x01	; 1
    775c:	30 e0       	ldi	r19, 0x00	; 0
    775e:	2c 0f       	add	r18, r28
    7760:	3d 1f       	adc	r19, r29
    7762:	e2 0f       	add	r30, r18
    7764:	f3 1f       	adc	r31, r19
    7766:	68 2f       	mov	r22, r24
    7768:	80 81       	ld	r24, Z
    776a:	91 81       	ldd	r25, Z+1	; 0x01
    776c:	0e 94 1e 33 	call	0x663c	; 0x663c <_Z15tastaturhandlerP7monitorh>
		maininterupthandler(Folien[position]);
    7770:	e0 91 3f 09 	lds	r30, 0x093F
    7774:	f0 e0       	ldi	r31, 0x00	; 0
    7776:	ee 0f       	add	r30, r30
    7778:	ff 1f       	adc	r31, r31
    777a:	81 e0       	ldi	r24, 0x01	; 1
    777c:	90 e0       	ldi	r25, 0x00	; 0
    777e:	8c 0f       	add	r24, r28
    7780:	9d 1f       	adc	r25, r29
    7782:	e8 0f       	add	r30, r24
    7784:	f9 1f       	adc	r31, r25
    7786:	80 81       	ld	r24, Z
    7788:	91 81       	ldd	r25, Z+1	; 0x01
    778a:	0e 94 b9 33 	call	0x6772	; 0x6772 <_Z19maininterupthandlerP7monitor>
		gpshandler();
    778e:	f6 da       	rcall	.-2580   	; 0x6d7c <_Z10gpshandlerv>
    }
    7790:	db cf       	rjmp	.-74     	; 0x7748 <main+0x2c4>

00007792 <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    7792:	2f 92       	push	r2
    7794:	3f 92       	push	r3
    7796:	4f 92       	push	r4
    7798:	5f 92       	push	r5
    779a:	6f 92       	push	r6
    779c:	7f 92       	push	r7
    779e:	8f 92       	push	r8
    77a0:	9f 92       	push	r9
    77a2:	af 92       	push	r10
    77a4:	bf 92       	push	r11
    77a6:	cf 92       	push	r12
    77a8:	df 92       	push	r13
    77aa:	ef 92       	push	r14
    77ac:	ff 92       	push	r15
    77ae:	0f 93       	push	r16
    77b0:	1f 93       	push	r17
    77b2:	cf 93       	push	r28
    77b4:	df 93       	push	r29
    77b6:	cd b7       	in	r28, 0x3d	; 61
    77b8:	de b7       	in	r29, 0x3e	; 62
    77ba:	66 97       	sbiw	r28, 0x16	; 22
    77bc:	0f b6       	in	r0, 0x3f	; 63
    77be:	f8 94       	cli
    77c0:	de bf       	out	0x3e, r29	; 62
    77c2:	0f be       	out	0x3f, r0	; 63
    77c4:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    77c6:	8d e8       	ldi	r24, 0x8D	; 141
    77c8:	9e e0       	ldi	r25, 0x0E	; 14
    77ca:	78 d7       	rcall	.+3824   	; 0x86bc <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    77cc:	8c e8       	ldi	r24, 0x8C	; 140
    77ce:	9a e0       	ldi	r25, 0x0A	; 10
    77d0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    77d4:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    77d6:	0f 2e       	mov	r0, r31
    77d8:	ff e0       	ldi	r31, 0x0F	; 15
    77da:	7f 2e       	mov	r7, r31
    77dc:	f0 2d       	mov	r31, r0
    77de:	ce 01       	movw	r24, r28
    77e0:	01 96       	adiw	r24, 0x01	; 1
    77e2:	2c 01       	movw	r4, r24
    77e4:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    77e6:	8d 8b       	std	Y+21, r24	; 0x15
    77e8:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    77ea:	0f 2e       	mov	r0, r31
    77ec:	fd e8       	ldi	r31, 0x8D	; 141
    77ee:	cf 2e       	mov	r12, r31
    77f0:	fe e0       	ldi	r31, 0x0E	; 14
    77f2:	df 2e       	mov	r13, r31
    77f4:	f0 2d       	mov	r31, r0
    77f6:	0f 2e       	mov	r0, r31
    77f8:	fd ec       	ldi	r31, 0xCD	; 205
    77fa:	8f 2e       	mov	r8, r31
    77fc:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    77fe:	68 94       	set
    7800:	ee 24       	eor	r14, r14
    7802:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    7804:	0f 2e       	mov	r0, r31
    7806:	fe e2       	ldi	r31, 0x2E	; 46
    7808:	6f 2e       	mov	r6, r31
    780a:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    780c:	e0 e3       	ldi	r30, 0x30	; 48
    780e:	f3 e0       	ldi	r31, 0x03	; 3
    7810:	d2 01       	movw	r26, r4
    7812:	87 2d       	mov	r24, r7
    7814:	01 90       	ld	r0, Z+
    7816:	0d 92       	st	X+, r0
    7818:	8a 95       	dec	r24
    781a:	e1 f7       	brne	.-8      	; 0x7814 <_Z13uhreinstellenv+0x82>
    781c:	52 01       	movw	r10, r4
    781e:	12 01       	movw	r2, r4
    7820:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    7822:	f1 01       	movw	r30, r2
    7824:	61 91       	ld	r22, Z+
    7826:	1f 01       	movw	r2, r30
    7828:	2f 2d       	mov	r18, r15
    782a:	41 2f       	mov	r20, r17
    782c:	8c e8       	ldi	r24, 0x8C	; 140
    782e:	9a e0       	ldi	r25, 0x0A	; 10
    7830:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7834:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    7836:	14 35       	cpi	r17, 0x54	; 84
    7838:	a1 f7       	brne	.-24     	; 0x7822 <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    783a:	e2 e5       	ldi	r30, 0x52	; 82
    783c:	f2 e0       	ldi	r31, 0x02	; 2
    783e:	d2 01       	movw	r26, r4
    7840:	87 2d       	mov	r24, r7
    7842:	01 90       	ld	r0, Z+
    7844:	0d 92       	st	X+, r0
    7846:	8a 95       	dec	r24
    7848:	e1 f7       	brne	.-8      	; 0x7842 <_Z13uhreinstellenv+0xb0>
    784a:	2d 88       	ldd	r2, Y+21	; 0x15
    784c:	3e 88       	ldd	r3, Y+22	; 0x16
    784e:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    7850:	f1 01       	movw	r30, r2
    7852:	61 91       	ld	r22, Z+
    7854:	1f 01       	movw	r2, r30
    7856:	28 e0       	ldi	r18, 0x08	; 8
    7858:	41 2f       	mov	r20, r17
    785a:	8c e8       	ldi	r24, 0x8C	; 140
    785c:	9a e0       	ldi	r25, 0x0A	; 10
    785e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7862:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    7864:	14 35       	cpi	r17, 0x54	; 84
    7866:	a1 f7       	brne	.-24     	; 0x7850 <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    7868:	f6 01       	movw	r30, r12
    786a:	90 89       	ldd	r25, Z+16	; 0x10
    786c:	98 9d       	mul	r25, r8
    786e:	81 2d       	mov	r24, r1
    7870:	11 24       	eor	r1, r1
    7872:	86 95       	lsr	r24
    7874:	86 95       	lsr	r24
    7876:	86 95       	lsr	r24
    7878:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    787a:	88 0f       	add	r24, r24
    787c:	28 2f       	mov	r18, r24
    787e:	22 0f       	add	r18, r18
    7880:	22 0f       	add	r18, r18
    7882:	82 0f       	add	r24, r18
    7884:	98 1b       	sub	r25, r24
    7886:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    7888:	fa e3       	ldi	r31, 0x3A	; 58
    788a:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    788c:	f6 01       	movw	r30, r12
    788e:	91 89       	ldd	r25, Z+17	; 0x11
    7890:	98 9d       	mul	r25, r8
    7892:	81 2d       	mov	r24, r1
    7894:	11 24       	eor	r1, r1
    7896:	86 95       	lsr	r24
    7898:	86 95       	lsr	r24
    789a:	86 95       	lsr	r24
    789c:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    789e:	88 0f       	add	r24, r24
    78a0:	28 2f       	mov	r18, r24
    78a2:	22 0f       	add	r18, r18
    78a4:	22 0f       	add	r18, r18
    78a6:	82 0f       	add	r24, r18
    78a8:	98 1b       	sub	r25, r24
    78aa:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    78ac:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    78ae:	94 89       	ldd	r25, Z+20	; 0x14
    78b0:	98 9d       	mul	r25, r8
    78b2:	81 2d       	mov	r24, r1
    78b4:	11 24       	eor	r1, r1
    78b6:	86 95       	lsr	r24
    78b8:	86 95       	lsr	r24
    78ba:	86 95       	lsr	r24
    78bc:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    78be:	88 0f       	add	r24, r24
    78c0:	28 2f       	mov	r18, r24
    78c2:	22 0f       	add	r18, r18
    78c4:	22 0f       	add	r18, r18
    78c6:	82 0f       	add	r24, r18
    78c8:	98 1b       	sub	r25, r24
    78ca:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    78cc:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    78ce:	96 89       	ldd	r25, Z+22	; 0x16
    78d0:	98 9d       	mul	r25, r8
    78d2:	81 2d       	mov	r24, r1
    78d4:	11 24       	eor	r1, r1
    78d6:	86 95       	lsr	r24
    78d8:	86 95       	lsr	r24
    78da:	86 95       	lsr	r24
    78dc:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    78de:	88 0f       	add	r24, r24
    78e0:	28 2f       	mov	r18, r24
    78e2:	22 0f       	add	r18, r18
    78e4:	22 0f       	add	r18, r18
    78e6:	82 0f       	add	r24, r18
    78e8:	98 1b       	sub	r25, r24
    78ea:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    78ec:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    78ee:	97 89       	ldd	r25, Z+23	; 0x17
    78f0:	98 9d       	mul	r25, r8
    78f2:	81 2d       	mov	r24, r1
    78f4:	11 24       	eor	r1, r1
    78f6:	86 95       	lsr	r24
    78f8:	86 95       	lsr	r24
    78fa:	86 95       	lsr	r24
    78fc:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    78fe:	88 0f       	add	r24, r24
    7900:	28 2f       	mov	r18, r24
    7902:	22 0f       	add	r18, r18
    7904:	22 0f       	add	r18, r18
    7906:	82 0f       	add	r24, r18
    7908:	98 1b       	sub	r25, r24
    790a:	9e 87       	std	Y+14, r25	; 0x0e
    790c:	0d 89       	ldd	r16, Y+21	; 0x15
    790e:	1e 89       	ldd	r17, Y+22	; 0x16
    7910:	2f 2c       	mov	r2, r15
    7912:	33 24       	eor	r3, r3
    7914:	33 94       	inc	r3
    7916:	05 c0       	rjmp	.+10     	; 0x7922 <_Z13uhreinstellenv+0x190>
    7918:	33 94       	inc	r3
    791a:	0f 5f       	subi	r16, 0xFF	; 255
    791c:	1f 4f       	sbci	r17, 0xFF	; 255
    791e:	f0 e1       	ldi	r31, 0x10	; 16
    7920:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    7922:	83 e0       	ldi	r24, 0x03	; 3
    7924:	38 16       	cp	r3, r24
    7926:	61 f0       	breq	.+24     	; 0x7940 <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    7928:	20 e1       	ldi	r18, 0x10	; 16
    792a:	42 2d       	mov	r20, r2
    792c:	f8 01       	movw	r30, r16
    792e:	60 81       	ld	r22, Z
    7930:	8c e8       	ldi	r24, 0x8C	; 140
    7932:	9a e0       	ldi	r25, 0x0A	; 10
    7934:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    7938:	f4 e0       	ldi	r31, 0x04	; 4
    793a:	f3 15       	cp	r31, r3
    793c:	68 f7       	brcc	.-38     	; 0x7918 <_Z13uhreinstellenv+0x186>
    793e:	08 c0       	rjmp	.+16     	; 0x7950 <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    7940:	24 e1       	ldi	r18, 0x14	; 20
    7942:	48 e2       	ldi	r20, 0x28	; 40
    7944:	6b 81       	ldd	r22, Y+3	; 0x03
    7946:	8c e8       	ldi	r24, 0x8C	; 140
    7948:	9a e0       	ldi	r25, 0x0A	; 10
    794a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    794e:	e4 cf       	rjmp	.-56     	; 0x7918 <_Z13uhreinstellenv+0x186>
    7950:	8e 01       	movw	r16, r28
    7952:	09 5f       	subi	r16, 0xF9	; 249
    7954:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    7956:	2f 2c       	mov	r2, r15
    7958:	0f 2e       	mov	r0, r31
    795a:	f6 e0       	ldi	r31, 0x06	; 6
    795c:	3f 2e       	mov	r3, r31
    795e:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    7960:	88 e0       	ldi	r24, 0x08	; 8
    7962:	38 16       	cp	r3, r24
    7964:	61 f0       	breq	.+24     	; 0x797e <_Z13uhreinstellenv+0x1ec>
    7966:	9b e0       	ldi	r25, 0x0B	; 11
    7968:	39 16       	cp	r3, r25
    796a:	49 f0       	breq	.+18     	; 0x797e <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    796c:	2e 2d       	mov	r18, r14
    796e:	42 2d       	mov	r20, r2
    7970:	f8 01       	movw	r30, r16
    7972:	60 81       	ld	r22, Z
    7974:	8c e8       	ldi	r24, 0x8C	; 140
    7976:	9a e0       	ldi	r25, 0x0A	; 10
    7978:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN7Display16draw_number16x16Ehhh>
    797c:	09 c0       	rjmp	.+18     	; 0x7990 <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    797e:	28 e2       	ldi	r18, 0x28	; 40
    7980:	48 e0       	ldi	r20, 0x08	; 8
    7982:	42 0d       	add	r20, r2
    7984:	f8 01       	movw	r30, r16
    7986:	60 81       	ld	r22, Z
    7988:	8c e8       	ldi	r24, 0x8C	; 140
    798a:	9a e0       	ldi	r25, 0x0A	; 10
    798c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    7990:	33 94       	inc	r3
    7992:	0f 5f       	subi	r16, 0xFF	; 255
    7994:	1f 4f       	sbci	r17, 0xFF	; 255
    7996:	f0 e1       	ldi	r31, 0x10	; 16
    7998:	2f 0e       	add	r2, r31
    799a:	8e e0       	ldi	r24, 0x0E	; 14
    799c:	38 12       	cpse	r3, r24
    799e:	e0 cf       	rjmp	.-64     	; 0x7960 <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    79a0:	8c e8       	ldi	r24, 0x8C	; 140
    79a2:	9a e0       	ldi	r25, 0x0A	; 10
    79a4:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    79a8:	8c e8       	ldi	r24, 0x8C	; 140
    79aa:	9a e0       	ldi	r25, 0x0A	; 10
    79ac:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
		switch (pos) {
    79b0:	89 2d       	mov	r24, r9
    79b2:	90 e0       	ldi	r25, 0x00	; 0
    79b4:	8a 30       	cpi	r24, 0x0A	; 10
    79b6:	91 05       	cpc	r25, r1
    79b8:	08 f0       	brcs	.+2      	; 0x79bc <_Z13uhreinstellenv+0x22a>
    79ba:	2c c2       	rjmp	.+1112   	; 0x7e14 <_Z13uhreinstellenv+0x682>
    79bc:	fc 01       	movw	r30, r24
    79be:	ef 50       	subi	r30, 0x0F	; 15
    79c0:	ff 4f       	sbci	r31, 0xFF	; 255
    79c2:	0c 94 dd 4a 	jmp	0x95ba	; 0x95ba <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    79c6:	80 e8       	ldi	r24, 0x80	; 128
    79c8:	9a e0       	ldi	r25, 0x0A	; 10
    79ca:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    79ce:	88 0f       	add	r24, r24
    79d0:	98 2f       	mov	r25, r24
    79d2:	99 0f       	add	r25, r25
    79d4:	99 0f       	add	r25, r25
    79d6:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    79d8:	88 31       	cpi	r24, 0x18	; 24
    79da:	08 f4       	brcc	.+2      	; 0x79de <_Z13uhreinstellenv+0x24c>
    79dc:	57 c2       	rjmp	.+1198   	; 0x7e8c <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    79de:	f6 01       	movw	r30, r12
    79e0:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    79e2:	ef e3       	ldi	r30, 0x3F	; 63
    79e4:	f3 e0       	ldi	r31, 0x03	; 3
    79e6:	d2 01       	movw	r26, r4
    79e8:	87 2d       	mov	r24, r7
    79ea:	01 90       	ld	r0, Z+
    79ec:	0d 92       	st	X+, r0
    79ee:	8a 95       	dec	r24
    79f0:	e1 f7       	brne	.-8      	; 0x79ea <_Z13uhreinstellenv+0x258>
    79f2:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    79f4:	f5 01       	movw	r30, r10
    79f6:	61 91       	ld	r22, Z+
    79f8:	5f 01       	movw	r10, r30
    79fa:	28 e3       	ldi	r18, 0x38	; 56
    79fc:	41 2f       	mov	r20, r17
    79fe:	8c e8       	ldi	r24, 0x8C	; 140
    7a00:	9a e0       	ldi	r25, 0x0A	; 10
    7a02:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7a06:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7a08:	14 35       	cpi	r17, 0x54	; 84
    7a0a:	a1 f7       	brne	.-24     	; 0x79f4 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    7a0c:	99 24       	eor	r9, r9
    7a0e:	9a 94       	dec	r9
    7a10:	3f c2       	rjmp	.+1150   	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    7a12:	80 e8       	ldi	r24, 0x80	; 128
    7a14:	9a e0       	ldi	r25, 0x0A	; 10
    7a16:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7a1a:	f6 01       	movw	r30, r12
    7a1c:	20 89       	ldd	r18, Z+16	; 0x10
    7a1e:	90 e0       	ldi	r25, 0x00	; 0
    7a20:	82 0f       	add	r24, r18
    7a22:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    7a24:	88 31       	cpi	r24, 0x18	; 24
    7a26:	10 f4       	brcc	.+4      	; 0x7a2c <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    7a28:	80 8b       	std	Z+16, r24	; 0x10
    7a2a:	32 c2       	rjmp	.+1124   	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    7a2c:	f6 01       	movw	r30, r12
    7a2e:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    7a30:	ef e3       	ldi	r30, 0x3F	; 63
    7a32:	f3 e0       	ldi	r31, 0x03	; 3
    7a34:	d2 01       	movw	r26, r4
    7a36:	87 2d       	mov	r24, r7
    7a38:	01 90       	ld	r0, Z+
    7a3a:	0d 92       	st	X+, r0
    7a3c:	8a 95       	dec	r24
    7a3e:	e1 f7       	brne	.-8      	; 0x7a38 <_Z13uhreinstellenv+0x2a6>
    7a40:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7a42:	f5 01       	movw	r30, r10
    7a44:	61 91       	ld	r22, Z+
    7a46:	5f 01       	movw	r10, r30
    7a48:	28 e3       	ldi	r18, 0x38	; 56
    7a4a:	41 2f       	mov	r20, r17
    7a4c:	8c e8       	ldi	r24, 0x8C	; 140
    7a4e:	9a e0       	ldi	r25, 0x0A	; 10
    7a50:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7a54:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7a56:	14 35       	cpi	r17, 0x54	; 84
    7a58:	a1 f7       	brne	.-24     	; 0x7a42 <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    7a5a:	99 24       	eor	r9, r9
    7a5c:	9a 94       	dec	r9
    7a5e:	18 c2       	rjmp	.+1072   	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    7a60:	80 e8       	ldi	r24, 0x80	; 128
    7a62:	9a e0       	ldi	r25, 0x0A	; 10
    7a64:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7a68:	88 0f       	add	r24, r24
    7a6a:	98 2f       	mov	r25, r24
    7a6c:	99 0f       	add	r25, r25
    7a6e:	99 0f       	add	r25, r25
    7a70:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    7a72:	8c 33       	cpi	r24, 0x3C	; 60
    7a74:	18 f4       	brcc	.+6      	; 0x7a7c <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    7a76:	f6 01       	movw	r30, r12
    7a78:	81 8b       	std	Z+17, r24	; 0x11
    7a7a:	0a c2       	rjmp	.+1044   	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    7a7c:	f6 01       	movw	r30, r12
    7a7e:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7a80:	ee e4       	ldi	r30, 0x4E	; 78
    7a82:	f3 e0       	ldi	r31, 0x03	; 3
    7a84:	d2 01       	movw	r26, r4
    7a86:	87 2d       	mov	r24, r7
    7a88:	01 90       	ld	r0, Z+
    7a8a:	0d 92       	st	X+, r0
    7a8c:	8a 95       	dec	r24
    7a8e:	e1 f7       	brne	.-8      	; 0x7a88 <_Z13uhreinstellenv+0x2f6>
    7a90:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7a92:	f5 01       	movw	r30, r10
    7a94:	61 91       	ld	r22, Z+
    7a96:	5f 01       	movw	r10, r30
    7a98:	28 e3       	ldi	r18, 0x38	; 56
    7a9a:	41 2f       	mov	r20, r17
    7a9c:	8c e8       	ldi	r24, 0x8C	; 140
    7a9e:	9a e0       	ldi	r25, 0x0A	; 10
    7aa0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7aa4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7aa6:	14 35       	cpi	r17, 0x54	; 84
    7aa8:	a1 f7       	brne	.-24     	; 0x7a92 <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    7aaa:	99 24       	eor	r9, r9
    7aac:	93 94       	inc	r9
    7aae:	f0 c1       	rjmp	.+992    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7ab0:	80 e8       	ldi	r24, 0x80	; 128
    7ab2:	9a e0       	ldi	r25, 0x0A	; 10
    7ab4:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7ab8:	f6 01       	movw	r30, r12
    7aba:	21 89       	ldd	r18, Z+17	; 0x11
    7abc:	90 e0       	ldi	r25, 0x00	; 0
    7abe:	82 0f       	add	r24, r18
    7ac0:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    7ac2:	8c 33       	cpi	r24, 0x3C	; 60
    7ac4:	10 f4       	brcc	.+4      	; 0x7aca <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7ac6:	81 8b       	std	Z+17, r24	; 0x11
    7ac8:	e3 c1       	rjmp	.+966    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    7aca:	f6 01       	movw	r30, r12
    7acc:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7ace:	ee e4       	ldi	r30, 0x4E	; 78
    7ad0:	f3 e0       	ldi	r31, 0x03	; 3
    7ad2:	d2 01       	movw	r26, r4
    7ad4:	87 2d       	mov	r24, r7
    7ad6:	01 90       	ld	r0, Z+
    7ad8:	0d 92       	st	X+, r0
    7ada:	8a 95       	dec	r24
    7adc:	e1 f7       	brne	.-8      	; 0x7ad6 <_Z13uhreinstellenv+0x344>
    7ade:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7ae0:	f5 01       	movw	r30, r10
    7ae2:	61 91       	ld	r22, Z+
    7ae4:	5f 01       	movw	r10, r30
    7ae6:	28 e3       	ldi	r18, 0x38	; 56
    7ae8:	41 2f       	mov	r20, r17
    7aea:	8c e8       	ldi	r24, 0x8C	; 140
    7aec:	9a e0       	ldi	r25, 0x0A	; 10
    7aee:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7af2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7af4:	14 35       	cpi	r17, 0x54	; 84
    7af6:	a1 f7       	brne	.-24     	; 0x7ae0 <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    7af8:	99 24       	eor	r9, r9
    7afa:	93 94       	inc	r9
    7afc:	c9 c1       	rjmp	.+914    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    7afe:	80 e8       	ldi	r24, 0x80	; 128
    7b00:	9a e0       	ldi	r25, 0x0A	; 10
    7b02:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7b06:	88 0f       	add	r24, r24
    7b08:	98 2f       	mov	r25, r24
    7b0a:	99 0f       	add	r25, r25
    7b0c:	99 0f       	add	r25, r25
    7b0e:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    7b10:	80 32       	cpi	r24, 0x20	; 32
    7b12:	18 f4       	brcc	.+6      	; 0x7b1a <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    7b14:	f6 01       	movw	r30, r12
    7b16:	84 8b       	std	Z+20, r24	; 0x14
    7b18:	bb c1       	rjmp	.+886    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    7b1a:	f6 01       	movw	r30, r12
    7b1c:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    7b1e:	8b e0       	ldi	r24, 0x0B	; 11
    7b20:	ed e5       	ldi	r30, 0x5D	; 93
    7b22:	f3 e0       	ldi	r31, 0x03	; 3
    7b24:	d2 01       	movw	r26, r4
    7b26:	01 90       	ld	r0, Z+
    7b28:	0d 92       	st	X+, r0
    7b2a:	8a 95       	dec	r24
    7b2c:	e1 f7       	brne	.-8      	; 0x7b26 <_Z13uhreinstellenv+0x394>
    7b2e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7b30:	f5 01       	movw	r30, r10
    7b32:	61 91       	ld	r22, Z+
    7b34:	5f 01       	movw	r10, r30
    7b36:	28 e3       	ldi	r18, 0x38	; 56
    7b38:	41 2f       	mov	r20, r17
    7b3a:	8c e8       	ldi	r24, 0x8C	; 140
    7b3c:	9a e0       	ldi	r25, 0x0A	; 10
    7b3e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7b42:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7b44:	1c 33       	cpi	r17, 0x3C	; 60
    7b46:	a1 f7       	brne	.-24     	; 0x7b30 <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    7b48:	0f 2e       	mov	r0, r31
    7b4a:	f3 e0       	ldi	r31, 0x03	; 3
    7b4c:	9f 2e       	mov	r9, r31
    7b4e:	f0 2d       	mov	r31, r0
    7b50:	9f c1       	rjmp	.+830    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    7b52:	80 e8       	ldi	r24, 0x80	; 128
    7b54:	9a e0       	ldi	r25, 0x0A	; 10
    7b56:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7b5a:	f6 01       	movw	r30, r12
    7b5c:	24 89       	ldd	r18, Z+20	; 0x14
    7b5e:	90 e0       	ldi	r25, 0x00	; 0
    7b60:	82 0f       	add	r24, r18
    7b62:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    7b64:	80 32       	cpi	r24, 0x20	; 32
    7b66:	10 f4       	brcc	.+4      	; 0x7b6c <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    7b68:	84 8b       	std	Z+20, r24	; 0x14
    7b6a:	92 c1       	rjmp	.+804    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    7b6c:	f6 01       	movw	r30, r12
    7b6e:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    7b70:	8b e0       	ldi	r24, 0x0B	; 11
    7b72:	ed e5       	ldi	r30, 0x5D	; 93
    7b74:	f3 e0       	ldi	r31, 0x03	; 3
    7b76:	d2 01       	movw	r26, r4
    7b78:	01 90       	ld	r0, Z+
    7b7a:	0d 92       	st	X+, r0
    7b7c:	8a 95       	dec	r24
    7b7e:	e1 f7       	brne	.-8      	; 0x7b78 <_Z13uhreinstellenv+0x3e6>
    7b80:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7b82:	f5 01       	movw	r30, r10
    7b84:	61 91       	ld	r22, Z+
    7b86:	5f 01       	movw	r10, r30
    7b88:	28 e3       	ldi	r18, 0x38	; 56
    7b8a:	41 2f       	mov	r20, r17
    7b8c:	8c e8       	ldi	r24, 0x8C	; 140
    7b8e:	9a e0       	ldi	r25, 0x0A	; 10
    7b90:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7b94:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7b96:	1c 33       	cpi	r17, 0x3C	; 60
    7b98:	a1 f7       	brne	.-24     	; 0x7b82 <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    7b9a:	0f 2e       	mov	r0, r31
    7b9c:	f3 e0       	ldi	r31, 0x03	; 3
    7b9e:	9f 2e       	mov	r9, r31
    7ba0:	f0 2d       	mov	r31, r0
    7ba2:	76 c1       	rjmp	.+748    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    7ba4:	80 e8       	ldi	r24, 0x80	; 128
    7ba6:	9a e0       	ldi	r25, 0x0A	; 10
    7ba8:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7bac:	88 0f       	add	r24, r24
    7bae:	98 2f       	mov	r25, r24
    7bb0:	99 0f       	add	r25, r25
    7bb2:	99 0f       	add	r25, r25
    7bb4:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    7bb6:	8d 30       	cpi	r24, 0x0D	; 13
    7bb8:	18 f4       	brcc	.+6      	; 0x7bc0 <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    7bba:	f6 01       	movw	r30, r12
    7bbc:	86 8b       	std	Z+22, r24	; 0x16
    7bbe:	68 c1       	rjmp	.+720    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    7bc0:	f6 01       	movw	r30, r12
    7bc2:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    7bc4:	8d e0       	ldi	r24, 0x0D	; 13
    7bc6:	e8 e6       	ldi	r30, 0x68	; 104
    7bc8:	f3 e0       	ldi	r31, 0x03	; 3
    7bca:	d2 01       	movw	r26, r4
    7bcc:	01 90       	ld	r0, Z+
    7bce:	0d 92       	st	X+, r0
    7bd0:	8a 95       	dec	r24
    7bd2:	e1 f7       	brne	.-8      	; 0x7bcc <_Z13uhreinstellenv+0x43a>
    7bd4:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7bd6:	f5 01       	movw	r30, r10
    7bd8:	61 91       	ld	r22, Z+
    7bda:	5f 01       	movw	r10, r30
    7bdc:	28 e3       	ldi	r18, 0x38	; 56
    7bde:	41 2f       	mov	r20, r17
    7be0:	8c e8       	ldi	r24, 0x8C	; 140
    7be2:	9a e0       	ldi	r25, 0x0A	; 10
    7be4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7be8:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7bea:	18 34       	cpi	r17, 0x48	; 72
    7bec:	a1 f7       	brne	.-24     	; 0x7bd6 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    7bee:	0f 2e       	mov	r0, r31
    7bf0:	f5 e0       	ldi	r31, 0x05	; 5
    7bf2:	9f 2e       	mov	r9, r31
    7bf4:	f0 2d       	mov	r31, r0
    7bf6:	4c c1       	rjmp	.+664    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    7bf8:	80 e8       	ldi	r24, 0x80	; 128
    7bfa:	9a e0       	ldi	r25, 0x0A	; 10
    7bfc:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7c00:	f6 01       	movw	r30, r12
    7c02:	26 89       	ldd	r18, Z+22	; 0x16
    7c04:	90 e0       	ldi	r25, 0x00	; 0
    7c06:	82 0f       	add	r24, r18
    7c08:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    7c0a:	8d 30       	cpi	r24, 0x0D	; 13
    7c0c:	10 f4       	brcc	.+4      	; 0x7c12 <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    7c0e:	86 8b       	std	Z+22, r24	; 0x16
    7c10:	1d c0       	rjmp	.+58     	; 0x7c4c <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    7c12:	f6 01       	movw	r30, r12
    7c14:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    7c16:	8d e0       	ldi	r24, 0x0D	; 13
    7c18:	e8 e6       	ldi	r30, 0x68	; 104
    7c1a:	f3 e0       	ldi	r31, 0x03	; 3
    7c1c:	d2 01       	movw	r26, r4
    7c1e:	01 90       	ld	r0, Z+
    7c20:	0d 92       	st	X+, r0
    7c22:	8a 95       	dec	r24
    7c24:	e1 f7       	brne	.-8      	; 0x7c1e <_Z13uhreinstellenv+0x48c>
    7c26:	2d 88       	ldd	r2, Y+21	; 0x15
    7c28:	3e 88       	ldd	r3, Y+22	; 0x16
    7c2a:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7c2c:	f1 01       	movw	r30, r2
    7c2e:	61 91       	ld	r22, Z+
    7c30:	1f 01       	movw	r2, r30
    7c32:	28 e3       	ldi	r18, 0x38	; 56
    7c34:	41 2f       	mov	r20, r17
    7c36:	8c e8       	ldi	r24, 0x8C	; 140
    7c38:	9a e0       	ldi	r25, 0x0A	; 10
    7c3a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7c3e:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7c40:	18 34       	cpi	r17, 0x48	; 72
    7c42:	a1 f7       	brne	.-24     	; 0x7c2c <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    7c44:	0f 2e       	mov	r0, r31
    7c46:	f5 e0       	ldi	r31, 0x05	; 5
    7c48:	9f 2e       	mov	r9, r31
    7c4a:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    7c4c:	f6 01       	movw	r30, r12
    7c4e:	96 89       	ldd	r25, Z+22	; 0x16
    7c50:	89 2f       	mov	r24, r25
    7c52:	8d 7f       	andi	r24, 0xFD	; 253
    7c54:	84 30       	cpi	r24, 0x04	; 4
    7c56:	11 f0       	breq	.+4      	; 0x7c5c <_Z13uhreinstellenv+0x4ca>
    7c58:	89 30       	cpi	r24, 0x09	; 9
    7c5a:	09 f5       	brne	.+66     	; 0x7c9e <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    7c5c:	f6 01       	movw	r30, r12
    7c5e:	84 89       	ldd	r24, Z+20	; 0x14
    7c60:	8f 31       	cpi	r24, 0x1F	; 31
    7c62:	08 f4       	brcc	.+2      	; 0x7c66 <_Z13uhreinstellenv+0x4d4>
    7c64:	d8 c0       	rjmp	.+432    	; 0x7e16 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7c66:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7c68:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    7c6a:	8b e0       	ldi	r24, 0x0B	; 11
    7c6c:	ed e5       	ldi	r30, 0x5D	; 93
    7c6e:	f3 e0       	ldi	r31, 0x03	; 3
    7c70:	d2 01       	movw	r26, r4
    7c72:	01 90       	ld	r0, Z+
    7c74:	0d 92       	st	X+, r0
    7c76:	8a 95       	dec	r24
    7c78:	e1 f7       	brne	.-8      	; 0x7c72 <_Z13uhreinstellenv+0x4e0>
    7c7a:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7c7c:	f5 01       	movw	r30, r10
    7c7e:	61 91       	ld	r22, Z+
    7c80:	5f 01       	movw	r10, r30
    7c82:	28 e3       	ldi	r18, 0x38	; 56
    7c84:	41 2f       	mov	r20, r17
    7c86:	8c e8       	ldi	r24, 0x8C	; 140
    7c88:	9a e0       	ldi	r25, 0x0A	; 10
    7c8a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7c8e:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7c90:	1c 33       	cpi	r17, 0x3C	; 60
    7c92:	a1 f7       	brne	.-24     	; 0x7c7c <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    7c94:	0f 2e       	mov	r0, r31
    7c96:	f3 e0       	ldi	r31, 0x03	; 3
    7c98:	9f 2e       	mov	r9, r31
    7c9a:	f0 2d       	mov	r31, r0
    7c9c:	f9 c0       	rjmp	.+498    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    7c9e:	92 30       	cpi	r25, 0x02	; 2
    7ca0:	09 f0       	breq	.+2      	; 0x7ca4 <_Z13uhreinstellenv+0x512>
    7ca2:	b9 c0       	rjmp	.+370    	; 0x7e16 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    7ca4:	f6 01       	movw	r30, r12
    7ca6:	84 89       	ldd	r24, Z+20	; 0x14
    7ca8:	8e 31       	cpi	r24, 0x1E	; 30
    7caa:	08 f4       	brcc	.+2      	; 0x7cae <_Z13uhreinstellenv+0x51c>
    7cac:	b4 c0       	rjmp	.+360    	; 0x7e16 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7cae:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7cb0:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    7cb2:	8b e0       	ldi	r24, 0x0B	; 11
    7cb4:	ed e5       	ldi	r30, 0x5D	; 93
    7cb6:	f3 e0       	ldi	r31, 0x03	; 3
    7cb8:	d2 01       	movw	r26, r4
    7cba:	01 90       	ld	r0, Z+
    7cbc:	0d 92       	st	X+, r0
    7cbe:	8a 95       	dec	r24
    7cc0:	e1 f7       	brne	.-8      	; 0x7cba <_Z13uhreinstellenv+0x528>
    7cc2:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7cc4:	f5 01       	movw	r30, r10
    7cc6:	61 91       	ld	r22, Z+
    7cc8:	5f 01       	movw	r10, r30
    7cca:	28 e3       	ldi	r18, 0x38	; 56
    7ccc:	41 2f       	mov	r20, r17
    7cce:	8c e8       	ldi	r24, 0x8C	; 140
    7cd0:	9a e0       	ldi	r25, 0x0A	; 10
    7cd2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7cd6:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7cd8:	1c 33       	cpi	r17, 0x3C	; 60
    7cda:	a1 f7       	brne	.-24     	; 0x7cc4 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    7cdc:	0f 2e       	mov	r0, r31
    7cde:	f3 e0       	ldi	r31, 0x03	; 3
    7ce0:	9f 2e       	mov	r9, r31
    7ce2:	f0 2d       	mov	r31, r0
    7ce4:	d5 c0       	rjmp	.+426    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    7ce6:	80 e8       	ldi	r24, 0x80	; 128
    7ce8:	9a e0       	ldi	r25, 0x0A	; 10
    7cea:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7cee:	88 0f       	add	r24, r24
    7cf0:	98 2f       	mov	r25, r24
    7cf2:	99 0f       	add	r25, r25
    7cf4:	99 0f       	add	r25, r25
    7cf6:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    7cf8:	82 33       	cpi	r24, 0x32	; 50
    7cfa:	18 f4       	brcc	.+6      	; 0x7d02 <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    7cfc:	f6 01       	movw	r30, r12
    7cfe:	87 8b       	std	Z+23, r24	; 0x17
    7d00:	c7 c0       	rjmp	.+398    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    7d02:	f6 01       	movw	r30, r12
    7d04:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    7d06:	8c e0       	ldi	r24, 0x0C	; 12
    7d08:	e5 e7       	ldi	r30, 0x75	; 117
    7d0a:	f3 e0       	ldi	r31, 0x03	; 3
    7d0c:	d2 01       	movw	r26, r4
    7d0e:	01 90       	ld	r0, Z+
    7d10:	0d 92       	st	X+, r0
    7d12:	8a 95       	dec	r24
    7d14:	e1 f7       	brne	.-8      	; 0x7d0e <_Z13uhreinstellenv+0x57c>
    7d16:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7d18:	f5 01       	movw	r30, r10
    7d1a:	61 91       	ld	r22, Z+
    7d1c:	5f 01       	movw	r10, r30
    7d1e:	28 e3       	ldi	r18, 0x38	; 56
    7d20:	41 2f       	mov	r20, r17
    7d22:	8c e8       	ldi	r24, 0x8C	; 140
    7d24:	9a e0       	ldi	r25, 0x0A	; 10
    7d26:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7d2a:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7d2c:	12 34       	cpi	r17, 0x42	; 66
    7d2e:	a1 f7       	brne	.-24     	; 0x7d18 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    7d30:	0f 2e       	mov	r0, r31
    7d32:	f7 e0       	ldi	r31, 0x07	; 7
    7d34:	9f 2e       	mov	r9, r31
    7d36:	f0 2d       	mov	r31, r0
    7d38:	ab c0       	rjmp	.+342    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    7d3a:	80 e8       	ldi	r24, 0x80	; 128
    7d3c:	9a e0       	ldi	r25, 0x0A	; 10
    7d3e:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN9Interface17ZahlenausTastaturEv>
    7d42:	f6 01       	movw	r30, r12
    7d44:	27 89       	ldd	r18, Z+23	; 0x17
    7d46:	90 e0       	ldi	r25, 0x00	; 0
    7d48:	82 0f       	add	r24, r18
    7d4a:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    7d4c:	82 33       	cpi	r24, 0x32	; 50
    7d4e:	08 f4       	brcc	.+2      	; 0x7d52 <_Z13uhreinstellenv+0x5c0>
    7d50:	96 c0       	rjmp	.+300    	; 0x7e7e <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    7d52:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    7d54:	8c e0       	ldi	r24, 0x0C	; 12
    7d56:	e5 e7       	ldi	r30, 0x75	; 117
    7d58:	f3 e0       	ldi	r31, 0x03	; 3
    7d5a:	d2 01       	movw	r26, r4
    7d5c:	01 90       	ld	r0, Z+
    7d5e:	0d 92       	st	X+, r0
    7d60:	8a 95       	dec	r24
    7d62:	e1 f7       	brne	.-8      	; 0x7d5c <_Z13uhreinstellenv+0x5ca>
    7d64:	2d 88       	ldd	r2, Y+21	; 0x15
    7d66:	3e 88       	ldd	r3, Y+22	; 0x16
    7d68:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7d6a:	f1 01       	movw	r30, r2
    7d6c:	61 91       	ld	r22, Z+
    7d6e:	1f 01       	movw	r2, r30
    7d70:	28 e3       	ldi	r18, 0x38	; 56
    7d72:	41 2f       	mov	r20, r17
    7d74:	8c e8       	ldi	r24, 0x8C	; 140
    7d76:	9a e0       	ldi	r25, 0x0A	; 10
    7d78:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7d7c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7d7e:	12 34       	cpi	r17, 0x42	; 66
    7d80:	a1 f7       	brne	.-24     	; 0x7d6a <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    7d82:	0f 2e       	mov	r0, r31
    7d84:	f7 e0       	ldi	r31, 0x07	; 7
    7d86:	9f 2e       	mov	r9, r31
    7d88:	f0 2d       	mov	r31, r0
    7d8a:	7b c0       	rjmp	.+246    	; 0x7e82 <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    7d8c:	f6 01       	movw	r30, r12
    7d8e:	17 89       	ldd	r17, Z+23	; 0x17
    7d90:	13 70       	andi	r17, 0x03	; 3
    7d92:	f9 f4       	brne	.+62     	; 0x7dd2 <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    7d94:	84 89       	ldd	r24, Z+20	; 0x14
    7d96:	8e 31       	cpi	r24, 0x1E	; 30
    7d98:	f0 f1       	brcs	.+124    	; 0x7e16 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    7d9a:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    7d9c:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    7d9e:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    7da0:	8b e0       	ldi	r24, 0x0B	; 11
    7da2:	ed e5       	ldi	r30, 0x5D	; 93
    7da4:	f3 e0       	ldi	r31, 0x03	; 3
    7da6:	d2 01       	movw	r26, r4
    7da8:	01 90       	ld	r0, Z+
    7daa:	0d 92       	st	X+, r0
    7dac:	8a 95       	dec	r24
    7dae:	e1 f7       	brne	.-8      	; 0x7da8 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7db0:	f5 01       	movw	r30, r10
    7db2:	61 91       	ld	r22, Z+
    7db4:	5f 01       	movw	r10, r30
    7db6:	28 e3       	ldi	r18, 0x38	; 56
    7db8:	41 2f       	mov	r20, r17
    7dba:	8c e8       	ldi	r24, 0x8C	; 140
    7dbc:	9a e0       	ldi	r25, 0x0A	; 10
    7dbe:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7dc2:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    7dc4:	1c 33       	cpi	r17, 0x3C	; 60
    7dc6:	a1 f7       	brne	.-24     	; 0x7db0 <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    7dc8:	0f 2e       	mov	r0, r31
    7dca:	f3 e0       	ldi	r31, 0x03	; 3
    7dcc:	9f 2e       	mov	r9, r31
    7dce:	f0 2d       	mov	r31, r0
    7dd0:	5f c0       	rjmp	.+190    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    7dd2:	f6 01       	movw	r30, r12
    7dd4:	84 89       	ldd	r24, Z+20	; 0x14
    7dd6:	8d 31       	cpi	r24, 0x1D	; 29
    7dd8:	f0 f0       	brcs	.+60     	; 0x7e16 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    7dda:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    7ddc:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    7dde:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    7de0:	8b e0       	ldi	r24, 0x0B	; 11
    7de2:	ed e5       	ldi	r30, 0x5D	; 93
    7de4:	f3 e0       	ldi	r31, 0x03	; 3
    7de6:	d2 01       	movw	r26, r4
    7de8:	01 90       	ld	r0, Z+
    7dea:	0d 92       	st	X+, r0
    7dec:	8a 95       	dec	r24
    7dee:	e1 f7       	brne	.-8      	; 0x7de8 <_Z13uhreinstellenv+0x656>
    7df0:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7df2:	f5 01       	movw	r30, r10
    7df4:	61 91       	ld	r22, Z+
    7df6:	5f 01       	movw	r10, r30
    7df8:	28 e3       	ldi	r18, 0x38	; 56
    7dfa:	41 2f       	mov	r20, r17
    7dfc:	8c e8       	ldi	r24, 0x8C	; 140
    7dfe:	9a e0       	ldi	r25, 0x0A	; 10
    7e00:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7e04:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    7e06:	1c 33       	cpi	r17, 0x3C	; 60
    7e08:	a1 f7       	brne	.-24     	; 0x7df2 <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    7e0a:	0f 2e       	mov	r0, r31
    7e0c:	f3 e0       	ldi	r31, 0x03	; 3
    7e0e:	9f 2e       	mov	r9, r31
    7e10:	f0 2d       	mov	r31, r0
    7e12:	3e c0       	rjmp	.+124    	; 0x7e90 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    7e14:	93 94       	inc	r9
			break;
		}
		pos++;
    7e16:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    7e18:	fa e0       	ldi	r31, 0x0A	; 10
    7e1a:	f9 15       	cp	r31, r9
    7e1c:	08 f0       	brcs	.+2      	; 0x7e20 <_Z13uhreinstellenv+0x68e>
    7e1e:	f6 cc       	rjmp	.-1556   	; 0x780c <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    7e20:	0d e8       	ldi	r16, 0x8D	; 141
    7e22:	1e e0       	ldi	r17, 0x0E	; 14
    7e24:	f8 01       	movw	r30, r16
    7e26:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    7e28:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    7e2a:	61 89       	ldd	r22, Z+17	; 0x11
    7e2c:	80 e0       	ldi	r24, 0x00	; 0
    7e2e:	90 e0       	ldi	r25, 0x00	; 0
    7e30:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    7e34:	f8 01       	movw	r30, r16
    7e36:	60 89       	ldd	r22, Z+16	; 0x10
    7e38:	81 e0       	ldi	r24, 0x01	; 1
    7e3a:	90 e0       	ldi	r25, 0x00	; 0
    7e3c:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    7e40:	f8 01       	movw	r30, r16
    7e42:	64 89       	ldd	r22, Z+20	; 0x14
    7e44:	82 e0       	ldi	r24, 0x02	; 2
    7e46:	90 e0       	ldi	r25, 0x00	; 0
    7e48:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    7e4c:	f8 01       	movw	r30, r16
    7e4e:	66 89       	ldd	r22, Z+22	; 0x16
    7e50:	83 e0       	ldi	r24, 0x03	; 3
    7e52:	90 e0       	ldi	r25, 0x00	; 0
    7e54:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    7e58:	f8 01       	movw	r30, r16
    7e5a:	67 89       	ldd	r22, Z+23	; 0x17
    7e5c:	84 e0       	ldi	r24, 0x04	; 4
    7e5e:	90 e0       	ldi	r25, 0x00	; 0
    7e60:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    7e64:	8c e8       	ldi	r24, 0x8C	; 140
    7e66:	9a e0       	ldi	r25, 0x0A	; 10
    7e68:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    7e6c:	c8 01       	movw	r24, r16
    7e6e:	2b d3       	rcall	.+1622   	; 0x84c6 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    7e70:	c8 01       	movw	r24, r16
    7e72:	f0 d2       	rcall	.+1504   	; 0x8454 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    7e74:	c8 01       	movw	r24, r16
    7e76:	08 d4       	rcall	.+2064   	; 0x8688 <_ZN3RTC8RTCstartEv>
    7e78:	0d c0       	rjmp	.+26     	; 0x7e94 <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7e7a:	93 94       	inc	r9
    7e7c:	c7 cc       	rjmp	.-1650   	; 0x780c <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    7e7e:	f6 01       	movw	r30, r12
    7e80:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    7e82:	f6 01       	movw	r30, r12
    7e84:	86 89       	ldd	r24, Z+22	; 0x16
    7e86:	82 30       	cpi	r24, 0x02	; 2
    7e88:	c1 f7       	brne	.-16     	; 0x7e7a <_Z13uhreinstellenv+0x6e8>
    7e8a:	80 cf       	rjmp	.-256    	; 0x7d8c <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    7e8c:	f6 01       	movw	r30, r12
    7e8e:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7e90:	93 94       	inc	r9
    7e92:	bc cc       	rjmp	.-1672   	; 0x780c <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    7e94:	66 96       	adiw	r28, 0x16	; 22
    7e96:	0f b6       	in	r0, 0x3f	; 63
    7e98:	f8 94       	cli
    7e9a:	de bf       	out	0x3e, r29	; 62
    7e9c:	0f be       	out	0x3f, r0	; 63
    7e9e:	cd bf       	out	0x3d, r28	; 61
    7ea0:	df 91       	pop	r29
    7ea2:	cf 91       	pop	r28
    7ea4:	1f 91       	pop	r17
    7ea6:	0f 91       	pop	r16
    7ea8:	ff 90       	pop	r15
    7eaa:	ef 90       	pop	r14
    7eac:	df 90       	pop	r13
    7eae:	cf 90       	pop	r12
    7eb0:	bf 90       	pop	r11
    7eb2:	af 90       	pop	r10
    7eb4:	9f 90       	pop	r9
    7eb6:	8f 90       	pop	r8
    7eb8:	7f 90       	pop	r7
    7eba:	6f 90       	pop	r6
    7ebc:	5f 90       	pop	r5
    7ebe:	4f 90       	pop	r4
    7ec0:	3f 90       	pop	r3
    7ec2:	2f 90       	pop	r2
    7ec4:	08 95       	ret

00007ec6 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    7ec6:	ef 92       	push	r14
    7ec8:	ff 92       	push	r15
    7eca:	0f 93       	push	r16
    7ecc:	1f 93       	push	r17
    7ece:	cf 93       	push	r28
    7ed0:	df 93       	push	r29
    7ed2:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    7ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    7ed8:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN7Display10clearFrameEv>
	}
	
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
    7edc:	e8 81       	ld	r30, Y
    7ede:	f9 81       	ldd	r31, Y+1	; 0x01
    7ee0:	01 90       	ld	r0, Z+
    7ee2:	f0 81       	ld	r31, Z
    7ee4:	e0 2d       	mov	r30, r0
    7ee6:	ce 01       	movw	r24, r28
    7ee8:	09 95       	icall
		bottom();
    7eea:	e8 81       	ld	r30, Y
    7eec:	f9 81       	ldd	r31, Y+1	; 0x01
    7eee:	02 80       	ldd	r0, Z+2	; 0x02
    7ef0:	f3 81       	ldd	r31, Z+3	; 0x03
    7ef2:	e0 2d       	mov	r30, r0
    7ef4:	ce 01       	movw	r24, r28
    7ef6:	09 95       	icall
		if (posx==0)
    7ef8:	8e a1       	ldd	r24, Y+38	; 0x26
    7efa:	81 11       	cpse	r24, r1
    7efc:	b2 c0       	rjmp	.+356    	; 0x8062 <_ZN13einstellungen4drawEv+0x19c>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    7efe:	7e 01       	movw	r14, r28
    7f00:	22 e0       	ldi	r18, 0x02	; 2
    7f02:	e2 0e       	add	r14, r18
    7f04:	f1 1c       	adc	r15, r1
    7f06:	80 e1       	ldi	r24, 0x10	; 16
    7f08:	e1 e8       	ldi	r30, 0x81	; 129
    7f0a:	f3 e0       	ldi	r31, 0x03	; 3
    7f0c:	d7 01       	movw	r26, r14
    7f0e:	01 90       	ld	r0, Z+
    7f10:	0d 92       	st	X+, r0
    7f12:	8a 95       	dec	r24
    7f14:	e1 f7       	brne	.-8      	; 0x7f0e <_ZN13einstellungen4drawEv+0x48>
    7f16:	8f e0       	ldi	r24, 0x0F	; 15
    7f18:	8e 8b       	std	Y+22, r24	; 0x16
    7f1a:	0c e0       	ldi	r16, 0x0C	; 12
    7f1c:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    7f1e:	fe 01       	movw	r30, r28
    7f20:	e1 0f       	add	r30, r17
    7f22:	f1 1d       	adc	r31, r1
    7f24:	20 e1       	ldi	r18, 0x10	; 16
    7f26:	40 2f       	mov	r20, r16
    7f28:	62 81       	ldd	r22, Z+2	; 0x02
    7f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    7f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    7f2e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7f32:	1f 5f       	subi	r17, 0xFF	; 255
    7f34:	0a 5f       	subi	r16, 0xFA	; 250
    7f36:	8e 89       	ldd	r24, Y+22	; 0x16
    7f38:	18 17       	cp	r17, r24
    7f3a:	88 f3       	brcs	.-30     	; 0x7f1e <_ZN13einstellungen4drawEv+0x58>
			buffersize=sprintf(buffer,"g bestimmen");
    7f3c:	8c e0       	ldi	r24, 0x0C	; 12
    7f3e:	e1 e9       	ldi	r30, 0x91	; 145
    7f40:	f3 e0       	ldi	r31, 0x03	; 3
    7f42:	d7 01       	movw	r26, r14
    7f44:	01 90       	ld	r0, Z+
    7f46:	0d 92       	st	X+, r0
    7f48:	8a 95       	dec	r24
    7f4a:	e1 f7       	brne	.-8      	; 0x7f44 <_ZN13einstellungen4drawEv+0x7e>
    7f4c:	8b e0       	ldi	r24, 0x0B	; 11
    7f4e:	8e 8b       	std	Y+22, r24	; 0x16
    7f50:	0c e0       	ldi	r16, 0x0C	; 12
    7f52:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    7f54:	fe 01       	movw	r30, r28
    7f56:	e1 0f       	add	r30, r17
    7f58:	f1 1d       	adc	r31, r1
    7f5a:	28 e1       	ldi	r18, 0x18	; 24
    7f5c:	40 2f       	mov	r20, r16
    7f5e:	62 81       	ldd	r22, Z+2	; 0x02
    7f60:	8f 89       	ldd	r24, Y+23	; 0x17
    7f62:	98 8d       	ldd	r25, Y+24	; 0x18
    7f64:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7f68:	1f 5f       	subi	r17, 0xFF	; 255
    7f6a:	0a 5f       	subi	r16, 0xFA	; 250
    7f6c:	8e 89       	ldd	r24, Y+22	; 0x16
    7f6e:	18 17       	cp	r17, r24
    7f70:	88 f3       	brcs	.-30     	; 0x7f54 <_ZN13einstellungen4drawEv+0x8e>
			buffersize=sprintf(buffer,"Versionsnummer");
    7f72:	8f e0       	ldi	r24, 0x0F	; 15
    7f74:	ed e9       	ldi	r30, 0x9D	; 157
    7f76:	f3 e0       	ldi	r31, 0x03	; 3
    7f78:	d7 01       	movw	r26, r14
    7f7a:	01 90       	ld	r0, Z+
    7f7c:	0d 92       	st	X+, r0
    7f7e:	8a 95       	dec	r24
    7f80:	e1 f7       	brne	.-8      	; 0x7f7a <_ZN13einstellungen4drawEv+0xb4>
    7f82:	8e e0       	ldi	r24, 0x0E	; 14
    7f84:	8e 8b       	std	Y+22, r24	; 0x16
    7f86:	0c e0       	ldi	r16, 0x0C	; 12
    7f88:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    7f8a:	fe 01       	movw	r30, r28
    7f8c:	e1 0f       	add	r30, r17
    7f8e:	f1 1d       	adc	r31, r1
    7f90:	20 e2       	ldi	r18, 0x20	; 32
    7f92:	40 2f       	mov	r20, r16
    7f94:	62 81       	ldd	r22, Z+2	; 0x02
    7f96:	8f 89       	ldd	r24, Y+23	; 0x17
    7f98:	98 8d       	ldd	r25, Y+24	; 0x18
    7f9a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7f9e:	1f 5f       	subi	r17, 0xFF	; 255
    7fa0:	0a 5f       	subi	r16, 0xFA	; 250
    7fa2:	8e 89       	ldd	r24, Y+22	; 0x16
    7fa4:	18 17       	cp	r17, r24
    7fa6:	88 f3       	brcs	.-30     	; 0x7f8a <_ZN13einstellungen4drawEv+0xc4>
			buffersize=sprintf(buffer,"Mount SD: %u", (bool)(statusreg&(1<<mounttingstat)));
    7fa8:	80 91 40 09 	lds	r24, 0x0940
    7fac:	86 95       	lsr	r24
    7fae:	81 70       	andi	r24, 0x01	; 1
    7fb0:	1f 92       	push	r1
    7fb2:	8f 93       	push	r24
    7fb4:	8c ea       	ldi	r24, 0xAC	; 172
    7fb6:	93 e0       	ldi	r25, 0x03	; 3
    7fb8:	9f 93       	push	r25
    7fba:	8f 93       	push	r24
    7fbc:	ff 92       	push	r15
    7fbe:	ef 92       	push	r14
    7fc0:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    7fc4:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    7fc6:	0f 90       	pop	r0
    7fc8:	0f 90       	pop	r0
    7fca:	0f 90       	pop	r0
    7fcc:	0f 90       	pop	r0
    7fce:	0f 90       	pop	r0
    7fd0:	0f 90       	pop	r0
    7fd2:	88 23       	and	r24, r24
    7fd4:	89 f0       	breq	.+34     	; 0x7ff8 <_ZN13einstellungen4drawEv+0x132>
    7fd6:	0c e0       	ldi	r16, 0x0C	; 12
    7fd8:	10 e0       	ldi	r17, 0x00	; 0
    7fda:	fe 01       	movw	r30, r28
    7fdc:	e1 0f       	add	r30, r17
    7fde:	f1 1d       	adc	r31, r1
    7fe0:	28 e2       	ldi	r18, 0x28	; 40
    7fe2:	40 2f       	mov	r20, r16
    7fe4:	62 81       	ldd	r22, Z+2	; 0x02
    7fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    7fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    7fea:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    7fee:	1f 5f       	subi	r17, 0xFF	; 255
    7ff0:	0a 5f       	subi	r16, 0xFA	; 250
    7ff2:	8e 89       	ldd	r24, Y+22	; 0x16
    7ff4:	18 17       	cp	r17, r24
    7ff6:	88 f3       	brcs	.-30     	; 0x7fda <_ZN13einstellungen4drawEv+0x114>
			buffersize=sprintf(buffer,"Logging:  %u", (bool)(statusreg&(1<<loggingstat)));
    7ff8:	80 91 40 09 	lds	r24, 0x0940
    7ffc:	82 fb       	bst	r24, 2
    7ffe:	88 27       	eor	r24, r24
    8000:	80 f9       	bld	r24, 0
    8002:	1f 92       	push	r1
    8004:	8f 93       	push	r24
    8006:	89 eb       	ldi	r24, 0xB9	; 185
    8008:	93 e0       	ldi	r25, 0x03	; 3
    800a:	9f 93       	push	r25
    800c:	8f 93       	push	r24
    800e:	ff 92       	push	r15
    8010:	ef 92       	push	r14
    8012:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    8016:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    8018:	0f 90       	pop	r0
    801a:	0f 90       	pop	r0
    801c:	0f 90       	pop	r0
    801e:	0f 90       	pop	r0
    8020:	0f 90       	pop	r0
    8022:	0f 90       	pop	r0
    8024:	88 23       	and	r24, r24
    8026:	89 f0       	breq	.+34     	; 0x804a <_ZN13einstellungen4drawEv+0x184>
    8028:	0c e0       	ldi	r16, 0x0C	; 12
    802a:	10 e0       	ldi	r17, 0x00	; 0
    802c:	fe 01       	movw	r30, r28
    802e:	e1 0f       	add	r30, r17
    8030:	f1 1d       	adc	r31, r1
    8032:	20 e3       	ldi	r18, 0x30	; 48
    8034:	40 2f       	mov	r20, r16
    8036:	62 81       	ldd	r22, Z+2	; 0x02
    8038:	8f 89       	ldd	r24, Y+23	; 0x17
    803a:	98 8d       	ldd	r25, Y+24	; 0x18
    803c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    8040:	1f 5f       	subi	r17, 0xFF	; 255
    8042:	0a 5f       	subi	r16, 0xFA	; 250
    8044:	8e 89       	ldd	r24, Y+22	; 0x16
    8046:	18 17       	cp	r17, r24
    8048:	88 f3       	brcs	.-30     	; 0x802c <_ZN13einstellungen4drawEv+0x166>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    804a:	2d a1       	ldd	r18, Y+37	; 0x25
    804c:	22 0f       	add	r18, r18
    804e:	22 0f       	add	r18, r18
    8050:	22 0f       	add	r18, r18
    8052:	20 5f       	subi	r18, 0xF0	; 240
    8054:	40 e0       	ldi	r20, 0x00	; 0
    8056:	6e e3       	ldi	r22, 0x3E	; 62
    8058:	8f 89       	ldd	r24, Y+23	; 0x17
    805a:	98 8d       	ldd	r25, Y+24	; 0x18
    805c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    8060:	a8 c0       	rjmp	.+336    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
		}
		else if (posy==0 && posx==1)
    8062:	9d a1       	ldd	r25, Y+37	; 0x25
    8064:	91 11       	cpse	r25, r1
    8066:	06 c0       	rjmp	.+12     	; 0x8074 <_ZN13einstellungen4drawEv+0x1ae>
    8068:	81 30       	cpi	r24, 0x01	; 1
    806a:	09 f0       	breq	.+2      	; 0x806e <_ZN13einstellungen4drawEv+0x1a8>
    806c:	a2 c0       	rjmp	.+324    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    806e:	91 db       	rcall	.-2270   	; 0x7792 <_Z13uhreinstellenv>
			posx=0;
    8070:	1e a2       	std	Y+38, r1	; 0x26
    8072:	9f c0       	rjmp	.+318    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
		}
		else if (posy==1 && posx==1)
    8074:	91 30       	cpi	r25, 0x01	; 1
    8076:	09 f0       	breq	.+2      	; 0x807a <_ZN13einstellungen4drawEv+0x1b4>
    8078:	64 c0       	rjmp	.+200    	; 0x8142 <_ZN13einstellungen4drawEv+0x27c>
    807a:	81 30       	cpi	r24, 0x01	; 1
    807c:	09 f0       	breq	.+2      	; 0x8080 <_ZN13einstellungen4drawEv+0x1ba>
    807e:	99 c0       	rjmp	.+306    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    8080:	7e 01       	movw	r14, r28
    8082:	32 e0       	ldi	r19, 0x02	; 2
    8084:	e3 0e       	add	r14, r19
    8086:	f1 1c       	adc	r15, r1
    8088:	85 e1       	ldi	r24, 0x15	; 21
    808a:	e6 ec       	ldi	r30, 0xC6	; 198
    808c:	f3 e0       	ldi	r31, 0x03	; 3
    808e:	d7 01       	movw	r26, r14
    8090:	01 90       	ld	r0, Z+
    8092:	0d 92       	st	X+, r0
    8094:	8a 95       	dec	r24
    8096:	e1 f7       	brne	.-8      	; 0x8090 <_ZN13einstellungen4drawEv+0x1ca>
    8098:	84 e1       	ldi	r24, 0x14	; 20
    809a:	8e 8b       	std	Y+22, r24	; 0x16
    809c:	00 e0       	ldi	r16, 0x00	; 0
    809e:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    80a0:	fe 01       	movw	r30, r28
    80a2:	e1 0f       	add	r30, r17
    80a4:	f1 1d       	adc	r31, r1
    80a6:	20 e1       	ldi	r18, 0x10	; 16
    80a8:	40 2f       	mov	r20, r16
    80aa:	62 81       	ldd	r22, Z+2	; 0x02
    80ac:	8f 89       	ldd	r24, Y+23	; 0x17
    80ae:	98 8d       	ldd	r25, Y+24	; 0x18
    80b0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    80b4:	1f 5f       	subi	r17, 0xFF	; 255
    80b6:	0a 5f       	subi	r16, 0xFA	; 250
    80b8:	8e 89       	ldd	r24, Y+22	; 0x16
    80ba:	18 17       	cp	r17, r24
    80bc:	88 f3       	brcs	.-30     	; 0x80a0 <_ZN13einstellungen4drawEv+0x1da>
			buffersize=sprintf(buffer,"* fuer start");
    80be:	8d e0       	ldi	r24, 0x0D	; 13
    80c0:	eb ed       	ldi	r30, 0xDB	; 219
    80c2:	f3 e0       	ldi	r31, 0x03	; 3
    80c4:	d7 01       	movw	r26, r14
    80c6:	01 90       	ld	r0, Z+
    80c8:	0d 92       	st	X+, r0
    80ca:	8a 95       	dec	r24
    80cc:	e1 f7       	brne	.-8      	; 0x80c6 <_ZN13einstellungen4drawEv+0x200>
    80ce:	8c e0       	ldi	r24, 0x0C	; 12
    80d0:	8e 8b       	std	Y+22, r24	; 0x16
    80d2:	00 e0       	ldi	r16, 0x00	; 0
    80d4:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    80d6:	fe 01       	movw	r30, r28
    80d8:	e1 0f       	add	r30, r17
    80da:	f1 1d       	adc	r31, r1
    80dc:	28 e1       	ldi	r18, 0x18	; 24
    80de:	40 2f       	mov	r20, r16
    80e0:	62 81       	ldd	r22, Z+2	; 0x02
    80e2:	8f 89       	ldd	r24, Y+23	; 0x17
    80e4:	98 8d       	ldd	r25, Y+24	; 0x18
    80e6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    80ea:	1f 5f       	subi	r17, 0xFF	; 255
    80ec:	0a 5f       	subi	r16, 0xFA	; 250
    80ee:	8e 89       	ldd	r24, Y+22	; 0x16
    80f0:	18 17       	cp	r17, r24
    80f2:	88 f3       	brcs	.-30     	; 0x80d6 <_ZN13einstellungen4drawEv+0x210>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    80f4:	1f 92       	push	r1
    80f6:	85 e0       	ldi	r24, 0x05	; 5
    80f8:	8f 93       	push	r24
    80fa:	88 ee       	ldi	r24, 0xE8	; 232
    80fc:	93 e0       	ldi	r25, 0x03	; 3
    80fe:	9f 93       	push	r25
    8100:	8f 93       	push	r24
    8102:	ff 92       	push	r15
    8104:	ef 92       	push	r14
    8106:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    810a:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    810c:	0f 90       	pop	r0
    810e:	0f 90       	pop	r0
    8110:	0f 90       	pop	r0
    8112:	0f 90       	pop	r0
    8114:	0f 90       	pop	r0
    8116:	0f 90       	pop	r0
    8118:	88 23       	and	r24, r24
    811a:	09 f4       	brne	.+2      	; 0x811e <_ZN13einstellungen4drawEv+0x258>
    811c:	4a c0       	rjmp	.+148    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
    811e:	00 e0       	ldi	r16, 0x00	; 0
    8120:	10 e0       	ldi	r17, 0x00	; 0
    8122:	fe 01       	movw	r30, r28
    8124:	e1 0f       	add	r30, r17
    8126:	f1 1d       	adc	r31, r1
    8128:	28 e2       	ldi	r18, 0x28	; 40
    812a:	40 2f       	mov	r20, r16
    812c:	62 81       	ldd	r22, Z+2	; 0x02
    812e:	8f 89       	ldd	r24, Y+23	; 0x17
    8130:	98 8d       	ldd	r25, Y+24	; 0x18
    8132:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
    8136:	1f 5f       	subi	r17, 0xFF	; 255
    8138:	0a 5f       	subi	r16, 0xFA	; 250
    813a:	8e 89       	ldd	r24, Y+22	; 0x16
    813c:	18 17       	cp	r17, r24
    813e:	88 f3       	brcs	.-30     	; 0x8122 <_ZN13einstellungen4drawEv+0x25c>
    8140:	38 c0       	rjmp	.+112    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    8142:	92 30       	cpi	r25, 0x02	; 2
    8144:	b1 f5       	brne	.+108    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
    8146:	81 30       	cpi	r24, 0x01	; 1
    8148:	a1 f5       	brne	.+104    	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    814a:	80 e4       	ldi	r24, 0x40	; 64
    814c:	8f 93       	push	r24
    814e:	84 e4       	ldi	r24, 0x44	; 68
    8150:	8f 93       	push	r24
    8152:	8a e7       	ldi	r24, 0x7A	; 122
    8154:	8f 93       	push	r24
    8156:	81 ee       	ldi	r24, 0xE1	; 225
    8158:	8f 93       	push	r24
    815a:	81 e6       	ldi	r24, 0x61	; 97
    815c:	92 e0       	ldi	r25, 0x02	; 2
    815e:	9f 93       	push	r25
    8160:	8f 93       	push	r24
    8162:	ce 01       	movw	r24, r28
    8164:	02 96       	adiw	r24, 0x02	; 2
    8166:	9f 93       	push	r25
    8168:	8f 93       	push	r24
    816a:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <sprintf>
    816e:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    8170:	2d b7       	in	r18, 0x3d	; 61
    8172:	3e b7       	in	r19, 0x3e	; 62
    8174:	28 5f       	subi	r18, 0xF8	; 248
    8176:	3f 4f       	sbci	r19, 0xFF	; 255
    8178:	0f b6       	in	r0, 0x3f	; 63
    817a:	f8 94       	cli
    817c:	3e bf       	out	0x3e, r19	; 62
    817e:	0f be       	out	0x3f, r0	; 63
    8180:	2d bf       	out	0x3d, r18	; 61
    8182:	88 23       	and	r24, r24
    8184:	b1 f0       	breq	.+44     	; 0x81b2 <_ZN13einstellungen4drawEv+0x2ec>
    8186:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    8188:	21 2f       	mov	r18, r17
    818a:	30 e0       	ldi	r19, 0x00	; 0
    818c:	c9 01       	movw	r24, r18
    818e:	02 96       	adiw	r24, 0x02	; 2
    8190:	48 2f       	mov	r20, r24
    8192:	44 0f       	add	r20, r20
    8194:	48 0f       	add	r20, r24
    8196:	44 0f       	add	r20, r20
    8198:	fe 01       	movw	r30, r28
    819a:	e2 0f       	add	r30, r18
    819c:	f3 1f       	adc	r31, r19
    819e:	2c e1       	ldi	r18, 0x1C	; 28
    81a0:	62 81       	ldd	r22, Z+2	; 0x02
    81a2:	8f 89       	ldd	r24, Y+23	; 0x17
    81a4:	98 8d       	ldd	r25, Y+24	; 0x18
    81a6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    81aa:	1f 5f       	subi	r17, 0xFF	; 255
    81ac:	8e 89       	ldd	r24, Y+22	; 0x16
    81ae:	18 17       	cp	r17, r24
    81b0:	58 f3       	brcs	.-42     	; 0x8188 <_ZN13einstellungen4drawEv+0x2c2>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    81b2:	8f 89       	ldd	r24, Y+23	; 0x17
    81b4:	98 8d       	ldd	r25, Y+24	; 0x18
    81b6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7Display9sendFrameEv>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    81ba:	df 91       	pop	r29
    81bc:	cf 91       	pop	r28
    81be:	1f 91       	pop	r17
    81c0:	0f 91       	pop	r16
    81c2:	ff 90       	pop	r15
    81c4:	ef 90       	pop	r14
    81c6:	08 95       	ret

000081c8 <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    81c8:	8d e8       	ldi	r24, 0x8D	; 141
    81ca:	9e e0       	ldi	r25, 0x0E	; 14
    81cc:	b5 d1       	rcall	.+874    	; 0x8538 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    81ce:	8c e8       	ldi	r24, 0x8C	; 140
    81d0:	9a e0       	ldi	r25, 0x0A	; 10
    81d2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    81d6:	80 e8       	ldi	r24, 0x80	; 128
    81d8:	9a e0       	ldi	r25, 0x0A	; 10
    81da:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN9InterfaceC1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    81de:	8b e7       	ldi	r24, 0x7B	; 123
    81e0:	99 e0       	ldi	r25, 0x09	; 9
    81e2:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <_ZN7LSM303DC1Ev>

#include "BMP180.h"
BMP180 druck;
    81e6:	8c e4       	ldi	r24, 0x4C	; 76
    81e8:	99 e0       	ldi	r25, 0x09	; 9
    81ea:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN6BMP180C1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    81ee:	41 e0       	ldi	r20, 0x01	; 1
    81f0:	62 e4       	ldi	r22, 0x42	; 66
    81f2:	86 e4       	ldi	r24, 0x46	; 70
    81f4:	99 e0       	ldi	r25, 0x09	; 9
    81f6:	28 d0       	rcall	.+80     	; 0x8248 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    81f8:	42 e0       	ldi	r20, 0x02	; 2
    81fa:	62 e4       	ldi	r22, 0x42	; 66
    81fc:	84 e4       	ldi	r24, 0x44	; 68
    81fe:	99 e0       	ldi	r25, 0x09	; 9
    8200:	23 d0       	rcall	.+70     	; 0x8248 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    8202:	47 e0       	ldi	r20, 0x07	; 7
    8204:	64 e4       	ldi	r22, 0x44	; 68
    8206:	82 e4       	ldi	r24, 0x42	; 66
    8208:	99 e0       	ldi	r25, 0x09	; 9
    820a:	1e c0       	rjmp	.+60     	; 0x8248 <_ZN6OutputC1Ehh>
    820c:	08 95       	ret

0000820e <_GLOBAL__sub_D__Znwj>:
    820e:	82 e4       	ldi	r24, 0x42	; 66
    8210:	99 e0       	ldi	r25, 0x09	; 9
    8212:	54 d0       	rcall	.+168    	; 0x82bc <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    8214:	84 e4       	ldi	r24, 0x44	; 68
    8216:	99 e0       	ldi	r25, 0x09	; 9
    8218:	51 d0       	rcall	.+162    	; 0x82bc <_ZN6OutputD1Ev>
BMP180 druck;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    821a:	86 e4       	ldi	r24, 0x46	; 70
    821c:	99 e0       	ldi	r25, 0x09	; 9
    821e:	4e d0       	rcall	.+156    	; 0x82bc <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "BMP180.h"
BMP180 druck;
    8220:	8c e4       	ldi	r24, 0x4C	; 76
    8222:	99 e0       	ldi	r25, 0x09	; 9
    8224:	0e 94 84 03 	call	0x708	; 0x708 <_ZN6BMP180D1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    8228:	8b e7       	ldi	r24, 0x7B	; 123
    822a:	99 e0       	ldi	r25, 0x09	; 9
    822c:	0e 94 84 27 	call	0x4f08	; 0x4f08 <_ZN7LSM303DD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    8230:	80 e8       	ldi	r24, 0x80	; 128
    8232:	9a e0       	ldi	r25, 0x0A	; 10
    8234:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    8238:	8c e8       	ldi	r24, 0x8C	; 140
    823a:	9a e0       	ldi	r25, 0x0A	; 10
    823c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    8240:	8d e8       	ldi	r24, 0x8D	; 141
    8242:	9e e0       	ldi	r25, 0x0E	; 14
    8244:	f5 c0       	rjmp	.+490    	; 0x8430 <_ZN3RTCD1Ev>
    8246:	08 95       	ret

00008248 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    8248:	fc 01       	movw	r30, r24
    824a:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    824c:	60 83       	st	Z, r22
	switch (Portpraefix)
    824e:	62 34       	cpi	r22, 0x42	; 66
    8250:	a1 f0       	breq	.+40     	; 0x827a <_ZN6OutputC1Ehh+0x32>
    8252:	18 f4       	brcc	.+6      	; 0x825a <_ZN6OutputC1Ehh+0x12>
    8254:	61 34       	cpi	r22, 0x41	; 65
    8256:	31 f0       	breq	.+12     	; 0x8264 <_ZN6OutputC1Ehh+0x1c>
    8258:	08 95       	ret
    825a:	63 34       	cpi	r22, 0x43	; 67
    825c:	c9 f0       	breq	.+50     	; 0x8290 <_ZN6OutputC1Ehh+0x48>
    825e:	64 34       	cpi	r22, 0x44	; 68
    8260:	11 f1       	breq	.+68     	; 0x82a6 <_ZN6OutputC1Ehh+0x5e>
    8262:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    8264:	21 b1       	in	r18, 0x01	; 1
    8266:	81 e0       	ldi	r24, 0x01	; 1
    8268:	90 e0       	ldi	r25, 0x00	; 0
    826a:	02 c0       	rjmp	.+4      	; 0x8270 <_ZN6OutputC1Ehh+0x28>
    826c:	88 0f       	add	r24, r24
    826e:	99 1f       	adc	r25, r25
    8270:	4a 95       	dec	r20
    8272:	e2 f7       	brpl	.-8      	; 0x826c <_ZN6OutputC1Ehh+0x24>
    8274:	82 2b       	or	r24, r18
    8276:	81 b9       	out	0x01, r24	; 1
			break;
    8278:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    827a:	24 b1       	in	r18, 0x04	; 4
    827c:	81 e0       	ldi	r24, 0x01	; 1
    827e:	90 e0       	ldi	r25, 0x00	; 0
    8280:	02 c0       	rjmp	.+4      	; 0x8286 <_ZN6OutputC1Ehh+0x3e>
    8282:	88 0f       	add	r24, r24
    8284:	99 1f       	adc	r25, r25
    8286:	4a 95       	dec	r20
    8288:	e2 f7       	brpl	.-8      	; 0x8282 <_ZN6OutputC1Ehh+0x3a>
    828a:	82 2b       	or	r24, r18
    828c:	84 b9       	out	0x04, r24	; 4
			break;
    828e:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    8290:	27 b1       	in	r18, 0x07	; 7
    8292:	81 e0       	ldi	r24, 0x01	; 1
    8294:	90 e0       	ldi	r25, 0x00	; 0
    8296:	02 c0       	rjmp	.+4      	; 0x829c <_ZN6OutputC1Ehh+0x54>
    8298:	88 0f       	add	r24, r24
    829a:	99 1f       	adc	r25, r25
    829c:	4a 95       	dec	r20
    829e:	e2 f7       	brpl	.-8      	; 0x8298 <_ZN6OutputC1Ehh+0x50>
    82a0:	82 2b       	or	r24, r18
    82a2:	87 b9       	out	0x07, r24	; 7
			break;
    82a4:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    82a6:	2a b1       	in	r18, 0x0a	; 10
    82a8:	81 e0       	ldi	r24, 0x01	; 1
    82aa:	90 e0       	ldi	r25, 0x00	; 0
    82ac:	02 c0       	rjmp	.+4      	; 0x82b2 <_ZN6OutputC1Ehh+0x6a>
    82ae:	88 0f       	add	r24, r24
    82b0:	99 1f       	adc	r25, r25
    82b2:	4a 95       	dec	r20
    82b4:	e2 f7       	brpl	.-8      	; 0x82ae <_ZN6OutputC1Ehh+0x66>
    82b6:	82 2b       	or	r24, r18
    82b8:	8a b9       	out	0x0a, r24	; 10
    82ba:	08 95       	ret

000082bc <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    82bc:	08 95       	ret

000082be <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    82be:	fc 01       	movw	r30, r24
	switch (Port)
    82c0:	90 81       	ld	r25, Z
    82c2:	92 34       	cpi	r25, 0x42	; 66
    82c4:	a9 f0       	breq	.+42     	; 0x82f0 <_ZN6Output2onEv+0x32>
    82c6:	18 f4       	brcc	.+6      	; 0x82ce <_ZN6Output2onEv+0x10>
    82c8:	91 34       	cpi	r25, 0x41	; 65
    82ca:	31 f0       	breq	.+12     	; 0x82d8 <_ZN6Output2onEv+0x1a>
    82cc:	08 95       	ret
    82ce:	93 34       	cpi	r25, 0x43	; 67
    82d0:	d9 f0       	breq	.+54     	; 0x8308 <_ZN6Output2onEv+0x4a>
    82d2:	94 34       	cpi	r25, 0x44	; 68
    82d4:	29 f1       	breq	.+74     	; 0x8320 <_ZN6Output2onEv+0x62>
    82d6:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    82d8:	22 b1       	in	r18, 0x02	; 2
    82da:	81 e0       	ldi	r24, 0x01	; 1
    82dc:	90 e0       	ldi	r25, 0x00	; 0
    82de:	01 80       	ldd	r0, Z+1	; 0x01
    82e0:	02 c0       	rjmp	.+4      	; 0x82e6 <_ZN6Output2onEv+0x28>
    82e2:	88 0f       	add	r24, r24
    82e4:	99 1f       	adc	r25, r25
    82e6:	0a 94       	dec	r0
    82e8:	e2 f7       	brpl	.-8      	; 0x82e2 <_ZN6Output2onEv+0x24>
    82ea:	82 2b       	or	r24, r18
    82ec:	82 b9       	out	0x02, r24	; 2
			break;
    82ee:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    82f0:	25 b1       	in	r18, 0x05	; 5
    82f2:	81 e0       	ldi	r24, 0x01	; 1
    82f4:	90 e0       	ldi	r25, 0x00	; 0
    82f6:	01 80       	ldd	r0, Z+1	; 0x01
    82f8:	02 c0       	rjmp	.+4      	; 0x82fe <_ZN6Output2onEv+0x40>
    82fa:	88 0f       	add	r24, r24
    82fc:	99 1f       	adc	r25, r25
    82fe:	0a 94       	dec	r0
    8300:	e2 f7       	brpl	.-8      	; 0x82fa <_ZN6Output2onEv+0x3c>
    8302:	82 2b       	or	r24, r18
    8304:	85 b9       	out	0x05, r24	; 5
			break;
    8306:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    8308:	28 b1       	in	r18, 0x08	; 8
    830a:	81 e0       	ldi	r24, 0x01	; 1
    830c:	90 e0       	ldi	r25, 0x00	; 0
    830e:	01 80       	ldd	r0, Z+1	; 0x01
    8310:	02 c0       	rjmp	.+4      	; 0x8316 <_ZN6Output2onEv+0x58>
    8312:	88 0f       	add	r24, r24
    8314:	99 1f       	adc	r25, r25
    8316:	0a 94       	dec	r0
    8318:	e2 f7       	brpl	.-8      	; 0x8312 <_ZN6Output2onEv+0x54>
    831a:	82 2b       	or	r24, r18
    831c:	88 b9       	out	0x08, r24	; 8
			break;
    831e:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    8320:	2b b1       	in	r18, 0x0b	; 11
    8322:	81 e0       	ldi	r24, 0x01	; 1
    8324:	90 e0       	ldi	r25, 0x00	; 0
    8326:	01 80       	ldd	r0, Z+1	; 0x01
    8328:	02 c0       	rjmp	.+4      	; 0x832e <_ZN6Output2onEv+0x70>
    832a:	88 0f       	add	r24, r24
    832c:	99 1f       	adc	r25, r25
    832e:	0a 94       	dec	r0
    8330:	e2 f7       	brpl	.-8      	; 0x832a <_ZN6Output2onEv+0x6c>
    8332:	82 2b       	or	r24, r18
    8334:	8b b9       	out	0x0b, r24	; 11
    8336:	08 95       	ret

00008338 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    8338:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    833a:	90 81       	ld	r25, Z
    833c:	92 34       	cpi	r25, 0x42	; 66
    833e:	a1 f0       	breq	.+40     	; 0x8368 <_ZN6Output4isonEv+0x30>
    8340:	18 f4       	brcc	.+6      	; 0x8348 <_ZN6Output4isonEv+0x10>
    8342:	91 34       	cpi	r25, 0x41	; 65
    8344:	31 f0       	breq	.+12     	; 0x8352 <_ZN6Output4isonEv+0x1a>
    8346:	31 c0       	rjmp	.+98     	; 0x83aa <_ZN6Output4isonEv+0x72>
    8348:	93 34       	cpi	r25, 0x43	; 67
    834a:	c9 f0       	breq	.+50     	; 0x837e <_ZN6Output4isonEv+0x46>
    834c:	94 34       	cpi	r25, 0x44	; 68
    834e:	11 f1       	breq	.+68     	; 0x8394 <_ZN6Output4isonEv+0x5c>
    8350:	2c c0       	rjmp	.+88     	; 0x83aa <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    8352:	22 b1       	in	r18, 0x02	; 2
    8354:	30 e0       	ldi	r19, 0x00	; 0
    8356:	c9 01       	movw	r24, r18
    8358:	01 80       	ldd	r0, Z+1	; 0x01
    835a:	02 c0       	rjmp	.+4      	; 0x8360 <_ZN6Output4isonEv+0x28>
    835c:	95 95       	asr	r25
    835e:	87 95       	ror	r24
    8360:	0a 94       	dec	r0
    8362:	e2 f7       	brpl	.-8      	; 0x835c <_ZN6Output4isonEv+0x24>
    8364:	81 70       	andi	r24, 0x01	; 1
    8366:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    8368:	25 b1       	in	r18, 0x05	; 5
    836a:	30 e0       	ldi	r19, 0x00	; 0
    836c:	c9 01       	movw	r24, r18
    836e:	01 80       	ldd	r0, Z+1	; 0x01
    8370:	02 c0       	rjmp	.+4      	; 0x8376 <_ZN6Output4isonEv+0x3e>
    8372:	95 95       	asr	r25
    8374:	87 95       	ror	r24
    8376:	0a 94       	dec	r0
    8378:	e2 f7       	brpl	.-8      	; 0x8372 <_ZN6Output4isonEv+0x3a>
    837a:	81 70       	andi	r24, 0x01	; 1
    837c:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    837e:	28 b1       	in	r18, 0x08	; 8
    8380:	30 e0       	ldi	r19, 0x00	; 0
    8382:	c9 01       	movw	r24, r18
    8384:	01 80       	ldd	r0, Z+1	; 0x01
    8386:	02 c0       	rjmp	.+4      	; 0x838c <_ZN6Output4isonEv+0x54>
    8388:	95 95       	asr	r25
    838a:	87 95       	ror	r24
    838c:	0a 94       	dec	r0
    838e:	e2 f7       	brpl	.-8      	; 0x8388 <_ZN6Output4isonEv+0x50>
    8390:	81 70       	andi	r24, 0x01	; 1
    8392:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    8394:	2b b1       	in	r18, 0x0b	; 11
    8396:	30 e0       	ldi	r19, 0x00	; 0
    8398:	c9 01       	movw	r24, r18
    839a:	01 80       	ldd	r0, Z+1	; 0x01
    839c:	02 c0       	rjmp	.+4      	; 0x83a2 <_ZN6Output4isonEv+0x6a>
    839e:	95 95       	asr	r25
    83a0:	87 95       	ror	r24
    83a2:	0a 94       	dec	r0
    83a4:	e2 f7       	brpl	.-8      	; 0x839e <_ZN6Output4isonEv+0x66>
    83a6:	81 70       	andi	r24, 0x01	; 1
    83a8:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    83aa:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    83ac:	08 95       	ret

000083ae <_ZN6Output3offEv>:

void Output::off(){
    83ae:	fc 01       	movw	r30, r24
	switch (Port)
    83b0:	90 81       	ld	r25, Z
    83b2:	92 34       	cpi	r25, 0x42	; 66
    83b4:	b1 f0       	breq	.+44     	; 0x83e2 <_ZN6Output3offEv+0x34>
    83b6:	18 f4       	brcc	.+6      	; 0x83be <_ZN6Output3offEv+0x10>
    83b8:	91 34       	cpi	r25, 0x41	; 65
    83ba:	31 f0       	breq	.+12     	; 0x83c8 <_ZN6Output3offEv+0x1a>
    83bc:	08 95       	ret
    83be:	93 34       	cpi	r25, 0x43	; 67
    83c0:	e9 f0       	breq	.+58     	; 0x83fc <_ZN6Output3offEv+0x4e>
    83c2:	94 34       	cpi	r25, 0x44	; 68
    83c4:	41 f1       	breq	.+80     	; 0x8416 <_ZN6Output3offEv+0x68>
    83c6:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    83c8:	22 b1       	in	r18, 0x02	; 2
    83ca:	81 e0       	ldi	r24, 0x01	; 1
    83cc:	90 e0       	ldi	r25, 0x00	; 0
    83ce:	01 80       	ldd	r0, Z+1	; 0x01
    83d0:	02 c0       	rjmp	.+4      	; 0x83d6 <_ZN6Output3offEv+0x28>
    83d2:	88 0f       	add	r24, r24
    83d4:	99 1f       	adc	r25, r25
    83d6:	0a 94       	dec	r0
    83d8:	e2 f7       	brpl	.-8      	; 0x83d2 <_ZN6Output3offEv+0x24>
    83da:	80 95       	com	r24
    83dc:	82 23       	and	r24, r18
    83de:	82 b9       	out	0x02, r24	; 2
			break;
    83e0:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    83e2:	25 b1       	in	r18, 0x05	; 5
    83e4:	81 e0       	ldi	r24, 0x01	; 1
    83e6:	90 e0       	ldi	r25, 0x00	; 0
    83e8:	01 80       	ldd	r0, Z+1	; 0x01
    83ea:	02 c0       	rjmp	.+4      	; 0x83f0 <_ZN6Output3offEv+0x42>
    83ec:	88 0f       	add	r24, r24
    83ee:	99 1f       	adc	r25, r25
    83f0:	0a 94       	dec	r0
    83f2:	e2 f7       	brpl	.-8      	; 0x83ec <_ZN6Output3offEv+0x3e>
    83f4:	80 95       	com	r24
    83f6:	82 23       	and	r24, r18
    83f8:	85 b9       	out	0x05, r24	; 5
			break;
    83fa:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    83fc:	28 b1       	in	r18, 0x08	; 8
    83fe:	81 e0       	ldi	r24, 0x01	; 1
    8400:	90 e0       	ldi	r25, 0x00	; 0
    8402:	01 80       	ldd	r0, Z+1	; 0x01
    8404:	02 c0       	rjmp	.+4      	; 0x840a <_ZN6Output3offEv+0x5c>
    8406:	88 0f       	add	r24, r24
    8408:	99 1f       	adc	r25, r25
    840a:	0a 94       	dec	r0
    840c:	e2 f7       	brpl	.-8      	; 0x8406 <_ZN6Output3offEv+0x58>
    840e:	80 95       	com	r24
    8410:	82 23       	and	r24, r18
    8412:	88 b9       	out	0x08, r24	; 8
			break;
    8414:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    8416:	2b b1       	in	r18, 0x0b	; 11
    8418:	81 e0       	ldi	r24, 0x01	; 1
    841a:	90 e0       	ldi	r25, 0x00	; 0
    841c:	01 80       	ldd	r0, Z+1	; 0x01
    841e:	02 c0       	rjmp	.+4      	; 0x8424 <_ZN6Output3offEv+0x76>
    8420:	88 0f       	add	r24, r24
    8422:	99 1f       	adc	r25, r25
    8424:	0a 94       	dec	r0
    8426:	e2 f7       	brpl	.-8      	; 0x8420 <_ZN6Output3offEv+0x72>
    8428:	80 95       	com	r24
    842a:	82 23       	and	r24, r18
    842c:	8b b9       	out	0x0b, r24	; 11
    842e:	08 95       	ret

00008430 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    8430:	08 95       	ret

00008432 <_ZN3RTC6WeckerEv>:
    8432:	fc 01       	movw	r30, r24
    8434:	80 8d       	ldd	r24, Z+24	; 0x18
    8436:	83 ff       	sbrs	r24, 3
    8438:	0c c0       	rjmp	.+24     	; 0x8452 <_ZN3RTC6WeckerEv+0x20>
    843a:	84 fd       	sbrc	r24, 4
    843c:	0a c0       	rjmp	.+20     	; 0x8452 <_ZN3RTC6WeckerEv+0x20>
    843e:	22 8d       	ldd	r18, Z+26	; 0x1a
    8440:	90 89       	ldd	r25, Z+16	; 0x10
    8442:	29 13       	cpse	r18, r25
    8444:	06 c0       	rjmp	.+12     	; 0x8452 <_ZN3RTC6WeckerEv+0x20>
    8446:	21 8d       	ldd	r18, Z+25	; 0x19
    8448:	91 89       	ldd	r25, Z+17	; 0x11
    844a:	29 13       	cpse	r18, r25
    844c:	02 c0       	rjmp	.+4      	; 0x8452 <_ZN3RTC6WeckerEv+0x20>
    844e:	80 61       	ori	r24, 0x10	; 16
    8450:	80 8f       	std	Z+24, r24	; 0x18
    8452:	08 95       	ret

00008454 <_ZN3RTC14ausgabezeitneuEv>:
    8454:	fc 01       	movw	r30, r24
    8456:	20 89       	ldd	r18, Z+16	; 0x10
    8458:	9d ec       	ldi	r25, 0xCD	; 205
    845a:	29 9f       	mul	r18, r25
    845c:	81 2d       	mov	r24, r1
    845e:	11 24       	eor	r1, r1
    8460:	86 95       	lsr	r24
    8462:	86 95       	lsr	r24
    8464:	86 95       	lsr	r24
    8466:	30 e3       	ldi	r19, 0x30	; 48
    8468:	38 0f       	add	r19, r24
    846a:	30 83       	st	Z, r19
    846c:	88 0f       	add	r24, r24
    846e:	38 2f       	mov	r19, r24
    8470:	33 0f       	add	r19, r19
    8472:	33 0f       	add	r19, r19
    8474:	83 0f       	add	r24, r19
    8476:	28 1b       	sub	r18, r24
    8478:	20 5d       	subi	r18, 0xD0	; 208
    847a:	21 83       	std	Z+1, r18	; 0x01
    847c:	21 89       	ldd	r18, Z+17	; 0x11
    847e:	29 9f       	mul	r18, r25
    8480:	81 2d       	mov	r24, r1
    8482:	11 24       	eor	r1, r1
    8484:	86 95       	lsr	r24
    8486:	86 95       	lsr	r24
    8488:	86 95       	lsr	r24
    848a:	30 e3       	ldi	r19, 0x30	; 48
    848c:	38 0f       	add	r19, r24
    848e:	33 83       	std	Z+3, r19	; 0x03
    8490:	88 0f       	add	r24, r24
    8492:	38 2f       	mov	r19, r24
    8494:	33 0f       	add	r19, r19
    8496:	33 0f       	add	r19, r19
    8498:	83 0f       	add	r24, r19
    849a:	28 1b       	sub	r18, r24
    849c:	20 5d       	subi	r18, 0xD0	; 208
    849e:	24 83       	std	Z+4, r18	; 0x04
    84a0:	82 89       	ldd	r24, Z+18	; 0x12
    84a2:	89 9f       	mul	r24, r25
    84a4:	91 2d       	mov	r25, r1
    84a6:	11 24       	eor	r1, r1
    84a8:	96 95       	lsr	r25
    84aa:	96 95       	lsr	r25
    84ac:	96 95       	lsr	r25
    84ae:	20 e3       	ldi	r18, 0x30	; 48
    84b0:	29 0f       	add	r18, r25
    84b2:	26 83       	std	Z+6, r18	; 0x06
    84b4:	99 0f       	add	r25, r25
    84b6:	29 2f       	mov	r18, r25
    84b8:	22 0f       	add	r18, r18
    84ba:	22 0f       	add	r18, r18
    84bc:	92 0f       	add	r25, r18
    84be:	89 1b       	sub	r24, r25
    84c0:	80 5d       	subi	r24, 0xD0	; 208
    84c2:	87 83       	std	Z+7, r24	; 0x07
    84c4:	08 95       	ret

000084c6 <_ZN3RTC15ausgabedatumneuEv>:
    84c6:	fc 01       	movw	r30, r24
    84c8:	24 89       	ldd	r18, Z+20	; 0x14
    84ca:	9d ec       	ldi	r25, 0xCD	; 205
    84cc:	29 9f       	mul	r18, r25
    84ce:	81 2d       	mov	r24, r1
    84d0:	11 24       	eor	r1, r1
    84d2:	86 95       	lsr	r24
    84d4:	86 95       	lsr	r24
    84d6:	86 95       	lsr	r24
    84d8:	30 e3       	ldi	r19, 0x30	; 48
    84da:	38 0f       	add	r19, r24
    84dc:	30 87       	std	Z+8, r19	; 0x08
    84de:	88 0f       	add	r24, r24
    84e0:	38 2f       	mov	r19, r24
    84e2:	33 0f       	add	r19, r19
    84e4:	33 0f       	add	r19, r19
    84e6:	83 0f       	add	r24, r19
    84e8:	28 1b       	sub	r18, r24
    84ea:	20 5d       	subi	r18, 0xD0	; 208
    84ec:	21 87       	std	Z+9, r18	; 0x09
    84ee:	26 89       	ldd	r18, Z+22	; 0x16
    84f0:	29 9f       	mul	r18, r25
    84f2:	81 2d       	mov	r24, r1
    84f4:	11 24       	eor	r1, r1
    84f6:	86 95       	lsr	r24
    84f8:	86 95       	lsr	r24
    84fa:	86 95       	lsr	r24
    84fc:	30 e3       	ldi	r19, 0x30	; 48
    84fe:	38 0f       	add	r19, r24
    8500:	33 87       	std	Z+11, r19	; 0x0b
    8502:	88 0f       	add	r24, r24
    8504:	38 2f       	mov	r19, r24
    8506:	33 0f       	add	r19, r19
    8508:	33 0f       	add	r19, r19
    850a:	83 0f       	add	r24, r19
    850c:	28 1b       	sub	r18, r24
    850e:	20 5d       	subi	r18, 0xD0	; 208
    8510:	24 87       	std	Z+12, r18	; 0x0c
    8512:	87 89       	ldd	r24, Z+23	; 0x17
    8514:	89 9f       	mul	r24, r25
    8516:	91 2d       	mov	r25, r1
    8518:	11 24       	eor	r1, r1
    851a:	96 95       	lsr	r25
    851c:	96 95       	lsr	r25
    851e:	96 95       	lsr	r25
    8520:	20 e3       	ldi	r18, 0x30	; 48
    8522:	29 0f       	add	r18, r25
    8524:	26 87       	std	Z+14, r18	; 0x0e
    8526:	99 0f       	add	r25, r25
    8528:	29 2f       	mov	r18, r25
    852a:	22 0f       	add	r18, r18
    852c:	22 0f       	add	r18, r18
    852e:	92 0f       	add	r25, r18
    8530:	89 1b       	sub	r24, r25
    8532:	80 5d       	subi	r24, 0xD0	; 208
    8534:	87 87       	std	Z+15, r24	; 0x0f
    8536:	08 95       	ret

00008538 <_ZN3RTCC1Ev>:
    8538:	cf 93       	push	r28
    853a:	df 93       	push	r29
    853c:	ec 01       	movw	r28, r24
    853e:	1a 8a       	std	Y+18, r1	; 0x12
    8540:	1b 8a       	std	Y+19, r1	; 0x13
    8542:	19 8a       	std	Y+17, r1	; 0x11
    8544:	18 8a       	std	Y+16, r1	; 0x10
    8546:	1c 8a       	std	Y+20, r1	; 0x14
    8548:	1e 8a       	std	Y+22, r1	; 0x16
    854a:	1f 8a       	std	Y+23, r1	; 0x17
    854c:	1d 8a       	std	Y+21, r1	; 0x15
    854e:	88 e2       	ldi	r24, 0x28	; 40
    8550:	89 8f       	std	Y+25, r24	; 0x19
    8552:	8a e0       	ldi	r24, 0x0A	; 10
    8554:	8a 8f       	std	Y+26, r24	; 0x1a
    8556:	1c 8e       	std	Y+28, r1	; 0x1c
    8558:	1b 8e       	std	Y+27, r1	; 0x1b
    855a:	1e 8e       	std	Y+30, r1	; 0x1e
    855c:	1d 8e       	std	Y+29, r1	; 0x1d
    855e:	fe 01       	movw	r30, r28
    8560:	ce 01       	movw	r24, r28
    8562:	08 96       	adiw	r24, 0x08	; 8
    8564:	dc 01       	movw	r26, r24
    8566:	11 92       	st	Z+, r1
    8568:	1d 92       	st	X+, r1
    856a:	e8 17       	cp	r30, r24
    856c:	f9 07       	cpc	r31, r25
    856e:	d9 f7       	brne	.-10     	; 0x8566 <_ZN3RTCC1Ev+0x2e>
    8570:	8a e3       	ldi	r24, 0x3A	; 58
    8572:	8a 83       	std	Y+2, r24	; 0x02
    8574:	8d 83       	std	Y+5, r24	; 0x05
    8576:	8e e2       	ldi	r24, 0x2E	; 46
    8578:	8a 87       	std	Y+10, r24	; 0x0a
    857a:	8d 87       	std	Y+13, r24	; 0x0d
    857c:	ce 01       	movw	r24, r28
    857e:	6a df       	rcall	.-300    	; 0x8454 <_ZN3RTC14ausgabezeitneuEv>
    8580:	ce 01       	movw	r24, r28
    8582:	a1 df       	rcall	.-190    	; 0x84c6 <_ZN3RTC15ausgabedatumneuEv>
    8584:	df 91       	pop	r29
    8586:	cf 91       	pop	r28
    8588:	08 95       	ret

0000858a <_ZN3RTC8kalenderEv>:
    858a:	fc 01       	movw	r30, r24
    858c:	26 89       	ldd	r18, Z+22	; 0x16
    858e:	32 2f       	mov	r19, r18
    8590:	3d 7f       	andi	r19, 0xFD	; 253
    8592:	34 30       	cpi	r19, 0x04	; 4
    8594:	11 f0       	breq	.+4      	; 0x859a <_ZN3RTC8kalenderEv+0x10>
    8596:	39 30       	cpi	r19, 0x09	; 9
    8598:	91 f4       	brne	.+36     	; 0x85be <_ZN3RTC8kalenderEv+0x34>
    859a:	fc 01       	movw	r30, r24
    859c:	34 89       	ldd	r19, Z+20	; 0x14
    859e:	3f 31       	cpi	r19, 0x1F	; 31
    85a0:	b0 f1       	brcs	.+108    	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85a2:	31 e0       	ldi	r19, 0x01	; 1
    85a4:	34 8b       	std	Z+20, r19	; 0x14
    85a6:	2f 5f       	subi	r18, 0xFF	; 255
    85a8:	2d 30       	cpi	r18, 0x0D	; 13
    85aa:	10 f4       	brcc	.+4      	; 0x85b0 <_ZN3RTC8kalenderEv+0x26>
    85ac:	26 8b       	std	Z+22, r18	; 0x16
    85ae:	2f c0       	rjmp	.+94     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85b0:	21 e0       	ldi	r18, 0x01	; 1
    85b2:	fc 01       	movw	r30, r24
    85b4:	26 8b       	std	Z+22, r18	; 0x16
    85b6:	27 89       	ldd	r18, Z+23	; 0x17
    85b8:	2f 5f       	subi	r18, 0xFF	; 255
    85ba:	27 8b       	std	Z+23, r18	; 0x17
    85bc:	28 c0       	rjmp	.+80     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85be:	22 30       	cpi	r18, 0x02	; 2
    85c0:	a9 f4       	brne	.+42     	; 0x85ec <_ZN3RTC8kalenderEv+0x62>
    85c2:	fc 01       	movw	r30, r24
    85c4:	27 89       	ldd	r18, Z+23	; 0x17
    85c6:	23 70       	andi	r18, 0x03	; 3
    85c8:	41 f4       	brne	.+16     	; 0x85da <_ZN3RTC8kalenderEv+0x50>
    85ca:	24 89       	ldd	r18, Z+20	; 0x14
    85cc:	2e 31       	cpi	r18, 0x1E	; 30
    85ce:	f8 f0       	brcs	.+62     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85d0:	21 e0       	ldi	r18, 0x01	; 1
    85d2:	24 8b       	std	Z+20, r18	; 0x14
    85d4:	23 e0       	ldi	r18, 0x03	; 3
    85d6:	26 8b       	std	Z+22, r18	; 0x16
    85d8:	1a c0       	rjmp	.+52     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85da:	fc 01       	movw	r30, r24
    85dc:	24 89       	ldd	r18, Z+20	; 0x14
    85de:	2d 31       	cpi	r18, 0x1D	; 29
    85e0:	b0 f0       	brcs	.+44     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85e2:	21 e0       	ldi	r18, 0x01	; 1
    85e4:	24 8b       	std	Z+20, r18	; 0x14
    85e6:	23 e0       	ldi	r18, 0x03	; 3
    85e8:	26 8b       	std	Z+22, r18	; 0x16
    85ea:	11 c0       	rjmp	.+34     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85ec:	fc 01       	movw	r30, r24
    85ee:	34 89       	ldd	r19, Z+20	; 0x14
    85f0:	30 32       	cpi	r19, 0x20	; 32
    85f2:	68 f0       	brcs	.+26     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    85f4:	31 e0       	ldi	r19, 0x01	; 1
    85f6:	34 8b       	std	Z+20, r19	; 0x14
    85f8:	2f 5f       	subi	r18, 0xFF	; 255
    85fa:	2d 30       	cpi	r18, 0x0D	; 13
    85fc:	10 f4       	brcc	.+4      	; 0x8602 <_ZN3RTC8kalenderEv+0x78>
    85fe:	26 8b       	std	Z+22, r18	; 0x16
    8600:	06 c0       	rjmp	.+12     	; 0x860e <_ZN3RTC8kalenderEv+0x84>
    8602:	21 e0       	ldi	r18, 0x01	; 1
    8604:	fc 01       	movw	r30, r24
    8606:	26 8b       	std	Z+22, r18	; 0x16
    8608:	27 89       	ldd	r18, Z+23	; 0x17
    860a:	2f 5f       	subi	r18, 0xFF	; 255
    860c:	27 8b       	std	Z+23, r18	; 0x17
    860e:	5b cf       	rjmp	.-330    	; 0x84c6 <_ZN3RTC15ausgabedatumneuEv>
    8610:	08 95       	ret

00008612 <_ZN3RTC4zeitEv>:
    8612:	cf 93       	push	r28
    8614:	df 93       	push	r29
    8616:	ec 01       	movw	r28, r24
    8618:	8a 89       	ldd	r24, Y+18	; 0x12
    861a:	8c 53       	subi	r24, 0x3C	; 60
    861c:	8d 38       	cpi	r24, 0x8D	; 141
    861e:	c0 f4       	brcc	.+48     	; 0x8650 <_ZN3RTC4zeitEv+0x3e>
    8620:	1a 8a       	std	Y+18, r1	; 0x12
    8622:	89 89       	ldd	r24, Y+17	; 0x11
    8624:	8f 5f       	subi	r24, 0xFF	; 255
    8626:	89 8b       	std	Y+17, r24	; 0x11
    8628:	98 8d       	ldd	r25, Y+24	; 0x18
    862a:	94 60       	ori	r25, 0x04	; 4
    862c:	98 8f       	std	Y+24, r25	; 0x18
    862e:	8c 33       	cpi	r24, 0x3C	; 60
    8630:	68 f0       	brcs	.+26     	; 0x864c <_ZN3RTC4zeitEv+0x3a>
    8632:	19 8a       	std	Y+17, r1	; 0x11
    8634:	88 89       	ldd	r24, Y+16	; 0x10
    8636:	8f 5f       	subi	r24, 0xFF	; 255
    8638:	88 31       	cpi	r24, 0x18	; 24
    863a:	10 f4       	brcc	.+4      	; 0x8640 <_ZN3RTC4zeitEv+0x2e>
    863c:	88 8b       	std	Y+16, r24	; 0x10
    863e:	06 c0       	rjmp	.+12     	; 0x864c <_ZN3RTC4zeitEv+0x3a>
    8640:	18 8a       	std	Y+16, r1	; 0x10
    8642:	8c 89       	ldd	r24, Y+20	; 0x14
    8644:	8f 5f       	subi	r24, 0xFF	; 255
    8646:	8c 8b       	std	Y+20, r24	; 0x14
    8648:	ce 01       	movw	r24, r28
    864a:	9f df       	rcall	.-194    	; 0x858a <_ZN3RTC8kalenderEv>
    864c:	ce 01       	movw	r24, r28
    864e:	f1 de       	rcall	.-542    	; 0x8432 <_ZN3RTC6WeckerEv>
    8650:	ce 01       	movw	r24, r28
    8652:	00 df       	rcall	.-512    	; 0x8454 <_ZN3RTC14ausgabezeitneuEv>
    8654:	88 8d       	ldd	r24, Y+24	; 0x18
    8656:	85 ff       	sbrs	r24, 5
    8658:	0b c0       	rjmp	.+22     	; 0x8670 <_ZN3RTC4zeitEv+0x5e>
    865a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    865c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    865e:	21 50       	subi	r18, 0x01	; 1
    8660:	31 09       	sbc	r19, r1
    8662:	3c 8f       	std	Y+28, r19	; 0x1c
    8664:	2b 8f       	std	Y+27, r18	; 0x1b
    8666:	23 2b       	or	r18, r19
    8668:	19 f4       	brne	.+6      	; 0x8670 <_ZN3RTC4zeitEv+0x5e>
    866a:	8f 7d       	andi	r24, 0xDF	; 223
    866c:	81 60       	ori	r24, 0x01	; 1
    866e:	88 8f       	std	Y+24, r24	; 0x18
    8670:	88 8d       	ldd	r24, Y+24	; 0x18
    8672:	86 ff       	sbrs	r24, 6
    8674:	05 c0       	rjmp	.+10     	; 0x8680 <_ZN3RTC4zeitEv+0x6e>
    8676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8678:	9e 8d       	ldd	r25, Y+30	; 0x1e
    867a:	01 96       	adiw	r24, 0x01	; 1
    867c:	9e 8f       	std	Y+30, r25	; 0x1e
    867e:	8d 8f       	std	Y+29, r24	; 0x1d
    8680:	80 e0       	ldi	r24, 0x00	; 0
    8682:	df 91       	pop	r29
    8684:	cf 91       	pop	r28
    8686:	08 95       	ret

00008688 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    8688:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    868a:	80 e3       	ldi	r24, 0x30	; 48
    868c:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    868e:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    8690:	9a e3       	ldi	r25, 0x3A	; 58
    8692:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    8694:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    8696:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    8698:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    869a:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    869c:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    869e:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    86a0:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    86a4:	e6 eb       	ldi	r30, 0xB6	; 182
    86a6:	f0 e0       	ldi	r31, 0x00	; 0
    86a8:	80 81       	ld	r24, Z
    86aa:	80 62       	ori	r24, 0x20	; 32
    86ac:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    86ae:	81 e0       	ldi	r24, 0x01	; 1
    86b0:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    86b4:	85 e0       	ldi	r24, 0x05	; 5
    86b6:	80 93 b1 00 	sts	0x00B1, r24
    86ba:	08 95       	ret

000086bc <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    86bc:	e1 eb       	ldi	r30, 0xB1	; 177
    86be:	f0 e0       	ldi	r31, 0x00	; 0
    86c0:	80 81       	ld	r24, Z
    86c2:	89 7f       	andi	r24, 0xF9	; 249
    86c4:	80 83       	st	Z, r24
    86c6:	08 95       	ret

000086c8 <__subsf3>:
    86c8:	50 58       	subi	r21, 0x80	; 128

000086ca <__addsf3>:
    86ca:	bb 27       	eor	r27, r27
    86cc:	aa 27       	eor	r26, r26
    86ce:	0e d0       	rcall	.+28     	; 0x86ec <__addsf3x>
    86d0:	c1 c1       	rjmp	.+898    	; 0x8a54 <__fp_round>
    86d2:	8a d1       	rcall	.+788    	; 0x89e8 <__fp_pscA>
    86d4:	30 f0       	brcs	.+12     	; 0x86e2 <__addsf3+0x18>
    86d6:	8f d1       	rcall	.+798    	; 0x89f6 <__fp_pscB>
    86d8:	20 f0       	brcs	.+8      	; 0x86e2 <__addsf3+0x18>
    86da:	31 f4       	brne	.+12     	; 0x86e8 <__addsf3+0x1e>
    86dc:	9f 3f       	cpi	r25, 0xFF	; 255
    86de:	11 f4       	brne	.+4      	; 0x86e4 <__addsf3+0x1a>
    86e0:	1e f4       	brtc	.+6      	; 0x86e8 <__addsf3+0x1e>
    86e2:	5a c1       	rjmp	.+692    	; 0x8998 <__fp_nan>
    86e4:	0e f4       	brtc	.+2      	; 0x86e8 <__addsf3+0x1e>
    86e6:	e0 95       	com	r30
    86e8:	e7 fb       	bst	r30, 7
    86ea:	50 c1       	rjmp	.+672    	; 0x898c <__fp_inf>

000086ec <__addsf3x>:
    86ec:	e9 2f       	mov	r30, r25
    86ee:	d4 d1       	rcall	.+936    	; 0x8a98 <__fp_split3>
    86f0:	80 f3       	brcs	.-32     	; 0x86d2 <__addsf3+0x8>
    86f2:	ba 17       	cp	r27, r26
    86f4:	62 07       	cpc	r22, r18
    86f6:	73 07       	cpc	r23, r19
    86f8:	84 07       	cpc	r24, r20
    86fa:	95 07       	cpc	r25, r21
    86fc:	18 f0       	brcs	.+6      	; 0x8704 <__addsf3x+0x18>
    86fe:	71 f4       	brne	.+28     	; 0x871c <__addsf3x+0x30>
    8700:	9e f5       	brtc	.+102    	; 0x8768 <__addsf3x+0x7c>
    8702:	ec c1       	rjmp	.+984    	; 0x8adc <__fp_zero>
    8704:	0e f4       	brtc	.+2      	; 0x8708 <__addsf3x+0x1c>
    8706:	e0 95       	com	r30
    8708:	0b 2e       	mov	r0, r27
    870a:	ba 2f       	mov	r27, r26
    870c:	a0 2d       	mov	r26, r0
    870e:	0b 01       	movw	r0, r22
    8710:	b9 01       	movw	r22, r18
    8712:	90 01       	movw	r18, r0
    8714:	0c 01       	movw	r0, r24
    8716:	ca 01       	movw	r24, r20
    8718:	a0 01       	movw	r20, r0
    871a:	11 24       	eor	r1, r1
    871c:	ff 27       	eor	r31, r31
    871e:	59 1b       	sub	r21, r25
    8720:	99 f0       	breq	.+38     	; 0x8748 <__addsf3x+0x5c>
    8722:	59 3f       	cpi	r21, 0xF9	; 249
    8724:	50 f4       	brcc	.+20     	; 0x873a <__addsf3x+0x4e>
    8726:	50 3e       	cpi	r21, 0xE0	; 224
    8728:	68 f1       	brcs	.+90     	; 0x8784 <__addsf3x+0x98>
    872a:	1a 16       	cp	r1, r26
    872c:	f0 40       	sbci	r31, 0x00	; 0
    872e:	a2 2f       	mov	r26, r18
    8730:	23 2f       	mov	r18, r19
    8732:	34 2f       	mov	r19, r20
    8734:	44 27       	eor	r20, r20
    8736:	58 5f       	subi	r21, 0xF8	; 248
    8738:	f3 cf       	rjmp	.-26     	; 0x8720 <__addsf3x+0x34>
    873a:	46 95       	lsr	r20
    873c:	37 95       	ror	r19
    873e:	27 95       	ror	r18
    8740:	a7 95       	ror	r26
    8742:	f0 40       	sbci	r31, 0x00	; 0
    8744:	53 95       	inc	r21
    8746:	c9 f7       	brne	.-14     	; 0x873a <__addsf3x+0x4e>
    8748:	7e f4       	brtc	.+30     	; 0x8768 <__addsf3x+0x7c>
    874a:	1f 16       	cp	r1, r31
    874c:	ba 0b       	sbc	r27, r26
    874e:	62 0b       	sbc	r22, r18
    8750:	73 0b       	sbc	r23, r19
    8752:	84 0b       	sbc	r24, r20
    8754:	ba f0       	brmi	.+46     	; 0x8784 <__addsf3x+0x98>
    8756:	91 50       	subi	r25, 0x01	; 1
    8758:	a1 f0       	breq	.+40     	; 0x8782 <__addsf3x+0x96>
    875a:	ff 0f       	add	r31, r31
    875c:	bb 1f       	adc	r27, r27
    875e:	66 1f       	adc	r22, r22
    8760:	77 1f       	adc	r23, r23
    8762:	88 1f       	adc	r24, r24
    8764:	c2 f7       	brpl	.-16     	; 0x8756 <__addsf3x+0x6a>
    8766:	0e c0       	rjmp	.+28     	; 0x8784 <__addsf3x+0x98>
    8768:	ba 0f       	add	r27, r26
    876a:	62 1f       	adc	r22, r18
    876c:	73 1f       	adc	r23, r19
    876e:	84 1f       	adc	r24, r20
    8770:	48 f4       	brcc	.+18     	; 0x8784 <__addsf3x+0x98>
    8772:	87 95       	ror	r24
    8774:	77 95       	ror	r23
    8776:	67 95       	ror	r22
    8778:	b7 95       	ror	r27
    877a:	f7 95       	ror	r31
    877c:	9e 3f       	cpi	r25, 0xFE	; 254
    877e:	08 f0       	brcs	.+2      	; 0x8782 <__addsf3x+0x96>
    8780:	b3 cf       	rjmp	.-154    	; 0x86e8 <__addsf3+0x1e>
    8782:	93 95       	inc	r25
    8784:	88 0f       	add	r24, r24
    8786:	08 f0       	brcs	.+2      	; 0x878a <__addsf3x+0x9e>
    8788:	99 27       	eor	r25, r25
    878a:	ee 0f       	add	r30, r30
    878c:	97 95       	ror	r25
    878e:	87 95       	ror	r24
    8790:	08 95       	ret

00008792 <cos>:
    8792:	39 d1       	rcall	.+626    	; 0x8a06 <__fp_rempio2>
    8794:	e3 95       	inc	r30
    8796:	6f c1       	rjmp	.+734    	; 0x8a76 <__fp_sinus>

00008798 <__divsf3>:
    8798:	0c d0       	rcall	.+24     	; 0x87b2 <__divsf3x>
    879a:	5c c1       	rjmp	.+696    	; 0x8a54 <__fp_round>
    879c:	2c d1       	rcall	.+600    	; 0x89f6 <__fp_pscB>
    879e:	40 f0       	brcs	.+16     	; 0x87b0 <__divsf3+0x18>
    87a0:	23 d1       	rcall	.+582    	; 0x89e8 <__fp_pscA>
    87a2:	30 f0       	brcs	.+12     	; 0x87b0 <__divsf3+0x18>
    87a4:	21 f4       	brne	.+8      	; 0x87ae <__divsf3+0x16>
    87a6:	5f 3f       	cpi	r21, 0xFF	; 255
    87a8:	19 f0       	breq	.+6      	; 0x87b0 <__divsf3+0x18>
    87aa:	f0 c0       	rjmp	.+480    	; 0x898c <__fp_inf>
    87ac:	51 11       	cpse	r21, r1
    87ae:	97 c1       	rjmp	.+814    	; 0x8ade <__fp_szero>
    87b0:	f3 c0       	rjmp	.+486    	; 0x8998 <__fp_nan>

000087b2 <__divsf3x>:
    87b2:	72 d1       	rcall	.+740    	; 0x8a98 <__fp_split3>
    87b4:	98 f3       	brcs	.-26     	; 0x879c <__divsf3+0x4>

000087b6 <__divsf3_pse>:
    87b6:	99 23       	and	r25, r25
    87b8:	c9 f3       	breq	.-14     	; 0x87ac <__divsf3+0x14>
    87ba:	55 23       	and	r21, r21
    87bc:	b1 f3       	breq	.-20     	; 0x87aa <__divsf3+0x12>
    87be:	95 1b       	sub	r25, r21
    87c0:	55 0b       	sbc	r21, r21
    87c2:	bb 27       	eor	r27, r27
    87c4:	aa 27       	eor	r26, r26
    87c6:	62 17       	cp	r22, r18
    87c8:	73 07       	cpc	r23, r19
    87ca:	84 07       	cpc	r24, r20
    87cc:	38 f0       	brcs	.+14     	; 0x87dc <__divsf3_pse+0x26>
    87ce:	9f 5f       	subi	r25, 0xFF	; 255
    87d0:	5f 4f       	sbci	r21, 0xFF	; 255
    87d2:	22 0f       	add	r18, r18
    87d4:	33 1f       	adc	r19, r19
    87d6:	44 1f       	adc	r20, r20
    87d8:	aa 1f       	adc	r26, r26
    87da:	a9 f3       	breq	.-22     	; 0x87c6 <__divsf3_pse+0x10>
    87dc:	33 d0       	rcall	.+102    	; 0x8844 <__divsf3_pse+0x8e>
    87de:	0e 2e       	mov	r0, r30
    87e0:	3a f0       	brmi	.+14     	; 0x87f0 <__divsf3_pse+0x3a>
    87e2:	e0 e8       	ldi	r30, 0x80	; 128
    87e4:	30 d0       	rcall	.+96     	; 0x8846 <__divsf3_pse+0x90>
    87e6:	91 50       	subi	r25, 0x01	; 1
    87e8:	50 40       	sbci	r21, 0x00	; 0
    87ea:	e6 95       	lsr	r30
    87ec:	00 1c       	adc	r0, r0
    87ee:	ca f7       	brpl	.-14     	; 0x87e2 <__divsf3_pse+0x2c>
    87f0:	29 d0       	rcall	.+82     	; 0x8844 <__divsf3_pse+0x8e>
    87f2:	fe 2f       	mov	r31, r30
    87f4:	27 d0       	rcall	.+78     	; 0x8844 <__divsf3_pse+0x8e>
    87f6:	66 0f       	add	r22, r22
    87f8:	77 1f       	adc	r23, r23
    87fa:	88 1f       	adc	r24, r24
    87fc:	bb 1f       	adc	r27, r27
    87fe:	26 17       	cp	r18, r22
    8800:	37 07       	cpc	r19, r23
    8802:	48 07       	cpc	r20, r24
    8804:	ab 07       	cpc	r26, r27
    8806:	b0 e8       	ldi	r27, 0x80	; 128
    8808:	09 f0       	breq	.+2      	; 0x880c <__divsf3_pse+0x56>
    880a:	bb 0b       	sbc	r27, r27
    880c:	80 2d       	mov	r24, r0
    880e:	bf 01       	movw	r22, r30
    8810:	ff 27       	eor	r31, r31
    8812:	93 58       	subi	r25, 0x83	; 131
    8814:	5f 4f       	sbci	r21, 0xFF	; 255
    8816:	2a f0       	brmi	.+10     	; 0x8822 <__divsf3_pse+0x6c>
    8818:	9e 3f       	cpi	r25, 0xFE	; 254
    881a:	51 05       	cpc	r21, r1
    881c:	68 f0       	brcs	.+26     	; 0x8838 <__divsf3_pse+0x82>
    881e:	b6 c0       	rjmp	.+364    	; 0x898c <__fp_inf>
    8820:	5e c1       	rjmp	.+700    	; 0x8ade <__fp_szero>
    8822:	5f 3f       	cpi	r21, 0xFF	; 255
    8824:	ec f3       	brlt	.-6      	; 0x8820 <__divsf3_pse+0x6a>
    8826:	98 3e       	cpi	r25, 0xE8	; 232
    8828:	dc f3       	brlt	.-10     	; 0x8820 <__divsf3_pse+0x6a>
    882a:	86 95       	lsr	r24
    882c:	77 95       	ror	r23
    882e:	67 95       	ror	r22
    8830:	b7 95       	ror	r27
    8832:	f7 95       	ror	r31
    8834:	9f 5f       	subi	r25, 0xFF	; 255
    8836:	c9 f7       	brne	.-14     	; 0x882a <__divsf3_pse+0x74>
    8838:	88 0f       	add	r24, r24
    883a:	91 1d       	adc	r25, r1
    883c:	96 95       	lsr	r25
    883e:	87 95       	ror	r24
    8840:	97 f9       	bld	r25, 7
    8842:	08 95       	ret
    8844:	e1 e0       	ldi	r30, 0x01	; 1
    8846:	66 0f       	add	r22, r22
    8848:	77 1f       	adc	r23, r23
    884a:	88 1f       	adc	r24, r24
    884c:	bb 1f       	adc	r27, r27
    884e:	62 17       	cp	r22, r18
    8850:	73 07       	cpc	r23, r19
    8852:	84 07       	cpc	r24, r20
    8854:	ba 07       	cpc	r27, r26
    8856:	20 f0       	brcs	.+8      	; 0x8860 <__divsf3_pse+0xaa>
    8858:	62 1b       	sub	r22, r18
    885a:	73 0b       	sbc	r23, r19
    885c:	84 0b       	sbc	r24, r20
    885e:	ba 0b       	sbc	r27, r26
    8860:	ee 1f       	adc	r30, r30
    8862:	88 f7       	brcc	.-30     	; 0x8846 <__divsf3_pse+0x90>
    8864:	e0 95       	com	r30
    8866:	08 95       	ret

00008868 <__fixsfsi>:
    8868:	04 d0       	rcall	.+8      	; 0x8872 <__fixunssfsi>
    886a:	68 94       	set
    886c:	b1 11       	cpse	r27, r1
    886e:	37 c1       	rjmp	.+622    	; 0x8ade <__fp_szero>
    8870:	08 95       	ret

00008872 <__fixunssfsi>:
    8872:	1a d1       	rcall	.+564    	; 0x8aa8 <__fp_splitA>
    8874:	88 f0       	brcs	.+34     	; 0x8898 <__fixunssfsi+0x26>
    8876:	9f 57       	subi	r25, 0x7F	; 127
    8878:	90 f0       	brcs	.+36     	; 0x889e <__fixunssfsi+0x2c>
    887a:	b9 2f       	mov	r27, r25
    887c:	99 27       	eor	r25, r25
    887e:	b7 51       	subi	r27, 0x17	; 23
    8880:	a0 f0       	brcs	.+40     	; 0x88aa <__fixunssfsi+0x38>
    8882:	d1 f0       	breq	.+52     	; 0x88b8 <__fixunssfsi+0x46>
    8884:	66 0f       	add	r22, r22
    8886:	77 1f       	adc	r23, r23
    8888:	88 1f       	adc	r24, r24
    888a:	99 1f       	adc	r25, r25
    888c:	1a f0       	brmi	.+6      	; 0x8894 <__fixunssfsi+0x22>
    888e:	ba 95       	dec	r27
    8890:	c9 f7       	brne	.-14     	; 0x8884 <__fixunssfsi+0x12>
    8892:	12 c0       	rjmp	.+36     	; 0x88b8 <__fixunssfsi+0x46>
    8894:	b1 30       	cpi	r27, 0x01	; 1
    8896:	81 f0       	breq	.+32     	; 0x88b8 <__fixunssfsi+0x46>
    8898:	21 d1       	rcall	.+578    	; 0x8adc <__fp_zero>
    889a:	b1 e0       	ldi	r27, 0x01	; 1
    889c:	08 95       	ret
    889e:	1e c1       	rjmp	.+572    	; 0x8adc <__fp_zero>
    88a0:	67 2f       	mov	r22, r23
    88a2:	78 2f       	mov	r23, r24
    88a4:	88 27       	eor	r24, r24
    88a6:	b8 5f       	subi	r27, 0xF8	; 248
    88a8:	39 f0       	breq	.+14     	; 0x88b8 <__fixunssfsi+0x46>
    88aa:	b9 3f       	cpi	r27, 0xF9	; 249
    88ac:	cc f3       	brlt	.-14     	; 0x88a0 <__fixunssfsi+0x2e>
    88ae:	86 95       	lsr	r24
    88b0:	77 95       	ror	r23
    88b2:	67 95       	ror	r22
    88b4:	b3 95       	inc	r27
    88b6:	d9 f7       	brne	.-10     	; 0x88ae <__fixunssfsi+0x3c>
    88b8:	3e f4       	brtc	.+14     	; 0x88c8 <__fixunssfsi+0x56>
    88ba:	90 95       	com	r25
    88bc:	80 95       	com	r24
    88be:	70 95       	com	r23
    88c0:	61 95       	neg	r22
    88c2:	7f 4f       	sbci	r23, 0xFF	; 255
    88c4:	8f 4f       	sbci	r24, 0xFF	; 255
    88c6:	9f 4f       	sbci	r25, 0xFF	; 255
    88c8:	08 95       	ret

000088ca <__floatunsisf>:
    88ca:	e8 94       	clt
    88cc:	09 c0       	rjmp	.+18     	; 0x88e0 <__floatsisf+0x12>

000088ce <__floatsisf>:
    88ce:	97 fb       	bst	r25, 7
    88d0:	3e f4       	brtc	.+14     	; 0x88e0 <__floatsisf+0x12>
    88d2:	90 95       	com	r25
    88d4:	80 95       	com	r24
    88d6:	70 95       	com	r23
    88d8:	61 95       	neg	r22
    88da:	7f 4f       	sbci	r23, 0xFF	; 255
    88dc:	8f 4f       	sbci	r24, 0xFF	; 255
    88de:	9f 4f       	sbci	r25, 0xFF	; 255
    88e0:	99 23       	and	r25, r25
    88e2:	a9 f0       	breq	.+42     	; 0x890e <__floatsisf+0x40>
    88e4:	f9 2f       	mov	r31, r25
    88e6:	96 e9       	ldi	r25, 0x96	; 150
    88e8:	bb 27       	eor	r27, r27
    88ea:	93 95       	inc	r25
    88ec:	f6 95       	lsr	r31
    88ee:	87 95       	ror	r24
    88f0:	77 95       	ror	r23
    88f2:	67 95       	ror	r22
    88f4:	b7 95       	ror	r27
    88f6:	f1 11       	cpse	r31, r1
    88f8:	f8 cf       	rjmp	.-16     	; 0x88ea <__floatsisf+0x1c>
    88fa:	fa f4       	brpl	.+62     	; 0x893a <__floatsisf+0x6c>
    88fc:	bb 0f       	add	r27, r27
    88fe:	11 f4       	brne	.+4      	; 0x8904 <__floatsisf+0x36>
    8900:	60 ff       	sbrs	r22, 0
    8902:	1b c0       	rjmp	.+54     	; 0x893a <__floatsisf+0x6c>
    8904:	6f 5f       	subi	r22, 0xFF	; 255
    8906:	7f 4f       	sbci	r23, 0xFF	; 255
    8908:	8f 4f       	sbci	r24, 0xFF	; 255
    890a:	9f 4f       	sbci	r25, 0xFF	; 255
    890c:	16 c0       	rjmp	.+44     	; 0x893a <__floatsisf+0x6c>
    890e:	88 23       	and	r24, r24
    8910:	11 f0       	breq	.+4      	; 0x8916 <__floatsisf+0x48>
    8912:	96 e9       	ldi	r25, 0x96	; 150
    8914:	11 c0       	rjmp	.+34     	; 0x8938 <__floatsisf+0x6a>
    8916:	77 23       	and	r23, r23
    8918:	21 f0       	breq	.+8      	; 0x8922 <__floatsisf+0x54>
    891a:	9e e8       	ldi	r25, 0x8E	; 142
    891c:	87 2f       	mov	r24, r23
    891e:	76 2f       	mov	r23, r22
    8920:	05 c0       	rjmp	.+10     	; 0x892c <__floatsisf+0x5e>
    8922:	66 23       	and	r22, r22
    8924:	71 f0       	breq	.+28     	; 0x8942 <__floatsisf+0x74>
    8926:	96 e8       	ldi	r25, 0x86	; 134
    8928:	86 2f       	mov	r24, r22
    892a:	70 e0       	ldi	r23, 0x00	; 0
    892c:	60 e0       	ldi	r22, 0x00	; 0
    892e:	2a f0       	brmi	.+10     	; 0x893a <__floatsisf+0x6c>
    8930:	9a 95       	dec	r25
    8932:	66 0f       	add	r22, r22
    8934:	77 1f       	adc	r23, r23
    8936:	88 1f       	adc	r24, r24
    8938:	da f7       	brpl	.-10     	; 0x8930 <__floatsisf+0x62>
    893a:	88 0f       	add	r24, r24
    893c:	96 95       	lsr	r25
    893e:	87 95       	ror	r24
    8940:	97 f9       	bld	r25, 7
    8942:	08 95       	ret

00008944 <__fp_cmp>:
    8944:	99 0f       	add	r25, r25
    8946:	00 08       	sbc	r0, r0
    8948:	55 0f       	add	r21, r21
    894a:	aa 0b       	sbc	r26, r26
    894c:	e0 e8       	ldi	r30, 0x80	; 128
    894e:	fe ef       	ldi	r31, 0xFE	; 254
    8950:	16 16       	cp	r1, r22
    8952:	17 06       	cpc	r1, r23
    8954:	e8 07       	cpc	r30, r24
    8956:	f9 07       	cpc	r31, r25
    8958:	c0 f0       	brcs	.+48     	; 0x898a <__fp_cmp+0x46>
    895a:	12 16       	cp	r1, r18
    895c:	13 06       	cpc	r1, r19
    895e:	e4 07       	cpc	r30, r20
    8960:	f5 07       	cpc	r31, r21
    8962:	98 f0       	brcs	.+38     	; 0x898a <__fp_cmp+0x46>
    8964:	62 1b       	sub	r22, r18
    8966:	73 0b       	sbc	r23, r19
    8968:	84 0b       	sbc	r24, r20
    896a:	95 0b       	sbc	r25, r21
    896c:	39 f4       	brne	.+14     	; 0x897c <__fp_cmp+0x38>
    896e:	0a 26       	eor	r0, r26
    8970:	61 f0       	breq	.+24     	; 0x898a <__fp_cmp+0x46>
    8972:	23 2b       	or	r18, r19
    8974:	24 2b       	or	r18, r20
    8976:	25 2b       	or	r18, r21
    8978:	21 f4       	brne	.+8      	; 0x8982 <__fp_cmp+0x3e>
    897a:	08 95       	ret
    897c:	0a 26       	eor	r0, r26
    897e:	09 f4       	brne	.+2      	; 0x8982 <__fp_cmp+0x3e>
    8980:	a1 40       	sbci	r26, 0x01	; 1
    8982:	a6 95       	lsr	r26
    8984:	8f ef       	ldi	r24, 0xFF	; 255
    8986:	81 1d       	adc	r24, r1
    8988:	81 1d       	adc	r24, r1
    898a:	08 95       	ret

0000898c <__fp_inf>:
    898c:	97 f9       	bld	r25, 7
    898e:	9f 67       	ori	r25, 0x7F	; 127
    8990:	80 e8       	ldi	r24, 0x80	; 128
    8992:	70 e0       	ldi	r23, 0x00	; 0
    8994:	60 e0       	ldi	r22, 0x00	; 0
    8996:	08 95       	ret

00008998 <__fp_nan>:
    8998:	9f ef       	ldi	r25, 0xFF	; 255
    899a:	80 ec       	ldi	r24, 0xC0	; 192
    899c:	08 95       	ret

0000899e <__fp_powser>:
    899e:	df 93       	push	r29
    89a0:	cf 93       	push	r28
    89a2:	1f 93       	push	r17
    89a4:	0f 93       	push	r16
    89a6:	ff 92       	push	r15
    89a8:	ef 92       	push	r14
    89aa:	df 92       	push	r13
    89ac:	7b 01       	movw	r14, r22
    89ae:	8c 01       	movw	r16, r24
    89b0:	68 94       	set
    89b2:	05 c0       	rjmp	.+10     	; 0x89be <__fp_powser+0x20>
    89b4:	da 2e       	mov	r13, r26
    89b6:	ef 01       	movw	r28, r30
    89b8:	af d0       	rcall	.+350    	; 0x8b18 <__mulsf3x>
    89ba:	fe 01       	movw	r30, r28
    89bc:	e8 94       	clt
    89be:	a5 91       	lpm	r26, Z+
    89c0:	25 91       	lpm	r18, Z+
    89c2:	35 91       	lpm	r19, Z+
    89c4:	45 91       	lpm	r20, Z+
    89c6:	55 91       	lpm	r21, Z+
    89c8:	ae f3       	brts	.-22     	; 0x89b4 <__fp_powser+0x16>
    89ca:	ef 01       	movw	r28, r30
    89cc:	8f de       	rcall	.-738    	; 0x86ec <__addsf3x>
    89ce:	fe 01       	movw	r30, r28
    89d0:	97 01       	movw	r18, r14
    89d2:	a8 01       	movw	r20, r16
    89d4:	da 94       	dec	r13
    89d6:	79 f7       	brne	.-34     	; 0x89b6 <__fp_powser+0x18>
    89d8:	df 90       	pop	r13
    89da:	ef 90       	pop	r14
    89dc:	ff 90       	pop	r15
    89de:	0f 91       	pop	r16
    89e0:	1f 91       	pop	r17
    89e2:	cf 91       	pop	r28
    89e4:	df 91       	pop	r29
    89e6:	08 95       	ret

000089e8 <__fp_pscA>:
    89e8:	00 24       	eor	r0, r0
    89ea:	0a 94       	dec	r0
    89ec:	16 16       	cp	r1, r22
    89ee:	17 06       	cpc	r1, r23
    89f0:	18 06       	cpc	r1, r24
    89f2:	09 06       	cpc	r0, r25
    89f4:	08 95       	ret

000089f6 <__fp_pscB>:
    89f6:	00 24       	eor	r0, r0
    89f8:	0a 94       	dec	r0
    89fa:	12 16       	cp	r1, r18
    89fc:	13 06       	cpc	r1, r19
    89fe:	14 06       	cpc	r1, r20
    8a00:	05 06       	cpc	r0, r21
    8a02:	08 95       	ret
    8a04:	c9 cf       	rjmp	.-110    	; 0x8998 <__fp_nan>

00008a06 <__fp_rempio2>:
    8a06:	50 d0       	rcall	.+160    	; 0x8aa8 <__fp_splitA>
    8a08:	e8 f3       	brcs	.-6      	; 0x8a04 <__fp_pscB+0xe>
    8a0a:	e8 94       	clt
    8a0c:	e0 e0       	ldi	r30, 0x00	; 0
    8a0e:	bb 27       	eor	r27, r27
    8a10:	9f 57       	subi	r25, 0x7F	; 127
    8a12:	f0 f0       	brcs	.+60     	; 0x8a50 <__fp_rempio2+0x4a>
    8a14:	2a ed       	ldi	r18, 0xDA	; 218
    8a16:	3f e0       	ldi	r19, 0x0F	; 15
    8a18:	49 ec       	ldi	r20, 0xC9	; 201
    8a1a:	06 c0       	rjmp	.+12     	; 0x8a28 <__fp_rempio2+0x22>
    8a1c:	ee 0f       	add	r30, r30
    8a1e:	bb 0f       	add	r27, r27
    8a20:	66 1f       	adc	r22, r22
    8a22:	77 1f       	adc	r23, r23
    8a24:	88 1f       	adc	r24, r24
    8a26:	28 f0       	brcs	.+10     	; 0x8a32 <__fp_rempio2+0x2c>
    8a28:	b2 3a       	cpi	r27, 0xA2	; 162
    8a2a:	62 07       	cpc	r22, r18
    8a2c:	73 07       	cpc	r23, r19
    8a2e:	84 07       	cpc	r24, r20
    8a30:	28 f0       	brcs	.+10     	; 0x8a3c <__fp_rempio2+0x36>
    8a32:	b2 5a       	subi	r27, 0xA2	; 162
    8a34:	62 0b       	sbc	r22, r18
    8a36:	73 0b       	sbc	r23, r19
    8a38:	84 0b       	sbc	r24, r20
    8a3a:	e3 95       	inc	r30
    8a3c:	9a 95       	dec	r25
    8a3e:	72 f7       	brpl	.-36     	; 0x8a1c <__fp_rempio2+0x16>
    8a40:	80 38       	cpi	r24, 0x80	; 128
    8a42:	30 f4       	brcc	.+12     	; 0x8a50 <__fp_rempio2+0x4a>
    8a44:	9a 95       	dec	r25
    8a46:	bb 0f       	add	r27, r27
    8a48:	66 1f       	adc	r22, r22
    8a4a:	77 1f       	adc	r23, r23
    8a4c:	88 1f       	adc	r24, r24
    8a4e:	d2 f7       	brpl	.-12     	; 0x8a44 <__fp_rempio2+0x3e>
    8a50:	90 48       	sbci	r25, 0x80	; 128
    8a52:	3e c1       	rjmp	.+636    	; 0x8cd0 <__fp_mpack_finite>

00008a54 <__fp_round>:
    8a54:	09 2e       	mov	r0, r25
    8a56:	03 94       	inc	r0
    8a58:	00 0c       	add	r0, r0
    8a5a:	11 f4       	brne	.+4      	; 0x8a60 <__fp_round+0xc>
    8a5c:	88 23       	and	r24, r24
    8a5e:	52 f0       	brmi	.+20     	; 0x8a74 <__fp_round+0x20>
    8a60:	bb 0f       	add	r27, r27
    8a62:	40 f4       	brcc	.+16     	; 0x8a74 <__fp_round+0x20>
    8a64:	bf 2b       	or	r27, r31
    8a66:	11 f4       	brne	.+4      	; 0x8a6c <__fp_round+0x18>
    8a68:	60 ff       	sbrs	r22, 0
    8a6a:	04 c0       	rjmp	.+8      	; 0x8a74 <__fp_round+0x20>
    8a6c:	6f 5f       	subi	r22, 0xFF	; 255
    8a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    8a70:	8f 4f       	sbci	r24, 0xFF	; 255
    8a72:	9f 4f       	sbci	r25, 0xFF	; 255
    8a74:	08 95       	ret

00008a76 <__fp_sinus>:
    8a76:	ef 93       	push	r30
    8a78:	e0 ff       	sbrs	r30, 0
    8a7a:	06 c0       	rjmp	.+12     	; 0x8a88 <__fp_sinus+0x12>
    8a7c:	a2 ea       	ldi	r26, 0xA2	; 162
    8a7e:	2a ed       	ldi	r18, 0xDA	; 218
    8a80:	3f e0       	ldi	r19, 0x0F	; 15
    8a82:	49 ec       	ldi	r20, 0xC9	; 201
    8a84:	5f eb       	ldi	r21, 0xBF	; 191
    8a86:	32 de       	rcall	.-924    	; 0x86ec <__addsf3x>
    8a88:	e5 df       	rcall	.-54     	; 0x8a54 <__fp_round>
    8a8a:	0f 90       	pop	r0
    8a8c:	03 94       	inc	r0
    8a8e:	01 fc       	sbrc	r0, 1
    8a90:	90 58       	subi	r25, 0x80	; 128
    8a92:	e6 ef       	ldi	r30, 0xF6	; 246
    8a94:	f1 e0       	ldi	r31, 0x01	; 1
    8a96:	28 c1       	rjmp	.+592    	; 0x8ce8 <__fp_powsodd>

00008a98 <__fp_split3>:
    8a98:	57 fd       	sbrc	r21, 7
    8a9a:	90 58       	subi	r25, 0x80	; 128
    8a9c:	44 0f       	add	r20, r20
    8a9e:	55 1f       	adc	r21, r21
    8aa0:	59 f0       	breq	.+22     	; 0x8ab8 <__fp_splitA+0x10>
    8aa2:	5f 3f       	cpi	r21, 0xFF	; 255
    8aa4:	71 f0       	breq	.+28     	; 0x8ac2 <__fp_splitA+0x1a>
    8aa6:	47 95       	ror	r20

00008aa8 <__fp_splitA>:
    8aa8:	88 0f       	add	r24, r24
    8aaa:	97 fb       	bst	r25, 7
    8aac:	99 1f       	adc	r25, r25
    8aae:	61 f0       	breq	.+24     	; 0x8ac8 <__fp_splitA+0x20>
    8ab0:	9f 3f       	cpi	r25, 0xFF	; 255
    8ab2:	79 f0       	breq	.+30     	; 0x8ad2 <__fp_splitA+0x2a>
    8ab4:	87 95       	ror	r24
    8ab6:	08 95       	ret
    8ab8:	12 16       	cp	r1, r18
    8aba:	13 06       	cpc	r1, r19
    8abc:	14 06       	cpc	r1, r20
    8abe:	55 1f       	adc	r21, r21
    8ac0:	f2 cf       	rjmp	.-28     	; 0x8aa6 <__fp_split3+0xe>
    8ac2:	46 95       	lsr	r20
    8ac4:	f1 df       	rcall	.-30     	; 0x8aa8 <__fp_splitA>
    8ac6:	08 c0       	rjmp	.+16     	; 0x8ad8 <__fp_splitA+0x30>
    8ac8:	16 16       	cp	r1, r22
    8aca:	17 06       	cpc	r1, r23
    8acc:	18 06       	cpc	r1, r24
    8ace:	99 1f       	adc	r25, r25
    8ad0:	f1 cf       	rjmp	.-30     	; 0x8ab4 <__fp_splitA+0xc>
    8ad2:	86 95       	lsr	r24
    8ad4:	71 05       	cpc	r23, r1
    8ad6:	61 05       	cpc	r22, r1
    8ad8:	08 94       	sec
    8ada:	08 95       	ret

00008adc <__fp_zero>:
    8adc:	e8 94       	clt

00008ade <__fp_szero>:
    8ade:	bb 27       	eor	r27, r27
    8ae0:	66 27       	eor	r22, r22
    8ae2:	77 27       	eor	r23, r23
    8ae4:	cb 01       	movw	r24, r22
    8ae6:	97 f9       	bld	r25, 7
    8ae8:	08 95       	ret

00008aea <__gesf2>:
    8aea:	2c df       	rcall	.-424    	; 0x8944 <__fp_cmp>
    8aec:	08 f4       	brcc	.+2      	; 0x8af0 <__gesf2+0x6>
    8aee:	8f ef       	ldi	r24, 0xFF	; 255
    8af0:	08 95       	ret

00008af2 <inverse>:
    8af2:	9b 01       	movw	r18, r22
    8af4:	ac 01       	movw	r20, r24
    8af6:	60 e0       	ldi	r22, 0x00	; 0
    8af8:	70 e0       	ldi	r23, 0x00	; 0
    8afa:	80 e8       	ldi	r24, 0x80	; 128
    8afc:	9f e3       	ldi	r25, 0x3F	; 63
    8afe:	4c ce       	rjmp	.-872    	; 0x8798 <__divsf3>

00008b00 <__mulsf3>:
    8b00:	0b d0       	rcall	.+22     	; 0x8b18 <__mulsf3x>
    8b02:	a8 cf       	rjmp	.-176    	; 0x8a54 <__fp_round>
    8b04:	71 df       	rcall	.-286    	; 0x89e8 <__fp_pscA>
    8b06:	28 f0       	brcs	.+10     	; 0x8b12 <__mulsf3+0x12>
    8b08:	76 df       	rcall	.-276    	; 0x89f6 <__fp_pscB>
    8b0a:	18 f0       	brcs	.+6      	; 0x8b12 <__mulsf3+0x12>
    8b0c:	95 23       	and	r25, r21
    8b0e:	09 f0       	breq	.+2      	; 0x8b12 <__mulsf3+0x12>
    8b10:	3d cf       	rjmp	.-390    	; 0x898c <__fp_inf>
    8b12:	42 cf       	rjmp	.-380    	; 0x8998 <__fp_nan>
    8b14:	11 24       	eor	r1, r1
    8b16:	e3 cf       	rjmp	.-58     	; 0x8ade <__fp_szero>

00008b18 <__mulsf3x>:
    8b18:	bf df       	rcall	.-130    	; 0x8a98 <__fp_split3>
    8b1a:	a0 f3       	brcs	.-24     	; 0x8b04 <__mulsf3+0x4>

00008b1c <__mulsf3_pse>:
    8b1c:	95 9f       	mul	r25, r21
    8b1e:	d1 f3       	breq	.-12     	; 0x8b14 <__mulsf3+0x14>
    8b20:	95 0f       	add	r25, r21
    8b22:	50 e0       	ldi	r21, 0x00	; 0
    8b24:	55 1f       	adc	r21, r21
    8b26:	62 9f       	mul	r22, r18
    8b28:	f0 01       	movw	r30, r0
    8b2a:	72 9f       	mul	r23, r18
    8b2c:	bb 27       	eor	r27, r27
    8b2e:	f0 0d       	add	r31, r0
    8b30:	b1 1d       	adc	r27, r1
    8b32:	63 9f       	mul	r22, r19
    8b34:	aa 27       	eor	r26, r26
    8b36:	f0 0d       	add	r31, r0
    8b38:	b1 1d       	adc	r27, r1
    8b3a:	aa 1f       	adc	r26, r26
    8b3c:	64 9f       	mul	r22, r20
    8b3e:	66 27       	eor	r22, r22
    8b40:	b0 0d       	add	r27, r0
    8b42:	a1 1d       	adc	r26, r1
    8b44:	66 1f       	adc	r22, r22
    8b46:	82 9f       	mul	r24, r18
    8b48:	22 27       	eor	r18, r18
    8b4a:	b0 0d       	add	r27, r0
    8b4c:	a1 1d       	adc	r26, r1
    8b4e:	62 1f       	adc	r22, r18
    8b50:	73 9f       	mul	r23, r19
    8b52:	b0 0d       	add	r27, r0
    8b54:	a1 1d       	adc	r26, r1
    8b56:	62 1f       	adc	r22, r18
    8b58:	83 9f       	mul	r24, r19
    8b5a:	a0 0d       	add	r26, r0
    8b5c:	61 1d       	adc	r22, r1
    8b5e:	22 1f       	adc	r18, r18
    8b60:	74 9f       	mul	r23, r20
    8b62:	33 27       	eor	r19, r19
    8b64:	a0 0d       	add	r26, r0
    8b66:	61 1d       	adc	r22, r1
    8b68:	23 1f       	adc	r18, r19
    8b6a:	84 9f       	mul	r24, r20
    8b6c:	60 0d       	add	r22, r0
    8b6e:	21 1d       	adc	r18, r1
    8b70:	82 2f       	mov	r24, r18
    8b72:	76 2f       	mov	r23, r22
    8b74:	6a 2f       	mov	r22, r26
    8b76:	11 24       	eor	r1, r1
    8b78:	9f 57       	subi	r25, 0x7F	; 127
    8b7a:	50 40       	sbci	r21, 0x00	; 0
    8b7c:	8a f0       	brmi	.+34     	; 0x8ba0 <__mulsf3_pse+0x84>
    8b7e:	e1 f0       	breq	.+56     	; 0x8bb8 <__mulsf3_pse+0x9c>
    8b80:	88 23       	and	r24, r24
    8b82:	4a f0       	brmi	.+18     	; 0x8b96 <__mulsf3_pse+0x7a>
    8b84:	ee 0f       	add	r30, r30
    8b86:	ff 1f       	adc	r31, r31
    8b88:	bb 1f       	adc	r27, r27
    8b8a:	66 1f       	adc	r22, r22
    8b8c:	77 1f       	adc	r23, r23
    8b8e:	88 1f       	adc	r24, r24
    8b90:	91 50       	subi	r25, 0x01	; 1
    8b92:	50 40       	sbci	r21, 0x00	; 0
    8b94:	a9 f7       	brne	.-22     	; 0x8b80 <__mulsf3_pse+0x64>
    8b96:	9e 3f       	cpi	r25, 0xFE	; 254
    8b98:	51 05       	cpc	r21, r1
    8b9a:	70 f0       	brcs	.+28     	; 0x8bb8 <__mulsf3_pse+0x9c>
    8b9c:	f7 ce       	rjmp	.-530    	; 0x898c <__fp_inf>
    8b9e:	9f cf       	rjmp	.-194    	; 0x8ade <__fp_szero>
    8ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    8ba2:	ec f3       	brlt	.-6      	; 0x8b9e <__mulsf3_pse+0x82>
    8ba4:	98 3e       	cpi	r25, 0xE8	; 232
    8ba6:	dc f3       	brlt	.-10     	; 0x8b9e <__mulsf3_pse+0x82>
    8ba8:	86 95       	lsr	r24
    8baa:	77 95       	ror	r23
    8bac:	67 95       	ror	r22
    8bae:	b7 95       	ror	r27
    8bb0:	f7 95       	ror	r31
    8bb2:	e7 95       	ror	r30
    8bb4:	9f 5f       	subi	r25, 0xFF	; 255
    8bb6:	c1 f7       	brne	.-16     	; 0x8ba8 <__mulsf3_pse+0x8c>
    8bb8:	fe 2b       	or	r31, r30
    8bba:	88 0f       	add	r24, r24
    8bbc:	91 1d       	adc	r25, r1
    8bbe:	96 95       	lsr	r25
    8bc0:	87 95       	ror	r24
    8bc2:	97 f9       	bld	r25, 7
    8bc4:	08 95       	ret

00008bc6 <pow>:
    8bc6:	fa 01       	movw	r30, r20
    8bc8:	ee 0f       	add	r30, r30
    8bca:	ff 1f       	adc	r31, r31
    8bcc:	30 96       	adiw	r30, 0x00	; 0
    8bce:	21 05       	cpc	r18, r1
    8bd0:	31 05       	cpc	r19, r1
    8bd2:	99 f1       	breq	.+102    	; 0x8c3a <pow+0x74>
    8bd4:	61 15       	cp	r22, r1
    8bd6:	71 05       	cpc	r23, r1
    8bd8:	61 f4       	brne	.+24     	; 0x8bf2 <pow+0x2c>
    8bda:	80 38       	cpi	r24, 0x80	; 128
    8bdc:	bf e3       	ldi	r27, 0x3F	; 63
    8bde:	9b 07       	cpc	r25, r27
    8be0:	49 f1       	breq	.+82     	; 0x8c34 <pow+0x6e>
    8be2:	68 94       	set
    8be4:	90 38       	cpi	r25, 0x80	; 128
    8be6:	81 05       	cpc	r24, r1
    8be8:	61 f0       	breq	.+24     	; 0x8c02 <pow+0x3c>
    8bea:	80 38       	cpi	r24, 0x80	; 128
    8bec:	bf ef       	ldi	r27, 0xFF	; 255
    8bee:	9b 07       	cpc	r25, r27
    8bf0:	41 f0       	breq	.+16     	; 0x8c02 <pow+0x3c>
    8bf2:	99 23       	and	r25, r25
    8bf4:	42 f5       	brpl	.+80     	; 0x8c46 <pow+0x80>
    8bf6:	ff 3f       	cpi	r31, 0xFF	; 255
    8bf8:	e1 05       	cpc	r30, r1
    8bfa:	31 05       	cpc	r19, r1
    8bfc:	21 05       	cpc	r18, r1
    8bfe:	11 f1       	breq	.+68     	; 0x8c44 <pow+0x7e>
    8c00:	e8 94       	clt
    8c02:	08 94       	sec
    8c04:	e7 95       	ror	r30
    8c06:	d9 01       	movw	r26, r18
    8c08:	aa 23       	and	r26, r26
    8c0a:	29 f4       	brne	.+10     	; 0x8c16 <pow+0x50>
    8c0c:	ab 2f       	mov	r26, r27
    8c0e:	be 2f       	mov	r27, r30
    8c10:	f8 5f       	subi	r31, 0xF8	; 248
    8c12:	d0 f3       	brcs	.-12     	; 0x8c08 <pow+0x42>
    8c14:	10 c0       	rjmp	.+32     	; 0x8c36 <pow+0x70>
    8c16:	ff 5f       	subi	r31, 0xFF	; 255
    8c18:	70 f4       	brcc	.+28     	; 0x8c36 <pow+0x70>
    8c1a:	a6 95       	lsr	r26
    8c1c:	e0 f7       	brcc	.-8      	; 0x8c16 <pow+0x50>
    8c1e:	f7 39       	cpi	r31, 0x97	; 151
    8c20:	50 f0       	brcs	.+20     	; 0x8c36 <pow+0x70>
    8c22:	19 f0       	breq	.+6      	; 0x8c2a <pow+0x64>
    8c24:	ff 3a       	cpi	r31, 0xAF	; 175
    8c26:	38 f4       	brcc	.+14     	; 0x8c36 <pow+0x70>
    8c28:	9f 77       	andi	r25, 0x7F	; 127
    8c2a:	9f 93       	push	r25
    8c2c:	0c d0       	rcall	.+24     	; 0x8c46 <pow+0x80>
    8c2e:	0f 90       	pop	r0
    8c30:	07 fc       	sbrc	r0, 7
    8c32:	90 58       	subi	r25, 0x80	; 128
    8c34:	08 95       	ret
    8c36:	3e f0       	brts	.+14     	; 0x8c46 <pow+0x80>
    8c38:	af ce       	rjmp	.-674    	; 0x8998 <__fp_nan>
    8c3a:	60 e0       	ldi	r22, 0x00	; 0
    8c3c:	70 e0       	ldi	r23, 0x00	; 0
    8c3e:	80 e8       	ldi	r24, 0x80	; 128
    8c40:	9f e3       	ldi	r25, 0x3F	; 63
    8c42:	08 95       	ret
    8c44:	4f e7       	ldi	r20, 0x7F	; 127
    8c46:	9f 77       	andi	r25, 0x7F	; 127
    8c48:	5f 93       	push	r21
    8c4a:	4f 93       	push	r20
    8c4c:	3f 93       	push	r19
    8c4e:	2f 93       	push	r18
    8c50:	97 d0       	rcall	.+302    	; 0x8d80 <log>
    8c52:	2f 91       	pop	r18
    8c54:	3f 91       	pop	r19
    8c56:	4f 91       	pop	r20
    8c58:	5f 91       	pop	r21
    8c5a:	52 df       	rcall	.-348    	; 0x8b00 <__mulsf3>
    8c5c:	0b c0       	rjmp	.+22     	; 0x8c74 <exp>

00008c5e <sin>:
    8c5e:	9f 93       	push	r25
    8c60:	d2 de       	rcall	.-604    	; 0x8a06 <__fp_rempio2>
    8c62:	0f 90       	pop	r0
    8c64:	07 fc       	sbrc	r0, 7
    8c66:	ee 5f       	subi	r30, 0xFE	; 254
    8c68:	06 cf       	rjmp	.-500    	; 0x8a76 <__fp_sinus>
    8c6a:	19 f4       	brne	.+6      	; 0x8c72 <sin+0x14>
    8c6c:	0e f0       	brts	.+2      	; 0x8c70 <sin+0x12>
    8c6e:	8e ce       	rjmp	.-740    	; 0x898c <__fp_inf>
    8c70:	35 cf       	rjmp	.-406    	; 0x8adc <__fp_zero>
    8c72:	92 ce       	rjmp	.-732    	; 0x8998 <__fp_nan>

00008c74 <exp>:
    8c74:	19 df       	rcall	.-462    	; 0x8aa8 <__fp_splitA>
    8c76:	c8 f3       	brcs	.-14     	; 0x8c6a <sin+0xc>
    8c78:	96 38       	cpi	r25, 0x86	; 134
    8c7a:	c0 f7       	brcc	.-16     	; 0x8c6c <sin+0xe>
    8c7c:	07 f8       	bld	r0, 7
    8c7e:	0f 92       	push	r0
    8c80:	e8 94       	clt
    8c82:	2b e3       	ldi	r18, 0x3B	; 59
    8c84:	3a ea       	ldi	r19, 0xAA	; 170
    8c86:	48 eb       	ldi	r20, 0xB8	; 184
    8c88:	5f e7       	ldi	r21, 0x7F	; 127
    8c8a:	48 df       	rcall	.-368    	; 0x8b1c <__mulsf3_pse>
    8c8c:	0f 92       	push	r0
    8c8e:	0f 92       	push	r0
    8c90:	0f 92       	push	r0
    8c92:	4d b7       	in	r20, 0x3d	; 61
    8c94:	5e b7       	in	r21, 0x3e	; 62
    8c96:	0f 92       	push	r0
    8c98:	b3 d0       	rcall	.+358    	; 0x8e00 <modf>
    8c9a:	e4 e1       	ldi	r30, 0x14	; 20
    8c9c:	f2 e0       	ldi	r31, 0x02	; 2
    8c9e:	7f de       	rcall	.-770    	; 0x899e <__fp_powser>
    8ca0:	4f 91       	pop	r20
    8ca2:	5f 91       	pop	r21
    8ca4:	ef 91       	pop	r30
    8ca6:	ff 91       	pop	r31
    8ca8:	e5 95       	asr	r30
    8caa:	ee 1f       	adc	r30, r30
    8cac:	ff 1f       	adc	r31, r31
    8cae:	49 f0       	breq	.+18     	; 0x8cc2 <exp+0x4e>
    8cb0:	fe 57       	subi	r31, 0x7E	; 126
    8cb2:	e0 68       	ori	r30, 0x80	; 128
    8cb4:	44 27       	eor	r20, r20
    8cb6:	ee 0f       	add	r30, r30
    8cb8:	44 1f       	adc	r20, r20
    8cba:	fa 95       	dec	r31
    8cbc:	e1 f7       	brne	.-8      	; 0x8cb6 <exp+0x42>
    8cbe:	41 95       	neg	r20
    8cc0:	55 0b       	sbc	r21, r21
    8cc2:	25 d0       	rcall	.+74     	; 0x8d0e <ldexp>
    8cc4:	0f 90       	pop	r0
    8cc6:	07 fe       	sbrs	r0, 7
    8cc8:	14 cf       	rjmp	.-472    	; 0x8af2 <inverse>
    8cca:	08 95       	ret

00008ccc <__fp_mpack>:
    8ccc:	9f 3f       	cpi	r25, 0xFF	; 255
    8cce:	31 f0       	breq	.+12     	; 0x8cdc <__fp_mpack_finite+0xc>

00008cd0 <__fp_mpack_finite>:
    8cd0:	91 50       	subi	r25, 0x01	; 1
    8cd2:	20 f4       	brcc	.+8      	; 0x8cdc <__fp_mpack_finite+0xc>
    8cd4:	87 95       	ror	r24
    8cd6:	77 95       	ror	r23
    8cd8:	67 95       	ror	r22
    8cda:	b7 95       	ror	r27
    8cdc:	88 0f       	add	r24, r24
    8cde:	91 1d       	adc	r25, r1
    8ce0:	96 95       	lsr	r25
    8ce2:	87 95       	ror	r24
    8ce4:	97 f9       	bld	r25, 7
    8ce6:	08 95       	ret

00008ce8 <__fp_powsodd>:
    8ce8:	9f 93       	push	r25
    8cea:	8f 93       	push	r24
    8cec:	7f 93       	push	r23
    8cee:	6f 93       	push	r22
    8cf0:	ff 93       	push	r31
    8cf2:	ef 93       	push	r30
    8cf4:	9b 01       	movw	r18, r22
    8cf6:	ac 01       	movw	r20, r24
    8cf8:	03 df       	rcall	.-506    	; 0x8b00 <__mulsf3>
    8cfa:	ef 91       	pop	r30
    8cfc:	ff 91       	pop	r31
    8cfe:	4f de       	rcall	.-866    	; 0x899e <__fp_powser>
    8d00:	2f 91       	pop	r18
    8d02:	3f 91       	pop	r19
    8d04:	4f 91       	pop	r20
    8d06:	5f 91       	pop	r21
    8d08:	fb ce       	rjmp	.-522    	; 0x8b00 <__mulsf3>
    8d0a:	40 ce       	rjmp	.-896    	; 0x898c <__fp_inf>
    8d0c:	df cf       	rjmp	.-66     	; 0x8ccc <__fp_mpack>

00008d0e <ldexp>:
    8d0e:	cc de       	rcall	.-616    	; 0x8aa8 <__fp_splitA>
    8d10:	e8 f3       	brcs	.-6      	; 0x8d0c <__fp_powsodd+0x24>
    8d12:	99 23       	and	r25, r25
    8d14:	d9 f3       	breq	.-10     	; 0x8d0c <__fp_powsodd+0x24>
    8d16:	94 0f       	add	r25, r20
    8d18:	51 1d       	adc	r21, r1
    8d1a:	bb f3       	brvs	.-18     	; 0x8d0a <__fp_powsodd+0x22>
    8d1c:	91 50       	subi	r25, 0x01	; 1
    8d1e:	50 40       	sbci	r21, 0x00	; 0
    8d20:	94 f0       	brlt	.+36     	; 0x8d46 <ldexp+0x38>
    8d22:	59 f0       	breq	.+22     	; 0x8d3a <ldexp+0x2c>
    8d24:	88 23       	and	r24, r24
    8d26:	32 f0       	brmi	.+12     	; 0x8d34 <ldexp+0x26>
    8d28:	66 0f       	add	r22, r22
    8d2a:	77 1f       	adc	r23, r23
    8d2c:	88 1f       	adc	r24, r24
    8d2e:	91 50       	subi	r25, 0x01	; 1
    8d30:	50 40       	sbci	r21, 0x00	; 0
    8d32:	c1 f7       	brne	.-16     	; 0x8d24 <ldexp+0x16>
    8d34:	9e 3f       	cpi	r25, 0xFE	; 254
    8d36:	51 05       	cpc	r21, r1
    8d38:	44 f7       	brge	.-48     	; 0x8d0a <__fp_powsodd+0x22>
    8d3a:	88 0f       	add	r24, r24
    8d3c:	91 1d       	adc	r25, r1
    8d3e:	96 95       	lsr	r25
    8d40:	87 95       	ror	r24
    8d42:	97 f9       	bld	r25, 7
    8d44:	08 95       	ret
    8d46:	5f 3f       	cpi	r21, 0xFF	; 255
    8d48:	ac f0       	brlt	.+42     	; 0x8d74 <ldexp+0x66>
    8d4a:	98 3e       	cpi	r25, 0xE8	; 232
    8d4c:	9c f0       	brlt	.+38     	; 0x8d74 <ldexp+0x66>
    8d4e:	bb 27       	eor	r27, r27
    8d50:	86 95       	lsr	r24
    8d52:	77 95       	ror	r23
    8d54:	67 95       	ror	r22
    8d56:	b7 95       	ror	r27
    8d58:	08 f4       	brcc	.+2      	; 0x8d5c <ldexp+0x4e>
    8d5a:	b1 60       	ori	r27, 0x01	; 1
    8d5c:	93 95       	inc	r25
    8d5e:	c1 f7       	brne	.-16     	; 0x8d50 <ldexp+0x42>
    8d60:	bb 0f       	add	r27, r27
    8d62:	58 f7       	brcc	.-42     	; 0x8d3a <ldexp+0x2c>
    8d64:	11 f4       	brne	.+4      	; 0x8d6a <ldexp+0x5c>
    8d66:	60 ff       	sbrs	r22, 0
    8d68:	e8 cf       	rjmp	.-48     	; 0x8d3a <ldexp+0x2c>
    8d6a:	6f 5f       	subi	r22, 0xFF	; 255
    8d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    8d70:	9f 4f       	sbci	r25, 0xFF	; 255
    8d72:	e3 cf       	rjmp	.-58     	; 0x8d3a <ldexp+0x2c>
    8d74:	b4 ce       	rjmp	.-664    	; 0x8ade <__fp_szero>
    8d76:	0e f0       	brts	.+2      	; 0x8d7a <ldexp+0x6c>
    8d78:	a9 cf       	rjmp	.-174    	; 0x8ccc <__fp_mpack>
    8d7a:	0e ce       	rjmp	.-996    	; 0x8998 <__fp_nan>
    8d7c:	68 94       	set
    8d7e:	06 ce       	rjmp	.-1012   	; 0x898c <__fp_inf>

00008d80 <log>:
    8d80:	93 de       	rcall	.-730    	; 0x8aa8 <__fp_splitA>
    8d82:	c8 f3       	brcs	.-14     	; 0x8d76 <ldexp+0x68>
    8d84:	99 23       	and	r25, r25
    8d86:	d1 f3       	breq	.-12     	; 0x8d7c <ldexp+0x6e>
    8d88:	c6 f3       	brts	.-16     	; 0x8d7a <ldexp+0x6c>
    8d8a:	df 93       	push	r29
    8d8c:	cf 93       	push	r28
    8d8e:	1f 93       	push	r17
    8d90:	0f 93       	push	r16
    8d92:	ff 92       	push	r15
    8d94:	c9 2f       	mov	r28, r25
    8d96:	dd 27       	eor	r29, r29
    8d98:	88 23       	and	r24, r24
    8d9a:	2a f0       	brmi	.+10     	; 0x8da6 <log+0x26>
    8d9c:	21 97       	sbiw	r28, 0x01	; 1
    8d9e:	66 0f       	add	r22, r22
    8da0:	77 1f       	adc	r23, r23
    8da2:	88 1f       	adc	r24, r24
    8da4:	da f7       	brpl	.-10     	; 0x8d9c <log+0x1c>
    8da6:	20 e0       	ldi	r18, 0x00	; 0
    8da8:	30 e0       	ldi	r19, 0x00	; 0
    8daa:	40 e8       	ldi	r20, 0x80	; 128
    8dac:	5f eb       	ldi	r21, 0xBF	; 191
    8dae:	9f e3       	ldi	r25, 0x3F	; 63
    8db0:	88 39       	cpi	r24, 0x98	; 152
    8db2:	20 f0       	brcs	.+8      	; 0x8dbc <log+0x3c>
    8db4:	80 3e       	cpi	r24, 0xE0	; 224
    8db6:	30 f0       	brcs	.+12     	; 0x8dc4 <log+0x44>
    8db8:	21 96       	adiw	r28, 0x01	; 1
    8dba:	8f 77       	andi	r24, 0x7F	; 127
    8dbc:	86 dc       	rcall	.-1780   	; 0x86ca <__addsf3>
    8dbe:	ec e3       	ldi	r30, 0x3C	; 60
    8dc0:	f2 e0       	ldi	r31, 0x02	; 2
    8dc2:	03 c0       	rjmp	.+6      	; 0x8dca <log+0x4a>
    8dc4:	82 dc       	rcall	.-1788   	; 0x86ca <__addsf3>
    8dc6:	e9 e6       	ldi	r30, 0x69	; 105
    8dc8:	f2 e0       	ldi	r31, 0x02	; 2
    8dca:	e9 dd       	rcall	.-1070   	; 0x899e <__fp_powser>
    8dcc:	8b 01       	movw	r16, r22
    8dce:	be 01       	movw	r22, r28
    8dd0:	ec 01       	movw	r28, r24
    8dd2:	fb 2e       	mov	r15, r27
    8dd4:	6f 57       	subi	r22, 0x7F	; 127
    8dd6:	71 09       	sbc	r23, r1
    8dd8:	75 95       	asr	r23
    8dda:	77 1f       	adc	r23, r23
    8ddc:	88 0b       	sbc	r24, r24
    8dde:	99 0b       	sbc	r25, r25
    8de0:	76 dd       	rcall	.-1300   	; 0x88ce <__floatsisf>
    8de2:	28 e1       	ldi	r18, 0x18	; 24
    8de4:	32 e7       	ldi	r19, 0x72	; 114
    8de6:	41 e3       	ldi	r20, 0x31	; 49
    8de8:	5f e3       	ldi	r21, 0x3F	; 63
    8dea:	96 de       	rcall	.-724    	; 0x8b18 <__mulsf3x>
    8dec:	af 2d       	mov	r26, r15
    8dee:	98 01       	movw	r18, r16
    8df0:	ae 01       	movw	r20, r28
    8df2:	ff 90       	pop	r15
    8df4:	0f 91       	pop	r16
    8df6:	1f 91       	pop	r17
    8df8:	cf 91       	pop	r28
    8dfa:	df 91       	pop	r29
    8dfc:	77 dc       	rcall	.-1810   	; 0x86ec <__addsf3x>
    8dfe:	2a ce       	rjmp	.-940    	; 0x8a54 <__fp_round>

00008e00 <modf>:
    8e00:	fa 01       	movw	r30, r20
    8e02:	dc 01       	movw	r26, r24
    8e04:	aa 0f       	add	r26, r26
    8e06:	bb 1f       	adc	r27, r27
    8e08:	9b 01       	movw	r18, r22
    8e0a:	ac 01       	movw	r20, r24
    8e0c:	bf 57       	subi	r27, 0x7F	; 127
    8e0e:	28 f4       	brcc	.+10     	; 0x8e1a <modf+0x1a>
    8e10:	22 27       	eor	r18, r18
    8e12:	33 27       	eor	r19, r19
    8e14:	44 27       	eor	r20, r20
    8e16:	50 78       	andi	r21, 0x80	; 128
    8e18:	1f c0       	rjmp	.+62     	; 0x8e58 <modf+0x58>
    8e1a:	b7 51       	subi	r27, 0x17	; 23
    8e1c:	88 f4       	brcc	.+34     	; 0x8e40 <modf+0x40>
    8e1e:	ab 2f       	mov	r26, r27
    8e20:	00 24       	eor	r0, r0
    8e22:	46 95       	lsr	r20
    8e24:	37 95       	ror	r19
    8e26:	27 95       	ror	r18
    8e28:	01 1c       	adc	r0, r1
    8e2a:	a3 95       	inc	r26
    8e2c:	d2 f3       	brmi	.-12     	; 0x8e22 <modf+0x22>
    8e2e:	00 20       	and	r0, r0
    8e30:	69 f0       	breq	.+26     	; 0x8e4c <modf+0x4c>
    8e32:	22 0f       	add	r18, r18
    8e34:	33 1f       	adc	r19, r19
    8e36:	44 1f       	adc	r20, r20
    8e38:	b3 95       	inc	r27
    8e3a:	da f3       	brmi	.-10     	; 0x8e32 <modf+0x32>
    8e3c:	0d d0       	rcall	.+26     	; 0x8e58 <modf+0x58>
    8e3e:	44 cc       	rjmp	.-1912   	; 0x86c8 <__subsf3>
    8e40:	61 30       	cpi	r22, 0x01	; 1
    8e42:	71 05       	cpc	r23, r1
    8e44:	a0 e8       	ldi	r26, 0x80	; 128
    8e46:	8a 07       	cpc	r24, r26
    8e48:	b9 46       	sbci	r27, 0x69	; 105
    8e4a:	30 f4       	brcc	.+12     	; 0x8e58 <modf+0x58>
    8e4c:	9b 01       	movw	r18, r22
    8e4e:	ac 01       	movw	r20, r24
    8e50:	66 27       	eor	r22, r22
    8e52:	77 27       	eor	r23, r23
    8e54:	88 27       	eor	r24, r24
    8e56:	90 78       	andi	r25, 0x80	; 128
    8e58:	30 96       	adiw	r30, 0x00	; 0
    8e5a:	21 f0       	breq	.+8      	; 0x8e64 <modf+0x64>
    8e5c:	20 83       	st	Z, r18
    8e5e:	31 83       	std	Z+1, r19	; 0x01
    8e60:	42 83       	std	Z+2, r20	; 0x02
    8e62:	53 83       	std	Z+3, r21	; 0x03
    8e64:	08 95       	ret

00008e66 <vfprintf>:
    8e66:	2f 92       	push	r2
    8e68:	3f 92       	push	r3
    8e6a:	4f 92       	push	r4
    8e6c:	5f 92       	push	r5
    8e6e:	6f 92       	push	r6
    8e70:	7f 92       	push	r7
    8e72:	8f 92       	push	r8
    8e74:	9f 92       	push	r9
    8e76:	af 92       	push	r10
    8e78:	bf 92       	push	r11
    8e7a:	cf 92       	push	r12
    8e7c:	df 92       	push	r13
    8e7e:	ef 92       	push	r14
    8e80:	ff 92       	push	r15
    8e82:	0f 93       	push	r16
    8e84:	1f 93       	push	r17
    8e86:	cf 93       	push	r28
    8e88:	df 93       	push	r29
    8e8a:	cd b7       	in	r28, 0x3d	; 61
    8e8c:	de b7       	in	r29, 0x3e	; 62
    8e8e:	63 97       	sbiw	r28, 0x13	; 19
    8e90:	0f b6       	in	r0, 0x3f	; 63
    8e92:	f8 94       	cli
    8e94:	de bf       	out	0x3e, r29	; 62
    8e96:	0f be       	out	0x3f, r0	; 63
    8e98:	cd bf       	out	0x3d, r28	; 61
    8e9a:	6c 01       	movw	r12, r24
    8e9c:	4b 01       	movw	r8, r22
    8e9e:	2a 01       	movw	r4, r20
    8ea0:	fc 01       	movw	r30, r24
    8ea2:	17 82       	std	Z+7, r1	; 0x07
    8ea4:	16 82       	std	Z+6, r1	; 0x06
    8ea6:	83 81       	ldd	r24, Z+3	; 0x03
    8ea8:	81 ff       	sbrs	r24, 1
    8eaa:	29 c3       	rjmp	.+1618   	; 0x94fe <vfprintf+0x698>
    8eac:	ae 01       	movw	r20, r28
    8eae:	4f 5f       	subi	r20, 0xFF	; 255
    8eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    8eb2:	3a 01       	movw	r6, r20
    8eb4:	f6 01       	movw	r30, r12
    8eb6:	93 81       	ldd	r25, Z+3	; 0x03
    8eb8:	f4 01       	movw	r30, r8
    8eba:	93 fd       	sbrc	r25, 3
    8ebc:	85 91       	lpm	r24, Z+
    8ebe:	93 ff       	sbrs	r25, 3
    8ec0:	81 91       	ld	r24, Z+
    8ec2:	4f 01       	movw	r8, r30
    8ec4:	88 23       	and	r24, r24
    8ec6:	09 f4       	brne	.+2      	; 0x8eca <vfprintf+0x64>
    8ec8:	16 c3       	rjmp	.+1580   	; 0x94f6 <vfprintf+0x690>
    8eca:	85 32       	cpi	r24, 0x25	; 37
    8ecc:	39 f4       	brne	.+14     	; 0x8edc <vfprintf+0x76>
    8ece:	93 fd       	sbrc	r25, 3
    8ed0:	85 91       	lpm	r24, Z+
    8ed2:	93 ff       	sbrs	r25, 3
    8ed4:	81 91       	ld	r24, Z+
    8ed6:	4f 01       	movw	r8, r30
    8ed8:	85 32       	cpi	r24, 0x25	; 37
    8eda:	31 f4       	brne	.+12     	; 0x8ee8 <vfprintf+0x82>
    8edc:	b6 01       	movw	r22, r12
    8ede:	90 e0       	ldi	r25, 0x00	; 0
    8ee0:	1f d7       	rcall	.+3646   	; 0x9d20 <fputc>
    8ee2:	52 01       	movw	r10, r4
    8ee4:	25 01       	movw	r4, r10
    8ee6:	e6 cf       	rjmp	.-52     	; 0x8eb4 <vfprintf+0x4e>
    8ee8:	10 e0       	ldi	r17, 0x00	; 0
    8eea:	f1 2c       	mov	r15, r1
    8eec:	20 e0       	ldi	r18, 0x00	; 0
    8eee:	20 32       	cpi	r18, 0x20	; 32
    8ef0:	a0 f4       	brcc	.+40     	; 0x8f1a <vfprintf+0xb4>
    8ef2:	8b 32       	cpi	r24, 0x2B	; 43
    8ef4:	69 f0       	breq	.+26     	; 0x8f10 <vfprintf+0xaa>
    8ef6:	30 f4       	brcc	.+12     	; 0x8f04 <vfprintf+0x9e>
    8ef8:	80 32       	cpi	r24, 0x20	; 32
    8efa:	59 f0       	breq	.+22     	; 0x8f12 <vfprintf+0xac>
    8efc:	83 32       	cpi	r24, 0x23	; 35
    8efe:	69 f4       	brne	.+26     	; 0x8f1a <vfprintf+0xb4>
    8f00:	20 61       	ori	r18, 0x10	; 16
    8f02:	2c c0       	rjmp	.+88     	; 0x8f5c <vfprintf+0xf6>
    8f04:	8d 32       	cpi	r24, 0x2D	; 45
    8f06:	39 f0       	breq	.+14     	; 0x8f16 <vfprintf+0xb0>
    8f08:	80 33       	cpi	r24, 0x30	; 48
    8f0a:	39 f4       	brne	.+14     	; 0x8f1a <vfprintf+0xb4>
    8f0c:	21 60       	ori	r18, 0x01	; 1
    8f0e:	26 c0       	rjmp	.+76     	; 0x8f5c <vfprintf+0xf6>
    8f10:	22 60       	ori	r18, 0x02	; 2
    8f12:	24 60       	ori	r18, 0x04	; 4
    8f14:	23 c0       	rjmp	.+70     	; 0x8f5c <vfprintf+0xf6>
    8f16:	28 60       	ori	r18, 0x08	; 8
    8f18:	21 c0       	rjmp	.+66     	; 0x8f5c <vfprintf+0xf6>
    8f1a:	27 fd       	sbrc	r18, 7
    8f1c:	27 c0       	rjmp	.+78     	; 0x8f6c <vfprintf+0x106>
    8f1e:	30 ed       	ldi	r19, 0xD0	; 208
    8f20:	38 0f       	add	r19, r24
    8f22:	3a 30       	cpi	r19, 0x0A	; 10
    8f24:	78 f4       	brcc	.+30     	; 0x8f44 <vfprintf+0xde>
    8f26:	26 ff       	sbrs	r18, 6
    8f28:	06 c0       	rjmp	.+12     	; 0x8f36 <vfprintf+0xd0>
    8f2a:	fa e0       	ldi	r31, 0x0A	; 10
    8f2c:	1f 9f       	mul	r17, r31
    8f2e:	30 0d       	add	r19, r0
    8f30:	11 24       	eor	r1, r1
    8f32:	13 2f       	mov	r17, r19
    8f34:	13 c0       	rjmp	.+38     	; 0x8f5c <vfprintf+0xf6>
    8f36:	4a e0       	ldi	r20, 0x0A	; 10
    8f38:	f4 9e       	mul	r15, r20
    8f3a:	30 0d       	add	r19, r0
    8f3c:	11 24       	eor	r1, r1
    8f3e:	f3 2e       	mov	r15, r19
    8f40:	20 62       	ori	r18, 0x20	; 32
    8f42:	0c c0       	rjmp	.+24     	; 0x8f5c <vfprintf+0xf6>
    8f44:	8e 32       	cpi	r24, 0x2E	; 46
    8f46:	21 f4       	brne	.+8      	; 0x8f50 <vfprintf+0xea>
    8f48:	26 fd       	sbrc	r18, 6
    8f4a:	d5 c2       	rjmp	.+1450   	; 0x94f6 <vfprintf+0x690>
    8f4c:	20 64       	ori	r18, 0x40	; 64
    8f4e:	06 c0       	rjmp	.+12     	; 0x8f5c <vfprintf+0xf6>
    8f50:	8c 36       	cpi	r24, 0x6C	; 108
    8f52:	11 f4       	brne	.+4      	; 0x8f58 <vfprintf+0xf2>
    8f54:	20 68       	ori	r18, 0x80	; 128
    8f56:	02 c0       	rjmp	.+4      	; 0x8f5c <vfprintf+0xf6>
    8f58:	88 36       	cpi	r24, 0x68	; 104
    8f5a:	41 f4       	brne	.+16     	; 0x8f6c <vfprintf+0x106>
    8f5c:	f4 01       	movw	r30, r8
    8f5e:	93 fd       	sbrc	r25, 3
    8f60:	85 91       	lpm	r24, Z+
    8f62:	93 ff       	sbrs	r25, 3
    8f64:	81 91       	ld	r24, Z+
    8f66:	4f 01       	movw	r8, r30
    8f68:	81 11       	cpse	r24, r1
    8f6a:	c1 cf       	rjmp	.-126    	; 0x8eee <vfprintf+0x88>
    8f6c:	9b eb       	ldi	r25, 0xBB	; 187
    8f6e:	98 0f       	add	r25, r24
    8f70:	93 30       	cpi	r25, 0x03	; 3
    8f72:	18 f4       	brcc	.+6      	; 0x8f7a <vfprintf+0x114>
    8f74:	20 61       	ori	r18, 0x10	; 16
    8f76:	80 5e       	subi	r24, 0xE0	; 224
    8f78:	06 c0       	rjmp	.+12     	; 0x8f86 <vfprintf+0x120>
    8f7a:	9b e9       	ldi	r25, 0x9B	; 155
    8f7c:	98 0f       	add	r25, r24
    8f7e:	93 30       	cpi	r25, 0x03	; 3
    8f80:	08 f0       	brcs	.+2      	; 0x8f84 <vfprintf+0x11e>
    8f82:	64 c1       	rjmp	.+712    	; 0x924c <vfprintf+0x3e6>
    8f84:	2f 7e       	andi	r18, 0xEF	; 239
    8f86:	26 ff       	sbrs	r18, 6
    8f88:	16 e0       	ldi	r17, 0x06	; 6
    8f8a:	2f 73       	andi	r18, 0x3F	; 63
    8f8c:	32 2e       	mov	r3, r18
    8f8e:	85 36       	cpi	r24, 0x65	; 101
    8f90:	19 f4       	brne	.+6      	; 0x8f98 <vfprintf+0x132>
    8f92:	20 64       	ori	r18, 0x40	; 64
    8f94:	32 2e       	mov	r3, r18
    8f96:	08 c0       	rjmp	.+16     	; 0x8fa8 <vfprintf+0x142>
    8f98:	86 36       	cpi	r24, 0x66	; 102
    8f9a:	21 f4       	brne	.+8      	; 0x8fa4 <vfprintf+0x13e>
    8f9c:	f2 2f       	mov	r31, r18
    8f9e:	f0 68       	ori	r31, 0x80	; 128
    8fa0:	3f 2e       	mov	r3, r31
    8fa2:	02 c0       	rjmp	.+4      	; 0x8fa8 <vfprintf+0x142>
    8fa4:	11 11       	cpse	r17, r1
    8fa6:	11 50       	subi	r17, 0x01	; 1
    8fa8:	37 fe       	sbrs	r3, 7
    8faa:	07 c0       	rjmp	.+14     	; 0x8fba <vfprintf+0x154>
    8fac:	1c 33       	cpi	r17, 0x3C	; 60
    8fae:	50 f4       	brcc	.+20     	; 0x8fc4 <vfprintf+0x15e>
    8fb0:	ee 24       	eor	r14, r14
    8fb2:	e3 94       	inc	r14
    8fb4:	e1 0e       	add	r14, r17
    8fb6:	27 e0       	ldi	r18, 0x07	; 7
    8fb8:	0b c0       	rjmp	.+22     	; 0x8fd0 <vfprintf+0x16a>
    8fba:	18 30       	cpi	r17, 0x08	; 8
    8fbc:	38 f0       	brcs	.+14     	; 0x8fcc <vfprintf+0x166>
    8fbe:	27 e0       	ldi	r18, 0x07	; 7
    8fc0:	17 e0       	ldi	r17, 0x07	; 7
    8fc2:	05 c0       	rjmp	.+10     	; 0x8fce <vfprintf+0x168>
    8fc4:	27 e0       	ldi	r18, 0x07	; 7
    8fc6:	4c e3       	ldi	r20, 0x3C	; 60
    8fc8:	e4 2e       	mov	r14, r20
    8fca:	02 c0       	rjmp	.+4      	; 0x8fd0 <vfprintf+0x16a>
    8fcc:	21 2f       	mov	r18, r17
    8fce:	e1 2c       	mov	r14, r1
    8fd0:	52 01       	movw	r10, r4
    8fd2:	44 e0       	ldi	r20, 0x04	; 4
    8fd4:	a4 0e       	add	r10, r20
    8fd6:	b1 1c       	adc	r11, r1
    8fd8:	f2 01       	movw	r30, r4
    8fda:	60 81       	ld	r22, Z
    8fdc:	71 81       	ldd	r23, Z+1	; 0x01
    8fde:	82 81       	ldd	r24, Z+2	; 0x02
    8fe0:	93 81       	ldd	r25, Z+3	; 0x03
    8fe2:	0e 2d       	mov	r16, r14
    8fe4:	a3 01       	movw	r20, r6
    8fe6:	ae d5       	rcall	.+2908   	; 0x9b44 <__ftoa_engine>
    8fe8:	2c 01       	movw	r4, r24
    8fea:	09 81       	ldd	r16, Y+1	; 0x01
    8fec:	00 ff       	sbrs	r16, 0
    8fee:	02 c0       	rjmp	.+4      	; 0x8ff4 <vfprintf+0x18e>
    8ff0:	03 ff       	sbrs	r16, 3
    8ff2:	07 c0       	rjmp	.+14     	; 0x9002 <vfprintf+0x19c>
    8ff4:	31 fc       	sbrc	r3, 1
    8ff6:	08 c0       	rjmp	.+16     	; 0x9008 <vfprintf+0x1a2>
    8ff8:	32 fe       	sbrs	r3, 2
    8ffa:	09 c0       	rjmp	.+18     	; 0x900e <vfprintf+0x1a8>
    8ffc:	30 e2       	ldi	r19, 0x20	; 32
    8ffe:	23 2e       	mov	r2, r19
    9000:	07 c0       	rjmp	.+14     	; 0x9010 <vfprintf+0x1aa>
    9002:	2d e2       	ldi	r18, 0x2D	; 45
    9004:	22 2e       	mov	r2, r18
    9006:	04 c0       	rjmp	.+8      	; 0x9010 <vfprintf+0x1aa>
    9008:	9b e2       	ldi	r25, 0x2B	; 43
    900a:	29 2e       	mov	r2, r25
    900c:	01 c0       	rjmp	.+2      	; 0x9010 <vfprintf+0x1aa>
    900e:	21 2c       	mov	r2, r1
    9010:	80 2f       	mov	r24, r16
    9012:	8c 70       	andi	r24, 0x0C	; 12
    9014:	19 f0       	breq	.+6      	; 0x901c <vfprintf+0x1b6>
    9016:	21 10       	cpse	r2, r1
    9018:	51 c2       	rjmp	.+1186   	; 0x94bc <vfprintf+0x656>
    901a:	8d c2       	rjmp	.+1306   	; 0x9536 <vfprintf+0x6d0>
    901c:	37 fe       	sbrs	r3, 7
    901e:	0f c0       	rjmp	.+30     	; 0x903e <vfprintf+0x1d8>
    9020:	e4 0c       	add	r14, r4
    9022:	04 ff       	sbrs	r16, 4
    9024:	04 c0       	rjmp	.+8      	; 0x902e <vfprintf+0x1c8>
    9026:	8a 81       	ldd	r24, Y+2	; 0x02
    9028:	81 33       	cpi	r24, 0x31	; 49
    902a:	09 f4       	brne	.+2      	; 0x902e <vfprintf+0x1c8>
    902c:	ea 94       	dec	r14
    902e:	1e 14       	cp	r1, r14
    9030:	74 f5       	brge	.+92     	; 0x908e <vfprintf+0x228>
    9032:	f8 e0       	ldi	r31, 0x08	; 8
    9034:	fe 15       	cp	r31, r14
    9036:	78 f5       	brcc	.+94     	; 0x9096 <vfprintf+0x230>
    9038:	88 e0       	ldi	r24, 0x08	; 8
    903a:	e8 2e       	mov	r14, r24
    903c:	2c c0       	rjmp	.+88     	; 0x9096 <vfprintf+0x230>
    903e:	36 fc       	sbrc	r3, 6
    9040:	2a c0       	rjmp	.+84     	; 0x9096 <vfprintf+0x230>
    9042:	81 2f       	mov	r24, r17
    9044:	90 e0       	ldi	r25, 0x00	; 0
    9046:	84 15       	cp	r24, r4
    9048:	95 05       	cpc	r25, r5
    904a:	9c f0       	brlt	.+38     	; 0x9072 <vfprintf+0x20c>
    904c:	2c ef       	ldi	r18, 0xFC	; 252
    904e:	42 16       	cp	r4, r18
    9050:	2f ef       	ldi	r18, 0xFF	; 255
    9052:	52 06       	cpc	r5, r18
    9054:	74 f0       	brlt	.+28     	; 0x9072 <vfprintf+0x20c>
    9056:	43 2d       	mov	r20, r3
    9058:	40 68       	ori	r20, 0x80	; 128
    905a:	34 2e       	mov	r3, r20
    905c:	0a c0       	rjmp	.+20     	; 0x9072 <vfprintf+0x20c>
    905e:	e2 e0       	ldi	r30, 0x02	; 2
    9060:	f0 e0       	ldi	r31, 0x00	; 0
    9062:	ec 0f       	add	r30, r28
    9064:	fd 1f       	adc	r31, r29
    9066:	e1 0f       	add	r30, r17
    9068:	f1 1d       	adc	r31, r1
    906a:	80 81       	ld	r24, Z
    906c:	80 33       	cpi	r24, 0x30	; 48
    906e:	19 f4       	brne	.+6      	; 0x9076 <vfprintf+0x210>
    9070:	11 50       	subi	r17, 0x01	; 1
    9072:	11 11       	cpse	r17, r1
    9074:	f4 cf       	rjmp	.-24     	; 0x905e <vfprintf+0x1f8>
    9076:	37 fe       	sbrs	r3, 7
    9078:	0e c0       	rjmp	.+28     	; 0x9096 <vfprintf+0x230>
    907a:	ee 24       	eor	r14, r14
    907c:	e3 94       	inc	r14
    907e:	e1 0e       	add	r14, r17
    9080:	81 2f       	mov	r24, r17
    9082:	90 e0       	ldi	r25, 0x00	; 0
    9084:	48 16       	cp	r4, r24
    9086:	59 06       	cpc	r5, r25
    9088:	2c f4       	brge	.+10     	; 0x9094 <vfprintf+0x22e>
    908a:	14 19       	sub	r17, r4
    908c:	04 c0       	rjmp	.+8      	; 0x9096 <vfprintf+0x230>
    908e:	ee 24       	eor	r14, r14
    9090:	e3 94       	inc	r14
    9092:	01 c0       	rjmp	.+2      	; 0x9096 <vfprintf+0x230>
    9094:	10 e0       	ldi	r17, 0x00	; 0
    9096:	37 fe       	sbrs	r3, 7
    9098:	06 c0       	rjmp	.+12     	; 0x90a6 <vfprintf+0x240>
    909a:	14 14       	cp	r1, r4
    909c:	15 04       	cpc	r1, r5
    909e:	34 f4       	brge	.+12     	; 0x90ac <vfprintf+0x246>
    90a0:	c2 01       	movw	r24, r4
    90a2:	01 96       	adiw	r24, 0x01	; 1
    90a4:	05 c0       	rjmp	.+10     	; 0x90b0 <vfprintf+0x24a>
    90a6:	85 e0       	ldi	r24, 0x05	; 5
    90a8:	90 e0       	ldi	r25, 0x00	; 0
    90aa:	02 c0       	rjmp	.+4      	; 0x90b0 <vfprintf+0x24a>
    90ac:	81 e0       	ldi	r24, 0x01	; 1
    90ae:	90 e0       	ldi	r25, 0x00	; 0
    90b0:	21 10       	cpse	r2, r1
    90b2:	01 96       	adiw	r24, 0x01	; 1
    90b4:	11 23       	and	r17, r17
    90b6:	31 f0       	breq	.+12     	; 0x90c4 <vfprintf+0x25e>
    90b8:	21 2f       	mov	r18, r17
    90ba:	30 e0       	ldi	r19, 0x00	; 0
    90bc:	2f 5f       	subi	r18, 0xFF	; 255
    90be:	3f 4f       	sbci	r19, 0xFF	; 255
    90c0:	82 0f       	add	r24, r18
    90c2:	93 1f       	adc	r25, r19
    90c4:	2f 2d       	mov	r18, r15
    90c6:	30 e0       	ldi	r19, 0x00	; 0
    90c8:	82 17       	cp	r24, r18
    90ca:	93 07       	cpc	r25, r19
    90cc:	14 f4       	brge	.+4      	; 0x90d2 <vfprintf+0x26c>
    90ce:	f8 1a       	sub	r15, r24
    90d0:	01 c0       	rjmp	.+2      	; 0x90d4 <vfprintf+0x26e>
    90d2:	f1 2c       	mov	r15, r1
    90d4:	83 2d       	mov	r24, r3
    90d6:	89 70       	andi	r24, 0x09	; 9
    90d8:	41 f4       	brne	.+16     	; 0x90ea <vfprintf+0x284>
    90da:	ff 20       	and	r15, r15
    90dc:	31 f0       	breq	.+12     	; 0x90ea <vfprintf+0x284>
    90de:	b6 01       	movw	r22, r12
    90e0:	80 e2       	ldi	r24, 0x20	; 32
    90e2:	90 e0       	ldi	r25, 0x00	; 0
    90e4:	1d d6       	rcall	.+3130   	; 0x9d20 <fputc>
    90e6:	fa 94       	dec	r15
    90e8:	f8 cf       	rjmp	.-16     	; 0x90da <vfprintf+0x274>
    90ea:	22 20       	and	r2, r2
    90ec:	21 f0       	breq	.+8      	; 0x90f6 <vfprintf+0x290>
    90ee:	b6 01       	movw	r22, r12
    90f0:	82 2d       	mov	r24, r2
    90f2:	90 e0       	ldi	r25, 0x00	; 0
    90f4:	15 d6       	rcall	.+3114   	; 0x9d20 <fputc>
    90f6:	33 fc       	sbrc	r3, 3
    90f8:	08 c0       	rjmp	.+16     	; 0x910a <vfprintf+0x2a4>
    90fa:	ff 20       	and	r15, r15
    90fc:	31 f0       	breq	.+12     	; 0x910a <vfprintf+0x2a4>
    90fe:	b6 01       	movw	r22, r12
    9100:	80 e3       	ldi	r24, 0x30	; 48
    9102:	90 e0       	ldi	r25, 0x00	; 0
    9104:	0d d6       	rcall	.+3098   	; 0x9d20 <fputc>
    9106:	fa 94       	dec	r15
    9108:	f8 cf       	rjmp	.-16     	; 0x90fa <vfprintf+0x294>
    910a:	37 fe       	sbrs	r3, 7
    910c:	58 c0       	rjmp	.+176    	; 0x91be <vfprintf+0x358>
    910e:	94 2d       	mov	r25, r4
    9110:	85 2d       	mov	r24, r5
    9112:	57 fe       	sbrs	r5, 7
    9114:	02 c0       	rjmp	.+4      	; 0x911a <vfprintf+0x2b4>
    9116:	90 e0       	ldi	r25, 0x00	; 0
    9118:	80 e0       	ldi	r24, 0x00	; 0
    911a:	29 2e       	mov	r2, r25
    911c:	38 2e       	mov	r3, r24
    911e:	20 e0       	ldi	r18, 0x00	; 0
    9120:	30 e0       	ldi	r19, 0x00	; 0
    9122:	a2 01       	movw	r20, r4
    9124:	4e 19       	sub	r20, r14
    9126:	51 09       	sbc	r21, r1
    9128:	5d 87       	std	Y+13, r21	; 0x0d
    912a:	4c 87       	std	Y+12, r20	; 0x0c
    912c:	a2 01       	movw	r20, r4
    912e:	42 19       	sub	r20, r2
    9130:	53 09       	sbc	r21, r3
    9132:	5f 87       	std	Y+15, r21	; 0x0f
    9134:	4e 87       	std	Y+14, r20	; 0x0e
    9136:	61 2f       	mov	r22, r17
    9138:	70 e0       	ldi	r23, 0x00	; 0
    913a:	44 27       	eor	r20, r20
    913c:	55 27       	eor	r21, r21
    913e:	46 1b       	sub	r20, r22
    9140:	57 0b       	sbc	r21, r23
    9142:	59 8b       	std	Y+17, r21	; 0x11
    9144:	48 8b       	std	Y+16, r20	; 0x10
    9146:	5f ef       	ldi	r21, 0xFF	; 255
    9148:	25 16       	cp	r2, r21
    914a:	35 06       	cpc	r3, r21
    914c:	41 f4       	brne	.+16     	; 0x915e <vfprintf+0x2f8>
    914e:	b6 01       	movw	r22, r12
    9150:	8e e2       	ldi	r24, 0x2E	; 46
    9152:	90 e0       	ldi	r25, 0x00	; 0
    9154:	2a 8b       	std	Y+18, r18	; 0x12
    9156:	3b 8b       	std	Y+19, r19	; 0x13
    9158:	e3 d5       	rcall	.+3014   	; 0x9d20 <fputc>
    915a:	3b 89       	ldd	r19, Y+19	; 0x13
    915c:	2a 89       	ldd	r18, Y+18	; 0x12
    915e:	42 14       	cp	r4, r2
    9160:	53 04       	cpc	r5, r3
    9162:	6c f0       	brlt	.+26     	; 0x917e <vfprintf+0x318>
    9164:	4c 85       	ldd	r20, Y+12	; 0x0c
    9166:	5d 85       	ldd	r21, Y+13	; 0x0d
    9168:	42 15       	cp	r20, r2
    916a:	53 05       	cpc	r21, r3
    916c:	44 f4       	brge	.+16     	; 0x917e <vfprintf+0x318>
    916e:	ee 85       	ldd	r30, Y+14	; 0x0e
    9170:	ff 85       	ldd	r31, Y+15	; 0x0f
    9172:	e2 0f       	add	r30, r18
    9174:	f3 1f       	adc	r31, r19
    9176:	e6 0d       	add	r30, r6
    9178:	f7 1d       	adc	r31, r7
    917a:	81 81       	ldd	r24, Z+1	; 0x01
    917c:	01 c0       	rjmp	.+2      	; 0x9180 <vfprintf+0x31a>
    917e:	80 e3       	ldi	r24, 0x30	; 48
    9180:	51 e0       	ldi	r21, 0x01	; 1
    9182:	25 1a       	sub	r2, r21
    9184:	31 08       	sbc	r3, r1
    9186:	2f 5f       	subi	r18, 0xFF	; 255
    9188:	3f 4f       	sbci	r19, 0xFF	; 255
    918a:	48 89       	ldd	r20, Y+16	; 0x10
    918c:	59 89       	ldd	r21, Y+17	; 0x11
    918e:	24 16       	cp	r2, r20
    9190:	35 06       	cpc	r3, r21
    9192:	44 f0       	brlt	.+16     	; 0x91a4 <vfprintf+0x33e>
    9194:	b6 01       	movw	r22, r12
    9196:	90 e0       	ldi	r25, 0x00	; 0
    9198:	2a 8b       	std	Y+18, r18	; 0x12
    919a:	3b 8b       	std	Y+19, r19	; 0x13
    919c:	c1 d5       	rcall	.+2946   	; 0x9d20 <fputc>
    919e:	2a 89       	ldd	r18, Y+18	; 0x12
    91a0:	3b 89       	ldd	r19, Y+19	; 0x13
    91a2:	d1 cf       	rjmp	.-94     	; 0x9146 <vfprintf+0x2e0>
    91a4:	24 14       	cp	r2, r4
    91a6:	35 04       	cpc	r3, r5
    91a8:	39 f4       	brne	.+14     	; 0x91b8 <vfprintf+0x352>
    91aa:	9a 81       	ldd	r25, Y+2	; 0x02
    91ac:	96 33       	cpi	r25, 0x36	; 54
    91ae:	18 f4       	brcc	.+6      	; 0x91b6 <vfprintf+0x350>
    91b0:	95 33       	cpi	r25, 0x35	; 53
    91b2:	11 f4       	brne	.+4      	; 0x91b8 <vfprintf+0x352>
    91b4:	04 ff       	sbrs	r16, 4
    91b6:	81 e3       	ldi	r24, 0x31	; 49
    91b8:	b6 01       	movw	r22, r12
    91ba:	90 e0       	ldi	r25, 0x00	; 0
    91bc:	45 c0       	rjmp	.+138    	; 0x9248 <vfprintf+0x3e2>
    91be:	8a 81       	ldd	r24, Y+2	; 0x02
    91c0:	81 33       	cpi	r24, 0x31	; 49
    91c2:	09 f0       	breq	.+2      	; 0x91c6 <vfprintf+0x360>
    91c4:	0f 7e       	andi	r16, 0xEF	; 239
    91c6:	b6 01       	movw	r22, r12
    91c8:	90 e0       	ldi	r25, 0x00	; 0
    91ca:	aa d5       	rcall	.+2900   	; 0x9d20 <fputc>
    91cc:	11 11       	cpse	r17, r1
    91ce:	05 c0       	rjmp	.+10     	; 0x91da <vfprintf+0x374>
    91d0:	34 fc       	sbrc	r3, 4
    91d2:	16 c0       	rjmp	.+44     	; 0x9200 <vfprintf+0x39a>
    91d4:	85 e6       	ldi	r24, 0x65	; 101
    91d6:	90 e0       	ldi	r25, 0x00	; 0
    91d8:	15 c0       	rjmp	.+42     	; 0x9204 <vfprintf+0x39e>
    91da:	b6 01       	movw	r22, r12
    91dc:	8e e2       	ldi	r24, 0x2E	; 46
    91de:	90 e0       	ldi	r25, 0x00	; 0
    91e0:	9f d5       	rcall	.+2878   	; 0x9d20 <fputc>
    91e2:	82 e0       	ldi	r24, 0x02	; 2
    91e4:	ee 24       	eor	r14, r14
    91e6:	e3 94       	inc	r14
    91e8:	e8 0e       	add	r14, r24
    91ea:	f3 01       	movw	r30, r6
    91ec:	e8 0f       	add	r30, r24
    91ee:	f1 1d       	adc	r31, r1
    91f0:	80 81       	ld	r24, Z
    91f2:	b6 01       	movw	r22, r12
    91f4:	90 e0       	ldi	r25, 0x00	; 0
    91f6:	94 d5       	rcall	.+2856   	; 0x9d20 <fputc>
    91f8:	11 50       	subi	r17, 0x01	; 1
    91fa:	8e 2d       	mov	r24, r14
    91fc:	99 f7       	brne	.-26     	; 0x91e4 <vfprintf+0x37e>
    91fe:	e8 cf       	rjmp	.-48     	; 0x91d0 <vfprintf+0x36a>
    9200:	85 e4       	ldi	r24, 0x45	; 69
    9202:	90 e0       	ldi	r25, 0x00	; 0
    9204:	b6 01       	movw	r22, r12
    9206:	8c d5       	rcall	.+2840   	; 0x9d20 <fputc>
    9208:	57 fc       	sbrc	r5, 7
    920a:	05 c0       	rjmp	.+10     	; 0x9216 <vfprintf+0x3b0>
    920c:	41 14       	cp	r4, r1
    920e:	51 04       	cpc	r5, r1
    9210:	39 f4       	brne	.+14     	; 0x9220 <vfprintf+0x3ba>
    9212:	04 ff       	sbrs	r16, 4
    9214:	05 c0       	rjmp	.+10     	; 0x9220 <vfprintf+0x3ba>
    9216:	51 94       	neg	r5
    9218:	41 94       	neg	r4
    921a:	51 08       	sbc	r5, r1
    921c:	8d e2       	ldi	r24, 0x2D	; 45
    921e:	01 c0       	rjmp	.+2      	; 0x9222 <vfprintf+0x3bc>
    9220:	8b e2       	ldi	r24, 0x2B	; 43
    9222:	b6 01       	movw	r22, r12
    9224:	90 e0       	ldi	r25, 0x00	; 0
    9226:	7c d5       	rcall	.+2808   	; 0x9d20 <fputc>
    9228:	80 e3       	ldi	r24, 0x30	; 48
    922a:	9a e0       	ldi	r25, 0x0A	; 10
    922c:	49 16       	cp	r4, r25
    922e:	51 04       	cpc	r5, r1
    9230:	2c f0       	brlt	.+10     	; 0x923c <vfprintf+0x3d6>
    9232:	8f 5f       	subi	r24, 0xFF	; 255
    9234:	5a e0       	ldi	r21, 0x0A	; 10
    9236:	45 1a       	sub	r4, r21
    9238:	51 08       	sbc	r5, r1
    923a:	f7 cf       	rjmp	.-18     	; 0x922a <vfprintf+0x3c4>
    923c:	b6 01       	movw	r22, r12
    923e:	90 e0       	ldi	r25, 0x00	; 0
    9240:	6f d5       	rcall	.+2782   	; 0x9d20 <fputc>
    9242:	b6 01       	movw	r22, r12
    9244:	c2 01       	movw	r24, r4
    9246:	c0 96       	adiw	r24, 0x30	; 48
    9248:	6b d5       	rcall	.+2774   	; 0x9d20 <fputc>
    924a:	4c c1       	rjmp	.+664    	; 0x94e4 <vfprintf+0x67e>
    924c:	83 36       	cpi	r24, 0x63	; 99
    924e:	31 f0       	breq	.+12     	; 0x925c <vfprintf+0x3f6>
    9250:	83 37       	cpi	r24, 0x73	; 115
    9252:	79 f0       	breq	.+30     	; 0x9272 <vfprintf+0x40c>
    9254:	83 35       	cpi	r24, 0x53	; 83
    9256:	09 f0       	breq	.+2      	; 0x925a <vfprintf+0x3f4>
    9258:	54 c0       	rjmp	.+168    	; 0x9302 <vfprintf+0x49c>
    925a:	20 c0       	rjmp	.+64     	; 0x929c <vfprintf+0x436>
    925c:	52 01       	movw	r10, r4
    925e:	e2 e0       	ldi	r30, 0x02	; 2
    9260:	ae 0e       	add	r10, r30
    9262:	b1 1c       	adc	r11, r1
    9264:	f2 01       	movw	r30, r4
    9266:	80 81       	ld	r24, Z
    9268:	89 83       	std	Y+1, r24	; 0x01
    926a:	01 e0       	ldi	r16, 0x01	; 1
    926c:	10 e0       	ldi	r17, 0x00	; 0
    926e:	23 01       	movw	r4, r6
    9270:	13 c0       	rjmp	.+38     	; 0x9298 <vfprintf+0x432>
    9272:	52 01       	movw	r10, r4
    9274:	f2 e0       	ldi	r31, 0x02	; 2
    9276:	af 0e       	add	r10, r31
    9278:	b1 1c       	adc	r11, r1
    927a:	f2 01       	movw	r30, r4
    927c:	40 80       	ld	r4, Z
    927e:	51 80       	ldd	r5, Z+1	; 0x01
    9280:	26 ff       	sbrs	r18, 6
    9282:	03 c0       	rjmp	.+6      	; 0x928a <vfprintf+0x424>
    9284:	61 2f       	mov	r22, r17
    9286:	70 e0       	ldi	r23, 0x00	; 0
    9288:	02 c0       	rjmp	.+4      	; 0x928e <vfprintf+0x428>
    928a:	6f ef       	ldi	r22, 0xFF	; 255
    928c:	7f ef       	ldi	r23, 0xFF	; 255
    928e:	c2 01       	movw	r24, r4
    9290:	2a 8b       	std	Y+18, r18	; 0x12
    9292:	3b d5       	rcall	.+2678   	; 0x9d0a <strnlen>
    9294:	8c 01       	movw	r16, r24
    9296:	2a 89       	ldd	r18, Y+18	; 0x12
    9298:	2f 77       	andi	r18, 0x7F	; 127
    929a:	14 c0       	rjmp	.+40     	; 0x92c4 <vfprintf+0x45e>
    929c:	52 01       	movw	r10, r4
    929e:	f2 e0       	ldi	r31, 0x02	; 2
    92a0:	af 0e       	add	r10, r31
    92a2:	b1 1c       	adc	r11, r1
    92a4:	f2 01       	movw	r30, r4
    92a6:	40 80       	ld	r4, Z
    92a8:	51 80       	ldd	r5, Z+1	; 0x01
    92aa:	26 ff       	sbrs	r18, 6
    92ac:	03 c0       	rjmp	.+6      	; 0x92b4 <vfprintf+0x44e>
    92ae:	61 2f       	mov	r22, r17
    92b0:	70 e0       	ldi	r23, 0x00	; 0
    92b2:	02 c0       	rjmp	.+4      	; 0x92b8 <vfprintf+0x452>
    92b4:	6f ef       	ldi	r22, 0xFF	; 255
    92b6:	7f ef       	ldi	r23, 0xFF	; 255
    92b8:	c2 01       	movw	r24, r4
    92ba:	2a 8b       	std	Y+18, r18	; 0x12
    92bc:	1b d5       	rcall	.+2614   	; 0x9cf4 <strnlen_P>
    92be:	8c 01       	movw	r16, r24
    92c0:	2a 89       	ldd	r18, Y+18	; 0x12
    92c2:	20 68       	ori	r18, 0x80	; 128
    92c4:	32 2e       	mov	r3, r18
    92c6:	23 fd       	sbrc	r18, 3
    92c8:	18 c0       	rjmp	.+48     	; 0x92fa <vfprintf+0x494>
    92ca:	8f 2d       	mov	r24, r15
    92cc:	90 e0       	ldi	r25, 0x00	; 0
    92ce:	08 17       	cp	r16, r24
    92d0:	19 07       	cpc	r17, r25
    92d2:	98 f4       	brcc	.+38     	; 0x92fa <vfprintf+0x494>
    92d4:	b6 01       	movw	r22, r12
    92d6:	80 e2       	ldi	r24, 0x20	; 32
    92d8:	90 e0       	ldi	r25, 0x00	; 0
    92da:	22 d5       	rcall	.+2628   	; 0x9d20 <fputc>
    92dc:	fa 94       	dec	r15
    92de:	f5 cf       	rjmp	.-22     	; 0x92ca <vfprintf+0x464>
    92e0:	f2 01       	movw	r30, r4
    92e2:	37 fc       	sbrc	r3, 7
    92e4:	85 91       	lpm	r24, Z+
    92e6:	37 fe       	sbrs	r3, 7
    92e8:	81 91       	ld	r24, Z+
    92ea:	2f 01       	movw	r4, r30
    92ec:	b6 01       	movw	r22, r12
    92ee:	90 e0       	ldi	r25, 0x00	; 0
    92f0:	17 d5       	rcall	.+2606   	; 0x9d20 <fputc>
    92f2:	f1 10       	cpse	r15, r1
    92f4:	fa 94       	dec	r15
    92f6:	01 50       	subi	r16, 0x01	; 1
    92f8:	11 09       	sbc	r17, r1
    92fa:	01 15       	cp	r16, r1
    92fc:	11 05       	cpc	r17, r1
    92fe:	81 f7       	brne	.-32     	; 0x92e0 <vfprintf+0x47a>
    9300:	f1 c0       	rjmp	.+482    	; 0x94e4 <vfprintf+0x67e>
    9302:	84 36       	cpi	r24, 0x64	; 100
    9304:	11 f0       	breq	.+4      	; 0x930a <vfprintf+0x4a4>
    9306:	89 36       	cpi	r24, 0x69	; 105
    9308:	51 f5       	brne	.+84     	; 0x935e <vfprintf+0x4f8>
    930a:	52 01       	movw	r10, r4
    930c:	27 ff       	sbrs	r18, 7
    930e:	09 c0       	rjmp	.+18     	; 0x9322 <vfprintf+0x4bc>
    9310:	f4 e0       	ldi	r31, 0x04	; 4
    9312:	af 0e       	add	r10, r31
    9314:	b1 1c       	adc	r11, r1
    9316:	f2 01       	movw	r30, r4
    9318:	60 81       	ld	r22, Z
    931a:	71 81       	ldd	r23, Z+1	; 0x01
    931c:	82 81       	ldd	r24, Z+2	; 0x02
    931e:	93 81       	ldd	r25, Z+3	; 0x03
    9320:	0a c0       	rjmp	.+20     	; 0x9336 <vfprintf+0x4d0>
    9322:	f2 e0       	ldi	r31, 0x02	; 2
    9324:	af 0e       	add	r10, r31
    9326:	b1 1c       	adc	r11, r1
    9328:	f2 01       	movw	r30, r4
    932a:	60 81       	ld	r22, Z
    932c:	71 81       	ldd	r23, Z+1	; 0x01
    932e:	07 2e       	mov	r0, r23
    9330:	00 0c       	add	r0, r0
    9332:	88 0b       	sbc	r24, r24
    9334:	99 0b       	sbc	r25, r25
    9336:	2f 76       	andi	r18, 0x6F	; 111
    9338:	32 2e       	mov	r3, r18
    933a:	97 ff       	sbrs	r25, 7
    933c:	09 c0       	rjmp	.+18     	; 0x9350 <vfprintf+0x4ea>
    933e:	90 95       	com	r25
    9340:	80 95       	com	r24
    9342:	70 95       	com	r23
    9344:	61 95       	neg	r22
    9346:	7f 4f       	sbci	r23, 0xFF	; 255
    9348:	8f 4f       	sbci	r24, 0xFF	; 255
    934a:	9f 4f       	sbci	r25, 0xFF	; 255
    934c:	20 68       	ori	r18, 0x80	; 128
    934e:	32 2e       	mov	r3, r18
    9350:	2a e0       	ldi	r18, 0x0A	; 10
    9352:	30 e0       	ldi	r19, 0x00	; 0
    9354:	a3 01       	movw	r20, r6
    9356:	4b d5       	rcall	.+2710   	; 0x9dee <__ultoa_invert>
    9358:	e8 2e       	mov	r14, r24
    935a:	e6 18       	sub	r14, r6
    935c:	3e c0       	rjmp	.+124    	; 0x93da <vfprintf+0x574>
    935e:	02 2f       	mov	r16, r18
    9360:	85 37       	cpi	r24, 0x75	; 117
    9362:	21 f4       	brne	.+8      	; 0x936c <vfprintf+0x506>
    9364:	0f 7e       	andi	r16, 0xEF	; 239
    9366:	2a e0       	ldi	r18, 0x0A	; 10
    9368:	30 e0       	ldi	r19, 0x00	; 0
    936a:	1d c0       	rjmp	.+58     	; 0x93a6 <vfprintf+0x540>
    936c:	09 7f       	andi	r16, 0xF9	; 249
    936e:	8f 36       	cpi	r24, 0x6F	; 111
    9370:	91 f0       	breq	.+36     	; 0x9396 <vfprintf+0x530>
    9372:	18 f4       	brcc	.+6      	; 0x937a <vfprintf+0x514>
    9374:	88 35       	cpi	r24, 0x58	; 88
    9376:	59 f0       	breq	.+22     	; 0x938e <vfprintf+0x528>
    9378:	be c0       	rjmp	.+380    	; 0x94f6 <vfprintf+0x690>
    937a:	80 37       	cpi	r24, 0x70	; 112
    937c:	19 f0       	breq	.+6      	; 0x9384 <vfprintf+0x51e>
    937e:	88 37       	cpi	r24, 0x78	; 120
    9380:	11 f0       	breq	.+4      	; 0x9386 <vfprintf+0x520>
    9382:	b9 c0       	rjmp	.+370    	; 0x94f6 <vfprintf+0x690>
    9384:	00 61       	ori	r16, 0x10	; 16
    9386:	04 ff       	sbrs	r16, 4
    9388:	09 c0       	rjmp	.+18     	; 0x939c <vfprintf+0x536>
    938a:	04 60       	ori	r16, 0x04	; 4
    938c:	07 c0       	rjmp	.+14     	; 0x939c <vfprintf+0x536>
    938e:	24 ff       	sbrs	r18, 4
    9390:	08 c0       	rjmp	.+16     	; 0x93a2 <vfprintf+0x53c>
    9392:	06 60       	ori	r16, 0x06	; 6
    9394:	06 c0       	rjmp	.+12     	; 0x93a2 <vfprintf+0x53c>
    9396:	28 e0       	ldi	r18, 0x08	; 8
    9398:	30 e0       	ldi	r19, 0x00	; 0
    939a:	05 c0       	rjmp	.+10     	; 0x93a6 <vfprintf+0x540>
    939c:	20 e1       	ldi	r18, 0x10	; 16
    939e:	30 e0       	ldi	r19, 0x00	; 0
    93a0:	02 c0       	rjmp	.+4      	; 0x93a6 <vfprintf+0x540>
    93a2:	20 e1       	ldi	r18, 0x10	; 16
    93a4:	32 e0       	ldi	r19, 0x02	; 2
    93a6:	52 01       	movw	r10, r4
    93a8:	07 ff       	sbrs	r16, 7
    93aa:	09 c0       	rjmp	.+18     	; 0x93be <vfprintf+0x558>
    93ac:	f4 e0       	ldi	r31, 0x04	; 4
    93ae:	af 0e       	add	r10, r31
    93b0:	b1 1c       	adc	r11, r1
    93b2:	f2 01       	movw	r30, r4
    93b4:	60 81       	ld	r22, Z
    93b6:	71 81       	ldd	r23, Z+1	; 0x01
    93b8:	82 81       	ldd	r24, Z+2	; 0x02
    93ba:	93 81       	ldd	r25, Z+3	; 0x03
    93bc:	08 c0       	rjmp	.+16     	; 0x93ce <vfprintf+0x568>
    93be:	f2 e0       	ldi	r31, 0x02	; 2
    93c0:	af 0e       	add	r10, r31
    93c2:	b1 1c       	adc	r11, r1
    93c4:	f2 01       	movw	r30, r4
    93c6:	60 81       	ld	r22, Z
    93c8:	71 81       	ldd	r23, Z+1	; 0x01
    93ca:	80 e0       	ldi	r24, 0x00	; 0
    93cc:	90 e0       	ldi	r25, 0x00	; 0
    93ce:	a3 01       	movw	r20, r6
    93d0:	0e d5       	rcall	.+2588   	; 0x9dee <__ultoa_invert>
    93d2:	e8 2e       	mov	r14, r24
    93d4:	e6 18       	sub	r14, r6
    93d6:	0f 77       	andi	r16, 0x7F	; 127
    93d8:	30 2e       	mov	r3, r16
    93da:	36 fe       	sbrs	r3, 6
    93dc:	0b c0       	rjmp	.+22     	; 0x93f4 <vfprintf+0x58e>
    93de:	33 2d       	mov	r19, r3
    93e0:	3e 7f       	andi	r19, 0xFE	; 254
    93e2:	e1 16       	cp	r14, r17
    93e4:	50 f4       	brcc	.+20     	; 0x93fa <vfprintf+0x594>
    93e6:	34 fe       	sbrs	r3, 4
    93e8:	0a c0       	rjmp	.+20     	; 0x93fe <vfprintf+0x598>
    93ea:	32 fc       	sbrc	r3, 2
    93ec:	08 c0       	rjmp	.+16     	; 0x93fe <vfprintf+0x598>
    93ee:	33 2d       	mov	r19, r3
    93f0:	3e 7e       	andi	r19, 0xEE	; 238
    93f2:	05 c0       	rjmp	.+10     	; 0x93fe <vfprintf+0x598>
    93f4:	0e 2d       	mov	r16, r14
    93f6:	33 2d       	mov	r19, r3
    93f8:	03 c0       	rjmp	.+6      	; 0x9400 <vfprintf+0x59a>
    93fa:	0e 2d       	mov	r16, r14
    93fc:	01 c0       	rjmp	.+2      	; 0x9400 <vfprintf+0x59a>
    93fe:	01 2f       	mov	r16, r17
    9400:	34 ff       	sbrs	r19, 4
    9402:	0c c0       	rjmp	.+24     	; 0x941c <vfprintf+0x5b6>
    9404:	fe 01       	movw	r30, r28
    9406:	ee 0d       	add	r30, r14
    9408:	f1 1d       	adc	r31, r1
    940a:	80 81       	ld	r24, Z
    940c:	80 33       	cpi	r24, 0x30	; 48
    940e:	11 f4       	brne	.+4      	; 0x9414 <vfprintf+0x5ae>
    9410:	39 7e       	andi	r19, 0xE9	; 233
    9412:	08 c0       	rjmp	.+16     	; 0x9424 <vfprintf+0x5be>
    9414:	32 ff       	sbrs	r19, 2
    9416:	05 c0       	rjmp	.+10     	; 0x9422 <vfprintf+0x5bc>
    9418:	0e 5f       	subi	r16, 0xFE	; 254
    941a:	04 c0       	rjmp	.+8      	; 0x9424 <vfprintf+0x5be>
    941c:	83 2f       	mov	r24, r19
    941e:	86 78       	andi	r24, 0x86	; 134
    9420:	09 f0       	breq	.+2      	; 0x9424 <vfprintf+0x5be>
    9422:	0f 5f       	subi	r16, 0xFF	; 255
    9424:	33 fd       	sbrc	r19, 3
    9426:	12 c0       	rjmp	.+36     	; 0x944c <vfprintf+0x5e6>
    9428:	30 ff       	sbrs	r19, 0
    942a:	06 c0       	rjmp	.+12     	; 0x9438 <vfprintf+0x5d2>
    942c:	1e 2d       	mov	r17, r14
    942e:	0f 15       	cp	r16, r15
    9430:	18 f4       	brcc	.+6      	; 0x9438 <vfprintf+0x5d2>
    9432:	1f 0d       	add	r17, r15
    9434:	10 1b       	sub	r17, r16
    9436:	0f 2d       	mov	r16, r15
    9438:	0f 15       	cp	r16, r15
    943a:	60 f4       	brcc	.+24     	; 0x9454 <vfprintf+0x5ee>
    943c:	b6 01       	movw	r22, r12
    943e:	80 e2       	ldi	r24, 0x20	; 32
    9440:	90 e0       	ldi	r25, 0x00	; 0
    9442:	3b 8b       	std	Y+19, r19	; 0x13
    9444:	6d d4       	rcall	.+2266   	; 0x9d20 <fputc>
    9446:	0f 5f       	subi	r16, 0xFF	; 255
    9448:	3b 89       	ldd	r19, Y+19	; 0x13
    944a:	f6 cf       	rjmp	.-20     	; 0x9438 <vfprintf+0x5d2>
    944c:	0f 15       	cp	r16, r15
    944e:	10 f4       	brcc	.+4      	; 0x9454 <vfprintf+0x5ee>
    9450:	f0 1a       	sub	r15, r16
    9452:	01 c0       	rjmp	.+2      	; 0x9456 <vfprintf+0x5f0>
    9454:	f1 2c       	mov	r15, r1
    9456:	34 ff       	sbrs	r19, 4
    9458:	11 c0       	rjmp	.+34     	; 0x947c <vfprintf+0x616>
    945a:	b6 01       	movw	r22, r12
    945c:	80 e3       	ldi	r24, 0x30	; 48
    945e:	90 e0       	ldi	r25, 0x00	; 0
    9460:	3b 8b       	std	Y+19, r19	; 0x13
    9462:	5e d4       	rcall	.+2236   	; 0x9d20 <fputc>
    9464:	3b 89       	ldd	r19, Y+19	; 0x13
    9466:	32 ff       	sbrs	r19, 2
    9468:	16 c0       	rjmp	.+44     	; 0x9496 <vfprintf+0x630>
    946a:	31 fd       	sbrc	r19, 1
    946c:	03 c0       	rjmp	.+6      	; 0x9474 <vfprintf+0x60e>
    946e:	88 e7       	ldi	r24, 0x78	; 120
    9470:	90 e0       	ldi	r25, 0x00	; 0
    9472:	02 c0       	rjmp	.+4      	; 0x9478 <vfprintf+0x612>
    9474:	88 e5       	ldi	r24, 0x58	; 88
    9476:	90 e0       	ldi	r25, 0x00	; 0
    9478:	b6 01       	movw	r22, r12
    947a:	0c c0       	rjmp	.+24     	; 0x9494 <vfprintf+0x62e>
    947c:	83 2f       	mov	r24, r19
    947e:	86 78       	andi	r24, 0x86	; 134
    9480:	51 f0       	breq	.+20     	; 0x9496 <vfprintf+0x630>
    9482:	31 ff       	sbrs	r19, 1
    9484:	02 c0       	rjmp	.+4      	; 0x948a <vfprintf+0x624>
    9486:	8b e2       	ldi	r24, 0x2B	; 43
    9488:	01 c0       	rjmp	.+2      	; 0x948c <vfprintf+0x626>
    948a:	80 e2       	ldi	r24, 0x20	; 32
    948c:	37 fd       	sbrc	r19, 7
    948e:	8d e2       	ldi	r24, 0x2D	; 45
    9490:	b6 01       	movw	r22, r12
    9492:	90 e0       	ldi	r25, 0x00	; 0
    9494:	45 d4       	rcall	.+2186   	; 0x9d20 <fputc>
    9496:	e1 16       	cp	r14, r17
    9498:	30 f4       	brcc	.+12     	; 0x94a6 <vfprintf+0x640>
    949a:	b6 01       	movw	r22, r12
    949c:	80 e3       	ldi	r24, 0x30	; 48
    949e:	90 e0       	ldi	r25, 0x00	; 0
    94a0:	3f d4       	rcall	.+2174   	; 0x9d20 <fputc>
    94a2:	11 50       	subi	r17, 0x01	; 1
    94a4:	f8 cf       	rjmp	.-16     	; 0x9496 <vfprintf+0x630>
    94a6:	ea 94       	dec	r14
    94a8:	f3 01       	movw	r30, r6
    94aa:	ee 0d       	add	r30, r14
    94ac:	f1 1d       	adc	r31, r1
    94ae:	80 81       	ld	r24, Z
    94b0:	b6 01       	movw	r22, r12
    94b2:	90 e0       	ldi	r25, 0x00	; 0
    94b4:	35 d4       	rcall	.+2154   	; 0x9d20 <fputc>
    94b6:	e1 10       	cpse	r14, r1
    94b8:	f6 cf       	rjmp	.-20     	; 0x94a6 <vfprintf+0x640>
    94ba:	14 c0       	rjmp	.+40     	; 0x94e4 <vfprintf+0x67e>
    94bc:	f4 e0       	ldi	r31, 0x04	; 4
    94be:	ff 15       	cp	r31, r15
    94c0:	48 f5       	brcc	.+82     	; 0x9514 <vfprintf+0x6ae>
    94c2:	84 e0       	ldi	r24, 0x04	; 4
    94c4:	f8 1a       	sub	r15, r24
    94c6:	33 fe       	sbrs	r3, 3
    94c8:	1d c0       	rjmp	.+58     	; 0x9504 <vfprintf+0x69e>
    94ca:	21 10       	cpse	r2, r1
    94cc:	24 c0       	rjmp	.+72     	; 0x9516 <vfprintf+0x6b0>
    94ce:	03 ff       	sbrs	r16, 3
    94d0:	27 c0       	rjmp	.+78     	; 0x9520 <vfprintf+0x6ba>
    94d2:	0c ea       	ldi	r16, 0xAC	; 172
    94d4:	15 e0       	ldi	r17, 0x05	; 5
    94d6:	f3 2d       	mov	r31, r3
    94d8:	f0 71       	andi	r31, 0x10	; 16
    94da:	3f 2e       	mov	r3, r31
    94dc:	f8 01       	movw	r30, r16
    94de:	84 91       	lpm	r24, Z
    94e0:	81 11       	cpse	r24, r1
    94e2:	21 c0       	rjmp	.+66     	; 0x9526 <vfprintf+0x6c0>
    94e4:	ff 20       	and	r15, r15
    94e6:	09 f4       	brne	.+2      	; 0x94ea <vfprintf+0x684>
    94e8:	fd cc       	rjmp	.-1542   	; 0x8ee4 <vfprintf+0x7e>
    94ea:	b6 01       	movw	r22, r12
    94ec:	80 e2       	ldi	r24, 0x20	; 32
    94ee:	90 e0       	ldi	r25, 0x00	; 0
    94f0:	17 d4       	rcall	.+2094   	; 0x9d20 <fputc>
    94f2:	fa 94       	dec	r15
    94f4:	f7 cf       	rjmp	.-18     	; 0x94e4 <vfprintf+0x67e>
    94f6:	f6 01       	movw	r30, r12
    94f8:	86 81       	ldd	r24, Z+6	; 0x06
    94fa:	97 81       	ldd	r25, Z+7	; 0x07
    94fc:	23 c0       	rjmp	.+70     	; 0x9544 <vfprintf+0x6de>
    94fe:	8f ef       	ldi	r24, 0xFF	; 255
    9500:	9f ef       	ldi	r25, 0xFF	; 255
    9502:	20 c0       	rjmp	.+64     	; 0x9544 <vfprintf+0x6de>
    9504:	b6 01       	movw	r22, r12
    9506:	80 e2       	ldi	r24, 0x20	; 32
    9508:	90 e0       	ldi	r25, 0x00	; 0
    950a:	0a d4       	rcall	.+2068   	; 0x9d20 <fputc>
    950c:	fa 94       	dec	r15
    950e:	f1 10       	cpse	r15, r1
    9510:	f9 cf       	rjmp	.-14     	; 0x9504 <vfprintf+0x69e>
    9512:	db cf       	rjmp	.-74     	; 0x94ca <vfprintf+0x664>
    9514:	f1 2c       	mov	r15, r1
    9516:	b6 01       	movw	r22, r12
    9518:	82 2d       	mov	r24, r2
    951a:	90 e0       	ldi	r25, 0x00	; 0
    951c:	01 d4       	rcall	.+2050   	; 0x9d20 <fputc>
    951e:	d7 cf       	rjmp	.-82     	; 0x94ce <vfprintf+0x668>
    9520:	00 eb       	ldi	r16, 0xB0	; 176
    9522:	15 e0       	ldi	r17, 0x05	; 5
    9524:	d8 cf       	rjmp	.-80     	; 0x94d6 <vfprintf+0x670>
    9526:	31 10       	cpse	r3, r1
    9528:	80 52       	subi	r24, 0x20	; 32
    952a:	b6 01       	movw	r22, r12
    952c:	90 e0       	ldi	r25, 0x00	; 0
    952e:	f8 d3       	rcall	.+2032   	; 0x9d20 <fputc>
    9530:	0f 5f       	subi	r16, 0xFF	; 255
    9532:	1f 4f       	sbci	r17, 0xFF	; 255
    9534:	d3 cf       	rjmp	.-90     	; 0x94dc <vfprintf+0x676>
    9536:	23 e0       	ldi	r18, 0x03	; 3
    9538:	2f 15       	cp	r18, r15
    953a:	10 f4       	brcc	.+4      	; 0x9540 <vfprintf+0x6da>
    953c:	83 e0       	ldi	r24, 0x03	; 3
    953e:	c2 cf       	rjmp	.-124    	; 0x94c4 <vfprintf+0x65e>
    9540:	f1 2c       	mov	r15, r1
    9542:	c5 cf       	rjmp	.-118    	; 0x94ce <vfprintf+0x668>
    9544:	63 96       	adiw	r28, 0x13	; 19
    9546:	0f b6       	in	r0, 0x3f	; 63
    9548:	f8 94       	cli
    954a:	de bf       	out	0x3e, r29	; 62
    954c:	0f be       	out	0x3f, r0	; 63
    954e:	cd bf       	out	0x3d, r28	; 61
    9550:	df 91       	pop	r29
    9552:	cf 91       	pop	r28
    9554:	1f 91       	pop	r17
    9556:	0f 91       	pop	r16
    9558:	ff 90       	pop	r15
    955a:	ef 90       	pop	r14
    955c:	df 90       	pop	r13
    955e:	cf 90       	pop	r12
    9560:	bf 90       	pop	r11
    9562:	af 90       	pop	r10
    9564:	9f 90       	pop	r9
    9566:	8f 90       	pop	r8
    9568:	7f 90       	pop	r7
    956a:	6f 90       	pop	r6
    956c:	5f 90       	pop	r5
    956e:	4f 90       	pop	r4
    9570:	3f 90       	pop	r3
    9572:	2f 90       	pop	r2
    9574:	08 95       	ret

00009576 <__udivmodsi4>:
    9576:	a1 e2       	ldi	r26, 0x21	; 33
    9578:	1a 2e       	mov	r1, r26
    957a:	aa 1b       	sub	r26, r26
    957c:	bb 1b       	sub	r27, r27
    957e:	fd 01       	movw	r30, r26
    9580:	0d c0       	rjmp	.+26     	; 0x959c <__udivmodsi4_ep>

00009582 <__udivmodsi4_loop>:
    9582:	aa 1f       	adc	r26, r26
    9584:	bb 1f       	adc	r27, r27
    9586:	ee 1f       	adc	r30, r30
    9588:	ff 1f       	adc	r31, r31
    958a:	a2 17       	cp	r26, r18
    958c:	b3 07       	cpc	r27, r19
    958e:	e4 07       	cpc	r30, r20
    9590:	f5 07       	cpc	r31, r21
    9592:	20 f0       	brcs	.+8      	; 0x959c <__udivmodsi4_ep>
    9594:	a2 1b       	sub	r26, r18
    9596:	b3 0b       	sbc	r27, r19
    9598:	e4 0b       	sbc	r30, r20
    959a:	f5 0b       	sbc	r31, r21

0000959c <__udivmodsi4_ep>:
    959c:	66 1f       	adc	r22, r22
    959e:	77 1f       	adc	r23, r23
    95a0:	88 1f       	adc	r24, r24
    95a2:	99 1f       	adc	r25, r25
    95a4:	1a 94       	dec	r1
    95a6:	69 f7       	brne	.-38     	; 0x9582 <__udivmodsi4_loop>
    95a8:	60 95       	com	r22
    95aa:	70 95       	com	r23
    95ac:	80 95       	com	r24
    95ae:	90 95       	com	r25
    95b0:	9b 01       	movw	r18, r22
    95b2:	ac 01       	movw	r20, r24
    95b4:	bd 01       	movw	r22, r26
    95b6:	cf 01       	movw	r24, r30
    95b8:	08 95       	ret

000095ba <__tablejump2__>:
    95ba:	ee 0f       	add	r30, r30
    95bc:	ff 1f       	adc	r31, r31
    95be:	00 24       	eor	r0, r0
    95c0:	00 1c       	adc	r0, r0
    95c2:	0b be       	out	0x3b, r0	; 59
    95c4:	07 90       	elpm	r0, Z+
    95c6:	f6 91       	elpm	r31, Z
    95c8:	e0 2d       	mov	r30, r0
    95ca:	09 94       	ijmp

000095cc <__umulhisi3>:
    95cc:	a2 9f       	mul	r26, r18
    95ce:	b0 01       	movw	r22, r0
    95d0:	b3 9f       	mul	r27, r19
    95d2:	c0 01       	movw	r24, r0
    95d4:	a3 9f       	mul	r26, r19
    95d6:	70 0d       	add	r23, r0
    95d8:	81 1d       	adc	r24, r1
    95da:	11 24       	eor	r1, r1
    95dc:	91 1d       	adc	r25, r1
    95de:	b2 9f       	mul	r27, r18
    95e0:	70 0d       	add	r23, r0
    95e2:	81 1d       	adc	r24, r1
    95e4:	11 24       	eor	r1, r1
    95e6:	91 1d       	adc	r25, r1
    95e8:	08 95       	ret

000095ea <__muluhisi3>:
    95ea:	f0 df       	rcall	.-32     	; 0x95cc <__umulhisi3>
    95ec:	a5 9f       	mul	r26, r21
    95ee:	90 0d       	add	r25, r0
    95f0:	b4 9f       	mul	r27, r20
    95f2:	90 0d       	add	r25, r0
    95f4:	a4 9f       	mul	r26, r20
    95f6:	80 0d       	add	r24, r0
    95f8:	91 1d       	adc	r25, r1
    95fa:	11 24       	eor	r1, r1
    95fc:	08 95       	ret

000095fe <__muldi3>:
    95fe:	df 93       	push	r29
    9600:	cf 93       	push	r28
    9602:	1f 93       	push	r17
    9604:	0f 93       	push	r16
    9606:	9a 9d       	mul	r25, r10
    9608:	f0 2d       	mov	r31, r0
    960a:	21 9f       	mul	r18, r17
    960c:	f0 0d       	add	r31, r0
    960e:	8b 9d       	mul	r24, r11
    9610:	f0 0d       	add	r31, r0
    9612:	8a 9d       	mul	r24, r10
    9614:	e0 2d       	mov	r30, r0
    9616:	f1 0d       	add	r31, r1
    9618:	03 9f       	mul	r16, r19
    961a:	f0 0d       	add	r31, r0
    961c:	02 9f       	mul	r16, r18
    961e:	e0 0d       	add	r30, r0
    9620:	f1 1d       	adc	r31, r1
    9622:	4e 9d       	mul	r20, r14
    9624:	e0 0d       	add	r30, r0
    9626:	f1 1d       	adc	r31, r1
    9628:	5e 9d       	mul	r21, r14
    962a:	f0 0d       	add	r31, r0
    962c:	4f 9d       	mul	r20, r15
    962e:	f0 0d       	add	r31, r0
    9630:	7f 93       	push	r23
    9632:	6f 93       	push	r22
    9634:	bf 92       	push	r11
    9636:	af 92       	push	r10
    9638:	5f 93       	push	r21
    963a:	4f 93       	push	r20
    963c:	d5 01       	movw	r26, r10
    963e:	c6 df       	rcall	.-116    	; 0x95cc <__umulhisi3>
    9640:	8b 01       	movw	r16, r22
    9642:	ac 01       	movw	r20, r24
    9644:	d7 01       	movw	r26, r14
    9646:	c2 df       	rcall	.-124    	; 0x95cc <__umulhisi3>
    9648:	eb 01       	movw	r28, r22
    964a:	e8 0f       	add	r30, r24
    964c:	f9 1f       	adc	r31, r25
    964e:	d6 01       	movw	r26, r12
    9650:	1f d0       	rcall	.+62     	; 0x9690 <__muldi3_6>
    9652:	2f 91       	pop	r18
    9654:	3f 91       	pop	r19
    9656:	d6 01       	movw	r26, r12
    9658:	b9 df       	rcall	.-142    	; 0x95cc <__umulhisi3>
    965a:	c6 0f       	add	r28, r22
    965c:	d7 1f       	adc	r29, r23
    965e:	e8 1f       	adc	r30, r24
    9660:	f9 1f       	adc	r31, r25
    9662:	af 91       	pop	r26
    9664:	bf 91       	pop	r27
    9666:	14 d0       	rcall	.+40     	; 0x9690 <__muldi3_6>
    9668:	2f 91       	pop	r18
    966a:	3f 91       	pop	r19
    966c:	af df       	rcall	.-162    	; 0x95cc <__umulhisi3>
    966e:	c6 0f       	add	r28, r22
    9670:	d7 1f       	adc	r29, r23
    9672:	e8 1f       	adc	r30, r24
    9674:	f9 1f       	adc	r31, r25
    9676:	d6 01       	movw	r26, r12
    9678:	a9 df       	rcall	.-174    	; 0x95cc <__umulhisi3>
    967a:	e6 0f       	add	r30, r22
    967c:	f7 1f       	adc	r31, r23
    967e:	98 01       	movw	r18, r16
    9680:	be 01       	movw	r22, r28
    9682:	cf 01       	movw	r24, r30
    9684:	11 24       	eor	r1, r1
    9686:	0f 91       	pop	r16
    9688:	1f 91       	pop	r17
    968a:	cf 91       	pop	r28
    968c:	df 91       	pop	r29
    968e:	08 95       	ret

00009690 <__muldi3_6>:
    9690:	9d df       	rcall	.-198    	; 0x95cc <__umulhisi3>
    9692:	46 0f       	add	r20, r22
    9694:	57 1f       	adc	r21, r23
    9696:	c8 1f       	adc	r28, r24
    9698:	d9 1f       	adc	r29, r25
    969a:	08 f4       	brcc	.+2      	; 0x969e <__muldi3_6+0xe>
    969c:	31 96       	adiw	r30, 0x01	; 1
    969e:	08 95       	ret

000096a0 <__moddi3>:
    96a0:	68 94       	set
    96a2:	01 c0       	rjmp	.+2      	; 0x96a6 <__divdi3_moddi3>

000096a4 <__divdi3>:
    96a4:	e8 94       	clt

000096a6 <__divdi3_moddi3>:
    96a6:	f9 2f       	mov	r31, r25
    96a8:	f1 2b       	or	r31, r17
    96aa:	0a f0       	brmi	.+2      	; 0x96ae <__divdi3_moddi3+0x8>
    96ac:	27 c0       	rjmp	.+78     	; 0x96fc <__udivdi3_umoddi3>
    96ae:	a0 e0       	ldi	r26, 0x00	; 0
    96b0:	b0 e0       	ldi	r27, 0x00	; 0
    96b2:	ec e5       	ldi	r30, 0x5C	; 92
    96b4:	fb e4       	ldi	r31, 0x4B	; 75
    96b6:	93 c0       	rjmp	.+294    	; 0x97de <__prologue_saves__+0xc>
    96b8:	09 2e       	mov	r0, r25
    96ba:	05 94       	asr	r0
    96bc:	1a f4       	brpl	.+6      	; 0x96c4 <__divdi3_moddi3+0x1e>
    96be:	79 d0       	rcall	.+242    	; 0x97b2 <__negdi2>
    96c0:	11 23       	and	r17, r17
    96c2:	92 f4       	brpl	.+36     	; 0x96e8 <__divdi3_moddi3+0x42>
    96c4:	f0 e8       	ldi	r31, 0x80	; 128
    96c6:	0f 26       	eor	r0, r31
    96c8:	ff ef       	ldi	r31, 0xFF	; 255
    96ca:	e0 94       	com	r14
    96cc:	f0 94       	com	r15
    96ce:	00 95       	com	r16
    96d0:	10 95       	com	r17
    96d2:	b0 94       	com	r11
    96d4:	c0 94       	com	r12
    96d6:	d0 94       	com	r13
    96d8:	a1 94       	neg	r10
    96da:	bf 0a       	sbc	r11, r31
    96dc:	cf 0a       	sbc	r12, r31
    96de:	df 0a       	sbc	r13, r31
    96e0:	ef 0a       	sbc	r14, r31
    96e2:	ff 0a       	sbc	r15, r31
    96e4:	0f 0b       	sbc	r16, r31
    96e6:	1f 0b       	sbc	r17, r31
    96e8:	13 d0       	rcall	.+38     	; 0x9710 <__udivmod64>
    96ea:	07 fc       	sbrc	r0, 7
    96ec:	62 d0       	rcall	.+196    	; 0x97b2 <__negdi2>
    96ee:	cd b7       	in	r28, 0x3d	; 61
    96f0:	de b7       	in	r29, 0x3e	; 62
    96f2:	ec e0       	ldi	r30, 0x0C	; 12
    96f4:	90 c0       	rjmp	.+288    	; 0x9816 <__epilogue_restores__+0xc>

000096f6 <__umoddi3>:
    96f6:	68 94       	set
    96f8:	01 c0       	rjmp	.+2      	; 0x96fc <__udivdi3_umoddi3>

000096fa <__udivdi3>:
    96fa:	e8 94       	clt

000096fc <__udivdi3_umoddi3>:
    96fc:	8f 92       	push	r8
    96fe:	9f 92       	push	r9
    9700:	cf 93       	push	r28
    9702:	df 93       	push	r29
    9704:	05 d0       	rcall	.+10     	; 0x9710 <__udivmod64>
    9706:	df 91       	pop	r29
    9708:	cf 91       	pop	r28
    970a:	9f 90       	pop	r9
    970c:	8f 90       	pop	r8
    970e:	08 95       	ret

00009710 <__udivmod64>:
    9710:	88 24       	eor	r8, r8
    9712:	99 24       	eor	r9, r9
    9714:	f4 01       	movw	r30, r8
    9716:	e4 01       	movw	r28, r8
    9718:	b0 e4       	ldi	r27, 0x40	; 64
    971a:	9f 93       	push	r25
    971c:	aa 27       	eor	r26, r26
    971e:	9a 15       	cp	r25, r10
    9720:	8b 04       	cpc	r8, r11
    9722:	9c 04       	cpc	r9, r12
    9724:	ed 05       	cpc	r30, r13
    9726:	fe 05       	cpc	r31, r14
    9728:	cf 05       	cpc	r28, r15
    972a:	d0 07       	cpc	r29, r16
    972c:	a1 07       	cpc	r26, r17
    972e:	98 f4       	brcc	.+38     	; 0x9756 <__udivmod64+0x46>
    9730:	ad 2f       	mov	r26, r29
    9732:	dc 2f       	mov	r29, r28
    9734:	cf 2f       	mov	r28, r31
    9736:	fe 2f       	mov	r31, r30
    9738:	e9 2d       	mov	r30, r9
    973a:	98 2c       	mov	r9, r8
    973c:	89 2e       	mov	r8, r25
    973e:	98 2f       	mov	r25, r24
    9740:	87 2f       	mov	r24, r23
    9742:	76 2f       	mov	r23, r22
    9744:	65 2f       	mov	r22, r21
    9746:	54 2f       	mov	r21, r20
    9748:	43 2f       	mov	r20, r19
    974a:	32 2f       	mov	r19, r18
    974c:	22 27       	eor	r18, r18
    974e:	b8 50       	subi	r27, 0x08	; 8
    9750:	31 f7       	brne	.-52     	; 0x971e <__udivmod64+0xe>
    9752:	bf 91       	pop	r27
    9754:	27 c0       	rjmp	.+78     	; 0x97a4 <__udivmod64+0x94>
    9756:	1b 2e       	mov	r1, r27
    9758:	bf 91       	pop	r27
    975a:	bb 27       	eor	r27, r27
    975c:	22 0f       	add	r18, r18
    975e:	33 1f       	adc	r19, r19
    9760:	44 1f       	adc	r20, r20
    9762:	55 1f       	adc	r21, r21
    9764:	66 1f       	adc	r22, r22
    9766:	77 1f       	adc	r23, r23
    9768:	88 1f       	adc	r24, r24
    976a:	99 1f       	adc	r25, r25
    976c:	88 1c       	adc	r8, r8
    976e:	99 1c       	adc	r9, r9
    9770:	ee 1f       	adc	r30, r30
    9772:	ff 1f       	adc	r31, r31
    9774:	cc 1f       	adc	r28, r28
    9776:	dd 1f       	adc	r29, r29
    9778:	aa 1f       	adc	r26, r26
    977a:	bb 1f       	adc	r27, r27
    977c:	8a 14       	cp	r8, r10
    977e:	9b 04       	cpc	r9, r11
    9780:	ec 05       	cpc	r30, r12
    9782:	fd 05       	cpc	r31, r13
    9784:	ce 05       	cpc	r28, r14
    9786:	df 05       	cpc	r29, r15
    9788:	a0 07       	cpc	r26, r16
    978a:	b1 07       	cpc	r27, r17
    978c:	48 f0       	brcs	.+18     	; 0x97a0 <__udivmod64+0x90>
    978e:	8a 18       	sub	r8, r10
    9790:	9b 08       	sbc	r9, r11
    9792:	ec 09       	sbc	r30, r12
    9794:	fd 09       	sbc	r31, r13
    9796:	ce 09       	sbc	r28, r14
    9798:	df 09       	sbc	r29, r15
    979a:	a0 0b       	sbc	r26, r16
    979c:	b1 0b       	sbc	r27, r17
    979e:	21 60       	ori	r18, 0x01	; 1
    97a0:	1a 94       	dec	r1
    97a2:	e1 f6       	brne	.-72     	; 0x975c <__udivmod64+0x4c>
    97a4:	2e f4       	brtc	.+10     	; 0x97b0 <__udivmod64+0xa0>
    97a6:	94 01       	movw	r18, r8
    97a8:	af 01       	movw	r20, r30
    97aa:	be 01       	movw	r22, r28
    97ac:	cd 01       	movw	r24, r26
    97ae:	00 0c       	add	r0, r0
    97b0:	08 95       	ret

000097b2 <__negdi2>:
    97b2:	60 95       	com	r22
    97b4:	70 95       	com	r23
    97b6:	80 95       	com	r24
    97b8:	90 95       	com	r25
    97ba:	30 95       	com	r19
    97bc:	40 95       	com	r20
    97be:	50 95       	com	r21
    97c0:	21 95       	neg	r18
    97c2:	3f 4f       	sbci	r19, 0xFF	; 255
    97c4:	4f 4f       	sbci	r20, 0xFF	; 255
    97c6:	5f 4f       	sbci	r21, 0xFF	; 255
    97c8:	6f 4f       	sbci	r22, 0xFF	; 255
    97ca:	7f 4f       	sbci	r23, 0xFF	; 255
    97cc:	8f 4f       	sbci	r24, 0xFF	; 255
    97ce:	9f 4f       	sbci	r25, 0xFF	; 255
    97d0:	08 95       	ret

000097d2 <__prologue_saves__>:
    97d2:	2f 92       	push	r2
    97d4:	3f 92       	push	r3
    97d6:	4f 92       	push	r4
    97d8:	5f 92       	push	r5
    97da:	6f 92       	push	r6
    97dc:	7f 92       	push	r7
    97de:	8f 92       	push	r8
    97e0:	9f 92       	push	r9
    97e2:	af 92       	push	r10
    97e4:	bf 92       	push	r11
    97e6:	cf 92       	push	r12
    97e8:	df 92       	push	r13
    97ea:	ef 92       	push	r14
    97ec:	ff 92       	push	r15
    97ee:	0f 93       	push	r16
    97f0:	1f 93       	push	r17
    97f2:	cf 93       	push	r28
    97f4:	df 93       	push	r29
    97f6:	cd b7       	in	r28, 0x3d	; 61
    97f8:	de b7       	in	r29, 0x3e	; 62
    97fa:	ca 1b       	sub	r28, r26
    97fc:	db 0b       	sbc	r29, r27
    97fe:	0f b6       	in	r0, 0x3f	; 63
    9800:	f8 94       	cli
    9802:	de bf       	out	0x3e, r29	; 62
    9804:	0f be       	out	0x3f, r0	; 63
    9806:	cd bf       	out	0x3d, r28	; 61
    9808:	09 94       	ijmp

0000980a <__epilogue_restores__>:
    980a:	2a 88       	ldd	r2, Y+18	; 0x12
    980c:	39 88       	ldd	r3, Y+17	; 0x11
    980e:	48 88       	ldd	r4, Y+16	; 0x10
    9810:	5f 84       	ldd	r5, Y+15	; 0x0f
    9812:	6e 84       	ldd	r6, Y+14	; 0x0e
    9814:	7d 84       	ldd	r7, Y+13	; 0x0d
    9816:	8c 84       	ldd	r8, Y+12	; 0x0c
    9818:	9b 84       	ldd	r9, Y+11	; 0x0b
    981a:	aa 84       	ldd	r10, Y+10	; 0x0a
    981c:	b9 84       	ldd	r11, Y+9	; 0x09
    981e:	c8 84       	ldd	r12, Y+8	; 0x08
    9820:	df 80       	ldd	r13, Y+7	; 0x07
    9822:	ee 80       	ldd	r14, Y+6	; 0x06
    9824:	fd 80       	ldd	r15, Y+5	; 0x05
    9826:	0c 81       	ldd	r16, Y+4	; 0x04
    9828:	1b 81       	ldd	r17, Y+3	; 0x03
    982a:	aa 81       	ldd	r26, Y+2	; 0x02
    982c:	b9 81       	ldd	r27, Y+1	; 0x01
    982e:	ce 0f       	add	r28, r30
    9830:	d1 1d       	adc	r29, r1
    9832:	0f b6       	in	r0, 0x3f	; 63
    9834:	f8 94       	cli
    9836:	de bf       	out	0x3e, r29	; 62
    9838:	0f be       	out	0x3f, r0	; 63
    983a:	cd bf       	out	0x3d, r28	; 61
    983c:	ed 01       	movw	r28, r26
    983e:	08 95       	ret

00009840 <__ashldi3>:
    9840:	0f 93       	push	r16
    9842:	08 30       	cpi	r16, 0x08	; 8
    9844:	90 f0       	brcs	.+36     	; 0x986a <__ashldi3+0x2a>
    9846:	98 2f       	mov	r25, r24
    9848:	87 2f       	mov	r24, r23
    984a:	76 2f       	mov	r23, r22
    984c:	65 2f       	mov	r22, r21
    984e:	54 2f       	mov	r21, r20
    9850:	43 2f       	mov	r20, r19
    9852:	32 2f       	mov	r19, r18
    9854:	22 27       	eor	r18, r18
    9856:	08 50       	subi	r16, 0x08	; 8
    9858:	f4 cf       	rjmp	.-24     	; 0x9842 <__ashldi3+0x2>
    985a:	22 0f       	add	r18, r18
    985c:	33 1f       	adc	r19, r19
    985e:	44 1f       	adc	r20, r20
    9860:	55 1f       	adc	r21, r21
    9862:	66 1f       	adc	r22, r22
    9864:	77 1f       	adc	r23, r23
    9866:	88 1f       	adc	r24, r24
    9868:	99 1f       	adc	r25, r25
    986a:	0a 95       	dec	r16
    986c:	b2 f7       	brpl	.-20     	; 0x985a <__ashldi3+0x1a>
    986e:	0f 91       	pop	r16
    9870:	08 95       	ret

00009872 <__ashrdi3>:
    9872:	97 fb       	bst	r25, 7
    9874:	10 f8       	bld	r1, 0

00009876 <__lshrdi3>:
    9876:	16 94       	lsr	r1
    9878:	00 08       	sbc	r0, r0
    987a:	0f 93       	push	r16
    987c:	08 30       	cpi	r16, 0x08	; 8
    987e:	98 f0       	brcs	.+38     	; 0x98a6 <__lshrdi3+0x30>
    9880:	08 50       	subi	r16, 0x08	; 8
    9882:	23 2f       	mov	r18, r19
    9884:	34 2f       	mov	r19, r20
    9886:	45 2f       	mov	r20, r21
    9888:	56 2f       	mov	r21, r22
    988a:	67 2f       	mov	r22, r23
    988c:	78 2f       	mov	r23, r24
    988e:	89 2f       	mov	r24, r25
    9890:	90 2d       	mov	r25, r0
    9892:	f4 cf       	rjmp	.-24     	; 0x987c <__lshrdi3+0x6>
    9894:	05 94       	asr	r0
    9896:	97 95       	ror	r25
    9898:	87 95       	ror	r24
    989a:	77 95       	ror	r23
    989c:	67 95       	ror	r22
    989e:	57 95       	ror	r21
    98a0:	47 95       	ror	r20
    98a2:	37 95       	ror	r19
    98a4:	27 95       	ror	r18
    98a6:	0a 95       	dec	r16
    98a8:	aa f7       	brpl	.-22     	; 0x9894 <__lshrdi3+0x1e>
    98aa:	0f 91       	pop	r16
    98ac:	08 95       	ret

000098ae <__adddi3>:
    98ae:	2a 0d       	add	r18, r10
    98b0:	3b 1d       	adc	r19, r11
    98b2:	4c 1d       	adc	r20, r12
    98b4:	5d 1d       	adc	r21, r13
    98b6:	6e 1d       	adc	r22, r14
    98b8:	7f 1d       	adc	r23, r15
    98ba:	80 1f       	adc	r24, r16
    98bc:	91 1f       	adc	r25, r17
    98be:	08 95       	ret

000098c0 <__adddi3_s8>:
    98c0:	00 24       	eor	r0, r0
    98c2:	a7 fd       	sbrc	r26, 7
    98c4:	00 94       	com	r0
    98c6:	2a 0f       	add	r18, r26
    98c8:	30 1d       	adc	r19, r0
    98ca:	40 1d       	adc	r20, r0
    98cc:	50 1d       	adc	r21, r0
    98ce:	60 1d       	adc	r22, r0
    98d0:	70 1d       	adc	r23, r0
    98d2:	80 1d       	adc	r24, r0
    98d4:	90 1d       	adc	r25, r0
    98d6:	08 95       	ret

000098d8 <__subdi3>:
    98d8:	2a 19       	sub	r18, r10
    98da:	3b 09       	sbc	r19, r11
    98dc:	4c 09       	sbc	r20, r12
    98de:	5d 09       	sbc	r21, r13
    98e0:	6e 09       	sbc	r22, r14
    98e2:	7f 09       	sbc	r23, r15
    98e4:	80 0b       	sbc	r24, r16
    98e6:	91 0b       	sbc	r25, r17
    98e8:	08 95       	ret

000098ea <malloc>:
    98ea:	cf 93       	push	r28
    98ec:	df 93       	push	r29
    98ee:	82 30       	cpi	r24, 0x02	; 2
    98f0:	91 05       	cpc	r25, r1
    98f2:	10 f4       	brcc	.+4      	; 0x98f8 <malloc+0xe>
    98f4:	82 e0       	ldi	r24, 0x02	; 2
    98f6:	90 e0       	ldi	r25, 0x00	; 0
    98f8:	e0 91 ae 0e 	lds	r30, 0x0EAE
    98fc:	f0 91 af 0e 	lds	r31, 0x0EAF
    9900:	20 e0       	ldi	r18, 0x00	; 0
    9902:	30 e0       	ldi	r19, 0x00	; 0
    9904:	c0 e0       	ldi	r28, 0x00	; 0
    9906:	d0 e0       	ldi	r29, 0x00	; 0
    9908:	30 97       	sbiw	r30, 0x00	; 0
    990a:	11 f1       	breq	.+68     	; 0x9950 <malloc+0x66>
    990c:	40 81       	ld	r20, Z
    990e:	51 81       	ldd	r21, Z+1	; 0x01
    9910:	48 17       	cp	r20, r24
    9912:	59 07       	cpc	r21, r25
    9914:	c0 f0       	brcs	.+48     	; 0x9946 <malloc+0x5c>
    9916:	48 17       	cp	r20, r24
    9918:	59 07       	cpc	r21, r25
    991a:	61 f4       	brne	.+24     	; 0x9934 <malloc+0x4a>
    991c:	82 81       	ldd	r24, Z+2	; 0x02
    991e:	93 81       	ldd	r25, Z+3	; 0x03
    9920:	20 97       	sbiw	r28, 0x00	; 0
    9922:	19 f0       	breq	.+6      	; 0x992a <malloc+0x40>
    9924:	9b 83       	std	Y+3, r25	; 0x03
    9926:	8a 83       	std	Y+2, r24	; 0x02
    9928:	2b c0       	rjmp	.+86     	; 0x9980 <malloc+0x96>
    992a:	90 93 af 0e 	sts	0x0EAF, r25
    992e:	80 93 ae 0e 	sts	0x0EAE, r24
    9932:	26 c0       	rjmp	.+76     	; 0x9980 <malloc+0x96>
    9934:	21 15       	cp	r18, r1
    9936:	31 05       	cpc	r19, r1
    9938:	19 f0       	breq	.+6      	; 0x9940 <malloc+0x56>
    993a:	42 17       	cp	r20, r18
    993c:	53 07       	cpc	r21, r19
    993e:	18 f4       	brcc	.+6      	; 0x9946 <malloc+0x5c>
    9940:	9a 01       	movw	r18, r20
    9942:	be 01       	movw	r22, r28
    9944:	df 01       	movw	r26, r30
    9946:	ef 01       	movw	r28, r30
    9948:	02 80       	ldd	r0, Z+2	; 0x02
    994a:	f3 81       	ldd	r31, Z+3	; 0x03
    994c:	e0 2d       	mov	r30, r0
    994e:	dc cf       	rjmp	.-72     	; 0x9908 <malloc+0x1e>
    9950:	21 15       	cp	r18, r1
    9952:	31 05       	cpc	r19, r1
    9954:	09 f1       	breq	.+66     	; 0x9998 <malloc+0xae>
    9956:	28 1b       	sub	r18, r24
    9958:	39 0b       	sbc	r19, r25
    995a:	24 30       	cpi	r18, 0x04	; 4
    995c:	31 05       	cpc	r19, r1
    995e:	90 f4       	brcc	.+36     	; 0x9984 <malloc+0x9a>
    9960:	12 96       	adiw	r26, 0x02	; 2
    9962:	8d 91       	ld	r24, X+
    9964:	9c 91       	ld	r25, X
    9966:	13 97       	sbiw	r26, 0x03	; 3
    9968:	61 15       	cp	r22, r1
    996a:	71 05       	cpc	r23, r1
    996c:	21 f0       	breq	.+8      	; 0x9976 <malloc+0x8c>
    996e:	fb 01       	movw	r30, r22
    9970:	93 83       	std	Z+3, r25	; 0x03
    9972:	82 83       	std	Z+2, r24	; 0x02
    9974:	04 c0       	rjmp	.+8      	; 0x997e <malloc+0x94>
    9976:	90 93 af 0e 	sts	0x0EAF, r25
    997a:	80 93 ae 0e 	sts	0x0EAE, r24
    997e:	fd 01       	movw	r30, r26
    9980:	32 96       	adiw	r30, 0x02	; 2
    9982:	44 c0       	rjmp	.+136    	; 0x9a0c <malloc+0x122>
    9984:	fd 01       	movw	r30, r26
    9986:	e2 0f       	add	r30, r18
    9988:	f3 1f       	adc	r31, r19
    998a:	81 93       	st	Z+, r24
    998c:	91 93       	st	Z+, r25
    998e:	22 50       	subi	r18, 0x02	; 2
    9990:	31 09       	sbc	r19, r1
    9992:	2d 93       	st	X+, r18
    9994:	3c 93       	st	X, r19
    9996:	3a c0       	rjmp	.+116    	; 0x9a0c <malloc+0x122>
    9998:	20 91 ac 0e 	lds	r18, 0x0EAC
    999c:	30 91 ad 0e 	lds	r19, 0x0EAD
    99a0:	23 2b       	or	r18, r19
    99a2:	41 f4       	brne	.+16     	; 0x99b4 <malloc+0xca>
    99a4:	20 91 02 01 	lds	r18, 0x0102
    99a8:	30 91 03 01 	lds	r19, 0x0103
    99ac:	30 93 ad 0e 	sts	0x0EAD, r19
    99b0:	20 93 ac 0e 	sts	0x0EAC, r18
    99b4:	20 91 00 01 	lds	r18, 0x0100
    99b8:	30 91 01 01 	lds	r19, 0x0101
    99bc:	21 15       	cp	r18, r1
    99be:	31 05       	cpc	r19, r1
    99c0:	41 f4       	brne	.+16     	; 0x99d2 <malloc+0xe8>
    99c2:	2d b7       	in	r18, 0x3d	; 61
    99c4:	3e b7       	in	r19, 0x3e	; 62
    99c6:	40 91 04 01 	lds	r20, 0x0104
    99ca:	50 91 05 01 	lds	r21, 0x0105
    99ce:	24 1b       	sub	r18, r20
    99d0:	35 0b       	sbc	r19, r21
    99d2:	e0 91 ac 0e 	lds	r30, 0x0EAC
    99d6:	f0 91 ad 0e 	lds	r31, 0x0EAD
    99da:	e2 17       	cp	r30, r18
    99dc:	f3 07       	cpc	r31, r19
    99de:	a0 f4       	brcc	.+40     	; 0x9a08 <malloc+0x11e>
    99e0:	2e 1b       	sub	r18, r30
    99e2:	3f 0b       	sbc	r19, r31
    99e4:	28 17       	cp	r18, r24
    99e6:	39 07       	cpc	r19, r25
    99e8:	78 f0       	brcs	.+30     	; 0x9a08 <malloc+0x11e>
    99ea:	ac 01       	movw	r20, r24
    99ec:	4e 5f       	subi	r20, 0xFE	; 254
    99ee:	5f 4f       	sbci	r21, 0xFF	; 255
    99f0:	24 17       	cp	r18, r20
    99f2:	35 07       	cpc	r19, r21
    99f4:	48 f0       	brcs	.+18     	; 0x9a08 <malloc+0x11e>
    99f6:	4e 0f       	add	r20, r30
    99f8:	5f 1f       	adc	r21, r31
    99fa:	50 93 ad 0e 	sts	0x0EAD, r21
    99fe:	40 93 ac 0e 	sts	0x0EAC, r20
    9a02:	81 93       	st	Z+, r24
    9a04:	91 93       	st	Z+, r25
    9a06:	02 c0       	rjmp	.+4      	; 0x9a0c <malloc+0x122>
    9a08:	e0 e0       	ldi	r30, 0x00	; 0
    9a0a:	f0 e0       	ldi	r31, 0x00	; 0
    9a0c:	cf 01       	movw	r24, r30
    9a0e:	df 91       	pop	r29
    9a10:	cf 91       	pop	r28
    9a12:	08 95       	ret

00009a14 <free>:
    9a14:	0f 93       	push	r16
    9a16:	1f 93       	push	r17
    9a18:	cf 93       	push	r28
    9a1a:	df 93       	push	r29
    9a1c:	00 97       	sbiw	r24, 0x00	; 0
    9a1e:	09 f4       	brne	.+2      	; 0x9a22 <free+0xe>
    9a20:	8c c0       	rjmp	.+280    	; 0x9b3a <free+0x126>
    9a22:	fc 01       	movw	r30, r24
    9a24:	32 97       	sbiw	r30, 0x02	; 2
    9a26:	13 82       	std	Z+3, r1	; 0x03
    9a28:	12 82       	std	Z+2, r1	; 0x02
    9a2a:	00 91 ae 0e 	lds	r16, 0x0EAE
    9a2e:	10 91 af 0e 	lds	r17, 0x0EAF
    9a32:	01 15       	cp	r16, r1
    9a34:	11 05       	cpc	r17, r1
    9a36:	81 f4       	brne	.+32     	; 0x9a58 <free+0x44>
    9a38:	20 81       	ld	r18, Z
    9a3a:	31 81       	ldd	r19, Z+1	; 0x01
    9a3c:	82 0f       	add	r24, r18
    9a3e:	93 1f       	adc	r25, r19
    9a40:	20 91 ac 0e 	lds	r18, 0x0EAC
    9a44:	30 91 ad 0e 	lds	r19, 0x0EAD
    9a48:	28 17       	cp	r18, r24
    9a4a:	39 07       	cpc	r19, r25
    9a4c:	79 f5       	brne	.+94     	; 0x9aac <free+0x98>
    9a4e:	f0 93 ad 0e 	sts	0x0EAD, r31
    9a52:	e0 93 ac 0e 	sts	0x0EAC, r30
    9a56:	71 c0       	rjmp	.+226    	; 0x9b3a <free+0x126>
    9a58:	d8 01       	movw	r26, r16
    9a5a:	40 e0       	ldi	r20, 0x00	; 0
    9a5c:	50 e0       	ldi	r21, 0x00	; 0
    9a5e:	ae 17       	cp	r26, r30
    9a60:	bf 07       	cpc	r27, r31
    9a62:	50 f4       	brcc	.+20     	; 0x9a78 <free+0x64>
    9a64:	12 96       	adiw	r26, 0x02	; 2
    9a66:	2d 91       	ld	r18, X+
    9a68:	3c 91       	ld	r19, X
    9a6a:	13 97       	sbiw	r26, 0x03	; 3
    9a6c:	ad 01       	movw	r20, r26
    9a6e:	21 15       	cp	r18, r1
    9a70:	31 05       	cpc	r19, r1
    9a72:	09 f1       	breq	.+66     	; 0x9ab6 <free+0xa2>
    9a74:	d9 01       	movw	r26, r18
    9a76:	f3 cf       	rjmp	.-26     	; 0x9a5e <free+0x4a>
    9a78:	9d 01       	movw	r18, r26
    9a7a:	da 01       	movw	r26, r20
    9a7c:	33 83       	std	Z+3, r19	; 0x03
    9a7e:	22 83       	std	Z+2, r18	; 0x02
    9a80:	60 81       	ld	r22, Z
    9a82:	71 81       	ldd	r23, Z+1	; 0x01
    9a84:	86 0f       	add	r24, r22
    9a86:	97 1f       	adc	r25, r23
    9a88:	82 17       	cp	r24, r18
    9a8a:	93 07       	cpc	r25, r19
    9a8c:	69 f4       	brne	.+26     	; 0x9aa8 <free+0x94>
    9a8e:	ec 01       	movw	r28, r24
    9a90:	28 81       	ld	r18, Y
    9a92:	39 81       	ldd	r19, Y+1	; 0x01
    9a94:	26 0f       	add	r18, r22
    9a96:	37 1f       	adc	r19, r23
    9a98:	2e 5f       	subi	r18, 0xFE	; 254
    9a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    9a9c:	31 83       	std	Z+1, r19	; 0x01
    9a9e:	20 83       	st	Z, r18
    9aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    9aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    9aa4:	93 83       	std	Z+3, r25	; 0x03
    9aa6:	82 83       	std	Z+2, r24	; 0x02
    9aa8:	45 2b       	or	r20, r21
    9aaa:	29 f4       	brne	.+10     	; 0x9ab6 <free+0xa2>
    9aac:	f0 93 af 0e 	sts	0x0EAF, r31
    9ab0:	e0 93 ae 0e 	sts	0x0EAE, r30
    9ab4:	42 c0       	rjmp	.+132    	; 0x9b3a <free+0x126>
    9ab6:	13 96       	adiw	r26, 0x03	; 3
    9ab8:	fc 93       	st	X, r31
    9aba:	ee 93       	st	-X, r30
    9abc:	12 97       	sbiw	r26, 0x02	; 2
    9abe:	ed 01       	movw	r28, r26
    9ac0:	49 91       	ld	r20, Y+
    9ac2:	59 91       	ld	r21, Y+
    9ac4:	9e 01       	movw	r18, r28
    9ac6:	24 0f       	add	r18, r20
    9ac8:	35 1f       	adc	r19, r21
    9aca:	e2 17       	cp	r30, r18
    9acc:	f3 07       	cpc	r31, r19
    9ace:	71 f4       	brne	.+28     	; 0x9aec <free+0xd8>
    9ad0:	80 81       	ld	r24, Z
    9ad2:	91 81       	ldd	r25, Z+1	; 0x01
    9ad4:	84 0f       	add	r24, r20
    9ad6:	95 1f       	adc	r25, r21
    9ad8:	02 96       	adiw	r24, 0x02	; 2
    9ada:	11 96       	adiw	r26, 0x01	; 1
    9adc:	9c 93       	st	X, r25
    9ade:	8e 93       	st	-X, r24
    9ae0:	82 81       	ldd	r24, Z+2	; 0x02
    9ae2:	93 81       	ldd	r25, Z+3	; 0x03
    9ae4:	13 96       	adiw	r26, 0x03	; 3
    9ae6:	9c 93       	st	X, r25
    9ae8:	8e 93       	st	-X, r24
    9aea:	12 97       	sbiw	r26, 0x02	; 2
    9aec:	e0 e0       	ldi	r30, 0x00	; 0
    9aee:	f0 e0       	ldi	r31, 0x00	; 0
    9af0:	d8 01       	movw	r26, r16
    9af2:	12 96       	adiw	r26, 0x02	; 2
    9af4:	8d 91       	ld	r24, X+
    9af6:	9c 91       	ld	r25, X
    9af8:	13 97       	sbiw	r26, 0x03	; 3
    9afa:	00 97       	sbiw	r24, 0x00	; 0
    9afc:	19 f0       	breq	.+6      	; 0x9b04 <free+0xf0>
    9afe:	f8 01       	movw	r30, r16
    9b00:	8c 01       	movw	r16, r24
    9b02:	f6 cf       	rjmp	.-20     	; 0x9af0 <free+0xdc>
    9b04:	8d 91       	ld	r24, X+
    9b06:	9c 91       	ld	r25, X
    9b08:	98 01       	movw	r18, r16
    9b0a:	2e 5f       	subi	r18, 0xFE	; 254
    9b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    9b0e:	82 0f       	add	r24, r18
    9b10:	93 1f       	adc	r25, r19
    9b12:	20 91 ac 0e 	lds	r18, 0x0EAC
    9b16:	30 91 ad 0e 	lds	r19, 0x0EAD
    9b1a:	28 17       	cp	r18, r24
    9b1c:	39 07       	cpc	r19, r25
    9b1e:	69 f4       	brne	.+26     	; 0x9b3a <free+0x126>
    9b20:	30 97       	sbiw	r30, 0x00	; 0
    9b22:	29 f4       	brne	.+10     	; 0x9b2e <free+0x11a>
    9b24:	10 92 af 0e 	sts	0x0EAF, r1
    9b28:	10 92 ae 0e 	sts	0x0EAE, r1
    9b2c:	02 c0       	rjmp	.+4      	; 0x9b32 <free+0x11e>
    9b2e:	13 82       	std	Z+3, r1	; 0x03
    9b30:	12 82       	std	Z+2, r1	; 0x02
    9b32:	10 93 ad 0e 	sts	0x0EAD, r17
    9b36:	00 93 ac 0e 	sts	0x0EAC, r16
    9b3a:	df 91       	pop	r29
    9b3c:	cf 91       	pop	r28
    9b3e:	1f 91       	pop	r17
    9b40:	0f 91       	pop	r16
    9b42:	08 95       	ret

00009b44 <__ftoa_engine>:
    9b44:	28 30       	cpi	r18, 0x08	; 8
    9b46:	08 f0       	brcs	.+2      	; 0x9b4a <__ftoa_engine+0x6>
    9b48:	27 e0       	ldi	r18, 0x07	; 7
    9b4a:	33 27       	eor	r19, r19
    9b4c:	da 01       	movw	r26, r20
    9b4e:	99 0f       	add	r25, r25
    9b50:	31 1d       	adc	r19, r1
    9b52:	87 fd       	sbrc	r24, 7
    9b54:	91 60       	ori	r25, 0x01	; 1
    9b56:	00 96       	adiw	r24, 0x00	; 0
    9b58:	61 05       	cpc	r22, r1
    9b5a:	71 05       	cpc	r23, r1
    9b5c:	39 f4       	brne	.+14     	; 0x9b6c <__ftoa_engine+0x28>
    9b5e:	32 60       	ori	r19, 0x02	; 2
    9b60:	2e 5f       	subi	r18, 0xFE	; 254
    9b62:	3d 93       	st	X+, r19
    9b64:	30 e3       	ldi	r19, 0x30	; 48
    9b66:	2a 95       	dec	r18
    9b68:	e1 f7       	brne	.-8      	; 0x9b62 <__ftoa_engine+0x1e>
    9b6a:	08 95       	ret
    9b6c:	9f 3f       	cpi	r25, 0xFF	; 255
    9b6e:	30 f0       	brcs	.+12     	; 0x9b7c <__ftoa_engine+0x38>
    9b70:	80 38       	cpi	r24, 0x80	; 128
    9b72:	71 05       	cpc	r23, r1
    9b74:	61 05       	cpc	r22, r1
    9b76:	09 f0       	breq	.+2      	; 0x9b7a <__ftoa_engine+0x36>
    9b78:	3c 5f       	subi	r19, 0xFC	; 252
    9b7a:	3c 5f       	subi	r19, 0xFC	; 252
    9b7c:	3d 93       	st	X+, r19
    9b7e:	91 30       	cpi	r25, 0x01	; 1
    9b80:	08 f0       	brcs	.+2      	; 0x9b84 <__ftoa_engine+0x40>
    9b82:	80 68       	ori	r24, 0x80	; 128
    9b84:	91 1d       	adc	r25, r1
    9b86:	df 93       	push	r29
    9b88:	cf 93       	push	r28
    9b8a:	1f 93       	push	r17
    9b8c:	0f 93       	push	r16
    9b8e:	ff 92       	push	r15
    9b90:	ef 92       	push	r14
    9b92:	19 2f       	mov	r17, r25
    9b94:	98 7f       	andi	r25, 0xF8	; 248
    9b96:	96 95       	lsr	r25
    9b98:	e9 2f       	mov	r30, r25
    9b9a:	96 95       	lsr	r25
    9b9c:	96 95       	lsr	r25
    9b9e:	e9 0f       	add	r30, r25
    9ba0:	ff 27       	eor	r31, r31
    9ba2:	e2 5f       	subi	r30, 0xF2	; 242
    9ba4:	f9 4f       	sbci	r31, 0xF9	; 249
    9ba6:	99 27       	eor	r25, r25
    9ba8:	33 27       	eor	r19, r19
    9baa:	ee 24       	eor	r14, r14
    9bac:	ff 24       	eor	r15, r15
    9bae:	a7 01       	movw	r20, r14
    9bb0:	e7 01       	movw	r28, r14
    9bb2:	05 90       	lpm	r0, Z+
    9bb4:	08 94       	sec
    9bb6:	07 94       	ror	r0
    9bb8:	28 f4       	brcc	.+10     	; 0x9bc4 <__ftoa_engine+0x80>
    9bba:	36 0f       	add	r19, r22
    9bbc:	e7 1e       	adc	r14, r23
    9bbe:	f8 1e       	adc	r15, r24
    9bc0:	49 1f       	adc	r20, r25
    9bc2:	51 1d       	adc	r21, r1
    9bc4:	66 0f       	add	r22, r22
    9bc6:	77 1f       	adc	r23, r23
    9bc8:	88 1f       	adc	r24, r24
    9bca:	99 1f       	adc	r25, r25
    9bcc:	06 94       	lsr	r0
    9bce:	a1 f7       	brne	.-24     	; 0x9bb8 <__ftoa_engine+0x74>
    9bd0:	05 90       	lpm	r0, Z+
    9bd2:	07 94       	ror	r0
    9bd4:	28 f4       	brcc	.+10     	; 0x9be0 <__ftoa_engine+0x9c>
    9bd6:	e7 0e       	add	r14, r23
    9bd8:	f8 1e       	adc	r15, r24
    9bda:	49 1f       	adc	r20, r25
    9bdc:	56 1f       	adc	r21, r22
    9bde:	c1 1d       	adc	r28, r1
    9be0:	77 0f       	add	r23, r23
    9be2:	88 1f       	adc	r24, r24
    9be4:	99 1f       	adc	r25, r25
    9be6:	66 1f       	adc	r22, r22
    9be8:	06 94       	lsr	r0
    9bea:	a1 f7       	brne	.-24     	; 0x9bd4 <__ftoa_engine+0x90>
    9bec:	05 90       	lpm	r0, Z+
    9bee:	07 94       	ror	r0
    9bf0:	28 f4       	brcc	.+10     	; 0x9bfc <__ftoa_engine+0xb8>
    9bf2:	f8 0e       	add	r15, r24
    9bf4:	49 1f       	adc	r20, r25
    9bf6:	56 1f       	adc	r21, r22
    9bf8:	c7 1f       	adc	r28, r23
    9bfa:	d1 1d       	adc	r29, r1
    9bfc:	88 0f       	add	r24, r24
    9bfe:	99 1f       	adc	r25, r25
    9c00:	66 1f       	adc	r22, r22
    9c02:	77 1f       	adc	r23, r23
    9c04:	06 94       	lsr	r0
    9c06:	a1 f7       	brne	.-24     	; 0x9bf0 <__ftoa_engine+0xac>
    9c08:	05 90       	lpm	r0, Z+
    9c0a:	07 94       	ror	r0
    9c0c:	20 f4       	brcc	.+8      	; 0x9c16 <__ftoa_engine+0xd2>
    9c0e:	49 0f       	add	r20, r25
    9c10:	56 1f       	adc	r21, r22
    9c12:	c7 1f       	adc	r28, r23
    9c14:	d8 1f       	adc	r29, r24
    9c16:	99 0f       	add	r25, r25
    9c18:	66 1f       	adc	r22, r22
    9c1a:	77 1f       	adc	r23, r23
    9c1c:	88 1f       	adc	r24, r24
    9c1e:	06 94       	lsr	r0
    9c20:	a9 f7       	brne	.-22     	; 0x9c0c <__ftoa_engine+0xc8>
    9c22:	84 91       	lpm	r24, Z
    9c24:	10 95       	com	r17
    9c26:	17 70       	andi	r17, 0x07	; 7
    9c28:	41 f0       	breq	.+16     	; 0x9c3a <__ftoa_engine+0xf6>
    9c2a:	d6 95       	lsr	r29
    9c2c:	c7 95       	ror	r28
    9c2e:	57 95       	ror	r21
    9c30:	47 95       	ror	r20
    9c32:	f7 94       	ror	r15
    9c34:	e7 94       	ror	r14
    9c36:	1a 95       	dec	r17
    9c38:	c1 f7       	brne	.-16     	; 0x9c2a <__ftoa_engine+0xe6>
    9c3a:	e4 eb       	ldi	r30, 0xB4	; 180
    9c3c:	f5 e0       	ldi	r31, 0x05	; 5
    9c3e:	68 94       	set
    9c40:	15 90       	lpm	r1, Z+
    9c42:	15 91       	lpm	r17, Z+
    9c44:	35 91       	lpm	r19, Z+
    9c46:	65 91       	lpm	r22, Z+
    9c48:	95 91       	lpm	r25, Z+
    9c4a:	05 90       	lpm	r0, Z+
    9c4c:	7f e2       	ldi	r23, 0x2F	; 47
    9c4e:	73 95       	inc	r23
    9c50:	e1 18       	sub	r14, r1
    9c52:	f1 0a       	sbc	r15, r17
    9c54:	43 0b       	sbc	r20, r19
    9c56:	56 0b       	sbc	r21, r22
    9c58:	c9 0b       	sbc	r28, r25
    9c5a:	d0 09       	sbc	r29, r0
    9c5c:	c0 f7       	brcc	.-16     	; 0x9c4e <__ftoa_engine+0x10a>
    9c5e:	e1 0c       	add	r14, r1
    9c60:	f1 1e       	adc	r15, r17
    9c62:	43 1f       	adc	r20, r19
    9c64:	56 1f       	adc	r21, r22
    9c66:	c9 1f       	adc	r28, r25
    9c68:	d0 1d       	adc	r29, r0
    9c6a:	7e f4       	brtc	.+30     	; 0x9c8a <__ftoa_engine+0x146>
    9c6c:	70 33       	cpi	r23, 0x30	; 48
    9c6e:	11 f4       	brne	.+4      	; 0x9c74 <__ftoa_engine+0x130>
    9c70:	8a 95       	dec	r24
    9c72:	e6 cf       	rjmp	.-52     	; 0x9c40 <__ftoa_engine+0xfc>
    9c74:	e8 94       	clt
    9c76:	01 50       	subi	r16, 0x01	; 1
    9c78:	30 f0       	brcs	.+12     	; 0x9c86 <__ftoa_engine+0x142>
    9c7a:	08 0f       	add	r16, r24
    9c7c:	0a f4       	brpl	.+2      	; 0x9c80 <__ftoa_engine+0x13c>
    9c7e:	00 27       	eor	r16, r16
    9c80:	02 17       	cp	r16, r18
    9c82:	08 f4       	brcc	.+2      	; 0x9c86 <__ftoa_engine+0x142>
    9c84:	20 2f       	mov	r18, r16
    9c86:	23 95       	inc	r18
    9c88:	02 2f       	mov	r16, r18
    9c8a:	7a 33       	cpi	r23, 0x3A	; 58
    9c8c:	28 f0       	brcs	.+10     	; 0x9c98 <__ftoa_engine+0x154>
    9c8e:	79 e3       	ldi	r23, 0x39	; 57
    9c90:	7d 93       	st	X+, r23
    9c92:	2a 95       	dec	r18
    9c94:	e9 f7       	brne	.-6      	; 0x9c90 <__ftoa_engine+0x14c>
    9c96:	10 c0       	rjmp	.+32     	; 0x9cb8 <__ftoa_engine+0x174>
    9c98:	7d 93       	st	X+, r23
    9c9a:	2a 95       	dec	r18
    9c9c:	89 f6       	brne	.-94     	; 0x9c40 <__ftoa_engine+0xfc>
    9c9e:	06 94       	lsr	r0
    9ca0:	97 95       	ror	r25
    9ca2:	67 95       	ror	r22
    9ca4:	37 95       	ror	r19
    9ca6:	17 95       	ror	r17
    9ca8:	17 94       	ror	r1
    9caa:	e1 18       	sub	r14, r1
    9cac:	f1 0a       	sbc	r15, r17
    9cae:	43 0b       	sbc	r20, r19
    9cb0:	56 0b       	sbc	r21, r22
    9cb2:	c9 0b       	sbc	r28, r25
    9cb4:	d0 09       	sbc	r29, r0
    9cb6:	98 f0       	brcs	.+38     	; 0x9cde <__ftoa_engine+0x19a>
    9cb8:	23 95       	inc	r18
    9cba:	7e 91       	ld	r23, -X
    9cbc:	73 95       	inc	r23
    9cbe:	7a 33       	cpi	r23, 0x3A	; 58
    9cc0:	08 f0       	brcs	.+2      	; 0x9cc4 <__ftoa_engine+0x180>
    9cc2:	70 e3       	ldi	r23, 0x30	; 48
    9cc4:	7c 93       	st	X, r23
    9cc6:	20 13       	cpse	r18, r16
    9cc8:	b8 f7       	brcc	.-18     	; 0x9cb8 <__ftoa_engine+0x174>
    9cca:	7e 91       	ld	r23, -X
    9ccc:	70 61       	ori	r23, 0x10	; 16
    9cce:	7d 93       	st	X+, r23
    9cd0:	30 f0       	brcs	.+12     	; 0x9cde <__ftoa_engine+0x19a>
    9cd2:	83 95       	inc	r24
    9cd4:	71 e3       	ldi	r23, 0x31	; 49
    9cd6:	7d 93       	st	X+, r23
    9cd8:	70 e3       	ldi	r23, 0x30	; 48
    9cda:	2a 95       	dec	r18
    9cdc:	e1 f7       	brne	.-8      	; 0x9cd6 <__ftoa_engine+0x192>
    9cde:	11 24       	eor	r1, r1
    9ce0:	ef 90       	pop	r14
    9ce2:	ff 90       	pop	r15
    9ce4:	0f 91       	pop	r16
    9ce6:	1f 91       	pop	r17
    9ce8:	cf 91       	pop	r28
    9cea:	df 91       	pop	r29
    9cec:	99 27       	eor	r25, r25
    9cee:	87 fd       	sbrc	r24, 7
    9cf0:	90 95       	com	r25
    9cf2:	08 95       	ret

00009cf4 <strnlen_P>:
    9cf4:	fc 01       	movw	r30, r24
    9cf6:	05 90       	lpm	r0, Z+
    9cf8:	61 50       	subi	r22, 0x01	; 1
    9cfa:	70 40       	sbci	r23, 0x00	; 0
    9cfc:	01 10       	cpse	r0, r1
    9cfe:	d8 f7       	brcc	.-10     	; 0x9cf6 <strnlen_P+0x2>
    9d00:	80 95       	com	r24
    9d02:	90 95       	com	r25
    9d04:	8e 0f       	add	r24, r30
    9d06:	9f 1f       	adc	r25, r31
    9d08:	08 95       	ret

00009d0a <strnlen>:
    9d0a:	fc 01       	movw	r30, r24
    9d0c:	61 50       	subi	r22, 0x01	; 1
    9d0e:	70 40       	sbci	r23, 0x00	; 0
    9d10:	01 90       	ld	r0, Z+
    9d12:	01 10       	cpse	r0, r1
    9d14:	d8 f7       	brcc	.-10     	; 0x9d0c <strnlen+0x2>
    9d16:	80 95       	com	r24
    9d18:	90 95       	com	r25
    9d1a:	8e 0f       	add	r24, r30
    9d1c:	9f 1f       	adc	r25, r31
    9d1e:	08 95       	ret

00009d20 <fputc>:
    9d20:	0f 93       	push	r16
    9d22:	1f 93       	push	r17
    9d24:	cf 93       	push	r28
    9d26:	df 93       	push	r29
    9d28:	fb 01       	movw	r30, r22
    9d2a:	23 81       	ldd	r18, Z+3	; 0x03
    9d2c:	21 fd       	sbrc	r18, 1
    9d2e:	03 c0       	rjmp	.+6      	; 0x9d36 <fputc+0x16>
    9d30:	8f ef       	ldi	r24, 0xFF	; 255
    9d32:	9f ef       	ldi	r25, 0xFF	; 255
    9d34:	28 c0       	rjmp	.+80     	; 0x9d86 <fputc+0x66>
    9d36:	22 ff       	sbrs	r18, 2
    9d38:	16 c0       	rjmp	.+44     	; 0x9d66 <fputc+0x46>
    9d3a:	46 81       	ldd	r20, Z+6	; 0x06
    9d3c:	57 81       	ldd	r21, Z+7	; 0x07
    9d3e:	24 81       	ldd	r18, Z+4	; 0x04
    9d40:	35 81       	ldd	r19, Z+5	; 0x05
    9d42:	42 17       	cp	r20, r18
    9d44:	53 07       	cpc	r21, r19
    9d46:	44 f4       	brge	.+16     	; 0x9d58 <fputc+0x38>
    9d48:	a0 81       	ld	r26, Z
    9d4a:	b1 81       	ldd	r27, Z+1	; 0x01
    9d4c:	9d 01       	movw	r18, r26
    9d4e:	2f 5f       	subi	r18, 0xFF	; 255
    9d50:	3f 4f       	sbci	r19, 0xFF	; 255
    9d52:	31 83       	std	Z+1, r19	; 0x01
    9d54:	20 83       	st	Z, r18
    9d56:	8c 93       	st	X, r24
    9d58:	26 81       	ldd	r18, Z+6	; 0x06
    9d5a:	37 81       	ldd	r19, Z+7	; 0x07
    9d5c:	2f 5f       	subi	r18, 0xFF	; 255
    9d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    9d60:	37 83       	std	Z+7, r19	; 0x07
    9d62:	26 83       	std	Z+6, r18	; 0x06
    9d64:	10 c0       	rjmp	.+32     	; 0x9d86 <fputc+0x66>
    9d66:	eb 01       	movw	r28, r22
    9d68:	09 2f       	mov	r16, r25
    9d6a:	18 2f       	mov	r17, r24
    9d6c:	00 84       	ldd	r0, Z+8	; 0x08
    9d6e:	f1 85       	ldd	r31, Z+9	; 0x09
    9d70:	e0 2d       	mov	r30, r0
    9d72:	09 95       	icall
    9d74:	89 2b       	or	r24, r25
    9d76:	e1 f6       	brne	.-72     	; 0x9d30 <fputc+0x10>
    9d78:	8e 81       	ldd	r24, Y+6	; 0x06
    9d7a:	9f 81       	ldd	r25, Y+7	; 0x07
    9d7c:	01 96       	adiw	r24, 0x01	; 1
    9d7e:	9f 83       	std	Y+7, r25	; 0x07
    9d80:	8e 83       	std	Y+6, r24	; 0x06
    9d82:	81 2f       	mov	r24, r17
    9d84:	90 2f       	mov	r25, r16
    9d86:	df 91       	pop	r29
    9d88:	cf 91       	pop	r28
    9d8a:	1f 91       	pop	r17
    9d8c:	0f 91       	pop	r16
    9d8e:	08 95       	ret

00009d90 <sprintf>:
    9d90:	0f 93       	push	r16
    9d92:	1f 93       	push	r17
    9d94:	cf 93       	push	r28
    9d96:	df 93       	push	r29
    9d98:	cd b7       	in	r28, 0x3d	; 61
    9d9a:	de b7       	in	r29, 0x3e	; 62
    9d9c:	2e 97       	sbiw	r28, 0x0e	; 14
    9d9e:	0f b6       	in	r0, 0x3f	; 63
    9da0:	f8 94       	cli
    9da2:	de bf       	out	0x3e, r29	; 62
    9da4:	0f be       	out	0x3f, r0	; 63
    9da6:	cd bf       	out	0x3d, r28	; 61
    9da8:	0d 89       	ldd	r16, Y+21	; 0x15
    9daa:	1e 89       	ldd	r17, Y+22	; 0x16
    9dac:	86 e0       	ldi	r24, 0x06	; 6
    9dae:	8c 83       	std	Y+4, r24	; 0x04
    9db0:	1a 83       	std	Y+2, r17	; 0x02
    9db2:	09 83       	std	Y+1, r16	; 0x01
    9db4:	8f ef       	ldi	r24, 0xFF	; 255
    9db6:	9f e7       	ldi	r25, 0x7F	; 127
    9db8:	9e 83       	std	Y+6, r25	; 0x06
    9dba:	8d 83       	std	Y+5, r24	; 0x05
    9dbc:	ae 01       	movw	r20, r28
    9dbe:	47 5e       	subi	r20, 0xE7	; 231
    9dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    9dc2:	6f 89       	ldd	r22, Y+23	; 0x17
    9dc4:	78 8d       	ldd	r23, Y+24	; 0x18
    9dc6:	ce 01       	movw	r24, r28
    9dc8:	01 96       	adiw	r24, 0x01	; 1
    9dca:	4d d8       	rcall	.-3942   	; 0x8e66 <vfprintf>
    9dcc:	2f 81       	ldd	r18, Y+7	; 0x07
    9dce:	38 85       	ldd	r19, Y+8	; 0x08
    9dd0:	f8 01       	movw	r30, r16
    9dd2:	e2 0f       	add	r30, r18
    9dd4:	f3 1f       	adc	r31, r19
    9dd6:	10 82       	st	Z, r1
    9dd8:	2e 96       	adiw	r28, 0x0e	; 14
    9dda:	0f b6       	in	r0, 0x3f	; 63
    9ddc:	f8 94       	cli
    9dde:	de bf       	out	0x3e, r29	; 62
    9de0:	0f be       	out	0x3f, r0	; 63
    9de2:	cd bf       	out	0x3d, r28	; 61
    9de4:	df 91       	pop	r29
    9de6:	cf 91       	pop	r28
    9de8:	1f 91       	pop	r17
    9dea:	0f 91       	pop	r16
    9dec:	08 95       	ret

00009dee <__ultoa_invert>:
    9dee:	fa 01       	movw	r30, r20
    9df0:	aa 27       	eor	r26, r26
    9df2:	28 30       	cpi	r18, 0x08	; 8
    9df4:	51 f1       	breq	.+84     	; 0x9e4a <__ultoa_invert+0x5c>
    9df6:	20 31       	cpi	r18, 0x10	; 16
    9df8:	81 f1       	breq	.+96     	; 0x9e5a <__ultoa_invert+0x6c>
    9dfa:	e8 94       	clt
    9dfc:	6f 93       	push	r22
    9dfe:	6e 7f       	andi	r22, 0xFE	; 254
    9e00:	6e 5f       	subi	r22, 0xFE	; 254
    9e02:	7f 4f       	sbci	r23, 0xFF	; 255
    9e04:	8f 4f       	sbci	r24, 0xFF	; 255
    9e06:	9f 4f       	sbci	r25, 0xFF	; 255
    9e08:	af 4f       	sbci	r26, 0xFF	; 255
    9e0a:	b1 e0       	ldi	r27, 0x01	; 1
    9e0c:	3e d0       	rcall	.+124    	; 0x9e8a <__ultoa_invert+0x9c>
    9e0e:	b4 e0       	ldi	r27, 0x04	; 4
    9e10:	3c d0       	rcall	.+120    	; 0x9e8a <__ultoa_invert+0x9c>
    9e12:	67 0f       	add	r22, r23
    9e14:	78 1f       	adc	r23, r24
    9e16:	89 1f       	adc	r24, r25
    9e18:	9a 1f       	adc	r25, r26
    9e1a:	a1 1d       	adc	r26, r1
    9e1c:	68 0f       	add	r22, r24
    9e1e:	79 1f       	adc	r23, r25
    9e20:	8a 1f       	adc	r24, r26
    9e22:	91 1d       	adc	r25, r1
    9e24:	a1 1d       	adc	r26, r1
    9e26:	6a 0f       	add	r22, r26
    9e28:	71 1d       	adc	r23, r1
    9e2a:	81 1d       	adc	r24, r1
    9e2c:	91 1d       	adc	r25, r1
    9e2e:	a1 1d       	adc	r26, r1
    9e30:	20 d0       	rcall	.+64     	; 0x9e72 <__ultoa_invert+0x84>
    9e32:	09 f4       	brne	.+2      	; 0x9e36 <__ultoa_invert+0x48>
    9e34:	68 94       	set
    9e36:	3f 91       	pop	r19
    9e38:	2a e0       	ldi	r18, 0x0A	; 10
    9e3a:	26 9f       	mul	r18, r22
    9e3c:	11 24       	eor	r1, r1
    9e3e:	30 19       	sub	r19, r0
    9e40:	30 5d       	subi	r19, 0xD0	; 208
    9e42:	31 93       	st	Z+, r19
    9e44:	de f6       	brtc	.-74     	; 0x9dfc <__ultoa_invert+0xe>
    9e46:	cf 01       	movw	r24, r30
    9e48:	08 95       	ret
    9e4a:	46 2f       	mov	r20, r22
    9e4c:	47 70       	andi	r20, 0x07	; 7
    9e4e:	40 5d       	subi	r20, 0xD0	; 208
    9e50:	41 93       	st	Z+, r20
    9e52:	b3 e0       	ldi	r27, 0x03	; 3
    9e54:	0f d0       	rcall	.+30     	; 0x9e74 <__ultoa_invert+0x86>
    9e56:	c9 f7       	brne	.-14     	; 0x9e4a <__ultoa_invert+0x5c>
    9e58:	f6 cf       	rjmp	.-20     	; 0x9e46 <__ultoa_invert+0x58>
    9e5a:	46 2f       	mov	r20, r22
    9e5c:	4f 70       	andi	r20, 0x0F	; 15
    9e5e:	40 5d       	subi	r20, 0xD0	; 208
    9e60:	4a 33       	cpi	r20, 0x3A	; 58
    9e62:	18 f0       	brcs	.+6      	; 0x9e6a <__ultoa_invert+0x7c>
    9e64:	49 5d       	subi	r20, 0xD9	; 217
    9e66:	31 fd       	sbrc	r19, 1
    9e68:	40 52       	subi	r20, 0x20	; 32
    9e6a:	41 93       	st	Z+, r20
    9e6c:	02 d0       	rcall	.+4      	; 0x9e72 <__ultoa_invert+0x84>
    9e6e:	a9 f7       	brne	.-22     	; 0x9e5a <__ultoa_invert+0x6c>
    9e70:	ea cf       	rjmp	.-44     	; 0x9e46 <__ultoa_invert+0x58>
    9e72:	b4 e0       	ldi	r27, 0x04	; 4
    9e74:	a6 95       	lsr	r26
    9e76:	97 95       	ror	r25
    9e78:	87 95       	ror	r24
    9e7a:	77 95       	ror	r23
    9e7c:	67 95       	ror	r22
    9e7e:	ba 95       	dec	r27
    9e80:	c9 f7       	brne	.-14     	; 0x9e74 <__ultoa_invert+0x86>
    9e82:	00 97       	sbiw	r24, 0x00	; 0
    9e84:	61 05       	cpc	r22, r1
    9e86:	71 05       	cpc	r23, r1
    9e88:	08 95       	ret
    9e8a:	9b 01       	movw	r18, r22
    9e8c:	ac 01       	movw	r20, r24
    9e8e:	0a 2e       	mov	r0, r26
    9e90:	06 94       	lsr	r0
    9e92:	57 95       	ror	r21
    9e94:	47 95       	ror	r20
    9e96:	37 95       	ror	r19
    9e98:	27 95       	ror	r18
    9e9a:	ba 95       	dec	r27
    9e9c:	c9 f7       	brne	.-14     	; 0x9e90 <__ultoa_invert+0xa2>
    9e9e:	62 0f       	add	r22, r18
    9ea0:	73 1f       	adc	r23, r19
    9ea2:	84 1f       	adc	r24, r20
    9ea4:	95 1f       	adc	r25, r21
    9ea6:	a0 1d       	adc	r26, r0
    9ea8:	08 95       	ret

00009eaa <__do_global_dtors>:
    9eaa:	13 e0       	ldi	r17, 0x03	; 3
    9eac:	c8 e5       	ldi	r28, 0x58	; 88
    9eae:	d3 e0       	ldi	r29, 0x03	; 3
    9eb0:	03 c0       	rjmp	.+6      	; 0x9eb8 <__do_global_dtors+0xe>
    9eb2:	fe 01       	movw	r30, r28
    9eb4:	82 db       	rcall	.-2300   	; 0x95ba <__tablejump2__>
    9eb6:	21 96       	adiw	r28, 0x01	; 1
    9eb8:	c9 35       	cpi	r28, 0x59	; 89
    9eba:	d1 07       	cpc	r29, r17
    9ebc:	d1 f7       	brne	.-12     	; 0x9eb2 <__do_global_dtors+0x8>
    9ebe:	f8 94       	cli

00009ec0 <__stop_program>:
    9ec0:	ff cf       	rjmp	.-2      	; 0x9ec0 <__stop_program>
