
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000322  00800100  00009252  000092e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a13  00800422  00800422  00009608  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009608  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000580  00000000  00000000  000096a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dc36  00000000  00000000  00009c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000209d  00000000  00000000  0001785a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a06  00000000  00000000  000198f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a04  00000000  00000000  0001f300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b4f  00000000  00000000  00020d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d24e  00000000  00000000  00022853  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  0002faa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c3       	rjmp	.+1712   	; 0x6b2 <__dtors_end>
       2:	00 00       	nop
       4:	80 c3       	rjmp	.+1792   	; 0x706 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c3       	rjmp	.+1788   	; 0x706 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c3       	rjmp	.+1784   	; 0x706 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c3       	rjmp	.+1780   	; 0x706 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c3       	rjmp	.+1776   	; 0x706 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c3       	rjmp	.+1772   	; 0x706 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c3       	rjmp	.+1768   	; 0x706 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c3       	rjmp	.+1764   	; 0x706 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c3       	rjmp	.+1760   	; 0x706 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <__vector_11>
      30:	6a c3       	rjmp	.+1748   	; 0x706 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c4 2b 	jmp	0x5788	; 0x5788 <__vector_13>
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c3       	rjmp	.+1736   	; 0x706 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 80 2b 	jmp	0x5700	; 0x5700 <__vector_16>
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c3       	rjmp	.+1720   	; 0x706 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 d5 2b 	jmp	0x57aa	; 0x57aa <__vector_20>
      54:	58 c3       	rjmp	.+1712   	; 0x706 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c3       	rjmp	.+1708   	; 0x706 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c3       	rjmp	.+1704   	; 0x706 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c3       	rjmp	.+1700   	; 0x706 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c3       	rjmp	.+1696   	; 0x706 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c3       	rjmp	.+1692   	; 0x706 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c3       	rjmp	.+1688   	; 0x706 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c3       	rjmp	.+1684   	; 0x706 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c3       	rjmp	.+1680   	; 0x706 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c3       	rjmp	.+1676   	; 0x706 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c3       	rjmp	.+1672   	; 0x706 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c3       	rjmp	.+1668   	; 0x706 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c3       	rjmp	.+1664   	; 0x706 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c3       	rjmp	.+1660   	; 0x706 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	91 09       	sbc	r25, r1
      8e:	98 09       	sbc	r25, r8
      90:	e5 0a       	sbc	r14, r21
      92:	08 0a       	sbc	r0, r24
      94:	e5 0a       	sbc	r14, r21
      96:	e5 0a       	sbc	r14, r21
      98:	e5 0a       	sbc	r14, r21
      9a:	dd 0a       	sbc	r13, r29
      9c:	e5 0a       	sbc	r14, r21
      9e:	e5 0a       	sbc	r14, r21
      a0:	e5 0a       	sbc	r14, r21
      a2:	e5 0a       	sbc	r14, r21
      a4:	e5 0a       	sbc	r14, r21
      a6:	e5 0a       	sbc	r14, r21
      a8:	e5 0a       	sbc	r14, r21
      aa:	e5 0a       	sbc	r14, r21
      ac:	e5 0a       	sbc	r14, r21
      ae:	e5 0a       	sbc	r14, r21
      b0:	e5 0a       	sbc	r14, r21
      b2:	e5 0a       	sbc	r14, r21
      b4:	e5 0a       	sbc	r14, r21
      b6:	e5 0a       	sbc	r14, r21
      b8:	e5 0a       	sbc	r14, r21
      ba:	e5 0a       	sbc	r14, r21
      bc:	e5 0a       	sbc	r14, r21
      be:	e5 0a       	sbc	r14, r21
      c0:	e5 0a       	sbc	r14, r21
      c2:	e5 0a       	sbc	r14, r21
      c4:	e5 0a       	sbc	r14, r21
      c6:	e5 0a       	sbc	r14, r21
      c8:	e5 0a       	sbc	r14, r21
      ca:	e5 0a       	sbc	r14, r21
      cc:	e5 0a       	sbc	r14, r21
      ce:	e5 0a       	sbc	r14, r21
      d0:	e5 0a       	sbc	r14, r21
      d2:	e5 0a       	sbc	r14, r21
      d4:	e5 0a       	sbc	r14, r21
      d6:	e5 0a       	sbc	r14, r21
      d8:	e5 0a       	sbc	r14, r21
      da:	e5 0a       	sbc	r14, r21
      dc:	e5 0a       	sbc	r14, r21
      de:	e5 0a       	sbc	r14, r21
      e0:	e5 0a       	sbc	r14, r21
      e2:	e5 0a       	sbc	r14, r21
      e4:	e5 0a       	sbc	r14, r21
      e6:	e5 0a       	sbc	r14, r21
      e8:	e5 0a       	sbc	r14, r21
      ea:	e5 0a       	sbc	r14, r21
      ec:	e5 0a       	sbc	r14, r21
      ee:	e5 0a       	sbc	r14, r21
      f0:	8e 0a       	sbc	r8, r30
      f2:	94 0a       	sbc	r9, r20
      f4:	a5 0a       	sbc	r10, r21
      f6:	b6 0a       	sbc	r11, r22
      f8:	cb 0a       	sbc	r12, r27
      fa:	0e 23       	and	r16, r30
      fc:	e1 21       	and	r30, r1
      fe:	f0 21       	and	r31, r0
     100:	eb 21       	and	r30, r11
     102:	eb 21       	and	r30, r11
     104:	eb 21       	and	r30, r11
     106:	eb 21       	and	r30, r11
     108:	eb 21       	and	r30, r11
     10a:	eb 21       	and	r30, r11
     10c:	eb 21       	and	r30, r11
     10e:	eb 21       	and	r30, r11
     110:	eb 21       	and	r30, r11
     112:	eb 21       	and	r30, r11
     114:	1c 23       	and	r17, r28
     116:	eb 21       	and	r30, r11
     118:	eb 21       	and	r30, r11
     11a:	eb 21       	and	r30, r11
     11c:	97 21       	and	r25, r7
     11e:	eb 21       	and	r30, r11
     120:	f0 21       	and	r31, r0
     122:	eb 21       	and	r30, r11
     124:	eb 21       	and	r30, r11
     126:	df 22       	and	r13, r31
     128:	6d 24       	eor	r6, r13
     12a:	6f 24       	eor	r6, r15
     12c:	6f 24       	eor	r6, r15
     12e:	6f 24       	eor	r6, r15
     130:	6f 24       	eor	r6, r15
     132:	6f 24       	eor	r6, r15
     134:	6f 24       	eor	r6, r15
     136:	6b 24       	eor	r6, r11
     138:	6f 24       	eor	r6, r15
     13a:	6f 24       	eor	r6, r15
     13c:	6f 24       	eor	r6, r15
     13e:	6f 24       	eor	r6, r15
     140:	6f 24       	eor	r6, r15
     142:	72 24       	eor	r7, r2
     144:	71 24       	eor	r7, r1
     146:	5b 24       	eor	r5, r11
     148:	5d 24       	eor	r5, r13
     14a:	5f 24       	eor	r5, r15
     14c:	61 24       	eor	r6, r1
     14e:	63 24       	eor	r6, r3
     150:	65 24       	eor	r6, r5
     152:	67 24       	eor	r6, r7
     154:	69 24       	eor	r6, r9
     156:	29 2f       	mov	r18, r25
     158:	39 2f       	mov	r19, r25
     15a:	39 2f       	mov	r19, r25
     15c:	39 2f       	mov	r19, r25
     15e:	39 2f       	mov	r19, r25
     160:	39 2f       	mov	r19, r25
     162:	39 2f       	mov	r19, r25
     164:	39 2f       	mov	r19, r25
     166:	39 2f       	mov	r19, r25
     168:	39 2f       	mov	r19, r25
     16a:	39 2f       	mov	r19, r25
     16c:	39 2f       	mov	r19, r25
     16e:	39 2f       	mov	r19, r25
     170:	39 2f       	mov	r19, r25
     172:	39 2f       	mov	r19, r25
     174:	39 2f       	mov	r19, r25
     176:	39 2f       	mov	r19, r25
     178:	39 2f       	mov	r19, r25
     17a:	39 2f       	mov	r19, r25
     17c:	39 2f       	mov	r19, r25
     17e:	39 2f       	mov	r19, r25
     180:	39 2f       	mov	r19, r25
     182:	39 2f       	mov	r19, r25
     184:	39 2f       	mov	r19, r25
     186:	39 2f       	mov	r19, r25
     188:	39 2f       	mov	r19, r25
     18a:	39 2f       	mov	r19, r25
     18c:	39 2f       	mov	r19, r25
     18e:	39 2f       	mov	r19, r25
     190:	39 2f       	mov	r19, r25
     192:	39 2f       	mov	r19, r25
     194:	39 2f       	mov	r19, r25
     196:	39 2f       	mov	r19, r25
     198:	39 2f       	mov	r19, r25
     19a:	39 2f       	mov	r19, r25
     19c:	39 2f       	mov	r19, r25
     19e:	39 2f       	mov	r19, r25
     1a0:	39 2f       	mov	r19, r25
     1a2:	39 2f       	mov	r19, r25
     1a4:	39 2f       	mov	r19, r25
     1a6:	39 2f       	mov	r19, r25
     1a8:	39 2f       	mov	r19, r25
     1aa:	39 2f       	mov	r19, r25
     1ac:	39 2f       	mov	r19, r25
     1ae:	39 2f       	mov	r19, r25
     1b0:	39 2f       	mov	r19, r25
     1b2:	39 2f       	mov	r19, r25
     1b4:	39 2f       	mov	r19, r25
     1b6:	39 2f       	mov	r19, r25
     1b8:	39 2f       	mov	r19, r25
     1ba:	39 2f       	mov	r19, r25
     1bc:	39 2f       	mov	r19, r25
     1be:	05 2f       	mov	r16, r21
     1c0:	39 2f       	mov	r19, r25
     1c2:	39 2f       	mov	r19, r25
     1c4:	39 2f       	mov	r19, r25
     1c6:	39 2f       	mov	r19, r25
     1c8:	39 2f       	mov	r19, r25
     1ca:	39 2f       	mov	r19, r25
     1cc:	39 2f       	mov	r19, r25
     1ce:	d2 2e       	mov	r13, r18
     1d0:	ce 2e       	mov	r12, r30
     1d2:	39 2f       	mov	r19, r25
     1d4:	f2 2e       	mov	r15, r18
     1d6:	39 2f       	mov	r19, r25
     1d8:	39 2f       	mov	r19, r25
     1da:	df 2e       	mov	r13, r31
     1dc:	39 2f       	mov	r19, r25
     1de:	39 2f       	mov	r19, r25
     1e0:	1a 2f       	mov	r17, r26
     1e2:	a3 37       	cpi	r26, 0x73	; 115
     1e4:	c9 37       	cpi	r28, 0x79	; 121
     1e6:	f0 37       	cpi	r31, 0x70	; 112
     1e8:	18 38       	cpi	r17, 0x88	; 136
     1ea:	3f 38       	cpi	r19, 0x8F	; 143
     1ec:	69 38       	cpi	r22, 0x89	; 137
     1ee:	92 38       	cpi	r25, 0x82	; 130
     1f0:	bc 38       	cpi	r27, 0x8C	; 140
     1f2:	33 39       	cpi	r19, 0x93	; 147
     1f4:	5d 39       	cpi	r21, 0x9D	; 157
     1f6:	05 a8       	ldd	r0, Z+53	; 0x35
     1f8:	4c cd       	rjmp	.-1384   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     1fa:	b2 d4       	rcall	.+2404   	; 0xb60 <_ZN6BMP18018bmp180_getpressureEv+0x54>
     1fc:	4e b9       	out	0x0e, r20	; 14
     1fe:	38 36       	cpi	r19, 0x68	; 104
     200:	a9 02       	muls	r26, r25
     202:	0c 50       	subi	r16, 0x0C	; 12
     204:	b9 91       	ld	r27, Y+
     206:	86 88       	ldd	r8, Z+22	; 0x16
     208:	08 3c       	cpi	r16, 0xC8	; 200
     20a:	a6 aa       	std	Z+54, r10	; 0x36
     20c:	aa 2a       	or	r10, r26
     20e:	be 00       	.word	0x00be	; ????
     210:	00 00       	nop
     212:	80 3f       	cpi	r24, 0xF0	; 240
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <_ZN6BMP18021bmp180_gettemperatureEv+0xcc>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__trampolines_end>:
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	f8 fc       	.word	0xfcf8	; ????
     29a:	fe 1e       	adc	r15, r30
     29c:	07 07       	cpc	r16, r23
     29e:	07 07       	cpc	r16, r23
     2a0:	1e fe       	.word	0xfe1e	; ????
     2a2:	fc f8       	.word	0xf8fc	; ????
     2a4:	f0 00       	.word	0x00f0	; ????
     2a6:	00 07       	cpc	r16, r16
     2a8:	0f 3f       	cpi	r16, 0xFF	; 255
     2aa:	3f 7c       	andi	r19, 0xCF	; 207
     2ac:	70 70       	andi	r23, 0x00	; 0
     2ae:	70 70       	andi	r23, 0x00	; 0
     2b0:	7c 3f       	cpi	r23, 0xFC	; 252
     2b2:	1f 1f       	adc	r17, r31
     2b4:	07 00       	.word	0x0007	; ????
     2b6:	00 00       	nop
     2b8:	00 06       	cpc	r0, r16
     2ba:	07 07       	cpc	r16, r23
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
	...
     2cc:	7f 7f       	andi	r23, 0xFF	; 255
     2ce:	7f 7f       	andi	r23, 0xFF	; 255
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 38       	cpi	r16, 0x80	; 128
     2d8:	3c 3e       	cpi	r19, 0xEC	; 236
     2da:	3e 0f       	add	r19, r30
     2dc:	07 07       	cpc	r16, r23
     2de:	07 cf       	rjmp	.-498    	; 0xee <__SREG__+0xaf>
     2e0:	ff fe       	.word	0xfeff	; ????
     2e2:	fe 38       	cpi	r31, 0x8E	; 142
     2e4:	00 00       	nop
     2e6:	00 40       	sbci	r16, 0x00	; 0
     2e8:	40 60       	ori	r20, 0x00	; 0
     2ea:	70 78       	andi	r23, 0x80	; 128
     2ec:	7c 7e       	andi	r23, 0xEC	; 236
     2ee:	7f 77       	andi	r23, 0x7F	; 127
     2f0:	73 71       	andi	r23, 0x13	; 19
     2f2:	70 70       	andi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 18       	sub	r0, r0
     2f8:	1c 1e       	adc	r1, r28
     2fa:	1e 0f       	add	r17, r30
     2fc:	c7 c7       	rjmp	.+3982   	; 0x128c <disk_write+0x86>
     2fe:	e7 ff       	sbrs	r30, 7
     300:	fe be       	out	0x3e, r15	; 62
     302:	9c 00       	.word	0x009c	; ????
     304:	00 00       	nop
     306:	00 0c       	add	r0, r0
     308:	1c 3c       	cpi	r17, 0xCC	; 204
     30a:	3c 78       	andi	r19, 0x8C	; 140
     30c:	70 70       	andi	r23, 0x00	; 0
     30e:	70 79       	andi	r23, 0x90	; 144
     310:	7f 3f       	cpi	r23, 0xFF	; 255
     312:	1f 0f       	add	r17, r31
     314:	00 00       	nop
     316:	00 00       	nop
     318:	80 c0       	rjmp	.+256    	; 0x41a <_ZL7font5x8+0x44>
     31a:	e0 70       	andi	r30, 0x00	; 0
     31c:	38 1c       	adc	r3, r8
     31e:	1e ff       	.word	0xff1e	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff 00       	.word	0x00ff	; ????
     324:	00 00       	nop
     326:	06 07       	cpc	r16, r22
     328:	07 07       	cpc	r16, r23
     32a:	06 06       	cpc	r0, r22
     32c:	06 06       	cpc	r0, r22
     32e:	06 7f       	andi	r16, 0xF6	; 246
     330:	7f 7f       	andi	r23, 0xFF	; 255
     332:	7f 06       	cpc	r7, r31
     334:	06 00       	.word	0x0006	; ????
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	f0 ff       	sbrs	r31, 0
     33c:	ff ff       	.word	0xffff	; ????
     33e:	e7 e7       	ldi	r30, 0x77	; 119
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	c7 87       	std	Z+15, r28	; 0x0f
     344:	00 00       	nop
     346:	00 00       	nop
     348:	38 78       	andi	r19, 0x88	; 136
     34a:	71 70       	andi	r23, 0x01	; 1
     34c:	70 70       	andi	r23, 0x00	; 0
     34e:	70 70       	andi	r23, 0x00	; 0
     350:	39 3f       	cpi	r19, 0xF9	; 249
     352:	3f 1f       	adc	r19, r31
     354:	0f 00       	.word	0x000f	; ????
     356:	00 80       	ld	r0, Z
     358:	e0 f0       	brcs	.+56     	; 0x392 <__trampolines_end+0xfc>
     35a:	f8 fc       	.word	0xfcf8	; ????
     35c:	7f 7f       	andi	r23, 0xFF	; 255
     35e:	6f 67       	ori	r22, 0x7F	; 127
     360:	e1 e1       	ldi	r30, 0x11	; 17
     362:	c0 80       	ld	r12, Z
     364:	00 00       	nop
     366:	00 0f       	add	r16, r16
     368:	1f 3f       	cpi	r17, 0xFF	; 255
     36a:	3f 78       	andi	r19, 0x8F	; 143
     36c:	70 70       	andi	r23, 0x00	; 0
     36e:	70 70       	andi	r23, 0x00	; 0
     370:	78 3f       	cpi	r23, 0xF8	; 248
     372:	3f 1f       	adc	r19, r31
     374:	0f 00       	.word	0x000f	; ????
     376:	00 07       	cpc	r16, r16
     378:	07 07       	cpc	r16, r23
     37a:	07 07       	cpc	r16, r23
     37c:	c7 e7       	ldi	r28, 0x77	; 119
     37e:	f7 ff       	sbrs	r31, 7
     380:	7f 3f       	cpi	r23, 0xFF	; 255
     382:	1f 07       	cpc	r17, r31
     384:	03 01       	movw	r0, r6
     386:	00 20       	and	r0, r0
     388:	38 7c       	andi	r19, 0xC8	; 200
     38a:	7e 3f       	cpi	r23, 0xFE	; 254
     38c:	0f 07       	cpc	r16, r31
     38e:	03 00       	.word	0x0003	; ????
	...
     398:	00 1c       	adc	r0, r0
     39a:	be fe       	.word	0xfebe	; ????
     39c:	ff e7       	ldi	r31, 0x7F	; 127
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <_ZN6BMP18018bmp180_getpressureEv+0x1a>
     3a0:	e7 ff       	sbrs	r30, 7
     3a2:	fe be       	out	0x3e, r15	; 62
     3a4:	1c 00       	.word	0x001c	; ????
     3a6:	00 00       	nop
     3a8:	0e 3f       	cpi	r16, 0xFE	; 254
     3aa:	3f 7f       	andi	r19, 0xFF	; 255
     3ac:	71 60       	ori	r23, 0x01	; 1
     3ae:	60 60       	ori	r22, 0x00	; 0
     3b0:	71 7f       	andi	r23, 0xF1	; 241
     3b2:	3f 3f       	cpi	r19, 0xFF	; 255
     3b4:	0f 00       	.word	0x000f	; ????
     3b6:	00 78       	andi	r16, 0x80	; 128
     3b8:	fc fe       	.word	0xfefc	; ????
     3ba:	fe 8f       	std	Y+30, r31	; 0x1e
     3bc:	07 07       	cpc	r16, r23
     3be:	07 07       	cpc	r16, r23
     3c0:	8f fe       	.word	0xfe8f	; ????
     3c2:	fe fc       	.word	0xfcfe	; ????
     3c4:	f8 00       	.word	0x00f8	; ????
     3c6:	00 00       	nop
     3c8:	00 01       	movw	r0, r0
     3ca:	43 43       	sbci	r20, 0x33	; 51
     3cc:	73 7b       	andi	r23, 0xB3	; 179
     3ce:	7f 7f       	andi	r23, 0xFF	; 255
     3d0:	1f 0f       	add	r17, r31
     3d2:	07 03       	mulsu	r16, r23
	...

000003d6 <_ZL7font5x8>:
     3d6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     3e6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     3f6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     406:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     416:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     426:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     436:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     446:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     456:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     466:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     476:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     486:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     496:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     4a6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     4b6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     4c6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     4d6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     4e6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     4f6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     506:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     516:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     526:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     536:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     546:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     556:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     566:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     576:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     586:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     596:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     5a6:	00 10 08 08 10 08                                   ......

000005ac <__c.2179>:
     5ac:	6e 61 6e 00                                         nan.

000005b0 <__c.2177>:
     5b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     600:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     610:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     620:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     630:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     640:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     650:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     660:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     670:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     680:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     690:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000006ae <__ctors_start>:
     6ae:	f1 3b       	cpi	r31, 0xB1	; 177

000006b0 <__ctors_end>:
     6b0:	14 3c       	cpi	r17, 0xC4	; 196

000006b2 <__dtors_end>:
     6b2:	11 24       	eor	r1, r1
     6b4:	1f be       	out	0x3f, r1	; 63
     6b6:	cf ef       	ldi	r28, 0xFF	; 255
     6b8:	d0 e4       	ldi	r29, 0x40	; 64
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	cd bf       	out	0x3d, r28	; 61

000006be <__do_copy_data>:
     6be:	14 e0       	ldi	r17, 0x04	; 4
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	e2 e5       	ldi	r30, 0x52	; 82
     6c6:	f2 e9       	ldi	r31, 0x92	; 146
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	0b bf       	out	0x3b, r16	; 59
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__do_copy_data+0x14>
     6ce:	07 90       	elpm	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	a2 32       	cpi	r26, 0x22	; 34
     6d4:	b1 07       	cpc	r27, r17
     6d6:	d9 f7       	brne	.-10     	; 0x6ce <__do_copy_data+0x10>

000006d8 <__do_clear_bss>:
     6d8:	2e e0       	ldi	r18, 0x0E	; 14
     6da:	a2 e2       	ldi	r26, 0x22	; 34
     6dc:	b4 e0       	ldi	r27, 0x04	; 4
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <.do_clear_bss_start>

000006e0 <.do_clear_bss_loop>:
     6e0:	1d 92       	st	X+, r1

000006e2 <.do_clear_bss_start>:
     6e2:	a5 33       	cpi	r26, 0x35	; 53
     6e4:	b2 07       	cpc	r27, r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <.do_clear_bss_loop>

000006e8 <__do_global_ctors>:
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d3 e0       	ldi	r29, 0x03	; 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__do_global_ctors+0x10>
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <__tablejump2__>
     6f8:	c7 35       	cpi	r28, 0x57	; 87
     6fa:	d1 07       	cpc	r29, r17
     6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__do_global_ctors+0x8>
     6fe:	0e 94 13 35 	call	0x6a26	; 0x6a26 <main>
     702:	0c 94 1d 49 	jmp	0x923a	; 0x923a <__do_global_dtors>

00000706 <__bad_interrupt>:
     706:	7c cc       	rjmp	.-1800   	; 0x0 <__vectors>

00000708 <_ZN6BMP180D1Ev>:
	bmp180_getcalibration();
	
} //BMP180

// default destructor
BMP180::~BMP180()
     708:	8a 96       	adiw	r24, 0x2a	; 42
     70a:	0c 94 3e 23 	jmp	0x467c	; 0x467c <_ZN3I2CD1Ev>
     70e:	08 95       	ret

00000710 <_ZN6BMP18015bmp180_writememEhh>:
{
} //~BMP180bmp180_regac2

void BMP180::bmp180_writemem(uint8_t reg, uint8_t value){
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	06 2f       	mov	r16, r22
     71a:	14 2f       	mov	r17, r20
	i2c.twi_start();
     71c:	ec 01       	movw	r28, r24
     71e:	aa 96       	adiw	r28, 0x2a	; 42
     720:	ce 01       	movw	r24, r28
     722:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
	i2c.twi_write(BMP180_ADDR | I2C_WRITE);
     726:	6e ee       	ldi	r22, 0xEE	; 238
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     72e:	60 2f       	mov	r22, r16
     730:	ce 01       	movw	r24, r28
     732:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(value);
     736:	61 2f       	mov	r22, r17
     738:	ce 01       	movw	r24, r28
     73a:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 43 23 	call	0x4686	; 0x4686 <_ZN3I2C8twi_stopEv>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <_ZN6BMP18014bmp180_readmemEhPhh>:

void BMP180::bmp180_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes){
     74e:	af 92       	push	r10
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	c6 2f       	mov	r28, r22
     764:	d4 2e       	mov	r13, r20
     766:	d5 2f       	mov	r29, r21
     768:	c2 2e       	mov	r12, r18
	i2c.twi_start();
     76a:	8a 96       	adiw	r24, 0x2a	; 42
     76c:	7c 01       	movw	r14, r24
     76e:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     772:	6e ee       	ldi	r22, 0xEE	; 238
     774:	c7 01       	movw	r24, r14
     776:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     77a:	6c 2f       	mov	r22, r28
     77c:	c7 01       	movw	r24, r14
     77e:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     782:	c7 01       	movw	r24, r14
     784:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     788:	6f ee       	ldi	r22, 0xEF	; 239
     78a:	c7 01       	movw	r24, r14
     78c:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	
	for(uint8_t i=0; i<bytes;i++){
     790:	cc 20       	and	r12, r12
     792:	29 f1       	breq	.+74     	; 0x7de <_ZN6BMP18014bmp180_readmemEhPhh+0x90>
     794:	0d 2d       	mov	r16, r13
     796:	1d 2f       	mov	r17, r29
     798:	aa 24       	eor	r10, r10
     79a:	aa 94       	dec	r10
     79c:	ac 0c       	add	r10, r12
     79e:	b1 2c       	mov	r11, r1
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	a8 1a       	sub	r10, r24
     7a4:	b8 0a       	sbc	r11, r24
     7a6:	c0 e0       	ldi	r28, 0x00	; 0
     7a8:	d0 e0       	ldi	r29, 0x00	; 0
		if (i<(bytes-1))
     7aa:	d1 2c       	mov	r13, r1
     7ac:	e1 e0       	ldi	r30, 0x01	; 1
     7ae:	ce 1a       	sub	r12, r30
     7b0:	d1 08       	sbc	r13, r1
     7b2:	cc 15       	cp	r28, r12
     7b4:	dd 05       	cpc	r29, r13
     7b6:	3c f4       	brge	.+14     	; 0x7c6 <_ZN6BMP18014bmp180_readmemEhPhh+0x78>
		{
			buff[i]=i2c.twi_read(1);
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	c7 01       	movw	r24, r14
     7bc:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     7c0:	f8 01       	movw	r30, r16
     7c2:	80 83       	st	Z, r24
     7c4:	06 c0       	rjmp	.+12     	; 0x7d2 <_ZN6BMP18014bmp180_readmemEhPhh+0x84>
		}
		else
		{
			buff[i]=i2c.twi_read(0);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	c7 01       	movw	r24, r14
     7ca:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     7ce:	f8 01       	movw	r30, r16
     7d0:	80 83       	st	Z, r24
     7d2:	21 96       	adiw	r28, 0x01	; 1
     7d4:	0f 5f       	subi	r16, 0xFF	; 255
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
	i2c.twi_write(reg);
	i2c.twi_start();
	i2c.twi_write((BMP180_ADDR | I2C_READ));
	
	for(uint8_t i=0; i<bytes;i++){
     7d8:	ca 15       	cp	r28, r10
     7da:	db 05       	cpc	r29, r11
     7dc:	51 f7       	brne	.-44     	; 0x7b2 <_ZN6BMP18014bmp180_readmemEhPhh+0x64>
		else
		{
			buff[i]=i2c.twi_read(0);
		}
	}
	i2c.twi_stop();
     7de:	c7 01       	movw	r24, r14
     7e0:	0e 94 43 23 	call	0x4686	; 0x4686 <_ZN3I2C8twi_stopEv>
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	08 95       	ret

000007fa <_ZN6BMP18021bmp180_getcalibrationEv>:

void BMP180::bmp180_getcalibration() {
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
	//uint8_t buff[2] = {0,0};

	//bmp180_readmem(BMP180_REGAC1, buff, 2);
	
	i2c.twi_start();
     804:	8c 01       	movw	r16, r24
     806:	06 5d       	subi	r16, 0xD6	; 214
     808:	1f 4f       	sbci	r17, 0xFF	; 255
     80a:	c8 01       	movw	r24, r16
     80c:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     810:	6e ee       	ldi	r22, 0xEE	; 238
     812:	c8 01       	movw	r24, r16
     814:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGAC1);
     818:	6a ea       	ldi	r22, 0xAA	; 170
     81a:	c8 01       	movw	r24, r16
     81c:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     820:	c8 01       	movw	r24, r16
     822:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     826:	6f ee       	ldi	r22, 0xEF	; 239
     828:	c8 01       	movw	r24, r16
     82a:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	bmp180_regac1 = (i2c.twi_read(1) << 8);
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	c8 01       	movw	r24, r16
     832:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     836:	1c 86       	std	Y+12, r1	; 0x0c
     838:	8d 87       	std	Y+13, r24	; 0x0d
	bmp180_regac1 += (i2c.twi_read(1));
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	c8 01       	movw	r24, r16
     83e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     842:	2c 85       	ldd	r18, Y+12	; 0x0c
     844:	3d 85       	ldd	r19, Y+13	; 0x0d
     846:	28 0f       	add	r18, r24
     848:	31 1d       	adc	r19, r1
     84a:	3d 87       	std	Y+13, r19	; 0x0d
     84c:	2c 87       	std	Y+12, r18	; 0x0c
	
	//bmp180_regac1 = (((int16_t)buff[0] <<8) | ((int16_t)buff[1]));
	//bmp180_readmem(BMP180_REGAC2, buff, 2);
	//bmp180_regac2 = ((int16_t)buff[0] <<8 | ((int16_t)buff[1]));
	bmp180_regac2 = (i2c.twi_read(1) << 8);
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	c8 01       	movw	r24, r16
     852:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     856:	1e 86       	std	Y+14, r1	; 0x0e
     858:	8f 87       	std	Y+15, r24	; 0x0f
	bmp180_regac2 += (i2c.twi_read(1));
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	c8 01       	movw	r24, r16
     85e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     862:	2e 85       	ldd	r18, Y+14	; 0x0e
     864:	3f 85       	ldd	r19, Y+15	; 0x0f
     866:	28 0f       	add	r18, r24
     868:	31 1d       	adc	r19, r1
     86a:	3f 87       	std	Y+15, r19	; 0x0f
     86c:	2e 87       	std	Y+14, r18	; 0x0e
	
	//bmp180_readmem(BMP180_REGAC3, buff, 2);
	//bmp180_regac3 = ((int16_t)buff[0] <<8 | ((int16_t)buff[1]));
	bmp180_regac3 = (i2c.twi_read(1) << 8);
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	c8 01       	movw	r24, r16
     872:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     876:	18 8a       	std	Y+16, r1	; 0x10
     878:	89 8b       	std	Y+17, r24	; 0x11
	bmp180_regac3 += (i2c.twi_read(1));
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     882:	28 89       	ldd	r18, Y+16	; 0x10
     884:	39 89       	ldd	r19, Y+17	; 0x11
     886:	28 0f       	add	r18, r24
     888:	31 1d       	adc	r19, r1
     88a:	39 8b       	std	Y+17, r19	; 0x11
     88c:	28 8b       	std	Y+16, r18	; 0x10
	
	//bmp180_readmem(BMP180_REGAC4, buff, 2);
	//bmp180_regac4 = ((uint16_t)buff[0] <<8 | ((uint16_t)buff[1]));
	bmp180_regac4 = (i2c.twi_read(1) << 8);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	c8 01       	movw	r24, r16
     892:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     896:	1c 8e       	std	Y+28, r1	; 0x1c
     898:	8d 8f       	std	Y+29, r24	; 0x1d
	bmp180_regac4 += (i2c.twi_read(1));
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     8a2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8a4:	3d 8d       	ldd	r19, Y+29	; 0x1d
     8a6:	28 0f       	add	r18, r24
     8a8:	31 1d       	adc	r19, r1
     8aa:	3d 8f       	std	Y+29, r19	; 0x1d
     8ac:	2c 8f       	std	Y+28, r18	; 0x1c
	
	//bmp180_readmem(BMP180_REGAC5, buff, 2);
	//bmp180_regac5 = ((uint16_t)buff[0] <<8 | ((uint16_t)buff[1]));
	bmp180_regac5 = (i2c.twi_read(1) << 8);
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     8b6:	1e 8e       	std	Y+30, r1	; 0x1e
     8b8:	8f 8f       	std	Y+31, r24	; 0x1f
	bmp180_regac5 += (i2c.twi_read(1));
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	c8 01       	movw	r24, r16
     8be:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     8c2:	2e 8d       	ldd	r18, Y+30	; 0x1e
     8c4:	3f 8d       	ldd	r19, Y+31	; 0x1f
     8c6:	28 0f       	add	r18, r24
     8c8:	31 1d       	adc	r19, r1
     8ca:	3f 8f       	std	Y+31, r19	; 0x1f
     8cc:	2e 8f       	std	Y+30, r18	; 0x1e
	
	//bmp180_readmem(BMP180_REGAC6, buff, 2);
	//bmp180_regac6 = ((uint16_t)buff[0] <<8 | ((uint16_t)buff[1]));
	bmp180_regac6 = (i2c.twi_read(1) << 8);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     8d6:	18 a2       	std	Y+32, r1	; 0x20
     8d8:	89 a3       	std	Y+33, r24	; 0x21
	bmp180_regac6 += (i2c.twi_read(1));
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	c8 01       	movw	r24, r16
     8de:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     8e2:	28 a1       	ldd	r18, Y+32	; 0x20
     8e4:	39 a1       	ldd	r19, Y+33	; 0x21
     8e6:	28 0f       	add	r18, r24
     8e8:	31 1d       	adc	r19, r1
     8ea:	39 a3       	std	Y+33, r19	; 0x21
     8ec:	28 a3       	std	Y+32, r18	; 0x20
	
	//bmp180_readmem(BMP180_REGB1, buff, 2);
	//bmp180_regb1 = ((int16_t)buff[0] <<8 | ((int16_t)buff[1]));
	bmp180_regb1 = (i2c.twi_read(1) << 8);
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	c8 01       	movw	r24, r16
     8f2:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     8f6:	1a 8a       	std	Y+18, r1	; 0x12
     8f8:	8b 8b       	std	Y+19, r24	; 0x13
	bmp180_regb1 += (i2c.twi_read(1));
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	c8 01       	movw	r24, r16
     8fe:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     902:	2a 89       	ldd	r18, Y+18	; 0x12
     904:	3b 89       	ldd	r19, Y+19	; 0x13
     906:	28 0f       	add	r18, r24
     908:	31 1d       	adc	r19, r1
     90a:	3b 8b       	std	Y+19, r19	; 0x13
     90c:	2a 8b       	std	Y+18, r18	; 0x12
	
	//bmp180_readmem(BMP180_REGB2, buff, 2);
	//bmp180_regb2 = ((int16_t)buff[0] <<8 | ((int16_t)buff[1]));
	bmp180_regb2 = (i2c.twi_read(1) << 8);
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	c8 01       	movw	r24, r16
     912:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     916:	1c 8a       	std	Y+20, r1	; 0x14
     918:	8d 8b       	std	Y+21, r24	; 0x15
	bmp180_regb2 += (i2c.twi_read(1));
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     922:	2c 89       	ldd	r18, Y+20	; 0x14
     924:	3d 89       	ldd	r19, Y+21	; 0x15
     926:	28 0f       	add	r18, r24
     928:	31 1d       	adc	r19, r1
     92a:	3d 8b       	std	Y+21, r19	; 0x15
     92c:	2c 8b       	std	Y+20, r18	; 0x14
	
	//bmp180_readmem(BMP180_REGMB, buff, 2);
	//bmp180_regmb = ((int16_t)buff[0] <<8 | ((int16_t)buff[1]));
	bmp180_regmb = (i2c.twi_read(1) << 8);
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	c8 01       	movw	r24, r16
     932:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     936:	1e 8a       	std	Y+22, r1	; 0x16
     938:	8f 8b       	std	Y+23, r24	; 0x17
	bmp180_regmb += (i2c.twi_read(1));
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	c8 01       	movw	r24, r16
     93e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     942:	2e 89       	ldd	r18, Y+22	; 0x16
     944:	3f 89       	ldd	r19, Y+23	; 0x17
     946:	28 0f       	add	r18, r24
     948:	31 1d       	adc	r19, r1
     94a:	3f 8b       	std	Y+23, r19	; 0x17
     94c:	2e 8b       	std	Y+22, r18	; 0x16
	
	//bmp180_readmem(BMP180_REGMC, buff, 2);
	//bmp180_regmc = ((int16_t)buff[0] <<8 | ((int16_t)buff[1]));
	bmp180_regmc = (i2c.twi_read(1) << 8);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	c8 01       	movw	r24, r16
     952:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     956:	18 8e       	std	Y+24, r1	; 0x18
     958:	89 8f       	std	Y+25, r24	; 0x19
	bmp180_regmc += (i2c.twi_read(1));
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	c8 01       	movw	r24, r16
     95e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     962:	28 8d       	ldd	r18, Y+24	; 0x18
     964:	39 8d       	ldd	r19, Y+25	; 0x19
     966:	28 0f       	add	r18, r24
     968:	31 1d       	adc	r19, r1
     96a:	39 8f       	std	Y+25, r19	; 0x19
     96c:	28 8f       	std	Y+24, r18	; 0x18
	
	//bmp180_readmem(BMP180_REGMD, buff, 2);
	//bmp180_regmd = ((int16_t)buff[0] <<8 | ((int16_t)buff[1]));
	bmp180_regmd = (i2c.twi_read(1) << 8);
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	c8 01       	movw	r24, r16
     972:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     976:	1a 8e       	std	Y+26, r1	; 0x1a
     978:	8b 8f       	std	Y+27, r24	; 0x1b
	bmp180_regmd += (i2c.twi_read(0));
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	c8 01       	movw	r24, r16
     97e:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     982:	2a 8d       	ldd	r18, Y+26	; 0x1a
     984:	3b 8d       	ldd	r19, Y+27	; 0x1b
     986:	28 0f       	add	r18, r24
     988:	31 1d       	adc	r19, r1
     98a:	3b 8f       	std	Y+27, r19	; 0x1b
     98c:	2a 8f       	std	Y+26, r18	; 0x1a
	
	i2c.twi_stop();
     98e:	c8 01       	movw	r24, r16
     990:	0e 94 43 23 	call	0x4686	; 0x4686 <_ZN3I2C8twi_stopEv>
}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	08 95       	ret

0000099e <_ZN6BMP180C1Ev>:


#include "BMP180.h"

// default constructor
BMP180::BMP180()
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	8a 96       	adiw	r24, 0x2a	; 42
     9a6:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN3I2CC1Ev>
{
	bmp180_rawtemperature = 0;
     9aa:	1a a2       	std	Y+34, r1	; 0x22
     9ac:	1b a2       	std	Y+35, r1	; 0x23
     9ae:	1c a2       	std	Y+36, r1	; 0x24
     9b0:	1d a2       	std	Y+37, r1	; 0x25
	bmp180_rawpressure = 0;
     9b2:	1e a2       	std	Y+38, r1	; 0x26
     9b4:	1f a2       	std	Y+39, r1	; 0x27
     9b6:	18 a6       	std	Y+40, r1	; 0x28
     9b8:	19 a6       	std	Y+41, r1	; 0x29
	
	bmp180_getcalibration();
     9ba:	ce 01       	movw	r24, r28
     9bc:	1e df       	rcall	.-452    	; 0x7fa <_ZN6BMP18021bmp180_getcalibrationEv>
	
} //BMP180
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <_ZN6BMP18021bmp180_gettemperatureEv>:
void BMP180::bmp180_getaltitude(){
	bmp180_getpressure();
	
}

void BMP180::bmp180_gettemperature(){
     9c4:	8f 92       	push	r8
     9c6:	9f 92       	push	r9
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	8c 01       	movw	r16, r24
	//uint8_t buff[2] = {0,0};
	int32_t ut,x1,x2;

	//read raw temperature
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADTEMPERATURE);
     9de:	4e e2       	ldi	r20, 0x2E	; 46
     9e0:	64 ef       	ldi	r22, 0xF4	; 244
     9e2:	96 de       	rcall	.-724    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e4:	8f e0       	ldi	r24, 0x0F	; 15
     9e6:	97 e2       	ldi	r25, 0x27	; 39
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <_ZN6BMP18021bmp180_gettemperatureEv+0x24>
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <_ZN6BMP18021bmp180_gettemperatureEv+0x2a>
     9ee:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 2);
	i2c.twi_start();
     9f0:	e8 01       	movw	r28, r16
     9f2:	aa 96       	adiw	r28, 0x2a	; 42
     9f4:	ce 01       	movw	r24, r28
     9f6:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     9fa:	6e ee       	ldi	r22, 0xEE	; 238
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
     a02:	66 ef       	ldi	r22, 0xF6	; 246
     a04:	ce 01       	movw	r24, r28
     a06:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     a0a:	ce 01       	movw	r24, r28
     a0c:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     a10:	6f ee       	ldi	r22, 0xEF	; 239
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
	ut = i2c.twi_read(1)<<8;
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     a20:	c8 2e       	mov	r12, r24
     a22:	d1 2c       	mov	r13, r1
     a24:	dc 2c       	mov	r13, r12
     a26:	cc 24       	eor	r12, r12
     a28:	0d 2c       	mov	r0, r13
     a2a:	00 0c       	add	r0, r0
     a2c:	ee 08       	sbc	r14, r14
     a2e:	ff 08       	sbc	r15, r15
	ut += i2c.twi_read(0);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	ce 01       	movw	r24, r28
     a34:	0e 94 57 23 	call	0x46ae	; 0x46ae <_ZN3I2C8twi_readEh>
     a38:	c8 0e       	add	r12, r24
     a3a:	d1 1c       	adc	r13, r1
     a3c:	e1 1c       	adc	r14, r1
     a3e:	f1 1c       	adc	r15, r1
	i2c.twi_stop();
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 43 23 	call	0x4686	; 0x4686 <_ZN3I2C8twi_stopEv>
	
	//ut = ((buff[0] << 8) | (buff[1])); //uncompensated temperature value

	//calculate raw temperature
	x1 = ((ut - bmp180_regac6) * bmp180_regac5) >> 15;
     a46:	f8 01       	movw	r30, r16
     a48:	80 a1       	ldd	r24, Z+32	; 0x20
     a4a:	91 a1       	ldd	r25, Z+33	; 0x21
     a4c:	a7 01       	movw	r20, r14
     a4e:	96 01       	movw	r18, r12
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	41 09       	sbc	r20, r1
     a56:	51 09       	sbc	r21, r1
     a58:	a6 8d       	ldd	r26, Z+30	; 0x1e
     a5a:	b7 8d       	ldd	r27, Z+31	; 0x1f
     a5c:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__muluhisi3>
     a60:	6b 01       	movw	r12, r22
     a62:	7c 01       	movw	r14, r24
     a64:	0b 2e       	mov	r0, r27
     a66:	bf e0       	ldi	r27, 0x0F	; 15
     a68:	f5 94       	asr	r15
     a6a:	e7 94       	ror	r14
     a6c:	d7 94       	ror	r13
     a6e:	c7 94       	ror	r12
     a70:	ba 95       	dec	r27
     a72:	d1 f7       	brne	.-12     	; 0xa68 <_ZN6BMP18021bmp180_gettemperatureEv+0xa4>
     a74:	b0 2d       	mov	r27, r0
	x2 = (bmp180_regmc << 11) / (x1 + bmp180_regmd);
     a76:	80 8d       	ldd	r24, Z+24	; 0x18
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	78 2f       	mov	r23, r24
     a7e:	77 0f       	add	r23, r23
     a80:	77 0f       	add	r23, r23
     a82:	77 0f       	add	r23, r23
     a84:	07 2e       	mov	r0, r23
     a86:	00 0c       	add	r0, r0
     a88:	88 0b       	sbc	r24, r24
     a8a:	99 0b       	sbc	r25, r25
     a8c:	22 8d       	ldd	r18, Z+26	; 0x1a
     a8e:	33 8d       	ldd	r19, Z+27	; 0x1b
     a90:	49 01       	movw	r8, r18
     a92:	33 0f       	add	r19, r19
     a94:	aa 08       	sbc	r10, r10
     a96:	bb 08       	sbc	r11, r11
     a98:	a5 01       	movw	r20, r10
     a9a:	94 01       	movw	r18, r8
     a9c:	2c 0d       	add	r18, r12
     a9e:	3d 1d       	adc	r19, r13
     aa0:	4e 1d       	adc	r20, r14
     aa2:	5f 1d       	adc	r21, r15
     aa4:	0e 94 f9 45 	call	0x8bf2	; 0x8bf2 <__divmodsi4>
	bmp180_rawtemperature = x1 + x2;
     aa8:	d7 01       	movw	r26, r14
     aaa:	c6 01       	movw	r24, r12
     aac:	82 0f       	add	r24, r18
     aae:	93 1f       	adc	r25, r19
     ab0:	a4 1f       	adc	r26, r20
     ab2:	b5 1f       	adc	r27, r21
     ab4:	f8 01       	movw	r30, r16
     ab6:	82 a3       	std	Z+34, r24	; 0x22
     ab8:	93 a3       	std	Z+35, r25	; 0x23
     aba:	a4 a3       	std	Z+36, r26	; 0x24
     abc:	b5 a3       	std	Z+37, r27	; 0x25
	
	temperature = ((bmp180_rawtemperature+8)>>4)/10.0;
     abe:	08 96       	adiw	r24, 0x08	; 8
     ac0:	a1 1d       	adc	r26, r1
     ac2:	b1 1d       	adc	r27, r1
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	68 94       	set
     aca:	13 f8       	bld	r1, 3
     acc:	96 95       	lsr	r25
     ace:	87 95       	ror	r24
     ad0:	77 95       	ror	r23
     ad2:	67 95       	ror	r22
     ad4:	16 94       	lsr	r1
     ad6:	d1 f7       	brne	.-12     	; 0xacc <_ZN6BMP18021bmp180_gettemperatureEv+0x108>
     ad8:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__floatunsisf>
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e2       	ldi	r20, 0x20	; 32
     ae2:	51 e4       	ldi	r21, 0x41	; 65
     ae4:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
     ae8:	f8 01       	movw	r30, r16
     aea:	64 83       	std	Z+4, r22	; 0x04
     aec:	75 83       	std	Z+5, r23	; 0x05
     aee:	86 83       	std	Z+6, r24	; 0x06
     af0:	97 83       	std	Z+7, r25	; 0x07
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	bf 90       	pop	r11
     b04:	af 90       	pop	r10
     b06:	9f 90       	pop	r9
     b08:	8f 90       	pop	r8
     b0a:	08 95       	ret

00000b0c <_ZN6BMP18018bmp180_getpressureEv>:
	bmp180_regmd += (i2c.twi_read(0));
	
	i2c.twi_stop();
}

void BMP180::bmp180_getpressure(){
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2b 97       	sbiw	r28, 0x0b	; 11
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	8c 01       	movw	r16, r24
	uint8_t buff[3] = {0,0,0};
     b3e:	19 82       	std	Y+1, r1	; 0x01
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	1b 82       	std	Y+3, r1	; 0x03
	int32_t up,x1,x2,x3,b3,b6,p;
	uint32_t b4,b7;

	#if BMP180_AUTOUPDATETEMP == 1
	bmp180_gettemperature();
     b44:	3f df       	rcall	.-386    	; 0x9c4 <_ZN6BMP18021bmp180_gettemperatureEv>
	#endif

	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
     b46:	44 ef       	ldi	r20, 0xF4	; 244
     b48:	64 ef       	ldi	r22, 0xF4	; 244
     b4a:	c8 01       	movw	r24, r16
     b4c:	e1 dd       	rcall	.-1086   	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
     b4e:	8f e1       	ldi	r24, 0x1F	; 31
     b50:	9b ec       	ldi	r25, 0xCB	; 203
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <_ZN6BMP18018bmp180_getpressureEv+0x46>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <_ZN6BMP18018bmp180_getpressureEv+0x4c>
     b58:	00 00       	nop
	_delay_ms(2 + (3<<BMP180_MODE));
	
	bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 3);
     b5a:	23 e0       	ldi	r18, 0x03	; 3
     b5c:	ae 01       	movw	r20, r28
     b5e:	4f 5f       	subi	r20, 0xFF	; 255
     b60:	5f 4f       	sbci	r21, 0xFF	; 255
     b62:	66 ef       	ldi	r22, 0xF6	; 246
     b64:	c8 01       	movw	r24, r16
     b66:	f3 dd       	rcall	.-1050   	; 0x74e <_ZN6BMP18014bmp180_readmemEhPhh>
	up = ((((int32_t)buff[0] <<16) | ((int32_t)buff[1] <<8) | ((int32_t)buff[2])) >> (8-BMP180_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp180_rawtemperature - 4000;
     b68:	d8 01       	movw	r26, r16
     b6a:	92 96       	adiw	r26, 0x22	; 34
     b6c:	cd 90       	ld	r12, X+
     b6e:	dd 90       	ld	r13, X+
     b70:	ed 90       	ld	r14, X+
     b72:	fc 90       	ld	r15, X
     b74:	95 97       	sbiw	r26, 0x25	; 37
     b76:	a7 01       	movw	r20, r14
     b78:	96 01       	movw	r18, r12
     b7a:	20 5a       	subi	r18, 0xA0	; 160
     b7c:	3f 40       	sbci	r19, 0x0F	; 15
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	2c 83       	std	Y+4, r18	; 0x04
     b84:	3d 83       	std	Y+5, r19	; 0x05
     b86:	4e 83       	std	Y+6, r20	; 0x06
     b88:	5f 83       	std	Y+7, r21	; 0x07
	x1 = (bmp180_regb2* (b6 * b6) >> 12) >> 11;
     b8a:	ca 01       	movw	r24, r20
     b8c:	b9 01       	movw	r22, r18
     b8e:	0e 94 c8 45 	call	0x8b90	; 0x8b90 <__mulsi3>
     b92:	4b 01       	movw	r8, r22
     b94:	5c 01       	movw	r10, r24
	x2 = (bmp180_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((int32_t)bmp180_regac1) * 4 + x3) << BMP180_MODE) + 2) >> 2;
	x1 = (bmp180_regac3 * b6) >> 13;
     b96:	f8 01       	movw	r30, r16
     b98:	a0 89       	ldd	r26, Z+16	; 0x10
     b9a:	b1 89       	ldd	r27, Z+17	; 0x11
     b9c:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__mulshisi3>
     ba0:	2b 01       	movw	r4, r22
     ba2:	3c 01       	movw	r6, r24
     ba4:	03 2e       	mov	r0, r19
     ba6:	3d e0       	ldi	r19, 0x0D	; 13
     ba8:	75 94       	asr	r7
     baa:	67 94       	ror	r6
     bac:	57 94       	ror	r5
     bae:	47 94       	ror	r4
     bb0:	3a 95       	dec	r19
     bb2:	d1 f7       	brne	.-12     	; 0xba8 <_ZN6BMP18018bmp180_getpressureEv+0x9c>
     bb4:	30 2d       	mov	r19, r0
	x2 = (bmp180_regb1 * ((b6 * b6) >> 12)) >> 16;
     bb6:	a2 89       	ldd	r26, Z+18	; 0x12
     bb8:	b3 89       	ldd	r27, Z+19	; 0x13
     bba:	a5 01       	movw	r20, r10
     bbc:	94 01       	movw	r18, r8
     bbe:	01 2e       	mov	r0, r17
     bc0:	1c e0       	ldi	r17, 0x0C	; 12
     bc2:	55 95       	asr	r21
     bc4:	47 95       	ror	r20
     bc6:	37 95       	ror	r19
     bc8:	27 95       	ror	r18
     bca:	1a 95       	dec	r17
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <_ZN6BMP18018bmp180_getpressureEv+0xb6>
     bce:	10 2d       	mov	r17, r0
     bd0:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__mulshisi3>
     bd4:	bb 27       	eor	r27, r27
     bd6:	97 fd       	sbrc	r25, 7
     bd8:	b0 95       	com	r27
     bda:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     bdc:	84 0d       	add	r24, r4
     bde:	95 1d       	adc	r25, r5
     be0:	a6 1d       	adc	r26, r6
     be2:	b7 1d       	adc	r27, r7
     be4:	02 96       	adiw	r24, 0x02	; 2
     be6:	a1 1d       	adc	r26, r1
     be8:	b1 1d       	adc	r27, r1
     bea:	b5 95       	asr	r27
     bec:	a7 95       	ror	r26
     bee:	97 95       	ror	r25
     bf0:	87 95       	ror	r24
     bf2:	b5 95       	asr	r27
     bf4:	a7 95       	ror	r26
     bf6:	97 95       	ror	r25
     bf8:	87 95       	ror	r24
	b4 = (bmp180_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     bfa:	9c 01       	movw	r18, r24
     bfc:	ad 01       	movw	r20, r26
     bfe:	30 58       	subi	r19, 0x80	; 128
     c00:	4f 4f       	sbci	r20, 0xFF	; 255
     c02:	5f 4f       	sbci	r21, 0xFF	; 255
     c04:	a4 8d       	ldd	r26, Z+28	; 0x1c
     c06:	b5 8d       	ldd	r27, Z+29	; 0x1d
     c08:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__muluhisi3>
     c0c:	6b 01       	movw	r12, r22
     c0e:	7c 01       	movw	r14, r24
     c10:	0b 2e       	mov	r0, r27
     c12:	bf e0       	ldi	r27, 0x0F	; 15
     c14:	f6 94       	lsr	r15
     c16:	e7 94       	ror	r14
     c18:	d7 94       	ror	r13
     c1a:	c7 94       	ror	r12
     c1c:	ba 95       	dec	r27
     c1e:	d1 f7       	brne	.-12     	; 0xc14 <_ZN6BMP18018bmp180_getpressureEv+0x108>
     c20:	b0 2d       	mov	r27, r0
     c22:	c8 86       	std	Y+8, r12	; 0x08
     c24:	d9 86       	std	Y+9, r13	; 0x09
     c26:	ea 86       	std	Y+10, r14	; 0x0a
     c28:	fb 86       	std	Y+11, r15	; 0x0b
	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
	_delay_ms(2 + (3<<BMP180_MODE));
	
	bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 3);
	up = ((((int32_t)buff[0] <<16) | ((int32_t)buff[1] <<8) | ((int32_t)buff[2])) >> (8-BMP180_MODE)); // uncompensated pressure value
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	2a 81       	ldd	r18, Y+2	; 0x02
     c2e:	42 2f       	mov	r20, r18
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	76 2f       	mov	r23, r22
     c38:	65 2f       	mov	r22, r21
     c3a:	54 2f       	mov	r21, r20
     c3c:	44 27       	eor	r20, r20
     c3e:	68 2b       	or	r22, r24
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	6a 01       	movw	r12, r20
     c44:	7b 01       	movw	r14, r22
     c46:	c8 2a       	or	r12, r24
     c48:	d7 01       	movw	r26, r14
     c4a:	c6 01       	movw	r24, r12
     c4c:	2c 01       	movw	r4, r24
     c4e:	3d 01       	movw	r6, r26
     c50:	68 94       	set
     c52:	14 f8       	bld	r1, 4
     c54:	75 94       	asr	r7
     c56:	67 94       	ror	r6
     c58:	57 94       	ror	r5
     c5a:	47 94       	ror	r4
     c5c:	16 94       	lsr	r1
     c5e:	d1 f7       	brne	.-12     	; 0xc54 <_ZN6BMP18018bmp180_getpressureEv+0x148>
	//calculate raw pressure
	b6 = bmp180_rawtemperature - 4000;
	x1 = (bmp180_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp180_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((int32_t)bmp180_regac1) * 4 + x3) << BMP180_MODE) + 2) >> 2;
     c60:	84 85       	ldd	r24, Z+12	; 0x0c
     c62:	95 85       	ldd	r25, Z+13	; 0x0d
     c64:	09 2e       	mov	r0, r25
     c66:	00 0c       	add	r0, r0
     c68:	aa 0b       	sbc	r26, r26
     c6a:	bb 0b       	sbc	r27, r27
     c6c:	6c 01       	movw	r12, r24
     c6e:	7d 01       	movw	r14, r26
     c70:	cc 0c       	add	r12, r12
     c72:	dd 1c       	adc	r13, r13
     c74:	ee 1c       	adc	r14, r14
     c76:	ff 1c       	adc	r15, r15
     c78:	cc 0c       	add	r12, r12
     c7a:	dd 1c       	adc	r13, r13
     c7c:	ee 1c       	adc	r14, r14
     c7e:	ff 1c       	adc	r15, r15
	bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 3);
	up = ((((int32_t)buff[0] <<16) | ((int32_t)buff[1] <<8) | ((int32_t)buff[2])) >> (8-BMP180_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp180_rawtemperature - 4000;
	x1 = (bmp180_regb2* (b6 * b6) >> 12) >> 11;
     c80:	a4 89       	ldd	r26, Z+20	; 0x14
     c82:	b5 89       	ldd	r27, Z+21	; 0x15
     c84:	a5 01       	movw	r20, r10
     c86:	94 01       	movw	r18, r8
     c88:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__mulshisi3>
     c8c:	4b 01       	movw	r8, r22
     c8e:	5c 01       	movw	r10, r24
     c90:	07 2e       	mov	r0, r23
     c92:	77 e1       	ldi	r23, 0x17	; 23
     c94:	b5 94       	asr	r11
     c96:	a7 94       	ror	r10
     c98:	97 94       	ror	r9
     c9a:	87 94       	ror	r8
     c9c:	7a 95       	dec	r23
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <_ZN6BMP18018bmp180_getpressureEv+0x188>
     ca0:	70 2d       	mov	r23, r0
	x2 = (bmp180_regac2 * b6) >> 11;
     ca2:	a6 85       	ldd	r26, Z+14	; 0x0e
     ca4:	b7 85       	ldd	r27, Z+15	; 0x0f
     ca6:	2c 81       	ldd	r18, Y+4	; 0x04
     ca8:	3d 81       	ldd	r19, Y+5	; 0x05
     caa:	4e 81       	ldd	r20, Y+6	; 0x06
     cac:	5f 81       	ldd	r21, Y+7	; 0x07
     cae:	0e 94 37 46 	call	0x8c6e	; 0x8c6e <__mulshisi3>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	07 2e       	mov	r0, r23
     cb8:	7b e0       	ldi	r23, 0x0B	; 11
     cba:	b5 95       	asr	r27
     cbc:	a7 95       	ror	r26
     cbe:	97 95       	ror	r25
     cc0:	87 95       	ror	r24
     cc2:	7a 95       	dec	r23
     cc4:	d1 f7       	brne	.-12     	; 0xcba <_ZN6BMP18018bmp180_getpressureEv+0x1ae>
     cc6:	70 2d       	mov	r23, r0
	x3 = x1 + x2;
     cc8:	88 0e       	add	r8, r24
     cca:	99 1e       	adc	r9, r25
     ccc:	aa 1e       	adc	r10, r26
     cce:	bb 1e       	adc	r11, r27
	b3 = (((((int32_t)bmp180_regac1) * 4 + x3) << BMP180_MODE) + 2) >> 2;
     cd0:	8c 0c       	add	r8, r12
     cd2:	9d 1c       	adc	r9, r13
     cd4:	ae 1c       	adc	r10, r14
     cd6:	bf 1c       	adc	r11, r15
     cd8:	88 0c       	add	r8, r8
     cda:	99 1c       	adc	r9, r9
     cdc:	aa 1c       	adc	r10, r10
     cde:	bb 1c       	adc	r11, r11
	x1 = (bmp180_regac3 * b6) >> 13;
	x2 = (bmp180_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp180_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP180_MODE);
     ce0:	a3 01       	movw	r20, r6
     ce2:	92 01       	movw	r18, r4
     ce4:	28 19       	sub	r18, r8
     ce6:	39 09       	sbc	r19, r9
     ce8:	4a 09       	sbc	r20, r10
     cea:	5b 09       	sbc	r21, r11
     cec:	aa e6       	ldi	r26, 0x6A	; 106
     cee:	b8 e1       	ldi	r27, 0x18	; 24
     cf0:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     cf4:	99 23       	and	r25, r25
     cf6:	6c f0       	brlt	.+26     	; 0xd12 <_ZN6BMP18018bmp180_getpressureEv+0x206>
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	28 85       	ldd	r18, Y+8	; 0x08
     d02:	39 85       	ldd	r19, Y+9	; 0x09
     d04:	4a 85       	ldd	r20, Y+10	; 0x0a
     d06:	5b 85       	ldd	r21, Y+11	; 0x0b
     d08:	0e 94 d7 45 	call	0x8bae	; 0x8bae <__udivmodsi4>
     d0c:	69 01       	movw	r12, r18
     d0e:	7a 01       	movw	r14, r20
     d10:	0c c0       	rjmp	.+24     	; 0xd2a <_ZN6BMP18018bmp180_getpressureEv+0x21e>
     d12:	28 85       	ldd	r18, Y+8	; 0x08
     d14:	39 85       	ldd	r19, Y+9	; 0x09
     d16:	4a 85       	ldd	r20, Y+10	; 0x0a
     d18:	5b 85       	ldd	r21, Y+11	; 0x0b
     d1a:	0e 94 d7 45 	call	0x8bae	; 0x8bae <__udivmodsi4>
     d1e:	69 01       	movw	r12, r18
     d20:	7a 01       	movw	r14, r20
     d22:	cc 0c       	add	r12, r12
     d24:	dd 1c       	adc	r13, r13
     d26:	ee 1c       	adc	r14, r14
     d28:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
     d2a:	99 27       	eor	r25, r25
     d2c:	f7 fc       	sbrc	r15, 7
     d2e:	9a 95       	dec	r25
     d30:	8f 2d       	mov	r24, r15
     d32:	7e 2d       	mov	r23, r14
     d34:	6d 2d       	mov	r22, r13
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	0e 94 c8 45 	call	0x8b90	; 0x8b90 <__mulsi3>
     d3e:	9b 01       	movw	r18, r22
     d40:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
     d42:	ae ed       	ldi	r26, 0xDE	; 222
     d44:	bb e0       	ldi	r27, 0x0B	; 11
     d46:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__muluhisi3>
     d4a:	4c 01       	movw	r8, r24
     d4c:	bb 24       	eor	r11, r11
     d4e:	97 fc       	sbrc	r9, 7
     d50:	b0 94       	com	r11
     d52:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     d54:	a3 e4       	ldi	r26, 0x43	; 67
     d56:	b3 ee       	ldi	r27, 0xE3	; 227
     d58:	a7 01       	movw	r20, r14
     d5a:	96 01       	movw	r18, r12
     d5c:	0e 94 39 46 	call	0x8c72	; 0x8c72 <__mulohisi3>
     d60:	bb 27       	eor	r27, r27
     d62:	97 fd       	sbrc	r25, 7
     d64:	b0 95       	com	r27
     d66:	ab 2f       	mov	r26, r27
	bmp180_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     d68:	88 0d       	add	r24, r8
     d6a:	99 1d       	adc	r25, r9
     d6c:	aa 1d       	adc	r26, r10
     d6e:	bb 1d       	adc	r27, r11
     d70:	81 53       	subi	r24, 0x31	; 49
     d72:	91 4f       	sbci	r25, 0xF1	; 241
     d74:	af 4f       	sbci	r26, 0xFF	; 255
     d76:	bf 4f       	sbci	r27, 0xFF	; 255
     d78:	68 94       	set
     d7a:	13 f8       	bld	r1, 3
     d7c:	b5 95       	asr	r27
     d7e:	a7 95       	ror	r26
     d80:	97 95       	ror	r25
     d82:	87 95       	ror	r24
     d84:	16 94       	lsr	r1
     d86:	d1 f7       	brne	.-12     	; 0xd7c <_ZN6BMP18018bmp180_getpressureEv+0x270>
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	6c 0d       	add	r22, r12
     d8e:	7d 1d       	adc	r23, r13
     d90:	8e 1d       	adc	r24, r14
     d92:	9f 1d       	adc	r25, r15
     d94:	d8 01       	movw	r26, r16
     d96:	96 96       	adiw	r26, 0x26	; 38
     d98:	6d 93       	st	X+, r22
     d9a:	7d 93       	st	X+, r23
     d9c:	8d 93       	st	X+, r24
     d9e:	9c 93       	st	X, r25
     da0:	99 97       	sbiw	r26, 0x29	; 41
	
	pressure = (bmp180_rawpressure+BMP180_UNITPAOFFSET)/100.0;
     da2:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__floatunsisf>
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	48 ec       	ldi	r20, 0xC8	; 200
     dac:	52 e4       	ldi	r21, 0x42	; 66
     dae:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
     db2:	f8 01       	movw	r30, r16
     db4:	60 83       	st	Z, r22
     db6:	71 83       	std	Z+1, r23	; 0x01
     db8:	82 83       	std	Z+2, r24	; 0x02
     dba:	93 83       	std	Z+3, r25	; 0x03
	
}
     dbc:	2b 96       	adiw	r28, 0x0b	; 11
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	bf 90       	pop	r11
     dda:	af 90       	pop	r10
     ddc:	9f 90       	pop	r9
     dde:	8f 90       	pop	r8
     de0:	7f 90       	pop	r7
     de2:	6f 90       	pop	r6
     de4:	5f 90       	pop	r5
     de6:	4f 90       	pop	r4
     de8:	08 95       	ret

00000dea <_ZN6BMP18018bmp180_getaltitudeEv>:

void BMP180::bmp180_getaltitude(){
	bmp180_getpressure();
     dea:	90 ce       	rjmp	.-736    	; 0xb0c <_ZN6BMP18018bmp180_getpressureEv>
     dec:	08 95       	ret

00000dee <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
     dee:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5));// | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
     df0:	84 b1       	in	r24, 0x04	; 4
     df2:	8f 75       	andi	r24, 0x5F	; 95
     df4:	84 b9       	out	0x04, r24	; 4
	CS_HIGH();
     df6:	2c 9a       	sbi	0x05, 4	; 5
     df8:	08 95       	ret

00000dfa <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     dfa:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     dfc:	0d b4       	in	r0, 0x2d	; 45
     dfe:	07 fe       	sbrs	r0, 7
     e00:	fd cf       	rjmp	.-6      	; 0xdfc <xchg_spi+0x2>
	return SPDR;
     e02:	8e b5       	in	r24, 0x2e	; 46
}
     e04:	08 95       	ret

00000e06 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     e06:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	f7 cf       	rjmp	.-18     	; 0xdfa <xchg_spi>
     e0c:	08 95       	ret

00000e0e <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     e0e:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	f3 df       	rcall	.-26     	; 0xdfa <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
     e14:	82 e3       	ldi	r24, 0x32	; 50
     e16:	80 93 23 04 	sts	0x0423, r24
	do{
		d = xchg_spi(0xFF);
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	ee df       	rcall	.-36     	; 0xdfa <xchg_spi>
	}while (d != 0xFF && Timer2);
     e1e:	8f 3f       	cpi	r24, 0xFF	; 255
     e20:	41 f0       	breq	.+16     	; 0xe32 <select+0x24>
     e22:	80 91 23 04 	lds	r24, 0x0423
     e26:	81 11       	cpse	r24, r1
     e28:	f8 cf       	rjmp	.-16     	; 0xe1a <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
     e2a:	ed df       	rcall	.-38     	; 0xe06 <deselect>
	return 0;	/* Timeout */
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     e36:	08 95       	ret

00000e38 <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ec 01       	movw	r28, r24
     e42:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     e44:	84 e1       	ldi	r24, 0x14	; 20
     e46:	80 93 24 04 	sts	0x0424, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	d6 df       	rcall	.-84     	; 0xdfa <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	39 f4       	brne	.+14     	; 0xe60 <rcvr_datablock+0x28>
     e52:	90 91 24 04 	lds	r25, 0x0424
     e56:	91 11       	cpse	r25, r1
     e58:	f8 cf       	rjmp	.-16     	; 0xe4a <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	20 c0       	rjmp	.+64     	; 0xea0 <rcvr_datablock+0x68>
     e60:	8e 3f       	cpi	r24, 0xFE	; 254
     e62:	e1 f4       	brne	.+56     	; 0xe9c <rcvr_datablock+0x64>
void rcvr_spi_multi (
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	cli();
     e64:	f8 94       	cli
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	8e bd       	out	0x2e, r24	; 46
     e6a:	0d b4       	in	r0, 0x2d	; 45
     e6c:	07 fe       	sbrs	r0, 7
     e6e:	fd cf       	rjmp	.-6      	; 0xe6a <rcvr_datablock+0x32>
     e70:	9e b5       	in	r25, 0x2e	; 46
     e72:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     e74:	8e bd       	out	0x2e, r24	; 46
     e76:	0d b4       	in	r0, 0x2d	; 45
     e78:	07 fe       	sbrs	r0, 7
     e7a:	fd cf       	rjmp	.-6      	; 0xe76 <rcvr_datablock+0x3e>
     e7c:	22 96       	adiw	r28, 0x02	; 2
     e7e:	9e b5       	in	r25, 0x2e	; 46
     e80:	fe 01       	movw	r30, r28
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	90 83       	st	Z, r25
	} while (cnt -= 2);
     e86:	02 50       	subi	r16, 0x02	; 2
     e88:	11 09       	sbc	r17, r1
     e8a:	71 f7       	brne	.-36     	; 0xe68 <rcvr_datablock+0x30>
	sei();
     e8c:	78 94       	sei
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	b4 df       	rcall	.-152    	; 0xdfa <xchg_spi>
	xchg_spi(0xFF);
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	b2 df       	rcall	.-156    	; 0xdfa <xchg_spi>

	return 1;						/* Return with success */
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <rcvr_datablock+0x68>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	c8 2f       	mov	r28, r24
     eb6:	d4 2f       	mov	r29, r20
     eb8:	15 2f       	mov	r17, r21
     eba:	06 2f       	mov	r16, r22
     ebc:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     ebe:	88 23       	and	r24, r24
     ec0:	4c f4       	brge	.+18     	; 0xed4 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	ba 01       	movw	r22, r20
     ec8:	87 e3       	ldi	r24, 0x37	; 55
     eca:	ef df       	rcall	.-34     	; 0xeaa <send_cmd>
		if (res > 1) return res;
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	08 f0       	brcs	.+2      	; 0xed2 <send_cmd+0x28>
     ed0:	3c c0       	rjmp	.+120    	; 0xf4a <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     ed2:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     ed4:	cc 30       	cpi	r28, 0x0C	; 12
     ed6:	f1 f0       	breq	.+60     	; 0xf14 <send_cmd+0x6a>
		deselect();
     ed8:	96 df       	rcall	.-212    	; 0xe06 <deselect>
		if (!select()) return 0xFF;
     eda:	99 df       	rcall	.-206    	; 0xe0e <select>
     edc:	89 2b       	or	r24, r25
     ede:	c1 f0       	breq	.+48     	; 0xf10 <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     ee0:	8c 2f       	mov	r24, r28
     ee2:	80 64       	ori	r24, 0x40	; 64
     ee4:	8a df       	rcall	.-236    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     ee6:	8f 2d       	mov	r24, r15
     ee8:	88 df       	rcall	.-240    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     eea:	80 2f       	mov	r24, r16
     eec:	86 df       	rcall	.-244    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     eee:	81 2f       	mov	r24, r17
     ef0:	84 df       	rcall	.-248    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     ef2:	8d 2f       	mov	r24, r29
     ef4:	82 df       	rcall	.-252    	; 0xdfa <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     ef6:	cc 23       	and	r28, r28
     ef8:	29 f1       	breq	.+74     	; 0xf44 <send_cmd+0x9a>
     efa:	21 c0       	rjmp	.+66     	; 0xf3e <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	7d df       	rcall	.-262    	; 0xdfa <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     f00:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	7a df       	rcall	.-268    	; 0xdfa <xchg_spi>
	while ((res & 0x80) && --n);
     f06:	88 23       	and	r24, r24
     f08:	04 f5       	brge	.+64     	; 0xf4a <send_cmd+0xa0>
     f0a:	c1 50       	subi	r28, 0x01	; 1
     f0c:	d1 f7       	brne	.-12     	; 0xf02 <send_cmd+0x58>
     f0e:	1d c0       	rjmp	.+58     	; 0xf4a <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	1b c0       	rjmp	.+54     	; 0xf4a <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     f14:	8c e4       	ldi	r24, 0x4C	; 76
     f16:	71 df       	rcall	.-286    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     f18:	8f 2d       	mov	r24, r15
     f1a:	6f df       	rcall	.-290    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     f1c:	80 2f       	mov	r24, r16
     f1e:	6d df       	rcall	.-294    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     f20:	81 2f       	mov	r24, r17
     f22:	6b df       	rcall	.-298    	; 0xdfa <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     f24:	8d 2f       	mov	r24, r29
     f26:	69 df       	rcall	.-302    	; 0xdfa <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	67 df       	rcall	.-306    	; 0xdfa <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     f2c:	cc 30       	cpi	r28, 0x0C	; 12
     f2e:	31 f3       	breq	.-52     	; 0xefc <send_cmd+0x52>
     f30:	e7 cf       	rjmp	.-50     	; 0xf00 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     f32:	87 e8       	ldi	r24, 0x87	; 135
     f34:	62 df       	rcall	.-316    	; 0xdfa <xchg_spi>
     f36:	e4 cf       	rjmp	.-56     	; 0xf00 <send_cmd+0x56>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	5f df       	rcall	.-322    	; 0xdfa <xchg_spi>
     f3c:	e1 cf       	rjmp	.-62     	; 0xf00 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     f3e:	c8 30       	cpi	r28, 0x08	; 8
     f40:	c1 f3       	breq	.-16     	; 0xf32 <send_cmd+0x88>
     f42:	fa cf       	rjmp	.-12     	; 0xf38 <send_cmd+0x8e>
	xchg_spi(n);
     f44:	85 e9       	ldi	r24, 0x95	; 149
     f46:	59 df       	rcall	.-334    	; 0xdfa <xchg_spi>
     f48:	db cf       	rjmp	.-74     	; 0xf00 <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	08 95       	ret

00000f56 <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
     f5e:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
     f60:	92 e3       	ldi	r25, 0x32	; 50
     f62:	90 93 23 04 	sts	0x0423, r25
	do{
		d = xchg_spi(0xFF);
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	48 df       	rcall	.-368    	; 0xdfa <xchg_spi>
	}while (d != 0xFF && Timer2);
     f6a:	8f 3f       	cpi	r24, 0xFF	; 255
     f6c:	31 f0       	breq	.+12     	; 0xf7a <xmit_datablock+0x24>
     f6e:	90 91 23 04 	lds	r25, 0x0423
     f72:	91 11       	cpse	r25, r1
     f74:	f8 cf       	rjmp	.-16     	; 0xf66 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	28 c0       	rjmp	.+80     	; 0xfca <xmit_datablock+0x74>

	xchg_spi(token);					/* Xmit data token */
     f7a:	81 2f       	mov	r24, r17
     f7c:	3e df       	rcall	.-388    	; 0xdfa <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     f7e:	1d 3f       	cpi	r17, 0xFD	; 253
     f80:	11 f1       	breq	.+68     	; 0xfc6 <xmit_datablock+0x70>
void xmit_spi_multi (
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	cli();
     f82:	f8 94       	cli
     f84:	9e 01       	movw	r18, r28
     f86:	3e 5f       	subi	r19, 0xFE	; 254
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     f88:	88 81       	ld	r24, Y
     f8a:	8e bd       	out	0x2e, r24	; 46
     f8c:	0d b4       	in	r0, 0x2d	; 45
     f8e:	07 fe       	sbrs	r0, 7
     f90:	fd cf       	rjmp	.-6      	; 0xf8c <xmit_datablock+0x36>
     f92:	22 96       	adiw	r28, 0x02	; 2
     f94:	fe 01       	movw	r30, r28
     f96:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     f98:	80 81       	ld	r24, Z
     f9a:	8e bd       	out	0x2e, r24	; 46
     f9c:	0d b4       	in	r0, 0x2d	; 45
     f9e:	07 fe       	sbrs	r0, 7
     fa0:	fd cf       	rjmp	.-6      	; 0xf9c <xmit_datablock+0x46>
	} while (cnt -= 2);
     fa2:	2c 17       	cp	r18, r28
     fa4:	3d 07       	cpc	r19, r29
     fa6:	81 f7       	brne	.-32     	; 0xf88 <xmit_datablock+0x32>
	sei();
     fa8:	78 94       	sei
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, CLUSTERSIZE);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	26 df       	rcall	.-436    	; 0xdfa <xchg_spi>
		xchg_spi(0xFF);
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	24 df       	rcall	.-440    	; 0xdfa <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	22 df       	rcall	.-444    	; 0xdfa <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     fb6:	28 2f       	mov	r18, r24
     fb8:	2f 71       	andi	r18, 0x1F	; 31
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	25 30       	cpi	r18, 0x05	; 5
     fc0:	21 f0       	breq	.+8      	; 0xfca <xmit_datablock+0x74>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <xmit_datablock+0x74>
		return 0;
	}

	return 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	08 95       	ret

00000fd2 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <disk_initialize+0x12>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <disk_initialize+0x14>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
     fea:	81 11       	cpse	r24, r1
     fec:	9b c0       	rjmp	.+310    	; 0x1124 <disk_initialize+0x152>
	power_off();						/* Turn off the socket power to reset the card */
     fee:	ff de       	rcall	.-514    	; 0xdee <power_off>
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
     ff0:	80 91 06 01 	lds	r24, 0x0106
     ff4:	82 ff       	sbrs	r24, 2
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <disk_initialize+0x2c>
     ff8:	80 91 06 01 	lds	r24, 0x0106
     ffc:	9e c0       	rjmp	.+316    	; 0x113a <disk_initialize+0x168>

static
void power_on (void)
{
	//PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
	DDRB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
     ffe:	84 b1       	in	r24, 0x04	; 4
    1000:	80 6b       	ori	r24, 0xB0	; 176
    1002:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PORTB6);
    1004:	26 98       	cbi	0x04, 6	; 4
	CS_HIGH();
    1006:	2c 9a       	sbi	0x05, 4	; 5

	SPSR = 0x01;			/* SPI 2x mode */
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	8d bd       	out	0x2d, r24	; 45
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    100c:	82 e5       	ldi	r24, 0x52	; 82
    100e:	8c bd       	out	0x2c, r24	; 44
    1010:	1a e0       	ldi	r17, 0x0A	; 10
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
//	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	f2 de       	rcall	.-540    	; 0xdfa <xchg_spi>
    1016:	11 50       	subi	r17, 0x01	; 1
    1018:	e1 f7       	brne	.-8      	; 0x1012 <disk_initialize+0x40>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	ba 01       	movw	r22, r20
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	43 df       	rcall	.-378    	; 0xeaa <send_cmd>
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	09 f0       	breq	.+2      	; 0x102a <disk_initialize+0x58>
    1028:	84 c0       	rjmp	.+264    	; 0x1132 <disk_initialize+0x160>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    102a:	84 e6       	ldi	r24, 0x64	; 100
    102c:	80 93 24 04 	sts	0x0424, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    1030:	4a ea       	ldi	r20, 0xAA	; 170
    1032:	51 e0       	ldi	r21, 0x01	; 1
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	37 df       	rcall	.-402    	; 0xeaa <send_cmd>
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	09 f0       	breq	.+2      	; 0x1042 <disk_initialize+0x70>
    1040:	3f c0       	rjmp	.+126    	; 0x10c0 <disk_initialize+0xee>
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	6c 01       	movw	r12, r24
    1048:	7e 01       	movw	r14, r28
    104a:	95 e0       	ldi	r25, 0x05	; 5
    104c:	e9 0e       	add	r14, r25
    104e:	f1 1c       	adc	r15, r1
    1050:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	d2 de       	rcall	.-604    	; 0xdfa <xchg_spi>
    1056:	f8 01       	movw	r30, r16
    1058:	81 93       	st	Z+, r24
    105a:	8f 01       	movw	r16, r30
    105c:	ee 15       	cp	r30, r14
    105e:	ff 05       	cpc	r31, r15
    1060:	c1 f7       	brne	.-16     	; 0x1052 <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	09 f0       	breq	.+2      	; 0x106a <disk_initialize+0x98>
    1068:	64 c0       	rjmp	.+200    	; 0x1132 <disk_initialize+0x160>
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	8a 3a       	cpi	r24, 0xAA	; 170
    106e:	09 f0       	breq	.+2      	; 0x1072 <disk_initialize+0xa0>
    1070:	60 c0       	rjmp	.+192    	; 0x1132 <disk_initialize+0x160>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1072:	80 91 24 04 	lds	r24, 0x0424
    1076:	88 23       	and	r24, r24
    1078:	41 f0       	breq	.+16     	; 0x108a <disk_initialize+0xb8>
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e4       	ldi	r23, 0x40	; 64
    1082:	89 ea       	ldi	r24, 0xA9	; 169
    1084:	12 df       	rcall	.-476    	; 0xeaa <send_cmd>
    1086:	81 11       	cpse	r24, r1
    1088:	f4 cf       	rjmp	.-24     	; 0x1072 <disk_initialize+0xa0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    108a:	80 91 24 04 	lds	r24, 0x0424
    108e:	88 23       	and	r24, r24
    1090:	09 f4       	brne	.+2      	; 0x1094 <disk_initialize+0xc2>
    1092:	4f c0       	rjmp	.+158    	; 0x1132 <disk_initialize+0x160>
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	ba 01       	movw	r22, r20
    109a:	8a e3       	ldi	r24, 0x3A	; 58
    109c:	06 df       	rcall	.-500    	; 0xeaa <send_cmd>
    109e:	81 11       	cpse	r24, r1
    10a0:	48 c0       	rjmp	.+144    	; 0x1132 <disk_initialize+0x160>
    10a2:	76 01       	movw	r14, r12
    10a4:	14 e0       	ldi	r17, 0x04	; 4
    10a6:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	a7 de       	rcall	.-690    	; 0xdfa <xchg_spi>
    10ac:	f7 01       	movw	r30, r14
    10ae:	81 93       	st	Z+, r24
    10b0:	7f 01       	movw	r14, r30
    10b2:	1e 13       	cpse	r17, r30
    10b4:	f9 cf       	rjmp	.-14     	; 0x10a8 <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	86 fd       	sbrc	r24, 6
    10ba:	36 c0       	rjmp	.+108    	; 0x1128 <disk_initialize+0x156>
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	35 c0       	rjmp	.+106    	; 0x112a <disk_initialize+0x158>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	ba 01       	movw	r22, r20
    10c6:	89 ea       	ldi	r24, 0xA9	; 169
    10c8:	f0 de       	rcall	.-544    	; 0xeaa <send_cmd>
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	18 f0       	brcs	.+6      	; 0x10d4 <disk_initialize+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    10ce:	01 e0       	ldi	r16, 0x01	; 1
    10d0:	11 e0       	ldi	r17, 0x01	; 1
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <disk_initialize+0x106>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    10d4:	02 e0       	ldi	r16, 0x02	; 2
    10d6:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    10d8:	90 91 24 04 	lds	r25, 0x0424
    10dc:	99 23       	and	r25, r25
    10de:	39 f0       	breq	.+14     	; 0x10ee <disk_initialize+0x11c>
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	ba 01       	movw	r22, r20
    10e6:	81 2f       	mov	r24, r17
    10e8:	e0 de       	rcall	.-576    	; 0xeaa <send_cmd>
    10ea:	81 11       	cpse	r24, r1
    10ec:	f5 cf       	rjmp	.-22     	; 0x10d8 <disk_initialize+0x106>
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
    10ee:	80 91 24 04 	lds	r24, 0x0424
    10f2:	88 23       	and	r24, r24
    10f4:	f1 f0       	breq	.+60     	; 0x1132 <disk_initialize+0x160>
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	52 e0       	ldi	r21, 0x02	; 2
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 e1       	ldi	r24, 0x10	; 16
    1100:	d4 de       	rcall	.-600    	; 0xeaa <send_cmd>
    1102:	81 11       	cpse	r24, r1
    1104:	16 c0       	rjmp	.+44     	; 0x1132 <disk_initialize+0x160>
				ty = 0;
		}
	}
	CardType = ty;
    1106:	00 93 22 04 	sts	0x0422, r16
	deselect();
    110a:	7d de       	rcall	.-774    	; 0xe06 <deselect>

	if (ty) {			/* Initialization succeded */
    110c:	00 23       	and	r16, r16
    110e:	31 f0       	breq	.+12     	; 0x111c <disk_initialize+0x14a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    1110:	80 91 06 01 	lds	r24, 0x0106
    1114:	8e 7f       	andi	r24, 0xFE	; 254
    1116:	80 93 06 01 	sts	0x0106, r24
    111a:	01 c0       	rjmp	.+2      	; 0x111e <disk_initialize+0x14c>
//		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    111c:	68 de       	rcall	.-816    	; 0xdee <power_off>
	}

	return Stat;
    111e:	80 91 06 01 	lds	r24, 0x0106
    1122:	0b c0       	rjmp	.+22     	; 0x113a <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	09 c0       	rjmp	.+18     	; 0x113a <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    1128:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    112a:	80 93 22 04 	sts	0x0422, r24
	deselect();
    112e:	6b de       	rcall	.-810    	; 0xe06 <deselect>
    1130:	ef cf       	rjmp	.-34     	; 0x1110 <disk_initialize+0x13e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1132:	10 92 22 04 	sts	0x0422, r1
	deselect();
    1136:	67 de       	rcall	.-818    	; 0xe06 <deselect>
    1138:	f1 cf       	rjmp	.-30     	; 0x111c <disk_initialize+0x14a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	08 95       	ret

00001154 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1154:	81 11       	cpse	r24, r1
    1156:	03 c0       	rjmp	.+6      	; 0x115e <disk_status+0xa>
	return Stat;
    1158:	80 91 06 01 	lds	r24, 0x0106
    115c:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    115e:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    1160:	08 95       	ret

00001162 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    116e:	81 11       	cpse	r24, r1
    1170:	3f c0       	rjmp	.+126    	; 0x11f0 <disk_read+0x8e>
    1172:	01 15       	cp	r16, r1
    1174:	11 05       	cpc	r17, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <disk_read+0x18>
    1178:	3d c0       	rjmp	.+122    	; 0x11f4 <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    117a:	80 91 06 01 	lds	r24, 0x0106
    117e:	80 fd       	sbrc	r24, 0
    1180:	3b c0       	rjmp	.+118    	; 0x11f8 <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    1182:	80 91 22 04 	lds	r24, 0x0422
    1186:	83 fd       	sbrc	r24, 3
    1188:	09 c0       	rjmp	.+18     	; 0x119c <disk_read+0x3a>
    118a:	01 2e       	mov	r0, r17
    118c:	19 e0       	ldi	r17, 0x09	; 9
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	44 1f       	adc	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	1a 95       	dec	r17
    1198:	d1 f7       	brne	.-12     	; 0x118e <disk_read+0x2c>
    119a:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    119c:	02 30       	cpi	r16, 0x02	; 2
    119e:	11 05       	cpc	r17, r1
    11a0:	28 f4       	brcc	.+10     	; 0x11ac <disk_read+0x4a>
    11a2:	0f 2e       	mov	r0, r31
    11a4:	f1 e1       	ldi	r31, 0x11	; 17
    11a6:	ff 2e       	mov	r15, r31
    11a8:	f0 2d       	mov	r31, r0
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <disk_read+0x52>
    11ac:	0f 2e       	mov	r0, r31
    11ae:	f2 e1       	ldi	r31, 0x12	; 18
    11b0:	ff 2e       	mov	r15, r31
    11b2:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    11b4:	ba 01       	movw	r22, r20
    11b6:	a9 01       	movw	r20, r18
    11b8:	8f 2d       	mov	r24, r15
    11ba:	77 de       	rcall	.-786    	; 0xeaa <send_cmd>
    11bc:	81 11       	cpse	r24, r1
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, CLUSTERSIZE)) break;
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	72 e0       	ldi	r23, 0x02	; 2
    11c4:	ce 01       	movw	r24, r28
    11c6:	38 de       	rcall	.-912    	; 0xe38 <rcvr_datablock>
    11c8:	89 2b       	or	r24, r25
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <disk_read+0x72>
			buff += CLUSTERSIZE;
    11cc:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    11ce:	01 50       	subi	r16, 0x01	; 1
    11d0:	11 09       	sbc	r17, r1
    11d2:	b1 f7       	brne	.-20     	; 0x11c0 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    11d4:	82 e1       	ldi	r24, 0x12	; 18
    11d6:	f8 12       	cpse	r15, r24
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <disk_read+0x82>
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	ba 01       	movw	r22, r20
    11e0:	8c e0       	ldi	r24, 0x0C	; 12
    11e2:	63 de       	rcall	.-826    	; 0xeaa <send_cmd>
	}
	deselect();
    11e4:	10 de       	rcall	.-992    	; 0xe06 <deselect>

	return count ? RES_ERROR : RES_OK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	01 2b       	or	r16, r17
    11ea:	39 f4       	brne	.+14     	; 0x11fa <disk_read+0x98>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    11f0:	84 e0       	ldi	r24, 0x04	; 4
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <disk_read+0x98>
    11f4:	84 e0       	ldi	r24, 0x04	; 4
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    11f8:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	08 95       	ret

00001206 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	eb 01       	movw	r28, r22
    1218:	69 01       	movw	r12, r18
    121a:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    121c:	81 11       	cpse	r24, r1
    121e:	51 c0       	rjmp	.+162    	; 0x12c2 <disk_write+0xbc>
    1220:	01 15       	cp	r16, r1
    1222:	11 05       	cpc	r17, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <disk_write+0x22>
    1226:	4f c0       	rjmp	.+158    	; 0x12c6 <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1228:	80 91 06 01 	lds	r24, 0x0106
    122c:	80 fd       	sbrc	r24, 0
    122e:	4d c0       	rjmp	.+154    	; 0x12ca <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1230:	80 91 06 01 	lds	r24, 0x0106
    1234:	82 fd       	sbrc	r24, 2
    1236:	4b c0       	rjmp	.+150    	; 0x12ce <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    1238:	80 91 22 04 	lds	r24, 0x0422
    123c:	83 fd       	sbrc	r24, 3
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <disk_write+0x4c>
    1240:	0b 2e       	mov	r0, r27
    1242:	b9 e0       	ldi	r27, 0x09	; 9
    1244:	cc 0c       	add	r12, r12
    1246:	dd 1c       	adc	r13, r13
    1248:	ee 1c       	adc	r14, r14
    124a:	ff 1c       	adc	r15, r15
    124c:	ba 95       	dec	r27
    124e:	d1 f7       	brne	.-12     	; 0x1244 <disk_write+0x3e>
    1250:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    1252:	01 30       	cpi	r16, 0x01	; 1
    1254:	11 05       	cpc	r17, r1
    1256:	89 f4       	brne	.+34     	; 0x127a <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    1258:	b7 01       	movw	r22, r14
    125a:	a6 01       	movw	r20, r12
    125c:	88 e1       	ldi	r24, 0x18	; 24
    125e:	25 de       	rcall	.-950    	; 0xeaa <send_cmd>
    1260:	81 11       	cpse	r24, r1
    1262:	29 c0       	rjmp	.+82     	; 0x12b6 <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    1264:	6e ef       	ldi	r22, 0xFE	; 254
    1266:	ce 01       	movw	r24, r28
    1268:	76 de       	rcall	.-788    	; 0xf56 <xmit_datablock>
    126a:	31 e0       	ldi	r19, 0x01	; 1
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	89 2b       	or	r24, r25
    1270:	09 f0       	breq	.+2      	; 0x1274 <disk_write+0x6e>
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	03 2f       	mov	r16, r19
    1276:	12 2f       	mov	r17, r18
    1278:	1e c0       	rjmp	.+60     	; 0x12b6 <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    127a:	86 70       	andi	r24, 0x06	; 6
    127c:	29 f0       	breq	.+10     	; 0x1288 <disk_write+0x82>
    127e:	a8 01       	movw	r20, r16
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	87 e9       	ldi	r24, 0x97	; 151
    1286:	11 de       	rcall	.-990    	; 0xeaa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1288:	b7 01       	movw	r22, r14
    128a:	a6 01       	movw	r20, r12
    128c:	89 e1       	ldi	r24, 0x19	; 25
    128e:	0d de       	rcall	.-998    	; 0xeaa <send_cmd>
    1290:	81 11       	cpse	r24, r1
    1292:	11 c0       	rjmp	.+34     	; 0x12b6 <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1294:	6c ef       	ldi	r22, 0xFC	; 252
    1296:	ce 01       	movw	r24, r28
    1298:	5e de       	rcall	.-836    	; 0xf56 <xmit_datablock>
    129a:	89 2b       	or	r24, r25
    129c:	21 f0       	breq	.+8      	; 0x12a6 <disk_write+0xa0>
				buff += CLUSTERSIZE;
    129e:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    12a0:	01 50       	subi	r16, 0x01	; 1
    12a2:	11 09       	sbc	r17, r1
    12a4:	b9 f7       	brne	.-18     	; 0x1294 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    12a6:	6d ef       	ldi	r22, 0xFD	; 253
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	54 de       	rcall	.-856    	; 0xf56 <xmit_datablock>
    12ae:	89 2b       	or	r24, r25
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <disk_write+0xb0>
				count = 1;
    12b2:	01 e0       	ldi	r16, 0x01	; 1
    12b4:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    12b6:	a7 dd       	rcall	.-1202   	; 0xe06 <deselect>

	return count ? RES_ERROR : RES_OK;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	01 2b       	or	r16, r17
    12bc:	49 f4       	brne	.+18     	; 0x12d0 <disk_write+0xca>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	07 c0       	rjmp	.+14     	; 0x12d0 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <disk_write+0xca>
    12c6:	84 e0       	ldi	r24, 0x04	; 4
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    12ce:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret

000012e2 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	60 97       	sbiw	r28, 0x10	; 16
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    12fe:	81 11       	cpse	r24, r1
    1300:	7c c1       	rjmp	.+760    	; 0x15fa <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1302:	80 91 06 01 	lds	r24, 0x0106
    1306:	80 fd       	sbrc	r24, 0
    1308:	7a c1       	rjmp	.+756    	; 0x15fe <disk_ioctl+0x31c>
    130a:	7a 01       	movw	r14, r20

	switch (cmd) {
    130c:	06 2f       	mov	r16, r22
    130e:	10 e0       	ldi	r17, 0x00	; 0
    1310:	07 33       	cpi	r16, 0x37	; 55
    1312:	11 05       	cpc	r17, r1
    1314:	08 f0       	brcs	.+2      	; 0x1318 <disk_ioctl+0x36>
    1316:	59 c1       	rjmp	.+690    	; 0x15ca <disk_ioctl+0x2e8>
    1318:	f8 01       	movw	r30, r16
    131a:	ea 5b       	subi	r30, 0xBA	; 186
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	0c 94 15 46 	jmp	0x8c2a	; 0x8c2a <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    1322:	75 dd       	rcall	.-1302   	; 0xe0e <select>
    1324:	11 e0       	ldi	r17, 0x01	; 1
    1326:	89 2b       	or	r24, r25
    1328:	09 f4       	brne	.+2      	; 0x132c <disk_ioctl+0x4a>
    132a:	64 c1       	rjmp	.+712    	; 0x15f4 <disk_ioctl+0x312>
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	62 c1       	rjmp	.+708    	; 0x15f4 <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	ba 01       	movw	r22, r20
    1336:	89 e0       	ldi	r24, 0x09	; 9
    1338:	b8 dd       	rcall	.-1168   	; 0xeaa <send_cmd>
    133a:	81 11       	cpse	r24, r1
    133c:	48 c1       	rjmp	.+656    	; 0x15ce <disk_ioctl+0x2ec>
    133e:	60 e1       	ldi	r22, 0x10	; 16
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	ce 01       	movw	r24, r28
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	78 dd       	rcall	.-1296   	; 0xe38 <rcvr_datablock>
    1348:	89 2b       	or	r24, r25
    134a:	09 f4       	brne	.+2      	; 0x134e <disk_ioctl+0x6c>
    134c:	42 c1       	rjmp	.+644    	; 0x15d2 <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	82 95       	swap	r24
    1352:	86 95       	lsr	r24
    1354:	86 95       	lsr	r24
    1356:	83 70       	andi	r24, 0x03	; 3
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	31 f5       	brne	.+76     	; 0x13a8 <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    135c:	88 85       	ldd	r24, Y+8	; 0x08
    135e:	8f 73       	andi	r24, 0x3F	; 63
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a0 e0       	ldi	r26, 0x00	; 0
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	dc 01       	movw	r26, r24
    1368:	99 27       	eor	r25, r25
    136a:	88 27       	eor	r24, r24
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	a1 1d       	adc	r26, r1
    1370:	b1 1d       	adc	r27, r1
    1372:	29 85       	ldd	r18, Y+9	; 0x09
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	32 2f       	mov	r19, r18
    1378:	22 27       	eor	r18, r18
    137a:	4a 85       	ldd	r20, Y+10	; 0x0a
    137c:	24 0f       	add	r18, r20
    137e:	31 1d       	adc	r19, r1
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	a1 1d       	adc	r26, r1
    1386:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    1388:	07 2e       	mov	r0, r23
    138a:	7a e0       	ldi	r23, 0x0A	; 10
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	aa 1f       	adc	r26, r26
    1392:	bb 1f       	adc	r27, r27
    1394:	7a 95       	dec	r23
    1396:	d1 f7       	brne	.-12     	; 0x138c <disk_ioctl+0xaa>
    1398:	70 2d       	mov	r23, r0
    139a:	f7 01       	movw	r30, r14
    139c:	80 83       	st	Z, r24
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	a2 83       	std	Z+2, r26	; 0x02
    13a2:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    13a4:	10 e0       	ldi	r17, 0x00	; 0
    13a6:	26 c1       	rjmp	.+588    	; 0x15f4 <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	82 95       	swap	r24
    13ac:	86 95       	lsr	r24
    13ae:	86 95       	lsr	r24
    13b0:	83 70       	andi	r24, 0x03	; 3
    13b2:	28 85       	ldd	r18, Y+8	; 0x08
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	f4 e0       	ldi	r31, 0x04	; 4
    13b8:	2f 9f       	mul	r18, r31
    13ba:	80 0d       	add	r24, r0
    13bc:	91 1d       	adc	r25, r1
    13be:	11 24       	eor	r1, r1
    13c0:	9c 01       	movw	r18, r24
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	8f 81       	ldd	r24, Y+7	; 0x07
    13c8:	83 70       	andi	r24, 0x03	; 3
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	98 2f       	mov	r25, r24
    13ce:	88 27       	eor	r24, r24
    13d0:	99 0f       	add	r25, r25
    13d2:	99 0f       	add	r25, r25
    13d4:	82 0f       	add	r24, r18
    13d6:	93 1f       	adc	r25, r19
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    13dc:	3e 81       	ldd	r19, Y+6	; 0x06
    13de:	3f 70       	andi	r19, 0x0F	; 15
    13e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    13e2:	22 1f       	adc	r18, r18
    13e4:	22 27       	eor	r18, r18
    13e6:	22 1f       	adc	r18, r18
    13e8:	32 0f       	add	r19, r18
    13ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    13ec:	23 70       	andi	r18, 0x03	; 3
    13ee:	22 0f       	add	r18, r18
    13f0:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    13f2:	27 50       	subi	r18, 0x07	; 7
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <disk_ioctl+0x11c>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	aa 1f       	adc	r26, r26
    13fc:	bb 1f       	adc	r27, r27
    13fe:	2a 95       	dec	r18
    1400:	d2 f7       	brpl	.-12     	; 0x13f6 <disk_ioctl+0x114>
    1402:	f7 01       	movw	r30, r14
    1404:	80 83       	st	Z, r24
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	a2 83       	std	Z+2, r26	; 0x02
    140a:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    140c:	10 e0       	ldi	r17, 0x00	; 0
    140e:	f2 c0       	rjmp	.+484    	; 0x15f4 <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    1410:	10 91 22 04 	lds	r17, 0x0422
    1414:	12 ff       	sbrs	r17, 2
    1416:	2a c0       	rjmp	.+84     	; 0x146c <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	ba 01       	movw	r22, r20
    141e:	8d e8       	ldi	r24, 0x8D	; 141
    1420:	44 dd       	rcall	.-1400   	; 0xeaa <send_cmd>
    1422:	81 11       	cpse	r24, r1
    1424:	d8 c0       	rjmp	.+432    	; 0x15d6 <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	e8 dc       	rcall	.-1584   	; 0xdfa <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    142a:	60 e1       	ldi	r22, 0x10	; 16
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	02 dd       	rcall	.-1532   	; 0xe38 <rcvr_datablock>
    1434:	89 2b       	or	r24, r25
    1436:	09 f4       	brne	.+2      	; 0x143a <disk_ioctl+0x158>
    1438:	d0 c0       	rjmp	.+416    	; 0x15da <disk_ioctl+0x2f8>
    143a:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	dd dc       	rcall	.-1606   	; 0xdfa <xchg_spi>
    1440:	11 50       	subi	r17, 0x01	; 1
    1442:	e1 f7       	brne	.-8      	; 0x143c <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    1444:	2b 85       	ldd	r18, Y+11	; 0x0b
    1446:	22 95       	swap	r18
    1448:	2f 70       	andi	r18, 0x0F	; 15
    144a:	80 e1       	ldi	r24, 0x10	; 16
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	04 c0       	rjmp	.+8      	; 0x145c <disk_ioctl+0x17a>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	aa 1f       	adc	r26, r26
    145a:	bb 1f       	adc	r27, r27
    145c:	2a 95       	dec	r18
    145e:	d2 f7       	brpl	.-12     	; 0x1454 <disk_ioctl+0x172>
    1460:	f7 01       	movw	r30, r14
    1462:	80 83       	st	Z, r24
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	a2 83       	std	Z+2, r26	; 0x02
    1468:	b3 83       	std	Z+3, r27	; 0x03
    146a:	c4 c0       	rjmp	.+392    	; 0x15f4 <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	ba 01       	movw	r22, r20
    1472:	89 e0       	ldi	r24, 0x09	; 9
    1474:	1a dd       	rcall	.-1484   	; 0xeaa <send_cmd>
    1476:	81 11       	cpse	r24, r1
    1478:	b2 c0       	rjmp	.+356    	; 0x15de <disk_ioctl+0x2fc>
    147a:	60 e1       	ldi	r22, 0x10	; 16
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	da dc       	rcall	.-1612   	; 0xe38 <rcvr_datablock>
    1484:	89 2b       	or	r24, r25
    1486:	09 f4       	brne	.+2      	; 0x148a <disk_ioctl+0x1a8>
    1488:	ac c0       	rjmp	.+344    	; 0x15e2 <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
    148a:	11 ff       	sbrs	r17, 1
    148c:	20 c0       	rjmp	.+64     	; 0x14ce <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    148e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1490:	88 1f       	adc	r24, r24
    1492:	88 27       	eor	r24, r24
    1494:	88 1f       	adc	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	2b 85       	ldd	r18, Y+11	; 0x0b
    149c:	2f 73       	andi	r18, 0x3F	; 63
    149e:	82 0f       	add	r24, r18
    14a0:	91 1d       	adc	r25, r1
    14a2:	82 0f       	add	r24, r18
    14a4:	91 1d       	adc	r25, r1
    14a6:	2e 85       	ldd	r18, Y+14	; 0x0e
    14a8:	22 95       	swap	r18
    14aa:	26 95       	lsr	r18
    14ac:	26 95       	lsr	r18
    14ae:	23 70       	andi	r18, 0x03	; 3
    14b0:	21 50       	subi	r18, 0x01	; 1
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <disk_ioctl+0x1d6>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	2a 95       	dec	r18
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <disk_ioctl+0x1d2>
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	f7 01       	movw	r30, r14
    14c2:	80 83       	st	Z, r24
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	a2 83       	std	Z+2, r26	; 0x02
    14c8:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	93 c0       	rjmp	.+294    	; 0x15f4 <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    14ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d0:	28 2f       	mov	r18, r24
    14d2:	23 70       	andi	r18, 0x03	; 3
    14d4:	82 95       	swap	r24
    14d6:	86 95       	lsr	r24
    14d8:	87 70       	andi	r24, 0x07	; 7
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	f8 e0       	ldi	r31, 0x08	; 8
    14de:	2f 9f       	mul	r18, r31
    14e0:	80 0d       	add	r24, r0
    14e2:	91 1d       	adc	r25, r1
    14e4:	11 24       	eor	r1, r1
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ea:	2c 77       	andi	r18, 0x7C	; 124
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	35 95       	asr	r19
    14f0:	27 95       	ror	r18
    14f2:	35 95       	asr	r19
    14f4:	27 95       	ror	r18
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	82 9f       	mul	r24, r18
    14fc:	a0 01       	movw	r20, r0
    14fe:	83 9f       	mul	r24, r19
    1500:	50 0d       	add	r21, r0
    1502:	92 9f       	mul	r25, r18
    1504:	50 0d       	add	r21, r0
    1506:	11 24       	eor	r1, r1
    1508:	ca 01       	movw	r24, r20
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	f7 01       	movw	r30, r14
    1510:	80 83       	st	Z, r24
    1512:	91 83       	std	Z+1, r25	; 0x01
    1514:	a2 83       	std	Z+2, r26	; 0x02
    1516:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	6c c0       	rjmp	.+216    	; 0x15f4 <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    151c:	80 91 22 04 	lds	r24, 0x0422
    1520:	fa 01       	movw	r30, r20
    1522:	80 83       	st	Z, r24
		res = RES_OK;
    1524:	10 e0       	ldi	r17, 0x00	; 0
		break;
    1526:	66 c0       	rjmp	.+204    	; 0x15f4 <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	ba 01       	movw	r22, r20
    152e:	89 e0       	ldi	r24, 0x09	; 9
    1530:	bc dc       	rcall	.-1672   	; 0xeaa <send_cmd>
    1532:	81 11       	cpse	r24, r1
    1534:	58 c0       	rjmp	.+176    	; 0x15e6 <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
    1536:	60 e1       	ldi	r22, 0x10	; 16
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	c7 01       	movw	r24, r14
    153c:	7d dc       	rcall	.-1798   	; 0xe38 <rcvr_datablock>
    153e:	11 e0       	ldi	r17, 0x01	; 1
    1540:	89 2b       	or	r24, r25
    1542:	09 f4       	brne	.+2      	; 0x1546 <disk_ioctl+0x264>
    1544:	57 c0       	rjmp	.+174    	; 0x15f4 <disk_ioctl+0x312>
    1546:	10 e0       	ldi	r17, 0x00	; 0
    1548:	55 c0       	rjmp	.+170    	; 0x15f4 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	ba 01       	movw	r22, r20
    1550:	8a e0       	ldi	r24, 0x0A	; 10
    1552:	ab dc       	rcall	.-1706   	; 0xeaa <send_cmd>
    1554:	81 11       	cpse	r24, r1
    1556:	49 c0       	rjmp	.+146    	; 0x15ea <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
    1558:	60 e1       	ldi	r22, 0x10	; 16
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	c7 01       	movw	r24, r14
    155e:	6c dc       	rcall	.-1832   	; 0xe38 <rcvr_datablock>
    1560:	11 e0       	ldi	r17, 0x01	; 1
    1562:	89 2b       	or	r24, r25
    1564:	09 f4       	brne	.+2      	; 0x1568 <disk_ioctl+0x286>
    1566:	46 c0       	rjmp	.+140    	; 0x15f4 <disk_ioctl+0x312>
    1568:	10 e0       	ldi	r17, 0x00	; 0
    156a:	44 c0       	rjmp	.+136    	; 0x15f4 <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	ba 01       	movw	r22, r20
    1572:	8a e3       	ldi	r24, 0x3A	; 58
    1574:	9a dc       	rcall	.-1740   	; 0xeaa <send_cmd>
    1576:	81 11       	cpse	r24, r1
    1578:	3a c0       	rjmp	.+116    	; 0x15ee <disk_ioctl+0x30c>
    157a:	87 01       	movw	r16, r14
    157c:	f4 e0       	ldi	r31, 0x04	; 4
    157e:	ef 0e       	add	r14, r31
    1580:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	3a dc       	rcall	.-1932   	; 0xdfa <xchg_spi>
    1586:	f8 01       	movw	r30, r16
    1588:	81 93       	st	Z+, r24
    158a:	8f 01       	movw	r16, r30
    158c:	ee 15       	cp	r30, r14
    158e:	ff 05       	cpc	r31, r15
    1590:	c1 f7       	brne	.-16     	; 0x1582 <disk_ioctl+0x2a0>
			res = RES_OK;
    1592:	10 e0       	ldi	r17, 0x00	; 0
    1594:	2f c0       	rjmp	.+94     	; 0x15f4 <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	ba 01       	movw	r22, r20
    159c:	8d e8       	ldi	r24, 0x8D	; 141
    159e:	85 dc       	rcall	.-1782   	; 0xeaa <send_cmd>
    15a0:	81 11       	cpse	r24, r1
    15a2:	27 c0       	rjmp	.+78     	; 0x15f2 <disk_ioctl+0x310>
			xchg_spi(0xFF);
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	29 dc       	rcall	.-1966   	; 0xdfa <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    15a8:	60 e4       	ldi	r22, 0x40	; 64
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	c7 01       	movw	r24, r14
    15ae:	44 dc       	rcall	.-1912   	; 0xe38 <rcvr_datablock>
    15b0:	11 e0       	ldi	r17, 0x01	; 1
    15b2:	89 2b       	or	r24, r25
    15b4:	f9 f0       	breq	.+62     	; 0x15f4 <disk_ioctl+0x312>
    15b6:	10 e0       	ldi	r17, 0x00	; 0
    15b8:	1d c0       	rjmp	.+58     	; 0x15f4 <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    15ba:	19 dc       	rcall	.-1998   	; 0xdee <power_off>
		Stat |= STA_NOINIT;
    15bc:	80 91 06 01 	lds	r24, 0x0106
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	80 93 06 01 	sts	0x0106, r24
		res = RES_OK;
    15c6:	10 e0       	ldi	r17, 0x00	; 0
		break;
    15c8:	15 c0       	rjmp	.+42     	; 0x15f4 <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
    15ca:	14 e0       	ldi	r17, 0x04	; 4
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    15ce:	11 e0       	ldi	r17, 0x01	; 1
    15d0:	11 c0       	rjmp	.+34     	; 0x15f4 <disk_ioctl+0x312>
    15d2:	11 e0       	ldi	r17, 0x01	; 1
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <disk_ioctl+0x312>
    15d6:	11 e0       	ldi	r17, 0x01	; 1
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <disk_ioctl+0x312>
    15da:	11 e0       	ldi	r17, 0x01	; 1
    15dc:	0b c0       	rjmp	.+22     	; 0x15f4 <disk_ioctl+0x312>
    15de:	11 e0       	ldi	r17, 0x01	; 1
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <disk_ioctl+0x312>
    15e2:	11 e0       	ldi	r17, 0x01	; 1
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <disk_ioctl+0x312>
    15e6:	11 e0       	ldi	r17, 0x01	; 1
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <disk_ioctl+0x312>
    15ea:	11 e0       	ldi	r17, 0x01	; 1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <disk_ioctl+0x312>
    15ee:	11 e0       	ldi	r17, 0x01	; 1
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <disk_ioctl+0x312>
    15f2:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    15f4:	08 dc       	rcall	.-2032   	; 0xe06 <deselect>

	return res;
    15f6:	81 2f       	mov	r24, r17
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    15fe:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    1600:	60 96       	adiw	r28, 0x10	; 16
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	08 95       	ret

0000161a <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    161a:	80 91 24 04 	lds	r24, 0x0424
	if (n) Timer1 = --n;
    161e:	88 23       	and	r24, r24
    1620:	19 f0       	breq	.+6      	; 0x1628 <disk_timerproc+0xe>
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	80 93 24 04 	sts	0x0424, r24
	n = Timer2;
    1628:	80 91 23 04 	lds	r24, 0x0423
	if (n) Timer2 = --n;
    162c:	88 23       	and	r24, r24
    162e:	19 f0       	breq	.+6      	; 0x1636 <disk_timerproc+0x1c>
    1630:	81 50       	subi	r24, 0x01	; 1
    1632:	80 93 23 04 	sts	0x0423, r24
	
	s = Stat;
    1636:	80 91 06 01 	lds	r24, 0x0106
//	if (MMC_CD)				/* Card inserted */
//		s &= ~STA_NODISK;
//	else					/* Socket empty */
//		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    163a:	80 93 06 01 	sts	0x0106, r24
    163e:	08 95       	ret

00001640 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
    1640:	9c 5f       	subi	r25, 0xFC	; 252
    1642:	0c 94 3e 23 	jmp	0x467c	; 0x467c <_ZN3I2CD1Ev>
    1646:	08 95       	ret

00001648 <_ZN7Display10clearFrameEv>:
    1648:	fc 01       	movw	r30, r24
    164a:	9c 5f       	subi	r25, 0xFC	; 252
    164c:	11 92       	st	Z+, r1
    164e:	e8 17       	cp	r30, r24
    1650:	f9 07       	cpc	r31, r25
    1652:	e1 f7       	brne	.-8      	; 0x164c <_ZN7Display10clearFrameEv+0x4>
    1654:	08 95       	ret

00001656 <_ZN7Display15ssd1306_commandEh>:
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	16 2f       	mov	r17, r22
    165e:	ec 01       	movw	r28, r24
    1660:	dc 5f       	subi	r29, 0xFC	; 252
    1662:	ce 01       	movw	r24, r28
    1664:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
    1668:	68 e7       	ldi	r22, 0x78	; 120
    166a:	ce 01       	movw	r24, r28
    166c:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	ce 01       	movw	r24, r28
    1674:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
    1678:	61 2f       	mov	r22, r17
    167a:	ce 01       	movw	r24, r28
    167c:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 43 23 	call	0x4686	; 0x4686 <_ZN3I2C8twi_stopEv>
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	08 95       	ret

0000168e <_ZN7Display17InitializeDisplayEv>:
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
    1694:	6e ea       	ldi	r22, 0xAE	; 174
    1696:	df df       	rcall	.-66     	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1698:	65 ed       	ldi	r22, 0xD5	; 213
    169a:	ce 01       	movw	r24, r28
    169c:	dc df       	rcall	.-72     	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    169e:	60 e8       	ldi	r22, 0x80	; 128
    16a0:	ce 01       	movw	r24, r28
    16a2:	d9 df       	rcall	.-78     	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16a4:	68 ea       	ldi	r22, 0xA8	; 168
    16a6:	ce 01       	movw	r24, r28
    16a8:	d6 df       	rcall	.-84     	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16aa:	6f e3       	ldi	r22, 0x3F	; 63
    16ac:	ce 01       	movw	r24, r28
    16ae:	d3 df       	rcall	.-90     	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16b0:	63 ed       	ldi	r22, 0xD3	; 211
    16b2:	ce 01       	movw	r24, r28
    16b4:	d0 df       	rcall	.-96     	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	ce 01       	movw	r24, r28
    16ba:	cd df       	rcall	.-102    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16bc:	60 e4       	ldi	r22, 0x40	; 64
    16be:	ce 01       	movw	r24, r28
    16c0:	ca df       	rcall	.-108    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16c2:	6d e8       	ldi	r22, 0x8D	; 141
    16c4:	ce 01       	movw	r24, r28
    16c6:	c7 df       	rcall	.-114    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16c8:	64 e1       	ldi	r22, 0x14	; 20
    16ca:	ce 01       	movw	r24, r28
    16cc:	c4 df       	rcall	.-120    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16ce:	60 e2       	ldi	r22, 0x20	; 32
    16d0:	ce 01       	movw	r24, r28
    16d2:	c1 df       	rcall	.-126    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	ce 01       	movw	r24, r28
    16d8:	be df       	rcall	.-132    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16da:	61 ea       	ldi	r22, 0xA1	; 161
    16dc:	ce 01       	movw	r24, r28
    16de:	bb df       	rcall	.-138    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16e0:	68 ec       	ldi	r22, 0xC8	; 200
    16e2:	ce 01       	movw	r24, r28
    16e4:	b8 df       	rcall	.-144    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16e6:	6a ed       	ldi	r22, 0xDA	; 218
    16e8:	ce 01       	movw	r24, r28
    16ea:	b5 df       	rcall	.-150    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16ec:	62 e1       	ldi	r22, 0x12	; 18
    16ee:	ce 01       	movw	r24, r28
    16f0:	b2 df       	rcall	.-156    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16f2:	61 e8       	ldi	r22, 0x81	; 129
    16f4:	ce 01       	movw	r24, r28
    16f6:	af df       	rcall	.-162    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16f8:	6f ec       	ldi	r22, 0xCF	; 207
    16fa:	ce 01       	movw	r24, r28
    16fc:	ac df       	rcall	.-168    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    16fe:	69 ed       	ldi	r22, 0xD9	; 217
    1700:	ce 01       	movw	r24, r28
    1702:	a9 df       	rcall	.-174    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1704:	61 ef       	ldi	r22, 0xF1	; 241
    1706:	ce 01       	movw	r24, r28
    1708:	a6 df       	rcall	.-180    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    170a:	6b ed       	ldi	r22, 0xDB	; 219
    170c:	ce 01       	movw	r24, r28
    170e:	a3 df       	rcall	.-186    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1710:	60 e4       	ldi	r22, 0x40	; 64
    1712:	ce 01       	movw	r24, r28
    1714:	a0 df       	rcall	.-192    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1716:	64 ea       	ldi	r22, 0xA4	; 164
    1718:	ce 01       	movw	r24, r28
    171a:	9d df       	rcall	.-198    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    171c:	66 ea       	ldi	r22, 0xA6	; 166
    171e:	ce 01       	movw	r24, r28
    1720:	9a df       	rcall	.-204    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1722:	6f ea       	ldi	r22, 0xAF	; 175
    1724:	ce 01       	movw	r24, r28
    1726:	97 df       	rcall	.-210    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <_ZN7DisplayC1Ev>:
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	ec 01       	movw	r28, r24
    1734:	9c 5f       	subi	r25, 0xFC	; 252
    1736:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN3I2CC1Ev>
    173a:	ce 01       	movw	r24, r28
    173c:	a8 df       	rcall	.-176    	; 0x168e <_ZN7Display17InitializeDisplayEv>
    173e:	ce 01       	movw	r24, r28
    1740:	83 df       	rcall	.-250    	; 0x1648 <_ZN7Display10clearFrameEv>
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <_ZN7Display9sendFrameEv>:
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	ec 01       	movw	r28, r24
    1756:	61 e2       	ldi	r22, 0x21	; 33
    1758:	7e df       	rcall	.-260    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	ce 01       	movw	r24, r28
    175e:	7b df       	rcall	.-266    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1760:	6f e7       	ldi	r22, 0x7F	; 127
    1762:	ce 01       	movw	r24, r28
    1764:	78 df       	rcall	.-272    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1766:	62 e2       	ldi	r22, 0x22	; 34
    1768:	ce 01       	movw	r24, r28
    176a:	75 df       	rcall	.-278    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	ce 01       	movw	r24, r28
    1770:	72 df       	rcall	.-284    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1772:	67 e0       	ldi	r22, 0x07	; 7
    1774:	ce 01       	movw	r24, r28
    1776:	6f df       	rcall	.-290    	; 0x1656 <_ZN7Display15ssd1306_commandEh>
    1778:	8e 01       	movw	r16, r28
    177a:	1c 5f       	subi	r17, 0xFC	; 252
    177c:	c8 01       	movw	r24, r16
    177e:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN3I2C9twi_startEv>
    1782:	68 e7       	ldi	r22, 0x78	; 120
    1784:	c8 01       	movw	r24, r16
    1786:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
    178a:	60 e4       	ldi	r22, 0x40	; 64
    178c:	c8 01       	movw	r24, r16
    178e:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
    1792:	78 01       	movw	r14, r16
    1794:	69 91       	ld	r22, Y+
    1796:	c8 01       	movw	r24, r16
    1798:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN3I2C9twi_writeEh>
    179c:	ce 15       	cp	r28, r14
    179e:	df 05       	cpc	r29, r15
    17a0:	c9 f7       	brne	.-14     	; 0x1794 <_ZN7Display9sendFrameEv+0x4c>
    17a2:	c8 01       	movw	r24, r16
    17a4:	0e 94 43 23 	call	0x4686	; 0x4686 <_ZN3I2C8twi_stopEv>
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	08 95       	ret

000017b6 <_ZN7Display9drawPixelEhhh>:
    17b6:	66 23       	and	r22, r22
    17b8:	ac f1       	brlt	.+106    	; 0x1824 <_ZN7Display9drawPixelEhhh+0x6e>
    17ba:	40 34       	cpi	r20, 0x40	; 64
    17bc:	98 f5       	brcc	.+102    	; 0x1824 <_ZN7Display9drawPixelEhhh+0x6e>
    17be:	21 11       	cpse	r18, r1
    17c0:	19 c0       	rjmp	.+50     	; 0x17f4 <_ZN7Display9drawPixelEhhh+0x3e>
    17c2:	24 2f       	mov	r18, r20
    17c4:	26 95       	lsr	r18
    17c6:	26 95       	lsr	r18
    17c8:	26 95       	lsr	r18
    17ca:	50 e8       	ldi	r21, 0x80	; 128
    17cc:	25 9f       	mul	r18, r21
    17ce:	90 01       	movw	r18, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	26 0f       	add	r18, r22
    17d4:	31 1d       	adc	r19, r1
    17d6:	fc 01       	movw	r30, r24
    17d8:	e2 0f       	add	r30, r18
    17da:	f3 1f       	adc	r31, r19
    17dc:	47 70       	andi	r20, 0x07	; 7
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <_ZN7Display9drawPixelEhhh+0x32>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	4a 95       	dec	r20
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <_ZN7Display9drawPixelEhhh+0x2e>
    17ec:	90 81       	ld	r25, Z
    17ee:	89 2b       	or	r24, r25
    17f0:	80 83       	st	Z, r24
    17f2:	08 95       	ret
    17f4:	24 2f       	mov	r18, r20
    17f6:	26 95       	lsr	r18
    17f8:	26 95       	lsr	r18
    17fa:	26 95       	lsr	r18
    17fc:	30 e8       	ldi	r19, 0x80	; 128
    17fe:	23 9f       	mul	r18, r19
    1800:	f0 01       	movw	r30, r0
    1802:	11 24       	eor	r1, r1
    1804:	e6 0f       	add	r30, r22
    1806:	f1 1d       	adc	r31, r1
    1808:	e8 0f       	add	r30, r24
    180a:	f9 1f       	adc	r31, r25
    180c:	47 70       	andi	r20, 0x07	; 7
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <_ZN7Display9drawPixelEhhh+0x62>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	4a 95       	dec	r20
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <_ZN7Display9drawPixelEhhh+0x5e>
    181c:	80 95       	com	r24
    181e:	90 81       	ld	r25, Z
    1820:	89 23       	and	r24, r25
    1822:	80 83       	st	Z, r24
    1824:	08 95       	ret

00001826 <_ZN7Display9drawVLineEhhh>:
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	22 23       	and	r18, r18
    1832:	69 f0       	breq	.+26     	; 0x184e <_ZN7Display9drawVLineEhhh+0x28>
    1834:	c4 2f       	mov	r28, r20
    1836:	f6 2e       	mov	r15, r22
    1838:	8c 01       	movw	r16, r24
    183a:	d2 2f       	mov	r29, r18
    183c:	d4 0f       	add	r29, r20
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	4c 2f       	mov	r20, r28
    1842:	6f 2d       	mov	r22, r15
    1844:	c8 01       	movw	r24, r16
    1846:	b7 df       	rcall	.-146    	; 0x17b6 <_ZN7Display9drawPixelEhhh>
    1848:	cf 5f       	subi	r28, 0xFF	; 255
    184a:	cd 13       	cpse	r28, r29
    184c:	f8 cf       	rjmp	.-16     	; 0x183e <_ZN7Display9drawVLineEhhh+0x18>
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	08 95       	ret

0000185a <_ZN7Display9drawHLineEhhh>:
    185a:	ff 92       	push	r15
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	22 23       	and	r18, r18
    1866:	69 f0       	breq	.+26     	; 0x1882 <_ZN7Display9drawHLineEhhh+0x28>
    1868:	f4 2e       	mov	r15, r20
    186a:	c6 2f       	mov	r28, r22
    186c:	8c 01       	movw	r16, r24
    186e:	d2 2f       	mov	r29, r18
    1870:	d6 0f       	add	r29, r22
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	4f 2d       	mov	r20, r15
    1876:	6c 2f       	mov	r22, r28
    1878:	c8 01       	movw	r24, r16
    187a:	9d df       	rcall	.-198    	; 0x17b6 <_ZN7Display9drawPixelEhhh>
    187c:	cf 5f       	subi	r28, 0xFF	; 255
    187e:	cd 13       	cpse	r28, r29
    1880:	f8 cf       	rjmp	.-16     	; 0x1872 <_ZN7Display9drawHLineEhhh+0x18>
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	08 95       	ret

0000188e <_ZN7Display9draw_ASCIEhhh>:
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	61 32       	cpi	r22, 0x21	; 33
    1898:	08 f4       	brcc	.+2      	; 0x189c <_ZN7Display9draw_ASCIEhhh+0xe>
    189a:	3e c0       	rjmp	.+124    	; 0x1918 <_ZN7Display9draw_ASCIEhhh+0x8a>
    189c:	a4 2f       	mov	r26, r20
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	02 2f       	mov	r16, r18
    18a2:	06 95       	lsr	r16
    18a4:	06 95       	lsr	r16
    18a6:	06 95       	lsr	r16
    18a8:	30 e8       	ldi	r19, 0x80	; 128
    18aa:	03 9f       	mul	r16, r19
    18ac:	80 01       	movw	r16, r0
    18ae:	11 24       	eor	r1, r1
    18b0:	61 52       	subi	r22, 0x21	; 33
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	fb 01       	movw	r30, r22
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	e6 0f       	add	r30, r22
    18c0:	f7 1f       	adc	r31, r23
    18c2:	ea 52       	subi	r30, 0x2A	; 42
    18c4:	fc 4f       	sbci	r31, 0xFC	; 252
    18c6:	ad 01       	movw	r20, r26
    18c8:	40 0f       	add	r20, r16
    18ca:	51 1f       	adc	r21, r17
    18cc:	ec 01       	movw	r28, r24
    18ce:	c4 0f       	add	r28, r20
    18d0:	d5 1f       	adc	r29, r21
    18d2:	00 58       	subi	r16, 0x80	; 128
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	a0 0f       	add	r26, r16
    18d8:	b1 1f       	adc	r27, r17
    18da:	a8 0f       	add	r26, r24
    18dc:	b9 1f       	adc	r27, r25
    18de:	4b 5f       	subi	r20, 0xFB	; 251
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	48 0f       	add	r20, r24
    18e4:	59 1f       	adc	r21, r25
    18e6:	27 70       	andi	r18, 0x07	; 7
    18e8:	64 91       	lpm	r22, Z
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <_ZN7Display9draw_ASCIEhhh+0x66>
    18f0:	66 0f       	add	r22, r22
    18f2:	77 1f       	adc	r23, r23
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <_ZN7Display9draw_ASCIEhhh+0x62>
    18f8:	98 81       	ld	r25, Y
    18fa:	96 2b       	or	r25, r22
    18fc:	99 93       	st	Y+, r25
    18fe:	67 2f       	mov	r22, r23
    1900:	77 27       	eor	r23, r23
    1902:	61 15       	cp	r22, r1
    1904:	71 05       	cpc	r23, r1
    1906:	19 f0       	breq	.+6      	; 0x190e <_ZN7Display9draw_ASCIEhhh+0x80>
    1908:	8c 91       	ld	r24, X
    190a:	68 2b       	or	r22, r24
    190c:	6c 93       	st	X, r22
    190e:	31 96       	adiw	r30, 0x01	; 1
    1910:	11 96       	adiw	r26, 0x01	; 1
    1912:	c4 17       	cp	r28, r20
    1914:	d5 07       	cpc	r29, r21
    1916:	41 f7       	brne	.-48     	; 0x18e8 <_ZN7Display9draw_ASCIEhhh+0x5a>
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <_ZN7Display16draw_number16x16Ehhh>:
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	6a 30       	cpi	r22, 0x0A	; 10
    1934:	08 f0       	brcs	.+2      	; 0x1938 <_ZN7Display16draw_number16x16Ehhh+0x16>
    1936:	66 c0       	rjmp	.+204    	; 0x1a04 <_ZN7Display16draw_number16x16Ehhh+0xe2>
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	02 2f       	mov	r16, r18
    193c:	06 95       	lsr	r16
    193e:	06 95       	lsr	r16
    1940:	06 95       	lsr	r16
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	d8 01       	movw	r26, r16
    1946:	b6 95       	lsr	r27
    1948:	ba 2f       	mov	r27, r26
    194a:	aa 27       	eor	r26, r26
    194c:	b7 95       	ror	r27
    194e:	a7 95       	ror	r26
    1950:	0f 5f       	subi	r16, 0xFF	; 255
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	16 95       	lsr	r17
    1956:	10 2f       	mov	r17, r16
    1958:	00 27       	eor	r16, r16
    195a:	17 95       	ror	r17
    195c:	07 95       	ror	r16
    195e:	7d 01       	movw	r14, r26
    1960:	30 e8       	ldi	r19, 0x80	; 128
    1962:	e3 0e       	add	r14, r19
    1964:	f1 1c       	adc	r15, r1
    1966:	e4 0e       	add	r14, r20
    1968:	f5 1e       	adc	r15, r21
    196a:	e8 0e       	add	r14, r24
    196c:	f9 1e       	adc	r15, r25
    196e:	ea 01       	movw	r28, r20
    1970:	c0 0f       	add	r28, r16
    1972:	d1 1f       	adc	r29, r17
    1974:	60 97       	sbiw	r28, 0x10	; 16
    1976:	c8 0f       	add	r28, r24
    1978:	d9 1f       	adc	r29, r25
    197a:	04 0f       	add	r16, r20
    197c:	15 1f       	adc	r17, r21
    197e:	00 59       	subi	r16, 0x90	; 144
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	08 0f       	add	r16, r24
    1984:	19 1f       	adc	r17, r25
    1986:	a4 0f       	add	r26, r20
    1988:	b5 1f       	adc	r27, r21
    198a:	a8 0f       	add	r26, r24
    198c:	b9 1f       	adc	r27, r25
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	68 9f       	mul	r22, r24
    1992:	b0 01       	movw	r22, r0
    1994:	11 24       	eor	r1, r1
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	27 70       	andi	r18, 0x07	; 7
    199c:	fa 01       	movw	r30, r20
    199e:	e6 0f       	add	r30, r22
    19a0:	f7 1f       	adc	r31, r23
    19a2:	ea 56       	subi	r30, 0x6A	; 106
    19a4:	fd 4f       	sbci	r31, 0xFD	; 253
    19a6:	e4 91       	lpm	r30, Z
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <_ZN7Display16draw_number16x16Ehhh+0x90>
    19ae:	ee 0f       	add	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <_ZN7Display16draw_number16x16Ehhh+0x8c>
    19b6:	40 31       	cpi	r20, 0x10	; 16
    19b8:	68 f4       	brcc	.+26     	; 0x19d4 <_ZN7Display16draw_number16x16Ehhh+0xb2>
    19ba:	8c 91       	ld	r24, X
    19bc:	8e 2b       	or	r24, r30
    19be:	8c 93       	st	X, r24
    19c0:	cf 2e       	mov	r12, r31
    19c2:	dd 24       	eor	r13, r13
    19c4:	c1 14       	cp	r12, r1
    19c6:	d1 04       	cpc	r13, r1
    19c8:	89 f0       	breq	.+34     	; 0x19ec <_ZN7Display16draw_number16x16Ehhh+0xca>
    19ca:	f7 01       	movw	r30, r14
    19cc:	80 81       	ld	r24, Z
    19ce:	8c 29       	or	r24, r12
    19d0:	80 83       	st	Z, r24
    19d2:	0c c0       	rjmp	.+24     	; 0x19ec <_ZN7Display16draw_number16x16Ehhh+0xca>
    19d4:	88 81       	ld	r24, Y
    19d6:	8e 2b       	or	r24, r30
    19d8:	88 83       	st	Y, r24
    19da:	cf 2e       	mov	r12, r31
    19dc:	dd 24       	eor	r13, r13
    19de:	c1 14       	cp	r12, r1
    19e0:	d1 04       	cpc	r13, r1
    19e2:	21 f0       	breq	.+8      	; 0x19ec <_ZN7Display16draw_number16x16Ehhh+0xca>
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 81       	ld	r24, Z
    19e8:	8c 29       	or	r24, r12
    19ea:	80 83       	st	Z, r24
    19ec:	4f 5f       	subi	r20, 0xFF	; 255
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	ff ef       	ldi	r31, 0xFF	; 255
    19f2:	ef 1a       	sub	r14, r31
    19f4:	ff 0a       	sbc	r15, r31
    19f6:	21 96       	adiw	r28, 0x01	; 1
    19f8:	0f 5f       	subi	r16, 0xFF	; 255
    19fa:	1f 4f       	sbci	r17, 0xFF	; 255
    19fc:	11 96       	adiw	r26, 0x01	; 1
    19fe:	40 32       	cpi	r20, 0x20	; 32
    1a00:	51 05       	cpc	r21, r1
    1a02:	61 f6       	brne	.-104    	; 0x199c <_ZN7Display16draw_number16x16Ehhh+0x7a>
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	08 95       	ret

00001a16 <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1a16:	2f 92       	push	r2
    1a18:	3f 92       	push	r3
    1a1a:	4f 92       	push	r4
    1a1c:	5f 92       	push	r5
    1a1e:	6f 92       	push	r6
    1a20:	7f 92       	push	r7
    1a22:	8f 92       	push	r8
    1a24:	9f 92       	push	r9
    1a26:	af 92       	push	r10
    1a28:	bf 92       	push	r11
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	27 97       	sbiw	r28, 0x07	; 7
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	9f 83       	std	Y+7, r25	; 0x07
    1a4c:	8e 83       	std	Y+6, r24	; 0x06
    1a4e:	6d 83       	std	Y+5, r22	; 0x05
    1a50:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    1a52:	00 23       	and	r16, r16
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <_ZN7Display6analogEhhhh+0x42>
    1a56:	26 c1       	rjmp	.+588    	; 0x1ca4 <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    1a58:	62 2f       	mov	r22, r18
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 ec       	ldi	r20, 0xC0	; 192
    1a6a:	50 e4       	ldi	r21, 0x40	; 64
    1a6c:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1a70:	2b ed       	ldi	r18, 0xDB	; 219
    1a72:	3f e0       	ldi	r19, 0x0F	; 15
    1a74:	49 e4       	ldi	r20, 0x49	; 73
    1a76:	50 e4       	ldi	r21, 0x40	; 64
    1a78:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	44 e3       	ldi	r20, 0x34	; 52
    1a82:	53 e4       	ldi	r21, 0x43	; 67
    1a84:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    1a88:	2b ed       	ldi	r18, 0xDB	; 219
    1a8a:	3f e0       	ldi	r19, 0x0F	; 15
    1a8c:	49 ec       	ldi	r20, 0xC9	; 201
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <__subsf3>
    1a94:	6b 01       	movw	r12, r22
    1a96:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1a98:	0e 94 d6 3e 	call	0x7dac	; 0x7dac <cos>
    1a9c:	4b 01       	movw	r8, r22
    1a9e:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	0e 94 3c 41 	call	0x8278	; 0x8278 <sin>
    1aa8:	2b 01       	movw	r4, r22
    1aaa:	3c 01       	movw	r6, r24
    1aac:	00 e0       	ldi	r16, 0x00	; 0
    1aae:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1ab0:	b8 01       	movw	r22, r16
    1ab2:	01 2e       	mov	r0, r17
    1ab4:	00 0c       	add	r0, r0
    1ab6:	88 0b       	sbc	r24, r24
    1ab8:	99 0b       	sbc	r25, r25
    1aba:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1abe:	6b 01       	movw	r12, r22
    1ac0:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1ac2:	a3 01       	movw	r20, r6
    1ac4:	92 01       	movw	r18, r4
    1ac6:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	48 ef       	ldi	r20, 0xF8	; 248
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1ad6:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    1ada:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1adc:	a5 01       	movw	r20, r10
    1ade:	94 01       	movw	r18, r8
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	48 ef       	ldi	r20, 0xF8	; 248
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1af4:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	42 2d       	mov	r20, r2
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	9f 81       	ldd	r25, Y+7	; 0x07
    1b00:	5a de       	rcall	.-844    	; 0x17b6 <_ZN7Display9drawPixelEhhh>
    1b02:	0f 5f       	subi	r16, 0xFF	; 255
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1b06:	09 31       	cpi	r16, 0x19	; 25
    1b08:	11 05       	cpc	r17, r1
    1b0a:	91 f6       	brne	.-92     	; 0x1ab0 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1b0c:	63 2d       	mov	r22, r3
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1b18:	69 83       	std	Y+1, r22	; 0x01
    1b1a:	7a 83       	std	Y+2, r23	; 0x02
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 ec       	ldi	r20, 0xC0	; 192
    1b26:	50 e4       	ldi	r21, 0x40	; 64
    1b28:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1b2c:	2b ed       	ldi	r18, 0xDB	; 219
    1b2e:	3f e0       	ldi	r19, 0x0F	; 15
    1b30:	49 e4       	ldi	r20, 0x49	; 73
    1b32:	50 e4       	ldi	r21, 0x40	; 64
    1b34:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	44 e3       	ldi	r20, 0x34	; 52
    1b3e:	53 e4       	ldi	r21, 0x43	; 67
    1b40:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    1b44:	2b ed       	ldi	r18, 0xDB	; 219
    1b46:	3f e0       	ldi	r19, 0x0F	; 15
    1b48:	49 ec       	ldi	r20, 0xC9	; 201
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <__subsf3>
    1b50:	6b 01       	movw	r12, r22
    1b52:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1b54:	0e 94 d6 3e 	call	0x7dac	; 0x7dac <cos>
    1b58:	2b 01       	movw	r4, r22
    1b5a:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1b5c:	c7 01       	movw	r24, r14
    1b5e:	b6 01       	movw	r22, r12
    1b60:	0e 94 3c 41 	call	0x8278	; 0x8278 <sin>
    1b64:	4b 01       	movw	r8, r22
    1b66:	5c 01       	movw	r10, r24
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1b6c:	b8 01       	movw	r22, r16
    1b6e:	01 2e       	mov	r0, r17
    1b70:	00 0c       	add	r0, r0
    1b72:	88 0b       	sbc	r24, r24
    1b74:	99 0b       	sbc	r25, r25
    1b76:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1b7a:	6b 01       	movw	r12, r22
    1b7c:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1b7e:	a5 01       	movw	r20, r10
    1b80:	94 01       	movw	r18, r8
    1b82:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	48 ef       	ldi	r20, 0xF8	; 248
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1b92:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    1b96:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1b98:	a3 01       	movw	r20, r6
    1b9a:	92 01       	movw	r18, r4
    1b9c:	c7 01       	movw	r24, r14
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	48 ef       	ldi	r20, 0xF8	; 248
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1bb0:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	43 2d       	mov	r20, r3
    1bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bba:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbc:	fc dd       	rcall	.-1032   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
    1bbe:	0f 5f       	subi	r16, 0xFF	; 255
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1bc2:	05 31       	cpi	r16, 0x15	; 21
    1bc4:	11 05       	cpc	r17, r1
    1bc6:	91 f6       	brne	.-92     	; 0x1b6c <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1bc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bca:	62 2f       	mov	r22, r18
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 ef       	ldi	r20, 0xF0	; 240
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1be2:	6b 01       	movw	r12, r22
    1be4:	7c 01       	movw	r14, r24
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	69 81       	ldd	r22, Y+1	; 0x01
    1bf0:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1bfa:	9b 01       	movw	r18, r22
    1bfc:	ac 01       	movw	r20, r24
    1bfe:	c7 01       	movw	r24, r14
    1c00:	b6 01       	movw	r22, r12
    1c02:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1c06:	2b ed       	ldi	r18, 0xDB	; 219
    1c08:	3f e0       	ldi	r19, 0x0F	; 15
    1c0a:	49 e4       	ldi	r20, 0x49	; 73
    1c0c:	50 e4       	ldi	r21, 0x40	; 64
    1c0e:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	44 e3       	ldi	r20, 0x34	; 52
    1c18:	53 e4       	ldi	r21, 0x43	; 67
    1c1a:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    1c1e:	2b ed       	ldi	r18, 0xDB	; 219
    1c20:	3f e0       	ldi	r19, 0x0F	; 15
    1c22:	49 ec       	ldi	r20, 0xC9	; 201
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <__subsf3>
    1c2a:	6b 01       	movw	r12, r22
    1c2c:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1c2e:	0e 94 d6 3e 	call	0x7dac	; 0x7dac <cos>
    1c32:	4b 01       	movw	r8, r22
    1c34:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1c36:	c7 01       	movw	r24, r14
    1c38:	b6 01       	movw	r22, r12
    1c3a:	0e 94 3c 41 	call	0x8278	; 0x8278 <sin>
    1c3e:	2b 01       	movw	r4, r22
    1c40:	3c 01       	movw	r6, r24
    1c42:	00 e0       	ldi	r16, 0x00	; 0
    1c44:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1c46:	b8 01       	movw	r22, r16
    1c48:	01 2e       	mov	r0, r17
    1c4a:	00 0c       	add	r0, r0
    1c4c:	88 0b       	sbc	r24, r24
    1c4e:	99 0b       	sbc	r25, r25
    1c50:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1c54:	6b 01       	movw	r12, r22
    1c56:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1c58:	a3 01       	movw	r20, r6
    1c5a:	92 01       	movw	r18, r4
    1c5c:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	48 ef       	ldi	r20, 0xF8	; 248
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1c6c:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    1c70:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1c72:	a5 01       	movw	r20, r10
    1c74:	94 01       	movw	r18, r8
    1c76:	c7 01       	movw	r24, r14
    1c78:	b6 01       	movw	r22, r12
    1c7a:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	48 ef       	ldi	r20, 0xF8	; 248
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1c8a:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	43 2d       	mov	r20, r3
    1c92:	8e 81       	ldd	r24, Y+6	; 0x06
    1c94:	9f 81       	ldd	r25, Y+7	; 0x07
    1c96:	8f dd       	rcall	.-1250   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
    1c98:	0f 5f       	subi	r16, 0xFF	; 255
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1c9c:	0d 30       	cpi	r16, 0x0D	; 13
    1c9e:	11 05       	cpc	r17, r1
    1ca0:	91 f6       	brne	.-92     	; 0x1c46 <_ZN7Display6analogEhhhh+0x230>
    1ca2:	cb c0       	rjmp	.+406    	; 0x1e3a <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1ca4:	64 2f       	mov	r22, r20
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1cb0:	69 83       	std	Y+1, r22	; 0x01
    1cb2:	7a 83       	std	Y+2, r23	; 0x02
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 ec       	ldi	r20, 0xC0	; 192
    1cbe:	50 e4       	ldi	r21, 0x40	; 64
    1cc0:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1cc4:	2b ed       	ldi	r18, 0xDB	; 219
    1cc6:	3f e0       	ldi	r19, 0x0F	; 15
    1cc8:	49 e4       	ldi	r20, 0x49	; 73
    1cca:	50 e4       	ldi	r21, 0x40	; 64
    1ccc:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	44 e3       	ldi	r20, 0x34	; 52
    1cd6:	53 e4       	ldi	r21, 0x43	; 67
    1cd8:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    1cdc:	2b ed       	ldi	r18, 0xDB	; 219
    1cde:	3f e0       	ldi	r19, 0x0F	; 15
    1ce0:	49 ec       	ldi	r20, 0xC9	; 201
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <__subsf3>
    1ce8:	6b 01       	movw	r12, r22
    1cea:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1cec:	0e 94 d6 3e 	call	0x7dac	; 0x7dac <cos>
    1cf0:	2b 01       	movw	r4, r22
    1cf2:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1cf4:	c7 01       	movw	r24, r14
    1cf6:	b6 01       	movw	r22, r12
    1cf8:	0e 94 3c 41 	call	0x8278	; 0x8278 <sin>
    1cfc:	4b 01       	movw	r8, r22
    1cfe:	5c 01       	movw	r10, r24
    1d00:	00 e0       	ldi	r16, 0x00	; 0
    1d02:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1d04:	b8 01       	movw	r22, r16
    1d06:	01 2e       	mov	r0, r17
    1d08:	00 0c       	add	r0, r0
    1d0a:	88 0b       	sbc	r24, r24
    1d0c:	99 0b       	sbc	r25, r25
    1d0e:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1d12:	6b 01       	movw	r12, r22
    1d14:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1d16:	a5 01       	movw	r20, r10
    1d18:	94 01       	movw	r18, r8
    1d1a:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	48 ef       	ldi	r20, 0xF8	; 248
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1d2a:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    1d2e:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1d30:	a3 01       	movw	r20, r6
    1d32:	92 01       	movw	r18, r4
    1d34:	c7 01       	movw	r24, r14
    1d36:	b6 01       	movw	r22, r12
    1d38:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	48 ef       	ldi	r20, 0xF8	; 248
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1d48:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	43 2d       	mov	r20, r3
    1d50:	8e 81       	ldd	r24, Y+6	; 0x06
    1d52:	9f 81       	ldd	r25, Y+7	; 0x07
    1d54:	30 dd       	rcall	.-1440   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
    1d56:	0f 5f       	subi	r16, 0xFF	; 255
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1d5a:	09 31       	cpi	r16, 0x19	; 25
    1d5c:	11 05       	cpc	r17, r1
    1d5e:	91 f6       	brne	.-92     	; 0x1d04 <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1d60:	ed 81       	ldd	r30, Y+5	; 0x05
    1d62:	6e 2f       	mov	r22, r30
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 ef       	ldi	r20, 0xF0	; 240
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1d7a:	6b 01       	movw	r12, r22
    1d7c:	7c 01       	movw	r14, r24
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	5f e3       	ldi	r21, 0x3F	; 63
    1d86:	69 81       	ldd	r22, Y+1	; 0x01
    1d88:	7a 81       	ldd	r23, Y+2	; 0x02
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
    1d96:	c7 01       	movw	r24, r14
    1d98:	b6 01       	movw	r22, r12
    1d9a:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1d9e:	2b ed       	ldi	r18, 0xDB	; 219
    1da0:	3f e0       	ldi	r19, 0x0F	; 15
    1da2:	49 e4       	ldi	r20, 0x49	; 73
    1da4:	50 e4       	ldi	r21, 0x40	; 64
    1da6:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	44 e3       	ldi	r20, 0x34	; 52
    1db0:	53 e4       	ldi	r21, 0x43	; 67
    1db2:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    1db6:	2b ed       	ldi	r18, 0xDB	; 219
    1db8:	3f e0       	ldi	r19, 0x0F	; 15
    1dba:	49 ec       	ldi	r20, 0xC9	; 201
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <__subsf3>
    1dc2:	6b 01       	movw	r12, r22
    1dc4:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1dc6:	0e 94 d6 3e 	call	0x7dac	; 0x7dac <cos>
    1dca:	4b 01       	movw	r8, r22
    1dcc:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1dce:	c7 01       	movw	r24, r14
    1dd0:	b6 01       	movw	r22, r12
    1dd2:	0e 94 3c 41 	call	0x8278	; 0x8278 <sin>
    1dd6:	2b 01       	movw	r4, r22
    1dd8:	3c 01       	movw	r6, r24
    1dda:	00 e0       	ldi	r16, 0x00	; 0
    1ddc:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1dde:	b8 01       	movw	r22, r16
    1de0:	01 2e       	mov	r0, r17
    1de2:	00 0c       	add	r0, r0
    1de4:	88 0b       	sbc	r24, r24
    1de6:	99 0b       	sbc	r25, r25
    1de8:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    1dec:	6b 01       	movw	r12, r22
    1dee:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1df0:	a3 01       	movw	r20, r6
    1df2:	92 01       	movw	r18, r4
    1df4:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	48 ef       	ldi	r20, 0xF8	; 248
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1e04:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    1e08:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1e0a:	a5 01       	movw	r20, r10
    1e0c:	94 01       	movw	r18, r8
    1e0e:	c7 01       	movw	r24, r14
    1e10:	b6 01       	movw	r22, r12
    1e12:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	48 ef       	ldi	r20, 0xF8	; 248
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    1e22:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	43 2d       	mov	r20, r3
    1e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2e:	c3 dc       	rcall	.-1658   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
    1e30:	0f 5f       	subi	r16, 0xFF	; 255
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1e34:	01 31       	cpi	r16, 0x11	; 17
    1e36:	11 05       	cpc	r17, r1
    1e38:	91 f6       	brne	.-92     	; 0x1dde <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	4a e1       	ldi	r20, 0x1A	; 26
    1e3e:	61 e3       	ldi	r22, 0x31	; 49
    1e40:	8e 81       	ldd	r24, Y+6	; 0x06
    1e42:	9f 81       	ldd	r25, Y+7	; 0x07
    1e44:	24 dd       	rcall	.-1464   	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	62 e3       	ldi	r22, 0x32	; 50
    1e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e50:	1e dd       	rcall	.-1476   	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    1e52:	2c e1       	ldi	r18, 0x1C	; 28
    1e54:	4a e3       	ldi	r20, 0x3A	; 58
    1e56:	63 e3       	ldi	r22, 0x33	; 51
    1e58:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5c:	18 dd       	rcall	.-1488   	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1e5e:	28 e3       	ldi	r18, 0x38	; 56
    1e60:	4d e1       	ldi	r20, 0x1D	; 29
    1e62:	66 e3       	ldi	r22, 0x36	; 54
    1e64:	8e 81       	ldd	r24, Y+6	; 0x06
    1e66:	9f 81       	ldd	r25, Y+7	; 0x07
    1e68:	12 dd       	rcall	.-1500   	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    1e6a:	2c e1       	ldi	r18, 0x1C	; 28
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	69 e3       	ldi	r22, 0x39	; 57
    1e70:	8e 81       	ldd	r24, Y+6	; 0x06
    1e72:	9f 81       	ldd	r25, Y+7	; 0x07
    1e74:	0c dd       	rcall	.-1512   	; 0x188e <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	48 e0       	ldi	r20, 0x08	; 8
    1e7a:	6c e2       	ldi	r22, 0x2C	; 44
    1e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e80:	9a dc       	rcall	.-1740   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	42 e1       	ldi	r20, 0x12	; 18
    1e86:	65 e3       	ldi	r22, 0x35	; 53
    1e88:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8c:	94 dc       	rcall	.-1752   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	4c e2       	ldi	r20, 0x2C	; 44
    1e92:	65 e3       	ldi	r22, 0x35	; 53
    1e94:	8e 81       	ldd	r24, Y+6	; 0x06
    1e96:	9f 81       	ldd	r25, Y+7	; 0x07
    1e98:	8e dc       	rcall	.-1764   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	45 e3       	ldi	r20, 0x35	; 53
    1e9e:	6b e2       	ldi	r22, 0x2B	; 43
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	88 dc       	rcall	.-1776   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	45 e3       	ldi	r20, 0x35	; 53
    1eaa:	61 e1       	ldi	r22, 0x11	; 17
    1eac:	8e 81       	ldd	r24, Y+6	; 0x06
    1eae:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb0:	82 dc       	rcall	.-1788   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	4c e2       	ldi	r20, 0x2C	; 44
    1eb6:	68 e0       	ldi	r22, 0x08	; 8
    1eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eba:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebc:	7c dc       	rcall	.-1800   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	41 e1       	ldi	r20, 0x11	; 17
    1ec2:	68 e0       	ldi	r22, 0x08	; 8
    1ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec8:	76 dc       	rcall	.-1812   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	48 e0       	ldi	r20, 0x08	; 8
    1ece:	62 e1       	ldi	r22, 0x12	; 18
    1ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed4:	70 dc       	rcall	.-1824   	; 0x17b6 <_ZN7Display9drawPixelEhhh>
}
    1ed6:	27 96       	adiw	r28, 0x07	; 7
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
    1ef2:	bf 90       	pop	r11
    1ef4:	af 90       	pop	r10
    1ef6:	9f 90       	pop	r9
    1ef8:	8f 90       	pop	r8
    1efa:	7f 90       	pop	r7
    1efc:	6f 90       	pop	r6
    1efe:	5f 90       	pop	r5
    1f00:	4f 90       	pop	r4
    1f02:	3f 90       	pop	r3
    1f04:	2f 90       	pop	r2
    1f06:	08 95       	ret

00001f08 <mem_cpy>:

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    1f08:	41 15       	cp	r20, r1
    1f0a:	51 05       	cpc	r21, r1
    1f0c:	51 f0       	breq	.+20     	; 0x1f22 <mem_cpy+0x1a>
    1f0e:	a6 2f       	mov	r26, r22
    1f10:	b7 2f       	mov	r27, r23
    1f12:	fc 01       	movw	r30, r24
    1f14:	48 0f       	add	r20, r24
    1f16:	59 1f       	adc	r21, r25
    1f18:	9d 91       	ld	r25, X+
    1f1a:	91 93       	st	Z+, r25
    1f1c:	e4 17       	cp	r30, r20
    1f1e:	f5 07       	cpc	r31, r21
    1f20:	d9 f7       	brne	.-10     	; 0x1f18 <mem_cpy+0x10>
    1f22:	08 95       	ret

00001f24 <ld_clust>:
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	dc 01       	movw	r26, r24
    1f2a:	fb 01       	movw	r30, r22
    1f2c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f2e:	69 2f       	mov	r22, r25
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	76 2f       	mov	r23, r22
    1f34:	66 27       	eor	r22, r22
    1f36:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f38:	68 2b       	or	r22, r24
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	2c 91       	ld	r18, X
    1f40:	23 30       	cpi	r18, 0x03	; 3
    1f42:	79 f4       	brne	.+30     	; 0x1f62 <ld_clust+0x3e>
    1f44:	05 89       	ldd	r16, Z+21	; 0x15
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	10 2f       	mov	r17, r16
    1f4a:	00 27       	eor	r16, r16
    1f4c:	24 89       	ldd	r18, Z+20	; 0x14
    1f4e:	02 2b       	or	r16, r18
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	98 01       	movw	r18, r16
    1f56:	11 27       	eor	r17, r17
    1f58:	00 27       	eor	r16, r16
    1f5a:	60 2b       	or	r22, r16
    1f5c:	71 2b       	or	r23, r17
    1f5e:	82 2b       	or	r24, r18
    1f60:	93 2b       	or	r25, r19
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	08 95       	ret

00001f68 <get_ldnumber>:
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	ec 01       	movw	r28, r24
    1f6e:	a8 81       	ld	r26, Y
    1f70:	b9 81       	ldd	r27, Y+1	; 0x01
    1f72:	10 97       	sbiw	r26, 0x00	; 0
    1f74:	f9 f0       	breq	.+62     	; 0x1fb4 <get_ldnumber+0x4c>
    1f76:	4c 91       	ld	r20, X
    1f78:	41 32       	cpi	r20, 0x21	; 33
    1f7a:	58 f0       	brcs	.+22     	; 0x1f92 <get_ldnumber+0x2a>
    1f7c:	4a 33       	cpi	r20, 0x3A	; 58
    1f7e:	31 f1       	breq	.+76     	; 0x1fcc <get_ldnumber+0x64>
    1f80:	fd 01       	movw	r30, r26
    1f82:	31 96       	adiw	r30, 0x01	; 1
    1f84:	9f 01       	movw	r18, r30
    1f86:	91 91       	ld	r25, Z+
    1f88:	91 32       	cpi	r25, 0x21	; 33
    1f8a:	28 f0       	brcs	.+10     	; 0x1f96 <get_ldnumber+0x2e>
    1f8c:	9a 33       	cpi	r25, 0x3A	; 58
    1f8e:	d1 f7       	brne	.-12     	; 0x1f84 <get_ldnumber+0x1c>
    1f90:	04 c0       	rjmp	.+8      	; 0x1f9a <get_ldnumber+0x32>
    1f92:	94 2f       	mov	r25, r20
    1f94:	9d 01       	movw	r18, r26
    1f96:	9a 33       	cpi	r25, 0x3A	; 58
    1f98:	81 f4       	brne	.+32     	; 0x1fba <get_ldnumber+0x52>
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	28 17       	cp	r18, r24
    1fa0:	39 07       	cpc	r19, r25
    1fa2:	71 f4       	brne	.+28     	; 0x1fc0 <get_ldnumber+0x58>
    1fa4:	40 33       	cpi	r20, 0x30	; 48
    1fa6:	79 f4       	brne	.+30     	; 0x1fc6 <get_ldnumber+0x5e>
    1fa8:	12 96       	adiw	r26, 0x02	; 2
    1faa:	b9 83       	std	Y+1, r27	; 0x01
    1fac:	a8 83       	st	Y, r26
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	0e c0       	rjmp	.+28     	; 0x1fd0 <get_ldnumber+0x68>
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	9f ef       	ldi	r25, 0xFF	; 255
    1fb8:	0b c0       	rjmp	.+22     	; 0x1fd0 <get_ldnumber+0x68>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	08 c0       	rjmp	.+16     	; 0x1fd0 <get_ldnumber+0x68>
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	9f ef       	ldi	r25, 0xFF	; 255
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <get_ldnumber+0x68>
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	9f ef       	ldi	r25, 0xFF	; 255
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <get_ldnumber+0x68>
    1fcc:	9d 01       	movw	r18, r26
    1fce:	e5 cf       	rjmp	.-54     	; 0x1f9a <get_ldnumber+0x32>
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <sync_window>:
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	fc 01       	movw	r30, r24
    1ff0:	24 81       	ldd	r18, Z+4	; 0x04
    1ff2:	22 23       	and	r18, r18
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <sync_window+0x22>
    1ff6:	44 c0       	rjmp	.+136    	; 0x2080 <sync_window+0xaa>
    1ff8:	ec 01       	movw	r28, r24
    1ffa:	c2 a4       	ldd	r12, Z+42	; 0x2a
    1ffc:	d3 a4       	ldd	r13, Z+43	; 0x2b
    1ffe:	e4 a4       	ldd	r14, Z+44	; 0x2c
    2000:	f5 a4       	ldd	r15, Z+45	; 0x2d
    2002:	5c 01       	movw	r10, r24
    2004:	fe e2       	ldi	r31, 0x2E	; 46
    2006:	af 0e       	add	r10, r31
    2008:	b1 1c       	adc	r11, r1
    200a:	01 e0       	ldi	r16, 0x01	; 1
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	a7 01       	movw	r20, r14
    2010:	96 01       	movw	r18, r12
    2012:	b5 01       	movw	r22, r10
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	f7 d8       	rcall	.-3602   	; 0x1206 <disk_write>
    2018:	81 11       	cpse	r24, r1
    201a:	34 c0       	rjmp	.+104    	; 0x2084 <sync_window+0xae>
    201c:	1c 82       	std	Y+4, r1	; 0x04
    201e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2020:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2022:	a8 a1       	ldd	r26, Y+32	; 0x20
    2024:	b9 a1       	ldd	r27, Y+33	; 0x21
    2026:	b7 01       	movw	r22, r14
    2028:	a6 01       	movw	r20, r12
    202a:	48 1b       	sub	r20, r24
    202c:	59 0b       	sbc	r21, r25
    202e:	6a 0b       	sbc	r22, r26
    2030:	7b 0b       	sbc	r23, r27
    2032:	8e 89       	ldd	r24, Y+22	; 0x16
    2034:	9f 89       	ldd	r25, Y+23	; 0x17
    2036:	a8 8d       	ldd	r26, Y+24	; 0x18
    2038:	b9 8d       	ldd	r27, Y+25	; 0x19
    203a:	48 17       	cp	r20, r24
    203c:	59 07       	cpc	r21, r25
    203e:	6a 07       	cpc	r22, r26
    2040:	7b 07       	cpc	r23, r27
    2042:	10 f5       	brcc	.+68     	; 0x2088 <sync_window+0xb2>
    2044:	8b 80       	ldd	r8, Y+3	; 0x03
    2046:	91 2c       	mov	r9, r1
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	88 16       	cp	r8, r24
    204c:	91 04       	cpc	r9, r1
    204e:	f0 f0       	brcs	.+60     	; 0x208c <sync_window+0xb6>
    2050:	8e 89       	ldd	r24, Y+22	; 0x16
    2052:	9f 89       	ldd	r25, Y+23	; 0x17
    2054:	a8 8d       	ldd	r26, Y+24	; 0x18
    2056:	b9 8d       	ldd	r27, Y+25	; 0x19
    2058:	c8 0e       	add	r12, r24
    205a:	d9 1e       	adc	r13, r25
    205c:	ea 1e       	adc	r14, r26
    205e:	fb 1e       	adc	r15, r27
    2060:	01 e0       	ldi	r16, 0x01	; 1
    2062:	10 e0       	ldi	r17, 0x00	; 0
    2064:	a7 01       	movw	r20, r14
    2066:	96 01       	movw	r18, r12
    2068:	b5 01       	movw	r22, r10
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	cc d8       	rcall	.-3688   	; 0x1206 <disk_write>
    206e:	e1 e0       	ldi	r30, 0x01	; 1
    2070:	8e 1a       	sub	r8, r30
    2072:	91 08       	sbc	r9, r1
    2074:	f1 e0       	ldi	r31, 0x01	; 1
    2076:	8f 16       	cp	r8, r31
    2078:	91 04       	cpc	r9, r1
    207a:	51 f7       	brne	.-44     	; 0x2050 <sync_window+0x7a>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	07 c0       	rjmp	.+14     	; 0x208e <sync_window+0xb8>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	05 c0       	rjmp	.+10     	; 0x208e <sync_window+0xb8>
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	03 c0       	rjmp	.+6      	; 0x208e <sync_window+0xb8>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	01 c0       	rjmp	.+2      	; 0x208e <sync_window+0xb8>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	bf 90       	pop	r11
    20a0:	af 90       	pop	r10
    20a2:	9f 90       	pop	r9
    20a4:	8f 90       	pop	r8
    20a6:	08 95       	ret

000020a8 <move_window>:
    20a8:	8f 92       	push	r8
    20aa:	9f 92       	push	r9
    20ac:	af 92       	push	r10
    20ae:	bf 92       	push	r11
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	ec 01       	movw	r28, r24
    20bc:	4a 01       	movw	r8, r20
    20be:	5b 01       	movw	r10, r22
    20c0:	8a a5       	ldd	r24, Y+42	; 0x2a
    20c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    20c4:	ac a5       	ldd	r26, Y+44	; 0x2c
    20c6:	bd a5       	ldd	r27, Y+45	; 0x2d
    20c8:	84 17       	cp	r24, r20
    20ca:	95 07       	cpc	r25, r21
    20cc:	a6 07       	cpc	r26, r22
    20ce:	b7 07       	cpc	r27, r23
    20d0:	d9 f0       	breq	.+54     	; 0x2108 <move_window+0x60>
    20d2:	ce 01       	movw	r24, r28
    20d4:	80 df       	rcall	.-256    	; 0x1fd6 <sync_window>
    20d6:	f8 2e       	mov	r15, r24
    20d8:	81 11       	cpse	r24, r1
    20da:	17 c0       	rjmp	.+46     	; 0x210a <move_window+0x62>
    20dc:	01 e0       	ldi	r16, 0x01	; 1
    20de:	10 e0       	ldi	r17, 0x00	; 0
    20e0:	a5 01       	movw	r20, r10
    20e2:	94 01       	movw	r18, r8
    20e4:	be 01       	movw	r22, r28
    20e6:	62 5d       	subi	r22, 0xD2	; 210
    20e8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	3a d8       	rcall	.-3980   	; 0x1162 <disk_read>
    20ee:	88 23       	and	r24, r24
    20f0:	31 f0       	breq	.+12     	; 0x20fe <move_window+0x56>
    20f2:	ff 24       	eor	r15, r15
    20f4:	f3 94       	inc	r15
    20f6:	88 24       	eor	r8, r8
    20f8:	8a 94       	dec	r8
    20fa:	98 2c       	mov	r9, r8
    20fc:	54 01       	movw	r10, r8
    20fe:	8a a6       	std	Y+42, r8	; 0x2a
    2100:	9b a6       	std	Y+43, r9	; 0x2b
    2102:	ac a6       	std	Y+44, r10	; 0x2c
    2104:	bd a6       	std	Y+45, r11	; 0x2d
    2106:	01 c0       	rjmp	.+2      	; 0x210a <move_window+0x62>
    2108:	f1 2c       	mov	r15, r1
    210a:	8f 2d       	mov	r24, r15
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	ff 90       	pop	r15
    2116:	bf 90       	pop	r11
    2118:	af 90       	pop	r10
    211a:	9f 90       	pop	r9
    211c:	8f 90       	pop	r8
    211e:	08 95       	ret

00002120 <check_fs>:
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	ec 01       	movw	r28, r24
    2126:	1c 82       	std	Y+4, r1	; 0x04
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	9f ef       	ldi	r25, 0xFF	; 255
    212c:	dc 01       	movw	r26, r24
    212e:	8a a7       	std	Y+42, r24	; 0x2a
    2130:	9b a7       	std	Y+43, r25	; 0x2b
    2132:	ac a7       	std	Y+44, r26	; 0x2c
    2134:	bd a7       	std	Y+45, r27	; 0x2d
    2136:	ce 01       	movw	r24, r28
    2138:	b7 df       	rcall	.-146    	; 0x20a8 <move_window>
    213a:	81 11       	cpse	r24, r1
    213c:	51 c0       	rjmp	.+162    	; 0x21e0 <check_fs+0xc0>
    213e:	fe 01       	movw	r30, r28
    2140:	e3 5d       	subi	r30, 0xD3	; 211
    2142:	fd 4f       	sbci	r31, 0xFD	; 253
    2144:	80 81       	ld	r24, Z
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	98 2f       	mov	r25, r24
    214a:	88 27       	eor	r24, r24
    214c:	31 97       	sbiw	r30, 0x01	; 1
    214e:	20 81       	ld	r18, Z
    2150:	82 2b       	or	r24, r18
    2152:	85 35       	cpi	r24, 0x55	; 85
    2154:	9a 4a       	sbci	r25, 0xAA	; 170
    2156:	09 f0       	breq	.+2      	; 0x215a <check_fs+0x3a>
    2158:	45 c0       	rjmp	.+138    	; 0x21e4 <check_fs+0xc4>
    215a:	e5 5c       	subi	r30, 0xC5	; 197
    215c:	f1 40       	sbci	r31, 0x01	; 1
    215e:	20 81       	ld	r18, Z
    2160:	31 97       	sbiw	r30, 0x01	; 1
    2162:	80 81       	ld	r24, Z
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e0       	ldi	r26, 0x00	; 0
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	dc 01       	movw	r26, r24
    216c:	99 27       	eor	r25, r25
    216e:	88 27       	eor	r24, r24
    2170:	b2 2b       	or	r27, r18
    2172:	32 97       	sbiw	r30, 0x02	; 2
    2174:	20 81       	ld	r18, Z
    2176:	82 2b       	or	r24, r18
    2178:	31 96       	adiw	r30, 0x01	; 1
    217a:	40 81       	ld	r20, Z
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	54 2f       	mov	r21, r20
    2180:	44 27       	eor	r20, r20
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	84 2b       	or	r24, r20
    2188:	95 2b       	or	r25, r21
    218a:	a6 2b       	or	r26, r22
    218c:	b7 2b       	or	r27, r23
    218e:	bb 27       	eor	r27, r27
    2190:	86 34       	cpi	r24, 0x46	; 70
    2192:	91 44       	sbci	r25, 0x41	; 65
    2194:	a4 45       	sbci	r26, 0x54	; 84
    2196:	b1 05       	cpc	r27, r1
    2198:	39 f1       	breq	.+78     	; 0x21e8 <check_fs+0xc8>
    219a:	7e 96       	adiw	r30, 0x1e	; 30
    219c:	80 81       	ld	r24, Z
    219e:	31 97       	sbiw	r30, 0x01	; 1
    21a0:	40 81       	ld	r20, Z
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	ba 01       	movw	r22, r20
    21aa:	55 27       	eor	r21, r21
    21ac:	44 27       	eor	r20, r20
    21ae:	78 2b       	or	r23, r24
    21b0:	32 97       	sbiw	r30, 0x02	; 2
    21b2:	80 81       	ld	r24, Z
    21b4:	48 2b       	or	r20, r24
    21b6:	cf 57       	subi	r28, 0x7F	; 127
    21b8:	df 4f       	sbci	r29, 0xFF	; 255
    21ba:	88 81       	ld	r24, Y
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	98 2f       	mov	r25, r24
    21c0:	88 27       	eor	r24, r24
    21c2:	a0 e0       	ldi	r26, 0x00	; 0
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	48 2b       	or	r20, r24
    21c8:	59 2b       	or	r21, r25
    21ca:	6a 2b       	or	r22, r26
    21cc:	7b 2b       	or	r23, r27
    21ce:	77 27       	eor	r23, r23
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	46 34       	cpi	r20, 0x46	; 70
    21d4:	51 44       	sbci	r21, 0x41	; 65
    21d6:	64 45       	sbci	r22, 0x54	; 84
    21d8:	71 05       	cpc	r23, r1
    21da:	39 f4       	brne	.+14     	; 0x21ea <check_fs+0xca>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	05 c0       	rjmp	.+10     	; 0x21ea <check_fs+0xca>
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <check_fs+0xca>
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <check_fs+0xca>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <validate>:
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	c9 f0       	breq	.+50     	; 0x2226 <validate+0x36>
    21f4:	dc 01       	movw	r26, r24
    21f6:	ed 91       	ld	r30, X+
    21f8:	fc 91       	ld	r31, X
    21fa:	11 97       	sbiw	r26, 0x01	; 1
    21fc:	30 97       	sbiw	r30, 0x00	; 0
    21fe:	a9 f0       	breq	.+42     	; 0x222a <validate+0x3a>
    2200:	20 81       	ld	r18, Z
    2202:	22 23       	and	r18, r18
    2204:	a1 f0       	breq	.+40     	; 0x222e <validate+0x3e>
    2206:	26 81       	ldd	r18, Z+6	; 0x06
    2208:	37 81       	ldd	r19, Z+7	; 0x07
    220a:	12 96       	adiw	r26, 0x02	; 2
    220c:	8d 91       	ld	r24, X+
    220e:	9c 91       	ld	r25, X
    2210:	13 97       	sbiw	r26, 0x03	; 3
    2212:	28 17       	cp	r18, r24
    2214:	39 07       	cpc	r19, r25
    2216:	69 f4       	brne	.+26     	; 0x2232 <validate+0x42>
    2218:	81 81       	ldd	r24, Z+1	; 0x01
    221a:	0e 94 aa 08 	call	0x1154	; 0x1154 <disk_status>
    221e:	80 ff       	sbrs	r24, 0
    2220:	0a c0       	rjmp	.+20     	; 0x2236 <validate+0x46>
    2222:	89 e0       	ldi	r24, 0x09	; 9
    2224:	08 95       	ret
    2226:	89 e0       	ldi	r24, 0x09	; 9
    2228:	08 95       	ret
    222a:	89 e0       	ldi	r24, 0x09	; 9
    222c:	08 95       	ret
    222e:	89 e0       	ldi	r24, 0x09	; 9
    2230:	08 95       	ret
    2232:	89 e0       	ldi	r24, 0x09	; 9
    2234:	08 95       	ret
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	08 95       	ret

0000223a <find_volume>:
    223a:	2f 92       	push	r2
    223c:	3f 92       	push	r3
    223e:	4f 92       	push	r4
    2240:	5f 92       	push	r5
    2242:	6f 92       	push	r6
    2244:	7f 92       	push	r7
    2246:	8f 92       	push	r8
    2248:	9f 92       	push	r9
    224a:	af 92       	push	r10
    224c:	bf 92       	push	r11
    224e:	cf 92       	push	r12
    2250:	df 92       	push	r13
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	6d 97       	sbiw	r28, 0x1d	; 29
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	6c 01       	movw	r12, r24
    2270:	cb 01       	movw	r24, r22
    2272:	b4 2e       	mov	r11, r20
    2274:	d6 01       	movw	r26, r12
    2276:	1d 92       	st	X+, r1
    2278:	1c 92       	st	X, r1
    227a:	76 de       	rcall	.-788    	; 0x1f68 <get_ldnumber>
    227c:	7c 01       	movw	r14, r24
    227e:	99 23       	and	r25, r25
    2280:	0c f4       	brge	.+2      	; 0x2284 <find_volume+0x4a>
    2282:	d7 c2       	rjmp	.+1454   	; 0x2832 <find_volume+0x5f8>
    2284:	fc 01       	movw	r30, r24
    2286:	ee 0f       	add	r30, r30
    2288:	ff 1f       	adc	r31, r31
    228a:	e9 5d       	subi	r30, 0xD9	; 217
    228c:	fb 4f       	sbci	r31, 0xFB	; 251
    228e:	00 81       	ld	r16, Z
    2290:	11 81       	ldd	r17, Z+1	; 0x01
    2292:	01 15       	cp	r16, r1
    2294:	11 05       	cpc	r17, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <find_volume+0x60>
    2298:	ce c2       	rjmp	.+1436   	; 0x2836 <find_volume+0x5fc>
    229a:	f6 01       	movw	r30, r12
    229c:	11 83       	std	Z+1, r17	; 0x01
    229e:	00 83       	st	Z, r16
    22a0:	d8 01       	movw	r26, r16
    22a2:	8c 91       	ld	r24, X
    22a4:	88 23       	and	r24, r24
    22a6:	69 f0       	breq	.+26     	; 0x22c2 <find_volume+0x88>
    22a8:	11 96       	adiw	r26, 0x01	; 1
    22aa:	8c 91       	ld	r24, X
    22ac:	0e 94 aa 08 	call	0x1154	; 0x1154 <disk_status>
    22b0:	80 fd       	sbrc	r24, 0
    22b2:	07 c0       	rjmp	.+14     	; 0x22c2 <find_volume+0x88>
    22b4:	bb 20       	and	r11, r11
    22b6:	09 f4       	brne	.+2      	; 0x22ba <find_volume+0x80>
    22b8:	c0 c2       	rjmp	.+1408   	; 0x283a <find_volume+0x600>
    22ba:	82 ff       	sbrs	r24, 2
    22bc:	c0 c2       	rjmp	.+1408   	; 0x283e <find_volume+0x604>
    22be:	8a e0       	ldi	r24, 0x0A	; 10
    22c0:	65 c3       	rjmp	.+1738   	; 0x298c <find_volume+0x752>
    22c2:	f8 01       	movw	r30, r16
    22c4:	10 82       	st	Z, r1
    22c6:	e1 82       	std	Z+1, r14	; 0x01
    22c8:	8e 2d       	mov	r24, r14
    22ca:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <disk_initialize>
    22ce:	80 fd       	sbrc	r24, 0
    22d0:	b8 c2       	rjmp	.+1392   	; 0x2842 <find_volume+0x608>
    22d2:	bb 20       	and	r11, r11
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <find_volume+0x9e>
    22d6:	d5 c2       	rjmp	.+1450   	; 0x2882 <find_volume+0x648>
    22d8:	82 fd       	sbrc	r24, 2
    22da:	b5 c2       	rjmp	.+1386   	; 0x2846 <find_volume+0x60c>
    22dc:	d2 c2       	rjmp	.+1444   	; 0x2882 <find_volume+0x648>
    22de:	df 01       	movw	r26, r30
    22e0:	17 97       	sbiw	r26, 0x07	; 7
    22e2:	8c 91       	ld	r24, X
    22e4:	88 23       	and	r24, r24
    22e6:	b9 f0       	breq	.+46     	; 0x2316 <find_volume+0xdc>
    22e8:	14 96       	adiw	r26, 0x04	; 4
    22ea:	cc 90       	ld	r12, X
    22ec:	80 81       	ld	r24, Z
    22ee:	d1 2c       	mov	r13, r1
    22f0:	e1 2c       	mov	r14, r1
    22f2:	f1 2c       	mov	r15, r1
    22f4:	f8 2a       	or	r15, r24
    22f6:	12 96       	adiw	r26, 0x02	; 2
    22f8:	8c 91       	ld	r24, X
    22fa:	e8 2a       	or	r14, r24
    22fc:	11 97       	sbiw	r26, 0x01	; 1
    22fe:	ac 91       	ld	r26, X
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	ba 2f       	mov	r27, r26
    2304:	aa 27       	eor	r26, r26
    2306:	cd 01       	movw	r24, r26
    2308:	a0 e0       	ldi	r26, 0x00	; 0
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	c8 2a       	or	r12, r24
    230e:	d9 2a       	or	r13, r25
    2310:	ea 2a       	or	r14, r26
    2312:	fb 2a       	or	r15, r27
    2314:	04 c0       	rjmp	.+8      	; 0x231e <find_volume+0xe4>
    2316:	c8 2c       	mov	r12, r8
    2318:	d9 2c       	mov	r13, r9
    231a:	e7 2e       	mov	r14, r23
    231c:	f6 2e       	mov	r15, r22
    231e:	d9 01       	movw	r26, r18
    2320:	cd 92       	st	X+, r12
    2322:	dd 92       	st	X+, r13
    2324:	ed 92       	st	X+, r14
    2326:	fd 92       	st	X+, r15
    2328:	9d 01       	movw	r18, r26
    232a:	70 96       	adiw	r30, 0x10	; 16
    232c:	e4 17       	cp	r30, r20
    232e:	f5 07       	cpc	r31, r21
    2330:	b1 f6       	brne	.-84     	; 0x22de <find_volume+0xa4>
    2332:	4e 01       	movw	r8, r28
    2334:	b1 e1       	ldi	r27, 0x11	; 17
    2336:	8b 0e       	add	r8, r27
    2338:	91 1c       	adc	r9, r1
    233a:	68 94       	set
    233c:	77 24       	eor	r7, r7
    233e:	71 f8       	bld	r7, 1
    2340:	f5 01       	movw	r30, r10
    2342:	c1 90       	ld	r12, Z+
    2344:	d1 90       	ld	r13, Z+
    2346:	e1 90       	ld	r14, Z+
    2348:	f1 90       	ld	r15, Z+
    234a:	5f 01       	movw	r10, r30
    234c:	c1 14       	cp	r12, r1
    234e:	d1 04       	cpc	r13, r1
    2350:	e1 04       	cpc	r14, r1
    2352:	f1 04       	cpc	r15, r1
    2354:	39 f0       	breq	.+14     	; 0x2364 <find_volume+0x12a>
    2356:	b7 01       	movw	r22, r14
    2358:	a6 01       	movw	r20, r12
    235a:	c8 01       	movw	r24, r16
    235c:	e1 de       	rcall	.-574    	; 0x2120 <check_fs>
    235e:	81 11       	cpse	r24, r1
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <find_volume+0x12c>
    2362:	0d c0       	rjmp	.+26     	; 0x237e <find_volume+0x144>
    2364:	87 2d       	mov	r24, r7
    2366:	a8 14       	cp	r10, r8
    2368:	b9 04       	cpc	r11, r9
    236a:	51 f7       	brne	.-44     	; 0x2340 <find_volume+0x106>
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <find_volume+0x13a>
    236e:	c1 2c       	mov	r12, r1
    2370:	d1 2c       	mov	r13, r1
    2372:	76 01       	movw	r14, r12
    2374:	83 30       	cpi	r24, 0x03	; 3
    2376:	09 f4       	brne	.+2      	; 0x237a <find_volume+0x140>
    2378:	68 c2       	rjmp	.+1232   	; 0x284a <find_volume+0x610>
    237a:	81 11       	cpse	r24, r1
    237c:	68 c2       	rjmp	.+1232   	; 0x284e <find_volume+0x614>
    237e:	d8 01       	movw	r26, r16
    2380:	da 96       	adiw	r26, 0x3a	; 58
    2382:	8c 91       	ld	r24, X
    2384:	da 97       	sbiw	r26, 0x3a	; 58
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	98 2f       	mov	r25, r24
    238a:	88 27       	eor	r24, r24
    238c:	d9 96       	adiw	r26, 0x39	; 57
    238e:	2c 91       	ld	r18, X
    2390:	82 2b       	or	r24, r18
    2392:	81 15       	cp	r24, r1
    2394:	92 40       	sbci	r25, 0x02	; 2
    2396:	09 f0       	breq	.+2      	; 0x239a <find_volume+0x160>
    2398:	5c c2       	rjmp	.+1208   	; 0x2852 <find_volume+0x618>
    239a:	f8 01       	movw	r30, r16
    239c:	eb 5b       	subi	r30, 0xBB	; 187
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 80       	ld	r8, Z
    23a2:	91 2c       	mov	r9, r1
    23a4:	98 2c       	mov	r9, r8
    23a6:	88 24       	eor	r8, r8
    23a8:	31 97       	sbiw	r30, 0x01	; 1
    23aa:	80 81       	ld	r24, Z
    23ac:	88 2a       	or	r8, r24
    23ae:	a1 2c       	mov	r10, r1
    23b0:	b1 2c       	mov	r11, r1
    23b2:	81 14       	cp	r8, r1
    23b4:	91 04       	cpc	r9, r1
    23b6:	a1 04       	cpc	r10, r1
    23b8:	b1 04       	cpc	r11, r1
    23ba:	e9 f4       	brne	.+58     	; 0x23f6 <find_volume+0x1bc>
    23bc:	71 96       	adiw	r30, 0x11	; 17
    23be:	80 81       	ld	r24, Z
    23c0:	31 97       	sbiw	r30, 0x01	; 1
    23c2:	80 80       	ld	r8, Z
    23c4:	91 2c       	mov	r9, r1
    23c6:	a1 2c       	mov	r10, r1
    23c8:	b1 2c       	mov	r11, r1
    23ca:	54 01       	movw	r10, r8
    23cc:	99 24       	eor	r9, r9
    23ce:	88 24       	eor	r8, r8
    23d0:	b8 2a       	or	r11, r24
    23d2:	32 97       	sbiw	r30, 0x02	; 2
    23d4:	80 81       	ld	r24, Z
    23d6:	a5 01       	movw	r20, r10
    23d8:	94 01       	movw	r18, r8
    23da:	28 2b       	or	r18, r24
    23dc:	da 01       	movw	r26, r20
    23de:	c9 01       	movw	r24, r18
    23e0:	31 96       	adiw	r30, 0x01	; 1
    23e2:	80 80       	ld	r8, Z
    23e4:	91 2c       	mov	r9, r1
    23e6:	98 2c       	mov	r9, r8
    23e8:	88 24       	eor	r8, r8
    23ea:	a1 2c       	mov	r10, r1
    23ec:	b1 2c       	mov	r11, r1
    23ee:	88 2a       	or	r8, r24
    23f0:	99 2a       	or	r9, r25
    23f2:	aa 2a       	or	r10, r26
    23f4:	bb 2a       	or	r11, r27
    23f6:	d8 01       	movw	r26, r16
    23f8:	56 96       	adiw	r26, 0x16	; 22
    23fa:	8d 92       	st	X+, r8
    23fc:	9d 92       	st	X+, r9
    23fe:	ad 92       	st	X+, r10
    2400:	bc 92       	st	X, r11
    2402:	59 97       	sbiw	r26, 0x19	; 25
    2404:	de 96       	adiw	r26, 0x3e	; 62
    2406:	ac 91       	ld	r26, X
    2408:	f8 01       	movw	r30, r16
    240a:	a3 83       	std	Z+3, r26	; 0x03
    240c:	8f ef       	ldi	r24, 0xFF	; 255
    240e:	8a 0f       	add	r24, r26
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	08 f0       	brcs	.+2      	; 0x2416 <find_volume+0x1dc>
    2414:	20 c2       	rjmp	.+1088   	; 0x2856 <find_volume+0x61c>
    2416:	f3 ad       	ldd	r31, Z+59	; 0x3b
    2418:	f9 8b       	std	Y+17, r31	; 0x11
    241a:	2f 2f       	mov	r18, r31
    241c:	f8 01       	movw	r30, r16
    241e:	22 83       	std	Z+2, r18	; 0x02
    2420:	22 23       	and	r18, r18
    2422:	09 f4       	brne	.+2      	; 0x2426 <find_volume+0x1ec>
    2424:	1a c2       	rjmp	.+1076   	; 0x285a <find_volume+0x620>
    2426:	82 2f       	mov	r24, r18
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9c 01       	movw	r18, r24
    242c:	21 50       	subi	r18, 0x01	; 1
    242e:	31 09       	sbc	r19, r1
    2430:	82 23       	and	r24, r18
    2432:	93 23       	and	r25, r19
    2434:	89 2b       	or	r24, r25
    2436:	09 f0       	breq	.+2      	; 0x243a <find_volume+0x200>
    2438:	12 c2       	rjmp	.+1060   	; 0x285e <find_volume+0x624>
    243a:	e0 5c       	subi	r30, 0xC0	; 192
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	98 2f       	mov	r25, r24
    2444:	88 27       	eor	r24, r24
    2446:	f8 01       	movw	r30, r16
    2448:	27 ad       	ldd	r18, Z+63	; 0x3f
    244a:	1c 01       	movw	r2, r24
    244c:	22 2a       	or	r2, r18
    244e:	31 86       	std	Z+9, r3	; 0x09
    2450:	20 86       	std	Z+8, r2	; 0x08
    2452:	c1 01       	movw	r24, r2
    2454:	8f 70       	andi	r24, 0x0F	; 15
    2456:	99 27       	eor	r25, r25
    2458:	89 2b       	or	r24, r25
    245a:	09 f0       	breq	.+2      	; 0x245e <find_volume+0x224>
    245c:	02 c2       	rjmp	.+1028   	; 0x2862 <find_volume+0x628>
    245e:	ee 5b       	subi	r30, 0xBE	; 190
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	40 80       	ld	r4, Z
    2464:	51 2c       	mov	r5, r1
    2466:	54 2c       	mov	r5, r4
    2468:	44 24       	eor	r4, r4
    246a:	31 97       	sbiw	r30, 0x01	; 1
    246c:	80 81       	ld	r24, Z
    246e:	48 2a       	or	r4, r24
    2470:	61 2c       	mov	r6, r1
    2472:	71 2c       	mov	r7, r1
    2474:	41 14       	cp	r4, r1
    2476:	51 04       	cpc	r5, r1
    2478:	61 04       	cpc	r6, r1
    247a:	71 04       	cpc	r7, r1
    247c:	d1 f4       	brne	.+52     	; 0x24b2 <find_volume+0x278>
    247e:	70 96       	adiw	r30, 0x10	; 16
    2480:	80 81       	ld	r24, Z
    2482:	31 97       	sbiw	r30, 0x01	; 1
    2484:	40 80       	ld	r4, Z
    2486:	51 2c       	mov	r5, r1
    2488:	61 2c       	mov	r6, r1
    248a:	71 2c       	mov	r7, r1
    248c:	32 01       	movw	r6, r4
    248e:	55 24       	eor	r5, r5
    2490:	44 24       	eor	r4, r4
    2492:	78 2a       	or	r7, r24
    2494:	32 97       	sbiw	r30, 0x02	; 2
    2496:	80 81       	ld	r24, Z
    2498:	48 2a       	or	r4, r24
    249a:	31 96       	adiw	r30, 0x01	; 1
    249c:	80 81       	ld	r24, Z
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	98 2f       	mov	r25, r24
    24a2:	88 27       	eor	r24, r24
    24a4:	ac 01       	movw	r20, r24
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	44 2a       	or	r4, r20
    24ac:	55 2a       	or	r5, r21
    24ae:	66 2a       	or	r6, r22
    24b0:	77 2a       	or	r7, r23
    24b2:	f8 01       	movw	r30, r16
    24b4:	85 ad       	ldd	r24, Z+61	; 0x3d
    24b6:	e8 2f       	mov	r30, r24
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	3e 2f       	mov	r19, r30
    24bc:	22 27       	eor	r18, r18
    24be:	f8 01       	movw	r30, r16
    24c0:	84 ad       	ldd	r24, Z+60	; 0x3c
    24c2:	f9 01       	movw	r30, r18
    24c4:	e8 2b       	or	r30, r24
    24c6:	30 97       	sbiw	r30, 0x00	; 0
    24c8:	09 f4       	brne	.+2      	; 0x24cc <find_volume+0x292>
    24ca:	cd c1       	rjmp	.+922    	; 0x2866 <find_volume+0x62c>
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	a5 01       	movw	r20, r10
    24d0:	94 01       	movw	r18, r8
    24d2:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__muluhisi3>
    24d6:	6a 8f       	std	Y+26, r22	; 0x1a
    24d8:	7b 8f       	std	Y+27, r23	; 0x1b
    24da:	8c 8f       	std	Y+28, r24	; 0x1c
    24dc:	9d 8f       	std	Y+29, r25	; 0x1d
    24de:	9f 01       	movw	r18, r30
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	2e 8b       	std	Y+22, r18	; 0x16
    24e6:	3f 8b       	std	Y+23, r19	; 0x17
    24e8:	48 8f       	std	Y+24, r20	; 0x18
    24ea:	59 8f       	std	Y+25, r21	; 0x19
    24ec:	c1 01       	movw	r24, r2
    24ee:	92 95       	swap	r25
    24f0:	82 95       	swap	r24
    24f2:	8f 70       	andi	r24, 0x0F	; 15
    24f4:	89 27       	eor	r24, r25
    24f6:	9f 70       	andi	r25, 0x0F	; 15
    24f8:	89 27       	eor	r24, r25
    24fa:	28 0f       	add	r18, r24
    24fc:	39 1f       	adc	r19, r25
    24fe:	41 1d       	adc	r20, r1
    2500:	51 1d       	adc	r21, r1
    2502:	da 01       	movw	r26, r20
    2504:	c9 01       	movw	r24, r18
    2506:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2508:	3b 8d       	ldd	r19, Y+27	; 0x1b
    250a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    250c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    250e:	28 0f       	add	r18, r24
    2510:	39 1f       	adc	r19, r25
    2512:	4a 1f       	adc	r20, r26
    2514:	5b 1f       	adc	r21, r27
    2516:	2a 8b       	std	Y+18, r18	; 0x12
    2518:	3b 8b       	std	Y+19, r19	; 0x13
    251a:	4c 8b       	std	Y+20, r20	; 0x14
    251c:	5d 8b       	std	Y+21, r21	; 0x15
    251e:	42 16       	cp	r4, r18
    2520:	53 06       	cpc	r5, r19
    2522:	64 06       	cpc	r6, r20
    2524:	75 06       	cpc	r7, r21
    2526:	08 f4       	brcc	.+2      	; 0x252a <find_volume+0x2f0>
    2528:	a0 c1       	rjmp	.+832    	; 0x286a <find_volume+0x630>
    252a:	c3 01       	movw	r24, r6
    252c:	b2 01       	movw	r22, r4
    252e:	62 1b       	sub	r22, r18
    2530:	73 0b       	sbc	r23, r19
    2532:	84 0b       	sbc	r24, r20
    2534:	95 0b       	sbc	r25, r21
    2536:	e9 89       	ldd	r30, Y+17	; 0x11
    2538:	2e 2f       	mov	r18, r30
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	0e 94 d7 45 	call	0x8bae	; 0x8bae <__udivmodsi4>
    2544:	da 01       	movw	r26, r20
    2546:	c9 01       	movw	r24, r18
    2548:	21 15       	cp	r18, r1
    254a:	31 05       	cpc	r19, r1
    254c:	41 05       	cpc	r20, r1
    254e:	51 05       	cpc	r21, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <find_volume+0x31a>
    2552:	8d c1       	rjmp	.+794    	; 0x286e <find_volume+0x634>
    2554:	26 3f       	cpi	r18, 0xF6	; 246
    2556:	ff e0       	ldi	r31, 0x0F	; 15
    2558:	3f 07       	cpc	r19, r31
    255a:	41 05       	cpc	r20, r1
    255c:	51 05       	cpc	r21, r1
    255e:	18 f0       	brcs	.+6      	; 0x2566 <find_volume+0x32c>
    2560:	e2 e0       	ldi	r30, 0x02	; 2
    2562:	e9 8b       	std	Y+17, r30	; 0x11
    2564:	02 c0       	rjmp	.+4      	; 0x256a <find_volume+0x330>
    2566:	f1 e0       	ldi	r31, 0x01	; 1
    2568:	f9 8b       	std	Y+17, r31	; 0x11
    256a:	86 3f       	cpi	r24, 0xF6	; 246
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	a1 05       	cpc	r26, r1
    2570:	b1 05       	cpc	r27, r1
    2572:	08 f0       	brcs	.+2      	; 0x2576 <find_volume+0x33c>
    2574:	9d c1       	rjmp	.+826    	; 0x28b0 <find_volume+0x676>
    2576:	29 01       	movw	r4, r18
    2578:	3a 01       	movw	r6, r20
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	48 0e       	add	r4, r24
    257e:	51 1c       	adc	r5, r1
    2580:	61 1c       	adc	r6, r1
    2582:	71 1c       	adc	r7, r1
    2584:	d8 01       	movw	r26, r16
    2586:	52 96       	adiw	r26, 0x12	; 18
    2588:	4d 92       	st	X+, r4
    258a:	5d 92       	st	X+, r5
    258c:	6d 92       	st	X+, r6
    258e:	7c 92       	st	X, r7
    2590:	55 97       	sbiw	r26, 0x15	; 21
    2592:	f8 01       	movw	r30, r16
    2594:	c2 8e       	std	Z+26, r12	; 0x1a
    2596:	d3 8e       	std	Z+27, r13	; 0x1b
    2598:	e4 8e       	std	Z+28, r14	; 0x1c
    259a:	f5 8e       	std	Z+29, r15	; 0x1d
    259c:	8e 89       	ldd	r24, Y+22	; 0x16
    259e:	9f 89       	ldd	r25, Y+23	; 0x17
    25a0:	a8 8d       	ldd	r26, Y+24	; 0x18
    25a2:	b9 8d       	ldd	r27, Y+25	; 0x19
    25a4:	8c 0d       	add	r24, r12
    25a6:	9d 1d       	adc	r25, r13
    25a8:	ae 1d       	adc	r26, r14
    25aa:	bf 1d       	adc	r27, r15
    25ac:	86 8f       	std	Z+30, r24	; 0x1e
    25ae:	97 8f       	std	Z+31, r25	; 0x1f
    25b0:	a0 a3       	std	Z+32, r26	; 0x20
    25b2:	b1 a3       	std	Z+33, r27	; 0x21
    25b4:	4a 89       	ldd	r20, Y+18	; 0x12
    25b6:	5b 89       	ldd	r21, Y+19	; 0x13
    25b8:	6c 89       	ldd	r22, Y+20	; 0x14
    25ba:	7d 89       	ldd	r23, Y+21	; 0x15
    25bc:	4c 0d       	add	r20, r12
    25be:	5d 1d       	adc	r21, r13
    25c0:	6e 1d       	adc	r22, r14
    25c2:	7f 1d       	adc	r23, r15
    25c4:	46 a3       	std	Z+38, r20	; 0x26
    25c6:	57 a3       	std	Z+39, r21	; 0x27
    25c8:	60 a7       	std	Z+40, r22	; 0x28
    25ca:	71 a7       	std	Z+41, r23	; 0x29
    25cc:	f9 89       	ldd	r31, Y+17	; 0x11
    25ce:	f3 30       	cpi	r31, 0x03	; 3
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <find_volume+0x39a>
    25d2:	44 c0       	rjmp	.+136    	; 0x265c <find_volume+0x422>
    25d4:	23 28       	or	r2, r3
    25d6:	09 f0       	breq	.+2      	; 0x25da <find_volume+0x3a0>
    25d8:	4c c1       	rjmp	.+664    	; 0x2872 <find_volume+0x638>
    25da:	f8 01       	movw	r30, r16
    25dc:	e3 5a       	subi	r30, 0xA3	; 163
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	20 81       	ld	r18, Z
    25e2:	31 97       	sbiw	r30, 0x01	; 1
    25e4:	80 81       	ld	r24, Z
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	dc 01       	movw	r26, r24
    25ee:	99 27       	eor	r25, r25
    25f0:	88 27       	eor	r24, r24
    25f2:	b2 2b       	or	r27, r18
    25f4:	32 97       	sbiw	r30, 0x02	; 2
    25f6:	20 81       	ld	r18, Z
    25f8:	ac 01       	movw	r20, r24
    25fa:	bd 01       	movw	r22, r26
    25fc:	42 2b       	or	r20, r18
    25fe:	31 96       	adiw	r30, 0x01	; 1
    2600:	80 81       	ld	r24, Z
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	92 2f       	mov	r25, r18
    2608:	88 27       	eor	r24, r24
    260a:	a0 e0       	ldi	r26, 0x00	; 0
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	84 2b       	or	r24, r20
    2610:	95 2b       	or	r25, r21
    2612:	a6 2b       	or	r26, r22
    2614:	b7 2b       	or	r27, r23
    2616:	f8 01       	movw	r30, r16
    2618:	82 a3       	std	Z+34, r24	; 0x22
    261a:	93 a3       	std	Z+35, r25	; 0x23
    261c:	a4 a3       	std	Z+36, r26	; 0x24
    261e:	b5 a3       	std	Z+37, r27	; 0x25
    2620:	44 0c       	add	r4, r4
    2622:	55 1c       	adc	r5, r5
    2624:	66 1c       	adc	r6, r6
    2626:	77 1c       	adc	r7, r7
    2628:	44 0c       	add	r4, r4
    262a:	55 1c       	adc	r5, r5
    262c:	66 1c       	adc	r6, r6
    262e:	77 1c       	adc	r7, r7
    2630:	ff ef       	ldi	r31, 0xFF	; 255
    2632:	4f 0e       	add	r4, r31
    2634:	f1 e0       	ldi	r31, 0x01	; 1
    2636:	5f 1e       	adc	r5, r31
    2638:	61 1c       	adc	r6, r1
    263a:	71 1c       	adc	r7, r1
    263c:	03 2e       	mov	r0, r19
    263e:	39 e0       	ldi	r19, 0x09	; 9
    2640:	76 94       	lsr	r7
    2642:	67 94       	ror	r6
    2644:	57 94       	ror	r5
    2646:	47 94       	ror	r4
    2648:	3a 95       	dec	r19
    264a:	d1 f7       	brne	.-12     	; 0x2640 <find_volume+0x406>
    264c:	30 2d       	mov	r19, r0
    264e:	84 14       	cp	r8, r4
    2650:	95 04       	cpc	r9, r5
    2652:	a6 04       	cpc	r10, r6
    2654:	b7 04       	cpc	r11, r7
    2656:	08 f4       	brcc	.+2      	; 0x265a <find_volume+0x420>
    2658:	0e c1       	rjmp	.+540    	; 0x2876 <find_volume+0x63c>
    265a:	56 c1       	rjmp	.+684    	; 0x2908 <find_volume+0x6ce>
    265c:	23 28       	or	r2, r3
    265e:	09 f4       	brne	.+2      	; 0x2662 <find_volume+0x428>
    2660:	0c c1       	rjmp	.+536    	; 0x287a <find_volume+0x640>
    2662:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2664:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2666:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2668:	5d 8d       	ldd	r21, Y+29	; 0x1d
    266a:	82 0f       	add	r24, r18
    266c:	93 1f       	adc	r25, r19
    266e:	a4 1f       	adc	r26, r20
    2670:	b5 1f       	adc	r27, r21
    2672:	f8 01       	movw	r30, r16
    2674:	82 a3       	std	Z+34, r24	; 0x22
    2676:	93 a3       	std	Z+35, r25	; 0x23
    2678:	a4 a3       	std	Z+36, r26	; 0x24
    267a:	b5 a3       	std	Z+37, r27	; 0x25
    267c:	f9 89       	ldd	r31, Y+17	; 0x11
    267e:	f2 30       	cpi	r31, 0x02	; 2
    2680:	29 f4       	brne	.+10     	; 0x268c <find_volume+0x452>
    2682:	44 0c       	add	r4, r4
    2684:	55 1c       	adc	r5, r5
    2686:	66 1c       	adc	r6, r6
    2688:	77 1c       	adc	r7, r7
    268a:	6a c1       	rjmp	.+724    	; 0x2960 <find_volume+0x726>
    268c:	a3 e0       	ldi	r26, 0x03	; 3
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	a3 01       	movw	r20, r6
    2692:	92 01       	movw	r18, r4
    2694:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__muluhisi3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	b6 95       	lsr	r27
    269e:	a7 95       	ror	r26
    26a0:	97 95       	ror	r25
    26a2:	87 95       	ror	r24
    26a4:	21 e0       	ldi	r18, 0x01	; 1
    26a6:	42 22       	and	r4, r18
    26a8:	55 24       	eor	r5, r5
    26aa:	66 24       	eor	r6, r6
    26ac:	77 24       	eor	r7, r7
    26ae:	48 0e       	add	r4, r24
    26b0:	59 1e       	adc	r5, r25
    26b2:	6a 1e       	adc	r6, r26
    26b4:	7b 1e       	adc	r7, r27
    26b6:	54 c1       	rjmp	.+680    	; 0x2960 <find_volume+0x726>
    26b8:	b7 01       	movw	r22, r14
    26ba:	a6 01       	movw	r20, r12
    26bc:	4f 5f       	subi	r20, 0xFF	; 255
    26be:	5f 4f       	sbci	r21, 0xFF	; 255
    26c0:	6f 4f       	sbci	r22, 0xFF	; 255
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	c8 01       	movw	r24, r16
    26c6:	f0 dc       	rcall	.-1568   	; 0x20a8 <move_window>
    26c8:	81 11       	cpse	r24, r1
    26ca:	96 c0       	rjmp	.+300    	; 0x27f8 <find_volume+0x5be>
    26cc:	d8 01       	movw	r26, r16
    26ce:	15 96       	adiw	r26, 0x05	; 5
    26d0:	1c 92       	st	X, r1
    26d2:	f8 01       	movw	r30, r16
    26d4:	e3 5d       	subi	r30, 0xD3	; 211
    26d6:	fd 4f       	sbci	r31, 0xFD	; 253
    26d8:	80 81       	ld	r24, Z
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	98 2f       	mov	r25, r24
    26de:	88 27       	eor	r24, r24
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	20 81       	ld	r18, Z
    26e4:	82 2b       	or	r24, r18
    26e6:	85 35       	cpi	r24, 0x55	; 85
    26e8:	9a 4a       	sbci	r25, 0xAA	; 170
    26ea:	09 f0       	breq	.+2      	; 0x26ee <find_volume+0x4b4>
    26ec:	88 c0       	rjmp	.+272    	; 0x27fe <find_volume+0x5c4>
    26ee:	f8 01       	movw	r30, r16
    26f0:	21 a9       	ldd	r18, Z+49	; 0x31
    26f2:	80 a9       	ldd	r24, Z+48	; 0x30
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 e0       	ldi	r26, 0x00	; 0
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	dc 01       	movw	r26, r24
    26fc:	99 27       	eor	r25, r25
    26fe:	88 27       	eor	r24, r24
    2700:	b2 2b       	or	r27, r18
    2702:	26 a5       	ldd	r18, Z+46	; 0x2e
    2704:	ac 01       	movw	r20, r24
    2706:	bd 01       	movw	r22, r26
    2708:	42 2b       	or	r20, r18
    270a:	27 a5       	ldd	r18, Z+47	; 0x2f
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	92 2f       	mov	r25, r18
    2710:	88 27       	eor	r24, r24
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	84 2b       	or	r24, r20
    2718:	95 2b       	or	r25, r21
    271a:	a6 2b       	or	r26, r22
    271c:	b7 2b       	or	r27, r23
    271e:	82 35       	cpi	r24, 0x52	; 82
    2720:	92 45       	sbci	r25, 0x52	; 82
    2722:	a1 46       	sbci	r26, 0x61	; 97
    2724:	b1 44       	sbci	r27, 0x41	; 65
    2726:	09 f0       	breq	.+2      	; 0x272a <find_volume+0x4f0>
    2728:	6d c0       	rjmp	.+218    	; 0x2804 <find_volume+0x5ca>
    272a:	f8 01       	movw	r30, r16
    272c:	eb 5e       	subi	r30, 0xEB	; 235
    272e:	fd 4f       	sbci	r31, 0xFD	; 253
    2730:	20 81       	ld	r18, Z
    2732:	31 97       	sbiw	r30, 0x01	; 1
    2734:	80 81       	ld	r24, Z
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e0       	ldi	r26, 0x00	; 0
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	dc 01       	movw	r26, r24
    273e:	99 27       	eor	r25, r25
    2740:	88 27       	eor	r24, r24
    2742:	b2 2b       	or	r27, r18
    2744:	32 97       	sbiw	r30, 0x02	; 2
    2746:	20 81       	ld	r18, Z
    2748:	ac 01       	movw	r20, r24
    274a:	bd 01       	movw	r22, r26
    274c:	42 2b       	or	r20, r18
    274e:	31 96       	adiw	r30, 0x01	; 1
    2750:	20 81       	ld	r18, Z
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	92 2f       	mov	r25, r18
    2756:	88 27       	eor	r24, r24
    2758:	a0 e0       	ldi	r26, 0x00	; 0
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	84 2b       	or	r24, r20
    275e:	95 2b       	or	r25, r21
    2760:	a6 2b       	or	r26, r22
    2762:	b7 2b       	or	r27, r23
    2764:	82 37       	cpi	r24, 0x72	; 114
    2766:	92 47       	sbci	r25, 0x72	; 114
    2768:	a1 44       	sbci	r26, 0x41	; 65
    276a:	b1 46       	sbci	r27, 0x61	; 97
    276c:	09 f0       	breq	.+2      	; 0x2770 <find_volume+0x536>
    276e:	4d c0       	rjmp	.+154    	; 0x280a <find_volume+0x5d0>
    2770:	36 96       	adiw	r30, 0x06	; 6
    2772:	20 81       	ld	r18, Z
    2774:	31 97       	sbiw	r30, 0x01	; 1
    2776:	80 81       	ld	r24, Z
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e0       	ldi	r26, 0x00	; 0
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	dc 01       	movw	r26, r24
    2780:	99 27       	eor	r25, r25
    2782:	88 27       	eor	r24, r24
    2784:	b2 2b       	or	r27, r18
    2786:	32 97       	sbiw	r30, 0x02	; 2
    2788:	20 81       	ld	r18, Z
    278a:	ac 01       	movw	r20, r24
    278c:	bd 01       	movw	r22, r26
    278e:	42 2b       	or	r20, r18
    2790:	31 96       	adiw	r30, 0x01	; 1
    2792:	20 81       	ld	r18, Z
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	92 2f       	mov	r25, r18
    2798:	88 27       	eor	r24, r24
    279a:	a0 e0       	ldi	r26, 0x00	; 0
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	84 2b       	or	r24, r20
    27a0:	95 2b       	or	r25, r21
    27a2:	a6 2b       	or	r26, r22
    27a4:	b7 2b       	or	r27, r23
    27a6:	f8 01       	movw	r30, r16
    27a8:	86 87       	std	Z+14, r24	; 0x0e
    27aa:	97 87       	std	Z+15, r25	; 0x0f
    27ac:	a0 8b       	std	Z+16, r26	; 0x10
    27ae:	b1 8b       	std	Z+17, r27	; 0x11
    27b0:	e3 5e       	subi	r30, 0xE3	; 227
    27b2:	fd 4f       	sbci	r31, 0xFD	; 253
    27b4:	20 81       	ld	r18, Z
    27b6:	31 97       	sbiw	r30, 0x01	; 1
    27b8:	80 81       	ld	r24, Z
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	a0 e0       	ldi	r26, 0x00	; 0
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	dc 01       	movw	r26, r24
    27c2:	99 27       	eor	r25, r25
    27c4:	88 27       	eor	r24, r24
    27c6:	b2 2b       	or	r27, r18
    27c8:	32 97       	sbiw	r30, 0x02	; 2
    27ca:	20 81       	ld	r18, Z
    27cc:	ac 01       	movw	r20, r24
    27ce:	bd 01       	movw	r22, r26
    27d0:	42 2b       	or	r20, r18
    27d2:	31 96       	adiw	r30, 0x01	; 1
    27d4:	20 81       	ld	r18, Z
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	92 2f       	mov	r25, r18
    27da:	88 27       	eor	r24, r24
    27dc:	a0 e0       	ldi	r26, 0x00	; 0
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	84 2b       	or	r24, r20
    27e2:	95 2b       	or	r25, r21
    27e4:	a6 2b       	or	r26, r22
    27e6:	b7 2b       	or	r27, r23
    27e8:	f8 01       	movw	r30, r16
    27ea:	82 87       	std	Z+10, r24	; 0x0a
    27ec:	93 87       	std	Z+11, r25	; 0x0b
    27ee:	a4 87       	std	Z+12, r26	; 0x0c
    27f0:	b5 87       	std	Z+13, r27	; 0x0d
    27f2:	f3 e0       	ldi	r31, 0x03	; 3
    27f4:	f9 8b       	std	Y+17, r31	; 0x11
    27f6:	0b c0       	rjmp	.+22     	; 0x280e <find_volume+0x5d4>
    27f8:	e3 e0       	ldi	r30, 0x03	; 3
    27fa:	e9 8b       	std	Y+17, r30	; 0x11
    27fc:	08 c0       	rjmp	.+16     	; 0x280e <find_volume+0x5d4>
    27fe:	f3 e0       	ldi	r31, 0x03	; 3
    2800:	f9 8b       	std	Y+17, r31	; 0x11
    2802:	05 c0       	rjmp	.+10     	; 0x280e <find_volume+0x5d4>
    2804:	e3 e0       	ldi	r30, 0x03	; 3
    2806:	e9 8b       	std	Y+17, r30	; 0x11
    2808:	02 c0       	rjmp	.+4      	; 0x280e <find_volume+0x5d4>
    280a:	f3 e0       	ldi	r31, 0x03	; 3
    280c:	f9 8b       	std	Y+17, r31	; 0x11
    280e:	e9 89       	ldd	r30, Y+17	; 0x11
    2810:	d8 01       	movw	r26, r16
    2812:	ec 93       	st	X, r30
    2814:	80 91 25 04 	lds	r24, 0x0425
    2818:	90 91 26 04 	lds	r25, 0x0426
    281c:	01 96       	adiw	r24, 0x01	; 1
    281e:	90 93 26 04 	sts	0x0426, r25
    2822:	80 93 25 04 	sts	0x0425, r24
    2826:	17 96       	adiw	r26, 0x07	; 7
    2828:	9c 93       	st	X, r25
    282a:	8e 93       	st	-X, r24
    282c:	16 97       	sbiw	r26, 0x06	; 6
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	ad c0       	rjmp	.+346    	; 0x298c <find_volume+0x752>
    2832:	8b e0       	ldi	r24, 0x0B	; 11
    2834:	ab c0       	rjmp	.+342    	; 0x298c <find_volume+0x752>
    2836:	8c e0       	ldi	r24, 0x0C	; 12
    2838:	a9 c0       	rjmp	.+338    	; 0x298c <find_volume+0x752>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	a7 c0       	rjmp	.+334    	; 0x298c <find_volume+0x752>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	a5 c0       	rjmp	.+330    	; 0x298c <find_volume+0x752>
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	a3 c0       	rjmp	.+326    	; 0x298c <find_volume+0x752>
    2846:	8a e0       	ldi	r24, 0x0A	; 10
    2848:	a1 c0       	rjmp	.+322    	; 0x298c <find_volume+0x752>
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	9f c0       	rjmp	.+318    	; 0x298c <find_volume+0x752>
    284e:	8d e0       	ldi	r24, 0x0D	; 13
    2850:	9d c0       	rjmp	.+314    	; 0x298c <find_volume+0x752>
    2852:	8d e0       	ldi	r24, 0x0D	; 13
    2854:	9b c0       	rjmp	.+310    	; 0x298c <find_volume+0x752>
    2856:	8d e0       	ldi	r24, 0x0D	; 13
    2858:	99 c0       	rjmp	.+306    	; 0x298c <find_volume+0x752>
    285a:	8d e0       	ldi	r24, 0x0D	; 13
    285c:	97 c0       	rjmp	.+302    	; 0x298c <find_volume+0x752>
    285e:	8d e0       	ldi	r24, 0x0D	; 13
    2860:	95 c0       	rjmp	.+298    	; 0x298c <find_volume+0x752>
    2862:	8d e0       	ldi	r24, 0x0D	; 13
    2864:	93 c0       	rjmp	.+294    	; 0x298c <find_volume+0x752>
    2866:	8d e0       	ldi	r24, 0x0D	; 13
    2868:	91 c0       	rjmp	.+290    	; 0x298c <find_volume+0x752>
    286a:	8d e0       	ldi	r24, 0x0D	; 13
    286c:	8f c0       	rjmp	.+286    	; 0x298c <find_volume+0x752>
    286e:	8d e0       	ldi	r24, 0x0D	; 13
    2870:	8d c0       	rjmp	.+282    	; 0x298c <find_volume+0x752>
    2872:	8d e0       	ldi	r24, 0x0D	; 13
    2874:	8b c0       	rjmp	.+278    	; 0x298c <find_volume+0x752>
    2876:	8d e0       	ldi	r24, 0x0D	; 13
    2878:	89 c0       	rjmp	.+274    	; 0x298c <find_volume+0x752>
    287a:	8d e0       	ldi	r24, 0x0D	; 13
    287c:	87 c0       	rjmp	.+270    	; 0x298c <find_volume+0x752>
    287e:	8d e0       	ldi	r24, 0x0D	; 13
    2880:	85 c0       	rjmp	.+266    	; 0x298c <find_volume+0x752>
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	ba 01       	movw	r22, r20
    2888:	c8 01       	movw	r24, r16
    288a:	4a dc       	rcall	.-1900   	; 0x2120 <check_fs>
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	09 f0       	breq	.+2      	; 0x2892 <find_volume+0x658>
    2890:	6e cd       	rjmp	.-1316   	; 0x236e <find_volume+0x134>
    2892:	9e 01       	movw	r18, r28
    2894:	2f 5f       	subi	r18, 0xFF	; 255
    2896:	3f 4f       	sbci	r19, 0xFF	; 255
    2898:	59 01       	movw	r10, r18
    289a:	f8 01       	movw	r30, r16
    289c:	e9 50       	subi	r30, 0x09	; 9
    289e:	fe 4f       	sbci	r31, 0xFE	; 254
    28a0:	a8 01       	movw	r20, r16
    28a2:	49 5c       	subi	r20, 0xC9	; 201
    28a4:	5d 4f       	sbci	r21, 0xFD	; 253
    28a6:	81 2c       	mov	r8, r1
    28a8:	91 2c       	mov	r9, r1
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	17 cd       	rjmp	.-1490   	; 0x22de <find_volume+0xa4>
    28b0:	29 01       	movw	r4, r18
    28b2:	3a 01       	movw	r6, r20
    28b4:	62 e0       	ldi	r22, 0x02	; 2
    28b6:	46 0e       	add	r4, r22
    28b8:	51 1c       	adc	r5, r1
    28ba:	61 1c       	adc	r6, r1
    28bc:	71 1c       	adc	r7, r1
    28be:	d8 01       	movw	r26, r16
    28c0:	52 96       	adiw	r26, 0x12	; 18
    28c2:	4d 92       	st	X+, r4
    28c4:	5d 92       	st	X+, r5
    28c6:	6d 92       	st	X+, r6
    28c8:	7c 92       	st	X, r7
    28ca:	55 97       	sbiw	r26, 0x15	; 21
    28cc:	f8 01       	movw	r30, r16
    28ce:	c2 8e       	std	Z+26, r12	; 0x1a
    28d0:	d3 8e       	std	Z+27, r13	; 0x1b
    28d2:	e4 8e       	std	Z+28, r14	; 0x1c
    28d4:	f5 8e       	std	Z+29, r15	; 0x1d
    28d6:	8e 89       	ldd	r24, Y+22	; 0x16
    28d8:	9f 89       	ldd	r25, Y+23	; 0x17
    28da:	a8 8d       	ldd	r26, Y+24	; 0x18
    28dc:	b9 8d       	ldd	r27, Y+25	; 0x19
    28de:	8c 0d       	add	r24, r12
    28e0:	9d 1d       	adc	r25, r13
    28e2:	ae 1d       	adc	r26, r14
    28e4:	bf 1d       	adc	r27, r15
    28e6:	86 8f       	std	Z+30, r24	; 0x1e
    28e8:	97 8f       	std	Z+31, r25	; 0x1f
    28ea:	a0 a3       	std	Z+32, r26	; 0x20
    28ec:	b1 a3       	std	Z+33, r27	; 0x21
    28ee:	8a 89       	ldd	r24, Y+18	; 0x12
    28f0:	9b 89       	ldd	r25, Y+19	; 0x13
    28f2:	ac 89       	ldd	r26, Y+20	; 0x14
    28f4:	bd 89       	ldd	r27, Y+21	; 0x15
    28f6:	8c 0d       	add	r24, r12
    28f8:	9d 1d       	adc	r25, r13
    28fa:	ae 1d       	adc	r26, r14
    28fc:	bf 1d       	adc	r27, r15
    28fe:	86 a3       	std	Z+38, r24	; 0x26
    2900:	97 a3       	std	Z+39, r25	; 0x27
    2902:	a0 a7       	std	Z+40, r26	; 0x28
    2904:	b1 a7       	std	Z+41, r27	; 0x29
    2906:	66 ce       	rjmp	.-820    	; 0x25d4 <find_volume+0x39a>
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	9f ef       	ldi	r25, 0xFF	; 255
    290c:	dc 01       	movw	r26, r24
    290e:	f8 01       	movw	r30, r16
    2910:	86 87       	std	Z+14, r24	; 0x0e
    2912:	97 87       	std	Z+15, r25	; 0x0f
    2914:	a0 8b       	std	Z+16, r26	; 0x10
    2916:	b1 8b       	std	Z+17, r27	; 0x11
    2918:	82 87       	std	Z+10, r24	; 0x0a
    291a:	93 87       	std	Z+11, r25	; 0x0b
    291c:	a4 87       	std	Z+12, r26	; 0x0c
    291e:	b5 87       	std	Z+13, r27	; 0x0d
    2920:	80 e8       	ldi	r24, 0x80	; 128
    2922:	85 83       	std	Z+5, r24	; 0x05
    2924:	e1 5a       	subi	r30, 0xA1	; 161
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	98 2f       	mov	r25, r24
    292e:	88 27       	eor	r24, r24
    2930:	31 97       	sbiw	r30, 0x01	; 1
    2932:	20 81       	ld	r18, Z
    2934:	82 2b       	or	r24, r18
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	09 f4       	brne	.+2      	; 0x293c <find_volume+0x702>
    293a:	be ce       	rjmp	.-644    	; 0x26b8 <find_volume+0x47e>
    293c:	f3 e0       	ldi	r31, 0x03	; 3
    293e:	f9 8b       	std	Y+17, r31	; 0x11
    2940:	66 cf       	rjmp	.-308    	; 0x280e <find_volume+0x5d4>
    2942:	8f ef       	ldi	r24, 0xFF	; 255
    2944:	9f ef       	ldi	r25, 0xFF	; 255
    2946:	dc 01       	movw	r26, r24
    2948:	f8 01       	movw	r30, r16
    294a:	86 87       	std	Z+14, r24	; 0x0e
    294c:	97 87       	std	Z+15, r25	; 0x0f
    294e:	a0 8b       	std	Z+16, r26	; 0x10
    2950:	b1 8b       	std	Z+17, r27	; 0x11
    2952:	82 87       	std	Z+10, r24	; 0x0a
    2954:	93 87       	std	Z+11, r25	; 0x0b
    2956:	a4 87       	std	Z+12, r26	; 0x0c
    2958:	b5 87       	std	Z+13, r27	; 0x0d
    295a:	80 e8       	ldi	r24, 0x80	; 128
    295c:	85 83       	std	Z+5, r24	; 0x05
    295e:	57 cf       	rjmp	.-338    	; 0x280e <find_volume+0x5d4>
    2960:	ff ef       	ldi	r31, 0xFF	; 255
    2962:	4f 0e       	add	r4, r31
    2964:	f1 e0       	ldi	r31, 0x01	; 1
    2966:	5f 1e       	adc	r5, r31
    2968:	61 1c       	adc	r6, r1
    296a:	71 1c       	adc	r7, r1
    296c:	03 2e       	mov	r0, r19
    296e:	39 e0       	ldi	r19, 0x09	; 9
    2970:	76 94       	lsr	r7
    2972:	67 94       	ror	r6
    2974:	57 94       	ror	r5
    2976:	47 94       	ror	r4
    2978:	3a 95       	dec	r19
    297a:	d1 f7       	brne	.-12     	; 0x2970 <find_volume+0x736>
    297c:	30 2d       	mov	r19, r0
    297e:	84 14       	cp	r8, r4
    2980:	95 04       	cpc	r9, r5
    2982:	a6 04       	cpc	r10, r6
    2984:	b7 04       	cpc	r11, r7
    2986:	08 f4       	brcc	.+2      	; 0x298a <find_volume+0x750>
    2988:	7a cf       	rjmp	.-268    	; 0x287e <find_volume+0x644>
    298a:	db cf       	rjmp	.-74     	; 0x2942 <find_volume+0x708>
    298c:	6d 96       	adiw	r28, 0x1d	; 29
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	ff 90       	pop	r15
    29a2:	ef 90       	pop	r14
    29a4:	df 90       	pop	r13
    29a6:	cf 90       	pop	r12
    29a8:	bf 90       	pop	r11
    29aa:	af 90       	pop	r10
    29ac:	9f 90       	pop	r9
    29ae:	8f 90       	pop	r8
    29b0:	7f 90       	pop	r7
    29b2:	6f 90       	pop	r6
    29b4:	5f 90       	pop	r5
    29b6:	4f 90       	pop	r4
    29b8:	3f 90       	pop	r3
    29ba:	2f 90       	pop	r2
    29bc:	08 95       	ret

000029be <clust2sect>:
    29be:	cf 92       	push	r12
    29c0:	df 92       	push	r13
    29c2:	ef 92       	push	r14
    29c4:	ff 92       	push	r15
    29c6:	fc 01       	movw	r30, r24
    29c8:	9a 01       	movw	r18, r20
    29ca:	ab 01       	movw	r20, r22
    29cc:	22 50       	subi	r18, 0x02	; 2
    29ce:	31 09       	sbc	r19, r1
    29d0:	41 09       	sbc	r20, r1
    29d2:	51 09       	sbc	r21, r1
    29d4:	c2 88       	ldd	r12, Z+18	; 0x12
    29d6:	d3 88       	ldd	r13, Z+19	; 0x13
    29d8:	e4 88       	ldd	r14, Z+20	; 0x14
    29da:	f5 88       	ldd	r15, Z+21	; 0x15
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	c8 1a       	sub	r12, r24
    29e0:	d1 08       	sbc	r13, r1
    29e2:	e1 08       	sbc	r14, r1
    29e4:	f1 08       	sbc	r15, r1
    29e6:	2c 15       	cp	r18, r12
    29e8:	3d 05       	cpc	r19, r13
    29ea:	4e 05       	cpc	r20, r14
    29ec:	5f 05       	cpc	r21, r15
    29ee:	68 f4       	brcc	.+26     	; 0x2a0a <clust2sect+0x4c>
    29f0:	a2 81       	ldd	r26, Z+2	; 0x02
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <__muluhisi3>
    29f8:	c6 a0       	ldd	r12, Z+38	; 0x26
    29fa:	d7 a0       	ldd	r13, Z+39	; 0x27
    29fc:	e0 a4       	ldd	r14, Z+40	; 0x28
    29fe:	f1 a4       	ldd	r15, Z+41	; 0x29
    2a00:	6c 0d       	add	r22, r12
    2a02:	7d 1d       	adc	r23, r13
    2a04:	8e 1d       	adc	r24, r14
    2a06:	9f 1d       	adc	r25, r15
    2a08:	03 c0       	rjmp	.+6      	; 0x2a10 <clust2sect+0x52>
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	cb 01       	movw	r24, r22
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	08 95       	ret

00002a1a <get_fat>:
    2a1a:	af 92       	push	r10
    2a1c:	bf 92       	push	r11
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	ec 01       	movw	r28, r24
    2a30:	6a 01       	movw	r12, r20
    2a32:	7b 01       	movw	r14, r22
    2a34:	42 30       	cpi	r20, 0x02	; 2
    2a36:	51 05       	cpc	r21, r1
    2a38:	61 05       	cpc	r22, r1
    2a3a:	71 05       	cpc	r23, r1
    2a3c:	08 f4       	brcc	.+2      	; 0x2a40 <get_fat+0x26>
    2a3e:	c3 c0       	rjmp	.+390    	; 0x2bc6 <get_fat+0x1ac>
    2a40:	8a 89       	ldd	r24, Y+18	; 0x12
    2a42:	9b 89       	ldd	r25, Y+19	; 0x13
    2a44:	ac 89       	ldd	r26, Y+20	; 0x14
    2a46:	bd 89       	ldd	r27, Y+21	; 0x15
    2a48:	48 17       	cp	r20, r24
    2a4a:	59 07       	cpc	r21, r25
    2a4c:	6a 07       	cpc	r22, r26
    2a4e:	7b 07       	cpc	r23, r27
    2a50:	08 f0       	brcs	.+2      	; 0x2a54 <get_fat+0x3a>
    2a52:	be c0       	rjmp	.+380    	; 0x2bd0 <get_fat+0x1b6>
    2a54:	88 81       	ld	r24, Y
    2a56:	82 30       	cpi	r24, 0x02	; 2
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <get_fat+0x42>
    2a5a:	4b c0       	rjmp	.+150    	; 0x2af2 <get_fat+0xd8>
    2a5c:	83 30       	cpi	r24, 0x03	; 3
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <get_fat+0x48>
    2a60:	6c c0       	rjmp	.+216    	; 0x2b3a <get_fat+0x120>
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <get_fat+0x4e>
    2a66:	b9 c0       	rjmp	.+370    	; 0x2bda <get_fat+0x1c0>
    2a68:	8a 01       	movw	r16, r20
    2a6a:	16 95       	lsr	r17
    2a6c:	07 95       	ror	r16
    2a6e:	04 0f       	add	r16, r20
    2a70:	15 1f       	adc	r17, r21
    2a72:	c8 01       	movw	r24, r16
    2a74:	89 2f       	mov	r24, r25
    2a76:	99 27       	eor	r25, r25
    2a78:	86 95       	lsr	r24
    2a7a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2a7c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2a7e:	68 a1       	ldd	r22, Y+32	; 0x20
    2a80:	79 a1       	ldd	r23, Y+33	; 0x21
    2a82:	48 0f       	add	r20, r24
    2a84:	59 1f       	adc	r21, r25
    2a86:	61 1d       	adc	r22, r1
    2a88:	71 1d       	adc	r23, r1
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	0d db       	rcall	.-2534   	; 0x20a8 <move_window>
    2a8e:	81 11       	cpse	r24, r1
    2a90:	a9 c0       	rjmp	.+338    	; 0x2be4 <get_fat+0x1ca>
    2a92:	58 01       	movw	r10, r16
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	a8 1a       	sub	r10, r24
    2a98:	b8 0a       	sbc	r11, r24
    2a9a:	11 70       	andi	r17, 0x01	; 1
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e0 0f       	add	r30, r16
    2aa0:	f1 1f       	adc	r31, r17
    2aa2:	16 a5       	ldd	r17, Z+46	; 0x2e
    2aa4:	c5 01       	movw	r24, r10
    2aa6:	89 2f       	mov	r24, r25
    2aa8:	99 27       	eor	r25, r25
    2aaa:	86 95       	lsr	r24
    2aac:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2aae:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2ab0:	68 a1       	ldd	r22, Y+32	; 0x20
    2ab2:	79 a1       	ldd	r23, Y+33	; 0x21
    2ab4:	48 0f       	add	r20, r24
    2ab6:	59 1f       	adc	r21, r25
    2ab8:	61 1d       	adc	r22, r1
    2aba:	71 1d       	adc	r23, r1
    2abc:	ce 01       	movw	r24, r28
    2abe:	f4 da       	rcall	.-2584   	; 0x20a8 <move_window>
    2ac0:	81 11       	cpse	r24, r1
    2ac2:	94 c0       	rjmp	.+296    	; 0x2bec <get_fat+0x1d2>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	b8 22       	and	r11, r24
    2ac8:	ca 0d       	add	r28, r10
    2aca:	db 1d       	adc	r29, r11
    2acc:	8e a5       	ldd	r24, Y+46	; 0x2e
    2ace:	61 2f       	mov	r22, r17
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	78 2b       	or	r23, r24
    2ad4:	c0 fe       	sbrs	r12, 0
    2ad6:	09 c0       	rjmp	.+18     	; 0x2aea <get_fat+0xd0>
    2ad8:	72 95       	swap	r23
    2ada:	62 95       	swap	r22
    2adc:	6f 70       	andi	r22, 0x0F	; 15
    2ade:	67 27       	eor	r22, r23
    2ae0:	7f 70       	andi	r23, 0x0F	; 15
    2ae2:	67 27       	eor	r22, r23
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	8c c0       	rjmp	.+280    	; 0x2c02 <get_fat+0x1e8>
    2aea:	7f 70       	andi	r23, 0x0F	; 15
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	88 c0       	rjmp	.+272    	; 0x2c02 <get_fat+0x1e8>
    2af2:	45 2f       	mov	r20, r21
    2af4:	56 2f       	mov	r21, r22
    2af6:	67 2f       	mov	r22, r23
    2af8:	77 27       	eor	r23, r23
    2afa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2afc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2afe:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b00:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b02:	48 0f       	add	r20, r24
    2b04:	59 1f       	adc	r21, r25
    2b06:	6a 1f       	adc	r22, r26
    2b08:	7b 1f       	adc	r23, r27
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	cd da       	rcall	.-2662   	; 0x20a8 <move_window>
    2b0e:	81 11       	cpse	r24, r1
    2b10:	71 c0       	rjmp	.+226    	; 0x2bf4 <get_fat+0x1da>
    2b12:	cc 0c       	add	r12, r12
    2b14:	dd 1c       	adc	r13, r13
    2b16:	ee 1c       	adc	r14, r14
    2b18:	ff 1c       	adc	r15, r15
    2b1a:	e8 94       	clt
    2b1c:	c0 f8       	bld	r12, 0
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	d8 22       	and	r13, r24
    2b22:	ee 24       	eor	r14, r14
    2b24:	ff 24       	eor	r15, r15
    2b26:	fe 01       	movw	r30, r28
    2b28:	ec 0d       	add	r30, r12
    2b2a:	fd 1d       	adc	r31, r13
    2b2c:	66 a5       	ldd	r22, Z+46	; 0x2e
    2b2e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b30:	70 e0       	ldi	r23, 0x00	; 0
    2b32:	78 2b       	or	r23, r24
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	64 c0       	rjmp	.+200    	; 0x2c02 <get_fat+0x1e8>
    2b3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b3e:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b40:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b42:	68 94       	set
    2b44:	16 f8       	bld	r1, 6
    2b46:	76 95       	lsr	r23
    2b48:	67 95       	ror	r22
    2b4a:	57 95       	ror	r21
    2b4c:	47 95       	ror	r20
    2b4e:	16 94       	lsr	r1
    2b50:	d1 f7       	brne	.-12     	; 0x2b46 <get_fat+0x12c>
    2b52:	48 0f       	add	r20, r24
    2b54:	59 1f       	adc	r21, r25
    2b56:	6a 1f       	adc	r22, r26
    2b58:	7b 1f       	adc	r23, r27
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	a5 da       	rcall	.-2742   	; 0x20a8 <move_window>
    2b5e:	81 11       	cpse	r24, r1
    2b60:	4d c0       	rjmp	.+154    	; 0x2bfc <get_fat+0x1e2>
    2b62:	cc 0c       	add	r12, r12
    2b64:	dd 1c       	adc	r13, r13
    2b66:	ee 1c       	adc	r14, r14
    2b68:	ff 1c       	adc	r15, r15
    2b6a:	cc 0c       	add	r12, r12
    2b6c:	dd 1c       	adc	r13, r13
    2b6e:	ee 1c       	adc	r14, r14
    2b70:	ff 1c       	adc	r15, r15
    2b72:	8c ef       	ldi	r24, 0xFC	; 252
    2b74:	c8 22       	and	r12, r24
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	d8 22       	and	r13, r24
    2b7a:	ee 24       	eor	r14, r14
    2b7c:	ff 24       	eor	r15, r15
    2b7e:	f6 01       	movw	r30, r12
    2b80:	be 96       	adiw	r30, 0x2e	; 46
    2b82:	ec 0f       	add	r30, r28
    2b84:	fd 1f       	adc	r31, r29
    2b86:	22 81       	ldd	r18, Z+2	; 0x02
    2b88:	63 81       	ldd	r22, Z+3	; 0x03
    2b8a:	86 2f       	mov	r24, r22
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	b8 2f       	mov	r27, r24
    2b94:	aa 27       	eor	r26, r26
    2b96:	99 27       	eor	r25, r25
    2b98:	88 27       	eor	r24, r24
    2b9a:	ac 01       	movw	r20, r24
    2b9c:	bd 01       	movw	r22, r26
    2b9e:	62 2b       	or	r22, r18
    2ba0:	81 81       	ldd	r24, Z+1	; 0x01
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	98 2f       	mov	r25, r24
    2ba6:	88 27       	eor	r24, r24
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	84 2b       	or	r24, r20
    2bae:	95 2b       	or	r25, r21
    2bb0:	a6 2b       	or	r26, r22
    2bb2:	b7 2b       	or	r27, r23
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ec 0d       	add	r30, r12
    2bb8:	fd 1d       	adc	r31, r13
    2bba:	26 a5       	ldd	r18, Z+46	; 0x2e
    2bbc:	82 2b       	or	r24, r18
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	9f 70       	andi	r25, 0x0F	; 15
    2bc4:	1e c0       	rjmp	.+60     	; 0x2c02 <get_fat+0x1e8>
    2bc6:	61 e0       	ldi	r22, 0x01	; 1
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	19 c0       	rjmp	.+50     	; 0x2c02 <get_fat+0x1e8>
    2bd0:	61 e0       	ldi	r22, 0x01	; 1
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	14 c0       	rjmp	.+40     	; 0x2c02 <get_fat+0x1e8>
    2bda:	61 e0       	ldi	r22, 0x01	; 1
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <get_fat+0x1e8>
    2be4:	6f ef       	ldi	r22, 0xFF	; 255
    2be6:	7f ef       	ldi	r23, 0xFF	; 255
    2be8:	cb 01       	movw	r24, r22
    2bea:	0b c0       	rjmp	.+22     	; 0x2c02 <get_fat+0x1e8>
    2bec:	6f ef       	ldi	r22, 0xFF	; 255
    2bee:	7f ef       	ldi	r23, 0xFF	; 255
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	07 c0       	rjmp	.+14     	; 0x2c02 <get_fat+0x1e8>
    2bf4:	6f ef       	ldi	r22, 0xFF	; 255
    2bf6:	7f ef       	ldi	r23, 0xFF	; 255
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	03 c0       	rjmp	.+6      	; 0x2c02 <get_fat+0x1e8>
    2bfc:	6f ef       	ldi	r22, 0xFF	; 255
    2bfe:	7f ef       	ldi	r23, 0xFF	; 255
    2c00:	cb 01       	movw	r24, r22
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
    2c12:	bf 90       	pop	r11
    2c14:	af 90       	pop	r10
    2c16:	08 95       	ret

00002c18 <dir_sdi>:
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	ec 01       	movw	r28, r24
    2c2e:	8b 01       	movw	r16, r22
    2c30:	7d 83       	std	Y+5, r23	; 0x05
    2c32:	6c 83       	std	Y+4, r22	; 0x04
    2c34:	ce 80       	ldd	r12, Y+6	; 0x06
    2c36:	df 80       	ldd	r13, Y+7	; 0x07
    2c38:	e8 84       	ldd	r14, Y+8	; 0x08
    2c3a:	f9 84       	ldd	r15, Y+9	; 0x09
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	c8 16       	cp	r12, r24
    2c40:	d1 04       	cpc	r13, r1
    2c42:	e1 04       	cpc	r14, r1
    2c44:	f1 04       	cpc	r15, r1
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <dir_sdi+0x32>
    2c48:	8a c0       	rjmp	.+276    	; 0x2d5e <dir_sdi+0x146>
    2c4a:	e8 81       	ld	r30, Y
    2c4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c4e:	82 89       	ldd	r24, Z+18	; 0x12
    2c50:	93 89       	ldd	r25, Z+19	; 0x13
    2c52:	a4 89       	ldd	r26, Z+20	; 0x14
    2c54:	b5 89       	ldd	r27, Z+21	; 0x15
    2c56:	c8 16       	cp	r12, r24
    2c58:	d9 06       	cpc	r13, r25
    2c5a:	ea 06       	cpc	r14, r26
    2c5c:	fb 06       	cpc	r15, r27
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <dir_sdi+0x4a>
    2c60:	80 c0       	rjmp	.+256    	; 0x2d62 <dir_sdi+0x14a>
    2c62:	c1 14       	cp	r12, r1
    2c64:	d1 04       	cpc	r13, r1
    2c66:	e1 04       	cpc	r14, r1
    2c68:	f1 04       	cpc	r15, r1
    2c6a:	c1 f4       	brne	.+48     	; 0x2c9c <dir_sdi+0x84>
    2c6c:	80 81       	ld	r24, Z
    2c6e:	83 30       	cpi	r24, 0x03	; 3
    2c70:	41 f4       	brne	.+16     	; 0x2c82 <dir_sdi+0x6a>
    2c72:	82 a1       	ldd	r24, Z+34	; 0x22
    2c74:	93 a1       	ldd	r25, Z+35	; 0x23
    2c76:	a4 a1       	ldd	r26, Z+36	; 0x24
    2c78:	b5 a1       	ldd	r27, Z+37	; 0x25
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	a1 05       	cpc	r26, r1
    2c7e:	b1 05       	cpc	r27, r1
    2c80:	59 f4       	brne	.+22     	; 0x2c98 <dir_sdi+0x80>
    2c82:	80 85       	ldd	r24, Z+8	; 0x08
    2c84:	91 85       	ldd	r25, Z+9	; 0x09
    2c86:	08 17       	cp	r16, r24
    2c88:	19 07       	cpc	r17, r25
    2c8a:	08 f0       	brcs	.+2      	; 0x2c8e <dir_sdi+0x76>
    2c8c:	6c c0       	rjmp	.+216    	; 0x2d66 <dir_sdi+0x14e>
    2c8e:	62 a1       	ldd	r22, Z+34	; 0x22
    2c90:	73 a1       	ldd	r23, Z+35	; 0x23
    2c92:	84 a1       	ldd	r24, Z+36	; 0x24
    2c94:	95 a1       	ldd	r25, Z+37	; 0x25
    2c96:	35 c0       	rjmp	.+106    	; 0x2d02 <dir_sdi+0xea>
    2c98:	6c 01       	movw	r12, r24
    2c9a:	7d 01       	movw	r14, r26
    2c9c:	a2 80       	ldd	r10, Z+2	; 0x02
    2c9e:	80 e1       	ldi	r24, 0x10	; 16
    2ca0:	a8 9e       	mul	r10, r24
    2ca2:	50 01       	movw	r10, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	0a 15       	cp	r16, r10
    2ca8:	1b 05       	cpc	r17, r11
    2caa:	30 f1       	brcs	.+76     	; 0x2cf8 <dir_sdi+0xe0>
    2cac:	b7 01       	movw	r22, r14
    2cae:	a6 01       	movw	r20, r12
    2cb0:	88 81       	ld	r24, Y
    2cb2:	99 81       	ldd	r25, Y+1	; 0x01
    2cb4:	b2 de       	rcall	.-668    	; 0x2a1a <get_fat>
    2cb6:	6b 01       	movw	r12, r22
    2cb8:	7c 01       	movw	r14, r24
    2cba:	8f ef       	ldi	r24, 0xFF	; 255
    2cbc:	c8 16       	cp	r12, r24
    2cbe:	d8 06       	cpc	r13, r24
    2cc0:	e8 06       	cpc	r14, r24
    2cc2:	f8 06       	cpc	r15, r24
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <dir_sdi+0xb0>
    2cc6:	51 c0       	rjmp	.+162    	; 0x2d6a <dir_sdi+0x152>
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	c8 16       	cp	r12, r24
    2ccc:	d1 04       	cpc	r13, r1
    2cce:	e1 04       	cpc	r14, r1
    2cd0:	f1 04       	cpc	r15, r1
    2cd2:	08 f4       	brcc	.+2      	; 0x2cd6 <dir_sdi+0xbe>
    2cd4:	4c c0       	rjmp	.+152    	; 0x2d6e <dir_sdi+0x156>
    2cd6:	e8 81       	ld	r30, Y
    2cd8:	f9 81       	ldd	r31, Y+1	; 0x01
    2cda:	82 89       	ldd	r24, Z+18	; 0x12
    2cdc:	93 89       	ldd	r25, Z+19	; 0x13
    2cde:	a4 89       	ldd	r26, Z+20	; 0x14
    2ce0:	b5 89       	ldd	r27, Z+21	; 0x15
    2ce2:	c8 16       	cp	r12, r24
    2ce4:	d9 06       	cpc	r13, r25
    2ce6:	ea 06       	cpc	r14, r26
    2ce8:	fb 06       	cpc	r15, r27
    2cea:	08 f0       	brcs	.+2      	; 0x2cee <dir_sdi+0xd6>
    2cec:	42 c0       	rjmp	.+132    	; 0x2d72 <dir_sdi+0x15a>
    2cee:	0a 19       	sub	r16, r10
    2cf0:	1b 09       	sbc	r17, r11
    2cf2:	0a 15       	cp	r16, r10
    2cf4:	1b 05       	cpc	r17, r11
    2cf6:	d0 f6       	brcc	.-76     	; 0x2cac <dir_sdi+0x94>
    2cf8:	b7 01       	movw	r22, r14
    2cfa:	a6 01       	movw	r20, r12
    2cfc:	88 81       	ld	r24, Y
    2cfe:	99 81       	ldd	r25, Y+1	; 0x01
    2d00:	5e de       	rcall	.-836    	; 0x29be <clust2sect>
    2d02:	ca 86       	std	Y+10, r12	; 0x0a
    2d04:	db 86       	std	Y+11, r13	; 0x0b
    2d06:	ec 86       	std	Y+12, r14	; 0x0c
    2d08:	fd 86       	std	Y+13, r15	; 0x0d
    2d0a:	61 15       	cp	r22, r1
    2d0c:	71 05       	cpc	r23, r1
    2d0e:	81 05       	cpc	r24, r1
    2d10:	91 05       	cpc	r25, r1
    2d12:	89 f1       	breq	.+98     	; 0x2d76 <dir_sdi+0x15e>
    2d14:	98 01       	movw	r18, r16
    2d16:	32 95       	swap	r19
    2d18:	22 95       	swap	r18
    2d1a:	2f 70       	andi	r18, 0x0F	; 15
    2d1c:	23 27       	eor	r18, r19
    2d1e:	3f 70       	andi	r19, 0x0F	; 15
    2d20:	23 27       	eor	r18, r19
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	82 0f       	add	r24, r18
    2d28:	93 1f       	adc	r25, r19
    2d2a:	a1 1d       	adc	r26, r1
    2d2c:	b1 1d       	adc	r27, r1
    2d2e:	8e 87       	std	Y+14, r24	; 0x0e
    2d30:	9f 87       	std	Y+15, r25	; 0x0f
    2d32:	a8 8b       	std	Y+16, r26	; 0x10
    2d34:	b9 8b       	std	Y+17, r27	; 0x11
    2d36:	0f 70       	andi	r16, 0x0F	; 15
    2d38:	11 27       	eor	r17, r17
    2d3a:	00 0f       	add	r16, r16
    2d3c:	11 1f       	adc	r17, r17
    2d3e:	02 95       	swap	r16
    2d40:	12 95       	swap	r17
    2d42:	10 7f       	andi	r17, 0xF0	; 240
    2d44:	10 27       	eor	r17, r16
    2d46:	00 7f       	andi	r16, 0xF0	; 240
    2d48:	10 27       	eor	r17, r16
    2d4a:	02 5d       	subi	r16, 0xD2	; 210
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	88 81       	ld	r24, Y
    2d50:	99 81       	ldd	r25, Y+1	; 0x01
    2d52:	80 0f       	add	r24, r16
    2d54:	91 1f       	adc	r25, r17
    2d56:	9b 8b       	std	Y+19, r25	; 0x13
    2d58:	8a 8b       	std	Y+18, r24	; 0x12
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0d c0       	rjmp	.+26     	; 0x2d78 <dir_sdi+0x160>
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	0b c0       	rjmp	.+22     	; 0x2d78 <dir_sdi+0x160>
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	09 c0       	rjmp	.+18     	; 0x2d78 <dir_sdi+0x160>
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	07 c0       	rjmp	.+14     	; 0x2d78 <dir_sdi+0x160>
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <dir_sdi+0x160>
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <dir_sdi+0x160>
    2d72:	82 e0       	ldi	r24, 0x02	; 2
    2d74:	01 c0       	rjmp	.+2      	; 0x2d78 <dir_sdi+0x160>
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	ff 90       	pop	r15
    2d82:	ef 90       	pop	r14
    2d84:	df 90       	pop	r13
    2d86:	cf 90       	pop	r12
    2d88:	bf 90       	pop	r11
    2d8a:	af 90       	pop	r10
    2d8c:	08 95       	ret

00002d8e <put_fat>:
    2d8e:	4f 92       	push	r4
    2d90:	5f 92       	push	r5
    2d92:	6f 92       	push	r6
    2d94:	7f 92       	push	r7
    2d96:	8f 92       	push	r8
    2d98:	9f 92       	push	r9
    2d9a:	af 92       	push	r10
    2d9c:	bf 92       	push	r11
    2d9e:	cf 92       	push	r12
    2da0:	df 92       	push	r13
    2da2:	ef 92       	push	r14
    2da4:	ff 92       	push	r15
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	ec 01       	movw	r28, r24
    2db0:	6a 01       	movw	r12, r20
    2db2:	7b 01       	movw	r14, r22
    2db4:	28 01       	movw	r4, r16
    2db6:	39 01       	movw	r6, r18
    2db8:	42 30       	cpi	r20, 0x02	; 2
    2dba:	51 05       	cpc	r21, r1
    2dbc:	61 05       	cpc	r22, r1
    2dbe:	71 05       	cpc	r23, r1
    2dc0:	08 f4       	brcc	.+2      	; 0x2dc4 <put_fat+0x36>
    2dc2:	d8 c0       	rjmp	.+432    	; 0x2f74 <put_fat+0x1e6>
    2dc4:	8a 89       	ldd	r24, Y+18	; 0x12
    2dc6:	9b 89       	ldd	r25, Y+19	; 0x13
    2dc8:	ac 89       	ldd	r26, Y+20	; 0x14
    2dca:	bd 89       	ldd	r27, Y+21	; 0x15
    2dcc:	48 17       	cp	r20, r24
    2dce:	59 07       	cpc	r21, r25
    2dd0:	6a 07       	cpc	r22, r26
    2dd2:	7b 07       	cpc	r23, r27
    2dd4:	08 f0       	brcs	.+2      	; 0x2dd8 <put_fat+0x4a>
    2dd6:	d0 c0       	rjmp	.+416    	; 0x2f78 <put_fat+0x1ea>
    2dd8:	88 81       	ld	r24, Y
    2dda:	82 30       	cpi	r24, 0x02	; 2
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <put_fat+0x52>
    2dde:	62 c0       	rjmp	.+196    	; 0x2ea4 <put_fat+0x116>
    2de0:	83 30       	cpi	r24, 0x03	; 3
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <put_fat+0x58>
    2de4:	85 c0       	rjmp	.+266    	; 0x2ef0 <put_fat+0x162>
    2de6:	81 30       	cpi	r24, 0x01	; 1
    2de8:	09 f0       	breq	.+2      	; 0x2dec <put_fat+0x5e>
    2dea:	c8 c0       	rjmp	.+400    	; 0x2f7c <put_fat+0x1ee>
    2dec:	5a 01       	movw	r10, r20
    2dee:	b6 94       	lsr	r11
    2df0:	a7 94       	ror	r10
    2df2:	a4 0e       	add	r10, r20
    2df4:	b5 1e       	adc	r11, r21
    2df6:	c5 01       	movw	r24, r10
    2df8:	89 2f       	mov	r24, r25
    2dfa:	99 27       	eor	r25, r25
    2dfc:	86 95       	lsr	r24
    2dfe:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e00:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e02:	68 a1       	ldd	r22, Y+32	; 0x20
    2e04:	79 a1       	ldd	r23, Y+33	; 0x21
    2e06:	48 0f       	add	r20, r24
    2e08:	59 1f       	adc	r21, r25
    2e0a:	61 1d       	adc	r22, r1
    2e0c:	71 1d       	adc	r23, r1
    2e0e:	ce 01       	movw	r24, r28
    2e10:	4b d9       	rcall	.-3434   	; 0x20a8 <move_window>
    2e12:	18 2f       	mov	r17, r24
    2e14:	81 11       	cpse	r24, r1
    2e16:	d0 c0       	rjmp	.+416    	; 0x2fb8 <put_fat+0x22a>
    2e18:	45 01       	movw	r8, r10
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	88 1a       	sub	r8, r24
    2e1e:	98 0a       	sbc	r9, r24
    2e20:	a1 e0       	ldi	r26, 0x01	; 1
    2e22:	ba 22       	and	r11, r26
    2e24:	c0 fe       	sbrs	r12, 0
    2e26:	20 c0       	rjmp	.+64     	; 0x2e68 <put_fat+0xda>
    2e28:	fe 01       	movw	r30, r28
    2e2a:	ea 0d       	add	r30, r10
    2e2c:	fb 1d       	adc	r31, r11
    2e2e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e30:	28 2f       	mov	r18, r24
    2e32:	2f 70       	andi	r18, 0x0F	; 15
    2e34:	b0 e1       	ldi	r27, 0x10	; 16
    2e36:	4b 9e       	mul	r4, r27
    2e38:	c0 01       	movw	r24, r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	82 2b       	or	r24, r18
    2e3e:	86 a7       	std	Z+46, r24	; 0x2e
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	8c 83       	std	Y+4, r24	; 0x04
    2e44:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e46:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e48:	68 a1       	ldd	r22, Y+32	; 0x20
    2e4a:	79 a1       	ldd	r23, Y+33	; 0x21
    2e4c:	c4 01       	movw	r24, r8
    2e4e:	89 2f       	mov	r24, r25
    2e50:	99 27       	eor	r25, r25
    2e52:	86 95       	lsr	r24
    2e54:	48 0f       	add	r20, r24
    2e56:	59 1f       	adc	r21, r25
    2e58:	61 1d       	adc	r22, r1
    2e5a:	71 1d       	adc	r23, r1
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	24 d9       	rcall	.-3512   	; 0x20a8 <move_window>
    2e60:	88 23       	and	r24, r24
    2e62:	09 f4       	brne	.+2      	; 0x2e66 <put_fat+0xd8>
    2e64:	91 c0       	rjmp	.+290    	; 0x2f88 <put_fat+0x1fa>
    2e66:	8c c0       	rjmp	.+280    	; 0x2f80 <put_fat+0x1f2>
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ea 0d       	add	r30, r10
    2e6c:	fb 1d       	adc	r31, r11
    2e6e:	46 a6       	std	Z+46, r4	; 0x2e
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	8c 83       	std	Y+4, r24	; 0x04
    2e74:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e76:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e78:	68 a1       	ldd	r22, Y+32	; 0x20
    2e7a:	79 a1       	ldd	r23, Y+33	; 0x21
    2e7c:	c4 01       	movw	r24, r8
    2e7e:	89 2f       	mov	r24, r25
    2e80:	99 27       	eor	r25, r25
    2e82:	86 95       	lsr	r24
    2e84:	48 0f       	add	r20, r24
    2e86:	59 1f       	adc	r21, r25
    2e88:	61 1d       	adc	r22, r1
    2e8a:	71 1d       	adc	r23, r1
    2e8c:	ce 01       	movw	r24, r28
    2e8e:	0c d9       	rcall	.-3560   	; 0x20a8 <move_window>
    2e90:	88 23       	and	r24, r24
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <put_fat+0x108>
    2e94:	84 c0       	rjmp	.+264    	; 0x2f9e <put_fat+0x210>
    2e96:	76 c0       	rjmp	.+236    	; 0x2f84 <put_fat+0x1f6>
    2e98:	ec 0f       	add	r30, r28
    2e9a:	fd 1f       	adc	r31, r29
    2e9c:	46 a6       	std	Z+46, r4	; 0x2e
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	8c 83       	std	Y+4, r24	; 0x04
    2ea2:	8a c0       	rjmp	.+276    	; 0x2fb8 <put_fat+0x22a>
    2ea4:	45 2f       	mov	r20, r21
    2ea6:	56 2f       	mov	r21, r22
    2ea8:	67 2f       	mov	r22, r23
    2eaa:	77 27       	eor	r23, r23
    2eac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2eb0:	a8 a1       	ldd	r26, Y+32	; 0x20
    2eb2:	b9 a1       	ldd	r27, Y+33	; 0x21
    2eb4:	48 0f       	add	r20, r24
    2eb6:	59 1f       	adc	r21, r25
    2eb8:	6a 1f       	adc	r22, r26
    2eba:	7b 1f       	adc	r23, r27
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	f4 d8       	rcall	.-3608   	; 0x20a8 <move_window>
    2ec0:	18 2f       	mov	r17, r24
    2ec2:	81 11       	cpse	r24, r1
    2ec4:	79 c0       	rjmp	.+242    	; 0x2fb8 <put_fat+0x22a>
    2ec6:	cc 0c       	add	r12, r12
    2ec8:	dd 1c       	adc	r13, r13
    2eca:	ee 1c       	adc	r14, r14
    2ecc:	ff 1c       	adc	r15, r15
    2ece:	e8 94       	clt
    2ed0:	c0 f8       	bld	r12, 0
    2ed2:	31 e0       	ldi	r19, 0x01	; 1
    2ed4:	d3 22       	and	r13, r19
    2ed6:	ee 24       	eor	r14, r14
    2ed8:	ff 24       	eor	r15, r15
    2eda:	fe 01       	movw	r30, r28
    2edc:	ec 0d       	add	r30, r12
    2ede:	fd 1d       	adc	r31, r13
    2ee0:	46 a6       	std	Z+46, r4	; 0x2e
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ec 0d       	add	r30, r12
    2ee6:	fd 1d       	adc	r31, r13
    2ee8:	57 a6       	std	Z+47, r5	; 0x2f
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	8c 83       	std	Y+4, r24	; 0x04
    2eee:	64 c0       	rjmp	.+200    	; 0x2fb8 <put_fat+0x22a>
    2ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ef4:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ef6:	b9 a1       	ldd	r27, Y+33	; 0x21
    2ef8:	68 94       	set
    2efa:	16 f8       	bld	r1, 6
    2efc:	76 95       	lsr	r23
    2efe:	67 95       	ror	r22
    2f00:	57 95       	ror	r21
    2f02:	47 95       	ror	r20
    2f04:	16 94       	lsr	r1
    2f06:	d1 f7       	brne	.-12     	; 0x2efc <put_fat+0x16e>
    2f08:	48 0f       	add	r20, r24
    2f0a:	59 1f       	adc	r21, r25
    2f0c:	6a 1f       	adc	r22, r26
    2f0e:	7b 1f       	adc	r23, r27
    2f10:	ce 01       	movw	r24, r28
    2f12:	ca d8       	rcall	.-3692   	; 0x20a8 <move_window>
    2f14:	18 2f       	mov	r17, r24
    2f16:	81 11       	cpse	r24, r1
    2f18:	4f c0       	rjmp	.+158    	; 0x2fb8 <put_fat+0x22a>
    2f1a:	cc 0c       	add	r12, r12
    2f1c:	dd 1c       	adc	r13, r13
    2f1e:	ee 1c       	adc	r14, r14
    2f20:	ff 1c       	adc	r15, r15
    2f22:	cc 0c       	add	r12, r12
    2f24:	dd 1c       	adc	r13, r13
    2f26:	ee 1c       	adc	r14, r14
    2f28:	ff 1c       	adc	r15, r15
    2f2a:	8c ef       	ldi	r24, 0xFC	; 252
    2f2c:	c8 22       	and	r12, r24
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	d8 22       	and	r13, r24
    2f32:	ee 24       	eor	r14, r14
    2f34:	ff 24       	eor	r15, r15
    2f36:	f6 01       	movw	r30, r12
    2f38:	be 96       	adiw	r30, 0x2e	; 46
    2f3a:	ec 0f       	add	r30, r28
    2f3c:	fd 1f       	adc	r31, r29
    2f3e:	83 81       	ldd	r24, Z+3	; 0x03
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	a0 e0       	ldi	r26, 0x00	; 0
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	b8 2f       	mov	r27, r24
    2f48:	aa 27       	eor	r26, r26
    2f4a:	99 27       	eor	r25, r25
    2f4c:	88 27       	eor	r24, r24
    2f4e:	cc 0e       	add	r12, r28
    2f50:	dd 1e       	adc	r13, r29
    2f52:	88 27       	eor	r24, r24
    2f54:	99 27       	eor	r25, r25
    2f56:	aa 27       	eor	r26, r26
    2f58:	b0 7f       	andi	r27, 0xF0	; 240
    2f5a:	48 2a       	or	r4, r24
    2f5c:	59 2a       	or	r5, r25
    2f5e:	6a 2a       	or	r6, r26
    2f60:	7b 2a       	or	r7, r27
    2f62:	d6 01       	movw	r26, r12
    2f64:	9e 96       	adiw	r26, 0x2e	; 46
    2f66:	4c 92       	st	X, r4
    2f68:	51 82       	std	Z+1, r5	; 0x01
    2f6a:	62 82       	std	Z+2, r6	; 0x02
    2f6c:	73 82       	std	Z+3, r7	; 0x03
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	8c 83       	std	Y+4, r24	; 0x04
    2f72:	22 c0       	rjmp	.+68     	; 0x2fb8 <put_fat+0x22a>
    2f74:	12 e0       	ldi	r17, 0x02	; 2
    2f76:	20 c0       	rjmp	.+64     	; 0x2fb8 <put_fat+0x22a>
    2f78:	12 e0       	ldi	r17, 0x02	; 2
    2f7a:	1e c0       	rjmp	.+60     	; 0x2fb8 <put_fat+0x22a>
    2f7c:	12 e0       	ldi	r17, 0x02	; 2
    2f7e:	1c c0       	rjmp	.+56     	; 0x2fb8 <put_fat+0x22a>
    2f80:	18 2f       	mov	r17, r24
    2f82:	1a c0       	rjmp	.+52     	; 0x2fb8 <put_fat+0x22a>
    2f84:	18 2f       	mov	r17, r24
    2f86:	18 c0       	rjmp	.+48     	; 0x2fb8 <put_fat+0x22a>
    2f88:	f4 01       	movw	r30, r8
    2f8a:	f1 70       	andi	r31, 0x01	; 1
    2f8c:	68 94       	set
    2f8e:	13 f8       	bld	r1, 3
    2f90:	76 94       	lsr	r7
    2f92:	67 94       	ror	r6
    2f94:	57 94       	ror	r5
    2f96:	47 94       	ror	r4
    2f98:	16 94       	lsr	r1
    2f9a:	d1 f7       	brne	.-12     	; 0x2f90 <put_fat+0x202>
    2f9c:	7d cf       	rjmp	.-262    	; 0x2e98 <put_fat+0x10a>
    2f9e:	f4 01       	movw	r30, r8
    2fa0:	f1 70       	andi	r31, 0x01	; 1
    2fa2:	de 01       	movw	r26, r28
    2fa4:	ae 0f       	add	r26, r30
    2fa6:	bf 1f       	adc	r27, r31
    2fa8:	9e 96       	adiw	r26, 0x2e	; 46
    2faa:	9c 91       	ld	r25, X
    2fac:	90 7f       	andi	r25, 0xF0	; 240
    2fae:	85 2d       	mov	r24, r5
    2fb0:	8f 70       	andi	r24, 0x0F	; 15
    2fb2:	49 2e       	mov	r4, r25
    2fb4:	48 2a       	or	r4, r24
    2fb6:	70 cf       	rjmp	.-288    	; 0x2e98 <put_fat+0x10a>
    2fb8:	81 2f       	mov	r24, r17
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	ff 90       	pop	r15
    2fc4:	ef 90       	pop	r14
    2fc6:	df 90       	pop	r13
    2fc8:	cf 90       	pop	r12
    2fca:	bf 90       	pop	r11
    2fcc:	af 90       	pop	r10
    2fce:	9f 90       	pop	r9
    2fd0:	8f 90       	pop	r8
    2fd2:	7f 90       	pop	r7
    2fd4:	6f 90       	pop	r6
    2fd6:	5f 90       	pop	r5
    2fd8:	4f 90       	pop	r4
    2fda:	08 95       	ret

00002fdc <create_chain>:
    2fdc:	2f 92       	push	r2
    2fde:	3f 92       	push	r3
    2fe0:	4f 92       	push	r4
    2fe2:	5f 92       	push	r5
    2fe4:	6f 92       	push	r6
    2fe6:	7f 92       	push	r7
    2fe8:	8f 92       	push	r8
    2fea:	9f 92       	push	r9
    2fec:	af 92       	push	r10
    2fee:	bf 92       	push	r11
    2ff0:	cf 92       	push	r12
    2ff2:	df 92       	push	r13
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	ec 01       	movw	r28, r24
    3002:	2a 01       	movw	r4, r20
    3004:	3b 01       	movw	r6, r22
    3006:	41 15       	cp	r20, r1
    3008:	51 05       	cpc	r21, r1
    300a:	61 05       	cpc	r22, r1
    300c:	71 05       	cpc	r23, r1
    300e:	b9 f4       	brne	.+46     	; 0x303e <create_chain+0x62>
    3010:	8a 84       	ldd	r8, Y+10	; 0x0a
    3012:	9b 84       	ldd	r9, Y+11	; 0x0b
    3014:	ac 84       	ldd	r10, Y+12	; 0x0c
    3016:	bd 84       	ldd	r11, Y+13	; 0x0d
    3018:	81 14       	cp	r8, r1
    301a:	91 04       	cpc	r9, r1
    301c:	a1 04       	cpc	r10, r1
    301e:	b1 04       	cpc	r11, r1
    3020:	59 f1       	breq	.+86     	; 0x3078 <create_chain+0x9c>
    3022:	8a 89       	ldd	r24, Y+18	; 0x12
    3024:	9b 89       	ldd	r25, Y+19	; 0x13
    3026:	ac 89       	ldd	r26, Y+20	; 0x14
    3028:	bd 89       	ldd	r27, Y+21	; 0x15
    302a:	88 16       	cp	r8, r24
    302c:	99 06       	cpc	r9, r25
    302e:	aa 06       	cpc	r10, r26
    3030:	bb 06       	cpc	r11, r27
    3032:	30 f1       	brcs	.+76     	; 0x3080 <create_chain+0xa4>
    3034:	81 2c       	mov	r8, r1
    3036:	91 2c       	mov	r9, r1
    3038:	54 01       	movw	r10, r8
    303a:	83 94       	inc	r8
    303c:	21 c0       	rjmp	.+66     	; 0x3080 <create_chain+0xa4>
    303e:	ed dc       	rcall	.-1574   	; 0x2a1a <get_fat>
    3040:	6b 01       	movw	r12, r22
    3042:	7c 01       	movw	r14, r24
    3044:	62 30       	cpi	r22, 0x02	; 2
    3046:	71 05       	cpc	r23, r1
    3048:	81 05       	cpc	r24, r1
    304a:	91 05       	cpc	r25, r1
    304c:	08 f4       	brcc	.+2      	; 0x3050 <create_chain+0x74>
    304e:	96 c0       	rjmp	.+300    	; 0x317c <create_chain+0x1a0>
    3050:	8f ef       	ldi	r24, 0xFF	; 255
    3052:	c8 16       	cp	r12, r24
    3054:	d8 06       	cpc	r13, r24
    3056:	e8 06       	cpc	r14, r24
    3058:	f8 06       	cpc	r15, r24
    305a:	09 f4       	brne	.+2      	; 0x305e <create_chain+0x82>
    305c:	94 c0       	rjmp	.+296    	; 0x3186 <create_chain+0x1aa>
    305e:	8a 89       	ldd	r24, Y+18	; 0x12
    3060:	9b 89       	ldd	r25, Y+19	; 0x13
    3062:	ac 89       	ldd	r26, Y+20	; 0x14
    3064:	bd 89       	ldd	r27, Y+21	; 0x15
    3066:	c8 16       	cp	r12, r24
    3068:	d9 06       	cpc	r13, r25
    306a:	ea 06       	cpc	r14, r26
    306c:	fb 06       	cpc	r15, r27
    306e:	08 f4       	brcc	.+2      	; 0x3072 <create_chain+0x96>
    3070:	8f c0       	rjmp	.+286    	; 0x3190 <create_chain+0x1b4>
    3072:	53 01       	movw	r10, r6
    3074:	42 01       	movw	r8, r4
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <create_chain+0xa4>
    3078:	81 2c       	mov	r8, r1
    307a:	91 2c       	mov	r9, r1
    307c:	54 01       	movw	r10, r8
    307e:	83 94       	inc	r8
    3080:	75 01       	movw	r14, r10
    3082:	64 01       	movw	r12, r8
    3084:	68 94       	set
    3086:	22 24       	eor	r2, r2
    3088:	21 f8       	bld	r2, 1
    308a:	31 2c       	mov	r3, r1
    308c:	00 e0       	ldi	r16, 0x00	; 0
    308e:	10 e0       	ldi	r17, 0x00	; 0
    3090:	2f ef       	ldi	r18, 0xFF	; 255
    3092:	c2 1a       	sub	r12, r18
    3094:	d2 0a       	sbc	r13, r18
    3096:	e2 0a       	sbc	r14, r18
    3098:	f2 0a       	sbc	r15, r18
    309a:	8a 89       	ldd	r24, Y+18	; 0x12
    309c:	9b 89       	ldd	r25, Y+19	; 0x13
    309e:	ac 89       	ldd	r26, Y+20	; 0x14
    30a0:	bd 89       	ldd	r27, Y+21	; 0x15
    30a2:	c8 16       	cp	r12, r24
    30a4:	d9 06       	cpc	r13, r25
    30a6:	ea 06       	cpc	r14, r26
    30a8:	fb 06       	cpc	r15, r27
    30aa:	58 f0       	brcs	.+22     	; 0x30c2 <create_chain+0xe6>
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	88 16       	cp	r8, r24
    30b0:	91 04       	cpc	r9, r1
    30b2:	a1 04       	cpc	r10, r1
    30b4:	b1 04       	cpc	r11, r1
    30b6:	08 f4       	brcc	.+2      	; 0x30ba <create_chain+0xde>
    30b8:	70 c0       	rjmp	.+224    	; 0x319a <create_chain+0x1be>
    30ba:	c2 2c       	mov	r12, r2
    30bc:	d3 2c       	mov	r13, r3
    30be:	e0 2e       	mov	r14, r16
    30c0:	f1 2e       	mov	r15, r17
    30c2:	b7 01       	movw	r22, r14
    30c4:	a6 01       	movw	r20, r12
    30c6:	ce 01       	movw	r24, r28
    30c8:	a8 dc       	rcall	.-1712   	; 0x2a1a <get_fat>
    30ca:	61 15       	cp	r22, r1
    30cc:	71 05       	cpc	r23, r1
    30ce:	81 05       	cpc	r24, r1
    30d0:	91 05       	cpc	r25, r1
    30d2:	99 f0       	breq	.+38     	; 0x30fa <create_chain+0x11e>
    30d4:	6f 3f       	cpi	r22, 0xFF	; 255
    30d6:	2f ef       	ldi	r18, 0xFF	; 255
    30d8:	72 07       	cpc	r23, r18
    30da:	82 07       	cpc	r24, r18
    30dc:	92 07       	cpc	r25, r18
    30de:	09 f4       	brne	.+2      	; 0x30e2 <create_chain+0x106>
    30e0:	61 c0       	rjmp	.+194    	; 0x31a4 <create_chain+0x1c8>
    30e2:	61 30       	cpi	r22, 0x01	; 1
    30e4:	71 05       	cpc	r23, r1
    30e6:	81 05       	cpc	r24, r1
    30e8:	91 05       	cpc	r25, r1
    30ea:	09 f4       	brne	.+2      	; 0x30ee <create_chain+0x112>
    30ec:	60 c0       	rjmp	.+192    	; 0x31ae <create_chain+0x1d2>
    30ee:	c8 14       	cp	r12, r8
    30f0:	d9 04       	cpc	r13, r9
    30f2:	ea 04       	cpc	r14, r10
    30f4:	fb 04       	cpc	r15, r11
    30f6:	61 f6       	brne	.-104    	; 0x3090 <create_chain+0xb4>
    30f8:	5f c0       	rjmp	.+190    	; 0x31b8 <create_chain+0x1dc>
    30fa:	8c 2c       	mov	r8, r12
    30fc:	9d 2c       	mov	r9, r13
    30fe:	ae 2c       	mov	r10, r14
    3100:	bf 2c       	mov	r11, r15
    3102:	0f ef       	ldi	r16, 0xFF	; 255
    3104:	1f ef       	ldi	r17, 0xFF	; 255
    3106:	2f ef       	ldi	r18, 0xFF	; 255
    3108:	3f e0       	ldi	r19, 0x0F	; 15
    310a:	b7 01       	movw	r22, r14
    310c:	a6 01       	movw	r20, r12
    310e:	ce 01       	movw	r24, r28
    3110:	3e de       	rcall	.-900    	; 0x2d8e <put_fat>
    3112:	81 11       	cpse	r24, r1
    3114:	2c c0       	rjmp	.+88     	; 0x316e <create_chain+0x192>
    3116:	41 14       	cp	r4, r1
    3118:	51 04       	cpc	r5, r1
    311a:	61 04       	cpc	r6, r1
    311c:	71 04       	cpc	r7, r1
    311e:	51 f0       	breq	.+20     	; 0x3134 <create_chain+0x158>
    3120:	0c 2d       	mov	r16, r12
    3122:	1d 2d       	mov	r17, r13
    3124:	2e 2d       	mov	r18, r14
    3126:	3f 2d       	mov	r19, r15
    3128:	b3 01       	movw	r22, r6
    312a:	a2 01       	movw	r20, r4
    312c:	ce 01       	movw	r24, r28
    312e:	2f de       	rcall	.-930    	; 0x2d8e <put_fat>
    3130:	81 11       	cpse	r24, r1
    3132:	1d c0       	rjmp	.+58     	; 0x316e <create_chain+0x192>
    3134:	8a 86       	std	Y+10, r8	; 0x0a
    3136:	9b 86       	std	Y+11, r9	; 0x0b
    3138:	ac 86       	std	Y+12, r10	; 0x0c
    313a:	bd 86       	std	Y+13, r11	; 0x0d
    313c:	8e 85       	ldd	r24, Y+14	; 0x0e
    313e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3140:	a8 89       	ldd	r26, Y+16	; 0x10
    3142:	b9 89       	ldd	r27, Y+17	; 0x11
    3144:	8f 3f       	cpi	r24, 0xFF	; 255
    3146:	2f ef       	ldi	r18, 0xFF	; 255
    3148:	92 07       	cpc	r25, r18
    314a:	a2 07       	cpc	r26, r18
    314c:	b2 07       	cpc	r27, r18
    314e:	c9 f1       	breq	.+114    	; 0x31c2 <create_chain+0x1e6>
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	a1 09       	sbc	r26, r1
    3154:	b1 09       	sbc	r27, r1
    3156:	8e 87       	std	Y+14, r24	; 0x0e
    3158:	9f 87       	std	Y+15, r25	; 0x0f
    315a:	a8 8b       	std	Y+16, r26	; 0x10
    315c:	b9 8b       	std	Y+17, r27	; 0x11
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	81 60       	ori	r24, 0x01	; 1
    3162:	8d 83       	std	Y+5, r24	; 0x05
    3164:	6c 2d       	mov	r22, r12
    3166:	7d 2d       	mov	r23, r13
    3168:	8e 2d       	mov	r24, r14
    316a:	9f 2d       	mov	r25, r15
    316c:	33 c0       	rjmp	.+102    	; 0x31d4 <create_chain+0x1f8>
    316e:	81 30       	cpi	r24, 0x01	; 1
    3170:	69 f1       	breq	.+90     	; 0x31cc <create_chain+0x1f0>
    3172:	61 e0       	ldi	r22, 0x01	; 1
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	2c c0       	rjmp	.+88     	; 0x31d4 <create_chain+0x1f8>
    317c:	61 e0       	ldi	r22, 0x01	; 1
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	27 c0       	rjmp	.+78     	; 0x31d4 <create_chain+0x1f8>
    3186:	6f ef       	ldi	r22, 0xFF	; 255
    3188:	7f ef       	ldi	r23, 0xFF	; 255
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	9f ef       	ldi	r25, 0xFF	; 255
    318e:	22 c0       	rjmp	.+68     	; 0x31d4 <create_chain+0x1f8>
    3190:	6c 2d       	mov	r22, r12
    3192:	7d 2d       	mov	r23, r13
    3194:	8e 2d       	mov	r24, r14
    3196:	9f 2d       	mov	r25, r15
    3198:	1d c0       	rjmp	.+58     	; 0x31d4 <create_chain+0x1f8>
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	18 c0       	rjmp	.+48     	; 0x31d4 <create_chain+0x1f8>
    31a4:	6f ef       	ldi	r22, 0xFF	; 255
    31a6:	7f ef       	ldi	r23, 0xFF	; 255
    31a8:	8f ef       	ldi	r24, 0xFF	; 255
    31aa:	9f ef       	ldi	r25, 0xFF	; 255
    31ac:	13 c0       	rjmp	.+38     	; 0x31d4 <create_chain+0x1f8>
    31ae:	61 e0       	ldi	r22, 0x01	; 1
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e c0       	rjmp	.+28     	; 0x31d4 <create_chain+0x1f8>
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	09 c0       	rjmp	.+18     	; 0x31d4 <create_chain+0x1f8>
    31c2:	6c 2d       	mov	r22, r12
    31c4:	7d 2d       	mov	r23, r13
    31c6:	8e 2d       	mov	r24, r14
    31c8:	9f 2d       	mov	r25, r15
    31ca:	04 c0       	rjmp	.+8      	; 0x31d4 <create_chain+0x1f8>
    31cc:	6f ef       	ldi	r22, 0xFF	; 255
    31ce:	7f ef       	ldi	r23, 0xFF	; 255
    31d0:	8f ef       	ldi	r24, 0xFF	; 255
    31d2:	9f ef       	ldi	r25, 0xFF	; 255
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	df 90       	pop	r13
    31e2:	cf 90       	pop	r12
    31e4:	bf 90       	pop	r11
    31e6:	af 90       	pop	r10
    31e8:	9f 90       	pop	r9
    31ea:	8f 90       	pop	r8
    31ec:	7f 90       	pop	r7
    31ee:	6f 90       	pop	r6
    31f0:	5f 90       	pop	r5
    31f2:	4f 90       	pop	r4
    31f4:	3f 90       	pop	r3
    31f6:	2f 90       	pop	r2
    31f8:	08 95       	ret

000031fa <dir_next>:
    31fa:	7f 92       	push	r7
    31fc:	8f 92       	push	r8
    31fe:	9f 92       	push	r9
    3200:	af 92       	push	r10
    3202:	bf 92       	push	r11
    3204:	cf 92       	push	r12
    3206:	df 92       	push	r13
    3208:	ef 92       	push	r14
    320a:	ff 92       	push	r15
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	dc 01       	movw	r26, r24
    3216:	14 96       	adiw	r26, 0x04	; 4
    3218:	cd 91       	ld	r28, X+
    321a:	dc 91       	ld	r29, X
    321c:	15 97       	sbiw	r26, 0x05	; 5
    321e:	21 96       	adiw	r28, 0x01	; 1
    3220:	09 f4       	brne	.+2      	; 0x3224 <dir_next+0x2a>
    3222:	03 c1       	rjmp	.+518    	; 0x342a <dir_next+0x230>
    3224:	1e 96       	adiw	r26, 0x0e	; 14
    3226:	8d 90       	ld	r8, X+
    3228:	9d 90       	ld	r9, X+
    322a:	ad 90       	ld	r10, X+
    322c:	bc 90       	ld	r11, X
    322e:	51 97       	sbiw	r26, 0x11	; 17
    3230:	81 14       	cp	r8, r1
    3232:	91 04       	cpc	r9, r1
    3234:	a1 04       	cpc	r10, r1
    3236:	b1 04       	cpc	r11, r1
    3238:	09 f4       	brne	.+2      	; 0x323c <dir_next+0x42>
    323a:	f9 c0       	rjmp	.+498    	; 0x342e <dir_next+0x234>
    323c:	7b 01       	movw	r14, r22
    323e:	8c 01       	movw	r16, r24
    3240:	6e 01       	movw	r12, r28
    3242:	bf e0       	ldi	r27, 0x0F	; 15
    3244:	cb 22       	and	r12, r27
    3246:	dd 24       	eor	r13, r13
    3248:	c1 14       	cp	r12, r1
    324a:	d1 04       	cpc	r13, r1
    324c:	09 f0       	breq	.+2      	; 0x3250 <dir_next+0x56>
    324e:	d1 c0       	rjmp	.+418    	; 0x33f2 <dir_next+0x1f8>
    3250:	ef ef       	ldi	r30, 0xFF	; 255
    3252:	8e 1a       	sub	r8, r30
    3254:	9e 0a       	sbc	r9, r30
    3256:	ae 0a       	sbc	r10, r30
    3258:	be 0a       	sbc	r11, r30
    325a:	dc 01       	movw	r26, r24
    325c:	1e 96       	adiw	r26, 0x0e	; 14
    325e:	8d 92       	st	X+, r8
    3260:	9d 92       	st	X+, r9
    3262:	ad 92       	st	X+, r10
    3264:	bc 92       	st	X, r11
    3266:	51 97       	sbiw	r26, 0x11	; 17
    3268:	1a 96       	adiw	r26, 0x0a	; 10
    326a:	4d 91       	ld	r20, X+
    326c:	5d 91       	ld	r21, X+
    326e:	6d 91       	ld	r22, X+
    3270:	7c 91       	ld	r23, X
    3272:	1d 97       	sbiw	r26, 0x0d	; 13
    3274:	41 15       	cp	r20, r1
    3276:	51 05       	cpc	r21, r1
    3278:	61 05       	cpc	r22, r1
    327a:	71 05       	cpc	r23, r1
    327c:	49 f4       	brne	.+18     	; 0x3290 <dir_next+0x96>
    327e:	ed 91       	ld	r30, X+
    3280:	fc 91       	ld	r31, X
    3282:	80 85       	ldd	r24, Z+8	; 0x08
    3284:	91 85       	ldd	r25, Z+9	; 0x09
    3286:	c8 17       	cp	r28, r24
    3288:	d9 07       	cpc	r29, r25
    328a:	08 f0       	brcs	.+2      	; 0x328e <dir_next+0x94>
    328c:	d2 c0       	rjmp	.+420    	; 0x3432 <dir_next+0x238>
    328e:	b1 c0       	rjmp	.+354    	; 0x33f2 <dir_next+0x1f8>
    3290:	dc 01       	movw	r26, r24
    3292:	ed 91       	ld	r30, X+
    3294:	fc 91       	ld	r31, X
    3296:	22 81       	ldd	r18, Z+2	; 0x02
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	21 50       	subi	r18, 0x01	; 1
    329c:	31 09       	sbc	r19, r1
    329e:	ce 01       	movw	r24, r28
    32a0:	92 95       	swap	r25
    32a2:	82 95       	swap	r24
    32a4:	8f 70       	andi	r24, 0x0F	; 15
    32a6:	89 27       	eor	r24, r25
    32a8:	9f 70       	andi	r25, 0x0F	; 15
    32aa:	89 27       	eor	r24, r25
    32ac:	28 23       	and	r18, r24
    32ae:	39 23       	and	r19, r25
    32b0:	23 2b       	or	r18, r19
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <dir_next+0xbc>
    32b4:	9e c0       	rjmp	.+316    	; 0x33f2 <dir_next+0x1f8>
    32b6:	cf 01       	movw	r24, r30
    32b8:	b0 db       	rcall	.-2208   	; 0x2a1a <get_fat>
    32ba:	4b 01       	movw	r8, r22
    32bc:	5c 01       	movw	r10, r24
    32be:	62 30       	cpi	r22, 0x02	; 2
    32c0:	71 05       	cpc	r23, r1
    32c2:	81 05       	cpc	r24, r1
    32c4:	91 05       	cpc	r25, r1
    32c6:	08 f4       	brcc	.+2      	; 0x32ca <dir_next+0xd0>
    32c8:	b6 c0       	rjmp	.+364    	; 0x3436 <dir_next+0x23c>
    32ca:	6f 3f       	cpi	r22, 0xFF	; 255
    32cc:	7f 4f       	sbci	r23, 0xFF	; 255
    32ce:	8f 4f       	sbci	r24, 0xFF	; 255
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <dir_next+0xdc>
    32d4:	b2 c0       	rjmp	.+356    	; 0x343a <dir_next+0x240>
    32d6:	d8 01       	movw	r26, r16
    32d8:	ed 91       	ld	r30, X+
    32da:	fc 91       	ld	r31, X
    32dc:	82 89       	ldd	r24, Z+18	; 0x12
    32de:	93 89       	ldd	r25, Z+19	; 0x13
    32e0:	a4 89       	ldd	r26, Z+20	; 0x14
    32e2:	b5 89       	ldd	r27, Z+21	; 0x15
    32e4:	88 16       	cp	r8, r24
    32e6:	99 06       	cpc	r9, r25
    32e8:	aa 06       	cpc	r10, r26
    32ea:	bb 06       	cpc	r11, r27
    32ec:	08 f4       	brcc	.+2      	; 0x32f0 <dir_next+0xf6>
    32ee:	70 c0       	rjmp	.+224    	; 0x33d0 <dir_next+0x1d6>
    32f0:	ef 28       	or	r14, r15
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <dir_next+0xfc>
    32f4:	a4 c0       	rjmp	.+328    	; 0x343e <dir_next+0x244>
    32f6:	d8 01       	movw	r26, r16
    32f8:	1a 96       	adiw	r26, 0x0a	; 10
    32fa:	4d 91       	ld	r20, X+
    32fc:	5d 91       	ld	r21, X+
    32fe:	6d 91       	ld	r22, X+
    3300:	7c 91       	ld	r23, X
    3302:	1d 97       	sbiw	r26, 0x0d	; 13
    3304:	cf 01       	movw	r24, r30
    3306:	6a de       	rcall	.-812    	; 0x2fdc <create_chain>
    3308:	4b 01       	movw	r8, r22
    330a:	5c 01       	movw	r10, r24
    330c:	61 15       	cp	r22, r1
    330e:	71 05       	cpc	r23, r1
    3310:	81 05       	cpc	r24, r1
    3312:	91 05       	cpc	r25, r1
    3314:	09 f4       	brne	.+2      	; 0x3318 <dir_next+0x11e>
    3316:	95 c0       	rjmp	.+298    	; 0x3442 <dir_next+0x248>
    3318:	61 30       	cpi	r22, 0x01	; 1
    331a:	71 05       	cpc	r23, r1
    331c:	81 05       	cpc	r24, r1
    331e:	91 05       	cpc	r25, r1
    3320:	09 f4       	brne	.+2      	; 0x3324 <dir_next+0x12a>
    3322:	91 c0       	rjmp	.+290    	; 0x3446 <dir_next+0x24c>
    3324:	6f 3f       	cpi	r22, 0xFF	; 255
    3326:	7f 4f       	sbci	r23, 0xFF	; 255
    3328:	8f 4f       	sbci	r24, 0xFF	; 255
    332a:	9f 4f       	sbci	r25, 0xFF	; 255
    332c:	09 f4       	brne	.+2      	; 0x3330 <dir_next+0x136>
    332e:	8d c0       	rjmp	.+282    	; 0x344a <dir_next+0x250>
    3330:	d8 01       	movw	r26, r16
    3332:	8d 91       	ld	r24, X+
    3334:	9c 91       	ld	r25, X
    3336:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sync_window>
    333a:	81 11       	cpse	r24, r1
    333c:	88 c0       	rjmp	.+272    	; 0x344e <dir_next+0x254>
    333e:	f8 01       	movw	r30, r16
    3340:	80 81       	ld	r24, Z
    3342:	91 81       	ldd	r25, Z+1	; 0x01
    3344:	fc 01       	movw	r30, r24
    3346:	be 96       	adiw	r30, 0x2e	; 46
    3348:	82 5d       	subi	r24, 0xD2	; 210
    334a:	9d 4f       	sbci	r25, 0xFD	; 253
    334c:	11 92       	st	Z+, r1
    334e:	e8 17       	cp	r30, r24
    3350:	f9 07       	cpc	r31, r25
    3352:	e1 f7       	brne	.-8      	; 0x334c <dir_next+0x152>
    3354:	d8 01       	movw	r26, r16
    3356:	ed 90       	ld	r14, X+
    3358:	fc 90       	ld	r15, X
    335a:	b5 01       	movw	r22, r10
    335c:	a4 01       	movw	r20, r8
    335e:	c7 01       	movw	r24, r14
    3360:	2e db       	rcall	.-2468   	; 0x29be <clust2sect>
    3362:	f7 01       	movw	r30, r14
    3364:	62 a7       	std	Z+42, r22	; 0x2a
    3366:	73 a7       	std	Z+43, r23	; 0x2b
    3368:	84 a7       	std	Z+44, r24	; 0x2c
    336a:	95 a7       	std	Z+45, r25	; 0x2d
    336c:	e1 2c       	mov	r14, r1
    336e:	f1 2c       	mov	r15, r1
    3370:	77 24       	eor	r7, r7
    3372:	73 94       	inc	r7
    3374:	19 c0       	rjmp	.+50     	; 0x33a8 <dir_next+0x1ae>
    3376:	74 82       	std	Z+4, r7	; 0x04
    3378:	d8 01       	movw	r26, r16
    337a:	8d 91       	ld	r24, X+
    337c:	9c 91       	ld	r25, X
    337e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sync_window>
    3382:	81 11       	cpse	r24, r1
    3384:	66 c0       	rjmp	.+204    	; 0x3452 <dir_next+0x258>
    3386:	d8 01       	movw	r26, r16
    3388:	ed 91       	ld	r30, X+
    338a:	fc 91       	ld	r31, X
    338c:	82 a5       	ldd	r24, Z+42	; 0x2a
    338e:	93 a5       	ldd	r25, Z+43	; 0x2b
    3390:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3392:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3394:	01 96       	adiw	r24, 0x01	; 1
    3396:	a1 1d       	adc	r26, r1
    3398:	b1 1d       	adc	r27, r1
    339a:	82 a7       	std	Z+42, r24	; 0x2a
    339c:	93 a7       	std	Z+43, r25	; 0x2b
    339e:	a4 a7       	std	Z+44, r26	; 0x2c
    33a0:	b5 a7       	std	Z+45, r27	; 0x2d
    33a2:	bf ef       	ldi	r27, 0xFF	; 255
    33a4:	eb 1a       	sub	r14, r27
    33a6:	fb 0a       	sbc	r15, r27
    33a8:	d8 01       	movw	r26, r16
    33aa:	ed 91       	ld	r30, X+
    33ac:	fc 91       	ld	r31, X
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	e8 16       	cp	r14, r24
    33b4:	f9 06       	cpc	r15, r25
    33b6:	f8 f2       	brcs	.-66     	; 0x3376 <dir_next+0x17c>
    33b8:	82 a5       	ldd	r24, Z+42	; 0x2a
    33ba:	93 a5       	ldd	r25, Z+43	; 0x2b
    33bc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    33be:	b5 a5       	ldd	r27, Z+45	; 0x2d
    33c0:	8e 19       	sub	r24, r14
    33c2:	9f 09       	sbc	r25, r15
    33c4:	a1 09       	sbc	r26, r1
    33c6:	b1 09       	sbc	r27, r1
    33c8:	82 a7       	std	Z+42, r24	; 0x2a
    33ca:	93 a7       	std	Z+43, r25	; 0x2b
    33cc:	a4 a7       	std	Z+44, r26	; 0x2c
    33ce:	b5 a7       	std	Z+45, r27	; 0x2d
    33d0:	f8 01       	movw	r30, r16
    33d2:	82 86       	std	Z+10, r8	; 0x0a
    33d4:	93 86       	std	Z+11, r9	; 0x0b
    33d6:	a4 86       	std	Z+12, r10	; 0x0c
    33d8:	b5 86       	std	Z+13, r11	; 0x0d
    33da:	b5 01       	movw	r22, r10
    33dc:	a4 01       	movw	r20, r8
    33de:	80 81       	ld	r24, Z
    33e0:	91 81       	ldd	r25, Z+1	; 0x01
    33e2:	ed da       	rcall	.-2598   	; 0x29be <clust2sect>
    33e4:	d8 01       	movw	r26, r16
    33e6:	1e 96       	adiw	r26, 0x0e	; 14
    33e8:	6d 93       	st	X+, r22
    33ea:	7d 93       	st	X+, r23
    33ec:	8d 93       	st	X+, r24
    33ee:	9c 93       	st	X, r25
    33f0:	51 97       	sbiw	r26, 0x11	; 17
    33f2:	f8 01       	movw	r30, r16
    33f4:	d5 83       	std	Z+5, r29	; 0x05
    33f6:	c4 83       	std	Z+4, r28	; 0x04
    33f8:	cc 0c       	add	r12, r12
    33fa:	dd 1c       	adc	r13, r13
    33fc:	cc 0c       	add	r12, r12
    33fe:	dd 1c       	adc	r13, r13
    3400:	cc 0c       	add	r12, r12
    3402:	dd 1c       	adc	r13, r13
    3404:	cc 0c       	add	r12, r12
    3406:	dd 1c       	adc	r13, r13
    3408:	cc 0c       	add	r12, r12
    340a:	dd 1c       	adc	r13, r13
    340c:	fe e2       	ldi	r31, 0x2E	; 46
    340e:	cf 0e       	add	r12, r31
    3410:	d1 1c       	adc	r13, r1
    3412:	d8 01       	movw	r26, r16
    3414:	8d 91       	ld	r24, X+
    3416:	9c 91       	ld	r25, X
    3418:	11 97       	sbiw	r26, 0x01	; 1
    341a:	c8 0e       	add	r12, r24
    341c:	d9 1e       	adc	r13, r25
    341e:	53 96       	adiw	r26, 0x13	; 19
    3420:	dc 92       	st	X, r13
    3422:	ce 92       	st	-X, r12
    3424:	52 97       	sbiw	r26, 0x12	; 18
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	15 c0       	rjmp	.+42     	; 0x3454 <dir_next+0x25a>
    342a:	84 e0       	ldi	r24, 0x04	; 4
    342c:	13 c0       	rjmp	.+38     	; 0x3454 <dir_next+0x25a>
    342e:	84 e0       	ldi	r24, 0x04	; 4
    3430:	11 c0       	rjmp	.+34     	; 0x3454 <dir_next+0x25a>
    3432:	84 e0       	ldi	r24, 0x04	; 4
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <dir_next+0x25a>
    3436:	82 e0       	ldi	r24, 0x02	; 2
    3438:	0d c0       	rjmp	.+26     	; 0x3454 <dir_next+0x25a>
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	0b c0       	rjmp	.+22     	; 0x3454 <dir_next+0x25a>
    343e:	84 e0       	ldi	r24, 0x04	; 4
    3440:	09 c0       	rjmp	.+18     	; 0x3454 <dir_next+0x25a>
    3442:	87 e0       	ldi	r24, 0x07	; 7
    3444:	07 c0       	rjmp	.+14     	; 0x3454 <dir_next+0x25a>
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	05 c0       	rjmp	.+10     	; 0x3454 <dir_next+0x25a>
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <dir_next+0x25a>
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	01 c0       	rjmp	.+2      	; 0x3454 <dir_next+0x25a>
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	1f 91       	pop	r17
    345a:	0f 91       	pop	r16
    345c:	ff 90       	pop	r15
    345e:	ef 90       	pop	r14
    3460:	df 90       	pop	r13
    3462:	cf 90       	pop	r12
    3464:	bf 90       	pop	r11
    3466:	af 90       	pop	r10
    3468:	9f 90       	pop	r9
    346a:	8f 90       	pop	r8
    346c:	7f 90       	pop	r7
    346e:	08 95       	ret

00003470 <f_mount>:
    3470:	1f 93       	push	r17
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	00 d0       	rcall	.+0      	; 0x3478 <f_mount+0x8>
    3478:	00 d0       	rcall	.+0      	; 0x347a <f_mount+0xa>
    347a:	00 d0       	rcall	.+0      	; 0x347c <f_mount+0xc>
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	8b 83       	std	Y+3, r24	; 0x03
    3484:	7e 83       	std	Y+6, r23	; 0x06
    3486:	6d 83       	std	Y+5, r22	; 0x05
    3488:	14 2f       	mov	r17, r20
    348a:	7a 83       	std	Y+2, r23	; 0x02
    348c:	69 83       	std	Y+1, r22	; 0x01
    348e:	ce 01       	movw	r24, r28
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <get_ldnumber>
    3496:	99 23       	and	r25, r25
    3498:	34 f1       	brlt	.+76     	; 0x34e6 <f_mount+0x76>
    349a:	fc 01       	movw	r30, r24
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	e9 5d       	subi	r30, 0xD9	; 217
    34a2:	fb 4f       	sbci	r31, 0xFB	; 251
    34a4:	01 90       	ld	r0, Z+
    34a6:	f0 81       	ld	r31, Z
    34a8:	e0 2d       	mov	r30, r0
    34aa:	30 97       	sbiw	r30, 0x00	; 0
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <f_mount+0x40>
    34ae:	10 82       	st	Z, r1
    34b0:	eb 81       	ldd	r30, Y+3	; 0x03
    34b2:	fc 81       	ldd	r31, Y+4	; 0x04
    34b4:	30 97       	sbiw	r30, 0x00	; 0
    34b6:	e9 f0       	breq	.+58     	; 0x34f2 <f_mount+0x82>
    34b8:	10 82       	st	Z, r1
    34ba:	2b 81       	ldd	r18, Y+3	; 0x03
    34bc:	3c 81       	ldd	r19, Y+4	; 0x04
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	fc 01       	movw	r30, r24
    34c4:	e9 5d       	subi	r30, 0xD9	; 217
    34c6:	fb 4f       	sbci	r31, 0xFB	; 251
    34c8:	31 83       	std	Z+1, r19	; 0x01
    34ca:	20 83       	st	Z, r18
    34cc:	23 2b       	or	r18, r19
    34ce:	69 f0       	breq	.+26     	; 0x34ea <f_mount+0x7a>
    34d0:	11 30       	cpi	r17, 0x01	; 1
    34d2:	69 f4       	brne	.+26     	; 0x34ee <f_mount+0x7e>
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	be 01       	movw	r22, r28
    34d8:	6b 5f       	subi	r22, 0xFB	; 251
    34da:	7f 4f       	sbci	r23, 0xFF	; 255
    34dc:	ce 01       	movw	r24, r28
    34de:	03 96       	adiw	r24, 0x03	; 3
    34e0:	0e 94 1d 11 	call	0x223a	; 0x223a <find_volume>
    34e4:	0e c0       	rjmp	.+28     	; 0x3502 <f_mount+0x92>
    34e6:	8b e0       	ldi	r24, 0x0B	; 11
    34e8:	0c c0       	rjmp	.+24     	; 0x3502 <f_mount+0x92>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	0a c0       	rjmp	.+20     	; 0x3502 <f_mount+0x92>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <f_mount+0x92>
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	fc 01       	movw	r30, r24
    34f8:	e9 5d       	subi	r30, 0xD9	; 217
    34fa:	fb 4f       	sbci	r31, 0xFB	; 251
    34fc:	11 82       	std	Z+1, r1	; 0x01
    34fe:	10 82       	st	Z, r1
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	26 96       	adiw	r28, 0x06	; 6
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	1f 91       	pop	r17
    3514:	08 95       	ret

00003516 <f_open>:
    3516:	2f 92       	push	r2
    3518:	3f 92       	push	r3
    351a:	4f 92       	push	r4
    351c:	5f 92       	push	r5
    351e:	6f 92       	push	r6
    3520:	7f 92       	push	r7
    3522:	8f 92       	push	r8
    3524:	9f 92       	push	r9
    3526:	af 92       	push	r10
    3528:	bf 92       	push	r11
    352a:	cf 92       	push	r12
    352c:	df 92       	push	r13
    352e:	ef 92       	push	r14
    3530:	ff 92       	push	r15
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	ae 97       	sbiw	r28, 0x2e	; 46
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	7c a3       	std	Y+36, r23	; 0x24
    354c:	6b a3       	std	Y+35, r22	; 0x23
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	09 f4       	brne	.+2      	; 0x3554 <f_open+0x3e>
    3552:	83 c2       	rjmp	.+1286   	; 0x3a5a <f_open+0x544>
    3554:	4d a3       	std	Y+37, r20	; 0x25
    3556:	1c 01       	movw	r2, r24
    3558:	dc 01       	movw	r26, r24
    355a:	1d 92       	st	X+, r1
    355c:	1c 92       	st	X, r1
    355e:	4e 71       	andi	r20, 0x1E	; 30
    3560:	be 01       	movw	r22, r28
    3562:	6d 5d       	subi	r22, 0xDD	; 221
    3564:	7f 4f       	sbci	r23, 0xFF	; 255
    3566:	ce 01       	movw	r24, r28
    3568:	01 96       	adiw	r24, 0x01	; 1
    356a:	0e 94 1d 11 	call	0x223a	; 0x223a <find_volume>
    356e:	81 11       	cpse	r24, r1
    3570:	03 c3       	rjmp	.+1542   	; 0x3b78 <f_open+0x662>
    3572:	ce 01       	movw	r24, r28
    3574:	47 96       	adiw	r24, 0x17	; 23
    3576:	9e 8b       	std	Y+22, r25	; 0x16
    3578:	8d 8b       	std	Y+21, r24	; 0x15
    357a:	cb a0       	ldd	r12, Y+35	; 0x23
    357c:	dc a0       	ldd	r13, Y+36	; 0x24
    357e:	f6 01       	movw	r30, r12
    3580:	80 81       	ld	r24, Z
    3582:	8f 32       	cpi	r24, 0x2F	; 47
    3584:	11 f0       	breq	.+4      	; 0x358a <f_open+0x74>
    3586:	8c 35       	cpi	r24, 0x5C	; 92
    3588:	19 f4       	brne	.+6      	; 0x3590 <f_open+0x7a>
    358a:	ff ef       	ldi	r31, 0xFF	; 255
    358c:	cf 1a       	sub	r12, r31
    358e:	df 0a       	sbc	r13, r31
    3590:	2d a1       	ldd	r18, Y+37	; 0x25
    3592:	2f 71       	andi	r18, 0x1F	; 31
    3594:	29 a7       	std	Y+41, r18	; 0x29
    3596:	1f 82       	std	Y+7, r1	; 0x07
    3598:	18 86       	std	Y+8, r1	; 0x08
    359a:	19 86       	std	Y+9, r1	; 0x09
    359c:	1a 86       	std	Y+10, r1	; 0x0a
    359e:	d6 01       	movw	r26, r12
    35a0:	8c 91       	ld	r24, X
    35a2:	80 32       	cpi	r24, 0x20	; 32
    35a4:	68 f4       	brcc	.+26     	; 0x35c0 <f_open+0xaa>
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	ce 01       	movw	r24, r28
    35ac:	01 96       	adiw	r24, 0x01	; 1
    35ae:	34 db       	rcall	.-2456   	; 0x2c18 <dir_sdi>
    35b0:	1c 8a       	std	Y+20, r1	; 0x14
    35b2:	1b 8a       	std	Y+19, r1	; 0x13
    35b4:	e1 2c       	mov	r14, r1
    35b6:	f1 2c       	mov	r15, r1
    35b8:	88 23       	and	r24, r24
    35ba:	09 f4       	brne	.+2      	; 0x35be <f_open+0xa8>
    35bc:	91 c2       	rjmp	.+1314   	; 0x3ae0 <f_open+0x5ca>
    35be:	87 c2       	rjmp	.+1294   	; 0x3ace <f_open+0x5b8>
    35c0:	68 94       	set
    35c2:	bb 24       	eor	r11, r11
    35c4:	b5 f8       	bld	r11, 5
    35c6:	a1 2c       	mov	r10, r1
    35c8:	71 2c       	mov	r7, r1
    35ca:	68 94       	set
    35cc:	66 24       	eor	r6, r6
    35ce:	63 f8       	bld	r6, 3
    35d0:	51 2c       	mov	r5, r1
    35d2:	41 2c       	mov	r4, r1
    35d4:	6a a6       	std	Y+42, r6	; 0x2a
    35d6:	5e a6       	std	Y+46, r5	; 0x2e
    35d8:	f6 01       	movw	r30, r12
    35da:	af 01       	movw	r20, r30
    35dc:	81 91       	ld	r24, Z+
    35de:	8f 32       	cpi	r24, 0x2F	; 47
    35e0:	e1 f3       	breq	.-8      	; 0x35da <f_open+0xc4>
    35e2:	8c 35       	cpi	r24, 0x5C	; 92
    35e4:	d1 f3       	breq	.-12     	; 0x35da <f_open+0xc4>
    35e6:	0d 89       	ldd	r16, Y+21	; 0x15
    35e8:	1e 89       	ldd	r17, Y+22	; 0x16
    35ea:	f8 01       	movw	r30, r16
    35ec:	c8 01       	movw	r24, r16
    35ee:	0b 96       	adiw	r24, 0x0b	; 11
    35f0:	b1 92       	st	Z+, r11
    35f2:	e8 17       	cp	r30, r24
    35f4:	f9 07       	cpc	r31, r25
    35f6:	e1 f7       	brne	.-8      	; 0x35f0 <f_open+0xda>
    35f8:	6a 01       	movw	r12, r20
    35fa:	ea 2c       	mov	r14, r10
    35fc:	f7 2c       	mov	r15, r7
    35fe:	8a 2d       	mov	r24, r10
    3600:	97 2d       	mov	r25, r7
    3602:	86 2c       	mov	r8, r6
    3604:	95 2c       	mov	r9, r5
    3606:	74 2d       	mov	r23, r4
    3608:	da 01       	movw	r26, r20
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	6d 91       	ld	r22, X+
    360e:	61 32       	cpi	r22, 0x21	; 33
    3610:	08 f4       	brcc	.+2      	; 0x3614 <f_open+0xfe>
    3612:	3c c2       	rjmp	.+1144   	; 0x3a8c <f_open+0x576>
    3614:	6f 32       	cpi	r22, 0x2F	; 47
    3616:	09 f4       	brne	.+2      	; 0x361a <f_open+0x104>
    3618:	3e c2       	rjmp	.+1148   	; 0x3a96 <f_open+0x580>
    361a:	6c 35       	cpi	r22, 0x5C	; 92
    361c:	09 f4       	brne	.+2      	; 0x3620 <f_open+0x10a>
    361e:	3b c2       	rjmp	.+1142   	; 0x3a96 <f_open+0x580>
    3620:	6e 32       	cpi	r22, 0x2E	; 46
    3622:	09 f4       	brne	.+2      	; 0x3626 <f_open+0x110>
    3624:	1c c2       	rjmp	.+1080   	; 0x3a5e <f_open+0x548>
    3626:	e8 14       	cp	r14, r8
    3628:	f9 04       	cpc	r15, r9
    362a:	08 f0       	brcs	.+2      	; 0x362e <f_open+0x118>
    362c:	79 c2       	rjmp	.+1266   	; 0x3b20 <f_open+0x60a>
    362e:	0a c0       	rjmp	.+20     	; 0x3644 <f_open+0x12e>
    3630:	77 0f       	add	r23, r23
    3632:	77 0f       	add	r23, r23
    3634:	ea a4       	ldd	r14, Y+42	; 0x2a
    3636:	fe a4       	ldd	r15, Y+46	; 0x2e
    3638:	0f 2e       	mov	r0, r31
    363a:	fb e0       	ldi	r31, 0x0B	; 11
    363c:	8f 2e       	mov	r8, r31
    363e:	f0 2d       	mov	r31, r0
    3640:	91 2c       	mov	r9, r1
    3642:	e3 cf       	rjmp	.-58     	; 0x360a <f_open+0xf4>
    3644:	66 23       	and	r22, r22
    3646:	0c f0       	brlt	.+2      	; 0x364a <f_open+0x134>
    3648:	10 c2       	rjmp	.+1056   	; 0x3a6a <f_open+0x554>
    364a:	73 60       	ori	r23, 0x03	; 3
    364c:	e6 2f       	mov	r30, r22
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	ea 56       	subi	r30, 0x6A	; 106
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	09 c2       	rjmp	.+1042   	; 0x3a6a <f_open+0x554>
    3658:	81 91       	ld	r24, Z+
    365a:	88 23       	and	r24, r24
    365c:	09 f4       	brne	.+2      	; 0x3660 <f_open+0x14a>
    365e:	0f c2       	rjmp	.+1054   	; 0x3a7e <f_open+0x568>
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	48 17       	cp	r20, r24
    3664:	59 07       	cpc	r21, r25
    3666:	c1 f7       	brne	.-16     	; 0x3658 <f_open+0x142>
    3668:	86 e0       	ldi	r24, 0x06	; 6
    366a:	77 c2       	rjmp	.+1262   	; 0x3b5a <f_open+0x644>
    366c:	72 60       	ori	r23, 0x02	; 2
    366e:	06 c0       	rjmp	.+12     	; 0x367c <f_open+0x166>
    3670:	2f e9       	ldi	r18, 0x9F	; 159
    3672:	26 0f       	add	r18, r22
    3674:	2a 31       	cpi	r18, 0x1A	; 26
    3676:	10 f4       	brcc	.+4      	; 0x367c <f_open+0x166>
    3678:	71 60       	ori	r23, 0x01	; 1
    367a:	60 52       	subi	r22, 0x20	; 32
    367c:	f8 01       	movw	r30, r16
    367e:	ee 0d       	add	r30, r14
    3680:	ff 1d       	adc	r31, r15
    3682:	60 83       	st	Z, r22
    3684:	f7 01       	movw	r30, r14
    3686:	31 96       	adiw	r30, 0x01	; 1
    3688:	7f 01       	movw	r14, r30
    368a:	bf cf       	rjmp	.-130    	; 0x360a <f_open+0xf4>
    368c:	ef 28       	or	r14, r15
    368e:	09 f4       	brne	.+2      	; 0x3692 <f_open+0x17c>
    3690:	47 c2       	rjmp	.+1166   	; 0x3b20 <f_open+0x60a>
    3692:	d8 01       	movw	r26, r16
    3694:	2c 91       	ld	r18, X
    3696:	25 3e       	cpi	r18, 0xE5	; 229
    3698:	11 f4       	brne	.+4      	; 0x369e <f_open+0x188>
    369a:	e5 e0       	ldi	r30, 0x05	; 5
    369c:	ec 93       	st	X, r30
    369e:	f8 e0       	ldi	r31, 0x08	; 8
    36a0:	8f 16       	cp	r8, r31
    36a2:	91 04       	cpc	r9, r1
    36a4:	19 f4       	brne	.+6      	; 0x36ac <f_open+0x196>
    36a6:	79 2f       	mov	r23, r25
    36a8:	77 0f       	add	r23, r23
    36aa:	77 0f       	add	r23, r23
    36ac:	97 2f       	mov	r25, r23
    36ae:	93 70       	andi	r25, 0x03	; 3
    36b0:	91 30       	cpi	r25, 0x01	; 1
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <f_open+0x1a0>
    36b4:	80 61       	ori	r24, 0x10	; 16
    36b6:	97 2f       	mov	r25, r23
    36b8:	9c 70       	andi	r25, 0x0C	; 12
    36ba:	94 30       	cpi	r25, 0x04	; 4
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <f_open+0x1aa>
    36be:	88 60       	ori	r24, 0x08	; 8
    36c0:	d8 01       	movw	r26, r16
    36c2:	1b 96       	adiw	r26, 0x0b	; 11
    36c4:	8c 93       	st	X, r24
    36c6:	6a 2d       	mov	r22, r10
    36c8:	77 2d       	mov	r23, r7
    36ca:	ce 01       	movw	r24, r28
    36cc:	01 96       	adiw	r24, 0x01	; 1
    36ce:	a4 da       	rcall	.-2744   	; 0x2c18 <dir_sdi>
    36d0:	81 11       	cpse	r24, r1
    36d2:	ec c1       	rjmp	.+984    	; 0x3aac <f_open+0x596>
    36d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    36d6:	58 89       	ldd	r21, Y+16	; 0x10
    36d8:	69 89       	ldd	r22, Y+17	; 0x11
    36da:	7a 89       	ldd	r23, Y+18	; 0x12
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <move_window>
    36e4:	81 11       	cpse	r24, r1
    36e6:	e2 c1       	rjmp	.+964    	; 0x3aac <f_open+0x596>
    36e8:	6b 89       	ldd	r22, Y+19	; 0x13
    36ea:	7c 89       	ldd	r23, Y+20	; 0x14
    36ec:	fb 01       	movw	r30, r22
    36ee:	80 81       	ld	r24, Z
    36f0:	88 23       	and	r24, r24
    36f2:	d1 f0       	breq	.+52     	; 0x3728 <f_open+0x212>
    36f4:	83 85       	ldd	r24, Z+11	; 0x0b
    36f6:	83 fd       	sbrc	r24, 3
    36f8:	0f c0       	rjmp	.+30     	; 0x3718 <f_open+0x202>
    36fa:	4d 89       	ldd	r20, Y+21	; 0x15
    36fc:	5e 89       	ldd	r21, Y+22	; 0x16
    36fe:	da 01       	movw	r26, r20
    3700:	9b 01       	movw	r18, r22
    3702:	25 5f       	subi	r18, 0xF5	; 245
    3704:	3f 4f       	sbci	r19, 0xFF	; 255
    3706:	04 c0       	rjmp	.+8      	; 0x3710 <f_open+0x1fa>
    3708:	e2 17       	cp	r30, r18
    370a:	f3 07       	cpc	r31, r19
    370c:	09 f4       	brne	.+2      	; 0x3710 <f_open+0x1fa>
    370e:	c8 c1       	rjmp	.+912    	; 0x3aa0 <f_open+0x58a>
    3710:	91 91       	ld	r25, Z+
    3712:	8d 91       	ld	r24, X+
    3714:	98 17       	cp	r25, r24
    3716:	c1 f3       	breq	.-16     	; 0x3708 <f_open+0x1f2>
    3718:	6a 2d       	mov	r22, r10
    371a:	77 2d       	mov	r23, r7
    371c:	ce 01       	movw	r24, r28
    371e:	01 96       	adiw	r24, 0x01	; 1
    3720:	6c dd       	rcall	.-1320   	; 0x31fa <dir_next>
    3722:	88 23       	and	r24, r24
    3724:	b9 f2       	breq	.-82     	; 0x36d4 <f_open+0x1be>
    3726:	c2 c1       	rjmp	.+900    	; 0x3aac <f_open+0x596>
    3728:	ed 89       	ldd	r30, Y+21	; 0x15
    372a:	fe 89       	ldd	r31, Y+22	; 0x16
    372c:	93 85       	ldd	r25, Z+11	; 0x0b
    372e:	92 fd       	sbrc	r25, 2
    3730:	0d c2       	rjmp	.+1050   	; 0x3b4c <f_open+0x636>
    3732:	85 e0       	ldi	r24, 0x05	; 5
    3734:	12 c2       	rjmp	.+1060   	; 0x3b5a <f_open+0x644>
    3736:	db 01       	movw	r26, r22
    3738:	1b 96       	adiw	r26, 0x0b	; 11
    373a:	8c 91       	ld	r24, X
    373c:	84 ff       	sbrs	r24, 4
    373e:	08 c2       	rjmp	.+1040   	; 0x3b50 <f_open+0x63a>
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	9a 81       	ldd	r25, Y+2	; 0x02
    3744:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <ld_clust>
    3748:	6f 83       	std	Y+7, r22	; 0x07
    374a:	78 87       	std	Y+8, r23	; 0x08
    374c:	89 87       	std	Y+9, r24	; 0x09
    374e:	9a 87       	std	Y+10, r25	; 0x0a
    3750:	43 cf       	rjmp	.-378    	; 0x35d8 <f_open+0xc2>
    3752:	81 11       	cpse	r24, r1
    3754:	ef c1       	rjmp	.+990    	; 0x3b34 <f_open+0x61e>
    3756:	44 c0       	rjmp	.+136    	; 0x37e0 <f_open+0x2ca>
    3758:	60 e0       	ldi	r22, 0x00	; 0
    375a:	70 e0       	ldi	r23, 0x00	; 0
    375c:	ce 01       	movw	r24, r28
    375e:	01 96       	adiw	r24, 0x01	; 1
    3760:	5b da       	rcall	.-2890   	; 0x2c18 <dir_sdi>
    3762:	81 11       	cpse	r24, r1
    3764:	06 c2       	rjmp	.+1036   	; 0x3b72 <f_open+0x65c>
    3766:	4f 85       	ldd	r20, Y+15	; 0x0f
    3768:	58 89       	ldd	r21, Y+16	; 0x10
    376a:	69 89       	ldd	r22, Y+17	; 0x11
    376c:	7a 89       	ldd	r23, Y+18	; 0x12
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	0e 94 54 10 	call	0x20a8	; 0x20a8 <move_window>
    3776:	81 11       	cpse	r24, r1
    3778:	fc c1       	rjmp	.+1016   	; 0x3b72 <f_open+0x65c>
    377a:	eb 89       	ldd	r30, Y+19	; 0x13
    377c:	fc 89       	ldd	r31, Y+20	; 0x14
    377e:	80 81       	ld	r24, Z
    3780:	85 3e       	cpi	r24, 0xE5	; 229
    3782:	51 f0       	breq	.+20     	; 0x3798 <f_open+0x282>
    3784:	88 23       	and	r24, r24
    3786:	41 f0       	breq	.+16     	; 0x3798 <f_open+0x282>
    3788:	61 e0       	ldi	r22, 0x01	; 1
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	ce 01       	movw	r24, r28
    378e:	01 96       	adiw	r24, 0x01	; 1
    3790:	34 dd       	rcall	.-1432   	; 0x31fa <dir_next>
    3792:	88 23       	and	r24, r24
    3794:	41 f3       	breq	.-48     	; 0x3766 <f_open+0x250>
    3796:	ed c1       	rjmp	.+986    	; 0x3b72 <f_open+0x65c>
    3798:	4f 85       	ldd	r20, Y+15	; 0x0f
    379a:	58 89       	ldd	r21, Y+16	; 0x10
    379c:	69 89       	ldd	r22, Y+17	; 0x11
    379e:	7a 89       	ldd	r23, Y+18	; 0x12
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <move_window>
    37a8:	81 11       	cpse	r24, r1
    37aa:	ca c1       	rjmp	.+916    	; 0x3b40 <f_open+0x62a>
    37ac:	eb 89       	ldd	r30, Y+19	; 0x13
    37ae:	fc 89       	ldd	r31, Y+20	; 0x14
    37b0:	cf 01       	movw	r24, r30
    37b2:	80 96       	adiw	r24, 0x20	; 32
    37b4:	11 92       	st	Z+, r1
    37b6:	e8 17       	cp	r30, r24
    37b8:	f9 07       	cpc	r31, r25
    37ba:	e1 f7       	brne	.-8      	; 0x37b4 <f_open+0x29e>
    37bc:	6d 89       	ldd	r22, Y+21	; 0x15
    37be:	7e 89       	ldd	r23, Y+22	; 0x16
    37c0:	4b e0       	ldi	r20, 0x0B	; 11
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	8b 89       	ldd	r24, Y+19	; 0x13
    37c6:	9c 89       	ldd	r25, Y+20	; 0x14
    37c8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <mem_cpy>
    37cc:	e9 81       	ldd	r30, Y+1	; 0x01
    37ce:	fa 81       	ldd	r31, Y+2	; 0x02
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	84 83       	std	Z+4, r24	; 0x04
    37d4:	b9 a5       	ldd	r27, Y+41	; 0x29
    37d6:	b8 60       	ori	r27, 0x08	; 8
    37d8:	b9 a7       	std	Y+41, r27	; 0x29
    37da:	eb 88       	ldd	r14, Y+19	; 0x13
    37dc:	fc 88       	ldd	r15, Y+20	; 0x14
    37de:	08 c0       	rjmp	.+16     	; 0x37f0 <f_open+0x2da>
    37e0:	f7 01       	movw	r30, r14
    37e2:	83 85       	ldd	r24, Z+11	; 0x0b
    37e4:	81 71       	andi	r24, 0x11	; 17
    37e6:	09 f0       	breq	.+2      	; 0x37ea <f_open+0x2d4>
    37e8:	82 c1       	rjmp	.+772    	; 0x3aee <f_open+0x5d8>
    37ea:	fd a1       	ldd	r31, Y+37	; 0x25
    37ec:	f2 fd       	sbrc	r31, 2
    37ee:	81 c1       	rjmp	.+770    	; 0x3af2 <f_open+0x5dc>
    37f0:	29 a5       	ldd	r18, Y+41	; 0x29
    37f2:	23 ff       	sbrs	r18, 3
    37f4:	db c0       	rjmp	.+438    	; 0x39ac <f_open+0x496>
    37f6:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <get_fattime>
    37fa:	d7 01       	movw	r26, r14
    37fc:	1e 96       	adiw	r26, 0x0e	; 14
    37fe:	6c 93       	st	X, r22
    3800:	1e 97       	sbiw	r26, 0x0e	; 14
    3802:	47 2f       	mov	r20, r23
    3804:	55 27       	eor	r21, r21
    3806:	1f 96       	adiw	r26, 0x0f	; 15
    3808:	4c 93       	st	X, r20
    380a:	1f 97       	sbiw	r26, 0x0f	; 15
    380c:	4c 01       	movw	r8, r24
    380e:	aa 24       	eor	r10, r10
    3810:	bb 24       	eor	r11, r11
    3812:	50 96       	adiw	r26, 0x10	; 16
    3814:	8c 92       	st	X, r8
    3816:	50 97       	sbiw	r26, 0x10	; 16
    3818:	09 2f       	mov	r16, r25
    381a:	11 27       	eor	r17, r17
    381c:	22 27       	eor	r18, r18
    381e:	33 27       	eor	r19, r19
    3820:	51 96       	adiw	r26, 0x11	; 17
    3822:	0c 93       	st	X, r16
    3824:	51 97       	sbiw	r26, 0x11	; 17
    3826:	56 96       	adiw	r26, 0x16	; 22
    3828:	6c 93       	st	X, r22
    382a:	56 97       	sbiw	r26, 0x16	; 22
    382c:	57 96       	adiw	r26, 0x17	; 23
    382e:	4c 93       	st	X, r20
    3830:	57 97       	sbiw	r26, 0x17	; 23
    3832:	58 96       	adiw	r26, 0x18	; 24
    3834:	8c 92       	st	X, r8
    3836:	58 97       	sbiw	r26, 0x18	; 24
    3838:	59 96       	adiw	r26, 0x19	; 25
    383a:	0c 93       	st	X, r16
    383c:	59 97       	sbiw	r26, 0x19	; 25
    383e:	1b 96       	adiw	r26, 0x0b	; 11
    3840:	1c 92       	st	X, r1
    3842:	1b 97       	sbiw	r26, 0x0b	; 11
    3844:	5c 96       	adiw	r26, 0x1c	; 28
    3846:	1c 92       	st	X, r1
    3848:	5c 97       	sbiw	r26, 0x1c	; 28
    384a:	5d 96       	adiw	r26, 0x1d	; 29
    384c:	1c 92       	st	X, r1
    384e:	5d 97       	sbiw	r26, 0x1d	; 29
    3850:	5e 96       	adiw	r26, 0x1e	; 30
    3852:	1c 92       	st	X, r1
    3854:	5e 97       	sbiw	r26, 0x1e	; 30
    3856:	5f 96       	adiw	r26, 0x1f	; 31
    3858:	1c 92       	st	X, r1
    385a:	c9 80       	ldd	r12, Y+1	; 0x01
    385c:	da 80       	ldd	r13, Y+2	; 0x02
    385e:	b7 01       	movw	r22, r14
    3860:	c6 01       	movw	r24, r12
    3862:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <ld_clust>
    3866:	4b 01       	movw	r8, r22
    3868:	5c 01       	movw	r10, r24
    386a:	f7 01       	movw	r30, r14
    386c:	12 8e       	std	Z+26, r1	; 0x1a
    386e:	13 8e       	std	Z+27, r1	; 0x1b
    3870:	14 8a       	std	Z+20, r1	; 0x14
    3872:	15 8a       	std	Z+21, r1	; 0x15
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	d6 01       	movw	r26, r12
    3878:	14 96       	adiw	r26, 0x04	; 4
    387a:	8c 93       	st	X, r24
    387c:	14 97       	sbiw	r26, 0x04	; 4
    387e:	81 14       	cp	r8, r1
    3880:	91 04       	cpc	r9, r1
    3882:	a1 04       	cpc	r10, r1
    3884:	b1 04       	cpc	r11, r1
    3886:	09 f4       	brne	.+2      	; 0x388a <f_open+0x374>
    3888:	91 c0       	rjmp	.+290    	; 0x39ac <f_open+0x496>
    388a:	9a 96       	adiw	r26, 0x2a	; 42
    388c:	2d 91       	ld	r18, X+
    388e:	3d 91       	ld	r19, X+
    3890:	4d 91       	ld	r20, X+
    3892:	5c 91       	ld	r21, X
    3894:	9d 97       	sbiw	r26, 0x2d	; 45
    3896:	2a a7       	std	Y+42, r18	; 0x2a
    3898:	3b a7       	std	Y+43, r19	; 0x2b
    389a:	4c a7       	std	Y+44, r20	; 0x2c
    389c:	5d a7       	std	Y+45, r21	; 0x2d
    389e:	b2 e0       	ldi	r27, 0x02	; 2
    38a0:	8b 16       	cp	r8, r27
    38a2:	91 04       	cpc	r9, r1
    38a4:	a1 04       	cpc	r10, r1
    38a6:	b1 04       	cpc	r11, r1
    38a8:	08 f4       	brcc	.+2      	; 0x38ac <f_open+0x396>
    38aa:	28 c1       	rjmp	.+592    	; 0x3afc <f_open+0x5e6>
    38ac:	f6 01       	movw	r30, r12
    38ae:	82 89       	ldd	r24, Z+18	; 0x12
    38b0:	93 89       	ldd	r25, Z+19	; 0x13
    38b2:	a4 89       	ldd	r26, Z+20	; 0x14
    38b4:	b5 89       	ldd	r27, Z+21	; 0x15
    38b6:	88 16       	cp	r8, r24
    38b8:	99 06       	cpc	r9, r25
    38ba:	aa 06       	cpc	r10, r26
    38bc:	bb 06       	cpc	r11, r27
    38be:	08 f0       	brcs	.+2      	; 0x38c2 <f_open+0x3ac>
    38c0:	1f c1       	rjmp	.+574    	; 0x3b00 <f_open+0x5ea>
    38c2:	8d a2       	std	Y+37, r8	; 0x25
    38c4:	9e a2       	std	Y+38, r9	; 0x26
    38c6:	af a2       	std	Y+39, r10	; 0x27
    38c8:	b8 a6       	std	Y+40, r11	; 0x28
    38ca:	3f c0       	rjmp	.+126    	; 0x394a <f_open+0x434>
    38cc:	4d a1       	ldd	r20, Y+37	; 0x25
    38ce:	5e a1       	ldd	r21, Y+38	; 0x26
    38d0:	6f a1       	ldd	r22, Y+39	; 0x27
    38d2:	78 a5       	ldd	r23, Y+40	; 0x28
    38d4:	c6 01       	movw	r24, r12
    38d6:	a1 d8       	rcall	.-3774   	; 0x2a1a <get_fat>
    38d8:	2b 01       	movw	r4, r22
    38da:	3c 01       	movw	r6, r24
    38dc:	61 15       	cp	r22, r1
    38de:	71 05       	cpc	r23, r1
    38e0:	81 05       	cpc	r24, r1
    38e2:	91 05       	cpc	r25, r1
    38e4:	09 f4       	brne	.+2      	; 0x38e8 <f_open+0x3d2>
    38e6:	40 c0       	rjmp	.+128    	; 0x3968 <f_open+0x452>
    38e8:	61 30       	cpi	r22, 0x01	; 1
    38ea:	71 05       	cpc	r23, r1
    38ec:	81 05       	cpc	r24, r1
    38ee:	91 05       	cpc	r25, r1
    38f0:	09 f4       	brne	.+2      	; 0x38f4 <f_open+0x3de>
    38f2:	08 c1       	rjmp	.+528    	; 0x3b04 <f_open+0x5ee>
    38f4:	6f 3f       	cpi	r22, 0xFF	; 255
    38f6:	7f 4f       	sbci	r23, 0xFF	; 255
    38f8:	8f 4f       	sbci	r24, 0xFF	; 255
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	09 f4       	brne	.+2      	; 0x3900 <f_open+0x3ea>
    38fe:	04 c1       	rjmp	.+520    	; 0x3b08 <f_open+0x5f2>
    3900:	00 e0       	ldi	r16, 0x00	; 0
    3902:	10 e0       	ldi	r17, 0x00	; 0
    3904:	98 01       	movw	r18, r16
    3906:	4d a1       	ldd	r20, Y+37	; 0x25
    3908:	5e a1       	ldd	r21, Y+38	; 0x26
    390a:	6f a1       	ldd	r22, Y+39	; 0x27
    390c:	78 a5       	ldd	r23, Y+40	; 0x28
    390e:	c6 01       	movw	r24, r12
    3910:	3e da       	rcall	.-2948   	; 0x2d8e <put_fat>
    3912:	81 11       	cpse	r24, r1
    3914:	fa c0       	rjmp	.+500    	; 0x3b0a <f_open+0x5f4>
    3916:	f6 01       	movw	r30, r12
    3918:	86 85       	ldd	r24, Z+14	; 0x0e
    391a:	97 85       	ldd	r25, Z+15	; 0x0f
    391c:	a0 89       	ldd	r26, Z+16	; 0x10
    391e:	b1 89       	ldd	r27, Z+17	; 0x11
    3920:	8f 3f       	cpi	r24, 0xFF	; 255
    3922:	ff ef       	ldi	r31, 0xFF	; 255
    3924:	9f 07       	cpc	r25, r31
    3926:	af 07       	cpc	r26, r31
    3928:	bf 07       	cpc	r27, r31
    392a:	59 f0       	breq	.+22     	; 0x3942 <f_open+0x42c>
    392c:	01 96       	adiw	r24, 0x01	; 1
    392e:	a1 1d       	adc	r26, r1
    3930:	b1 1d       	adc	r27, r1
    3932:	f6 01       	movw	r30, r12
    3934:	86 87       	std	Z+14, r24	; 0x0e
    3936:	97 87       	std	Z+15, r25	; 0x0f
    3938:	a0 8b       	std	Z+16, r26	; 0x10
    393a:	b1 8b       	std	Z+17, r27	; 0x11
    393c:	85 81       	ldd	r24, Z+5	; 0x05
    393e:	81 60       	ori	r24, 0x01	; 1
    3940:	85 83       	std	Z+5, r24	; 0x05
    3942:	4d a2       	std	Y+37, r4	; 0x25
    3944:	5e a2       	std	Y+38, r5	; 0x26
    3946:	6f a2       	std	Y+39, r6	; 0x27
    3948:	78 a6       	std	Y+40, r7	; 0x28
    394a:	f6 01       	movw	r30, r12
    394c:	82 89       	ldd	r24, Z+18	; 0x12
    394e:	93 89       	ldd	r25, Z+19	; 0x13
    3950:	a4 89       	ldd	r26, Z+20	; 0x14
    3952:	b5 89       	ldd	r27, Z+21	; 0x15
    3954:	2d a1       	ldd	r18, Y+37	; 0x25
    3956:	3e a1       	ldd	r19, Y+38	; 0x26
    3958:	4f a1       	ldd	r20, Y+39	; 0x27
    395a:	58 a5       	ldd	r21, Y+40	; 0x28
    395c:	28 17       	cp	r18, r24
    395e:	39 07       	cpc	r19, r25
    3960:	4a 07       	cpc	r20, r26
    3962:	5b 07       	cpc	r21, r27
    3964:	08 f4       	brcc	.+2      	; 0x3968 <f_open+0x452>
    3966:	b2 cf       	rjmp	.-156    	; 0x38cc <f_open+0x3b6>
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	9a 81       	ldd	r25, Y+2	; 0x02
    396c:	31 e0       	ldi	r19, 0x01	; 1
    396e:	83 1a       	sub	r8, r19
    3970:	91 08       	sbc	r9, r1
    3972:	a1 08       	sbc	r10, r1
    3974:	b1 08       	sbc	r11, r1
    3976:	dc 01       	movw	r26, r24
    3978:	1a 96       	adiw	r26, 0x0a	; 10
    397a:	8d 92       	st	X+, r8
    397c:	9d 92       	st	X+, r9
    397e:	ad 92       	st	X+, r10
    3980:	bc 92       	st	X, r11
    3982:	1d 97       	sbiw	r26, 0x0d	; 13
    3984:	4a a5       	ldd	r20, Y+42	; 0x2a
    3986:	5b a5       	ldd	r21, Y+43	; 0x2b
    3988:	6c a5       	ldd	r22, Y+44	; 0x2c
    398a:	7d a5       	ldd	r23, Y+45	; 0x2d
    398c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <move_window>
    3990:	88 23       	and	r24, r24
    3992:	79 f0       	breq	.+30     	; 0x39b2 <f_open+0x49c>
    3994:	f1 c0       	rjmp	.+482    	; 0x3b78 <f_open+0x662>
    3996:	81 11       	cpse	r24, r1
    3998:	bf c0       	rjmp	.+382    	; 0x3b18 <f_open+0x602>
    399a:	f7 01       	movw	r30, r14
    399c:	83 85       	ldd	r24, Z+11	; 0x0b
    399e:	84 fd       	sbrc	r24, 4
    39a0:	b8 c0       	rjmp	.+368    	; 0x3b12 <f_open+0x5fc>
    39a2:	fd a1       	ldd	r31, Y+37	; 0x25
    39a4:	f1 ff       	sbrs	r31, 1
    39a6:	02 c0       	rjmp	.+4      	; 0x39ac <f_open+0x496>
    39a8:	80 fd       	sbrc	r24, 0
    39aa:	b5 c0       	rjmp	.+362    	; 0x3b16 <f_open+0x600>
    39ac:	29 a5       	ldd	r18, Y+41	; 0x29
    39ae:	23 ff       	sbrs	r18, 3
    39b0:	03 c0       	rjmp	.+6      	; 0x39b8 <f_open+0x4a2>
    39b2:	39 a5       	ldd	r19, Y+41	; 0x29
    39b4:	30 62       	ori	r19, 0x20	; 32
    39b6:	39 a7       	std	Y+41, r19	; 0x29
    39b8:	e9 81       	ldd	r30, Y+1	; 0x01
    39ba:	fa 81       	ldd	r31, Y+2	; 0x02
    39bc:	82 a5       	ldd	r24, Z+42	; 0x2a
    39be:	93 a5       	ldd	r25, Z+43	; 0x2b
    39c0:	a4 a5       	ldd	r26, Z+44	; 0x2c
    39c2:	b5 a5       	ldd	r27, Z+45	; 0x2d
    39c4:	f1 01       	movw	r30, r2
    39c6:	82 8f       	std	Z+26, r24	; 0x1a
    39c8:	93 8f       	std	Z+27, r25	; 0x1b
    39ca:	a4 8f       	std	Z+28, r26	; 0x1c
    39cc:	b5 8f       	std	Z+29, r27	; 0x1d
    39ce:	f7 8e       	std	Z+31, r15	; 0x1f
    39d0:	e6 8e       	std	Z+30, r14	; 0x1e
    39d2:	e9 a5       	ldd	r30, Y+41	; 0x29
    39d4:	d1 01       	movw	r26, r2
    39d6:	14 96       	adiw	r26, 0x04	; 4
    39d8:	ec 93       	st	X, r30
    39da:	14 97       	sbiw	r26, 0x04	; 4
    39dc:	15 96       	adiw	r26, 0x05	; 5
    39de:	1c 92       	st	X, r1
    39e0:	09 81       	ldd	r16, Y+1	; 0x01
    39e2:	1a 81       	ldd	r17, Y+2	; 0x02
    39e4:	b7 01       	movw	r22, r14
    39e6:	c8 01       	movw	r24, r16
    39e8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <ld_clust>
    39ec:	d1 01       	movw	r26, r2
    39ee:	1e 96       	adiw	r26, 0x0e	; 14
    39f0:	6d 93       	st	X+, r22
    39f2:	7d 93       	st	X+, r23
    39f4:	8d 93       	st	X+, r24
    39f6:	9c 93       	st	X, r25
    39f8:	51 97       	sbiw	r26, 0x11	; 17
    39fa:	f7 01       	movw	r30, r14
    39fc:	27 8d       	ldd	r18, Z+31	; 0x1f
    39fe:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	a0 e0       	ldi	r26, 0x00	; 0
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	dc 01       	movw	r26, r24
    3a08:	99 27       	eor	r25, r25
    3a0a:	88 27       	eor	r24, r24
    3a0c:	b2 2b       	or	r27, r18
    3a0e:	24 8d       	ldd	r18, Z+28	; 0x1c
    3a10:	ac 01       	movw	r20, r24
    3a12:	bd 01       	movw	r22, r26
    3a14:	42 2b       	or	r20, r18
    3a16:	25 8d       	ldd	r18, Z+29	; 0x1d
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	92 2f       	mov	r25, r18
    3a1c:	88 27       	eor	r24, r24
    3a1e:	a0 e0       	ldi	r26, 0x00	; 0
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	84 2b       	or	r24, r20
    3a24:	95 2b       	or	r25, r21
    3a26:	a6 2b       	or	r26, r22
    3a28:	b7 2b       	or	r27, r23
    3a2a:	f1 01       	movw	r30, r2
    3a2c:	82 87       	std	Z+10, r24	; 0x0a
    3a2e:	93 87       	std	Z+11, r25	; 0x0b
    3a30:	a4 87       	std	Z+12, r26	; 0x0c
    3a32:	b5 87       	std	Z+13, r27	; 0x0d
    3a34:	16 82       	std	Z+6, r1	; 0x06
    3a36:	17 82       	std	Z+7, r1	; 0x07
    3a38:	10 86       	std	Z+8, r1	; 0x08
    3a3a:	11 86       	std	Z+9, r1	; 0x09
    3a3c:	16 8a       	std	Z+22, r1	; 0x16
    3a3e:	17 8a       	std	Z+23, r1	; 0x17
    3a40:	10 8e       	std	Z+24, r1	; 0x18
    3a42:	11 8e       	std	Z+25, r1	; 0x19
    3a44:	11 83       	std	Z+1, r17	; 0x01
    3a46:	00 83       	st	Z, r16
    3a48:	d8 01       	movw	r26, r16
    3a4a:	16 96       	adiw	r26, 0x06	; 6
    3a4c:	8d 91       	ld	r24, X+
    3a4e:	9c 91       	ld	r25, X
    3a50:	17 97       	sbiw	r26, 0x07	; 7
    3a52:	93 83       	std	Z+3, r25	; 0x03
    3a54:	82 83       	std	Z+2, r24	; 0x02
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	8f c0       	rjmp	.+286    	; 0x3b78 <f_open+0x662>
    3a5a:	89 e0       	ldi	r24, 0x09	; 9
    3a5c:	8d c0       	rjmp	.+282    	; 0x3b78 <f_open+0x662>
    3a5e:	e8 e0       	ldi	r30, 0x08	; 8
    3a60:	8e 16       	cp	r8, r30
    3a62:	91 04       	cpc	r9, r1
    3a64:	09 f4       	brne	.+2      	; 0x3a68 <f_open+0x552>
    3a66:	e4 cd       	rjmp	.-1080   	; 0x3630 <f_open+0x11a>
    3a68:	75 c0       	rjmp	.+234    	; 0x3b54 <f_open+0x63e>
    3a6a:	46 2f       	mov	r20, r22
    3a6c:	50 e0       	ldi	r21, 0x00	; 0
    3a6e:	42 32       	cpi	r20, 0x22	; 34
    3a70:	51 05       	cpc	r21, r1
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <f_open+0x560>
    3a74:	71 c0       	rjmp	.+226    	; 0x3b58 <f_open+0x642>
    3a76:	e8 e0       	ldi	r30, 0x08	; 8
    3a78:	f1 e0       	ldi	r31, 0x01	; 1
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	ed cd       	rjmp	.-1062   	; 0x3658 <f_open+0x142>
    3a7e:	c9 01       	movw	r24, r18
    3a80:	2f eb       	ldi	r18, 0xBF	; 191
    3a82:	26 0f       	add	r18, r22
    3a84:	2a 31       	cpi	r18, 0x1A	; 26
    3a86:	08 f4       	brcc	.+2      	; 0x3a8a <f_open+0x574>
    3a88:	f1 cd       	rjmp	.-1054   	; 0x366c <f_open+0x156>
    3a8a:	f2 cd       	rjmp	.-1052   	; 0x3670 <f_open+0x15a>
    3a8c:	c8 0e       	add	r12, r24
    3a8e:	d9 1e       	adc	r13, r25
    3a90:	97 2f       	mov	r25, r23
    3a92:	84 e0       	ldi	r24, 0x04	; 4
    3a94:	fb cd       	rjmp	.-1034   	; 0x368c <f_open+0x176>
    3a96:	c8 0e       	add	r12, r24
    3a98:	d9 1e       	adc	r13, r25
    3a9a:	97 2f       	mov	r25, r23
    3a9c:	84 2d       	mov	r24, r4
    3a9e:	f6 cd       	rjmp	.-1044   	; 0x368c <f_open+0x176>
    3aa0:	da 01       	movw	r26, r20
    3aa2:	1b 96       	adiw	r26, 0x0b	; 11
    3aa4:	8c 91       	ld	r24, X
    3aa6:	82 ff       	sbrs	r24, 2
    3aa8:	46 ce       	rjmp	.-884    	; 0x3736 <f_open+0x220>
    3aaa:	0d c0       	rjmp	.+26     	; 0x3ac6 <f_open+0x5b0>
    3aac:	ed 89       	ldd	r30, Y+21	; 0x15
    3aae:	fe 89       	ldd	r31, Y+22	; 0x16
    3ab0:	93 85       	ldd	r25, Z+11	; 0x0b
    3ab2:	84 30       	cpi	r24, 0x04	; 4
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <f_open+0x5a2>
    3ab6:	3b ce       	rjmp	.-906    	; 0x372e <f_open+0x218>
    3ab8:	eb 88       	ldd	r14, Y+19	; 0x13
    3aba:	fc 88       	ldd	r15, Y+20	; 0x14
    3abc:	9d a1       	ldd	r25, Y+37	; 0x25
    3abe:	9c 71       	andi	r25, 0x1C	; 28
    3ac0:	09 f0       	breq	.+2      	; 0x3ac4 <f_open+0x5ae>
    3ac2:	47 ce       	rjmp	.-882    	; 0x3752 <f_open+0x23c>
    3ac4:	68 cf       	rjmp	.-304    	; 0x3996 <f_open+0x480>
    3ac6:	7b 01       	movw	r14, r22
    3ac8:	67 2b       	or	r22, r23
    3aca:	29 f4       	brne	.+10     	; 0x3ad6 <f_open+0x5c0>
    3acc:	09 c0       	rjmp	.+18     	; 0x3ae0 <f_open+0x5ca>
    3ace:	0d a1       	ldd	r16, Y+37	; 0x25
    3ad0:	0c 71       	andi	r16, 0x1C	; 28
    3ad2:	81 f5       	brne	.+96     	; 0x3b34 <f_open+0x61e>
    3ad4:	21 c0       	rjmp	.+66     	; 0x3b18 <f_open+0x602>
    3ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad8:	8c 71       	andi	r24, 0x1C	; 28
    3ada:	09 f0       	breq	.+2      	; 0x3ade <f_open+0x5c8>
    3adc:	81 ce       	rjmp	.-766    	; 0x37e0 <f_open+0x2ca>
    3ade:	5d cf       	rjmp	.-326    	; 0x399a <f_open+0x484>
    3ae0:	0d a1       	ldd	r16, Y+37	; 0x25
    3ae2:	0c 71       	andi	r16, 0x1C	; 28
    3ae4:	51 f5       	brne	.+84     	; 0x3b3a <f_open+0x624>
    3ae6:	e1 2c       	mov	r14, r1
    3ae8:	f1 2c       	mov	r15, r1
    3aea:	86 e0       	ldi	r24, 0x06	; 6
    3aec:	15 c0       	rjmp	.+42     	; 0x3b18 <f_open+0x602>
    3aee:	87 e0       	ldi	r24, 0x07	; 7
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <f_open+0x5de>
    3af2:	88 e0       	ldi	r24, 0x08	; 8
    3af4:	88 23       	and	r24, r24
    3af6:	09 f4       	brne	.+2      	; 0x3afa <f_open+0x5e4>
    3af8:	59 cf       	rjmp	.-334    	; 0x39ac <f_open+0x496>
    3afa:	3e c0       	rjmp	.+124    	; 0x3b78 <f_open+0x662>
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	05 c0       	rjmp	.+10     	; 0x3b0a <f_open+0x5f4>
    3b00:	82 e0       	ldi	r24, 0x02	; 2
    3b02:	03 c0       	rjmp	.+6      	; 0x3b0a <f_open+0x5f4>
    3b04:	82 e0       	ldi	r24, 0x02	; 2
    3b06:	01 c0       	rjmp	.+2      	; 0x3b0a <f_open+0x5f4>
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	88 23       	and	r24, r24
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <f_open+0x5fa>
    3b0e:	51 cf       	rjmp	.-350    	; 0x39b2 <f_open+0x49c>
    3b10:	33 c0       	rjmp	.+102    	; 0x3b78 <f_open+0x662>
    3b12:	84 e0       	ldi	r24, 0x04	; 4
    3b14:	01 c0       	rjmp	.+2      	; 0x3b18 <f_open+0x602>
    3b16:	87 e0       	ldi	r24, 0x07	; 7
    3b18:	88 23       	and	r24, r24
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <f_open+0x608>
    3b1c:	5a cf       	rjmp	.-332    	; 0x39d2 <f_open+0x4bc>
    3b1e:	2c c0       	rjmp	.+88     	; 0x3b78 <f_open+0x662>
    3b20:	eb 88       	ldd	r14, Y+19	; 0x13
    3b22:	fc 88       	ldd	r15, Y+20	; 0x14
    3b24:	86 e0       	ldi	r24, 0x06	; 6
    3b26:	d3 cf       	rjmp	.-90     	; 0x3ace <f_open+0x5b8>
    3b28:	b9 a5       	ldd	r27, Y+41	; 0x29
    3b2a:	b8 60       	ori	r27, 0x08	; 8
    3b2c:	b9 a7       	std	Y+41, r27	; 0x29
    3b2e:	eb 88       	ldd	r14, Y+19	; 0x13
    3b30:	fc 88       	ldd	r15, Y+20	; 0x14
    3b32:	f2 cf       	rjmp	.-28     	; 0x3b18 <f_open+0x602>
    3b34:	84 30       	cpi	r24, 0x04	; 4
    3b36:	c1 f7       	brne	.-16     	; 0x3b28 <f_open+0x612>
    3b38:	0f ce       	rjmp	.-994    	; 0x3758 <f_open+0x242>
    3b3a:	86 e0       	ldi	r24, 0x06	; 6
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <f_open+0x62a>
    3b3e:	87 e0       	ldi	r24, 0x07	; 7
    3b40:	e9 a5       	ldd	r30, Y+41	; 0x29
    3b42:	e8 60       	ori	r30, 0x08	; 8
    3b44:	e9 a7       	std	Y+41, r30	; 0x29
    3b46:	eb 88       	ldd	r14, Y+19	; 0x13
    3b48:	fc 88       	ldd	r15, Y+20	; 0x14
    3b4a:	e6 cf       	rjmp	.-52     	; 0x3b18 <f_open+0x602>
    3b4c:	84 e0       	ldi	r24, 0x04	; 4
    3b4e:	05 c0       	rjmp	.+10     	; 0x3b5a <f_open+0x644>
    3b50:	85 e0       	ldi	r24, 0x05	; 5
    3b52:	03 c0       	rjmp	.+6      	; 0x3b5a <f_open+0x644>
    3b54:	86 e0       	ldi	r24, 0x06	; 6
    3b56:	01 c0       	rjmp	.+2      	; 0x3b5a <f_open+0x644>
    3b58:	86 e0       	ldi	r24, 0x06	; 6
    3b5a:	eb 88       	ldd	r14, Y+19	; 0x13
    3b5c:	fc 88       	ldd	r15, Y+20	; 0x14
    3b5e:	9d a1       	ldd	r25, Y+37	; 0x25
    3b60:	9c 71       	andi	r25, 0x1C	; 28
    3b62:	41 f7       	brne	.-48     	; 0x3b34 <f_open+0x61e>
    3b64:	18 cf       	rjmp	.-464    	; 0x3996 <f_open+0x480>
    3b66:	f9 a5       	ldd	r31, Y+41	; 0x29
    3b68:	f8 60       	ori	r31, 0x08	; 8
    3b6a:	f9 a7       	std	Y+41, r31	; 0x29
    3b6c:	eb 88       	ldd	r14, Y+19	; 0x13
    3b6e:	fc 88       	ldd	r15, Y+20	; 0x14
    3b70:	d3 cf       	rjmp	.-90     	; 0x3b18 <f_open+0x602>
    3b72:	84 30       	cpi	r24, 0x04	; 4
    3b74:	21 f3       	breq	.-56     	; 0x3b3e <f_open+0x628>
    3b76:	f7 cf       	rjmp	.-18     	; 0x3b66 <f_open+0x650>
    3b78:	ae 96       	adiw	r28, 0x2e	; 46
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	de bf       	out	0x3e, r29	; 62
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	1f 91       	pop	r17
    3b8a:	0f 91       	pop	r16
    3b8c:	ff 90       	pop	r15
    3b8e:	ef 90       	pop	r14
    3b90:	df 90       	pop	r13
    3b92:	cf 90       	pop	r12
    3b94:	bf 90       	pop	r11
    3b96:	af 90       	pop	r10
    3b98:	9f 90       	pop	r9
    3b9a:	8f 90       	pop	r8
    3b9c:	7f 90       	pop	r7
    3b9e:	6f 90       	pop	r6
    3ba0:	5f 90       	pop	r5
    3ba2:	4f 90       	pop	r4
    3ba4:	3f 90       	pop	r3
    3ba6:	2f 90       	pop	r2
    3ba8:	08 95       	ret

00003baa <f_write>:
    3baa:	3f 92       	push	r3
    3bac:	4f 92       	push	r4
    3bae:	5f 92       	push	r5
    3bb0:	6f 92       	push	r6
    3bb2:	7f 92       	push	r7
    3bb4:	8f 92       	push	r8
    3bb6:	9f 92       	push	r9
    3bb8:	af 92       	push	r10
    3bba:	bf 92       	push	r11
    3bbc:	cf 92       	push	r12
    3bbe:	df 92       	push	r13
    3bc0:	ef 92       	push	r14
    3bc2:	ff 92       	push	r15
    3bc4:	0f 93       	push	r16
    3bc6:	1f 93       	push	r17
    3bc8:	cf 93       	push	r28
    3bca:	df 93       	push	r29
    3bcc:	00 d0       	rcall	.+0      	; 0x3bce <f_write+0x24>
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <f_write+0x26>
    3bd0:	00 d0       	rcall	.+0      	; 0x3bd2 <f_write+0x28>
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    3bd6:	9e 83       	std	Y+6, r25	; 0x06
    3bd8:	8d 83       	std	Y+5, r24	; 0x05
    3bda:	4b 01       	movw	r8, r22
    3bdc:	6a 01       	movw	r12, r20
    3bde:	59 01       	movw	r10, r18
    3be0:	d9 01       	movw	r26, r18
    3be2:	1d 92       	st	X+, r1
    3be4:	1c 92       	st	X, r1
    3be6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <validate>
    3bea:	81 11       	cpse	r24, r1
    3bec:	c0 c1       	rjmp	.+896    	; 0x3f6e <f_write+0x3c4>
    3bee:	ed 81       	ldd	r30, Y+5	; 0x05
    3bf0:	fe 81       	ldd	r31, Y+6	; 0x06
    3bf2:	85 81       	ldd	r24, Z+5	; 0x05
    3bf4:	81 11       	cpse	r24, r1
    3bf6:	bb c1       	rjmp	.+886    	; 0x3f6e <f_write+0x3c4>
    3bf8:	84 81       	ldd	r24, Z+4	; 0x04
    3bfa:	81 ff       	sbrs	r24, 1
    3bfc:	b7 c1       	rjmp	.+878    	; 0x3f6c <f_write+0x3c2>
    3bfe:	86 81       	ldd	r24, Z+6	; 0x06
    3c00:	97 81       	ldd	r25, Z+7	; 0x07
    3c02:	a0 85       	ldd	r26, Z+8	; 0x08
    3c04:	b1 85       	ldd	r27, Z+9	; 0x09
    3c06:	ac 01       	movw	r20, r24
    3c08:	bd 01       	movw	r22, r26
    3c0a:	4c 0d       	add	r20, r12
    3c0c:	5d 1d       	adc	r21, r13
    3c0e:	61 1d       	adc	r22, r1
    3c10:	71 1d       	adc	r23, r1
    3c12:	48 17       	cp	r20, r24
    3c14:	59 07       	cpc	r21, r25
    3c16:	6a 07       	cpc	r22, r26
    3c18:	7b 07       	cpc	r23, r27
    3c1a:	08 f4       	brcc	.+2      	; 0x3c1e <f_write+0x74>
    3c1c:	8a c1       	rjmp	.+788    	; 0x3f32 <f_write+0x388>
    3c1e:	c1 14       	cp	r12, r1
    3c20:	d1 04       	cpc	r13, r1
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <f_write+0x7c>
    3c24:	86 c1       	rjmp	.+780    	; 0x3f32 <f_write+0x388>
    3c26:	b0 96       	adiw	r30, 0x20	; 32
    3c28:	fc 83       	std	Y+4, r31	; 0x04
    3c2a:	eb 83       	std	Y+3, r30	; 0x03
    3c2c:	ed 81       	ldd	r30, Y+5	; 0x05
    3c2e:	fe 81       	ldd	r31, Y+6	; 0x06
    3c30:	86 81       	ldd	r24, Z+6	; 0x06
    3c32:	97 81       	ldd	r25, Z+7	; 0x07
    3c34:	a0 85       	ldd	r26, Z+8	; 0x08
    3c36:	b1 85       	ldd	r27, Z+9	; 0x09
    3c38:	ac 01       	movw	r20, r24
    3c3a:	bd 01       	movw	r22, r26
    3c3c:	51 70       	andi	r21, 0x01	; 1
    3c3e:	66 27       	eor	r22, r22
    3c40:	77 27       	eor	r23, r23
    3c42:	45 2b       	or	r20, r21
    3c44:	46 2b       	or	r20, r22
    3c46:	47 2b       	or	r20, r23
    3c48:	09 f0       	breq	.+2      	; 0x3c4c <f_write+0xa2>
    3c4a:	32 c1       	rjmp	.+612    	; 0x3eb0 <f_write+0x306>
    3c4c:	e0 80       	ld	r14, Z
    3c4e:	f1 80       	ldd	r15, Z+1	; 0x01
    3c50:	f7 01       	movw	r30, r14
    3c52:	22 81       	ldd	r18, Z+2	; 0x02
    3c54:	21 50       	subi	r18, 0x01	; 1
    3c56:	ac 01       	movw	r20, r24
    3c58:	bd 01       	movw	r22, r26
    3c5a:	03 2e       	mov	r0, r19
    3c5c:	39 e0       	ldi	r19, 0x09	; 9
    3c5e:	76 95       	lsr	r23
    3c60:	67 95       	ror	r22
    3c62:	57 95       	ror	r21
    3c64:	47 95       	ror	r20
    3c66:	3a 95       	dec	r19
    3c68:	d1 f7       	brne	.-12     	; 0x3c5e <f_write+0xb4>
    3c6a:	30 2d       	mov	r19, r0
    3c6c:	32 2e       	mov	r3, r18
    3c6e:	34 22       	and	r3, r20
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <f_write+0xca>
    3c72:	52 c0       	rjmp	.+164    	; 0x3d18 <f_write+0x16e>
    3c74:	89 2b       	or	r24, r25
    3c76:	8a 2b       	or	r24, r26
    3c78:	8b 2b       	or	r24, r27
    3c7a:	99 f4       	brne	.+38     	; 0x3ca2 <f_write+0xf8>
    3c7c:	ad 81       	ldd	r26, Y+5	; 0x05
    3c7e:	be 81       	ldd	r27, Y+6	; 0x06
    3c80:	1e 96       	adiw	r26, 0x0e	; 14
    3c82:	6d 91       	ld	r22, X+
    3c84:	7d 91       	ld	r23, X+
    3c86:	8d 91       	ld	r24, X+
    3c88:	9c 91       	ld	r25, X
    3c8a:	51 97       	sbiw	r26, 0x11	; 17
    3c8c:	61 15       	cp	r22, r1
    3c8e:	71 05       	cpc	r23, r1
    3c90:	81 05       	cpc	r24, r1
    3c92:	91 05       	cpc	r25, r1
    3c94:	a1 f4       	brne	.+40     	; 0x3cbe <f_write+0x114>
    3c96:	40 e0       	ldi	r20, 0x00	; 0
    3c98:	50 e0       	ldi	r21, 0x00	; 0
    3c9a:	ba 01       	movw	r22, r20
    3c9c:	c7 01       	movw	r24, r14
    3c9e:	9e d9       	rcall	.-3268   	; 0x2fdc <create_chain>
    3ca0:	08 c0       	rjmp	.+16     	; 0x3cb2 <f_write+0x108>
    3ca2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ca4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ca6:	42 89       	ldd	r20, Z+18	; 0x12
    3ca8:	53 89       	ldd	r21, Z+19	; 0x13
    3caa:	64 89       	ldd	r22, Z+20	; 0x14
    3cac:	75 89       	ldd	r23, Z+21	; 0x15
    3cae:	c7 01       	movw	r24, r14
    3cb0:	95 d9       	rcall	.-3286   	; 0x2fdc <create_chain>
    3cb2:	61 15       	cp	r22, r1
    3cb4:	71 05       	cpc	r23, r1
    3cb6:	81 05       	cpc	r24, r1
    3cb8:	91 05       	cpc	r25, r1
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <f_write+0x114>
    3cbc:	3a c1       	rjmp	.+628    	; 0x3f32 <f_write+0x388>
    3cbe:	61 30       	cpi	r22, 0x01	; 1
    3cc0:	71 05       	cpc	r23, r1
    3cc2:	81 05       	cpc	r24, r1
    3cc4:	91 05       	cpc	r25, r1
    3cc6:	31 f4       	brne	.+12     	; 0x3cd4 <f_write+0x12a>
    3cc8:	82 e0       	ldi	r24, 0x02	; 2
    3cca:	ad 81       	ldd	r26, Y+5	; 0x05
    3ccc:	be 81       	ldd	r27, Y+6	; 0x06
    3cce:	15 96       	adiw	r26, 0x05	; 5
    3cd0:	8c 93       	st	X, r24
    3cd2:	4d c1       	rjmp	.+666    	; 0x3f6e <f_write+0x3c4>
    3cd4:	6f 3f       	cpi	r22, 0xFF	; 255
    3cd6:	bf ef       	ldi	r27, 0xFF	; 255
    3cd8:	7b 07       	cpc	r23, r27
    3cda:	8b 07       	cpc	r24, r27
    3cdc:	9b 07       	cpc	r25, r27
    3cde:	29 f4       	brne	.+10     	; 0x3cea <f_write+0x140>
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ce4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ce6:	85 83       	std	Z+5, r24	; 0x05
    3ce8:	42 c1       	rjmp	.+644    	; 0x3f6e <f_write+0x3c4>
    3cea:	ad 81       	ldd	r26, Y+5	; 0x05
    3cec:	be 81       	ldd	r27, Y+6	; 0x06
    3cee:	52 96       	adiw	r26, 0x12	; 18
    3cf0:	6d 93       	st	X+, r22
    3cf2:	7d 93       	st	X+, r23
    3cf4:	8d 93       	st	X+, r24
    3cf6:	9c 93       	st	X, r25
    3cf8:	55 97       	sbiw	r26, 0x15	; 21
    3cfa:	1e 96       	adiw	r26, 0x0e	; 14
    3cfc:	4d 90       	ld	r4, X+
    3cfe:	5d 90       	ld	r5, X+
    3d00:	6d 90       	ld	r6, X+
    3d02:	7c 90       	ld	r7, X
    3d04:	51 97       	sbiw	r26, 0x11	; 17
    3d06:	45 28       	or	r4, r5
    3d08:	46 28       	or	r4, r6
    3d0a:	47 28       	or	r4, r7
    3d0c:	29 f4       	brne	.+10     	; 0x3d18 <f_write+0x16e>
    3d0e:	fd 01       	movw	r30, r26
    3d10:	66 87       	std	Z+14, r22	; 0x0e
    3d12:	77 87       	std	Z+15, r23	; 0x0f
    3d14:	80 8b       	std	Z+16, r24	; 0x10
    3d16:	91 8b       	std	Z+17, r25	; 0x11
    3d18:	ad 81       	ldd	r26, Y+5	; 0x05
    3d1a:	be 81       	ldd	r27, Y+6	; 0x06
    3d1c:	14 96       	adiw	r26, 0x04	; 4
    3d1e:	8c 91       	ld	r24, X
    3d20:	14 97       	sbiw	r26, 0x04	; 4
    3d22:	86 ff       	sbrs	r24, 6
    3d24:	1e c0       	rjmp	.+60     	; 0x3d62 <f_write+0x1b8>
    3d26:	56 96       	adiw	r26, 0x16	; 22
    3d28:	2d 91       	ld	r18, X+
    3d2a:	3d 91       	ld	r19, X+
    3d2c:	4d 91       	ld	r20, X+
    3d2e:	5c 91       	ld	r21, X
    3d30:	59 97       	sbiw	r26, 0x19	; 25
    3d32:	ed 91       	ld	r30, X+
    3d34:	fc 91       	ld	r31, X
    3d36:	01 e0       	ldi	r16, 0x01	; 1
    3d38:	10 e0       	ldi	r17, 0x00	; 0
    3d3a:	6b 81       	ldd	r22, Y+3	; 0x03
    3d3c:	7c 81       	ldd	r23, Y+4	; 0x04
    3d3e:	81 81       	ldd	r24, Z+1	; 0x01
    3d40:	0e 94 03 09 	call	0x1206	; 0x1206 <disk_write>
    3d44:	88 23       	and	r24, r24
    3d46:	29 f0       	breq	.+10     	; 0x3d52 <f_write+0x1a8>
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	ed 81       	ldd	r30, Y+5	; 0x05
    3d4c:	fe 81       	ldd	r31, Y+6	; 0x06
    3d4e:	85 83       	std	Z+5, r24	; 0x05
    3d50:	0e c1       	rjmp	.+540    	; 0x3f6e <f_write+0x3c4>
    3d52:	ad 81       	ldd	r26, Y+5	; 0x05
    3d54:	be 81       	ldd	r27, Y+6	; 0x06
    3d56:	14 96       	adiw	r26, 0x04	; 4
    3d58:	8c 91       	ld	r24, X
    3d5a:	14 97       	sbiw	r26, 0x04	; 4
    3d5c:	8f 7b       	andi	r24, 0xBF	; 191
    3d5e:	14 96       	adiw	r26, 0x04	; 4
    3d60:	8c 93       	st	X, r24
    3d62:	ed 81       	ldd	r30, Y+5	; 0x05
    3d64:	fe 81       	ldd	r31, Y+6	; 0x06
    3d66:	01 90       	ld	r0, Z+
    3d68:	f0 81       	ld	r31, Z
    3d6a:	e0 2d       	mov	r30, r0
    3d6c:	fa 83       	std	Y+2, r31	; 0x02
    3d6e:	e9 83       	std	Y+1, r30	; 0x01
    3d70:	ad 81       	ldd	r26, Y+5	; 0x05
    3d72:	be 81       	ldd	r27, Y+6	; 0x06
    3d74:	52 96       	adiw	r26, 0x12	; 18
    3d76:	4d 91       	ld	r20, X+
    3d78:	5d 91       	ld	r21, X+
    3d7a:	6d 91       	ld	r22, X+
    3d7c:	7c 91       	ld	r23, X
    3d7e:	55 97       	sbiw	r26, 0x15	; 21
    3d80:	cf 01       	movw	r24, r30
    3d82:	0e 94 df 14 	call	0x29be	; 0x29be <clust2sect>
    3d86:	61 15       	cp	r22, r1
    3d88:	71 05       	cpc	r23, r1
    3d8a:	81 05       	cpc	r24, r1
    3d8c:	91 05       	cpc	r25, r1
    3d8e:	29 f4       	brne	.+10     	; 0x3d9a <f_write+0x1f0>
    3d90:	82 e0       	ldi	r24, 0x02	; 2
    3d92:	ed 81       	ldd	r30, Y+5	; 0x05
    3d94:	fe 81       	ldd	r31, Y+6	; 0x06
    3d96:	85 83       	std	Z+5, r24	; 0x05
    3d98:	ea c0       	rjmp	.+468    	; 0x3f6e <f_write+0x3c4>
    3d9a:	2b 01       	movw	r4, r22
    3d9c:	3c 01       	movw	r6, r24
    3d9e:	43 0c       	add	r4, r3
    3da0:	51 1c       	adc	r5, r1
    3da2:	61 1c       	adc	r6, r1
    3da4:	71 1c       	adc	r7, r1
    3da6:	76 01       	movw	r14, r12
    3da8:	ef 2c       	mov	r14, r15
    3daa:	ff 24       	eor	r15, r15
    3dac:	e6 94       	lsr	r14
    3dae:	e1 14       	cp	r14, r1
    3db0:	f1 04       	cpc	r15, r1
    3db2:	09 f4       	brne	.+2      	; 0x3db6 <f_write+0x20c>
    3db4:	4a c0       	rjmp	.+148    	; 0x3e4a <f_write+0x2a0>
    3db6:	a9 81       	ldd	r26, Y+1	; 0x01
    3db8:	ba 81       	ldd	r27, Y+2	; 0x02
    3dba:	12 96       	adiw	r26, 0x02	; 2
    3dbc:	4c 91       	ld	r20, X
    3dbe:	24 2f       	mov	r18, r20
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	c7 01       	movw	r24, r14
    3dc4:	83 0d       	add	r24, r3
    3dc6:	91 1d       	adc	r25, r1
    3dc8:	28 17       	cp	r18, r24
    3dca:	39 07       	cpc	r19, r25
    3dcc:	18 f4       	brcc	.+6      	; 0x3dd4 <f_write+0x22a>
    3dce:	79 01       	movw	r14, r18
    3dd0:	e3 18       	sub	r14, r3
    3dd2:	f1 08       	sbc	r15, r1
    3dd4:	87 01       	movw	r16, r14
    3dd6:	a3 01       	movw	r20, r6
    3dd8:	92 01       	movw	r18, r4
    3dda:	b4 01       	movw	r22, r8
    3ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dde:	fa 81       	ldd	r31, Y+2	; 0x02
    3de0:	81 81       	ldd	r24, Z+1	; 0x01
    3de2:	0e 94 03 09 	call	0x1206	; 0x1206 <disk_write>
    3de6:	88 23       	and	r24, r24
    3de8:	31 f0       	breq	.+12     	; 0x3df6 <f_write+0x24c>
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	ad 81       	ldd	r26, Y+5	; 0x05
    3dee:	be 81       	ldd	r27, Y+6	; 0x06
    3df0:	15 96       	adiw	r26, 0x05	; 5
    3df2:	8c 93       	st	X, r24
    3df4:	bc c0       	rjmp	.+376    	; 0x3f6e <f_write+0x3c4>
    3df6:	ed 81       	ldd	r30, Y+5	; 0x05
    3df8:	fe 81       	ldd	r31, Y+6	; 0x06
    3dfa:	86 89       	ldd	r24, Z+22	; 0x16
    3dfc:	97 89       	ldd	r25, Z+23	; 0x17
    3dfe:	a0 8d       	ldd	r26, Z+24	; 0x18
    3e00:	b1 8d       	ldd	r27, Z+25	; 0x19
    3e02:	84 19       	sub	r24, r4
    3e04:	95 09       	sbc	r25, r5
    3e06:	a6 09       	sbc	r26, r6
    3e08:	b7 09       	sbc	r27, r7
    3e0a:	a7 01       	movw	r20, r14
    3e0c:	60 e0       	ldi	r22, 0x00	; 0
    3e0e:	70 e0       	ldi	r23, 0x00	; 0
    3e10:	84 17       	cp	r24, r20
    3e12:	95 07       	cpc	r25, r21
    3e14:	a6 07       	cpc	r26, r22
    3e16:	b7 07       	cpc	r27, r23
    3e18:	a0 f4       	brcc	.+40     	; 0x3e42 <f_write+0x298>
    3e1a:	98 2f       	mov	r25, r24
    3e1c:	88 27       	eor	r24, r24
    3e1e:	99 0f       	add	r25, r25
    3e20:	b4 01       	movw	r22, r8
    3e22:	68 0f       	add	r22, r24
    3e24:	79 1f       	adc	r23, r25
    3e26:	40 e0       	ldi	r20, 0x00	; 0
    3e28:	52 e0       	ldi	r21, 0x02	; 2
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <mem_cpy>
    3e32:	ad 81       	ldd	r26, Y+5	; 0x05
    3e34:	be 81       	ldd	r27, Y+6	; 0x06
    3e36:	14 96       	adiw	r26, 0x04	; 4
    3e38:	8c 91       	ld	r24, X
    3e3a:	14 97       	sbiw	r26, 0x04	; 4
    3e3c:	8f 7b       	andi	r24, 0xBF	; 191
    3e3e:	14 96       	adiw	r26, 0x04	; 4
    3e40:	8c 93       	st	X, r24
    3e42:	fe 2c       	mov	r15, r14
    3e44:	ee 24       	eor	r14, r14
    3e46:	ff 0c       	add	r15, r15
    3e48:	58 c0       	rjmp	.+176    	; 0x3efa <f_write+0x350>
    3e4a:	ed 81       	ldd	r30, Y+5	; 0x05
    3e4c:	fe 81       	ldd	r31, Y+6	; 0x06
    3e4e:	86 89       	ldd	r24, Z+22	; 0x16
    3e50:	97 89       	ldd	r25, Z+23	; 0x17
    3e52:	a0 8d       	ldd	r26, Z+24	; 0x18
    3e54:	b1 8d       	ldd	r27, Z+25	; 0x19
    3e56:	84 15       	cp	r24, r4
    3e58:	95 05       	cpc	r25, r5
    3e5a:	a6 05       	cpc	r26, r6
    3e5c:	b7 05       	cpc	r27, r7
    3e5e:	01 f1       	breq	.+64     	; 0x3ea0 <f_write+0x2f6>
    3e60:	46 81       	ldd	r20, Z+6	; 0x06
    3e62:	57 81       	ldd	r21, Z+7	; 0x07
    3e64:	60 85       	ldd	r22, Z+8	; 0x08
    3e66:	71 85       	ldd	r23, Z+9	; 0x09
    3e68:	82 85       	ldd	r24, Z+10	; 0x0a
    3e6a:	93 85       	ldd	r25, Z+11	; 0x0b
    3e6c:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e6e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e70:	48 17       	cp	r20, r24
    3e72:	59 07       	cpc	r21, r25
    3e74:	6a 07       	cpc	r22, r26
    3e76:	7b 07       	cpc	r23, r27
    3e78:	98 f4       	brcc	.+38     	; 0x3ea0 <f_write+0x2f6>
    3e7a:	01 e0       	ldi	r16, 0x01	; 1
    3e7c:	10 e0       	ldi	r17, 0x00	; 0
    3e7e:	a3 01       	movw	r20, r6
    3e80:	92 01       	movw	r18, r4
    3e82:	6b 81       	ldd	r22, Y+3	; 0x03
    3e84:	7c 81       	ldd	r23, Y+4	; 0x04
    3e86:	a9 81       	ldd	r26, Y+1	; 0x01
    3e88:	ba 81       	ldd	r27, Y+2	; 0x02
    3e8a:	11 96       	adiw	r26, 0x01	; 1
    3e8c:	8c 91       	ld	r24, X
    3e8e:	0e 94 b1 08 	call	0x1162	; 0x1162 <disk_read>
    3e92:	88 23       	and	r24, r24
    3e94:	29 f0       	breq	.+10     	; 0x3ea0 <f_write+0x2f6>
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	ed 81       	ldd	r30, Y+5	; 0x05
    3e9a:	fe 81       	ldd	r31, Y+6	; 0x06
    3e9c:	85 83       	std	Z+5, r24	; 0x05
    3e9e:	67 c0       	rjmp	.+206    	; 0x3f6e <f_write+0x3c4>
    3ea0:	ad 81       	ldd	r26, Y+5	; 0x05
    3ea2:	be 81       	ldd	r27, Y+6	; 0x06
    3ea4:	56 96       	adiw	r26, 0x16	; 22
    3ea6:	4d 92       	st	X+, r4
    3ea8:	5d 92       	st	X+, r5
    3eaa:	6d 92       	st	X+, r6
    3eac:	7c 92       	st	X, r7
    3eae:	59 97       	sbiw	r26, 0x19	; 25
    3eb0:	ed 81       	ldd	r30, Y+5	; 0x05
    3eb2:	fe 81       	ldd	r31, Y+6	; 0x06
    3eb4:	86 81       	ldd	r24, Z+6	; 0x06
    3eb6:	97 81       	ldd	r25, Z+7	; 0x07
    3eb8:	a0 85       	ldd	r26, Z+8	; 0x08
    3eba:	b1 85       	ldd	r27, Z+9	; 0x09
    3ebc:	ac 01       	movw	r20, r24
    3ebe:	51 70       	andi	r21, 0x01	; 1
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	32 e0       	ldi	r19, 0x02	; 2
    3ec4:	24 1b       	sub	r18, r20
    3ec6:	35 0b       	sbc	r19, r21
    3ec8:	76 01       	movw	r14, r12
    3eca:	2c 15       	cp	r18, r12
    3ecc:	3d 05       	cpc	r19, r13
    3ece:	08 f4       	brcc	.+2      	; 0x3ed2 <f_write+0x328>
    3ed0:	79 01       	movw	r14, r18
    3ed2:	91 70       	andi	r25, 0x01	; 1
    3ed4:	aa 27       	eor	r26, r26
    3ed6:	bb 27       	eor	r27, r27
    3ed8:	80 96       	adiw	r24, 0x20	; 32
    3eda:	a7 01       	movw	r20, r14
    3edc:	b4 01       	movw	r22, r8
    3ede:	2d 81       	ldd	r18, Y+5	; 0x05
    3ee0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ee2:	82 0f       	add	r24, r18
    3ee4:	93 1f       	adc	r25, r19
    3ee6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <mem_cpy>
    3eea:	ad 81       	ldd	r26, Y+5	; 0x05
    3eec:	be 81       	ldd	r27, Y+6	; 0x06
    3eee:	14 96       	adiw	r26, 0x04	; 4
    3ef0:	8c 91       	ld	r24, X
    3ef2:	14 97       	sbiw	r26, 0x04	; 4
    3ef4:	80 64       	ori	r24, 0x40	; 64
    3ef6:	14 96       	adiw	r26, 0x04	; 4
    3ef8:	8c 93       	st	X, r24
    3efa:	8e 0c       	add	r8, r14
    3efc:	9f 1c       	adc	r9, r15
    3efe:	ed 81       	ldd	r30, Y+5	; 0x05
    3f00:	fe 81       	ldd	r31, Y+6	; 0x06
    3f02:	86 81       	ldd	r24, Z+6	; 0x06
    3f04:	97 81       	ldd	r25, Z+7	; 0x07
    3f06:	a0 85       	ldd	r26, Z+8	; 0x08
    3f08:	b1 85       	ldd	r27, Z+9	; 0x09
    3f0a:	8e 0d       	add	r24, r14
    3f0c:	9f 1d       	adc	r25, r15
    3f0e:	a1 1d       	adc	r26, r1
    3f10:	b1 1d       	adc	r27, r1
    3f12:	86 83       	std	Z+6, r24	; 0x06
    3f14:	97 83       	std	Z+7, r25	; 0x07
    3f16:	a0 87       	std	Z+8, r26	; 0x08
    3f18:	b1 87       	std	Z+9, r27	; 0x09
    3f1a:	d5 01       	movw	r26, r10
    3f1c:	8d 91       	ld	r24, X+
    3f1e:	9c 91       	ld	r25, X
    3f20:	11 97       	sbiw	r26, 0x01	; 1
    3f22:	8e 0d       	add	r24, r14
    3f24:	9f 1d       	adc	r25, r15
    3f26:	8d 93       	st	X+, r24
    3f28:	9c 93       	st	X, r25
    3f2a:	ce 18       	sub	r12, r14
    3f2c:	df 08       	sbc	r13, r15
    3f2e:	09 f0       	breq	.+2      	; 0x3f32 <f_write+0x388>
    3f30:	7d ce       	rjmp	.-774    	; 0x3c2c <f_write+0x82>
    3f32:	ed 81       	ldd	r30, Y+5	; 0x05
    3f34:	fe 81       	ldd	r31, Y+6	; 0x06
    3f36:	86 81       	ldd	r24, Z+6	; 0x06
    3f38:	97 81       	ldd	r25, Z+7	; 0x07
    3f3a:	a0 85       	ldd	r26, Z+8	; 0x08
    3f3c:	b1 85       	ldd	r27, Z+9	; 0x09
    3f3e:	42 85       	ldd	r20, Z+10	; 0x0a
    3f40:	53 85       	ldd	r21, Z+11	; 0x0b
    3f42:	64 85       	ldd	r22, Z+12	; 0x0c
    3f44:	75 85       	ldd	r23, Z+13	; 0x0d
    3f46:	48 17       	cp	r20, r24
    3f48:	59 07       	cpc	r21, r25
    3f4a:	6a 07       	cpc	r22, r26
    3f4c:	7b 07       	cpc	r23, r27
    3f4e:	20 f4       	brcc	.+8      	; 0x3f58 <f_write+0x3ae>
    3f50:	82 87       	std	Z+10, r24	; 0x0a
    3f52:	93 87       	std	Z+11, r25	; 0x0b
    3f54:	a4 87       	std	Z+12, r26	; 0x0c
    3f56:	b5 87       	std	Z+13, r27	; 0x0d
    3f58:	ad 81       	ldd	r26, Y+5	; 0x05
    3f5a:	be 81       	ldd	r27, Y+6	; 0x06
    3f5c:	14 96       	adiw	r26, 0x04	; 4
    3f5e:	8c 91       	ld	r24, X
    3f60:	14 97       	sbiw	r26, 0x04	; 4
    3f62:	80 62       	ori	r24, 0x20	; 32
    3f64:	14 96       	adiw	r26, 0x04	; 4
    3f66:	8c 93       	st	X, r24
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	01 c0       	rjmp	.+2      	; 0x3f6e <f_write+0x3c4>
    3f6c:	87 e0       	ldi	r24, 0x07	; 7
    3f6e:	26 96       	adiw	r28, 0x06	; 6
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	ff 90       	pop	r15
    3f84:	ef 90       	pop	r14
    3f86:	df 90       	pop	r13
    3f88:	cf 90       	pop	r12
    3f8a:	bf 90       	pop	r11
    3f8c:	af 90       	pop	r10
    3f8e:	9f 90       	pop	r9
    3f90:	8f 90       	pop	r8
    3f92:	7f 90       	pop	r7
    3f94:	6f 90       	pop	r6
    3f96:	5f 90       	pop	r5
    3f98:	4f 90       	pop	r4
    3f9a:	3f 90       	pop	r3
    3f9c:	08 95       	ret

00003f9e <putc_bfd>:
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	cf 93       	push	r28
    3fa8:	df 93       	push	r29
    3faa:	00 d0       	rcall	.+0      	; 0x3fac <putc_bfd+0xe>
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	22 81       	ldd	r18, Z+2	; 0x02
    3fb4:	33 81       	ldd	r19, Z+3	; 0x03
    3fb6:	33 23       	and	r19, r19
    3fb8:	6c f1       	brlt	.+90     	; 0x4014 <putc_bfd+0x76>
    3fba:	8c 01       	movw	r16, r24
    3fbc:	79 01       	movw	r14, r18
    3fbe:	ff ef       	ldi	r31, 0xFF	; 255
    3fc0:	ef 1a       	sub	r14, r31
    3fc2:	ff 0a       	sbc	r15, r31
    3fc4:	fc 01       	movw	r30, r24
    3fc6:	e2 0f       	add	r30, r18
    3fc8:	f3 1f       	adc	r31, r19
    3fca:	66 83       	std	Z+6, r22	; 0x06
    3fcc:	8d e3       	ldi	r24, 0x3D	; 61
    3fce:	e8 16       	cp	r14, r24
    3fd0:	f1 04       	cpc	r15, r1
    3fd2:	c4 f0       	brlt	.+48     	; 0x4004 <putc_bfd+0x66>
    3fd4:	9e 01       	movw	r18, r28
    3fd6:	2f 5f       	subi	r18, 0xFF	; 255
    3fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fda:	a7 01       	movw	r20, r14
    3fdc:	b8 01       	movw	r22, r16
    3fde:	6a 5f       	subi	r22, 0xFA	; 250
    3fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe2:	f8 01       	movw	r30, r16
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	e0 dd       	rcall	.-1088   	; 0x3baa <f_write>
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	29 81       	ldd	r18, Y+1	; 0x01
    3ff0:	3a 81       	ldd	r19, Y+2	; 0x02
    3ff2:	e2 16       	cp	r14, r18
    3ff4:	f3 06       	cpc	r15, r19
    3ff6:	11 f4       	brne	.+4      	; 0x3ffc <putc_bfd+0x5e>
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	ee 24       	eor	r14, r14
    3ffe:	ff 24       	eor	r15, r15
    4000:	e8 1a       	sub	r14, r24
    4002:	f9 0a       	sbc	r15, r25
    4004:	f8 01       	movw	r30, r16
    4006:	f3 82       	std	Z+3, r15	; 0x03
    4008:	e2 82       	std	Z+2, r14	; 0x02
    400a:	84 81       	ldd	r24, Z+4	; 0x04
    400c:	95 81       	ldd	r25, Z+5	; 0x05
    400e:	01 96       	adiw	r24, 0x01	; 1
    4010:	95 83       	std	Z+5, r25	; 0x05
    4012:	84 83       	std	Z+4, r24	; 0x04
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	1f 91       	pop	r17
    401e:	0f 91       	pop	r16
    4020:	ff 90       	pop	r15
    4022:	ef 90       	pop	r14
    4024:	08 95       	ret

00004026 <f_sync>:
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	ec 01       	movw	r28, r24
    4030:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <validate>
    4034:	81 11       	cpse	r24, r1
    4036:	b5 c0       	rjmp	.+362    	; 0x41a2 <__stack+0xa3>
    4038:	8c 81       	ldd	r24, Y+4	; 0x04
    403a:	85 ff       	sbrs	r24, 5
    403c:	b4 c0       	rjmp	.+360    	; 0x41a6 <__stack+0xa7>
    403e:	86 ff       	sbrs	r24, 6
    4040:	13 c0       	rjmp	.+38     	; 0x4068 <f_sync+0x42>
    4042:	2e 89       	ldd	r18, Y+22	; 0x16
    4044:	3f 89       	ldd	r19, Y+23	; 0x17
    4046:	48 8d       	ldd	r20, Y+24	; 0x18
    4048:	59 8d       	ldd	r21, Y+25	; 0x19
    404a:	e8 81       	ld	r30, Y
    404c:	f9 81       	ldd	r31, Y+1	; 0x01
    404e:	01 e0       	ldi	r16, 0x01	; 1
    4050:	10 e0       	ldi	r17, 0x00	; 0
    4052:	be 01       	movw	r22, r28
    4054:	60 5e       	subi	r22, 0xE0	; 224
    4056:	7f 4f       	sbci	r23, 0xFF	; 255
    4058:	81 81       	ldd	r24, Z+1	; 0x01
    405a:	0e 94 03 09 	call	0x1206	; 0x1206 <disk_write>
    405e:	81 11       	cpse	r24, r1
    4060:	a4 c0       	rjmp	.+328    	; 0x41aa <__stack+0xab>
    4062:	8c 81       	ldd	r24, Y+4	; 0x04
    4064:	8f 7b       	andi	r24, 0xBF	; 191
    4066:	8c 83       	std	Y+4, r24	; 0x04
    4068:	4a 8d       	ldd	r20, Y+26	; 0x1a
    406a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    406c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    406e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4070:	88 81       	ld	r24, Y
    4072:	99 81       	ldd	r25, Y+1	; 0x01
    4074:	0e 94 54 10 	call	0x20a8	; 0x20a8 <move_window>
    4078:	81 11       	cpse	r24, r1
    407a:	99 c0       	rjmp	.+306    	; 0x41ae <__stack+0xaf>
    407c:	0e 8d       	ldd	r16, Y+30	; 0x1e
    407e:	1f 8d       	ldd	r17, Y+31	; 0x1f
    4080:	f8 01       	movw	r30, r16
    4082:	83 85       	ldd	r24, Z+11	; 0x0b
    4084:	80 62       	ori	r24, 0x20	; 32
    4086:	83 87       	std	Z+11, r24	; 0x0b
    4088:	8a 85       	ldd	r24, Y+10	; 0x0a
    408a:	84 8f       	std	Z+28, r24	; 0x1c
    408c:	8b 85       	ldd	r24, Y+11	; 0x0b
    408e:	85 8f       	std	Z+29, r24	; 0x1d
    4090:	8c 85       	ldd	r24, Y+12	; 0x0c
    4092:	86 8f       	std	Z+30, r24	; 0x1e
    4094:	8d 85       	ldd	r24, Y+13	; 0x0d
    4096:	87 8f       	std	Z+31, r24	; 0x1f
    4098:	8e 85       	ldd	r24, Y+14	; 0x0e
    409a:	9f 85       	ldd	r25, Y+15	; 0x0f
    409c:	a8 89       	ldd	r26, Y+16	; 0x10
    409e:	b9 89       	ldd	r27, Y+17	; 0x11
    40a0:	82 8f       	std	Z+26, r24	; 0x1a
    40a2:	93 8f       	std	Z+27, r25	; 0x1b
    40a4:	cd 01       	movw	r24, r26
    40a6:	aa 27       	eor	r26, r26
    40a8:	bb 27       	eor	r27, r27
    40aa:	84 8b       	std	Z+20, r24	; 0x14
    40ac:	95 8b       	std	Z+21, r25	; 0x15
    40ae:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <get_fattime>
    40b2:	f8 01       	movw	r30, r16
    40b4:	66 8b       	std	Z+22, r22	; 0x16
    40b6:	77 8b       	std	Z+23, r23	; 0x17
    40b8:	80 8f       	std	Z+24, r24	; 0x18
    40ba:	91 8f       	std	Z+25, r25	; 0x19
    40bc:	12 8a       	std	Z+18, r1	; 0x12
    40be:	13 8a       	std	Z+19, r1	; 0x13
    40c0:	8c 81       	ldd	r24, Y+4	; 0x04
    40c2:	8f 7d       	andi	r24, 0xDF	; 223
    40c4:	8c 83       	std	Y+4, r24	; 0x04
    40c6:	e8 81       	ld	r30, Y
    40c8:	f9 81       	ldd	r31, Y+1	; 0x01
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	84 83       	std	Z+4, r24	; 0x04
    40ce:	09 90       	ld	r0, Y+
    40d0:	d8 81       	ld	r29, Y
    40d2:	c0 2d       	mov	r28, r0
    40d4:	ce 01       	movw	r24, r28
    40d6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sync_window>
    40da:	81 11       	cpse	r24, r1
    40dc:	6a c0       	rjmp	.+212    	; 0x41b2 <__stack+0xb3>
    40de:	88 81       	ld	r24, Y
    40e0:	83 30       	cpi	r24, 0x03	; 3
    40e2:	09 f0       	breq	.+2      	; 0x40e6 <f_sync+0xc0>
    40e4:	53 c0       	rjmp	.+166    	; 0x418c <__stack+0x8d>
    40e6:	8d 81       	ldd	r24, Y+5	; 0x05
    40e8:	81 30       	cpi	r24, 0x01	; 1
    40ea:	09 f0       	breq	.+2      	; 0x40ee <f_sync+0xc8>
    40ec:	4f c0       	rjmp	.+158    	; 0x418c <__stack+0x8d>
    40ee:	be 01       	movw	r22, r28
    40f0:	62 5d       	subi	r22, 0xD2	; 210
    40f2:	7f 4f       	sbci	r23, 0xFF	; 255
    40f4:	fb 01       	movw	r30, r22
    40f6:	ce 01       	movw	r24, r28
    40f8:	82 5d       	subi	r24, 0xD2	; 210
    40fa:	9d 4f       	sbci	r25, 0xFD	; 253
    40fc:	11 92       	st	Z+, r1
    40fe:	e8 17       	cp	r30, r24
    4100:	f9 07       	cpc	r31, r25
    4102:	e1 f7       	brne	.-8      	; 0x40fc <f_sync+0xd6>
    4104:	85 e5       	ldi	r24, 0x55	; 85
    4106:	fe 01       	movw	r30, r28
    4108:	e4 5d       	subi	r30, 0xD4	; 212
    410a:	fd 4f       	sbci	r31, 0xFD	; 253
    410c:	80 83       	st	Z, r24
    410e:	8a ea       	ldi	r24, 0xAA	; 170
    4110:	31 96       	adiw	r30, 0x01	; 1
    4112:	80 83       	st	Z, r24
    4114:	82 e5       	ldi	r24, 0x52	; 82
    4116:	8e a7       	std	Y+46, r24	; 0x2e
    4118:	8f a7       	std	Y+47, r24	; 0x2f
    411a:	81 e6       	ldi	r24, 0x61	; 97
    411c:	88 ab       	std	Y+48, r24	; 0x30
    411e:	91 e4       	ldi	r25, 0x41	; 65
    4120:	99 ab       	std	Y+49, r25	; 0x31
    4122:	22 e7       	ldi	r18, 0x72	; 114
    4124:	7b 97       	sbiw	r30, 0x1b	; 27
    4126:	20 83       	st	Z, r18
    4128:	31 96       	adiw	r30, 0x01	; 1
    412a:	20 83       	st	Z, r18
    412c:	31 96       	adiw	r30, 0x01	; 1
    412e:	90 83       	st	Z, r25
    4130:	31 96       	adiw	r30, 0x01	; 1
    4132:	80 83       	st	Z, r24
    4134:	3e 85       	ldd	r19, Y+14	; 0x0e
    4136:	2f 85       	ldd	r18, Y+15	; 0x0f
    4138:	98 89       	ldd	r25, Y+16	; 0x10
    413a:	89 89       	ldd	r24, Y+17	; 0x11
    413c:	31 96       	adiw	r30, 0x01	; 1
    413e:	30 83       	st	Z, r19
    4140:	31 96       	adiw	r30, 0x01	; 1
    4142:	20 83       	st	Z, r18
    4144:	31 96       	adiw	r30, 0x01	; 1
    4146:	90 83       	st	Z, r25
    4148:	31 96       	adiw	r30, 0x01	; 1
    414a:	80 83       	st	Z, r24
    414c:	3a 85       	ldd	r19, Y+10	; 0x0a
    414e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4150:	9c 85       	ldd	r25, Y+12	; 0x0c
    4152:	8d 85       	ldd	r24, Y+13	; 0x0d
    4154:	31 96       	adiw	r30, 0x01	; 1
    4156:	30 83       	st	Z, r19
    4158:	31 96       	adiw	r30, 0x01	; 1
    415a:	20 83       	st	Z, r18
    415c:	31 96       	adiw	r30, 0x01	; 1
    415e:	90 83       	st	Z, r25
    4160:	31 96       	adiw	r30, 0x01	; 1
    4162:	80 83       	st	Z, r24
    4164:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4166:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4168:	ac 8d       	ldd	r26, Y+28	; 0x1c
    416a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    416c:	9c 01       	movw	r18, r24
    416e:	ad 01       	movw	r20, r26
    4170:	2f 5f       	subi	r18, 0xFF	; 255
    4172:	3f 4f       	sbci	r19, 0xFF	; 255
    4174:	4f 4f       	sbci	r20, 0xFF	; 255
    4176:	5f 4f       	sbci	r21, 0xFF	; 255
    4178:	2a a7       	std	Y+42, r18	; 0x2a
    417a:	3b a7       	std	Y+43, r19	; 0x2b
    417c:	4c a7       	std	Y+44, r20	; 0x2c
    417e:	5d a7       	std	Y+45, r21	; 0x2d
    4180:	01 e0       	ldi	r16, 0x01	; 1
    4182:	10 e0       	ldi	r17, 0x00	; 0
    4184:	89 81       	ldd	r24, Y+1	; 0x01
    4186:	0e 94 03 09 	call	0x1206	; 0x1206 <disk_write>
    418a:	1d 82       	std	Y+5, r1	; 0x05
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	0e 94 71 09 	call	0x12e2	; 0x12e2 <disk_ioctl>
    4198:	91 e0       	ldi	r25, 0x01	; 1
    419a:	81 11       	cpse	r24, r1
    419c:	0b c0       	rjmp	.+22     	; 0x41b4 <__stack+0xb5>
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	09 c0       	rjmp	.+18     	; 0x41b4 <__stack+0xb5>
    41a2:	98 2f       	mov	r25, r24
    41a4:	07 c0       	rjmp	.+14     	; 0x41b4 <__stack+0xb5>
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	05 c0       	rjmp	.+10     	; 0x41b4 <__stack+0xb5>
    41aa:	91 e0       	ldi	r25, 0x01	; 1
    41ac:	03 c0       	rjmp	.+6      	; 0x41b4 <__stack+0xb5>
    41ae:	98 2f       	mov	r25, r24
    41b0:	01 c0       	rjmp	.+2      	; 0x41b4 <__stack+0xb5>
    41b2:	98 2f       	mov	r25, r24
    41b4:	89 2f       	mov	r24, r25
    41b6:	df 91       	pop	r29
    41b8:	cf 91       	pop	r28
    41ba:	1f 91       	pop	r17
    41bc:	0f 91       	pop	r16
    41be:	08 95       	ret

000041c0 <f_close>:
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	ec 01       	movw	r28, r24
    41c6:	2f df       	rcall	.-418    	; 0x4026 <f_sync>
    41c8:	81 11       	cpse	r24, r1
    41ca:	07 c0       	rjmp	.+14     	; 0x41da <f_close+0x1a>
    41cc:	ce 01       	movw	r24, r28
    41ce:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <validate>
    41d2:	81 11       	cpse	r24, r1
    41d4:	02 c0       	rjmp	.+4      	; 0x41da <f_close+0x1a>
    41d6:	19 82       	std	Y+1, r1	; 0x01
    41d8:	18 82       	st	Y, r1
    41da:	df 91       	pop	r29
    41dc:	cf 91       	pop	r28
    41de:	08 95       	ret

000041e0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    41e0:	2f 92       	push	r2
    41e2:	3f 92       	push	r3
    41e4:	4f 92       	push	r4
    41e6:	5f 92       	push	r5
    41e8:	6f 92       	push	r6
    41ea:	7f 92       	push	r7
    41ec:	8f 92       	push	r8
    41ee:	9f 92       	push	r9
    41f0:	af 92       	push	r10
    41f2:	bf 92       	push	r11
    41f4:	cf 92       	push	r12
    41f6:	df 92       	push	r13
    41f8:	ef 92       	push	r14
    41fa:	ff 92       	push	r15
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    4208:	cc 55       	subi	r28, 0x5C	; 92
    420a:	d1 09       	sbc	r29, r1
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	e5 96       	adiw	r28, 0x35	; 53
    4218:	ee ac       	ldd	r14, Y+62	; 0x3e
    421a:	ff ac       	ldd	r15, Y+63	; 0x3f
    421c:	e5 97       	sbiw	r28, 0x35	; 53
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    421e:	e3 96       	adiw	r28, 0x33	; 51
    4220:	8e ad       	ldd	r24, Y+62	; 0x3e
    4222:	9f ad       	ldd	r25, Y+63	; 0x3f
    4224:	e3 97       	sbiw	r28, 0x33	; 51
    4226:	9c 8b       	std	Y+20, r25	; 0x14
    4228:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    422a:	1e 8a       	std	Y+22, r1	; 0x16
    422c:	1d 8a       	std	Y+21, r1	; 0x15
    422e:	18 8e       	std	Y+24, r1	; 0x18
    4230:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    4232:	2e 01       	movw	r4, r28
    4234:	25 e7       	ldi	r18, 0x75	; 117
    4236:	42 0e       	add	r4, r18
    4238:	51 1c       	adc	r5, r1
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
			f |= 8;
		}
		i = 0;
    423a:	21 2c       	mov	r2, r1
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    423c:	0f 2e       	mov	r0, r31
    423e:	f7 e0       	ldi	r31, 0x07	; 7
    4240:	3f 2e       	mov	r3, r31
    4242:	f0 2d       	mov	r31, r0
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4244:	d7 01       	movw	r26, r14
    4246:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    4248:	66 23       	and	r22, r22
    424a:	09 f4       	brne	.+2      	; 0x424e <f_printf+0x6e>
    424c:	8e c1       	rjmp	.+796    	; 0x456a <f_printf+0x38a>
		if (c != '%') {				/* Non escape character */
    424e:	65 32       	cpi	r22, 0x25	; 37
    4250:	39 f0       	breq	.+14     	; 0x4260 <f_printf+0x80>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4252:	bf ef       	ldi	r27, 0xFF	; 255
    4254:	eb 1a       	sub	r14, r27
    4256:	fb 0a       	sbc	r15, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    4258:	ce 01       	movw	r24, r28
    425a:	43 96       	adiw	r24, 0x13	; 19
    425c:	a0 de       	rcall	.-704    	; 0x3f9e <putc_bfd>
			continue;
    425e:	f2 cf       	rjmp	.-28     	; 0x4244 <f_printf+0x64>
		}
		w = f = 0;
		c = *fmt++;
    4260:	f7 01       	movw	r30, r14
    4262:	d1 80       	ldd	r13, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    4264:	f0 e3       	ldi	r31, 0x30	; 48
    4266:	df 12       	cpse	r13, r31
    4268:	09 c0       	rjmp	.+18     	; 0x427c <f_printf+0x9c>
			f = 1; c = *fmt++;
    426a:	d7 01       	movw	r26, r14
    426c:	12 96       	adiw	r26, 0x02	; 2
    426e:	dc 90       	ld	r13, X
    4270:	f7 01       	movw	r30, r14
    4272:	33 96       	adiw	r30, 0x03	; 3
    4274:	7f 01       	movw	r14, r30
    4276:	77 24       	eor	r7, r7
    4278:	73 94       	inc	r7
    427a:	11 c0       	rjmp	.+34     	; 0x429e <f_printf+0xbe>
		} else {
			if (c == '-') {			/* Flag: left justified */
    427c:	fd e2       	ldi	r31, 0x2D	; 45
    427e:	df 16       	cp	r13, r31
    4280:	29 f0       	breq	.+10     	; 0x428c <f_printf+0xac>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    4282:	22 e0       	ldi	r18, 0x02	; 2
    4284:	e2 0e       	add	r14, r18
    4286:	f1 1c       	adc	r15, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    4288:	71 2c       	mov	r7, r1
    428a:	09 c0       	rjmp	.+18     	; 0x429e <f_printf+0xbe>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    428c:	d7 01       	movw	r26, r14
    428e:	12 96       	adiw	r26, 0x02	; 2
    4290:	dc 90       	ld	r13, X
    4292:	f7 01       	movw	r30, r14
    4294:	33 96       	adiw	r30, 0x03	; 3
    4296:	7f 01       	movw	r14, r30
    4298:	68 94       	set
    429a:	77 24       	eor	r7, r7
    429c:	71 f8       	bld	r7, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    429e:	80 ed       	ldi	r24, 0xD0	; 208
    42a0:	8d 0d       	add	r24, r13
    42a2:	8a 30       	cpi	r24, 0x0A	; 10
    42a4:	f0 f4       	brcc	.+60     	; 0x42e2 <f_printf+0x102>
    42a6:	02 2d       	mov	r16, r2
    42a8:	10 e0       	ldi	r17, 0x00	; 0
    42aa:	8d 2d       	mov	r24, r13
			w = w * 10 + c - '0';
    42ac:	98 01       	movw	r18, r16
    42ae:	22 0f       	add	r18, r18
    42b0:	33 1f       	adc	r19, r19
    42b2:	00 0f       	add	r16, r16
    42b4:	11 1f       	adc	r17, r17
    42b6:	00 0f       	add	r16, r16
    42b8:	11 1f       	adc	r17, r17
    42ba:	00 0f       	add	r16, r16
    42bc:	11 1f       	adc	r17, r17
    42be:	02 0f       	add	r16, r18
    42c0:	13 1f       	adc	r17, r19
    42c2:	08 0f       	add	r16, r24
    42c4:	11 1d       	adc	r17, r1
    42c6:	00 53       	subi	r16, 0x30	; 48
    42c8:	11 09       	sbc	r17, r1
			c = *fmt++;
    42ca:	ff ef       	ldi	r31, 0xFF	; 255
    42cc:	ef 1a       	sub	r14, r31
    42ce:	ff 0a       	sbc	r15, r31
    42d0:	f7 01       	movw	r30, r14
    42d2:	31 97       	sbiw	r30, 0x01	; 1
    42d4:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    42d6:	90 ed       	ldi	r25, 0xD0	; 208
    42d8:	98 0f       	add	r25, r24
    42da:	9a 30       	cpi	r25, 0x0A	; 10
    42dc:	38 f3       	brcs	.-50     	; 0x42ac <f_printf+0xcc>
    42de:	d8 2e       	mov	r13, r24
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <f_printf+0x106>
    42e2:	02 2d       	mov	r16, r2
    42e4:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    42e6:	8d 2d       	mov	r24, r13
    42e8:	8f 7d       	andi	r24, 0xDF	; 223
    42ea:	8c 34       	cpi	r24, 0x4C	; 76
    42ec:	41 f4       	brne	.+16     	; 0x42fe <f_printf+0x11e>
			f |= 4; c = *fmt++;
    42ee:	27 2d       	mov	r18, r7
    42f0:	24 60       	ori	r18, 0x04	; 4
    42f2:	72 2e       	mov	r7, r18
    42f4:	d7 01       	movw	r26, r14
    42f6:	dc 90       	ld	r13, X
    42f8:	f7 01       	movw	r30, r14
    42fa:	31 96       	adiw	r30, 0x01	; 1
    42fc:	7f 01       	movw	r14, r30
		}
		if (!c) break;
    42fe:	dd 20       	and	r13, r13
    4300:	09 f4       	brne	.+2      	; 0x4304 <f_printf+0x124>
    4302:	33 c1       	rjmp	.+614    	; 0x456a <f_printf+0x38a>
		d = c;
		if (IsLower(d)) d -= 0x20;
    4304:	8f e9       	ldi	r24, 0x9F	; 159
    4306:	8d 0d       	add	r24, r13
    4308:	8a 31       	cpi	r24, 0x1A	; 26
    430a:	18 f4       	brcc	.+6      	; 0x4312 <f_printf+0x132>
    430c:	30 ee       	ldi	r19, 0xE0	; 224
    430e:	3d 0d       	add	r19, r13
    4310:	01 c0       	rjmp	.+2      	; 0x4314 <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    4312:	3d 2d       	mov	r19, r13
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    4314:	83 2f       	mov	r24, r19
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	fc 01       	movw	r30, r24
    431a:	e2 54       	subi	r30, 0x42	; 66
    431c:	f1 09       	sbc	r31, r1
    431e:	e7 31       	cpi	r30, 0x17	; 23
    4320:	f1 05       	cpc	r31, r1
    4322:	08 f0       	brcs	.+2      	; 0x4326 <f_printf+0x146>
    4324:	58 c0       	rjmp	.+176    	; 0x43d6 <f_printf+0x1f6>
    4326:	e3 58       	subi	r30, 0x83	; 131
    4328:	ff 4f       	sbci	r31, 0xFF	; 255
    432a:	0c 94 15 46 	jmp	0x8c2a	; 0x8c2a <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    432e:	f2 01       	movw	r30, r4
    4330:	a0 80       	ld	r10, Z
    4332:	b1 80       	ldd	r11, Z+1	; 0x01
    4334:	f2 e0       	ldi	r31, 0x02	; 2
    4336:	4f 0e       	add	r4, r31
    4338:	51 1c       	adc	r5, r1
			for (j = 0; p[j]; j++) ;
    433a:	d5 01       	movw	r26, r10
    433c:	6c 91       	ld	r22, X
    433e:	66 23       	and	r22, r22
    4340:	09 f4       	brne	.+2      	; 0x4344 <f_printf+0x164>
    4342:	38 c1       	rjmp	.+624    	; 0x45b4 <f_printf+0x3d4>
    4344:	f5 01       	movw	r30, r10
    4346:	31 96       	adiw	r30, 0x01	; 1
    4348:	c2 2c       	mov	r12, r2
    434a:	d1 2c       	mov	r13, r1
    434c:	bf ef       	ldi	r27, 0xFF	; 255
    434e:	cb 1a       	sub	r12, r27
    4350:	db 0a       	sbc	r13, r27
    4352:	81 91       	ld	r24, Z+
    4354:	81 11       	cpse	r24, r1
    4356:	fa cf       	rjmp	.-12     	; 0x434c <f_printf+0x16c>
    4358:	2a c1       	rjmp	.+596    	; 0x45ae <f_printf+0x3ce>
    435a:	c2 2c       	mov	r12, r2
    435c:	d1 2c       	mov	r13, r1
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    435e:	66 24       	eor	r6, r6
    4360:	63 94       	inc	r6
    4362:	71 2c       	mov	r7, r1
    4364:	46 01       	movw	r8, r12
    4366:	60 e2       	ldi	r22, 0x20	; 32
    4368:	ce 01       	movw	r24, r28
    436a:	43 96       	adiw	r24, 0x13	; 19
    436c:	18 de       	rcall	.-976    	; 0x3f9e <putc_bfd>
    436e:	ef ef       	ldi	r30, 0xFF	; 255
    4370:	8e 1a       	sub	r8, r30
    4372:	9e 0a       	sbc	r9, r30
    4374:	80 16       	cp	r8, r16
    4376:	91 06       	cpc	r9, r17
    4378:	b0 f3       	brcs	.-20     	; 0x4366 <f_printf+0x186>
    437a:	93 01       	movw	r18, r6
    437c:	2c 19       	sub	r18, r12
    437e:	3d 09       	sbc	r19, r13
    4380:	69 01       	movw	r12, r18
    4382:	c0 0e       	add	r12, r16
    4384:	d1 1e       	adc	r13, r17
			}
			while (*p) putc_bfd(&pb, *p++);
    4386:	d5 01       	movw	r26, r10
    4388:	6c 91       	ld	r22, X
    438a:	66 23       	and	r22, r22
    438c:	59 f0       	breq	.+22     	; 0x43a4 <f_printf+0x1c4>
    438e:	bf ef       	ldi	r27, 0xFF	; 255
    4390:	ab 1a       	sub	r10, r27
    4392:	bb 0a       	sbc	r11, r27
    4394:	ce 01       	movw	r24, r28
    4396:	43 96       	adiw	r24, 0x13	; 19
    4398:	02 de       	rcall	.-1020   	; 0x3f9e <putc_bfd>
    439a:	f5 01       	movw	r30, r10
    439c:	61 91       	ld	r22, Z+
    439e:	5f 01       	movw	r10, r30
    43a0:	61 11       	cpse	r22, r1
    43a2:	f8 cf       	rjmp	.-16     	; 0x4394 <f_printf+0x1b4>
			while (j++ < w) putc_bfd(&pb, ' ');
    43a4:	c0 16       	cp	r12, r16
    43a6:	d1 06       	cpc	r13, r17
    43a8:	08 f0       	brcs	.+2      	; 0x43ac <f_printf+0x1cc>
    43aa:	4c cf       	rjmp	.-360    	; 0x4244 <f_printf+0x64>
    43ac:	60 e2       	ldi	r22, 0x20	; 32
    43ae:	ce 01       	movw	r24, r28
    43b0:	43 96       	adiw	r24, 0x13	; 19
    43b2:	f5 dd       	rcall	.-1046   	; 0x3f9e <putc_bfd>
    43b4:	ff ef       	ldi	r31, 0xFF	; 255
    43b6:	cf 1a       	sub	r12, r31
    43b8:	df 0a       	sbc	r13, r31
    43ba:	c0 16       	cp	r12, r16
    43bc:	d1 06       	cpc	r13, r17
    43be:	b0 f3       	brcs	.-20     	; 0x43ac <f_printf+0x1cc>
    43c0:	41 cf       	rjmp	.-382    	; 0x4244 <f_printf+0x64>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    43c2:	82 01       	movw	r16, r4
    43c4:	0e 5f       	subi	r16, 0xFE	; 254
    43c6:	1f 4f       	sbci	r17, 0xFF	; 255
    43c8:	d2 01       	movw	r26, r4
    43ca:	6c 91       	ld	r22, X
    43cc:	ce 01       	movw	r24, r28
    43ce:	43 96       	adiw	r24, 0x13	; 19
    43d0:	e6 dd       	rcall	.-1076   	; 0x3f9e <putc_bfd>
    43d2:	28 01       	movw	r4, r16
    43d4:	37 cf       	rjmp	.-402    	; 0x4244 <f_printf+0x64>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    43d6:	6d 2d       	mov	r22, r13
    43d8:	ce 01       	movw	r24, r28
    43da:	43 96       	adiw	r24, 0x13	; 19
    43dc:	e0 dd       	rcall	.-1088   	; 0x3f9e <putc_bfd>
    43de:	32 cf       	rjmp	.-412    	; 0x4244 <f_printf+0x64>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    43e0:	72 fe       	sbrs	r7, 2
    43e2:	0e c0       	rjmp	.+28     	; 0x4400 <f_printf+0x220>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    43e4:	aa e0       	ldi	r26, 0x0A	; 10
    43e6:	01 c0       	rjmp	.+2      	; 0x43ea <f_printf+0x20a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    43e8:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    43ea:	f2 01       	movw	r30, r4
    43ec:	60 81       	ld	r22, Z
    43ee:	71 81       	ldd	r23, Z+1	; 0x01
    43f0:	82 81       	ldd	r24, Z+2	; 0x02
    43f2:	93 81       	ldd	r25, Z+3	; 0x03
    43f4:	b4 e0       	ldi	r27, 0x04	; 4
    43f6:	4b 0e       	add	r4, r27
    43f8:	51 1c       	adc	r5, r1
		if (d == 'D' && (v & 0x80000000)) {
    43fa:	34 34       	cpi	r19, 0x44	; 68
    43fc:	31 f5       	brne	.+76     	; 0x444a <f_printf+0x26a>
    43fe:	19 c0       	rjmp	.+50     	; 0x4432 <f_printf+0x252>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    4400:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4402:	34 34       	cpi	r19, 0x44	; 68
    4404:	61 f4       	brne	.+24     	; 0x441e <f_printf+0x23e>
    4406:	f2 01       	movw	r30, r4
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	07 2e       	mov	r0, r23
    440e:	00 0c       	add	r0, r0
    4410:	88 0b       	sbc	r24, r24
    4412:	99 0b       	sbc	r25, r25
    4414:	92 01       	movw	r18, r4
    4416:	2e 5f       	subi	r18, 0xFE	; 254
    4418:	3f 4f       	sbci	r19, 0xFF	; 255
    441a:	29 01       	movw	r4, r18
    441c:	0a c0       	rjmp	.+20     	; 0x4432 <f_printf+0x252>
    441e:	f2 01       	movw	r30, r4
    4420:	60 81       	ld	r22, Z
    4422:	71 81       	ldd	r23, Z+1	; 0x01
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	92 01       	movw	r18, r4
    442a:	2e 5f       	subi	r18, 0xFE	; 254
    442c:	3f 4f       	sbci	r19, 0xFF	; 255
    442e:	29 01       	movw	r4, r18
    4430:	0c c0       	rjmp	.+24     	; 0x444a <f_printf+0x26a>
		if (d == 'D' && (v & 0x80000000)) {
    4432:	99 23       	and	r25, r25
    4434:	54 f4       	brge	.+20     	; 0x444a <f_printf+0x26a>
			v = 0 - v;
    4436:	90 95       	com	r25
    4438:	80 95       	com	r24
    443a:	70 95       	com	r23
    443c:	61 95       	neg	r22
    443e:	7f 4f       	sbci	r23, 0xFF	; 255
    4440:	8f 4f       	sbci	r24, 0xFF	; 255
    4442:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    4444:	37 2d       	mov	r19, r7
    4446:	38 60       	ori	r19, 0x08	; 8
    4448:	73 2e       	mov	r7, r19
    444a:	ae 01       	movw	r20, r28
    444c:	4d 5f       	subi	r20, 0xFD	; 253
    444e:	5f 4f       	sbci	r21, 0xFF	; 255
    4450:	5a 01       	movw	r10, r20
		}
		i = 0;
    4452:	82 2c       	mov	r8, r2
    4454:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    4456:	2a 2f       	mov	r18, r26
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	40 e0       	ldi	r20, 0x00	; 0
    445c:	50 e0       	ldi	r21, 0x00	; 0
    445e:	6d 96       	adiw	r28, 0x1d	; 29
    4460:	2c af       	std	Y+60, r18	; 0x3c
    4462:	3d af       	std	Y+61, r19	; 0x3d
    4464:	4e af       	std	Y+62, r20	; 0x3e
    4466:	5f af       	std	Y+63, r21	; 0x3f
    4468:	6d 97       	sbiw	r28, 0x1d	; 29
    446a:	97 01       	movw	r18, r14
    446c:	78 01       	movw	r14, r16
    446e:	1d 2d       	mov	r17, r13
    4470:	69 01       	movw	r12, r18
    4472:	6d 96       	adiw	r28, 0x1d	; 29
    4474:	2c ad       	ldd	r18, Y+60	; 0x3c
    4476:	3d ad       	ldd	r19, Y+61	; 0x3d
    4478:	4e ad       	ldd	r20, Y+62	; 0x3e
    447a:	5f ad       	ldd	r21, Y+63	; 0x3f
    447c:	6d 97       	sbiw	r28, 0x1d	; 29
    447e:	0e 94 d7 45 	call	0x8bae	; 0x8bae <__udivmodsi4>
    4482:	f6 2f       	mov	r31, r22
    4484:	e6 2f       	mov	r30, r22
    4486:	62 2f       	mov	r22, r18
    4488:	73 2f       	mov	r23, r19
    448a:	84 2f       	mov	r24, r20
    448c:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    448e:	fa 30       	cpi	r31, 0x0A	; 10
    4490:	30 f0       	brcs	.+12     	; 0x449e <f_printf+0x2be>
    4492:	18 37       	cpi	r17, 0x78	; 120
    4494:	11 f0       	breq	.+4      	; 0x449a <f_printf+0x2ba>
    4496:	e3 2d       	mov	r30, r3
    4498:	01 c0       	rjmp	.+2      	; 0x449c <f_printf+0x2bc>
    449a:	e7 e2       	ldi	r30, 0x27	; 39
    449c:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    449e:	3f ef       	ldi	r19, 0xFF	; 255
    44a0:	83 1a       	sub	r8, r19
    44a2:	93 0a       	sbc	r9, r19
    44a4:	e0 5d       	subi	r30, 0xD0	; 208
    44a6:	d5 01       	movw	r26, r10
    44a8:	ed 93       	st	X+, r30
    44aa:	5d 01       	movw	r10, r26
		} while (v && i < sizeof s / sizeof s[0]);
    44ac:	61 15       	cp	r22, r1
    44ae:	71 05       	cpc	r23, r1
    44b0:	81 05       	cpc	r24, r1
    44b2:	91 05       	cpc	r25, r1
    44b4:	21 f0       	breq	.+8      	; 0x44be <f_printf+0x2de>
    44b6:	b0 e1       	ldi	r27, 0x10	; 16
    44b8:	8b 16       	cp	r8, r27
    44ba:	91 04       	cpc	r9, r1
    44bc:	d1 f6       	brne	.-76     	; 0x4472 <f_printf+0x292>
    44be:	87 01       	movw	r16, r14
    44c0:	76 01       	movw	r14, r12
		if (f & 8) s[i++] = '-';
    44c2:	73 fe       	sbrs	r7, 3
    44c4:	0c c0       	rjmp	.+24     	; 0x44de <f_printf+0x2fe>
    44c6:	e3 e0       	ldi	r30, 0x03	; 3
    44c8:	f0 e0       	ldi	r31, 0x00	; 0
    44ca:	ec 0f       	add	r30, r28
    44cc:	fd 1f       	adc	r31, r29
    44ce:	e8 0d       	add	r30, r8
    44d0:	f9 1d       	adc	r31, r9
    44d2:	2d e2       	ldi	r18, 0x2D	; 45
    44d4:	20 83       	st	Z, r18
    44d6:	a4 01       	movw	r20, r8
    44d8:	4f 5f       	subi	r20, 0xFF	; 255
    44da:	5f 4f       	sbci	r21, 0xFF	; 255
    44dc:	4a 01       	movw	r8, r20
		j = i; d = (f & 1) ? '0' : ' ';
    44de:	70 fc       	sbrc	r7, 0
    44e0:	04 c0       	rjmp	.+8      	; 0x44ea <f_printf+0x30a>
    44e2:	68 94       	set
    44e4:	66 24       	eor	r6, r6
    44e6:	65 f8       	bld	r6, 5
    44e8:	04 c0       	rjmp	.+8      	; 0x44f2 <f_printf+0x312>
    44ea:	0f 2e       	mov	r0, r31
    44ec:	f0 e3       	ldi	r31, 0x30	; 48
    44ee:	6f 2e       	mov	r6, r31
    44f0:	f0 2d       	mov	r31, r0
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    44f2:	71 fc       	sbrc	r7, 1
    44f4:	15 c0       	rjmp	.+42     	; 0x4520 <f_printf+0x340>
    44f6:	64 01       	movw	r12, r8
    44f8:	5f ef       	ldi	r21, 0xFF	; 255
    44fa:	c5 1a       	sub	r12, r21
    44fc:	d5 0a       	sbc	r13, r21
    44fe:	80 16       	cp	r8, r16
    4500:	91 06       	cpc	r9, r17
    4502:	08 f4       	brcc	.+2      	; 0x4506 <f_printf+0x326>
    4504:	65 c0       	rjmp	.+202    	; 0x45d0 <f_printf+0x3f0>
    4506:	0d c0       	rjmp	.+26     	; 0x4522 <f_printf+0x342>
    4508:	8f ef       	ldi	r24, 0xFF	; 255
    450a:	c8 1a       	sub	r12, r24
    450c:	d8 0a       	sbc	r13, r24
    450e:	c0 16       	cp	r12, r16
    4510:	d1 06       	cpc	r13, r17
    4512:	08 f4       	brcc	.+2      	; 0x4516 <f_printf+0x336>
    4514:	58 c0       	rjmp	.+176    	; 0x45c6 <f_printf+0x3e6>
    4516:	68 01       	movw	r12, r16
    4518:	9f ef       	ldi	r25, 0xFF	; 255
    451a:	c9 1a       	sub	r12, r25
    451c:	d9 0a       	sbc	r13, r25
    451e:	01 c0       	rjmp	.+2      	; 0x4522 <f_printf+0x342>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    4520:	64 01       	movw	r12, r8
    4522:	0f 2e       	mov	r0, r31
    4524:	f3 e0       	ldi	r31, 0x03	; 3
    4526:	af 2e       	mov	r10, r31
    4528:	b1 2c       	mov	r11, r1
    452a:	f0 2d       	mov	r31, r0
    452c:	ac 0e       	add	r10, r28
    452e:	bd 1e       	adc	r11, r29
    4530:	a8 0c       	add	r10, r8
    4532:	b9 1c       	adc	r11, r9
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    4534:	a1 e0       	ldi	r26, 0x01	; 1
    4536:	8a 1a       	sub	r8, r26
    4538:	91 08       	sbc	r9, r1
    453a:	f5 01       	movw	r30, r10
    453c:	62 91       	ld	r22, -Z
    453e:	5f 01       	movw	r10, r30
    4540:	ce 01       	movw	r24, r28
    4542:	43 96       	adiw	r24, 0x13	; 19
    4544:	2c dd       	rcall	.-1448   	; 0x3f9e <putc_bfd>
    4546:	81 14       	cp	r8, r1
    4548:	91 04       	cpc	r9, r1
    454a:	a1 f7       	brne	.-24     	; 0x4534 <f_printf+0x354>
		while (j++ < w) putc_bfd(&pb, d);
    454c:	c0 16       	cp	r12, r16
    454e:	d1 06       	cpc	r13, r17
    4550:	08 f0       	brcs	.+2      	; 0x4554 <f_printf+0x374>
    4552:	78 ce       	rjmp	.-784    	; 0x4244 <f_printf+0x64>
    4554:	66 2d       	mov	r22, r6
    4556:	ce 01       	movw	r24, r28
    4558:	43 96       	adiw	r24, 0x13	; 19
    455a:	21 dd       	rcall	.-1470   	; 0x3f9e <putc_bfd>
    455c:	ff ef       	ldi	r31, 0xFF	; 255
    455e:	cf 1a       	sub	r12, r31
    4560:	df 0a       	sbc	r13, r31
    4562:	c0 16       	cp	r12, r16
    4564:	d1 06       	cpc	r13, r17
    4566:	b0 f3       	brcs	.-20     	; 0x4554 <f_printf+0x374>
    4568:	6d ce       	rjmp	.-806    	; 0x4244 <f_printf+0x64>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    456a:	4d 89       	ldd	r20, Y+21	; 0x15
    456c:	5e 89       	ldd	r21, Y+22	; 0x16
    456e:	55 23       	and	r21, r21
    4570:	ac f0       	brlt	.+42     	; 0x459c <f_printf+0x3bc>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    4572:	9e 01       	movw	r18, r28
    4574:	2f 5f       	subi	r18, 0xFF	; 255
    4576:	3f 4f       	sbci	r19, 0xFF	; 255
    4578:	be 01       	movw	r22, r28
    457a:	67 5e       	subi	r22, 0xE7	; 231
    457c:	7f 4f       	sbci	r23, 0xFF	; 255
    457e:	8b 89       	ldd	r24, Y+19	; 0x13
    4580:	9c 89       	ldd	r25, Y+20	; 0x14
    4582:	13 db       	rcall	.-2522   	; 0x3baa <f_write>
    4584:	81 11       	cpse	r24, r1
    4586:	0d c0       	rjmp	.+26     	; 0x45a2 <f_printf+0x3c2>
		&& (UINT)pb.idx == nw) return pb.nchr;
    4588:	2d 89       	ldd	r18, Y+21	; 0x15
    458a:	3e 89       	ldd	r19, Y+22	; 0x16
    458c:	89 81       	ldd	r24, Y+1	; 0x01
    458e:	9a 81       	ldd	r25, Y+2	; 0x02
    4590:	28 17       	cp	r18, r24
    4592:	39 07       	cpc	r19, r25
    4594:	49 f4       	brne	.+18     	; 0x45a8 <f_printf+0x3c8>
    4596:	8f 89       	ldd	r24, Y+23	; 0x17
    4598:	98 8d       	ldd	r25, Y+24	; 0x18
    459a:	52 c0       	rjmp	.+164    	; 0x4640 <f_printf+0x460>
	return EOF;
    459c:	8f ef       	ldi	r24, 0xFF	; 255
    459e:	9f ef       	ldi	r25, 0xFF	; 255
    45a0:	4f c0       	rjmp	.+158    	; 0x4640 <f_printf+0x460>
    45a2:	8f ef       	ldi	r24, 0xFF	; 255
    45a4:	9f ef       	ldi	r25, 0xFF	; 255
    45a6:	4c c0       	rjmp	.+152    	; 0x4640 <f_printf+0x460>
    45a8:	8f ef       	ldi	r24, 0xFF	; 255
    45aa:	9f ef       	ldi	r25, 0xFF	; 255
    45ac:	49 c0       	rjmp	.+146    	; 0x4640 <f_printf+0x460>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
    45ae:	71 fe       	sbrs	r7, 1
    45b0:	19 c0       	rjmp	.+50     	; 0x45e4 <f_printf+0x404>
    45b2:	ed ce       	rjmp	.-550    	; 0x438e <f_printf+0x1ae>
    45b4:	71 fe       	sbrs	r7, 1
    45b6:	1f c0       	rjmp	.+62     	; 0x45f6 <f_printf+0x416>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    45b8:	c2 2c       	mov	r12, r2
    45ba:	d1 2c       	mov	r13, r1
    45bc:	f3 ce       	rjmp	.-538    	; 0x43a4 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    45be:	72 fc       	sbrc	r7, 2
    45c0:	13 cf       	rjmp	.-474    	; 0x43e8 <f_printf+0x208>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    45c2:	a0 e1       	ldi	r26, 0x10	; 16
    45c4:	2c cf       	rjmp	.-424    	; 0x441e <f_printf+0x23e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    45c6:	66 2d       	mov	r22, r6
    45c8:	ce 01       	movw	r24, r28
    45ca:	43 96       	adiw	r24, 0x13	; 19
    45cc:	e8 dc       	rcall	.-1584   	; 0x3f9e <putc_bfd>
    45ce:	9c cf       	rjmp	.-200    	; 0x4508 <f_printf+0x328>
    45d0:	66 2d       	mov	r22, r6
    45d2:	ce 01       	movw	r24, r28
    45d4:	43 96       	adiw	r24, 0x13	; 19
    45d6:	e3 dc       	rcall	.-1594   	; 0x3f9e <putc_bfd>
    45d8:	64 01       	movw	r12, r8
    45da:	96 cf       	rjmp	.-212    	; 0x4508 <f_printf+0x328>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    45dc:	d5 01       	movw	r26, r10
    45de:	6c 91       	ld	r22, X
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    45e0:	63 01       	movw	r12, r6
    45e2:	d5 ce       	rjmp	.-598    	; 0x438e <f_printf+0x1ae>
    45e4:	36 01       	movw	r6, r12
    45e6:	bf ef       	ldi	r27, 0xFF	; 255
    45e8:	6b 1a       	sub	r6, r27
    45ea:	7b 0a       	sbc	r7, r27
    45ec:	c0 16       	cp	r12, r16
    45ee:	d1 06       	cpc	r13, r17
    45f0:	08 f4       	brcc	.+2      	; 0x45f4 <f_printf+0x414>
    45f2:	b8 ce       	rjmp	.-656    	; 0x4364 <f_printf+0x184>
    45f4:	f3 cf       	rjmp	.-26     	; 0x45dc <f_printf+0x3fc>
    45f6:	01 15       	cp	r16, r1
    45f8:	11 05       	cpc	r17, r1
    45fa:	09 f0       	breq	.+2      	; 0x45fe <f_printf+0x41e>
    45fc:	ae ce       	rjmp	.-676    	; 0x435a <f_printf+0x17a>
    45fe:	cc 24       	eor	r12, r12
    4600:	c3 94       	inc	r12
    4602:	d1 2c       	mov	r13, r1
    4604:	cf ce       	rjmp	.-610    	; 0x43a4 <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4606:	f2 01       	movw	r30, r4
    4608:	60 81       	ld	r22, Z
    460a:	71 81       	ldd	r23, Z+1	; 0x01
    460c:	82 81       	ldd	r24, Z+2	; 0x02
    460e:	93 81       	ldd	r25, Z+3	; 0x03
    4610:	92 01       	movw	r18, r4
    4612:	2c 5f       	subi	r18, 0xFC	; 252
    4614:	3f 4f       	sbci	r19, 0xFF	; 255
    4616:	29 01       	movw	r4, r18
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    4618:	a2 e0       	ldi	r26, 0x02	; 2
    461a:	17 cf       	rjmp	.-466    	; 0x444a <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    461c:	72 fc       	sbrc	r7, 2
    461e:	f3 cf       	rjmp	.-26     	; 0x4606 <f_printf+0x426>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    4620:	a2 e0       	ldi	r26, 0x02	; 2
    4622:	ef ce       	rjmp	.-546    	; 0x4402 <f_printf+0x222>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4624:	d2 01       	movw	r26, r4
    4626:	6d 91       	ld	r22, X+
    4628:	7d 91       	ld	r23, X+
    462a:	8d 91       	ld	r24, X+
    462c:	9c 91       	ld	r25, X
    462e:	f2 01       	movw	r30, r4
    4630:	34 96       	adiw	r30, 0x04	; 4
    4632:	2f 01       	movw	r4, r30
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    4634:	a8 e0       	ldi	r26, 0x08	; 8
    4636:	09 cf       	rjmp	.-494    	; 0x444a <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4638:	72 fc       	sbrc	r7, 2
    463a:	f4 cf       	rjmp	.-24     	; 0x4624 <f_printf+0x444>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    463c:	a8 e0       	ldi	r26, 0x08	; 8
    463e:	ef ce       	rjmp	.-546    	; 0x441e <f_printf+0x23e>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    4640:	c4 5a       	subi	r28, 0xA4	; 164
    4642:	df 4f       	sbci	r29, 0xFF	; 255
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	cd bf       	out	0x3d, r28	; 61
    464e:	df 91       	pop	r29
    4650:	cf 91       	pop	r28
    4652:	1f 91       	pop	r17
    4654:	0f 91       	pop	r16
    4656:	ff 90       	pop	r15
    4658:	ef 90       	pop	r14
    465a:	df 90       	pop	r13
    465c:	cf 90       	pop	r12
    465e:	bf 90       	pop	r11
    4660:	af 90       	pop	r10
    4662:	9f 90       	pop	r9
    4664:	8f 90       	pop	r8
    4666:	7f 90       	pop	r7
    4668:	6f 90       	pop	r6
    466a:	5f 90       	pop	r5
    466c:	4f 90       	pop	r4
    466e:	3f 90       	pop	r3
    4670:	2f 90       	pop	r2
    4672:	08 95       	ret

00004674 <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    4674:	82 e0       	ldi	r24, 0x02	; 2
    4676:	80 93 b8 00 	sts	0x00B8, r24
    467a:	08 95       	ret

0000467c <_ZN3I2CD1Ev>:
    467c:	08 95       	ret

0000467e <_ZN3I2C9twi_startEv>:
    467e:	84 ea       	ldi	r24, 0xA4	; 164
    4680:	80 93 bc 00 	sts	0x00BC, r24
    4684:	08 95       	ret

00004686 <_ZN3I2C8twi_stopEv>:
    4686:	84 e9       	ldi	r24, 0x94	; 148
    4688:	80 93 bc 00 	sts	0x00BC, r24
    468c:	08 95       	ret

0000468e <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    468e:	ec eb       	ldi	r30, 0xBC	; 188
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	88 23       	and	r24, r24
    4696:	ec f7       	brge	.-6      	; 0x4692 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    4698:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    469c:	84 e8       	ldi	r24, 0x84	; 132
    469e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    46a2:	ec eb       	ldi	r30, 0xBC	; 188
    46a4:	f0 e0       	ldi	r31, 0x00	; 0
    46a6:	80 81       	ld	r24, Z
    46a8:	88 23       	and	r24, r24
    46aa:	ec f7       	brge	.-6      	; 0x46a6 <_ZN3I2C9twi_writeEh+0x18>
}
    46ac:	08 95       	ret

000046ae <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    46ae:	66 23       	and	r22, r22
    46b0:	21 f0       	breq	.+8      	; 0x46ba <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    46b2:	84 ec       	ldi	r24, 0xC4	; 196
    46b4:	80 93 bc 00 	sts	0x00BC, r24
    46b8:	03 c0       	rjmp	.+6      	; 0x46c0 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    46ba:	84 e8       	ldi	r24, 0x84	; 132
    46bc:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    46c0:	ec eb       	ldi	r30, 0xBC	; 188
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	80 81       	ld	r24, Z
    46c6:	88 23       	and	r24, r24
    46c8:	ec f7       	brge	.-6      	; 0x46c4 <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    46ca:	80 91 bb 00 	lds	r24, 0x00BB
    46ce:	08 95       	ret

000046d0 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    46d0:	2a b1       	in	r18, 0x0a	; 10
    46d2:	20 66       	ori	r18, 0x60	; 96
    46d4:	2a b9       	out	0x0a, r18	; 10
    46d6:	28 b1       	in	r18, 0x08	; 8
    46d8:	23 7f       	andi	r18, 0xF3	; 243
    46da:	28 b9       	out	0x08, r18	; 8
    46dc:	27 b1       	in	r18, 0x07	; 7
    46de:	2c 60       	ori	r18, 0x0C	; 12
    46e0:	27 b9       	out	0x07, r18	; 7
    46e2:	2a b1       	in	r18, 0x0a	; 10
    46e4:	23 7e       	andi	r18, 0xE3	; 227
    46e6:	2a b9       	out	0x0a, r18	; 10
    46e8:	fc 01       	movw	r30, r24
    46ea:	0c 96       	adiw	r24, 0x0c	; 12
    46ec:	11 92       	st	Z+, r1
    46ee:	e8 17       	cp	r30, r24
    46f0:	f9 07       	cpc	r31, r25
    46f2:	e1 f7       	brne	.-8      	; 0x46ec <_ZN9InterfaceC1Ev+0x1c>
    46f4:	08 95       	ret

000046f6 <_ZN9InterfaceD1Ev>:
    46f6:	08 95       	ret

000046f8 <_ZN9Interface7paradebEPVhhPh>:
    46f8:	fb 01       	movw	r30, r22
    46fa:	80 81       	ld	r24, Z
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	04 2e       	mov	r0, r20
    4700:	02 c0       	rjmp	.+4      	; 0x4706 <_ZN9Interface7paradebEPVhhPh+0xe>
    4702:	95 95       	asr	r25
    4704:	87 95       	ror	r24
    4706:	0a 94       	dec	r0
    4708:	e2 f7       	brpl	.-8      	; 0x4702 <_ZN9Interface7paradebEPVhhPh+0xa>
    470a:	80 ff       	sbrs	r24, 0
    470c:	05 c0       	rjmp	.+10     	; 0x4718 <_ZN9Interface7paradebEPVhhPh+0x20>
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	f9 01       	movw	r30, r18
    4712:	80 83       	st	Z, r24
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	08 95       	ret
    4718:	f9 01       	movw	r30, r18
    471a:	80 81       	ld	r24, Z
    471c:	81 30       	cpi	r24, 0x01	; 1
    471e:	71 f4       	brne	.+28     	; 0x473c <_ZN9Interface7paradebEPVhhPh+0x44>
    4720:	fb 01       	movw	r30, r22
    4722:	60 81       	ld	r22, Z
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	fb 01       	movw	r30, r22
    4728:	02 c0       	rjmp	.+4      	; 0x472e <_ZN9Interface7paradebEPVhhPh+0x36>
    472a:	f5 95       	asr	r31
    472c:	e7 95       	ror	r30
    472e:	4a 95       	dec	r20
    4730:	e2 f7       	brpl	.-8      	; 0x472a <_ZN9Interface7paradebEPVhhPh+0x32>
    4732:	e0 fd       	sbrc	r30, 0
    4734:	03 c0       	rjmp	.+6      	; 0x473c <_ZN9Interface7paradebEPVhhPh+0x44>
    4736:	f9 01       	movw	r30, r18
    4738:	10 82       	st	Z, r1
    473a:	08 95       	ret
    473c:	f9 01       	movw	r30, r18
    473e:	10 82       	st	Z, r1
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	08 95       	ret

00004744 <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    474c:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    474e:	82 e0       	ldi	r24, 0x02	; 2
    4750:	8a 95       	dec	r24
    4752:	f1 f7       	brne	.-4      	; 0x4750 <_ZN9Interface6TasterEv+0xc>
    4754:	00 c0       	rjmp	.+0      	; 0x4756 <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
    4756:	9e 01       	movw	r18, r28
    4758:	2e 5f       	subi	r18, 0xFE	; 254
    475a:	3f 4f       	sbci	r19, 0xFF	; 255
    475c:	44 e0       	ldi	r20, 0x04	; 4
    475e:	69 e2       	ldi	r22, 0x29	; 41
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	ce 01       	movw	r24, r28
    4764:	c9 df       	rcall	.-110    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    4766:	81 11       	cpse	r24, r1
    4768:	14 c0       	rjmp	.+40     	; 0x4792 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
    476a:	9e 01       	movw	r18, r28
    476c:	2f 5f       	subi	r18, 0xFF	; 255
    476e:	3f 4f       	sbci	r19, 0xFF	; 255
    4770:	43 e0       	ldi	r20, 0x03	; 3
    4772:	69 e2       	ldi	r22, 0x29	; 41
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	ce 01       	movw	r24, r28
    4778:	bf df       	rcall	.-130    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    477a:	81 11       	cpse	r24, r1
    477c:	0c c0       	rjmp	.+24     	; 0x4796 <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    477e:	9e 01       	movw	r18, r28
    4780:	42 e0       	ldi	r20, 0x02	; 2
    4782:	69 e2       	ldi	r22, 0x29	; 41
    4784:	70 e0       	ldi	r23, 0x00	; 0
    4786:	ce 01       	movw	r24, r28
    4788:	b7 df       	rcall	.-146    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    478a:	88 23       	and	r24, r24
    478c:	31 f0       	breq	.+12     	; 0x479a <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    478e:	11 e3       	ldi	r17, 0x31	; 49
    4790:	05 c0       	rjmp	.+10     	; 0x479c <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    4792:	13 e3       	ldi	r17, 0x33	; 51
    4794:	03 c0       	rjmp	.+6      	; 0x479c <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    4796:	12 e3       	ldi	r17, 0x32	; 50
    4798:	01 c0       	rjmp	.+2      	; 0x479c <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    479a:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    479c:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    479e:	42 9a       	sbi	0x08, 2	; 8
    47a0:	82 e0       	ldi	r24, 0x02	; 2
    47a2:	8a 95       	dec	r24
    47a4:	f1 f7       	brne	.-4      	; 0x47a2 <_ZN9Interface6TasterEv+0x5e>
    47a6:	00 c0       	rjmp	.+0      	; 0x47a8 <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    47a8:	9e 01       	movw	r18, r28
    47aa:	2b 5f       	subi	r18, 0xFB	; 251
    47ac:	3f 4f       	sbci	r19, 0xFF	; 255
    47ae:	44 e0       	ldi	r20, 0x04	; 4
    47b0:	69 e2       	ldi	r22, 0x29	; 41
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	ce 01       	movw	r24, r28
    47b6:	a0 df       	rcall	.-192    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    47b8:	81 11       	cpse	r24, r1
    47ba:	16 c0       	rjmp	.+44     	; 0x47e8 <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    47bc:	9e 01       	movw	r18, r28
    47be:	2c 5f       	subi	r18, 0xFC	; 252
    47c0:	3f 4f       	sbci	r19, 0xFF	; 255
    47c2:	43 e0       	ldi	r20, 0x03	; 3
    47c4:	69 e2       	ldi	r22, 0x29	; 41
    47c6:	70 e0       	ldi	r23, 0x00	; 0
    47c8:	ce 01       	movw	r24, r28
    47ca:	96 df       	rcall	.-212    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    47cc:	81 11       	cpse	r24, r1
    47ce:	0e c0       	rjmp	.+28     	; 0x47ec <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    47d0:	9e 01       	movw	r18, r28
    47d2:	2d 5f       	subi	r18, 0xFD	; 253
    47d4:	3f 4f       	sbci	r19, 0xFF	; 255
    47d6:	42 e0       	ldi	r20, 0x02	; 2
    47d8:	69 e2       	ldi	r22, 0x29	; 41
    47da:	70 e0       	ldi	r23, 0x00	; 0
    47dc:	ce 01       	movw	r24, r28
    47de:	8c df       	rcall	.-232    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    47e0:	88 23       	and	r24, r24
    47e2:	29 f0       	breq	.+10     	; 0x47ee <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    47e4:	14 e3       	ldi	r17, 0x34	; 52
    47e6:	03 c0       	rjmp	.+6      	; 0x47ee <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    47e8:	16 e3       	ldi	r17, 0x36	; 54
    47ea:	01 c0       	rjmp	.+2      	; 0x47ee <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    47ec:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    47ee:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    47f0:	5e 9a       	sbi	0x0b, 6	; 11
    47f2:	82 e0       	ldi	r24, 0x02	; 2
    47f4:	8a 95       	dec	r24
    47f6:	f1 f7       	brne	.-4      	; 0x47f4 <_ZN9Interface6TasterEv+0xb0>
    47f8:	00 c0       	rjmp	.+0      	; 0x47fa <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    47fa:	9e 01       	movw	r18, r28
    47fc:	28 5f       	subi	r18, 0xF8	; 248
    47fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4800:	44 e0       	ldi	r20, 0x04	; 4
    4802:	69 e2       	ldi	r22, 0x29	; 41
    4804:	70 e0       	ldi	r23, 0x00	; 0
    4806:	ce 01       	movw	r24, r28
    4808:	77 df       	rcall	.-274    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    480a:	81 11       	cpse	r24, r1
    480c:	16 c0       	rjmp	.+44     	; 0x483a <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    480e:	9e 01       	movw	r18, r28
    4810:	29 5f       	subi	r18, 0xF9	; 249
    4812:	3f 4f       	sbci	r19, 0xFF	; 255
    4814:	43 e0       	ldi	r20, 0x03	; 3
    4816:	69 e2       	ldi	r22, 0x29	; 41
    4818:	70 e0       	ldi	r23, 0x00	; 0
    481a:	ce 01       	movw	r24, r28
    481c:	6d df       	rcall	.-294    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    481e:	81 11       	cpse	r24, r1
    4820:	0e c0       	rjmp	.+28     	; 0x483e <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    4822:	9e 01       	movw	r18, r28
    4824:	2a 5f       	subi	r18, 0xFA	; 250
    4826:	3f 4f       	sbci	r19, 0xFF	; 255
    4828:	42 e0       	ldi	r20, 0x02	; 2
    482a:	69 e2       	ldi	r22, 0x29	; 41
    482c:	70 e0       	ldi	r23, 0x00	; 0
    482e:	ce 01       	movw	r24, r28
    4830:	63 df       	rcall	.-314    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    4832:	88 23       	and	r24, r24
    4834:	29 f0       	breq	.+10     	; 0x4840 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    4836:	17 e3       	ldi	r17, 0x37	; 55
    4838:	03 c0       	rjmp	.+6      	; 0x4840 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    483a:	19 e3       	ldi	r17, 0x39	; 57
    483c:	01 c0       	rjmp	.+2      	; 0x4840 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    483e:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    4840:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    4842:	5d 9a       	sbi	0x0b, 5	; 11
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	8a 95       	dec	r24
    4848:	f1 f7       	brne	.-4      	; 0x4846 <_ZN9Interface6TasterEv+0x102>
    484a:	00 c0       	rjmp	.+0      	; 0x484c <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    484c:	9e 01       	movw	r18, r28
    484e:	25 5f       	subi	r18, 0xF5	; 245
    4850:	3f 4f       	sbci	r19, 0xFF	; 255
    4852:	44 e0       	ldi	r20, 0x04	; 4
    4854:	69 e2       	ldi	r22, 0x29	; 41
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	ce 01       	movw	r24, r28
    485a:	4e df       	rcall	.-356    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    485c:	81 11       	cpse	r24, r1
    485e:	16 c0       	rjmp	.+44     	; 0x488c <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    4860:	9e 01       	movw	r18, r28
    4862:	26 5f       	subi	r18, 0xF6	; 246
    4864:	3f 4f       	sbci	r19, 0xFF	; 255
    4866:	43 e0       	ldi	r20, 0x03	; 3
    4868:	69 e2       	ldi	r22, 0x29	; 41
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	ce 01       	movw	r24, r28
    486e:	44 df       	rcall	.-376    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    4870:	81 11       	cpse	r24, r1
    4872:	0e c0       	rjmp	.+28     	; 0x4890 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    4874:	9e 01       	movw	r18, r28
    4876:	27 5f       	subi	r18, 0xF7	; 247
    4878:	3f 4f       	sbci	r19, 0xFF	; 255
    487a:	42 e0       	ldi	r20, 0x02	; 2
    487c:	69 e2       	ldi	r22, 0x29	; 41
    487e:	70 e0       	ldi	r23, 0x00	; 0
    4880:	ce 01       	movw	r24, r28
    4882:	3a df       	rcall	.-396    	; 0x46f8 <_ZN9Interface7paradebEPVhhPh>
    4884:	88 23       	and	r24, r24
    4886:	29 f0       	breq	.+10     	; 0x4892 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    4888:	1a e2       	ldi	r17, 0x2A	; 42
    488a:	03 c0       	rjmp	.+6      	; 0x4892 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    488c:	13 e2       	ldi	r17, 0x23	; 35
    488e:	01 c0       	rjmp	.+2      	; 0x4892 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    4890:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    4892:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    4894:	81 2f       	mov	r24, r17
    4896:	df 91       	pop	r29
    4898:	cf 91       	pop	r28
    489a:	1f 91       	pop	r17
    489c:	08 95       	ret

0000489e <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    489e:	52 df       	rcall	.-348    	; 0x4744 <_ZN9Interface6TasterEv>
    48a0:	48 2f       	mov	r20, r24
    48a2:	50 e0       	ldi	r21, 0x00	; 0
    48a4:	fa 01       	movw	r30, r20
    48a6:	b3 97       	sbiw	r30, 0x23	; 35
    48a8:	e7 31       	cpi	r30, 0x17	; 23
    48aa:	f1 05       	cpc	r31, r1
    48ac:	c0 f4       	brcc	.+48     	; 0x48de <_ZN9Interface7unifiedEv+0x40>
    48ae:	ec 56       	subi	r30, 0x6C	; 108
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	0c 94 15 46 	jmp	0x8c2a	; 0x8c2a <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    48b6:	85 e7       	ldi	r24, 0x75	; 117
    48b8:	08 95       	ret
		break;
	case '3':
		return 'A';
    48ba:	81 e4       	ldi	r24, 0x41	; 65
    48bc:	08 95       	ret
		break;
	case '4':
		return 'l';
    48be:	8c e6       	ldi	r24, 0x6C	; 108
    48c0:	08 95       	ret
		break;
	case '5':
		return 'o';
    48c2:	8f e6       	ldi	r24, 0x6F	; 111
    48c4:	08 95       	ret
		break;
	case '6':
		return 'r';
    48c6:	82 e7       	ldi	r24, 0x72	; 114
    48c8:	08 95       	ret
		break;
	case '7':
		return 'Y';
    48ca:	89 e5       	ldi	r24, 0x59	; 89
    48cc:	08 95       	ret
		break;
	case '8':
		return 'd';
    48ce:	84 e6       	ldi	r24, 0x64	; 100
    48d0:	08 95       	ret
		break;
	case '9':
		return 'X';
    48d2:	88 e5       	ldi	r24, 0x58	; 88
    48d4:	08 95       	ret
		break;
	case '*':
		return 'e';
    48d6:	85 e6       	ldi	r24, 0x65	; 101
    48d8:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    48da:	8d e6       	ldi	r24, 0x6D	; 109
    48dc:	08 95       	ret
		break;
	default:
		return ' ';
    48de:	80 e2       	ldi	r24, 0x20	; 32
    48e0:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    48e2:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    48e4:	08 95       	ret

000048e6 <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    48e6:	cf 93       	push	r28
    48e8:	df 93       	push	r29
    48ea:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    48ec:	ce 01       	movw	r24, r28
    48ee:	2a df       	rcall	.-428    	; 0x4744 <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    48f0:	80 53       	subi	r24, 0x30	; 48
    48f2:	8a 30       	cpi	r24, 0x0A	; 10
    48f4:	d8 f7       	brcc	.-10     	; 0x48ec <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	08 95       	ret

000048fc <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    48fc:	46 96       	adiw	r24, 0x16	; 22
    48fe:	be ce       	rjmp	.-644    	; 0x467c <_ZN3I2CD1Ev>
    4900:	08 95       	ret

00004902 <_ZN7LSM303D14LSM303_commandEhh>:
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	06 2f       	mov	r16, r22
    490c:	14 2f       	mov	r17, r20
    490e:	ec 01       	movw	r28, r24
    4910:	66 96       	adiw	r28, 0x16	; 22
    4912:	ce 01       	movw	r24, r28
    4914:	b4 de       	rcall	.-664    	; 0x467e <_ZN3I2C9twi_startEv>
    4916:	6a e3       	ldi	r22, 0x3A	; 58
    4918:	ce 01       	movw	r24, r28
    491a:	b9 de       	rcall	.-654    	; 0x468e <_ZN3I2C9twi_writeEh>
    491c:	60 2f       	mov	r22, r16
    491e:	ce 01       	movw	r24, r28
    4920:	b6 de       	rcall	.-660    	; 0x468e <_ZN3I2C9twi_writeEh>
    4922:	61 2f       	mov	r22, r17
    4924:	ce 01       	movw	r24, r28
    4926:	b3 de       	rcall	.-666    	; 0x468e <_ZN3I2C9twi_writeEh>
    4928:	ce 01       	movw	r24, r28
    492a:	ad de       	rcall	.-678    	; 0x4686 <_ZN3I2C8twi_stopEv>
    492c:	df 91       	pop	r29
    492e:	cf 91       	pop	r28
    4930:	1f 91       	pop	r17
    4932:	0f 91       	pop	r16
    4934:	08 95       	ret

00004936 <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    4936:	40 e0       	ldi	r20, 0x00	; 0
    4938:	6e e2       	ldi	r22, 0x2E	; 46
    493a:	e3 cf       	rjmp	.-58     	; 0x4902 <_ZN7LSM303D14LSM303_commandEhh>
    493c:	08 95       	ret

0000493e <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    4944:	47 e4       	ldi	r20, 0x47	; 71
    4946:	60 e2       	ldi	r22, 0x20	; 32
    4948:	dc df       	rcall	.-72     	; 0x4902 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    494a:	40 e0       	ldi	r20, 0x00	; 0
    494c:	61 e2       	ldi	r22, 0x21	; 33
    494e:	ce 01       	movw	r24, r28
    4950:	d8 df       	rcall	.-80     	; 0x4902 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    4952:	40 e8       	ldi	r20, 0x80	; 128
    4954:	64 e2       	ldi	r22, 0x24	; 36
    4956:	ce 01       	movw	r24, r28
    4958:	d4 df       	rcall	.-88     	; 0x4902 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    495a:	ce 01       	movw	r24, r28
    495c:	ec df       	rcall	.-40     	; 0x4936 <_ZN7LSM303D13ACCBypassmodeEv>
}
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	08 95       	ret

00004964 <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	ec 01       	movw	r28, r24
    496a:	46 96       	adiw	r24, 0x16	; 22
    496c:	83 de       	rcall	.-762    	; 0x4674 <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    496e:	1f 82       	std	Y+7, r1	; 0x07
    4970:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    4972:	18 86       	std	Y+8, r1	; 0x08
    4974:	19 86       	std	Y+9, r1	; 0x09
    4976:	1a 86       	std	Y+10, r1	; 0x0a
    4978:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    497a:	1c 86       	std	Y+12, r1	; 0x0c
    497c:	1d 86       	std	Y+13, r1	; 0x0d
    497e:	1e 86       	std	Y+14, r1	; 0x0e
    4980:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    4982:	19 8a       	std	Y+17, r1	; 0x11
    4984:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    4986:	1a 8a       	std	Y+18, r1	; 0x12
    4988:	1b 8a       	std	Y+19, r1	; 0x13
    498a:	1c 8a       	std	Y+20, r1	; 0x14
    498c:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    498e:	de 01       	movw	r26, r28
    4990:	a1 52       	subi	r26, 0x21	; 33
    4992:	bf 4f       	sbci	r27, 0xFF	; 255
    4994:	1d 92       	st	X+, r1
    4996:	1d 92       	st	X+, r1
    4998:	1d 92       	st	X+, r1
    499a:	1c 92       	st	X, r1
    499c:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    499e:	fe 01       	movw	r30, r28
    49a0:	ed 51       	subi	r30, 0x1D	; 29
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	10 82       	st	Z, r1
    49a6:	11 82       	std	Z+1, r1	; 0x01
    49a8:	12 82       	std	Z+2, r1	; 0x02
    49aa:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    49ac:	34 96       	adiw	r30, 0x04	; 4
    49ae:	8b e1       	ldi	r24, 0x1B	; 27
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	91 83       	std	Z+1, r25	; 0x01
    49b4:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    49b6:	19 82       	std	Y+1, r1	; 0x01
    49b8:	18 82       	st	Y, r1
    49ba:	1b 82       	std	Y+3, r1	; 0x03
    49bc:	1a 82       	std	Y+2, r1	; 0x02
    49be:	1d 82       	std	Y+5, r1	; 0x05
    49c0:	1c 82       	std	Y+4, r1	; 0x04
    49c2:	e0 5d       	subi	r30, 0xD0	; 208
    49c4:	f1 09       	sbc	r31, r1
    49c6:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    49c8:	11 92       	st	Z+, r1
    49ca:	11 92       	st	Z+, r1
    49cc:	11 92       	st	Z+, r1
    49ce:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    49d0:	e2 17       	cp	r30, r18
    49d2:	f3 07       	cpc	r31, r19
    49d4:	c9 f7       	brne	.-14     	; 0x49c8 <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    49d6:	ce 01       	movw	r24, r28
    49d8:	b2 df       	rcall	.-156    	; 0x493e <_ZN7LSM303D9acce_initEv>
} //LSM303D
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	08 95       	ret

000049e0 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	08 95       	ret

000049e4 <_ZN3uhr11tastendruckEPh>:
    49e4:	fc 01       	movw	r30, r24
    49e6:	db 01       	movw	r26, r22
    49e8:	9c 91       	ld	r25, X
    49ea:	95 36       	cpi	r25, 0x65	; 101
    49ec:	39 f4       	brne	.+14     	; 0x49fc <_ZN3uhr11tastendruckEPh+0x18>
    49ee:	81 a5       	ldd	r24, Z+41	; 0x29
    49f0:	81 30       	cpi	r24, 0x01	; 1
    49f2:	11 f4       	brne	.+4      	; 0x49f8 <_ZN3uhr11tastendruckEPh+0x14>
    49f4:	11 a6       	std	Z+41, r1	; 0x29
    49f6:	02 c0       	rjmp	.+4      	; 0x49fc <_ZN3uhr11tastendruckEPh+0x18>
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	81 a7       	std	Z+41, r24	; 0x29
    49fc:	80 e0       	ldi	r24, 0x00	; 0
    49fe:	08 95       	ret

00004a00 <_ZN13einstellungen11tastendruckEPh>:
    4a00:	80 e0       	ldi	r24, 0x00	; 0
    4a02:	08 95       	ret

00004a04 <_ZN5menue11tastendruckEPh>:
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	08 95       	ret

00004a08 <_ZN9offscreen4drawEv>:
    4a08:	cf 93       	push	r28
    4a0a:	df 93       	push	r29
    4a0c:	ec 01       	movw	r28, r24
    4a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a10:	98 8d       	ldd	r25, Y+24	; 0x18
    4a12:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
    4a16:	8f 89       	ldd	r24, Y+23	; 0x17
    4a18:	98 8d       	ldd	r25, Y+24	; 0x18
    4a1a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	08 95       	ret

00004a24 <_ZN9wilkommen4drawEv>:
    4a24:	ef 92       	push	r14
    4a26:	ff 92       	push	r15
    4a28:	0f 93       	push	r16
    4a2a:	1f 93       	push	r17
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	ec 01       	movw	r28, r24
    4a32:	8f 89       	ldd	r24, Y+23	; 0x17
    4a34:	98 8d       	ldd	r25, Y+24	; 0x18
    4a36:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
    4a3a:	7e 01       	movw	r14, r28
    4a3c:	22 e0       	ldi	r18, 0x02	; 2
    4a3e:	e2 0e       	add	r14, r18
    4a40:	f1 1c       	adc	r15, r1
    4a42:	8f e0       	ldi	r24, 0x0F	; 15
    4a44:	e6 e9       	ldi	r30, 0x96	; 150
    4a46:	f1 e0       	ldi	r31, 0x01	; 1
    4a48:	d7 01       	movw	r26, r14
    4a4a:	01 90       	ld	r0, Z+
    4a4c:	0d 92       	st	X+, r0
    4a4e:	8a 95       	dec	r24
    4a50:	e1 f7       	brne	.-8      	; 0x4a4a <_ZN9wilkommen4drawEv+0x26>
    4a52:	8e e0       	ldi	r24, 0x0E	; 14
    4a54:	8e 8b       	std	Y+22, r24	; 0x16
    4a56:	00 e0       	ldi	r16, 0x00	; 0
    4a58:	10 e0       	ldi	r17, 0x00	; 0
    4a5a:	fe 01       	movw	r30, r28
    4a5c:	e1 0f       	add	r30, r17
    4a5e:	f1 1d       	adc	r31, r1
    4a60:	20 e0       	ldi	r18, 0x00	; 0
    4a62:	40 2f       	mov	r20, r16
    4a64:	62 81       	ldd	r22, Z+2	; 0x02
    4a66:	8f 89       	ldd	r24, Y+23	; 0x17
    4a68:	98 8d       	ldd	r25, Y+24	; 0x18
    4a6a:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4a6e:	1f 5f       	subi	r17, 0xFF	; 255
    4a70:	0a 5f       	subi	r16, 0xFA	; 250
    4a72:	8e 89       	ldd	r24, Y+22	; 0x16
    4a74:	18 17       	cp	r17, r24
    4a76:	88 f3       	brcs	.-30     	; 0x4a5a <_ZN9wilkommen4drawEv+0x36>
    4a78:	8f e0       	ldi	r24, 0x0F	; 15
    4a7a:	e5 ea       	ldi	r30, 0xA5	; 165
    4a7c:	f1 e0       	ldi	r31, 0x01	; 1
    4a7e:	d7 01       	movw	r26, r14
    4a80:	01 90       	ld	r0, Z+
    4a82:	0d 92       	st	X+, r0
    4a84:	8a 95       	dec	r24
    4a86:	e1 f7       	brne	.-8      	; 0x4a80 <_ZN9wilkommen4drawEv+0x5c>
    4a88:	8e e0       	ldi	r24, 0x0E	; 14
    4a8a:	8e 8b       	std	Y+22, r24	; 0x16
    4a8c:	00 e0       	ldi	r16, 0x00	; 0
    4a8e:	10 e0       	ldi	r17, 0x00	; 0
    4a90:	fe 01       	movw	r30, r28
    4a92:	e1 0f       	add	r30, r17
    4a94:	f1 1d       	adc	r31, r1
    4a96:	28 e0       	ldi	r18, 0x08	; 8
    4a98:	40 2f       	mov	r20, r16
    4a9a:	62 81       	ldd	r22, Z+2	; 0x02
    4a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa0:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4aa4:	1f 5f       	subi	r17, 0xFF	; 255
    4aa6:	0a 5f       	subi	r16, 0xFA	; 250
    4aa8:	8e 89       	ldd	r24, Y+22	; 0x16
    4aaa:	18 17       	cp	r17, r24
    4aac:	88 f3       	brcs	.-30     	; 0x4a90 <_ZN9wilkommen4drawEv+0x6c>
    4aae:	80 e4       	ldi	r24, 0x40	; 64
    4ab0:	8f 93       	push	r24
    4ab2:	81 e4       	ldi	r24, 0x41	; 65
    4ab4:	8f 93       	push	r24
    4ab6:	8b ee       	ldi	r24, 0xEB	; 235
    4ab8:	8f 93       	push	r24
    4aba:	85 e8       	ldi	r24, 0x85	; 133
    4abc:	8f 93       	push	r24
    4abe:	84 eb       	ldi	r24, 0xB4	; 180
    4ac0:	91 e0       	ldi	r25, 0x01	; 1
    4ac2:	9f 93       	push	r25
    4ac4:	8f 93       	push	r24
    4ac6:	ff 92       	push	r15
    4ac8:	ef 92       	push	r14
    4aca:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    4ace:	8e 8b       	std	Y+22, r24	; 0x16
    4ad0:	2d b7       	in	r18, 0x3d	; 61
    4ad2:	3e b7       	in	r19, 0x3e	; 62
    4ad4:	28 5f       	subi	r18, 0xF8	; 248
    4ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	f8 94       	cli
    4adc:	3e bf       	out	0x3e, r19	; 62
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	2d bf       	out	0x3d, r18	; 61
    4ae2:	88 23       	and	r24, r24
    4ae4:	89 f0       	breq	.+34     	; 0x4b08 <_ZN9wilkommen4drawEv+0xe4>
    4ae6:	00 e0       	ldi	r16, 0x00	; 0
    4ae8:	10 e0       	ldi	r17, 0x00	; 0
    4aea:	fe 01       	movw	r30, r28
    4aec:	e1 0f       	add	r30, r17
    4aee:	f1 1d       	adc	r31, r1
    4af0:	20 e2       	ldi	r18, 0x20	; 32
    4af2:	40 2f       	mov	r20, r16
    4af4:	62 81       	ldd	r22, Z+2	; 0x02
    4af6:	8f 89       	ldd	r24, Y+23	; 0x17
    4af8:	98 8d       	ldd	r25, Y+24	; 0x18
    4afa:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4afe:	1f 5f       	subi	r17, 0xFF	; 255
    4b00:	0a 5f       	subi	r16, 0xFA	; 250
    4b02:	8e 89       	ldd	r24, Y+22	; 0x16
    4b04:	18 17       	cp	r17, r24
    4b06:	88 f3       	brcs	.-30     	; 0x4aea <_ZN9wilkommen4drawEv+0xc6>
    4b08:	8f 89       	ldd	r24, Y+23	; 0x17
    4b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b0c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    4b10:	df 91       	pop	r29
    4b12:	cf 91       	pop	r28
    4b14:	1f 91       	pop	r17
    4b16:	0f 91       	pop	r16
    4b18:	ff 90       	pop	r15
    4b1a:	ef 90       	pop	r14
    4b1c:	08 95       	ret

00004b1e <_Z8ADC_Readh>:
    4b1e:	ec e7       	ldi	r30, 0x7C	; 124
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	90 81       	ld	r25, Z
    4b24:	8f 71       	andi	r24, 0x1F	; 31
    4b26:	90 7e       	andi	r25, 0xE0	; 224
    4b28:	89 2b       	or	r24, r25
    4b2a:	80 83       	st	Z, r24
    4b2c:	ea e7       	ldi	r30, 0x7A	; 122
    4b2e:	f0 e0       	ldi	r31, 0x00	; 0
    4b30:	80 81       	ld	r24, Z
    4b32:	80 64       	ori	r24, 0x40	; 64
    4b34:	80 83       	st	Z, r24
    4b36:	80 81       	ld	r24, Z
    4b38:	86 fd       	sbrc	r24, 6
    4b3a:	fd cf       	rjmp	.-6      	; 0x4b36 <_Z8ADC_Readh+0x18>
    4b3c:	80 91 78 00 	lds	r24, 0x0078
    4b40:	90 91 79 00 	lds	r25, 0x0079
    4b44:	08 95       	ret

00004b46 <_Z14Batteriestatusv>:

#ifndef BATMIN
#define BATMIN 3.0
#endif

int8_t Batteriestatus(){
    4b46:	cf 92       	push	r12
    4b48:	df 92       	push	r13
    4b4a:	ef 92       	push	r14
    4b4c:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
    4b50:	e6 df       	rcall	.-52     	; 0x4b1e <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    4b52:	bc 01       	movw	r22, r24
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__floatunsisf>
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	30 ec       	ldi	r19, 0xC0	; 192
    4b60:	4f e7       	ldi	r20, 0x7F	; 127
    4b62:	54 e4       	ldi	r21, 0x44	; 68
    4b64:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    4b68:	2c e5       	ldi	r18, 0x5C	; 92
    4b6a:	3f e8       	ldi	r19, 0x8F	; 143
    4b6c:	42 e5       	ldi	r20, 0x52	; 82
    4b6e:	50 e4       	ldi	r21, 0x40	; 64
    4b70:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    4b74:	2d e0       	ldi	r18, 0x0D	; 13
    4b76:	31 e7       	ldi	r19, 0x71	; 113
    4b78:	40 e0       	ldi	r20, 0x00	; 0
    4b7a:	50 e4       	ldi	r21, 0x40	; 64
    4b7c:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    4b80:	60 93 ed 08 	sts	0x08ED, r22
    4b84:	70 93 ee 08 	sts	0x08EE, r23
    4b88:	80 93 ef 08 	sts	0x08EF, r24
    4b8c:	90 93 f0 08 	sts	0x08F0, r25
	float stat = ((batterie-BATMIN)/(4.2-BATMIN)*100);
    4b90:	26 e6       	ldi	r18, 0x66	; 102
    4b92:	36 e6       	ldi	r19, 0x66	; 102
    4b94:	46 e6       	ldi	r20, 0x66	; 102
    4b96:	50 e4       	ldi	r21, 0x40	; 64
    4b98:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <__subsf3>
    4b9c:	28 e9       	ldi	r18, 0x98	; 152
    4b9e:	39 e9       	ldi	r19, 0x99	; 153
    4ba0:	49 e1       	ldi	r20, 0x19	; 25
    4ba2:	5f e3       	ldi	r21, 0x3F	; 63
    4ba4:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	30 e0       	ldi	r19, 0x00	; 0
    4bac:	48 ec       	ldi	r20, 0xC8	; 200
    4bae:	52 e4       	ldi	r21, 0x42	; 66
    4bb0:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    4bb4:	6b 01       	movw	r12, r22
    4bb6:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	40 e2       	ldi	r20, 0x20	; 32
    4bbe:	51 e4       	ldi	r21, 0x41	; 65
    4bc0:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    4bc4:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
	if (temp%10>=5)
    4bc8:	8d ec       	ldi	r24, 0xCD	; 205
    4bca:	68 9f       	mul	r22, r24
    4bcc:	81 2d       	mov	r24, r1
    4bce:	11 24       	eor	r1, r1
    4bd0:	86 95       	lsr	r24
    4bd2:	86 95       	lsr	r24
    4bd4:	86 95       	lsr	r24
    4bd6:	88 0f       	add	r24, r24
    4bd8:	28 2f       	mov	r18, r24
    4bda:	22 0f       	add	r18, r18
    4bdc:	22 0f       	add	r18, r18
    4bde:	82 0f       	add	r24, r18
    4be0:	96 2f       	mov	r25, r22
    4be2:	98 1b       	sub	r25, r24
    4be4:	95 30       	cpi	r25, 0x05	; 5
    4be6:	70 f0       	brcs	.+28     	; 0x4c04 <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    4be8:	c7 01       	movw	r24, r14
    4bea:	b6 01       	movw	r22, r12
    4bec:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    4bf0:	70 e0       	ldi	r23, 0x00	; 0
    4bf2:	6f 5f       	subi	r22, 0xFF	; 255
    4bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf6:	07 2e       	mov	r0, r23
    4bf8:	00 0c       	add	r0, r0
    4bfa:	88 0b       	sbc	r24, r24
    4bfc:	99 0b       	sbc	r25, r25
    4bfe:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    4c02:	09 c0       	rjmp	.+18     	; 0x4c16 <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    4c04:	c7 01       	movw	r24, r14
    4c06:	b6 01       	movw	r22, r12
    4c08:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    4c0c:	70 e0       	ldi	r23, 0x00	; 0
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__floatunsisf>
	}
	return stat;
    4c16:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <__fixsfsi>
    4c1a:	86 2f       	mov	r24, r22
}
    4c1c:	ff 90       	pop	r15
    4c1e:	ef 90       	pop	r14
    4c20:	df 90       	pop	r13
    4c22:	cf 90       	pop	r12
    4c24:	08 95       	ret

00004c26 <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    4c26:	cf 92       	push	r12
    4c28:	df 92       	push	r13
    4c2a:	ef 92       	push	r14
    4c2c:	ff 92       	push	r15
    4c2e:	0f 93       	push	r16
    4c30:	1f 93       	push	r17
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4c38:	8f 89       	ldd	r24, Y+23	; 0x17
    4c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4c3c:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
    4c40:	10 e0       	ldi	r17, 0x00	; 0
    4c42:	e1 2c       	mov	r14, r1
    4c44:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    4c46:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c48:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c4a:	ee 0d       	add	r30, r14
    4c4c:	ff 1d       	adc	r31, r15
    4c4e:	20 e0       	ldi	r18, 0x00	; 0
    4c50:	41 2f       	mov	r20, r17
    4c52:	60 81       	ld	r22, Z
    4c54:	8f 89       	ldd	r24, Y+23	; 0x17
    4c56:	98 8d       	ldd	r25, Y+24	; 0x18
    4c58:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4c5c:	8f ef       	ldi	r24, 0xFF	; 255
    4c5e:	e8 1a       	sub	r14, r24
    4c60:	f8 0a       	sbc	r15, r24
    4c62:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    4c64:	10 33       	cpi	r17, 0x30	; 48
    4c66:	79 f7       	brne	.-34     	; 0x4c46 <_ZN5menue4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    4c68:	6e df       	rcall	.-292    	; 0x4b46 <_Z14Batteriestatusv>
    4c6a:	7e 01       	movw	r14, r28
    4c6c:	92 e0       	ldi	r25, 0x02	; 2
    4c6e:	e9 0e       	add	r14, r25
    4c70:	f1 1c       	adc	r15, r1
    4c72:	28 2f       	mov	r18, r24
    4c74:	08 2e       	mov	r0, r24
    4c76:	00 0c       	add	r0, r0
    4c78:	33 0b       	sbc	r19, r19
    4c7a:	3f 93       	push	r19
    4c7c:	8f 93       	push	r24
    4c7e:	82 ec       	ldi	r24, 0xC2	; 194
    4c80:	91 e0       	ldi	r25, 0x01	; 1
    4c82:	9f 93       	push	r25
    4c84:	8f 93       	push	r24
    4c86:	ff 92       	push	r15
    4c88:	ef 92       	push	r14
    4c8a:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    4c8e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4c90:	15 e1       	ldi	r17, 0x15	; 21
    4c92:	18 1b       	sub	r17, r24
    4c94:	0f 90       	pop	r0
    4c96:	0f 90       	pop	r0
    4c98:	0f 90       	pop	r0
    4c9a:	0f 90       	pop	r0
    4c9c:	0f 90       	pop	r0
    4c9e:	0f 90       	pop	r0
    4ca0:	15 31       	cpi	r17, 0x15	; 21
    4ca2:	08 f0       	brcs	.+2      	; 0x4ca6 <_ZN5menue4drawEv+0x80>
    4ca4:	bf c0       	rjmp	.+382    	; 0x4e24 <_ZN5menue4drawEv+0x1fe>
    4ca6:	01 2f       	mov	r16, r17
    4ca8:	00 0f       	add	r16, r16
    4caa:	01 0f       	add	r16, r17
    4cac:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4cae:	8e 89       	ldd	r24, Y+22	; 0x16
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	e1 0f       	add	r30, r17
    4cb4:	f1 1d       	adc	r31, r1
    4cb6:	e8 0f       	add	r30, r24
    4cb8:	f1 1d       	adc	r31, r1
    4cba:	73 97       	sbiw	r30, 0x13	; 19
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	40 2f       	mov	r20, r16
    4cc0:	60 81       	ld	r22, Z
    4cc2:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc6:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4cca:	1f 5f       	subi	r17, 0xFF	; 255
    4ccc:	0a 5f       	subi	r16, 0xFA	; 250
    4cce:	15 31       	cpi	r17, 0x15	; 21
    4cd0:	71 f7       	brne	.-36     	; 0x4cae <_ZN5menue4drawEv+0x88>
    4cd2:	a8 c0       	rjmp	.+336    	; 0x4e24 <_ZN5menue4drawEv+0x1fe>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    4cd4:	e9 8d       	ldd	r30, Y+25	; 0x19
    4cd6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4cd8:	ec 0d       	add	r30, r12
    4cda:	fd 1d       	adc	r31, r13
    4cdc:	28 e3       	ldi	r18, 0x38	; 56
    4cde:	41 2f       	mov	r20, r17
    4ce0:	60 85       	ldd	r22, Z+8	; 0x08
    4ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ce6:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4cea:	8f ef       	ldi	r24, 0xFF	; 255
    4cec:	c8 1a       	sub	r12, r24
    4cee:	d8 0a       	sbc	r13, r24
    4cf0:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    4cf2:	10 38       	cpi	r17, 0x80	; 128
    4cf4:	79 f7       	brne	.-34     	; 0x4cd4 <_ZN5menue4drawEv+0xae>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    4cf6:	85 e5       	ldi	r24, 0x55	; 85
    4cf8:	98 e6       	ldi	r25, 0x68	; 104
    4cfa:	a2 e7       	ldi	r26, 0x72	; 114
    4cfc:	b0 e0       	ldi	r27, 0x00	; 0
    4cfe:	8a 83       	std	Y+2, r24	; 0x02
    4d00:	9b 83       	std	Y+3, r25	; 0x03
    4d02:	ac 83       	std	Y+4, r26	; 0x04
    4d04:	bd 83       	std	Y+5, r27	; 0x05
    4d06:	83 e0       	ldi	r24, 0x03	; 3
    4d08:	8e 8b       	std	Y+22, r24	; 0x16
    4d0a:	0c e0       	ldi	r16, 0x0C	; 12
    4d0c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e1 0f       	add	r30, r17
    4d12:	f1 1d       	adc	r31, r1
    4d14:	20 e1       	ldi	r18, 0x10	; 16
    4d16:	40 2f       	mov	r20, r16
    4d18:	62 81       	ldd	r22, Z+2	; 0x02
    4d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d1e:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4d22:	1f 5f       	subi	r17, 0xFF	; 255
    4d24:	0a 5f       	subi	r16, 0xFA	; 250
    4d26:	8e 89       	ldd	r24, Y+22	; 0x16
    4d28:	18 17       	cp	r17, r24
    4d2a:	88 f3       	brcs	.-30     	; 0x4d0e <_ZN5menue4drawEv+0xe8>
		buffersize=sprintf(buffer,"Tacho");
    4d2c:	86 e0       	ldi	r24, 0x06	; 6
    4d2e:	ec ec       	ldi	r30, 0xCC	; 204
    4d30:	f1 e0       	ldi	r31, 0x01	; 1
    4d32:	d7 01       	movw	r26, r14
    4d34:	01 90       	ld	r0, Z+
    4d36:	0d 92       	st	X+, r0
    4d38:	8a 95       	dec	r24
    4d3a:	e1 f7       	brne	.-8      	; 0x4d34 <_ZN5menue4drawEv+0x10e>
    4d3c:	85 e0       	ldi	r24, 0x05	; 5
    4d3e:	8e 8b       	std	Y+22, r24	; 0x16
    4d40:	0c e0       	ldi	r16, 0x0C	; 12
    4d42:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    4d44:	fe 01       	movw	r30, r28
    4d46:	e1 0f       	add	r30, r17
    4d48:	f1 1d       	adc	r31, r1
    4d4a:	28 e1       	ldi	r18, 0x18	; 24
    4d4c:	40 2f       	mov	r20, r16
    4d4e:	62 81       	ldd	r22, Z+2	; 0x02
    4d50:	8f 89       	ldd	r24, Y+23	; 0x17
    4d52:	98 8d       	ldd	r25, Y+24	; 0x18
    4d54:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4d58:	1f 5f       	subi	r17, 0xFF	; 255
    4d5a:	0a 5f       	subi	r16, 0xFA	; 250
    4d5c:	8e 89       	ldd	r24, Y+22	; 0x16
    4d5e:	18 17       	cp	r17, r24
    4d60:	88 f3       	brcs	.-30     	; 0x4d44 <_ZN5menue4drawEv+0x11e>
		buffersize=sprintf(buffer,"Wandern");
    4d62:	88 e0       	ldi	r24, 0x08	; 8
    4d64:	e2 ed       	ldi	r30, 0xD2	; 210
    4d66:	f1 e0       	ldi	r31, 0x01	; 1
    4d68:	d7 01       	movw	r26, r14
    4d6a:	01 90       	ld	r0, Z+
    4d6c:	0d 92       	st	X+, r0
    4d6e:	8a 95       	dec	r24
    4d70:	e1 f7       	brne	.-8      	; 0x4d6a <_ZN5menue4drawEv+0x144>
    4d72:	87 e0       	ldi	r24, 0x07	; 7
    4d74:	8e 8b       	std	Y+22, r24	; 0x16
    4d76:	0c e0       	ldi	r16, 0x0C	; 12
    4d78:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    4d7a:	fe 01       	movw	r30, r28
    4d7c:	e1 0f       	add	r30, r17
    4d7e:	f1 1d       	adc	r31, r1
    4d80:	20 e2       	ldi	r18, 0x20	; 32
    4d82:	40 2f       	mov	r20, r16
    4d84:	62 81       	ldd	r22, Z+2	; 0x02
    4d86:	8f 89       	ldd	r24, Y+23	; 0x17
    4d88:	98 8d       	ldd	r25, Y+24	; 0x18
    4d8a:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4d8e:	1f 5f       	subi	r17, 0xFF	; 255
    4d90:	0a 5f       	subi	r16, 0xFA	; 250
    4d92:	8e 89       	ldd	r24, Y+22	; 0x16
    4d94:	18 17       	cp	r17, r24
    4d96:	88 f3       	brcs	.-30     	; 0x4d7a <_ZN5menue4drawEv+0x154>
		buffersize=sprintf(buffer,"Einstellungen");
    4d98:	8e e0       	ldi	r24, 0x0E	; 14
    4d9a:	ea ed       	ldi	r30, 0xDA	; 218
    4d9c:	f1 e0       	ldi	r31, 0x01	; 1
    4d9e:	d7 01       	movw	r26, r14
    4da0:	01 90       	ld	r0, Z+
    4da2:	0d 92       	st	X+, r0
    4da4:	8a 95       	dec	r24
    4da6:	e1 f7       	brne	.-8      	; 0x4da0 <_ZN5menue4drawEv+0x17a>
    4da8:	8d e0       	ldi	r24, 0x0D	; 13
    4daa:	8e 8b       	std	Y+22, r24	; 0x16
    4dac:	0c e0       	ldi	r16, 0x0C	; 12
    4dae:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    4db0:	fe 01       	movw	r30, r28
    4db2:	e1 0f       	add	r30, r17
    4db4:	f1 1d       	adc	r31, r1
    4db6:	28 e2       	ldi	r18, 0x28	; 40
    4db8:	40 2f       	mov	r20, r16
    4dba:	62 81       	ldd	r22, Z+2	; 0x02
    4dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    4dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4dc0:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4dc4:	1f 5f       	subi	r17, 0xFF	; 255
    4dc6:	0a 5f       	subi	r16, 0xFA	; 250
    4dc8:	8e 89       	ldd	r24, Y+22	; 0x16
    4dca:	18 17       	cp	r17, r24
    4dcc:	88 f3       	brcs	.-30     	; 0x4db0 <_ZN5menue4drawEv+0x18a>
		buffersize=sprintf(buffer,"Display aus");
    4dce:	8c e0       	ldi	r24, 0x0C	; 12
    4dd0:	e8 ee       	ldi	r30, 0xE8	; 232
    4dd2:	f1 e0       	ldi	r31, 0x01	; 1
    4dd4:	d7 01       	movw	r26, r14
    4dd6:	01 90       	ld	r0, Z+
    4dd8:	0d 92       	st	X+, r0
    4dda:	8a 95       	dec	r24
    4ddc:	e1 f7       	brne	.-8      	; 0x4dd6 <_ZN5menue4drawEv+0x1b0>
    4dde:	8b e0       	ldi	r24, 0x0B	; 11
    4de0:	8e 8b       	std	Y+22, r24	; 0x16
    4de2:	0c e0       	ldi	r16, 0x0C	; 12
    4de4:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    4de6:	fe 01       	movw	r30, r28
    4de8:	e1 0f       	add	r30, r17
    4dea:	f1 1d       	adc	r31, r1
    4dec:	20 e3       	ldi	r18, 0x30	; 48
    4dee:	40 2f       	mov	r20, r16
    4df0:	62 81       	ldd	r22, Z+2	; 0x02
    4df2:	8f 89       	ldd	r24, Y+23	; 0x17
    4df4:	98 8d       	ldd	r25, Y+24	; 0x18
    4df6:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4dfa:	1f 5f       	subi	r17, 0xFF	; 255
    4dfc:	0a 5f       	subi	r16, 0xFA	; 250
    4dfe:	8e 89       	ldd	r24, Y+22	; 0x16
    4e00:	18 17       	cp	r17, r24
    4e02:	88 f3       	brcs	.-30     	; 0x4de6 <_ZN5menue4drawEv+0x1c0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    4e04:	2d a1       	ldd	r18, Y+37	; 0x25
    4e06:	22 0f       	add	r18, r18
    4e08:	22 0f       	add	r18, r18
    4e0a:	22 0f       	add	r18, r18
    4e0c:	20 5f       	subi	r18, 0xF0	; 240
    4e0e:	40 e0       	ldi	r20, 0x00	; 0
    4e10:	6e e3       	ldi	r22, 0x3E	; 62
    4e12:	8f 89       	ldd	r24, Y+23	; 0x17
    4e14:	98 8d       	ldd	r25, Y+24	; 0x18
    4e16:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e1e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    4e22:	04 c0       	rjmp	.+8      	; 0x4e2c <_ZN5menue4drawEv+0x206>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4e24:	10 e5       	ldi	r17, 0x50	; 80
    4e26:	c1 2c       	mov	r12, r1
    4e28:	d1 2c       	mov	r13, r1
    4e2a:	54 cf       	rjmp	.-344    	; 0x4cd4 <_ZN5menue4drawEv+0xae>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    4e2c:	df 91       	pop	r29
    4e2e:	cf 91       	pop	r28
    4e30:	1f 91       	pop	r17
    4e32:	0f 91       	pop	r16
    4e34:	ff 90       	pop	r15
    4e36:	ef 90       	pop	r14
    4e38:	df 90       	pop	r13
    4e3a:	cf 90       	pop	r12
    4e3c:	08 95       	ret

00004e3e <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    4e3e:	af 92       	push	r10
    4e40:	bf 92       	push	r11
    4e42:	cf 92       	push	r12
    4e44:	df 92       	push	r13
    4e46:	ef 92       	push	r14
    4e48:	ff 92       	push	r15
    4e4a:	0f 93       	push	r16
    4e4c:	1f 93       	push	r17
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
    4e52:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4e54:	8f 89       	ldd	r24, Y+23	; 0x17
    4e56:	98 8d       	ldd	r25, Y+24	; 0x18
    4e58:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    4e5c:	74 de       	rcall	.-792    	; 0x4b46 <_Z14Batteriestatusv>
    4e5e:	5e 01       	movw	r10, r28
    4e60:	22 e0       	ldi	r18, 0x02	; 2
    4e62:	a2 0e       	add	r10, r18
    4e64:	b1 1c       	adc	r11, r1
    4e66:	28 2f       	mov	r18, r24
    4e68:	08 2e       	mov	r0, r24
    4e6a:	00 0c       	add	r0, r0
    4e6c:	33 0b       	sbc	r19, r19
    4e6e:	3f 93       	push	r19
    4e70:	8f 93       	push	r24
    4e72:	84 ef       	ldi	r24, 0xF4	; 244
    4e74:	91 e0       	ldi	r25, 0x01	; 1
    4e76:	9f 93       	push	r25
    4e78:	8f 93       	push	r24
    4e7a:	bf 92       	push	r11
    4e7c:	af 92       	push	r10
    4e7e:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    4e82:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4e84:	95 e1       	ldi	r25, 0x15	; 21
    4e86:	09 2f       	mov	r16, r25
    4e88:	08 1b       	sub	r16, r24
    4e8a:	0f 90       	pop	r0
    4e8c:	0f 90       	pop	r0
    4e8e:	0f 90       	pop	r0
    4e90:	0f 90       	pop	r0
    4e92:	0f 90       	pop	r0
    4e94:	0f 90       	pop	r0
    4e96:	05 31       	cpi	r16, 0x15	; 21
    4e98:	08 f0       	brcs	.+2      	; 0x4e9c <_ZN5tacho4drawEv+0x5e>
    4e9a:	d4 c1       	rjmp	.+936    	; 0x5244 <_ZN5tacho4drawEv+0x406>
    4e9c:	e0 2e       	mov	r14, r16
    4e9e:	ee 0c       	add	r14, r14
    4ea0:	e0 0e       	add	r14, r16
    4ea2:	1e 2d       	mov	r17, r14
    4ea4:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4ea6:	8e 89       	ldd	r24, Y+22	; 0x16
    4ea8:	fe 01       	movw	r30, r28
    4eaa:	e0 0f       	add	r30, r16
    4eac:	f1 1d       	adc	r31, r1
    4eae:	e8 0f       	add	r30, r24
    4eb0:	f1 1d       	adc	r31, r1
    4eb2:	73 97       	sbiw	r30, 0x13	; 19
    4eb4:	20 e0       	ldi	r18, 0x00	; 0
    4eb6:	41 2f       	mov	r20, r17
    4eb8:	60 81       	ld	r22, Z
    4eba:	8f 89       	ldd	r24, Y+23	; 0x17
    4ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebe:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4ec2:	0f 5f       	subi	r16, 0xFF	; 255
    4ec4:	1a 5f       	subi	r17, 0xFA	; 250
    4ec6:	05 31       	cpi	r16, 0x15	; 21
    4ec8:	71 f7       	brne	.-36     	; 0x4ea6 <_ZN5tacho4drawEv+0x68>
    4eca:	bc c1       	rjmp	.+888    	; 0x5244 <_ZN5tacho4drawEv+0x406>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    4ecc:	e9 8d       	ldd	r30, Y+25	; 0x19
    4ece:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4ed0:	ec 0d       	add	r30, r12
    4ed2:	fd 1d       	adc	r31, r13
    4ed4:	28 e3       	ldi	r18, 0x38	; 56
    4ed6:	41 2f       	mov	r20, r17
    4ed8:	60 85       	ldd	r22, Z+8	; 0x08
    4eda:	8f 89       	ldd	r24, Y+23	; 0x17
    4edc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ede:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    4ee2:	3f ef       	ldi	r19, 0xFF	; 255
    4ee4:	c3 1a       	sub	r12, r19
    4ee6:	d3 0a       	sbc	r13, r19
    4ee8:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    4eea:	10 38       	cpi	r17, 0x80	; 128
    4eec:	79 f7       	brne	.-34     	; 0x4ecc <_ZN5tacho4drawEv+0x8e>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    4eee:	20 e8       	ldi	r18, 0x80	; 128
    4ef0:	47 e3       	ldi	r20, 0x37	; 55
    4ef2:	60 e0       	ldi	r22, 0x00	; 0
    4ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ef8:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    4efc:	25 e4       	ldi	r18, 0x45	; 69
    4efe:	4f e0       	ldi	r20, 0x0F	; 15
    4f00:	60 e0       	ldi	r22, 0x00	; 0
    4f02:	8f 89       	ldd	r24, Y+23	; 0x17
    4f04:	98 8d       	ldd	r25, Y+24	; 0x18
    4f06:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    4f0a:	2b e3       	ldi	r18, 0x3B	; 59
    4f0c:	47 e0       	ldi	r20, 0x07	; 7
    4f0e:	65 e4       	ldi	r22, 0x45	; 69
    4f10:	8f 89       	ldd	r24, Y+23	; 0x17
    4f12:	98 8d       	ldd	r25, Y+24	; 0x18
    4f14:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    4f18:	20 e1       	ldi	r18, 0x10	; 16
    4f1a:	40 e0       	ldi	r20, 0x00	; 0
    4f1c:	65 e4       	ldi	r22, 0x45	; 69
    4f1e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f20:	98 8d       	ldd	r25, Y+24	; 0x18
    4f22:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    4f26:	21 e4       	ldi	r18, 0x41	; 65
    4f28:	47 e2       	ldi	r20, 0x27	; 39
    4f2a:	6f e3       	ldi	r22, 0x3F	; 63
    4f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f30:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    4f34:	20 e3       	ldi	r18, 0x30	; 48
    4f36:	40 e1       	ldi	r20, 0x10	; 16
    4f38:	6f e3       	ldi	r22, 0x3F	; 63
    4f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f3e:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    4f42:	21 e4       	ldi	r18, 0x41	; 65
    4f44:	48 e1       	ldi	r20, 0x18	; 24
    4f46:	6f e3       	ldi	r22, 0x3F	; 63
    4f48:	8f 89       	ldd	r24, Y+23	; 0x17
    4f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4f4c:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    4f50:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f52:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f54:	60 81       	ld	r22, Z
    4f56:	60 53       	subi	r22, 0x30	; 48
    4f58:	20 e0       	ldi	r18, 0x00	; 0
    4f5a:	40 e0       	ldi	r20, 0x00	; 0
    4f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f60:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    4f64:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f66:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f68:	61 81       	ldd	r22, Z+1	; 0x01
    4f6a:	60 53       	subi	r22, 0x30	; 48
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	40 e1       	ldi	r20, 0x10	; 16
    4f70:	8f 89       	ldd	r24, Y+23	; 0x17
    4f72:	98 8d       	ldd	r25, Y+24	; 0x18
    4f74:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    4f78:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f7a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f7c:	63 81       	ldd	r22, Z+3	; 0x03
    4f7e:	60 53       	subi	r22, 0x30	; 48
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	45 e2       	ldi	r20, 0x25	; 37
    4f84:	8f 89       	ldd	r24, Y+23	; 0x17
    4f86:	98 8d       	ldd	r25, Y+24	; 0x18
    4f88:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    4f8c:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f8e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4f90:	64 81       	ldd	r22, Z+4	; 0x04
    4f92:	60 53       	subi	r22, 0x30	; 48
    4f94:	20 e0       	ldi	r18, 0x00	; 0
    4f96:	45 e3       	ldi	r20, 0x35	; 53
    4f98:	8f 89       	ldd	r24, Y+23	; 0x17
    4f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    4f9c:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    4fa0:	80 91 86 08 	lds	r24, 0x0886
    4fa4:	8f 93       	push	r24
    4fa6:	80 91 85 08 	lds	r24, 0x0885
    4faa:	8f 93       	push	r24
    4fac:	80 91 84 08 	lds	r24, 0x0884
    4fb0:	8f 93       	push	r24
    4fb2:	80 91 83 08 	lds	r24, 0x0883
    4fb6:	8f 93       	push	r24
    4fb8:	8f ef       	ldi	r24, 0xFF	; 255
    4fba:	91 e0       	ldi	r25, 0x01	; 1
    4fbc:	9f 93       	push	r25
    4fbe:	8f 93       	push	r24
    4fc0:	bf 92       	push	r11
    4fc2:	af 92       	push	r10
    4fc4:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    4fc8:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    4fca:	98 e0       	ldi	r25, 0x08	; 8
    4fcc:	09 2f       	mov	r16, r25
    4fce:	08 1b       	sub	r16, r24
    4fd0:	8d b7       	in	r24, 0x3d	; 61
    4fd2:	9e b7       	in	r25, 0x3e	; 62
    4fd4:	08 96       	adiw	r24, 0x08	; 8
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	f8 94       	cli
    4fda:	9e bf       	out	0x3e, r25	; 62
    4fdc:	0f be       	out	0x3f, r0	; 63
    4fde:	8d bf       	out	0x3d, r24	; 61
    4fe0:	08 30       	cpi	r16, 0x08	; 8
    4fe2:	f8 f4       	brcc	.+62     	; 0x5022 <_ZN5tacho4drawEv+0x1e4>
    4fe4:	10 2f       	mov	r17, r16
    4fe6:	12 95       	swap	r17
    4fe8:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    4fea:	8e 89       	ldd	r24, Y+22	; 0x16
    4fec:	fe 01       	movw	r30, r28
    4fee:	e0 0f       	add	r30, r16
    4ff0:	f1 1d       	adc	r31, r1
    4ff2:	e8 0f       	add	r30, r24
    4ff4:	f1 1d       	adc	r31, r1
    4ff6:	36 97       	sbiw	r30, 0x06	; 6
    4ff8:	60 81       	ld	r22, Z
    4ffa:	6e 32       	cpi	r22, 0x2E	; 46
    4ffc:	39 f4       	brne	.+14     	; 0x500c <_ZN5tacho4drawEv+0x1ce>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    4ffe:	20 e2       	ldi	r18, 0x20	; 32
    5000:	41 2f       	mov	r20, r17
    5002:	8f 89       	ldd	r24, Y+23	; 0x17
    5004:	98 8d       	ldd	r25, Y+24	; 0x18
    5006:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    500a:	07 c0       	rjmp	.+14     	; 0x501a <_ZN5tacho4drawEv+0x1dc>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    500c:	60 53       	subi	r22, 0x30	; 48
    500e:	28 e1       	ldi	r18, 0x18	; 24
    5010:	41 2f       	mov	r20, r17
    5012:	8f 89       	ldd	r24, Y+23	; 0x17
    5014:	98 8d       	ldd	r25, Y+24	; 0x18
    5016:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    501a:	0f 5f       	subi	r16, 0xFF	; 255
    501c:	10 5f       	subi	r17, 0xF0	; 240
    501e:	08 30       	cpi	r16, 0x08	; 8
    5020:	21 f7       	brne	.-56     	; 0x4fea <_ZN5tacho4drawEv+0x1ac>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	4a e7       	ldi	r20, 0x7A	; 122
    5028:	54 e4       	ldi	r21, 0x44	; 68
    502a:	60 91 7f 08 	lds	r22, 0x087F
    502e:	70 91 80 08 	lds	r23, 0x0880
    5032:	80 91 81 08 	lds	r24, 0x0881
    5036:	90 91 82 08 	lds	r25, 0x0882
    503a:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    503e:	9f 93       	push	r25
    5040:	8f 93       	push	r24
    5042:	7f 93       	push	r23
    5044:	6f 93       	push	r22
    5046:	85 e0       	ldi	r24, 0x05	; 5
    5048:	92 e0       	ldi	r25, 0x02	; 2
    504a:	9f 93       	push	r25
    504c:	8f 93       	push	r24
    504e:	bf 92       	push	r11
    5050:	af 92       	push	r10
    5052:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    5056:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    5058:	2d b7       	in	r18, 0x3d	; 61
    505a:	3e b7       	in	r19, 0x3e	; 62
    505c:	28 5f       	subi	r18, 0xF8	; 248
    505e:	3f 4f       	sbci	r19, 0xFF	; 255
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	3e bf       	out	0x3e, r19	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	2d bf       	out	0x3d, r18	; 61
    506a:	88 23       	and	r24, r24
    506c:	89 f0       	breq	.+34     	; 0x5090 <_ZN5tacho4drawEv+0x252>
    506e:	16 e4       	ldi	r17, 0x46	; 70
    5070:	f1 2c       	mov	r15, r1
    5072:	fe 01       	movw	r30, r28
    5074:	ef 0d       	add	r30, r15
    5076:	f1 1d       	adc	r31, r1
    5078:	20 e1       	ldi	r18, 0x10	; 16
    507a:	41 2f       	mov	r20, r17
    507c:	62 81       	ldd	r22, Z+2	; 0x02
    507e:	8f 89       	ldd	r24, Y+23	; 0x17
    5080:	98 8d       	ldd	r25, Y+24	; 0x18
    5082:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    5086:	f3 94       	inc	r15
    5088:	1a 5f       	subi	r17, 0xFA	; 250
    508a:	8e 89       	ldd	r24, Y+22	; 0x16
    508c:	f8 16       	cp	r15, r24
    508e:	88 f3       	brcs	.-30     	; 0x5072 <_ZN5tacho4drawEv+0x234>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    5090:	80 91 7e 08 	lds	r24, 0x087E
    5094:	8f 93       	push	r24
    5096:	80 91 7d 08 	lds	r24, 0x087D
    509a:	8f 93       	push	r24
    509c:	80 91 7c 08 	lds	r24, 0x087C
    50a0:	8f 93       	push	r24
    50a2:	80 91 7b 08 	lds	r24, 0x087B
    50a6:	8f 93       	push	r24
    50a8:	8c e0       	ldi	r24, 0x0C	; 12
    50aa:	92 e0       	ldi	r25, 0x02	; 2
    50ac:	9f 93       	push	r25
    50ae:	8f 93       	push	r24
    50b0:	bf 92       	push	r11
    50b2:	af 92       	push	r10
    50b4:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    50b8:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    50ba:	2d b7       	in	r18, 0x3d	; 61
    50bc:	3e b7       	in	r19, 0x3e	; 62
    50be:	28 5f       	subi	r18, 0xF8	; 248
    50c0:	3f 4f       	sbci	r19, 0xFF	; 255
    50c2:	0f b6       	in	r0, 0x3f	; 63
    50c4:	f8 94       	cli
    50c6:	3e bf       	out	0x3e, r19	; 62
    50c8:	0f be       	out	0x3f, r0	; 63
    50ca:	2d bf       	out	0x3d, r18	; 61
    50cc:	88 23       	and	r24, r24
    50ce:	89 f0       	breq	.+34     	; 0x50f2 <_ZN5tacho4drawEv+0x2b4>
    50d0:	16 e4       	ldi	r17, 0x46	; 70
    50d2:	f1 2c       	mov	r15, r1
    50d4:	fe 01       	movw	r30, r28
    50d6:	ef 0d       	add	r30, r15
    50d8:	f1 1d       	adc	r31, r1
    50da:	28 e2       	ldi	r18, 0x28	; 40
    50dc:	41 2f       	mov	r20, r17
    50de:	62 81       	ldd	r22, Z+2	; 0x02
    50e0:	8f 89       	ldd	r24, Y+23	; 0x17
    50e2:	98 8d       	ldd	r25, Y+24	; 0x18
    50e4:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    50e8:	f3 94       	inc	r15
    50ea:	1a 5f       	subi	r17, 0xFA	; 250
    50ec:	8e 89       	ldd	r24, Y+22	; 0x16
    50ee:	f8 16       	cp	r15, r24
    50f0:	88 f3       	brcs	.-30     	; 0x50d4 <_ZN5tacho4drawEv+0x296>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    50f2:	c0 90 77 08 	lds	r12, 0x0877
    50f6:	d0 90 78 08 	lds	r13, 0x0878
    50fa:	e0 90 79 08 	lds	r14, 0x0879
    50fe:	f0 90 7a 08 	lds	r15, 0x087A
    5102:	c7 01       	movw	r24, r14
    5104:	b6 01       	movw	r22, r12
    5106:	2c e3       	ldi	r18, 0x3C	; 60
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	40 e0       	ldi	r20, 0x00	; 0
    510c:	50 e0       	ldi	r21, 0x00	; 0
    510e:	0e 94 d7 45 	call	0x8bae	; 0x8bae <__udivmodsi4>
    5112:	1f 92       	push	r1
    5114:	6f 93       	push	r22
    5116:	1f 92       	push	r1
    5118:	2f 93       	push	r18
    511a:	c7 01       	movw	r24, r14
    511c:	b6 01       	movw	r22, r12
    511e:	20 e1       	ldi	r18, 0x10	; 16
    5120:	3e e0       	ldi	r19, 0x0E	; 14
    5122:	40 e0       	ldi	r20, 0x00	; 0
    5124:	50 e0       	ldi	r21, 0x00	; 0
    5126:	0e 94 d7 45 	call	0x8bae	; 0x8bae <__udivmodsi4>
    512a:	1f 92       	push	r1
    512c:	2f 93       	push	r18
    512e:	85 e1       	ldi	r24, 0x15	; 21
    5130:	92 e0       	ldi	r25, 0x02	; 2
    5132:	9f 93       	push	r25
    5134:	8f 93       	push	r24
    5136:	bf 92       	push	r11
    5138:	af 92       	push	r10
    513a:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    513e:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    5140:	2d b7       	in	r18, 0x3d	; 61
    5142:	3e b7       	in	r19, 0x3e	; 62
    5144:	26 5f       	subi	r18, 0xF6	; 246
    5146:	3f 4f       	sbci	r19, 0xFF	; 255
    5148:	0f b6       	in	r0, 0x3f	; 63
    514a:	f8 94       	cli
    514c:	3e bf       	out	0x3e, r19	; 62
    514e:	0f be       	out	0x3f, r0	; 63
    5150:	2d bf       	out	0x3d, r18	; 61
    5152:	88 23       	and	r24, r24
    5154:	89 f0       	breq	.+34     	; 0x5178 <_ZN5tacho4drawEv+0x33a>
    5156:	16 e4       	ldi	r17, 0x46	; 70
    5158:	f1 2c       	mov	r15, r1
    515a:	fe 01       	movw	r30, r28
    515c:	ef 0d       	add	r30, r15
    515e:	f1 1d       	adc	r31, r1
    5160:	20 e3       	ldi	r18, 0x30	; 48
    5162:	41 2f       	mov	r20, r17
    5164:	62 81       	ldd	r22, Z+2	; 0x02
    5166:	8f 89       	ldd	r24, Y+23	; 0x17
    5168:	98 8d       	ldd	r25, Y+24	; 0x18
    516a:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    516e:	f3 94       	inc	r15
    5170:	1a 5f       	subi	r17, 0xFA	; 250
    5172:	8e 89       	ldd	r24, Y+22	; 0x16
    5174:	f8 16       	cp	r15, r24
    5176:	88 f3       	brcs	.-30     	; 0x515a <_ZN5tacho4drawEv+0x31c>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    5178:	60 91 77 08 	lds	r22, 0x0877
    517c:	70 91 78 08 	lds	r23, 0x0878
    5180:	80 91 79 08 	lds	r24, 0x0879
    5184:	90 91 7a 08 	lds	r25, 0x087A
    5188:	61 15       	cp	r22, r1
    518a:	71 05       	cpc	r23, r1
    518c:	81 05       	cpc	r24, r1
    518e:	91 05       	cpc	r25, r1
    5190:	b1 f4       	brne	.+44     	; 0x51be <_ZN5tacho4drawEv+0x380>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    5192:	1f 92       	push	r1
    5194:	1f 92       	push	r1
    5196:	1f 92       	push	r1
    5198:	1f 92       	push	r1
    519a:	8c e0       	ldi	r24, 0x0C	; 12
    519c:	92 e0       	ldi	r25, 0x02	; 2
    519e:	9f 93       	push	r25
    51a0:	8f 93       	push	r24
    51a2:	bf 92       	push	r11
    51a4:	af 92       	push	r10
    51a6:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    51aa:	8e 8b       	std	Y+22, r24	; 0x16
    51ac:	8d b7       	in	r24, 0x3d	; 61
    51ae:	9e b7       	in	r25, 0x3e	; 62
    51b0:	08 96       	adiw	r24, 0x08	; 8
    51b2:	0f b6       	in	r0, 0x3f	; 63
    51b4:	f8 94       	cli
    51b6:	9e bf       	out	0x3e, r25	; 62
    51b8:	0f be       	out	0x3f, r0	; 63
    51ba:	8d bf       	out	0x3d, r24	; 61
    51bc:	2a c0       	rjmp	.+84     	; 0x5212 <_ZN5tacho4drawEv+0x3d4>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    51be:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__floatunsisf>
    51c2:	9b 01       	movw	r18, r22
    51c4:	ac 01       	movw	r20, r24
    51c6:	60 91 7f 08 	lds	r22, 0x087F
    51ca:	70 91 80 08 	lds	r23, 0x0880
    51ce:	80 91 81 08 	lds	r24, 0x0881
    51d2:	90 91 82 08 	lds	r25, 0x0882
    51d6:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    51da:	26 e6       	ldi	r18, 0x66	; 102
    51dc:	36 e6       	ldi	r19, 0x66	; 102
    51de:	46 e6       	ldi	r20, 0x66	; 102
    51e0:	50 e4       	ldi	r21, 0x40	; 64
    51e2:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    51e6:	9f 93       	push	r25
    51e8:	8f 93       	push	r24
    51ea:	7f 93       	push	r23
    51ec:	6f 93       	push	r22
    51ee:	8c e0       	ldi	r24, 0x0C	; 12
    51f0:	92 e0       	ldi	r25, 0x02	; 2
    51f2:	9f 93       	push	r25
    51f4:	8f 93       	push	r24
    51f6:	bf 92       	push	r11
    51f8:	af 92       	push	r10
    51fa:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    51fe:	8e 8b       	std	Y+22, r24	; 0x16
    5200:	2d b7       	in	r18, 0x3d	; 61
    5202:	3e b7       	in	r19, 0x3e	; 62
    5204:	28 5f       	subi	r18, 0xF8	; 248
    5206:	3f 4f       	sbci	r19, 0xFF	; 255
    5208:	0f b6       	in	r0, 0x3f	; 63
    520a:	f8 94       	cli
    520c:	3e bf       	out	0x3e, r19	; 62
    520e:	0f be       	out	0x3f, r0	; 63
    5210:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    5212:	8e 89       	ldd	r24, Y+22	; 0x16
    5214:	88 23       	and	r24, r24
    5216:	89 f0       	breq	.+34     	; 0x523a <_ZN5tacho4drawEv+0x3fc>
    5218:	0b e4       	ldi	r16, 0x4B	; 75
    521a:	10 e0       	ldi	r17, 0x00	; 0
    521c:	fe 01       	movw	r30, r28
    521e:	e1 0f       	add	r30, r17
    5220:	f1 1d       	adc	r31, r1
    5222:	28 e0       	ldi	r18, 0x08	; 8
    5224:	40 2f       	mov	r20, r16
    5226:	62 81       	ldd	r22, Z+2	; 0x02
    5228:	8f 89       	ldd	r24, Y+23	; 0x17
    522a:	98 8d       	ldd	r25, Y+24	; 0x18
    522c:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    5230:	1f 5f       	subi	r17, 0xFF	; 255
    5232:	0a 5f       	subi	r16, 0xFA	; 250
    5234:	8e 89       	ldd	r24, Y+22	; 0x16
    5236:	18 17       	cp	r17, r24
    5238:	88 f3       	brcs	.-30     	; 0x521c <_ZN5tacho4drawEv+0x3de>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    523a:	8f 89       	ldd	r24, Y+23	; 0x17
    523c:	98 8d       	ldd	r25, Y+24	; 0x18
    523e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    5242:	04 c0       	rjmp	.+8      	; 0x524c <_ZN5tacho4drawEv+0x40e>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    5244:	10 e5       	ldi	r17, 0x50	; 80
    5246:	c1 2c       	mov	r12, r1
    5248:	d1 2c       	mov	r13, r1
    524a:	40 ce       	rjmp	.-896    	; 0x4ecc <_ZN5tacho4drawEv+0x8e>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    524c:	df 91       	pop	r29
    524e:	cf 91       	pop	r28
    5250:	1f 91       	pop	r17
    5252:	0f 91       	pop	r16
    5254:	ff 90       	pop	r15
    5256:	ef 90       	pop	r14
    5258:	df 90       	pop	r13
    525a:	cf 90       	pop	r12
    525c:	bf 90       	pop	r11
    525e:	af 90       	pop	r10
    5260:	08 95       	ret

00005262 <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    5262:	ef 92       	push	r14
    5264:	ff 92       	push	r15
    5266:	0f 93       	push	r16
    5268:	1f 93       	push	r17
    526a:	cf 93       	push	r28
    526c:	df 93       	push	r29
    526e:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5270:	8f 89       	ldd	r24, Y+23	; 0x17
    5272:	98 8d       	ldd	r25, Y+24	; 0x18
    5274:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
    5278:	11 e4       	ldi	r17, 0x41	; 65
    527a:	e1 2c       	mov	r14, r1
    527c:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    527e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5280:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5282:	ee 0d       	add	r30, r14
    5284:	ff 1d       	adc	r31, r15
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	41 2f       	mov	r20, r17
    528a:	60 81       	ld	r22, Z
    528c:	8f 89       	ldd	r24, Y+23	; 0x17
    528e:	98 8d       	ldd	r25, Y+24	; 0x18
    5290:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    5294:	8f ef       	ldi	r24, 0xFF	; 255
    5296:	e8 1a       	sub	r14, r24
    5298:	f8 0a       	sbc	r15, r24
    529a:	1a 5f       	subi	r17, 0xFA	; 250
    529c:	1f 35       	cpi	r17, 0x5F	; 95
    529e:	79 f7       	brne	.-34     	; 0x527e <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    52a0:	52 dc       	rcall	.-1884   	; 0x4b46 <_Z14Batteriestatusv>
    52a2:	28 2f       	mov	r18, r24
    52a4:	08 2e       	mov	r0, r24
    52a6:	00 0c       	add	r0, r0
    52a8:	33 0b       	sbc	r19, r19
    52aa:	3f 93       	push	r19
    52ac:	8f 93       	push	r24
    52ae:	8a ef       	ldi	r24, 0xFA	; 250
    52b0:	91 e0       	ldi	r25, 0x01	; 1
    52b2:	9f 93       	push	r25
    52b4:	8f 93       	push	r24
    52b6:	ce 01       	movw	r24, r28
    52b8:	02 96       	adiw	r24, 0x02	; 2
    52ba:	9f 93       	push	r25
    52bc:	8f 93       	push	r24
    52be:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    52c2:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    52c4:	15 e1       	ldi	r17, 0x15	; 21
    52c6:	18 1b       	sub	r17, r24
    52c8:	0f 90       	pop	r0
    52ca:	0f 90       	pop	r0
    52cc:	0f 90       	pop	r0
    52ce:	0f 90       	pop	r0
    52d0:	0f 90       	pop	r0
    52d2:	0f 90       	pop	r0
    52d4:	15 31       	cpi	r17, 0x15	; 21
    52d6:	08 f0       	brcs	.+2      	; 0x52da <_ZN3uhr4drawEv+0x78>
    52d8:	5f c0       	rjmp	.+190    	; 0x5398 <_ZN3uhr4drawEv+0x136>
    52da:	01 2f       	mov	r16, r17
    52dc:	00 0f       	add	r16, r16
    52de:	01 0f       	add	r16, r17
    52e0:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    52e2:	8e 89       	ldd	r24, Y+22	; 0x16
    52e4:	fe 01       	movw	r30, r28
    52e6:	e1 0f       	add	r30, r17
    52e8:	f1 1d       	adc	r31, r1
    52ea:	e8 0f       	add	r30, r24
    52ec:	f1 1d       	adc	r31, r1
    52ee:	73 97       	sbiw	r30, 0x13	; 19
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	40 2f       	mov	r20, r16
    52f4:	60 81       	ld	r22, Z
    52f6:	8f 89       	ldd	r24, Y+23	; 0x17
    52f8:	98 8d       	ldd	r25, Y+24	; 0x18
    52fa:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    52fe:	1f 5f       	subi	r17, 0xFF	; 255
    5300:	0a 5f       	subi	r16, 0xFA	; 250
    5302:	15 31       	cpi	r17, 0x15	; 21
    5304:	71 f7       	brne	.-36     	; 0x52e2 <_ZN3uhr4drawEv+0x80>
    5306:	48 c0       	rjmp	.+144    	; 0x5398 <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    5308:	e9 8d       	ldd	r30, Y+25	; 0x19
    530a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    530c:	ee 0d       	add	r30, r14
    530e:	ff 1d       	adc	r31, r15
    5310:	28 e3       	ldi	r18, 0x38	; 56
    5312:	41 2f       	mov	r20, r17
    5314:	60 85       	ldd	r22, Z+8	; 0x08
    5316:	8f 89       	ldd	r24, Y+23	; 0x17
    5318:	98 8d       	ldd	r25, Y+24	; 0x18
    531a:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    531e:	8f ef       	ldi	r24, 0xFF	; 255
    5320:	e8 1a       	sub	r14, r24
    5322:	f8 0a       	sbc	r15, r24
    5324:	1a 5f       	subi	r17, 0xFA	; 250
    5326:	11 37       	cpi	r17, 0x71	; 113
    5328:	79 f7       	brne	.-34     	; 0x5308 <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    532a:	e9 8d       	ldd	r30, Y+25	; 0x19
    532c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    532e:	09 a5       	ldd	r16, Y+41	; 0x29
    5330:	22 89       	ldd	r18, Z+18	; 0x12
    5332:	41 89       	ldd	r20, Z+17	; 0x11
    5334:	60 89       	ldd	r22, Z+16	; 0x10
    5336:	8f 89       	ldd	r24, Y+23	; 0x17
    5338:	98 8d       	ldd	r25, Y+24	; 0x18
    533a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    533e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5340:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5342:	60 81       	ld	r22, Z
    5344:	60 53       	subi	r22, 0x30	; 48
    5346:	2d e0       	ldi	r18, 0x0D	; 13
    5348:	46 e4       	ldi	r20, 0x46	; 70
    534a:	8f 89       	ldd	r24, Y+23	; 0x17
    534c:	98 8d       	ldd	r25, Y+24	; 0x18
    534e:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    5352:	e9 8d       	ldd	r30, Y+25	; 0x19
    5354:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5356:	61 81       	ldd	r22, Z+1	; 0x01
    5358:	60 53       	subi	r22, 0x30	; 48
    535a:	2d e0       	ldi	r18, 0x0D	; 13
    535c:	46 e5       	ldi	r20, 0x56	; 86
    535e:	8f 89       	ldd	r24, Y+23	; 0x17
    5360:	98 8d       	ldd	r25, Y+24	; 0x18
    5362:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    5366:	e9 8d       	ldd	r30, Y+25	; 0x19
    5368:	fa 8d       	ldd	r31, Y+26	; 0x1a
    536a:	63 81       	ldd	r22, Z+3	; 0x03
    536c:	60 53       	subi	r22, 0x30	; 48
    536e:	22 e2       	ldi	r18, 0x22	; 34
    5370:	46 e4       	ldi	r20, 0x46	; 70
    5372:	8f 89       	ldd	r24, Y+23	; 0x17
    5374:	98 8d       	ldd	r25, Y+24	; 0x18
    5376:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    537a:	e9 8d       	ldd	r30, Y+25	; 0x19
    537c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    537e:	64 81       	ldd	r22, Z+4	; 0x04
    5380:	60 53       	subi	r22, 0x30	; 48
    5382:	22 e2       	ldi	r18, 0x22	; 34
    5384:	46 e5       	ldi	r20, 0x56	; 86
    5386:	8f 89       	ldd	r24, Y+23	; 0x17
    5388:	98 8d       	ldd	r25, Y+24	; 0x18
    538a:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    538e:	8f 89       	ldd	r24, Y+23	; 0x17
    5390:	98 8d       	ldd	r25, Y+24	; 0x18
    5392:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    5396:	04 c0       	rjmp	.+8      	; 0x53a0 <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5398:	11 e4       	ldi	r17, 0x41	; 65
    539a:	e1 2c       	mov	r14, r1
    539c:	f1 2c       	mov	r15, r1
    539e:	b4 cf       	rjmp	.-152    	; 0x5308 <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    53a0:	df 91       	pop	r29
    53a2:	cf 91       	pop	r28
    53a4:	1f 91       	pop	r17
    53a6:	0f 91       	pop	r16
    53a8:	ff 90       	pop	r15
    53aa:	ef 90       	pop	r14
    53ac:	08 95       	ret

000053ae <_ZN7wandern4drawEv>:
			EEPROM_Write(EEJAHR,rtc->Jahr);
		}
		return 0;
	}
	
	void draw(){
    53ae:	cf 92       	push	r12
    53b0:	df 92       	push	r13
    53b2:	ef 92       	push	r14
    53b4:	ff 92       	push	r15
    53b6:	0f 93       	push	r16
    53b8:	1f 93       	push	r17
    53ba:	cf 93       	push	r28
    53bc:	df 93       	push	r29
    53be:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    53c0:	8f 89       	ldd	r24, Y+23	; 0x17
    53c2:	98 8d       	ldd	r25, Y+24	; 0x18
    53c4:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
    53c8:	10 e0       	ldi	r17, 0x00	; 0
    53ca:	e1 2c       	mov	r14, r1
    53cc:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    53ce:	e9 8d       	ldd	r30, Y+25	; 0x19
    53d0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    53d2:	ee 0d       	add	r30, r14
    53d4:	ff 1d       	adc	r31, r15
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	41 2f       	mov	r20, r17
    53da:	60 81       	ld	r22, Z
    53dc:	8f 89       	ldd	r24, Y+23	; 0x17
    53de:	98 8d       	ldd	r25, Y+24	; 0x18
    53e0:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    53e4:	2f ef       	ldi	r18, 0xFF	; 255
    53e6:	e2 1a       	sub	r14, r18
    53e8:	f2 0a       	sbc	r15, r18
    53ea:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    53ec:	10 33       	cpi	r17, 0x30	; 48
    53ee:	79 f7       	brne	.-34     	; 0x53ce <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    53f0:	aa db       	rcall	.-2220   	; 0x4b46 <_Z14Batteriestatusv>
    53f2:	7e 01       	movw	r14, r28
    53f4:	32 e0       	ldi	r19, 0x02	; 2
    53f6:	e3 0e       	add	r14, r19
    53f8:	f1 1c       	adc	r15, r1
    53fa:	28 2f       	mov	r18, r24
    53fc:	08 2e       	mov	r0, r24
    53fe:	00 0c       	add	r0, r0
    5400:	33 0b       	sbc	r19, r19
    5402:	3f 93       	push	r19
    5404:	8f 93       	push	r24
    5406:	82 ec       	ldi	r24, 0xC2	; 194
    5408:	91 e0       	ldi	r25, 0x01	; 1
    540a:	9f 93       	push	r25
    540c:	8f 93       	push	r24
    540e:	ff 92       	push	r15
    5410:	ef 92       	push	r14
    5412:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    5416:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5418:	15 e1       	ldi	r17, 0x15	; 21
    541a:	18 1b       	sub	r17, r24
    541c:	0f 90       	pop	r0
    541e:	0f 90       	pop	r0
    5420:	0f 90       	pop	r0
    5422:	0f 90       	pop	r0
    5424:	0f 90       	pop	r0
    5426:	0f 90       	pop	r0
    5428:	15 31       	cpi	r17, 0x15	; 21
    542a:	08 f0       	brcs	.+2      	; 0x542e <_ZN7wandern4drawEv+0x80>
    542c:	fd c0       	rjmp	.+506    	; 0x5628 <_ZN7wandern4drawEv+0x27a>
    542e:	01 2f       	mov	r16, r17
    5430:	00 0f       	add	r16, r16
    5432:	01 0f       	add	r16, r17
    5434:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    5436:	8e 89       	ldd	r24, Y+22	; 0x16
    5438:	fe 01       	movw	r30, r28
    543a:	e1 0f       	add	r30, r17
    543c:	f1 1d       	adc	r31, r1
    543e:	e8 0f       	add	r30, r24
    5440:	f1 1d       	adc	r31, r1
    5442:	73 97       	sbiw	r30, 0x13	; 19
    5444:	20 e0       	ldi	r18, 0x00	; 0
    5446:	40 2f       	mov	r20, r16
    5448:	60 81       	ld	r22, Z
    544a:	8f 89       	ldd	r24, Y+23	; 0x17
    544c:	98 8d       	ldd	r25, Y+24	; 0x18
    544e:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5452:	1f 5f       	subi	r17, 0xFF	; 255
    5454:	0a 5f       	subi	r16, 0xFA	; 250
    5456:	15 31       	cpi	r17, 0x15	; 21
    5458:	71 f7       	brne	.-36     	; 0x5436 <_ZN7wandern4drawEv+0x88>
    545a:	e6 c0       	rjmp	.+460    	; 0x5628 <_ZN7wandern4drawEv+0x27a>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    545c:	e9 8d       	ldd	r30, Y+25	; 0x19
    545e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5460:	ec 0d       	add	r30, r12
    5462:	fd 1d       	adc	r31, r13
    5464:	28 e3       	ldi	r18, 0x38	; 56
    5466:	41 2f       	mov	r20, r17
    5468:	60 85       	ldd	r22, Z+8	; 0x08
    546a:	8f 89       	ldd	r24, Y+23	; 0x17
    546c:	98 8d       	ldd	r25, Y+24	; 0x18
    546e:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    5472:	8f ef       	ldi	r24, 0xFF	; 255
    5474:	c8 1a       	sub	r12, r24
    5476:	d8 0a       	sbc	r13, r24
    5478:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    547a:	10 38       	cpi	r17, 0x80	; 128
    547c:	79 f7       	brne	.-34     	; 0x545c <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
		*/
		
		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    547e:	80 91 98 08 	lds	r24, 0x0898
    5482:	8f 93       	push	r24
    5484:	80 91 97 08 	lds	r24, 0x0897
    5488:	8f 93       	push	r24
    548a:	80 91 96 08 	lds	r24, 0x0896
    548e:	8f 93       	push	r24
    5490:	80 91 95 08 	lds	r24, 0x0895
    5494:	8f 93       	push	r24
    5496:	84 e2       	ldi	r24, 0x24	; 36
    5498:	92 e0       	ldi	r25, 0x02	; 2
    549a:	9f 93       	push	r25
    549c:	8f 93       	push	r24
    549e:	ff 92       	push	r15
    54a0:	ef 92       	push	r14
    54a2:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    54a6:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    54a8:	2d b7       	in	r18, 0x3d	; 61
    54aa:	3e b7       	in	r19, 0x3e	; 62
    54ac:	28 5f       	subi	r18, 0xF8	; 248
    54ae:	3f 4f       	sbci	r19, 0xFF	; 255
    54b0:	0f b6       	in	r0, 0x3f	; 63
    54b2:	f8 94       	cli
    54b4:	3e bf       	out	0x3e, r19	; 62
    54b6:	0f be       	out	0x3f, r0	; 63
    54b8:	2d bf       	out	0x3d, r18	; 61
    54ba:	88 23       	and	r24, r24
    54bc:	89 f0       	breq	.+34     	; 0x54e0 <_ZN7wandern4drawEv+0x132>
    54be:	00 e0       	ldi	r16, 0x00	; 0
    54c0:	10 e0       	ldi	r17, 0x00	; 0
    54c2:	fe 01       	movw	r30, r28
    54c4:	e1 0f       	add	r30, r17
    54c6:	f1 1d       	adc	r31, r1
    54c8:	20 e1       	ldi	r18, 0x10	; 16
    54ca:	40 2f       	mov	r20, r16
    54cc:	62 81       	ldd	r22, Z+2	; 0x02
    54ce:	8f 89       	ldd	r24, Y+23	; 0x17
    54d0:	98 8d       	ldd	r25, Y+24	; 0x18
    54d2:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    54d6:	1f 5f       	subi	r17, 0xFF	; 255
    54d8:	0a 5f       	subi	r16, 0xFA	; 250
    54da:	8e 89       	ldd	r24, Y+22	; 0x16
    54dc:	18 17       	cp	r17, r24
    54de:	88 f3       	brcs	.-30     	; 0x54c2 <_ZN7wandern4drawEv+0x114>
			
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    54e0:	80 91 94 08 	lds	r24, 0x0894
    54e4:	8f 93       	push	r24
    54e6:	80 91 93 08 	lds	r24, 0x0893
    54ea:	8f 93       	push	r24
    54ec:	80 91 92 08 	lds	r24, 0x0892
    54f0:	8f 93       	push	r24
    54f2:	80 91 91 08 	lds	r24, 0x0891
    54f6:	8f 93       	push	r24
    54f8:	8e e2       	ldi	r24, 0x2E	; 46
    54fa:	92 e0       	ldi	r25, 0x02	; 2
    54fc:	9f 93       	push	r25
    54fe:	8f 93       	push	r24
    5500:	ff 92       	push	r15
    5502:	ef 92       	push	r14
    5504:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    5508:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    550a:	2d b7       	in	r18, 0x3d	; 61
    550c:	3e b7       	in	r19, 0x3e	; 62
    550e:	28 5f       	subi	r18, 0xF8	; 248
    5510:	3f 4f       	sbci	r19, 0xFF	; 255
    5512:	0f b6       	in	r0, 0x3f	; 63
    5514:	f8 94       	cli
    5516:	3e bf       	out	0x3e, r19	; 62
    5518:	0f be       	out	0x3f, r0	; 63
    551a:	2d bf       	out	0x3d, r18	; 61
    551c:	88 23       	and	r24, r24
    551e:	89 f0       	breq	.+34     	; 0x5542 <_ZN7wandern4drawEv+0x194>
    5520:	00 e0       	ldi	r16, 0x00	; 0
    5522:	10 e0       	ldi	r17, 0x00	; 0
    5524:	fe 01       	movw	r30, r28
    5526:	e1 0f       	add	r30, r17
    5528:	f1 1d       	adc	r31, r1
    552a:	28 e1       	ldi	r18, 0x18	; 24
    552c:	40 2f       	mov	r20, r16
    552e:	62 81       	ldd	r22, Z+2	; 0x02
    5530:	8f 89       	ldd	r24, Y+23	; 0x17
    5532:	98 8d       	ldd	r25, Y+24	; 0x18
    5534:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    5538:	1f 5f       	subi	r17, 0xFF	; 255
    553a:	0a 5f       	subi	r16, 0xFA	; 250
    553c:	8e 89       	ldd	r24, Y+22	; 0x16
    553e:	18 17       	cp	r17, r24
    5540:	88 f3       	brcs	.-30     	; 0x5524 <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.4f",gpsspeed);
    5542:	80 91 90 08 	lds	r24, 0x0890
    5546:	8f 93       	push	r24
    5548:	80 91 8f 08 	lds	r24, 0x088F
    554c:	8f 93       	push	r24
    554e:	80 91 8e 08 	lds	r24, 0x088E
    5552:	8f 93       	push	r24
    5554:	80 91 8d 08 	lds	r24, 0x088D
    5558:	8f 93       	push	r24
    555a:	88 e3       	ldi	r24, 0x38	; 56
    555c:	92 e0       	ldi	r25, 0x02	; 2
    555e:	9f 93       	push	r25
    5560:	8f 93       	push	r24
    5562:	ff 92       	push	r15
    5564:	ef 92       	push	r14
    5566:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    556a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    556c:	2d b7       	in	r18, 0x3d	; 61
    556e:	3e b7       	in	r19, 0x3e	; 62
    5570:	28 5f       	subi	r18, 0xF8	; 248
    5572:	3f 4f       	sbci	r19, 0xFF	; 255
    5574:	0f b6       	in	r0, 0x3f	; 63
    5576:	f8 94       	cli
    5578:	3e bf       	out	0x3e, r19	; 62
    557a:	0f be       	out	0x3f, r0	; 63
    557c:	2d bf       	out	0x3d, r18	; 61
    557e:	88 23       	and	r24, r24
    5580:	89 f0       	breq	.+34     	; 0x55a4 <_ZN7wandern4drawEv+0x1f6>
    5582:	00 e0       	ldi	r16, 0x00	; 0
    5584:	10 e0       	ldi	r17, 0x00	; 0
    5586:	fe 01       	movw	r30, r28
    5588:	e1 0f       	add	r30, r17
    558a:	f1 1d       	adc	r31, r1
    558c:	20 e2       	ldi	r18, 0x20	; 32
    558e:	40 2f       	mov	r20, r16
    5590:	62 81       	ldd	r22, Z+2	; 0x02
    5592:	8f 89       	ldd	r24, Y+23	; 0x17
    5594:	98 8d       	ldd	r25, Y+24	; 0x18
    5596:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    559a:	1f 5f       	subi	r17, 0xFF	; 255
    559c:	0a 5f       	subi	r16, 0xFA	; 250
    559e:	8e 89       	ldd	r24, Y+22	; 0x16
    55a0:	18 17       	cp	r17, r24
    55a2:	88 f3       	brcs	.-30     	; 0x5586 <_ZN7wandern4drawEv+0x1d8>
			
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    55a4:	80 91 87 08 	lds	r24, 0x0887
    55a8:	1f 92       	push	r1
    55aa:	8f 93       	push	r24
    55ac:	80 91 88 08 	lds	r24, 0x0888
    55b0:	1f 92       	push	r1
    55b2:	8f 93       	push	r24
    55b4:	80 91 89 08 	lds	r24, 0x0889
    55b8:	1f 92       	push	r1
    55ba:	8f 93       	push	r24
    55bc:	80 91 8a 08 	lds	r24, 0x088A
    55c0:	1f 92       	push	r1
    55c2:	8f 93       	push	r24
    55c4:	80 91 8b 08 	lds	r24, 0x088B
    55c8:	1f 92       	push	r1
    55ca:	8f 93       	push	r24
    55cc:	80 91 8c 08 	lds	r24, 0x088C
    55d0:	1f 92       	push	r1
    55d2:	8f 93       	push	r24
    55d4:	82 e4       	ldi	r24, 0x42	; 66
    55d6:	92 e0       	ldi	r25, 0x02	; 2
    55d8:	9f 93       	push	r25
    55da:	8f 93       	push	r24
    55dc:	ff 92       	push	r15
    55de:	ef 92       	push	r14
    55e0:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    55e4:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    55e6:	2d b7       	in	r18, 0x3d	; 61
    55e8:	3e b7       	in	r19, 0x3e	; 62
    55ea:	20 5f       	subi	r18, 0xF0	; 240
    55ec:	3f 4f       	sbci	r19, 0xFF	; 255
    55ee:	0f b6       	in	r0, 0x3f	; 63
    55f0:	f8 94       	cli
    55f2:	3e bf       	out	0x3e, r19	; 62
    55f4:	0f be       	out	0x3f, r0	; 63
    55f6:	2d bf       	out	0x3d, r18	; 61
    55f8:	88 23       	and	r24, r24
    55fa:	89 f0       	breq	.+34     	; 0x561e <_ZN7wandern4drawEv+0x270>
    55fc:	00 e0       	ldi	r16, 0x00	; 0
    55fe:	10 e0       	ldi	r17, 0x00	; 0
    5600:	fe 01       	movw	r30, r28
    5602:	e1 0f       	add	r30, r17
    5604:	f1 1d       	adc	r31, r1
    5606:	28 e2       	ldi	r18, 0x28	; 40
    5608:	40 2f       	mov	r20, r16
    560a:	62 81       	ldd	r22, Z+2	; 0x02
    560c:	8f 89       	ldd	r24, Y+23	; 0x17
    560e:	98 8d       	ldd	r25, Y+24	; 0x18
    5610:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    5614:	1f 5f       	subi	r17, 0xFF	; 255
    5616:	0a 5f       	subi	r16, 0xFA	; 250
    5618:	8e 89       	ldd	r24, Y+22	; 0x16
    561a:	18 17       	cp	r17, r24
    561c:	88 f3       	brcs	.-30     	; 0x5600 <_ZN7wandern4drawEv+0x252>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    561e:	8f 89       	ldd	r24, Y+23	; 0x17
    5620:	98 8d       	ldd	r25, Y+24	; 0x18
    5622:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    5626:	04 c0       	rjmp	.+8      	; 0x5630 <_ZN7wandern4drawEv+0x282>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5628:	10 e5       	ldi	r17, 0x50	; 80
    562a:	c1 2c       	mov	r12, r1
    562c:	d1 2c       	mov	r13, r1
    562e:	16 cf       	rjmp	.-468    	; 0x545c <_ZN7wandern4drawEv+0xae>
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
		
		send();	
	}
    5630:	df 91       	pop	r29
    5632:	cf 91       	pop	r28
    5634:	1f 91       	pop	r17
    5636:	0f 91       	pop	r16
    5638:	ff 90       	pop	r15
    563a:	ef 90       	pop	r14
    563c:	df 90       	pop	r13
    563e:	cf 90       	pop	r12
    5640:	08 95       	ret

00005642 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    5642:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5644:	f9 99       	sbic	0x1f, 1	; 31
    5646:	fe cf       	rjmp	.-4      	; 0x5644 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    5648:	92 bd       	out	0x22, r25	; 34
    564a:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    564c:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    564e:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    5650:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    5652:	78 94       	sei
    5654:	08 95       	ret

00005656 <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	ec 01       	movw	r28, r24
		if (*tast=='e')
    565c:	fb 01       	movw	r30, r22
    565e:	90 81       	ld	r25, Z
    5660:	95 36       	cpi	r25, 0x65	; 101
    5662:	09 f0       	breq	.+2      	; 0x5666 <_ZN7wandern11tastendruckEPh+0x10>
    5664:	40 c0       	rjmp	.+128    	; 0x56e6 <_ZN7wandern11tastendruckEPh+0x90>
		{
			rtc->Stunden	= gpsstunde;
    5666:	e9 8d       	ldd	r30, Y+25	; 0x19
    5668:	fa 8d       	ldd	r31, Y+26	; 0x1a
    566a:	80 91 8c 08 	lds	r24, 0x088C
    566e:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    5670:	e9 8d       	ldd	r30, Y+25	; 0x19
    5672:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5674:	80 91 8b 08 	lds	r24, 0x088B
    5678:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    567a:	e9 8d       	ldd	r30, Y+25	; 0x19
    567c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    567e:	80 91 8a 08 	lds	r24, 0x088A
    5682:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    5684:	e9 8d       	ldd	r30, Y+25	; 0x19
    5686:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5688:	80 91 89 08 	lds	r24, 0x0889
    568c:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    568e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5690:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5692:	80 91 88 08 	lds	r24, 0x0888
    5696:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    5698:	e9 8d       	ldd	r30, Y+25	; 0x19
    569a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    569c:	80 91 87 08 	lds	r24, 0x0887
    56a0:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    56a2:	89 8d       	ldd	r24, Y+25	; 0x19
    56a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56a6:	0e 94 70 3d 	call	0x7ae0	; 0x7ae0 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    56aa:	e9 8d       	ldd	r30, Y+25	; 0x19
    56ac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    56ae:	61 89       	ldd	r22, Z+17	; 0x11
    56b0:	80 e0       	ldi	r24, 0x00	; 0
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	c6 df       	rcall	.-116    	; 0x5642 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    56b6:	e9 8d       	ldd	r30, Y+25	; 0x19
    56b8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    56ba:	60 89       	ldd	r22, Z+16	; 0x10
    56bc:	81 e0       	ldi	r24, 0x01	; 1
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	c0 df       	rcall	.-128    	; 0x5642 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    56c2:	e9 8d       	ldd	r30, Y+25	; 0x19
    56c4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    56c6:	64 89       	ldd	r22, Z+20	; 0x14
    56c8:	82 e0       	ldi	r24, 0x02	; 2
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	ba df       	rcall	.-140    	; 0x5642 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    56ce:	e9 8d       	ldd	r30, Y+25	; 0x19
    56d0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    56d2:	66 89       	ldd	r22, Z+22	; 0x16
    56d4:	83 e0       	ldi	r24, 0x03	; 3
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	b4 df       	rcall	.-152    	; 0x5642 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    56da:	e9 8d       	ldd	r30, Y+25	; 0x19
    56dc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    56de:	67 89       	ldd	r22, Z+23	; 0x17
    56e0:	84 e0       	ldi	r24, 0x04	; 4
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	ae df       	rcall	.-164    	; 0x5642 <_Z12EEPROM_Writejh>
		}
		return 0;
	}
    56e6:	80 e0       	ldi	r24, 0x00	; 0
    56e8:	df 91       	pop	r29
    56ea:	cf 91       	pop	r28
    56ec:	08 95       	ret

000056ee <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    56ee:	f8 94       	cli
	while(EECR&(1<<EEPE));
    56f0:	f9 99       	sbic	0x1f, 1	; 31
    56f2:	fe cf       	rjmp	.-4      	; 0x56f0 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    56f4:	92 bd       	out	0x22, r25	; 34
    56f6:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    56f8:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    56fa:	78 94       	sei
	return EEDR;
    56fc:	80 b5       	in	r24, 0x20	; 32
}
    56fe:	08 95       	ret

00005700 <__vector_16>:

//schlechte variante der Uhreinstellung
void uhreinstellen();

//SD karten Timer
ISR(TIMER0_COMPA_vect){
    5700:	1f 92       	push	r1
    5702:	0f 92       	push	r0
    5704:	0f b6       	in	r0, 0x3f	; 63
    5706:	0f 92       	push	r0
    5708:	11 24       	eor	r1, r1
    570a:	0b b6       	in	r0, 0x3b	; 59
    570c:	0f 92       	push	r0
    570e:	2f 93       	push	r18
    5710:	3f 93       	push	r19
    5712:	4f 93       	push	r20
    5714:	5f 93       	push	r21
    5716:	6f 93       	push	r22
    5718:	7f 93       	push	r23
    571a:	8f 93       	push	r24
    571c:	9f 93       	push	r25
    571e:	af 93       	push	r26
    5720:	bf 93       	push	r27
    5722:	ef 93       	push	r30
    5724:	ff 93       	push	r31
	disk_timerproc();	//Timer der SD Karte
    5726:	0e 94 0d 0b 	call	0x161a	; 0x161a <disk_timerproc>
}
    572a:	ff 91       	pop	r31
    572c:	ef 91       	pop	r30
    572e:	bf 91       	pop	r27
    5730:	af 91       	pop	r26
    5732:	9f 91       	pop	r25
    5734:	8f 91       	pop	r24
    5736:	7f 91       	pop	r23
    5738:	6f 91       	pop	r22
    573a:	5f 91       	pop	r21
    573c:	4f 91       	pop	r20
    573e:	3f 91       	pop	r19
    5740:	2f 91       	pop	r18
    5742:	0f 90       	pop	r0
    5744:	0b be       	out	0x3b, r0	; 59
    5746:	0f 90       	pop	r0
    5748:	0f be       	out	0x3f, r0	; 63
    574a:	0f 90       	pop	r0
    574c:	1f 90       	pop	r1
    574e:	18 95       	reti

00005750 <__vector_11>:

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    5750:	1f 92       	push	r1
    5752:	0f 92       	push	r0
    5754:	0f b6       	in	r0, 0x3f	; 63
    5756:	0f 92       	push	r0
    5758:	11 24       	eor	r1, r1
    575a:	0b b6       	in	r0, 0x3b	; 59
    575c:	0f 92       	push	r0
    575e:	8f 93       	push	r24
    5760:	ef 93       	push	r30
    5762:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    5764:	e2 e1       	ldi	r30, 0x12	; 18
    5766:	fe e0       	ldi	r31, 0x0E	; 14
    5768:	82 89       	ldd	r24, Z+18	; 0x12
    576a:	8f 5f       	subi	r24, 0xFF	; 255
    576c:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    576e:	80 8d       	ldd	r24, Z+24	; 0x18
    5770:	82 60       	ori	r24, 0x02	; 2
    5772:	80 8f       	std	Z+24, r24	; 0x18
}
    5774:	ff 91       	pop	r31
    5776:	ef 91       	pop	r30
    5778:	8f 91       	pop	r24
    577a:	0f 90       	pop	r0
    577c:	0b be       	out	0x3b, r0	; 59
    577e:	0f 90       	pop	r0
    5780:	0f be       	out	0x3f, r0	; 63
    5782:	0f 90       	pop	r0
    5784:	1f 90       	pop	r1
    5786:	18 95       	reti

00005788 <__vector_13>:

ISR(TIMER1_COMPA_vect){
    5788:	1f 92       	push	r1
    578a:	0f 92       	push	r0
    578c:	0f b6       	in	r0, 0x3f	; 63
    578e:	0f 92       	push	r0
    5790:	11 24       	eor	r1, r1
    5792:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    5794:	80 91 e5 08 	lds	r24, 0x08E5
    5798:	81 60       	ori	r24, 0x01	; 1
    579a:	80 93 e5 08 	sts	0x08E5, r24
}
    579e:	8f 91       	pop	r24
    57a0:	0f 90       	pop	r0
    57a2:	0f be       	out	0x3f, r0	; 63
    57a4:	0f 90       	pop	r0
    57a6:	1f 90       	pop	r1
    57a8:	18 95       	reti

000057aa <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    57aa:	1f 92       	push	r1
    57ac:	0f 92       	push	r0
    57ae:	0f b6       	in	r0, 0x3f	; 63
    57b0:	0f 92       	push	r0
    57b2:	11 24       	eor	r1, r1
    57b4:	0b b6       	in	r0, 0x3b	; 59
    57b6:	0f 92       	push	r0
    57b8:	2f 93       	push	r18
    57ba:	8f 93       	push	r24
    57bc:	9f 93       	push	r25
    57be:	ef 93       	push	r30
    57c0:	ff 93       	push	r31
	uint8_t temp = UDR0;
    57c2:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    57c6:	24 32       	cpi	r18, 0x24	; 36
    57c8:	51 f4       	brne	.+20     	; 0x57de <__vector_20+0x34>
    57ca:	80 91 e2 08 	lds	r24, 0x08E2
    57ce:	98 2f       	mov	r25, r24
    57d0:	9c 70       	andi	r25, 0x0C	; 12
    57d2:	29 f4       	brne	.+10     	; 0x57de <__vector_20+0x34>
	{
		gpscounter = 0;
    57d4:	10 92 99 08 	sts	0x0899, r1
		gpsstatus |= (1<<message);
    57d8:	81 60       	ori	r24, 0x01	; 1
    57da:	80 93 e2 08 	sts	0x08E2, r24
	}
	if ((gpsstatus&(1<<message)))
    57de:	90 91 e2 08 	lds	r25, 0x08E2
    57e2:	90 ff       	sbrs	r25, 0
    57e4:	3c c0       	rjmp	.+120    	; 0x585e <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    57e6:	80 91 99 08 	lds	r24, 0x0899
    57ea:	e8 2f       	mov	r30, r24
    57ec:	f0 e0       	ldi	r31, 0x00	; 0
    57ee:	e6 56       	subi	r30, 0x66	; 102
    57f0:	f7 4f       	sbci	r31, 0xF7	; 247
    57f2:	20 83       	st	Z, r18
		gpscounter++;
    57f4:	8f 5f       	subi	r24, 0xFF	; 255
    57f6:	80 93 99 08 	sts	0x0899, r24
		if (gpscounter>72)
    57fa:	89 34       	cpi	r24, 0x49	; 73
    57fc:	20 f0       	brcs	.+8      	; 0x5806 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    57fe:	9e 7f       	andi	r25, 0xFE	; 254
    5800:	90 93 e2 08 	sts	0x08E2, r25
    5804:	2c c0       	rjmp	.+88     	; 0x585e <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    5806:	83 31       	cpi	r24, 0x13	; 19
    5808:	c9 f4       	brne	.+50     	; 0x583c <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    580a:	80 91 9e 08 	lds	r24, 0x089E
    580e:	8d 34       	cpi	r24, 0x4D	; 77
    5810:	89 f4       	brne	.+34     	; 0x5834 <__vector_20+0x8a>
    5812:	80 91 9f 08 	lds	r24, 0x089F
    5816:	83 34       	cpi	r24, 0x43	; 67
    5818:	69 f4       	brne	.+26     	; 0x5834 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    581a:	80 91 ac 08 	lds	r24, 0x08AC
    581e:	81 34       	cpi	r24, 0x41	; 65
    5820:	29 f0       	breq	.+10     	; 0x582c <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    5822:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    5824:	90 61       	ori	r25, 0x10	; 16
    5826:	90 93 e2 08 	sts	0x08E2, r25
    582a:	19 c0       	rjmp	.+50     	; 0x585e <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    582c:	92 60       	ori	r25, 0x02	; 2
    582e:	90 93 e2 08 	sts	0x08E2, r25
    5832:	15 c0       	rjmp	.+42     	; 0x585e <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    5834:	9c 7f       	andi	r25, 0xFC	; 252
    5836:	90 93 e2 08 	sts	0x08E2, r25
    583a:	11 c0       	rjmp	.+34     	; 0x585e <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    583c:	8a 32       	cpi	r24, 0x2A	; 42
    583e:	39 f4       	brne	.+14     	; 0x584e <__vector_20+0xa4>
    5840:	94 ff       	sbrs	r25, 4
    5842:	0d c0       	rjmp	.+26     	; 0x585e <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    5844:	9e 7e       	andi	r25, 0xEE	; 238
    5846:	98 60       	ori	r25, 0x08	; 8
    5848:	90 93 e2 08 	sts	0x08E2, r25
    584c:	08 c0       	rjmp	.+16     	; 0x585e <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    584e:	86 34       	cpi	r24, 0x46	; 70
    5850:	31 f4       	brne	.+12     	; 0x585e <__vector_20+0xb4>
    5852:	91 ff       	sbrs	r25, 1
    5854:	04 c0       	rjmp	.+8      	; 0x585e <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    5856:	9c 7f       	andi	r25, 0xFC	; 252
    5858:	94 60       	ori	r25, 0x04	; 4
    585a:	90 93 e2 08 	sts	0x08E2, r25
		}
	}
}
    585e:	ff 91       	pop	r31
    5860:	ef 91       	pop	r30
    5862:	9f 91       	pop	r25
    5864:	8f 91       	pop	r24
    5866:	2f 91       	pop	r18
    5868:	0f 90       	pop	r0
    586a:	0b be       	out	0x3b, r0	; 59
    586c:	0f 90       	pop	r0
    586e:	0f be       	out	0x3f, r0	; 63
    5870:	0f 90       	pop	r0
    5872:	1f 90       	pop	r1
    5874:	18 95       	reti

00005876 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    5876:	10 92 83 08 	sts	0x0883, r1
    587a:	10 92 84 08 	sts	0x0884, r1
    587e:	10 92 85 08 	sts	0x0885, r1
    5882:	10 92 86 08 	sts	0x0886, r1
	strecke = 0;
    5886:	10 92 7f 08 	sts	0x087F, r1
    588a:	10 92 80 08 	sts	0x0880, r1
    588e:	10 92 81 08 	sts	0x0881, r1
    5892:	10 92 82 08 	sts	0x0882, r1
	maxgeschw = 0;
    5896:	10 92 7b 08 	sts	0x087B, r1
    589a:	10 92 7c 08 	sts	0x087C, r1
    589e:	10 92 7d 08 	sts	0x087D, r1
    58a2:	10 92 7e 08 	sts	0x087E, r1
	Fahrtzeit = 0;
    58a6:	10 92 77 08 	sts	0x0877, r1
    58aa:	10 92 78 08 	sts	0x0878, r1
    58ae:	10 92 79 08 	sts	0x0879, r1
    58b2:	10 92 7a 08 	sts	0x087A, r1
    58b6:	08 95       	ret

000058b8 <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    58b8:	fb 01       	movw	r30, r22
    58ba:	80 81       	ld	r24, Z
    58bc:	85 36       	cpi	r24, 0x65	; 101
    58be:	09 f4       	brne	.+2      	; 0x58c2 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    58c0:	da df       	rcall	.-76     	; 0x5876 <_Z6nullenv>
		}
		return 0;
	}
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	08 95       	ret

000058c6 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    58c6:	fc 01       	movw	r30, r24
    58c8:	20 81       	ld	r18, Z
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	06 2e       	mov	r0, r22
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <_Z13reed_debouncePVhh+0xe>
    58d0:	35 95       	asr	r19
    58d2:	27 95       	ror	r18
    58d4:	0a 94       	dec	r0
    58d6:	e2 f7       	brpl	.-8      	; 0x58d0 <_Z13reed_debouncePVhh+0xa>
    58d8:	20 ff       	sbrs	r18, 0
    58da:	16 c0       	rjmp	.+44     	; 0x5908 <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    58dc:	ef e0       	ldi	r30, 0x0F	; 15
    58de:	f7 e2       	ldi	r31, 0x27	; 39
    58e0:	31 97       	sbiw	r30, 0x01	; 1
    58e2:	f1 f7       	brne	.-4      	; 0x58e0 <_Z13reed_debouncePVhh+0x1a>
    58e4:	00 c0       	rjmp	.+0      	; 0x58e6 <_Z13reed_debouncePVhh+0x20>
    58e6:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    58e8:	fc 01       	movw	r30, r24
    58ea:	80 81       	ld	r24, Z
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	02 c0       	rjmp	.+4      	; 0x58f4 <_Z13reed_debouncePVhh+0x2e>
    58f0:	95 95       	asr	r25
    58f2:	87 95       	ror	r24
    58f4:	6a 95       	dec	r22
    58f6:	e2 f7       	brpl	.-8      	; 0x58f0 <_Z13reed_debouncePVhh+0x2a>
    58f8:	80 fd       	sbrc	r24, 0
    58fa:	08 c0       	rjmp	.+16     	; 0x590c <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    58fc:	f2 e0       	ldi	r31, 0x02	; 2
    58fe:	fa 95       	dec	r31
    5900:	f1 f7       	brne	.-4      	; 0x58fe <_Z13reed_debouncePVhh+0x38>
    5902:	00 c0       	rjmp	.+0      	; 0x5904 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	08 95       	ret
		}
	}
	return 0;
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	08 95       	ret
    590c:	80 e0       	ldi	r24, 0x00	; 0
}
    590e:	08 95       	ret

00005910 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    5910:	cf 92       	push	r12
    5912:	df 92       	push	r13
    5914:	ef 92       	push	r14
    5916:	ff 92       	push	r15
    5918:	cf 93       	push	r28
    591a:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    591c:	e4 e8       	ldi	r30, 0x84	; 132
    591e:	f0 e0       	ldi	r31, 0x00	; 0
    5920:	c0 81       	ld	r28, Z
    5922:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    5924:	11 82       	std	Z+1, r1	; 0x01
    5926:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    5928:	2b ed       	ldi	r18, 0xDB	; 219
    592a:	3f e0       	ldi	r19, 0x0F	; 15
    592c:	49 e4       	ldi	r20, 0x49	; 73
    592e:	50 e4       	ldi	r21, 0x40	; 64
    5930:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    5934:	26 e6       	ldi	r18, 0x66	; 102
    5936:	36 e6       	ldi	r19, 0x66	; 102
    5938:	46 e6       	ldi	r20, 0x66	; 102
    593a:	50 e4       	ldi	r21, 0x40	; 64
    593c:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    5940:	6b 01       	movw	r12, r22
    5942:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    5944:	be 01       	movw	r22, r28
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__floatunsisf>
    594e:	20 e0       	ldi	r18, 0x00	; 0
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	40 e0       	ldi	r20, 0x00	; 0
    5954:	5e e3       	ldi	r21, 0x3E	; 62
    5956:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    595a:	2d eb       	ldi	r18, 0xBD	; 189
    595c:	37 e3       	ldi	r19, 0x37	; 55
    595e:	46 e8       	ldi	r20, 0x86	; 134
    5960:	5a e3       	ldi	r21, 0x3A	; 58
    5962:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    5966:	2a e0       	ldi	r18, 0x0A	; 10
    5968:	37 ed       	ldi	r19, 0xD7	; 215
    596a:	43 ea       	ldi	r20, 0xA3	; 163
    596c:	5b e3       	ldi	r21, 0x3B	; 59
    596e:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    5972:	9b 01       	movw	r18, r22
    5974:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    5976:	c7 01       	movw	r24, r14
    5978:	b6 01       	movw	r22, r12
    597a:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    597e:	20 91 83 08 	lds	r18, 0x0883
    5982:	30 91 84 08 	lds	r19, 0x0884
    5986:	40 91 85 08 	lds	r20, 0x0885
    598a:	50 91 86 08 	lds	r21, 0x0886
    598e:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
	geschw /= 2.0;
    5992:	20 e0       	ldi	r18, 0x00	; 0
    5994:	30 e0       	ldi	r19, 0x00	; 0
    5996:	40 e0       	ldi	r20, 0x00	; 0
    5998:	5f e3       	ldi	r21, 0x3F	; 63
    599a:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    599e:	6b 01       	movw	r12, r22
    59a0:	7c 01       	movw	r14, r24
	if (geschw >=160)
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	40 e2       	ldi	r20, 0x20	; 32
    59a8:	53 e4       	ldi	r21, 0x43	; 67
    59aa:	0e 94 82 40 	call	0x8104	; 0x8104 <__gesf2>
    59ae:	88 23       	and	r24, r24
    59b0:	4c f4       	brge	.+18     	; 0x59c4 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    59b2:	c0 92 83 08 	sts	0x0883, r12
    59b6:	d0 92 84 08 	sts	0x0884, r13
    59ba:	e0 92 85 08 	sts	0x0885, r14
    59be:	f0 92 86 08 	sts	0x0886, r15
    59c2:	08 c0       	rjmp	.+16     	; 0x59d4 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    59c4:	10 92 83 08 	sts	0x0883, r1
    59c8:	10 92 84 08 	sts	0x0884, r1
    59cc:	10 92 85 08 	sts	0x0885, r1
    59d0:	10 92 86 08 	sts	0x0886, r1
	}
}
    59d4:	df 91       	pop	r29
    59d6:	cf 91       	pop	r28
    59d8:	ff 90       	pop	r15
    59da:	ef 90       	pop	r14
    59dc:	df 90       	pop	r13
    59de:	cf 90       	pop	r12
    59e0:	08 95       	ret

000059e2 <get_fattime>:

FATFS FATFS_Obj;
FIL logger;

DWORD get_fattime (void)
{
    59e2:	0f 93       	push	r16
    59e4:	1f 93       	push	r17
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
    59e6:	e2 e1       	ldi	r30, 0x12	; 18
    59e8:	fe e0       	ldi	r31, 0x0E	; 14
    59ea:	24 89       	ldd	r18, Z+20	; 0x14

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
    59ec:	86 89       	ldd	r24, Z+22	; 0x16
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	a0 e0       	ldi	r26, 0x00	; 0
    59f2:	b0 e0       	ldi	r27, 0x00	; 0
    59f4:	07 2e       	mov	r0, r23
    59f6:	75 e1       	ldi	r23, 0x15	; 21
    59f8:	88 0f       	add	r24, r24
    59fa:	99 1f       	adc	r25, r25
    59fc:	aa 1f       	adc	r26, r26
    59fe:	bb 1f       	adc	r27, r27
    5a00:	7a 95       	dec	r23
    5a02:	d1 f7       	brne	.-12     	; 0x59f8 <get_fattime+0x16>
    5a04:	70 2d       	mov	r23, r0
    5a06:	a2 2b       	or	r26, r18
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
    5a08:	40 89       	ldd	r20, Z+16	; 0x10
    5a0a:	50 e0       	ldi	r21, 0x00	; 0
    5a0c:	60 e0       	ldi	r22, 0x00	; 0
    5a0e:	70 e0       	ldi	r23, 0x00	; 0
    5a10:	03 2e       	mov	r0, r19
    5a12:	3b e0       	ldi	r19, 0x0B	; 11
    5a14:	44 0f       	add	r20, r20
    5a16:	55 1f       	adc	r21, r21
    5a18:	66 1f       	adc	r22, r22
    5a1a:	77 1f       	adc	r23, r23
    5a1c:	3a 95       	dec	r19
    5a1e:	d1 f7       	brne	.-12     	; 0x5a14 <get_fattime+0x32>
    5a20:	30 2d       	mov	r19, r0
    5a22:	84 2b       	or	r24, r20
    5a24:	95 2b       	or	r25, r21
    5a26:	a6 2b       	or	r26, r22
    5a28:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Minuten << 5)
    5a2a:	41 89       	ldd	r20, Z+17	; 0x11
    5a2c:	50 e0       	ldi	r21, 0x00	; 0
    5a2e:	60 e0       	ldi	r22, 0x00	; 0
    5a30:	70 e0       	ldi	r23, 0x00	; 0
    5a32:	44 0f       	add	r20, r20
    5a34:	55 1f       	adc	r21, r21
    5a36:	66 1f       	adc	r22, r22
    5a38:	77 1f       	adc	r23, r23
    5a3a:	44 0f       	add	r20, r20
    5a3c:	55 1f       	adc	r21, r21
    5a3e:	66 1f       	adc	r22, r22
    5a40:	77 1f       	adc	r23, r23
    5a42:	44 0f       	add	r20, r20
    5a44:	55 1f       	adc	r21, r21
    5a46:	66 1f       	adc	r22, r22
    5a48:	77 1f       	adc	r23, r23
    5a4a:	44 0f       	add	r20, r20
    5a4c:	55 1f       	adc	r21, r21
    5a4e:	66 1f       	adc	r22, r22
    5a50:	77 1f       	adc	r23, r23
    5a52:	44 0f       	add	r20, r20
    5a54:	55 1f       	adc	r21, r21
    5a56:	66 1f       	adc	r22, r22
    5a58:	77 1f       	adc	r23, r23
    5a5a:	84 2b       	or	r24, r20
    5a5c:	95 2b       	or	r25, r21
    5a5e:	a6 2b       	or	r26, r22
    5a60:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Sekunden >> 1);
    5a62:	42 89       	ldd	r20, Z+18	; 0x12
    5a64:	50 e0       	ldi	r21, 0x00	; 0
    5a66:	60 e0       	ldi	r22, 0x00	; 0
    5a68:	70 e0       	ldi	r23, 0x00	; 0
    5a6a:	76 95       	lsr	r23
    5a6c:	67 95       	ror	r22
    5a6e:	57 95       	ror	r21
    5a70:	47 95       	ror	r20
    5a72:	48 2b       	or	r20, r24
    5a74:	59 2b       	or	r21, r25
    5a76:	6a 2b       	or	r22, r26
    5a78:	7b 2b       	or	r23, r27
FIL logger;

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
    5a7a:	87 89       	ldd	r24, Z+23	; 0x17
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	44 96       	adiw	r24, 0x14	; 20
    5a80:	09 2e       	mov	r0, r25
    5a82:	00 0c       	add	r0, r0
    5a84:	aa 0b       	sbc	r26, r26
    5a86:	bb 0b       	sbc	r27, r27
    5a88:	07 2e       	mov	r0, r23
    5a8a:	79 e1       	ldi	r23, 0x19	; 25
    5a8c:	88 0f       	add	r24, r24
    5a8e:	99 1f       	adc	r25, r25
    5a90:	aa 1f       	adc	r26, r26
    5a92:	bb 1f       	adc	r27, r27
    5a94:	7a 95       	dec	r23
    5a96:	d1 f7       	brne	.-12     	; 0x5a8c <get_fattime+0xaa>
    5a98:	70 2d       	mov	r23, r0
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
    5a9a:	8a 01       	movw	r16, r20
    5a9c:	9b 01       	movw	r18, r22
    5a9e:	08 2b       	or	r16, r24
    5aa0:	19 2b       	or	r17, r25
    5aa2:	2a 2b       	or	r18, r26
    5aa4:	3b 2b       	or	r19, r27
    5aa6:	c9 01       	movw	r24, r18
    5aa8:	b8 01       	movw	r22, r16
}
    5aaa:	1f 91       	pop	r17
    5aac:	0f 91       	pop	r16
    5aae:	08 95       	ret

00005ab0 <_Z15initialisierungv>:
		maininterupthandler(Folien[position],Tastatur.unified());
		gpshandler();
    }
}

void initialisierung(){	
    5ab0:	ff 92       	push	r15
    5ab2:	0f 93       	push	r16
    5ab4:	1f 93       	push	r17
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
    5aba:	cd b7       	in	r28, 0x3d	; 61
    5abc:	de b7       	in	r29, 0x3e	; 62
    5abe:	a9 97       	sbiw	r28, 0x29	; 41
    5ac0:	0f b6       	in	r0, 0x3f	; 63
    5ac2:	f8 94       	cli
    5ac4:	de bf       	out	0x3e, r29	; 62
    5ac6:	0f be       	out	0x3f, r0	; 63
    5ac8:	cd bf       	out	0x3d, r28	; 61
	//nullen der Flagregister
	anzeige=0;
    5aca:	10 92 e6 08 	sts	0x08E6, r1
	statusreg=0;
    5ace:	10 92 e5 08 	sts	0x08E5, r1
	position=0;
    5ad2:	10 92 e4 08 	sts	0x08E4, r1
	FPS=0;
    5ad6:	10 92 e3 08 	sts	0x08E3, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    5ada:	10 92 85 00 	sts	0x0085, r1
    5ade:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    5ae2:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    5ae6:	85 e0       	ldi	r24, 0x05	; 5
    5ae8:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    5aec:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    5aee:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    5af0:	80 e4       	ldi	r24, 0x40	; 64
    5af2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    5af6:	ea e7       	ldi	r30, 0x7A	; 122
    5af8:	f0 e0       	ldi	r31, 0x00	; 0
    5afa:	83 e0       	ldi	r24, 0x03	; 3
    5afc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    5afe:	80 81       	ld	r24, Z
    5b00:	80 68       	ori	r24, 0x80	; 128
    5b02:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    5b04:	80 81       	ld	r24, Z
    5b06:	80 64       	ori	r24, 0x40	; 64
    5b08:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    5b0a:	80 81       	ld	r24, Z
    5b0c:	18 2f       	mov	r17, r24
    5b0e:	10 74       	andi	r17, 0x40	; 64
    5b10:	86 fd       	sbrc	r24, 6
    5b12:	fb cf       	rjmp	.-10     	; 0x5b0a <_Z15initialisierungv+0x5a>
	(void) ADCW;
    5b14:	80 91 78 00 	lds	r24, 0x0078
    5b18:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    5b1c:	89 b1       	in	r24, 0x09	; 9
    5b1e:	89 7f       	andi	r24, 0xF9	; 249
    5b20:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    5b22:	8a b1       	in	r24, 0x0a	; 10
    5b24:	89 7f       	andi	r24, 0xF9	; 249
    5b26:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    5b28:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    5b2c:	83 e3       	ldi	r24, 0x33	; 51
    5b2e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    5b32:	86 e0       	ldi	r24, 0x06	; 6
    5b34:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    5b38:	80 e8       	ldi	r24, 0x80	; 128
    5b3a:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    5b3e:	10 92 99 08 	sts	0x0899, r1
	gpsstatus = (1<<fix);
    5b42:	80 93 e2 08 	sts	0x08E2, r24
	lat = 0;
    5b46:	10 92 95 08 	sts	0x0895, r1
    5b4a:	10 92 96 08 	sts	0x0896, r1
    5b4e:	10 92 97 08 	sts	0x0897, r1
    5b52:	10 92 98 08 	sts	0x0898, r1
	lon = 0;
    5b56:	10 92 91 08 	sts	0x0891, r1
    5b5a:	10 92 92 08 	sts	0x0892, r1
    5b5e:	10 92 93 08 	sts	0x0893, r1
    5b62:	10 92 94 08 	sts	0x0894, r1
	gpsspeed = 0;
    5b66:	10 92 8d 08 	sts	0x088D, r1
    5b6a:	10 92 8e 08 	sts	0x088E, r1
    5b6e:	10 92 8f 08 	sts	0x088F, r1
    5b72:	10 92 90 08 	sts	0x0890, r1
	gpsstunde = 0;
    5b76:	10 92 8c 08 	sts	0x088C, r1
	gpsminute = 0;
    5b7a:	10 92 8b 08 	sts	0x088B, r1
	gpssekunde = 0;
    5b7e:	10 92 8a 08 	sts	0x088A, r1
	gpsTag = 0;
    5b82:	10 92 89 08 	sts	0x0889, r1
	gpsMonat = 0;
    5b86:	10 92 88 08 	sts	0x0888, r1
	gpsJahr = 0;
    5b8a:	10 92 87 08 	sts	0x0887, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    5b8e:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    5b90:	81 e1       	ldi	r24, 0x11	; 17
    5b92:	9a e0       	ldi	r25, 0x0A	; 10
    5b94:	99 8f       	std	Y+25, r25	; 0x19
    5b96:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    5b98:	82 e1       	ldi	r24, 0x12	; 18
    5b9a:	9e e0       	ldi	r25, 0x0E	; 14
    5b9c:	9b 8f       	std	Y+27, r25	; 0x1b
    5b9e:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    5ba0:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    5ba2:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    5ba4:	81 e0       	ldi	r24, 0x01	; 1
    5ba6:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    5ba8:	8e e0       	ldi	r24, 0x0E	; 14
    5baa:	94 e0       	ldi	r25, 0x04	; 4
    5bac:	9a 83       	std	Y+2, r25	; 0x02
    5bae:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    5bb0:	81 e1       	ldi	r24, 0x11	; 17
    5bb2:	9a e0       	ldi	r25, 0x0A	; 10
    5bb4:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    5bb8:	8f e0       	ldi	r24, 0x0F	; 15
    5bba:	e6 e9       	ldi	r30, 0x96	; 150
    5bbc:	f1 e0       	ldi	r31, 0x01	; 1
    5bbe:	de 01       	movw	r26, r28
    5bc0:	13 96       	adiw	r26, 0x03	; 3
    5bc2:	01 90       	ld	r0, Z+
    5bc4:	0d 92       	st	X+, r0
    5bc6:	8a 95       	dec	r24
    5bc8:	e1 f7       	brne	.-8      	; 0x5bc2 <_Z15initialisierungv+0x112>
    5bca:	8e e0       	ldi	r24, 0x0E	; 14
    5bcc:	8f 8b       	std	Y+23, r24	; 0x17
    5bce:	f1 2e       	mov	r15, r17
    5bd0:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    5bd2:	e3 e0       	ldi	r30, 0x03	; 3
    5bd4:	f0 e0       	ldi	r31, 0x00	; 0
    5bd6:	ec 0f       	add	r30, r28
    5bd8:	fd 1f       	adc	r31, r29
    5bda:	e0 0f       	add	r30, r16
    5bdc:	f1 1d       	adc	r31, r1
    5bde:	20 e0       	ldi	r18, 0x00	; 0
    5be0:	4f 2d       	mov	r20, r15
    5be2:	60 81       	ld	r22, Z
    5be4:	88 8d       	ldd	r24, Y+24	; 0x18
    5be6:	99 8d       	ldd	r25, Y+25	; 0x19
    5be8:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    5bec:	0f 5f       	subi	r16, 0xFF	; 255
    5bee:	26 e0       	ldi	r18, 0x06	; 6
    5bf0:	f2 0e       	add	r15, r18
    5bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    5bf4:	08 17       	cp	r16, r24
    5bf6:	68 f3       	brcs	.-38     	; 0x5bd2 <_Z15initialisierungv+0x122>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    5bf8:	8f e0       	ldi	r24, 0x0F	; 15
    5bfa:	e5 ea       	ldi	r30, 0xA5	; 165
    5bfc:	f1 e0       	ldi	r31, 0x01	; 1
    5bfe:	de 01       	movw	r26, r28
    5c00:	13 96       	adiw	r26, 0x03	; 3
    5c02:	01 90       	ld	r0, Z+
    5c04:	0d 92       	st	X+, r0
    5c06:	8a 95       	dec	r24
    5c08:	e1 f7       	brne	.-8      	; 0x5c02 <_Z15initialisierungv+0x152>
    5c0a:	8e e0       	ldi	r24, 0x0E	; 14
    5c0c:	8f 8b       	std	Y+23, r24	; 0x17
    5c0e:	f1 2e       	mov	r15, r17
    5c10:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    5c12:	e3 e0       	ldi	r30, 0x03	; 3
    5c14:	f0 e0       	ldi	r31, 0x00	; 0
    5c16:	ec 0f       	add	r30, r28
    5c18:	fd 1f       	adc	r31, r29
    5c1a:	e0 0f       	add	r30, r16
    5c1c:	f1 1d       	adc	r31, r1
    5c1e:	28 e0       	ldi	r18, 0x08	; 8
    5c20:	4f 2d       	mov	r20, r15
    5c22:	60 81       	ld	r22, Z
    5c24:	88 8d       	ldd	r24, Y+24	; 0x18
    5c26:	99 8d       	ldd	r25, Y+25	; 0x19
    5c28:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    5c2c:	0f 5f       	subi	r16, 0xFF	; 255
    5c2e:	36 e0       	ldi	r19, 0x06	; 6
    5c30:	f3 0e       	add	r15, r19
    5c32:	8f 89       	ldd	r24, Y+23	; 0x17
    5c34:	08 17       	cp	r16, r24
    5c36:	68 f3       	brcs	.-38     	; 0x5c12 <_Z15initialisierungv+0x162>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    5c38:	80 e4       	ldi	r24, 0x40	; 64
    5c3a:	8f 93       	push	r24
    5c3c:	81 e4       	ldi	r24, 0x41	; 65
    5c3e:	8f 93       	push	r24
    5c40:	8b ee       	ldi	r24, 0xEB	; 235
    5c42:	8f 93       	push	r24
    5c44:	85 e8       	ldi	r24, 0x85	; 133
    5c46:	8f 93       	push	r24
    5c48:	84 eb       	ldi	r24, 0xB4	; 180
    5c4a:	91 e0       	ldi	r25, 0x01	; 1
    5c4c:	9f 93       	push	r25
    5c4e:	8f 93       	push	r24
    5c50:	ce 01       	movw	r24, r28
    5c52:	03 96       	adiw	r24, 0x03	; 3
    5c54:	9f 93       	push	r25
    5c56:	8f 93       	push	r24
    5c58:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    5c5c:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    5c5e:	0f b6       	in	r0, 0x3f	; 63
    5c60:	f8 94       	cli
    5c62:	de bf       	out	0x3e, r29	; 62
    5c64:	0f be       	out	0x3f, r0	; 63
    5c66:	cd bf       	out	0x3d, r28	; 61
    5c68:	88 23       	and	r24, r24
    5c6a:	99 f0       	breq	.+38     	; 0x5c92 <_Z15initialisierungv+0x1e2>
    5c6c:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    5c6e:	e3 e0       	ldi	r30, 0x03	; 3
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	ec 0f       	add	r30, r28
    5c74:	fd 1f       	adc	r31, r29
    5c76:	e0 0f       	add	r30, r16
    5c78:	f1 1d       	adc	r31, r1
    5c7a:	20 e2       	ldi	r18, 0x20	; 32
    5c7c:	41 2f       	mov	r20, r17
    5c7e:	60 81       	ld	r22, Z
    5c80:	88 8d       	ldd	r24, Y+24	; 0x18
    5c82:	99 8d       	ldd	r25, Y+25	; 0x19
    5c84:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    5c88:	0f 5f       	subi	r16, 0xFF	; 255
    5c8a:	1a 5f       	subi	r17, 0xFA	; 250
    5c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c8e:	08 17       	cp	r16, r24
    5c90:	70 f3       	brcs	.-36     	; 0x5c6e <_Z15initialisierungv+0x1be>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5c92:	88 8d       	ldd	r24, Y+24	; 0x18
    5c94:	99 8d       	ldd	r25, Y+25	; 0x19
    5c96:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    5c9a:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5c9c:	ff e7       	ldi	r31, 0x7F	; 127
    5c9e:	28 e3       	ldi	r18, 0x38	; 56
    5ca0:	31 e0       	ldi	r19, 0x01	; 1
    5ca2:	f1 50       	subi	r31, 0x01	; 1
    5ca4:	20 40       	sbci	r18, 0x00	; 0
    5ca6:	30 40       	sbci	r19, 0x00	; 0
    5ca8:	e1 f7       	brne	.-8      	; 0x5ca2 <_Z15initialisierungv+0x1f2>
    5caa:	00 c0       	rjmp	.+0      	; 0x5cac <_Z15initialisierungv+0x1fc>
    5cac:	00 00       	nop
    5cae:	9f e7       	ldi	r25, 0x7F	; 127
    5cb0:	e8 e3       	ldi	r30, 0x38	; 56
    5cb2:	f1 e0       	ldi	r31, 0x01	; 1
    5cb4:	91 50       	subi	r25, 0x01	; 1
    5cb6:	e0 40       	sbci	r30, 0x00	; 0
    5cb8:	f0 40       	sbci	r31, 0x00	; 0
    5cba:	e1 f7       	brne	.-8      	; 0x5cb4 <_Z15initialisierungv+0x204>
    5cbc:	00 c0       	rjmp	.+0      	; 0x5cbe <_Z15initialisierungv+0x20e>
    5cbe:	00 00       	nop
    5cc0:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    5cc2:	61 f7       	brne	.-40     	; 0x5c9c <_Z15initialisierungv+0x1ec>
		_delay_ms(50);
		_delay_ms(50);
	}

	//letzten Zeitpunkt holen und RTC starten
	rtc.Sekunden= 0;
    5cc4:	02 e1       	ldi	r16, 0x12	; 18
    5cc6:	1e e0       	ldi	r17, 0x0E	; 14
    5cc8:	f8 01       	movw	r30, r16
    5cca:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    5ccc:	80 e0       	ldi	r24, 0x00	; 0
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	0e dd       	rcall	.-1508   	; 0x56ee <_Z11EEPROM_Readj>
    5cd2:	f8 01       	movw	r30, r16
    5cd4:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    5cd6:	81 e0       	ldi	r24, 0x01	; 1
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	09 dd       	rcall	.-1518   	; 0x56ee <_Z11EEPROM_Readj>
    5cdc:	f8 01       	movw	r30, r16
    5cde:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    5ce0:	82 e0       	ldi	r24, 0x02	; 2
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	04 dd       	rcall	.-1528   	; 0x56ee <_Z11EEPROM_Readj>
    5ce6:	f8 01       	movw	r30, r16
    5ce8:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    5cea:	83 e0       	ldi	r24, 0x03	; 3
    5cec:	90 e0       	ldi	r25, 0x00	; 0
    5cee:	ff dc       	rcall	.-1538   	; 0x56ee <_Z11EEPROM_Readj>
    5cf0:	f8 01       	movw	r30, r16
    5cf2:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    5cf4:	84 e0       	ldi	r24, 0x04	; 4
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	fa dc       	rcall	.-1548   	; 0x56ee <_Z11EEPROM_Readj>
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    5cfe:	c8 01       	movw	r24, r16
    5d00:	0e 94 70 3d 	call	0x7ae0	; 0x7ae0 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    5d04:	c8 01       	movw	r24, r16
    5d06:	0e 94 51 3e 	call	0x7ca2	; 0x7ca2 <_ZN3RTC8RTCstartEv>
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    5d0a:	80 b7       	in	r24, 0x30	; 48
    5d0c:	80 68       	ori	r24, 0x80	; 128
    5d0e:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    5d10:	e1 ec       	ldi	r30, 0xC1	; 193
    5d12:	f0 e0       	ldi	r31, 0x00	; 0
    5d14:	80 81       	ld	r24, Z
    5d16:	80 61       	ori	r24, 0x10	; 16
    5d18:	80 83       	st	Z, r24
	
	//SD Karten timer init
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mode
    5d1a:	82 e0       	ldi	r24, 0x02	; 2
    5d1c:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    5d1e:	86 e2       	ldi	r24, 0x26	; 38
    5d20:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    5d22:	ee e6       	ldi	r30, 0x6E	; 110
    5d24:	f0 e0       	ldi	r31, 0x00	; 0
    5d26:	80 81       	ld	r24, Z
    5d28:	82 60       	ori	r24, 0x02	; 2
    5d2a:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    5d2c:	85 b5       	in	r24, 0x25	; 37
    5d2e:	85 60       	ori	r24, 0x05	; 5
    5d30:	85 bd       	out	0x25, r24	; 37
	sei();
    5d32:	78 94       	sei
}
    5d34:	a9 96       	adiw	r28, 0x29	; 41
    5d36:	0f b6       	in	r0, 0x3f	; 63
    5d38:	f8 94       	cli
    5d3a:	de bf       	out	0x3e, r29	; 62
    5d3c:	0f be       	out	0x3f, r0	; 63
    5d3e:	cd bf       	out	0x3d, r28	; 61
    5d40:	df 91       	pop	r29
    5d42:	cf 91       	pop	r28
    5d44:	1f 91       	pop	r17
    5d46:	0f 91       	pop	r16
    5d48:	ff 90       	pop	r15
    5d4a:	08 95       	ret

00005d4c <_Z19maininterupthandlerP7monitorh>:

void maininterupthandler(monitor *mon, uint8_t taste){
    5d4c:	af 92       	push	r10
    5d4e:	bf 92       	push	r11
    5d50:	cf 92       	push	r12
    5d52:	df 92       	push	r13
    5d54:	ef 92       	push	r14
    5d56:	ff 92       	push	r15
    5d58:	0f 93       	push	r16
    5d5a:	1f 93       	push	r17
    5d5c:	cf 93       	push	r28
    5d5e:	df 93       	push	r29
    5d60:	cd b7       	in	r28, 0x3d	; 61
    5d62:	de b7       	in	r29, 0x3e	; 62
    5d64:	2d 97       	sbiw	r28, 0x0d	; 13
    5d66:	0f b6       	in	r0, 0x3f	; 63
    5d68:	f8 94       	cli
    5d6a:	de bf       	out	0x3e, r29	; 62
    5d6c:	0f be       	out	0x3f, r0	; 63
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	8c 01       	movw	r16, r24
    5d72:	6d 87       	std	Y+13, r22	; 0x0d
	if (taste!=' ')
    5d74:	60 32       	cpi	r22, 0x20	; 32
    5d76:	09 f4       	brne	.+2      	; 0x5d7a <_Z19maininterupthandlerP7monitorh+0x2e>
    5d78:	87 c0       	rjmp	.+270    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
	{
		anzeige |= (1<<refreshdisplay);
    5d7a:	80 91 e6 08 	lds	r24, 0x08E6
    5d7e:	81 60       	ori	r24, 0x01	; 1
    5d80:	80 93 e6 08 	sts	0x08E6, r24
		switch (taste)							//Tastendruck ueberpruefen
    5d84:	46 2f       	mov	r20, r22
    5d86:	50 e0       	ldi	r21, 0x00	; 0
    5d88:	fa 01       	movw	r30, r20
    5d8a:	f0 97       	sbiw	r30, 0x30	; 48
    5d8c:	e6 34       	cpi	r30, 0x46	; 70
    5d8e:	f1 05       	cpc	r31, r1
    5d90:	08 f0       	brcs	.+2      	; 0x5d94 <_Z19maininterupthandlerP7monitorh+0x48>
    5d92:	6f c0       	rjmp	.+222    	; 0x5e72 <_Z19maininterupthandlerP7monitorh+0x126>
    5d94:	e5 55       	subi	r30, 0x55	; 85
    5d96:	ff 4f       	sbci	r31, 0xFF	; 255
    5d98:	0c 94 15 46 	jmp	0x8c2a	; 0x8c2a <__tablejump2__>
		{
			case 'm':
				position = numberofpages;
    5d9c:	85 e0       	ldi	r24, 0x05	; 5
    5d9e:	80 93 e4 08 	sts	0x08E4, r24
				break;
    5da2:	2c c1       	rjmp	.+600    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
			case 'l':
				if (mon->posx==0)
    5da4:	d8 01       	movw	r26, r16
    5da6:	96 96       	adiw	r26, 0x26	; 38
    5da8:	8c 91       	ld	r24, X
    5daa:	81 11       	cpse	r24, r1
    5dac:	04 c0       	rjmp	.+8      	; 0x5db6 <_Z19maininterupthandlerP7monitorh+0x6a>
				{
					position = numberofpages;
    5dae:	85 e0       	ldi	r24, 0x05	; 5
    5db0:	80 93 e4 08 	sts	0x08E4, r24
    5db4:	23 c1       	rjmp	.+582    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
				}
				else{
					mon->posx--;
    5db6:	81 50       	subi	r24, 0x01	; 1
    5db8:	f8 01       	movw	r30, r16
    5dba:	86 a3       	std	Z+38, r24	; 0x26
    5dbc:	65 c0       	rjmp	.+202    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				break;
			case 'r':
				if (position==numberofpages)
    5dbe:	80 91 e4 08 	lds	r24, 0x08E4
    5dc2:	85 30       	cpi	r24, 0x05	; 5
    5dc4:	31 f4       	brne	.+12     	; 0x5dd2 <_Z19maininterupthandlerP7monitorh+0x86>
				{
					position=mon->posy;
    5dc6:	d8 01       	movw	r26, r16
    5dc8:	95 96       	adiw	r26, 0x25	; 37
    5dca:	8c 91       	ld	r24, X
    5dcc:	80 93 e4 08 	sts	0x08E4, r24
    5dd0:	5b c0       	rjmp	.+182    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				else if (!(mon->posx >= mon->maxentriesx))
    5dd2:	f8 01       	movw	r30, r16
    5dd4:	86 a1       	ldd	r24, Z+38	; 0x26
    5dd6:	90 a5       	ldd	r25, Z+40	; 0x28
    5dd8:	89 17       	cp	r24, r25
    5dda:	08 f0       	brcs	.+2      	; 0x5dde <_Z19maininterupthandlerP7monitorh+0x92>
    5ddc:	55 c0       	rjmp	.+170    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				{
					mon->posx++;
    5dde:	8f 5f       	subi	r24, 0xFF	; 255
    5de0:	86 a3       	std	Z+38, r24	; 0x26
    5de2:	52 c0       	rjmp	.+164    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				break;
				case 'o':
					if (position==numberofpages)
    5de4:	80 91 e4 08 	lds	r24, 0x08E4
    5de8:	85 30       	cpi	r24, 0x05	; 5
    5dea:	31 f4       	brne	.+12     	; 0x5df8 <_Z19maininterupthandlerP7monitorh+0xac>
					{
						position=mon->posy;
    5dec:	d8 01       	movw	r26, r16
    5dee:	95 96       	adiw	r26, 0x25	; 37
    5df0:	8c 91       	ld	r24, X
    5df2:	80 93 e4 08 	sts	0x08E4, r24
    5df6:	48 c0       	rjmp	.+144    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
					}
					else if (!(mon->posx >= mon->maxentriesx))
    5df8:	f8 01       	movw	r30, r16
    5dfa:	86 a1       	ldd	r24, Z+38	; 0x26
    5dfc:	90 a5       	ldd	r25, Z+40	; 0x28
    5dfe:	89 17       	cp	r24, r25
    5e00:	08 f0       	brcs	.+2      	; 0x5e04 <_Z19maininterupthandlerP7monitorh+0xb8>
    5e02:	42 c0       	rjmp	.+132    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
					{
						mon->posx++;
    5e04:	8f 5f       	subi	r24, 0xFF	; 255
    5e06:	86 a3       	std	Z+38, r24	; 0x26
    5e08:	3f c0       	rjmp	.+126    	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
					}
					break;
			case 'd':
				if (!(mon->posy >= mon->maxentries-1))
    5e0a:	d8 01       	movw	r26, r16
    5e0c:	95 96       	adiw	r26, 0x25	; 37
    5e0e:	2c 91       	ld	r18, X
    5e10:	95 97       	sbiw	r26, 0x25	; 37
    5e12:	42 2f       	mov	r20, r18
    5e14:	50 e0       	ldi	r21, 0x00	; 0
    5e16:	97 96       	adiw	r26, 0x27	; 39
    5e18:	8c 91       	ld	r24, X
    5e1a:	97 97       	sbiw	r26, 0x27	; 39
    5e1c:	90 e0       	ldi	r25, 0x00	; 0
    5e1e:	01 97       	sbiw	r24, 0x01	; 1
    5e20:	48 17       	cp	r20, r24
    5e22:	59 07       	cpc	r21, r25
    5e24:	24 f4       	brge	.+8      	; 0x5e2e <_Z19maininterupthandlerP7monitorh+0xe2>
				{
					mon->posy++;
    5e26:	2f 5f       	subi	r18, 0xFF	; 255
    5e28:	95 96       	adiw	r26, 0x25	; 37
    5e2a:	2c 93       	st	X, r18
    5e2c:	2d c0       	rjmp	.+90     	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				else{
					mon->posy = 0;
    5e2e:	f8 01       	movw	r30, r16
    5e30:	15 a2       	std	Z+37, r1	; 0x25
    5e32:	2a c0       	rjmp	.+84     	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				break;
			case 'u':
				if (!(mon->posy == 0))
    5e34:	d8 01       	movw	r26, r16
    5e36:	95 96       	adiw	r26, 0x25	; 37
    5e38:	8c 91       	ld	r24, X
    5e3a:	95 97       	sbiw	r26, 0x25	; 37
    5e3c:	88 23       	and	r24, r24
    5e3e:	21 f0       	breq	.+8      	; 0x5e48 <_Z19maininterupthandlerP7monitorh+0xfc>
				{
					mon->posy--;
    5e40:	81 50       	subi	r24, 0x01	; 1
    5e42:	95 96       	adiw	r26, 0x25	; 37
    5e44:	8c 93       	st	X, r24
    5e46:	20 c0       	rjmp	.+64     	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				else{
					mon->posy=mon->maxentries-1;
    5e48:	f8 01       	movw	r30, r16
    5e4a:	87 a1       	ldd	r24, Z+39	; 0x27
    5e4c:	81 50       	subi	r24, 0x01	; 1
    5e4e:	85 a3       	std	Z+37, r24	; 0x25
    5e50:	1b c0       	rjmp	.+54     	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				break;
			case '0':
				//Licht an/aus
				if (LED.ison())
    5e52:	8b ee       	ldi	r24, 0xEB	; 235
    5e54:	98 e0       	ldi	r25, 0x08	; 8
    5e56:	0e 94 a9 3c 	call	0x7952	; 0x7952 <_ZN6Output4isonEv>
    5e5a:	88 23       	and	r24, r24
    5e5c:	29 f0       	breq	.+10     	; 0x5e68 <_Z19maininterupthandlerP7monitorh+0x11c>
				{
					LED.off();
    5e5e:	8b ee       	ldi	r24, 0xEB	; 235
    5e60:	98 e0       	ldi	r25, 0x08	; 8
    5e62:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <_ZN6Output3offEv>
    5e66:	10 c0       	rjmp	.+32     	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				else{
					LED.on();
    5e68:	8b ee       	ldi	r24, 0xEB	; 235
    5e6a:	98 e0       	ldi	r25, 0x08	; 8
    5e6c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <_ZN6Output2onEv>
    5e70:	0b c0       	rjmp	.+22     	; 0x5e88 <_Z19maininterupthandlerP7monitorh+0x13c>
				}
				break;
			default:
				//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
				mon->tastendruck(&taste);
    5e72:	d8 01       	movw	r26, r16
    5e74:	ed 91       	ld	r30, X+
    5e76:	fc 91       	ld	r31, X
    5e78:	01 90       	ld	r0, Z+
    5e7a:	f0 81       	ld	r31, Z
    5e7c:	e0 2d       	mov	r30, r0
    5e7e:	be 01       	movw	r22, r28
    5e80:	63 5f       	subi	r22, 0xF3	; 243
    5e82:	7f 4f       	sbci	r23, 0xFF	; 255
    5e84:	c8 01       	movw	r24, r16
    5e86:	09 95       	icall
				break;
		}
	}
	
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    5e88:	80 91 e4 08 	lds	r24, 0x08E4
    5e8c:	81 30       	cpi	r24, 0x01	; 1
    5e8e:	09 f5       	brne	.+66     	; 0x5ed2 <_Z19maininterupthandlerP7monitorh+0x186>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    5e90:	67 e0       	ldi	r22, 0x07	; 7
    5e92:	80 e2       	ldi	r24, 0x20	; 32
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	17 dd       	rcall	.-1490   	; 0x58c6 <_Z13reed_debouncePVhh>
    5e98:	88 23       	and	r24, r24
    5e9a:	31 f0       	breq	.+12     	; 0x5ea8 <_Z19maininterupthandlerP7monitorh+0x15c>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    5e9c:	63 e3       	ldi	r22, 0x33	; 51
    5e9e:	71 e1       	ldi	r23, 0x11	; 17
    5ea0:	86 e3       	ldi	r24, 0x36	; 54
    5ea2:	9f e3       	ldi	r25, 0x3F	; 63
    5ea4:	35 dd       	rcall	.-1430   	; 0x5910 <_Z15geschwindigkeitf>
    5ea6:	aa c0       	rjmp	.+340    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    5ea8:	80 91 84 00 	lds	r24, 0x0084
    5eac:	90 91 85 00 	lds	r25, 0x0085
    5eb0:	8e 38       	cpi	r24, 0x8E	; 142
    5eb2:	9b 45       	sbci	r25, 0x5B	; 91
    5eb4:	08 f4       	brcc	.+2      	; 0x5eb8 <_Z19maininterupthandlerP7monitorh+0x16c>
    5eb6:	a2 c0       	rjmp	.+324    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
		{
			TCNT1=0;
    5eb8:	10 92 85 00 	sts	0x0085, r1
    5ebc:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    5ec0:	10 92 83 08 	sts	0x0883, r1
    5ec4:	10 92 84 08 	sts	0x0884, r1
    5ec8:	10 92 85 08 	sts	0x0885, r1
    5ecc:	10 92 86 08 	sts	0x0886, r1
    5ed0:	95 c0       	rjmp	.+298    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
		}
	}
	else if (position==3)
    5ed2:	83 30       	cpi	r24, 0x03	; 3
    5ed4:	09 f0       	breq	.+2      	; 0x5ed8 <_Z19maininterupthandlerP7monitorh+0x18c>
    5ed6:	92 c0       	rjmp	.+292    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
	{
		if (mon->posy==3 && mon->posx==1)
    5ed8:	f8 01       	movw	r30, r16
    5eda:	85 a1       	ldd	r24, Z+37	; 0x25
    5edc:	83 30       	cpi	r24, 0x03	; 3
    5ede:	91 f5       	brne	.+100    	; 0x5f44 <_Z19maininterupthandlerP7monitorh+0x1f8>
    5ee0:	86 a1       	ldd	r24, Z+38	; 0x26
    5ee2:	81 30       	cpi	r24, 0x01	; 1
    5ee4:	09 f0       	breq	.+2      	; 0x5ee8 <_Z19maininterupthandlerP7monitorh+0x19c>
    5ee6:	8a c0       	rjmp	.+276    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
		{
			if (!(statusreg&(1<<mounttingstat)))
    5ee8:	80 91 e5 08 	lds	r24, 0x08E5
    5eec:	81 fd       	sbrc	r24, 1
    5eee:	14 c0       	rjmp	.+40     	; 0x5f18 <_Z19maininterupthandlerP7monitorh+0x1cc>
			{
				//mounting sd Karte
				if (disk_initialize(0) == 0)
    5ef0:	80 e0       	ldi	r24, 0x00	; 0
    5ef2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <disk_initialize>
    5ef6:	81 11       	cpse	r24, r1
    5ef8:	1d c0       	rjmp	.+58     	; 0x5f34 <_Z19maininterupthandlerP7monitorh+0x1e8>
				{
					if (f_mount(&FATFS_Obj,"",0) == 0)
    5efa:	40 e0       	ldi	r20, 0x00	; 0
    5efc:	64 ef       	ldi	r22, 0xF4	; 244
    5efe:	72 e0       	ldi	r23, 0x02	; 2
    5f00:	89 e4       	ldi	r24, 0x49	; 73
    5f02:	96 e0       	ldi	r25, 0x06	; 6
    5f04:	0e 94 38 1a 	call	0x3470	; 0x3470 <f_mount>
    5f08:	81 11       	cpse	r24, r1
    5f0a:	14 c0       	rjmp	.+40     	; 0x5f34 <_Z19maininterupthandlerP7monitorh+0x1e8>
					{
						statusreg |= (1<<mounttingstat);
    5f0c:	80 91 e5 08 	lds	r24, 0x08E5
    5f10:	82 60       	ori	r24, 0x02	; 2
    5f12:	80 93 e5 08 	sts	0x08E5, r24
    5f16:	0e c0       	rjmp	.+28     	; 0x5f34 <_Z19maininterupthandlerP7monitorh+0x1e8>
					}
				}
			}
			else if (!(statusreg&(1<<loggingstat)))
    5f18:	82 fd       	sbrc	r24, 2
    5f1a:	0c c0       	rjmp	.+24     	; 0x5f34 <_Z19maininterupthandlerP7monitorh+0x1e8>
			{
				f_mount(0,"",0);
    5f1c:	40 e0       	ldi	r20, 0x00	; 0
    5f1e:	64 ef       	ldi	r22, 0xF4	; 244
    5f20:	72 e0       	ldi	r23, 0x02	; 2
    5f22:	80 e0       	ldi	r24, 0x00	; 0
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	0e 94 38 1a 	call	0x3470	; 0x3470 <f_mount>
				statusreg &= ~(1<<mounttingstat);
    5f2a:	80 91 e5 08 	lds	r24, 0x08E5
    5f2e:	8d 7f       	andi	r24, 0xFD	; 253
    5f30:	80 93 e5 08 	sts	0x08E5, r24
			}
			mon->posx--;
    5f34:	d8 01       	movw	r26, r16
    5f36:	96 96       	adiw	r26, 0x26	; 38
    5f38:	8c 91       	ld	r24, X
    5f3a:	96 97       	sbiw	r26, 0x26	; 38
    5f3c:	81 50       	subi	r24, 0x01	; 1
    5f3e:	96 96       	adiw	r26, 0x26	; 38
    5f40:	8c 93       	st	X, r24
    5f42:	5c c0       	rjmp	.+184    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
		}
		else if (mon->posy==4 && mon->posx==1)
    5f44:	84 30       	cpi	r24, 0x04	; 4
    5f46:	09 f0       	breq	.+2      	; 0x5f4a <_Z19maininterupthandlerP7monitorh+0x1fe>
    5f48:	59 c0       	rjmp	.+178    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
    5f4a:	f8 01       	movw	r30, r16
    5f4c:	86 a1       	ldd	r24, Z+38	; 0x26
    5f4e:	81 30       	cpi	r24, 0x01	; 1
    5f50:	09 f0       	breq	.+2      	; 0x5f54 <_Z19maininterupthandlerP7monitorh+0x208>
    5f52:	54 c0       	rjmp	.+168    	; 0x5ffc <_Z19maininterupthandlerP7monitorh+0x2b0>
		{
			if (!(statusreg&(1<<loggingstat)) && (statusreg&(1<<mounttingstat)) )
    5f54:	80 91 e5 08 	lds	r24, 0x08E5
    5f58:	82 fd       	sbrc	r24, 2
    5f5a:	3c c0       	rjmp	.+120    	; 0x5fd4 <_Z19maininterupthandlerP7monitorh+0x288>
    5f5c:	81 ff       	sbrs	r24, 1
    5f5e:	3a c0       	rjmp	.+116    	; 0x5fd4 <_Z19maininterupthandlerP7monitorh+0x288>
			{
				if (disk_status(0) == 0)
    5f60:	80 e0       	ldi	r24, 0x00	; 0
    5f62:	0e 94 aa 08 	call	0x1154	; 0x1154 <disk_status>
    5f66:	81 11       	cpse	r24, r1
    5f68:	2f c0       	rjmp	.+94     	; 0x5fc8 <_Z19maininterupthandlerP7monitorh+0x27c>
				{
					char name[12];
					sprintf(name,"%02u%02u%02u%02u.txt",rtc.Monat,rtc.Tag,rtc.Stunden,rtc.Minuten);
    5f6a:	e2 e1       	ldi	r30, 0x12	; 18
    5f6c:	fe e0       	ldi	r31, 0x0E	; 14
    5f6e:	81 89       	ldd	r24, Z+17	; 0x11
    5f70:	1f 92       	push	r1
    5f72:	8f 93       	push	r24
    5f74:	80 89       	ldd	r24, Z+16	; 0x10
    5f76:	1f 92       	push	r1
    5f78:	8f 93       	push	r24
    5f7a:	84 89       	ldd	r24, Z+20	; 0x14
    5f7c:	1f 92       	push	r1
    5f7e:	8f 93       	push	r24
    5f80:	86 89       	ldd	r24, Z+22	; 0x16
    5f82:	1f 92       	push	r1
    5f84:	8f 93       	push	r24
    5f86:	80 e6       	ldi	r24, 0x60	; 96
    5f88:	92 e0       	ldi	r25, 0x02	; 2
    5f8a:	9f 93       	push	r25
    5f8c:	8f 93       	push	r24
    5f8e:	9e 01       	movw	r18, r28
    5f90:	2f 5f       	subi	r18, 0xFF	; 255
    5f92:	3f 4f       	sbci	r19, 0xFF	; 255
    5f94:	79 01       	movw	r14, r18
    5f96:	3f 93       	push	r19
    5f98:	2f 93       	push	r18
    5f9a:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
					f_open(&logger, name, FA_OPEN_ALWAYS | FA_WRITE);
    5f9e:	42 e1       	ldi	r20, 0x12	; 18
    5fa0:	b7 01       	movw	r22, r14
    5fa2:	89 e2       	ldi	r24, 0x29	; 41
    5fa4:	94 e0       	ldi	r25, 0x04	; 4
    5fa6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <f_open>
					f_printf(&logger,"#Zeit [s]\tlongitude [1e6]\tLatitude [1e5]\tGPSSpeed [1e2 km/h] \tTacho [1e2 km/h] \tTemperatur [10 C] \tDruck [Pa] \tHoeheSee [10 m]\n");
    5faa:	85 e7       	ldi	r24, 0x75	; 117
    5fac:	92 e0       	ldi	r25, 0x02	; 2
    5fae:	9f 93       	push	r25
    5fb0:	8f 93       	push	r24
    5fb2:	89 e2       	ldi	r24, 0x29	; 41
    5fb4:	94 e0       	ldi	r25, 0x04	; 4
    5fb6:	9f 93       	push	r25
    5fb8:	8f 93       	push	r24
    5fba:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <f_printf>
    5fbe:	0f b6       	in	r0, 0x3f	; 63
    5fc0:	f8 94       	cli
    5fc2:	de bf       	out	0x3e, r29	; 62
    5fc4:	0f be       	out	0x3f, r0	; 63
    5fc6:	cd bf       	out	0x3d, r28	; 61
				}
				
				statusreg |= (1<<loggingstat);
    5fc8:	80 91 e5 08 	lds	r24, 0x08E5
    5fcc:	84 60       	ori	r24, 0x04	; 4
    5fce:	80 93 e5 08 	sts	0x08E5, r24
    5fd2:	0d c0       	rjmp	.+26     	; 0x5fee <_Z19maininterupthandlerP7monitorh+0x2a2>
			}
			else{
				f_sync(&logger);
    5fd4:	89 e2       	ldi	r24, 0x29	; 41
    5fd6:	94 e0       	ldi	r25, 0x04	; 4
    5fd8:	0e 94 13 20 	call	0x4026	; 0x4026 <f_sync>
				f_close(&logger);
    5fdc:	89 e2       	ldi	r24, 0x29	; 41
    5fde:	94 e0       	ldi	r25, 0x04	; 4
    5fe0:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <f_close>
				statusreg &= ~(1<<loggingstat);
    5fe4:	80 91 e5 08 	lds	r24, 0x08E5
    5fe8:	8b 7f       	andi	r24, 0xFB	; 251
    5fea:	80 93 e5 08 	sts	0x08E5, r24
			}
			mon->posx--;
    5fee:	d8 01       	movw	r26, r16
    5ff0:	96 96       	adiw	r26, 0x26	; 38
    5ff2:	8c 91       	ld	r24, X
    5ff4:	96 97       	sbiw	r26, 0x26	; 38
    5ff6:	81 50       	subi	r24, 0x01	; 1
    5ff8:	96 96       	adiw	r26, 0x26	; 38
    5ffa:	8c 93       	st	X, r24
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    5ffc:	80 91 2a 0e 	lds	r24, 0x0E2A
    6000:	81 ff       	sbrs	r24, 1
    6002:	28 c1       	rjmp	.+592    	; 0x6254 <_Z19maininterupthandlerP7monitorh+0x508>
	{
		rtc.zeit();
    6004:	82 e1       	ldi	r24, 0x12	; 18
    6006:	9e e0       	ldi	r25, 0x0E	; 14
    6008:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <_ZN3RTC4zeitEv>
		druck.bmp180_getaltitude();
    600c:	81 ef       	ldi	r24, 0xF1	; 241
    600e:	98 e0       	ldi	r25, 0x08	; 8
    6010:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN6BMP18018bmp180_getaltitudeEv>
		if (position==1)
    6014:	80 91 e4 08 	lds	r24, 0x08E4
    6018:	81 30       	cpi	r24, 0x01	; 1
    601a:	09 f0       	breq	.+2      	; 0x601e <_Z19maininterupthandlerP7monitorh+0x2d2>
    601c:	57 c0       	rjmp	.+174    	; 0x60cc <_Z19maininterupthandlerP7monitorh+0x380>
		{
			if (geschw>maxgeschw)
    601e:	c0 90 83 08 	lds	r12, 0x0883
    6022:	d0 90 84 08 	lds	r13, 0x0884
    6026:	e0 90 85 08 	lds	r14, 0x0885
    602a:	f0 90 86 08 	lds	r15, 0x0886
    602e:	20 91 7b 08 	lds	r18, 0x087B
    6032:	30 91 7c 08 	lds	r19, 0x087C
    6036:	40 91 7d 08 	lds	r20, 0x087D
    603a:	50 91 7e 08 	lds	r21, 0x087E
    603e:	c7 01       	movw	r24, r14
    6040:	b6 01       	movw	r22, r12
    6042:	0e 94 82 40 	call	0x8104	; 0x8104 <__gesf2>
    6046:	18 16       	cp	r1, r24
    6048:	44 f4       	brge	.+16     	; 0x605a <_Z19maininterupthandlerP7monitorh+0x30e>
			{
				maxgeschw=geschw;
    604a:	c0 92 7b 08 	sts	0x087B, r12
    604e:	d0 92 7c 08 	sts	0x087C, r13
    6052:	e0 92 7d 08 	sts	0x087D, r14
    6056:	f0 92 7e 08 	sts	0x087E, r15
			}
			if (geschw >= 1.0)
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	40 e8       	ldi	r20, 0x80	; 128
    6060:	5f e3       	ldi	r21, 0x3F	; 63
    6062:	c7 01       	movw	r24, r14
    6064:	b6 01       	movw	r22, r12
    6066:	0e 94 82 40 	call	0x8104	; 0x8104 <__gesf2>
    606a:	88 23       	and	r24, r24
    606c:	9c f0       	brlt	.+38     	; 0x6094 <_Z19maininterupthandlerP7monitorh+0x348>
			{
				Fahrtzeit++;
    606e:	80 91 77 08 	lds	r24, 0x0877
    6072:	90 91 78 08 	lds	r25, 0x0878
    6076:	a0 91 79 08 	lds	r26, 0x0879
    607a:	b0 91 7a 08 	lds	r27, 0x087A
    607e:	01 96       	adiw	r24, 0x01	; 1
    6080:	a1 1d       	adc	r26, r1
    6082:	b1 1d       	adc	r27, r1
    6084:	80 93 77 08 	sts	0x0877, r24
    6088:	90 93 78 08 	sts	0x0878, r25
    608c:	a0 93 79 08 	sts	0x0879, r26
    6090:	b0 93 7a 08 	sts	0x087A, r27
			}
			strecke+=geschw/3.6;
    6094:	26 e6       	ldi	r18, 0x66	; 102
    6096:	36 e6       	ldi	r19, 0x66	; 102
    6098:	46 e6       	ldi	r20, 0x66	; 102
    609a:	50 e4       	ldi	r21, 0x40	; 64
    609c:	c7 01       	movw	r24, r14
    609e:	b6 01       	movw	r22, r12
    60a0:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    60a4:	9b 01       	movw	r18, r22
    60a6:	ac 01       	movw	r20, r24
    60a8:	60 91 7f 08 	lds	r22, 0x087F
    60ac:	70 91 80 08 	lds	r23, 0x0880
    60b0:	80 91 81 08 	lds	r24, 0x0881
    60b4:	90 91 82 08 	lds	r25, 0x0882
    60b8:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    60bc:	60 93 7f 08 	sts	0x087F, r22
    60c0:	70 93 80 08 	sts	0x0880, r23
    60c4:	80 93 81 08 	sts	0x0881, r24
    60c8:	90 93 82 08 	sts	0x0882, r25
    60cc:	80 91 e5 08 	lds	r24, 0x08E5
    60d0:	86 70       	andi	r24, 0x06	; 6
		}
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    60d2:	86 30       	cpi	r24, 0x06	; 6
    60d4:	09 f0       	breq	.+2      	; 0x60d8 <_Z19maininterupthandlerP7monitorh+0x38c>
    60d6:	b4 c0       	rjmp	.+360    	; 0x6240 <_Z19maininterupthandlerP7monitorh+0x4f4>
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
    60d8:	0f 2e       	mov	r0, r31
    60da:	f2 e1       	ldi	r31, 0x12	; 18
    60dc:	cf 2e       	mov	r12, r31
    60de:	fe e0       	ldi	r31, 0x0E	; 14
    60e0:	df 2e       	mov	r13, r31
    60e2:	f0 2d       	mov	r31, r0
    60e4:	f6 01       	movw	r30, r12
    60e6:	40 89       	ldd	r20, Z+16	; 0x10
    60e8:	20 e1       	ldi	r18, 0x10	; 16
    60ea:	3e e0       	ldi	r19, 0x0E	; 14
    60ec:	42 9f       	mul	r20, r18
    60ee:	c0 01       	movw	r24, r0
    60f0:	43 9f       	mul	r20, r19
    60f2:	90 0d       	add	r25, r0
    60f4:	11 24       	eor	r1, r1
			Sekundenges += rtc.Minuten*60;
    60f6:	21 89       	ldd	r18, Z+17	; 0x11
    60f8:	7c 01       	movw	r14, r24
    60fa:	fc e3       	ldi	r31, 0x3C	; 60
    60fc:	2f 9f       	mul	r18, r31
    60fe:	e0 0c       	add	r14, r0
    6100:	f1 1c       	adc	r15, r1
    6102:	11 24       	eor	r1, r1
			Sekundenges += rtc.Sekunden;
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\t%d\t%u\t%d\n",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100),(int16_t)(druck.temperature*10),(uint16_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    6104:	0f 2e       	mov	r0, r31
    6106:	f1 ef       	ldi	r31, 0xF1	; 241
    6108:	af 2e       	mov	r10, r31
    610a:	f8 e0       	ldi	r31, 0x08	; 8
    610c:	bf 2e       	mov	r11, r31
    610e:	f0 2d       	mov	r31, r0
    6110:	20 e0       	ldi	r18, 0x00	; 0
    6112:	30 e0       	ldi	r19, 0x00	; 0
    6114:	40 e2       	ldi	r20, 0x20	; 32
    6116:	51 e4       	ldi	r21, 0x41	; 65
    6118:	d5 01       	movw	r26, r10
    611a:	18 96       	adiw	r26, 0x08	; 8
    611c:	6d 91       	ld	r22, X+
    611e:	7d 91       	ld	r23, X+
    6120:	8d 91       	ld	r24, X+
    6122:	9c 91       	ld	r25, X
    6124:	1b 97       	sbiw	r26, 0x0b	; 11
    6126:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    612a:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <__fixsfsi>
    612e:	7f 93       	push	r23
    6130:	6f 93       	push	r22
    6132:	20 e0       	ldi	r18, 0x00	; 0
    6134:	30 e0       	ldi	r19, 0x00	; 0
    6136:	48 ec       	ldi	r20, 0xC8	; 200
    6138:	52 e4       	ldi	r21, 0x42	; 66
    613a:	f5 01       	movw	r30, r10
    613c:	60 81       	ld	r22, Z
    613e:	71 81       	ldd	r23, Z+1	; 0x01
    6140:	82 81       	ldd	r24, Z+2	; 0x02
    6142:	93 81       	ldd	r25, Z+3	; 0x03
    6144:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    6148:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <__fixunssfsi>
    614c:	7f 93       	push	r23
    614e:	6f 93       	push	r22
    6150:	20 e0       	ldi	r18, 0x00	; 0
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	40 e2       	ldi	r20, 0x20	; 32
    6156:	51 e4       	ldi	r21, 0x41	; 65
    6158:	d5 01       	movw	r26, r10
    615a:	14 96       	adiw	r26, 0x04	; 4
    615c:	6d 91       	ld	r22, X+
    615e:	7d 91       	ld	r23, X+
    6160:	8d 91       	ld	r24, X+
    6162:	9c 91       	ld	r25, X
    6164:	17 97       	sbiw	r26, 0x07	; 7
    6166:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    616a:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <__fixsfsi>
    616e:	7f 93       	push	r23
    6170:	6f 93       	push	r22
    6172:	20 e0       	ldi	r18, 0x00	; 0
    6174:	30 e0       	ldi	r19, 0x00	; 0
    6176:	48 ec       	ldi	r20, 0xC8	; 200
    6178:	52 e4       	ldi	r21, 0x42	; 66
    617a:	60 91 83 08 	lds	r22, 0x0883
    617e:	70 91 84 08 	lds	r23, 0x0884
    6182:	80 91 85 08 	lds	r24, 0x0885
    6186:	90 91 86 08 	lds	r25, 0x0886
    618a:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    618e:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <__fixsfsi>
    6192:	9f 93       	push	r25
    6194:	8f 93       	push	r24
    6196:	7f 93       	push	r23
    6198:	6f 93       	push	r22
    619a:	20 e0       	ldi	r18, 0x00	; 0
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	48 ec       	ldi	r20, 0xC8	; 200
    61a0:	52 e4       	ldi	r21, 0x42	; 66
    61a2:	60 91 8d 08 	lds	r22, 0x088D
    61a6:	70 91 8e 08 	lds	r23, 0x088E
    61aa:	80 91 8f 08 	lds	r24, 0x088F
    61ae:	90 91 90 08 	lds	r25, 0x0890
    61b2:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    61b6:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <__fixsfsi>
    61ba:	9f 93       	push	r25
    61bc:	8f 93       	push	r24
    61be:	7f 93       	push	r23
    61c0:	6f 93       	push	r22
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	30 e5       	ldi	r19, 0x50	; 80
    61c6:	43 ec       	ldi	r20, 0xC3	; 195
    61c8:	57 e4       	ldi	r21, 0x47	; 71
    61ca:	60 91 95 08 	lds	r22, 0x0895
    61ce:	70 91 96 08 	lds	r23, 0x0896
    61d2:	80 91 97 08 	lds	r24, 0x0897
    61d6:	90 91 98 08 	lds	r25, 0x0898
    61da:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    61de:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <__fixsfsi>
    61e2:	9f 93       	push	r25
    61e4:	8f 93       	push	r24
    61e6:	7f 93       	push	r23
    61e8:	6f 93       	push	r22
    61ea:	20 e0       	ldi	r18, 0x00	; 0
    61ec:	34 e2       	ldi	r19, 0x24	; 36
    61ee:	44 e7       	ldi	r20, 0x74	; 116
    61f0:	59 e4       	ldi	r21, 0x49	; 73
    61f2:	60 91 91 08 	lds	r22, 0x0891
    61f6:	70 91 92 08 	lds	r23, 0x0892
    61fa:	80 91 93 08 	lds	r24, 0x0893
    61fe:	90 91 94 08 	lds	r25, 0x0894
    6202:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    6206:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <__fixsfsi>
    620a:	9f 93       	push	r25
    620c:	8f 93       	push	r24
    620e:	7f 93       	push	r23
    6210:	6f 93       	push	r22
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
			Sekundenges += rtc.Minuten*60;
			Sekundenges += rtc.Sekunden;
    6212:	f6 01       	movw	r30, r12
    6214:	82 89       	ldd	r24, Z+18	; 0x12
    6216:	97 01       	movw	r18, r14
    6218:	28 0f       	add	r18, r24
    621a:	31 1d       	adc	r19, r1
    621c:	c9 01       	movw	r24, r18
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t%ld\t%d\t%u\t%d\n",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100),(int32_t)(geschw*100),(int16_t)(druck.temperature*10),(uint16_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    621e:	9f 93       	push	r25
    6220:	2f 93       	push	r18
    6222:	85 ef       	ldi	r24, 0xF5	; 245
    6224:	92 e0       	ldi	r25, 0x02	; 2
    6226:	9f 93       	push	r25
    6228:	8f 93       	push	r24
    622a:	89 e2       	ldi	r24, 0x29	; 41
    622c:	94 e0       	ldi	r25, 0x04	; 4
    622e:	9f 93       	push	r25
    6230:	8f 93       	push	r24
    6232:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <f_printf>
    6236:	0f b6       	in	r0, 0x3f	; 63
    6238:	f8 94       	cli
    623a:	de bf       	out	0x3e, r29	; 62
    623c:	0f be       	out	0x3f, r0	; 63
    623e:	cd bf       	out	0x3d, r28	; 61
		}
		
		anzeige |= (1<<refreshdisplay);
    6240:	80 91 e6 08 	lds	r24, 0x08E6
    6244:	81 60       	ori	r24, 0x01	; 1
    6246:	80 93 e6 08 	sts	0x08E6, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    624a:	e2 e1       	ldi	r30, 0x12	; 18
    624c:	fe e0       	ldi	r31, 0x0E	; 14
    624e:	80 8d       	ldd	r24, Z+24	; 0x18
    6250:	8d 7f       	andi	r24, 0xFD	; 253
    6252:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    6254:	80 91 2a 0e 	lds	r24, 0x0E2A
    6258:	82 ff       	sbrs	r24, 2
    625a:	13 c0       	rjmp	.+38     	; 0x6282 <_Z19maininterupthandlerP7monitorh+0x536>
    625c:	80 91 e5 08 	lds	r24, 0x08E5
    6260:	86 70       	andi	r24, 0x06	; 6
	{
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    6262:	86 30       	cpi	r24, 0x06	; 6
    6264:	21 f4       	brne	.+8      	; 0x626e <_Z19maininterupthandlerP7monitorh+0x522>
		{
			f_sync(&logger);
    6266:	89 e2       	ldi	r24, 0x29	; 41
    6268:	94 e0       	ldi	r25, 0x04	; 4
    626a:	0e 94 13 20 	call	0x4026	; 0x4026 <f_sync>
		}
		anzeige |= (1<<refreshdisplay);
    626e:	80 91 e6 08 	lds	r24, 0x08E6
    6272:	81 60       	ori	r24, 0x01	; 1
    6274:	80 93 e6 08 	sts	0x08E6, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    6278:	e2 e1       	ldi	r30, 0x12	; 18
    627a:	fe e0       	ldi	r31, 0x0E	; 14
    627c:	80 8d       	ldd	r24, Z+24	; 0x18
    627e:	8b 7f       	andi	r24, 0xFB	; 251
    6280:	80 8f       	std	Z+24, r24	; 0x18
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    6282:	80 91 e6 08 	lds	r24, 0x08E6
    6286:	80 ff       	sbrs	r24, 0
    6288:	0d c0       	rjmp	.+26     	; 0x62a4 <_Z19maininterupthandlerP7monitorh+0x558>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    628a:	d8 01       	movw	r26, r16
    628c:	ed 91       	ld	r30, X+
    628e:	fc 91       	ld	r31, X
    6290:	02 80       	ldd	r0, Z+2	; 0x02
    6292:	f3 81       	ldd	r31, Z+3	; 0x03
    6294:	e0 2d       	mov	r30, r0
    6296:	c8 01       	movw	r24, r16
    6298:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    629a:	80 91 e6 08 	lds	r24, 0x08E6
    629e:	8e 7f       	andi	r24, 0xFE	; 254
    62a0:	80 93 e6 08 	sts	0x08E6, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    62a4:	2d 96       	adiw	r28, 0x0d	; 13
    62a6:	0f b6       	in	r0, 0x3f	; 63
    62a8:	f8 94       	cli
    62aa:	de bf       	out	0x3e, r29	; 62
    62ac:	0f be       	out	0x3f, r0	; 63
    62ae:	cd bf       	out	0x3d, r28	; 61
    62b0:	df 91       	pop	r29
    62b2:	cf 91       	pop	r28
    62b4:	1f 91       	pop	r17
    62b6:	0f 91       	pop	r16
    62b8:	ff 90       	pop	r15
    62ba:	ef 90       	pop	r14
    62bc:	df 90       	pop	r13
    62be:	cf 90       	pop	r12
    62c0:	bf 90       	pop	r11
    62c2:	af 90       	pop	r10
    62c4:	08 95       	ret

000062c6 <_Z10gpshandlerv>:

void gpshandler(){
    62c6:	4f 92       	push	r4
    62c8:	5f 92       	push	r5
    62ca:	6f 92       	push	r6
    62cc:	7f 92       	push	r7
    62ce:	8f 92       	push	r8
    62d0:	9f 92       	push	r9
    62d2:	af 92       	push	r10
    62d4:	bf 92       	push	r11
    62d6:	ef 92       	push	r14
    62d8:	ff 92       	push	r15
    62da:	0f 93       	push	r16
    62dc:	1f 93       	push	r17
    62de:	cf 93       	push	r28
    62e0:	df 93       	push	r29
    62e2:	00 d0       	rcall	.+0      	; 0x62e4 <_Z10gpshandlerv+0x1e>
    62e4:	00 d0       	rcall	.+0      	; 0x62e6 <_Z10gpshandlerv+0x20>
    62e6:	cd b7       	in	r28, 0x3d	; 61
    62e8:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    62ea:	e0 90 e2 08 	lds	r14, 0x08E2
    62ee:	e2 fe       	sbrs	r14, 2
    62f0:	e3 c2       	rjmp	.+1478   	; 0x68b8 <_Z10gpshandlerv+0x5f2>
    62f2:	ee 20       	and	r14, r14
    62f4:	0c f0       	brlt	.+2      	; 0x62f8 <_Z10gpshandlerv+0x32>
    62f6:	84 c3       	rjmp	.+1800   	; 0x6a00 <_Z10gpshandlerv+0x73a>
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    62f8:	0a e9       	ldi	r16, 0x9A	; 154
    62fa:	18 e0       	ldi	r17, 0x08	; 8
    62fc:	f8 01       	movw	r30, r16
    62fe:	80 85       	ldd	r24, Z+8	; 0x08
    6300:	21 ed       	ldi	r18, 0xD1	; 209
    6302:	28 0f       	add	r18, r24
void gpshandler(){
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
	{
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6304:	87 81       	ldd	r24, Z+7	; 0x07
    6306:	88 0f       	add	r24, r24
    6308:	80 56       	subi	r24, 0x60	; 96
    630a:	98 2f       	mov	r25, r24
    630c:	99 0f       	add	r25, r25
    630e:	99 0f       	add	r25, r25
    6310:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6312:	82 0f       	add	r24, r18
    6314:	80 93 8c 08 	sts	0x088C, r24
    6318:	82 85       	ldd	r24, Z+10	; 0x0a
    631a:	20 ed       	ldi	r18, 0xD0	; 208
    631c:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    631e:	81 85       	ldd	r24, Z+9	; 0x09
    6320:	88 0f       	add	r24, r24
    6322:	80 56       	subi	r24, 0x60	; 96
    6324:	98 2f       	mov	r25, r24
    6326:	99 0f       	add	r25, r25
    6328:	99 0f       	add	r25, r25
    632a:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    632c:	82 0f       	add	r24, r18
    632e:	80 93 8b 08 	sts	0x088B, r24
    6332:	84 85       	ldd	r24, Z+12	; 0x0c
    6334:	20 ed       	ldi	r18, 0xD0	; 208
    6336:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6338:	83 85       	ldd	r24, Z+11	; 0x0b
    633a:	88 0f       	add	r24, r24
    633c:	80 56       	subi	r24, 0x60	; 96
    633e:	98 2f       	mov	r25, r24
    6340:	99 0f       	add	r25, r25
    6342:	99 0f       	add	r25, r25
    6344:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    6346:	82 0f       	add	r24, r18
    6348:	80 93 8a 08 	sts	0x088A, r24
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
		lat +=	(gpsdata[21] - '0');
		float latmin =	(gpsdata[22] - '0')*10;
    634c:	86 89       	ldd	r24, Z+22	; 0x16
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	c0 97       	sbiw	r24, 0x30	; 48
    6352:	bc 01       	movw	r22, r24
    6354:	66 0f       	add	r22, r22
    6356:	77 1f       	adc	r23, r23
    6358:	88 0f       	add	r24, r24
    635a:	99 1f       	adc	r25, r25
    635c:	88 0f       	add	r24, r24
    635e:	99 1f       	adc	r25, r25
    6360:	88 0f       	add	r24, r24
    6362:	99 1f       	adc	r25, r25
    6364:	68 0f       	add	r22, r24
    6366:	79 1f       	adc	r23, r25
    6368:	07 2e       	mov	r0, r23
    636a:	00 0c       	add	r0, r0
    636c:	88 0b       	sbc	r24, r24
    636e:	99 0b       	sbc	r25, r25
    6370:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6374:	4b 01       	movw	r8, r22
    6376:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[23] - '0');
    6378:	f8 01       	movw	r30, r16
    637a:	87 89       	ldd	r24, Z+23	; 0x17
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	c0 97       	sbiw	r24, 0x30	; 48
    6380:	bc 01       	movw	r22, r24
    6382:	99 0f       	add	r25, r25
    6384:	88 0b       	sbc	r24, r24
    6386:	99 0b       	sbc	r25, r25
    6388:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    638c:	a5 01       	movw	r20, r10
    638e:	94 01       	movw	r18, r8
    6390:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    6394:	4b 01       	movw	r8, r22
    6396:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[25] - '0')/10.0;
    6398:	f8 01       	movw	r30, r16
    639a:	81 8d       	ldd	r24, Z+25	; 0x19
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	c0 97       	sbiw	r24, 0x30	; 48
    63a0:	bc 01       	movw	r22, r24
    63a2:	99 0f       	add	r25, r25
    63a4:	88 0b       	sbc	r24, r24
    63a6:	99 0b       	sbc	r25, r25
    63a8:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    63ac:	20 e0       	ldi	r18, 0x00	; 0
    63ae:	30 e0       	ldi	r19, 0x00	; 0
    63b0:	40 e2       	ldi	r20, 0x20	; 32
    63b2:	51 e4       	ldi	r21, 0x41	; 65
    63b4:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    63b8:	a5 01       	movw	r20, r10
    63ba:	94 01       	movw	r18, r8
    63bc:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    63c0:	4b 01       	movw	r8, r22
    63c2:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[26] - '0')/100.0;
    63c4:	f8 01       	movw	r30, r16
    63c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    63c8:	90 e0       	ldi	r25, 0x00	; 0
    63ca:	c0 97       	sbiw	r24, 0x30	; 48
    63cc:	bc 01       	movw	r22, r24
    63ce:	99 0f       	add	r25, r25
    63d0:	88 0b       	sbc	r24, r24
    63d2:	99 0b       	sbc	r25, r25
    63d4:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    63d8:	20 e0       	ldi	r18, 0x00	; 0
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	48 ec       	ldi	r20, 0xC8	; 200
    63de:	52 e4       	ldi	r21, 0x42	; 66
    63e0:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    63e4:	a5 01       	movw	r20, r10
    63e6:	94 01       	movw	r18, r8
    63e8:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    63ec:	4b 01       	movw	r8, r22
    63ee:	5c 01       	movw	r10, r24
		latmin +=		(gpsdata[27] - '0')/1000.0;
    63f0:	f8 01       	movw	r30, r16
    63f2:	83 8d       	ldd	r24, Z+27	; 0x1b
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	c0 97       	sbiw	r24, 0x30	; 48
    63f8:	bc 01       	movw	r22, r24
    63fa:	99 0f       	add	r25, r25
    63fc:	88 0b       	sbc	r24, r24
    63fe:	99 0b       	sbc	r25, r25
    6400:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6404:	20 e0       	ldi	r18, 0x00	; 0
    6406:	30 e0       	ldi	r19, 0x00	; 0
    6408:	4a e7       	ldi	r20, 0x7A	; 122
    640a:	54 e4       	ldi	r21, 0x44	; 68
    640c:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    6410:	a5 01       	movw	r20, r10
    6412:	94 01       	movw	r18, r8
    6414:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    6418:	4b 01       	movw	r8, r22
    641a:	5c 01       	movw	r10, r24
		gpsminute +=	(gpsdata[10] - '0');
		gpssekunde =	(gpsdata[11] - '0')*10;
		gpssekunde +=	(gpsdata[12] - '0');
		
		//Latitude
		lat =	(gpsdata[20] - '0')*10;
    641c:	f8 01       	movw	r30, r16
    641e:	44 89       	ldd	r20, Z+20	; 0x14
    6420:	50 e0       	ldi	r21, 0x00	; 0
    6422:	40 53       	subi	r20, 0x30	; 48
    6424:	51 09       	sbc	r21, r1
    6426:	ca 01       	movw	r24, r20
    6428:	88 0f       	add	r24, r24
    642a:	99 1f       	adc	r25, r25
    642c:	44 0f       	add	r20, r20
    642e:	55 1f       	adc	r21, r21
    6430:	44 0f       	add	r20, r20
    6432:	55 1f       	adc	r21, r21
    6434:	44 0f       	add	r20, r20
    6436:	55 1f       	adc	r21, r21
    6438:	84 0f       	add	r24, r20
    643a:	95 1f       	adc	r25, r21
    643c:	bc 01       	movw	r22, r24
    643e:	99 0f       	add	r25, r25
    6440:	88 0b       	sbc	r24, r24
    6442:	99 0b       	sbc	r25, r25
    6444:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6448:	2b 01       	movw	r4, r22
    644a:	3c 01       	movw	r6, r24
		lat +=	(gpsdata[21] - '0');
    644c:	f8 01       	movw	r30, r16
    644e:	85 89       	ldd	r24, Z+21	; 0x15
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	c0 97       	sbiw	r24, 0x30	; 48
    6454:	bc 01       	movw	r22, r24
    6456:	99 0f       	add	r25, r25
    6458:	88 0b       	sbc	r24, r24
    645a:	99 0b       	sbc	r25, r25
    645c:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6460:	9b 01       	movw	r18, r22
    6462:	ac 01       	movw	r20, r24
    6464:	c3 01       	movw	r24, r6
    6466:	b2 01       	movw	r22, r4
    6468:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    646c:	2b 01       	movw	r4, r22
    646e:	3c 01       	movw	r6, r24
		float latmin =	(gpsdata[22] - '0')*10;
		latmin +=		(gpsdata[23] - '0');
		latmin +=		(gpsdata[25] - '0')/10.0;
		latmin +=		(gpsdata[26] - '0')/100.0;
		latmin +=		(gpsdata[27] - '0')/1000.0;
		latmin +=		(gpsdata[28] - '0')/10000.0;
    6470:	f8 01       	movw	r30, r16
    6472:	84 8d       	ldd	r24, Z+28	; 0x1c
    6474:	90 e0       	ldi	r25, 0x00	; 0
    6476:	c0 97       	sbiw	r24, 0x30	; 48
    6478:	bc 01       	movw	r22, r24
    647a:	99 0f       	add	r25, r25
    647c:	88 0b       	sbc	r24, r24
    647e:	99 0b       	sbc	r25, r25
    6480:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6484:	20 e0       	ldi	r18, 0x00	; 0
    6486:	30 e4       	ldi	r19, 0x40	; 64
    6488:	4c e1       	ldi	r20, 0x1C	; 28
    648a:	56 e4       	ldi	r21, 0x46	; 70
    648c:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    6490:	a5 01       	movw	r20, r10
    6492:	94 01       	movw	r18, r8
    6494:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
		lat +=	latmin/60.0;
    6498:	20 e0       	ldi	r18, 0x00	; 0
    649a:	30 e0       	ldi	r19, 0x00	; 0
    649c:	40 e7       	ldi	r20, 0x70	; 112
    649e:	52 e4       	ldi	r21, 0x42	; 66
    64a0:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    64a4:	9b 01       	movw	r18, r22
    64a6:	ac 01       	movw	r20, r24
    64a8:	c3 01       	movw	r24, r6
    64aa:	b2 01       	movw	r22, r4
    64ac:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    64b0:	60 93 95 08 	sts	0x0895, r22
    64b4:	70 93 96 08 	sts	0x0896, r23
    64b8:	80 93 97 08 	sts	0x0897, r24
    64bc:	90 93 98 08 	sts	0x0898, r25
		if (gpsdata[30] != 'N')
    64c0:	f8 01       	movw	r30, r16
    64c2:	26 8d       	ldd	r18, Z+30	; 0x1e
    64c4:	2e 34       	cpi	r18, 0x4E	; 78
    64c6:	59 f0       	breq	.+22     	; 0x64de <_Z10gpshandlerv+0x218>
		{
			lat *= -1;
    64c8:	dc 01       	movw	r26, r24
    64ca:	cb 01       	movw	r24, r22
    64cc:	b0 58       	subi	r27, 0x80	; 128
    64ce:	80 93 95 08 	sts	0x0895, r24
    64d2:	90 93 96 08 	sts	0x0896, r25
    64d6:	a0 93 97 08 	sts	0x0897, r26
    64da:	b0 93 98 08 	sts	0x0898, r27
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
		lon +=	(gpsdata[33] - '0')*10;
		lon +=	(gpsdata[34] - '0');
		float lonmin =	(gpsdata[35] - '0')*10;
    64de:	0a e9       	ldi	r16, 0x9A	; 154
    64e0:	18 e0       	ldi	r17, 0x08	; 8
    64e2:	f8 01       	movw	r30, r16
    64e4:	83 a1       	ldd	r24, Z+35	; 0x23
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	c0 97       	sbiw	r24, 0x30	; 48
    64ea:	bc 01       	movw	r22, r24
    64ec:	66 0f       	add	r22, r22
    64ee:	77 1f       	adc	r23, r23
    64f0:	88 0f       	add	r24, r24
    64f2:	99 1f       	adc	r25, r25
    64f4:	88 0f       	add	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	88 0f       	add	r24, r24
    64fa:	99 1f       	adc	r25, r25
    64fc:	68 0f       	add	r22, r24
    64fe:	79 1f       	adc	r23, r25
    6500:	07 2e       	mov	r0, r23
    6502:	00 0c       	add	r0, r0
    6504:	88 0b       	sbc	r24, r24
    6506:	99 0b       	sbc	r25, r25
    6508:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    650c:	4b 01       	movw	r8, r22
    650e:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[36] - '0');
    6510:	f8 01       	movw	r30, r16
    6512:	84 a1       	ldd	r24, Z+36	; 0x24
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	c0 97       	sbiw	r24, 0x30	; 48
    6518:	bc 01       	movw	r22, r24
    651a:	99 0f       	add	r25, r25
    651c:	88 0b       	sbc	r24, r24
    651e:	99 0b       	sbc	r25, r25
    6520:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6524:	a5 01       	movw	r20, r10
    6526:	94 01       	movw	r18, r8
    6528:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    652c:	4b 01       	movw	r8, r22
    652e:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[38] - '0')/10.0;
    6530:	f8 01       	movw	r30, r16
    6532:	86 a1       	ldd	r24, Z+38	; 0x26
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	c0 97       	sbiw	r24, 0x30	; 48
    6538:	bc 01       	movw	r22, r24
    653a:	99 0f       	add	r25, r25
    653c:	88 0b       	sbc	r24, r24
    653e:	99 0b       	sbc	r25, r25
    6540:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6544:	20 e0       	ldi	r18, 0x00	; 0
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	40 e2       	ldi	r20, 0x20	; 32
    654a:	51 e4       	ldi	r21, 0x41	; 65
    654c:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    6550:	a5 01       	movw	r20, r10
    6552:	94 01       	movw	r18, r8
    6554:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    6558:	4b 01       	movw	r8, r22
    655a:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[39] - '0')/100.0;
    655c:	f8 01       	movw	r30, r16
    655e:	87 a1       	ldd	r24, Z+39	; 0x27
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	c0 97       	sbiw	r24, 0x30	; 48
    6564:	bc 01       	movw	r22, r24
    6566:	99 0f       	add	r25, r25
    6568:	88 0b       	sbc	r24, r24
    656a:	99 0b       	sbc	r25, r25
    656c:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6570:	20 e0       	ldi	r18, 0x00	; 0
    6572:	30 e0       	ldi	r19, 0x00	; 0
    6574:	48 ec       	ldi	r20, 0xC8	; 200
    6576:	52 e4       	ldi	r21, 0x42	; 66
    6578:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    657c:	a5 01       	movw	r20, r10
    657e:	94 01       	movw	r18, r8
    6580:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    6584:	4b 01       	movw	r8, r22
    6586:	5c 01       	movw	r10, r24
		lonmin +=		(gpsdata[40] - '0')/1000.0;
    6588:	f8 01       	movw	r30, r16
    658a:	80 a5       	ldd	r24, Z+40	; 0x28
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	c0 97       	sbiw	r24, 0x30	; 48
    6590:	bc 01       	movw	r22, r24
    6592:	99 0f       	add	r25, r25
    6594:	88 0b       	sbc	r24, r24
    6596:	99 0b       	sbc	r25, r25
    6598:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    659c:	20 e0       	ldi	r18, 0x00	; 0
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	4a e7       	ldi	r20, 0x7A	; 122
    65a2:	54 e4       	ldi	r21, 0x44	; 68
    65a4:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    65a8:	a5 01       	movw	r20, r10
    65aa:	94 01       	movw	r18, r8
    65ac:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    65b0:	4b 01       	movw	r8, r22
    65b2:	5c 01       	movw	r10, r24
		{
			lat *= -1;
		}
		
		//Longitude
		lon =	(gpsdata[32] - '0')*100;
    65b4:	f8 01       	movw	r30, r16
    65b6:	80 a1       	ldd	r24, Z+32	; 0x20
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	c0 97       	sbiw	r24, 0x30	; 48
    65bc:	24 e6       	ldi	r18, 0x64	; 100
    65be:	28 9f       	mul	r18, r24
    65c0:	b0 01       	movw	r22, r0
    65c2:	29 9f       	mul	r18, r25
    65c4:	70 0d       	add	r23, r0
    65c6:	11 24       	eor	r1, r1
    65c8:	07 2e       	mov	r0, r23
    65ca:	00 0c       	add	r0, r0
    65cc:	88 0b       	sbc	r24, r24
    65ce:	99 0b       	sbc	r25, r25
    65d0:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    65d4:	2b 01       	movw	r4, r22
    65d6:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[33] - '0')*10;
    65d8:	f8 01       	movw	r30, r16
    65da:	21 a1       	ldd	r18, Z+33	; 0x21
    65dc:	30 e0       	ldi	r19, 0x00	; 0
    65de:	20 53       	subi	r18, 0x30	; 48
    65e0:	31 09       	sbc	r19, r1
    65e2:	c9 01       	movw	r24, r18
    65e4:	88 0f       	add	r24, r24
    65e6:	99 1f       	adc	r25, r25
    65e8:	22 0f       	add	r18, r18
    65ea:	33 1f       	adc	r19, r19
    65ec:	22 0f       	add	r18, r18
    65ee:	33 1f       	adc	r19, r19
    65f0:	22 0f       	add	r18, r18
    65f2:	33 1f       	adc	r19, r19
    65f4:	82 0f       	add	r24, r18
    65f6:	93 1f       	adc	r25, r19
    65f8:	bc 01       	movw	r22, r24
    65fa:	99 0f       	add	r25, r25
    65fc:	88 0b       	sbc	r24, r24
    65fe:	99 0b       	sbc	r25, r25
    6600:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6604:	9b 01       	movw	r18, r22
    6606:	ac 01       	movw	r20, r24
    6608:	c3 01       	movw	r24, r6
    660a:	b2 01       	movw	r22, r4
    660c:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    6610:	2b 01       	movw	r4, r22
    6612:	3c 01       	movw	r6, r24
		lon +=	(gpsdata[34] - '0');
    6614:	f8 01       	movw	r30, r16
    6616:	82 a1       	ldd	r24, Z+34	; 0x22
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	c0 97       	sbiw	r24, 0x30	; 48
    661c:	bc 01       	movw	r22, r24
    661e:	99 0f       	add	r25, r25
    6620:	88 0b       	sbc	r24, r24
    6622:	99 0b       	sbc	r25, r25
    6624:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6628:	9b 01       	movw	r18, r22
    662a:	ac 01       	movw	r20, r24
    662c:	c3 01       	movw	r24, r6
    662e:	b2 01       	movw	r22, r4
    6630:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    6634:	2b 01       	movw	r4, r22
    6636:	3c 01       	movw	r6, r24
		float lonmin =	(gpsdata[35] - '0')*10;
		lonmin +=		(gpsdata[36] - '0');
		lonmin +=		(gpsdata[38] - '0')/10.0;
		lonmin +=		(gpsdata[39] - '0')/100.0;
		lonmin +=		(gpsdata[40] - '0')/1000.0;
		lonmin +=		(gpsdata[41] - '0')/10000.0;
    6638:	f8 01       	movw	r30, r16
    663a:	81 a5       	ldd	r24, Z+41	; 0x29
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	c0 97       	sbiw	r24, 0x30	; 48
    6640:	bc 01       	movw	r22, r24
    6642:	99 0f       	add	r25, r25
    6644:	88 0b       	sbc	r24, r24
    6646:	99 0b       	sbc	r25, r25
    6648:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    664c:	20 e0       	ldi	r18, 0x00	; 0
    664e:	30 e4       	ldi	r19, 0x40	; 64
    6650:	4c e1       	ldi	r20, 0x1C	; 28
    6652:	56 e4       	ldi	r21, 0x46	; 70
    6654:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    6658:	a5 01       	movw	r20, r10
    665a:	94 01       	movw	r18, r8
    665c:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
		lon +=			lonmin/60.0;
    6660:	20 e0       	ldi	r18, 0x00	; 0
    6662:	30 e0       	ldi	r19, 0x00	; 0
    6664:	40 e7       	ldi	r20, 0x70	; 112
    6666:	52 e4       	ldi	r21, 0x42	; 66
    6668:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <__divsf3>
    666c:	9b 01       	movw	r18, r22
    666e:	ac 01       	movw	r20, r24
    6670:	c3 01       	movw	r24, r6
    6672:	b2 01       	movw	r22, r4
    6674:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    6678:	60 93 91 08 	sts	0x0891, r22
    667c:	70 93 92 08 	sts	0x0892, r23
    6680:	80 93 93 08 	sts	0x0893, r24
    6684:	90 93 94 08 	sts	0x0894, r25
		if (gpsdata[43] != 'E')
    6688:	f8 01       	movw	r30, r16
    668a:	23 a5       	ldd	r18, Z+43	; 0x2b
    668c:	25 34       	cpi	r18, 0x45	; 69
    668e:	59 f0       	breq	.+22     	; 0x66a6 <_Z10gpshandlerv+0x3e0>
		{
			lon *= -1;
    6690:	dc 01       	movw	r26, r24
    6692:	cb 01       	movw	r24, r22
    6694:	b0 58       	subi	r27, 0x80	; 128
    6696:	80 93 91 08 	sts	0x0891, r24
    669a:	90 93 92 08 	sts	0x0892, r25
    669e:	a0 93 93 08 	sts	0x0893, r26
    66a2:	b0 93 94 08 	sts	0x0894, r27
		}
		//Speed 
		volatile uint8_t counter = 45;
    66a6:	8d e2       	ldi	r24, 0x2D	; 45
    66a8:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    66aa:	ec 81       	ldd	r30, Y+4	; 0x04
    66ac:	f0 e0       	ldi	r31, 0x00	; 0
    66ae:	e6 56       	subi	r30, 0x66	; 102
    66b0:	f7 4f       	sbci	r31, 0xF7	; 247
    66b2:	80 81       	ld	r24, Z
    66b4:	8e 32       	cpi	r24, 0x2E	; 46
    66b6:	91 f4       	brne	.+36     	; 0x66dc <_Z10gpshandlerv+0x416>
			{
				weiter=false;
				counter--;
    66b8:	8c 81       	ldd	r24, Y+4	; 0x04
    66ba:	81 50       	subi	r24, 0x01	; 1
    66bc:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    66be:	8c 81       	ldd	r24, Y+4	; 0x04
    66c0:	8f 5f       	subi	r24, 0xFF	; 255
    66c2:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    66c4:	10 92 8d 08 	sts	0x088D, r1
    66c8:	10 92 8e 08 	sts	0x088E, r1
    66cc:	10 92 8f 08 	sts	0x088F, r1
    66d0:	10 92 90 08 	sts	0x0890, r1
		for(uint8_t i=45;i<counter;i++){
    66d4:	8c 81       	ldd	r24, Y+4	; 0x04
    66d6:	8e 32       	cpi	r24, 0x2E	; 46
    66d8:	28 f4       	brcc	.+10     	; 0x66e4 <_Z10gpshandlerv+0x41e>
    66da:	47 c0       	rjmp	.+142    	; 0x676a <_Z10gpshandlerv+0x4a4>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    66dc:	8c 81       	ldd	r24, Y+4	; 0x04
    66de:	8f 5f       	subi	r24, 0xFF	; 255
    66e0:	8c 83       	std	Y+4, r24	; 0x04
    66e2:	e3 cf       	rjmp	.-58     	; 0x66aa <_Z10gpshandlerv+0x3e4>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    66e4:	81 2c       	mov	r8, r1
    66e6:	91 2c       	mov	r9, r1
    66e8:	54 01       	movw	r10, r8
    66ea:	0f 2e       	mov	r0, r31
    66ec:	fd e2       	ldi	r31, 0x2D	; 45
    66ee:	ff 2e       	mov	r15, r31
    66f0:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    66f2:	0f 2d       	mov	r16, r15
    66f4:	10 e0       	ldi	r17, 0x00	; 0
    66f6:	8c 81       	ldd	r24, Y+4	; 0x04
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	80 1b       	sub	r24, r16
    66fc:	91 0b       	sbc	r25, r17
    66fe:	01 97       	sbiw	r24, 0x01	; 1
    6700:	bc 01       	movw	r22, r24
    6702:	99 0f       	add	r25, r25
    6704:	88 0b       	sbc	r24, r24
    6706:	99 0b       	sbc	r25, r25
    6708:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    670c:	9b 01       	movw	r18, r22
    670e:	ac 01       	movw	r20, r24
    6710:	60 e0       	ldi	r22, 0x00	; 0
    6712:	70 e0       	ldi	r23, 0x00	; 0
    6714:	80 e2       	ldi	r24, 0x20	; 32
    6716:	91 e4       	ldi	r25, 0x41	; 65
    6718:	0e 94 f0 40 	call	0x81e0	; 0x81e0 <pow>
    671c:	2b 01       	movw	r4, r22
    671e:	3c 01       	movw	r6, r24
    6720:	f8 01       	movw	r30, r16
    6722:	e6 56       	subi	r30, 0x66	; 102
    6724:	f7 4f       	sbci	r31, 0xF7	; 247
    6726:	60 81       	ld	r22, Z
    6728:	70 e0       	ldi	r23, 0x00	; 0
    672a:	60 53       	subi	r22, 0x30	; 48
    672c:	71 09       	sbc	r23, r1
    672e:	07 2e       	mov	r0, r23
    6730:	00 0c       	add	r0, r0
    6732:	88 0b       	sbc	r24, r24
    6734:	99 0b       	sbc	r25, r25
    6736:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    673a:	a3 01       	movw	r20, r6
    673c:	92 01       	movw	r18, r4
    673e:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    6742:	9b 01       	movw	r18, r22
    6744:	ac 01       	movw	r20, r24
    6746:	c5 01       	movw	r24, r10
    6748:	b4 01       	movw	r22, r8
    674a:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    674e:	4b 01       	movw	r8, r22
    6750:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    6752:	f3 94       	inc	r15
    6754:	8c 81       	ldd	r24, Y+4	; 0x04
    6756:	f8 16       	cp	r15, r24
    6758:	60 f2       	brcs	.-104    	; 0x66f2 <_Z10gpshandlerv+0x42c>
    675a:	80 92 8d 08 	sts	0x088D, r8
    675e:	90 92 8e 08 	sts	0x088E, r9
    6762:	a0 92 8f 08 	sts	0x088F, r10
    6766:	b0 92 90 08 	sts	0x0890, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    676a:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    676c:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    676e:	f0 e0       	ldi	r31, 0x00	; 0
    6770:	e6 56       	subi	r30, 0x66	; 102
    6772:	f7 4f       	sbci	r31, 0xF7	; 247
    6774:	61 81       	ldd	r22, Z+1	; 0x01
    6776:	70 e0       	ldi	r23, 0x00	; 0
    6778:	60 53       	subi	r22, 0x30	; 48
    677a:	71 09       	sbc	r23, r1
    677c:	07 2e       	mov	r0, r23
    677e:	00 0c       	add	r0, r0
    6780:	88 0b       	sbc	r24, r24
    6782:	99 0b       	sbc	r25, r25
    6784:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    6788:	2d ec       	ldi	r18, 0xCD	; 205
    678a:	3c ec       	ldi	r19, 0xCC	; 204
    678c:	4c ec       	ldi	r20, 0xCC	; 204
    678e:	5d e3       	ldi	r21, 0x3D	; 61
    6790:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    6794:	20 91 8d 08 	lds	r18, 0x088D
    6798:	30 91 8e 08 	lds	r19, 0x088E
    679c:	40 91 8f 08 	lds	r20, 0x088F
    67a0:	50 91 90 08 	lds	r21, 0x0890
    67a4:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
    67a8:	4b 01       	movw	r8, r22
    67aa:	5c 01       	movw	r10, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    67ac:	e1 2f       	mov	r30, r17
    67ae:	f0 e0       	ldi	r31, 0x00	; 0
    67b0:	e6 56       	subi	r30, 0x66	; 102
    67b2:	f7 4f       	sbci	r31, 0xF7	; 247
    67b4:	82 81       	ldd	r24, Z+2	; 0x02
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	c0 97       	sbiw	r24, 0x30	; 48
    67ba:	bc 01       	movw	r22, r24
    67bc:	99 0f       	add	r25, r25
    67be:	88 0b       	sbc	r24, r24
    67c0:	99 0b       	sbc	r25, r25
    67c2:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__floatsisf>
    67c6:	2a e0       	ldi	r18, 0x0A	; 10
    67c8:	37 ed       	ldi	r19, 0xD7	; 215
    67ca:	43 e2       	ldi	r20, 0x23	; 35
    67cc:	5c e3       	ldi	r21, 0x3C	; 60
    67ce:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    67d2:	9b 01       	movw	r18, r22
    67d4:	ac 01       	movw	r20, r24
    67d6:	c5 01       	movw	r24, r10
    67d8:	b4 01       	movw	r22, r8
    67da:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    67de:	26 e5       	ldi	r18, 0x56	; 86
    67e0:	3e e0       	ldi	r19, 0x0E	; 14
    67e2:	4d ee       	ldi	r20, 0xED	; 237
    67e4:	5f e3       	ldi	r21, 0x3F	; 63
    67e6:	0e 94 8d 40 	call	0x811a	; 0x811a <__mulsf3>
    67ea:	60 93 8d 08 	sts	0x088D, r22
    67ee:	70 93 8e 08 	sts	0x088E, r23
    67f2:	80 93 8f 08 	sts	0x088F, r24
    67f6:	90 93 90 08 	sts	0x0890, r25
		
		//date
		counter =19;
    67fa:	83 e1       	ldi	r24, 0x13	; 19
    67fc:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    67fe:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    6800:	8b 81       	ldd	r24, Y+3	; 0x03
    6802:	87 30       	cpi	r24, 0x07	; 7
    6804:	80 f4       	brcc	.+32     	; 0x6826 <_Z10gpshandlerv+0x560>
		{
			if (gpsdata[counter] == ',')
    6806:	ec 81       	ldd	r30, Y+4	; 0x04
    6808:	f0 e0       	ldi	r31, 0x00	; 0
    680a:	e6 56       	subi	r30, 0x66	; 102
    680c:	f7 4f       	sbci	r31, 0xF7	; 247
    680e:	80 81       	ld	r24, Z
    6810:	8c 32       	cpi	r24, 0x2C	; 44
    6812:	19 f4       	brne	.+6      	; 0x681a <_Z10gpshandlerv+0x554>
			{
				nichterreicht++;
    6814:	8b 81       	ldd	r24, Y+3	; 0x03
    6816:	8f 5f       	subi	r24, 0xFF	; 255
    6818:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    681a:	8c 81       	ldd	r24, Y+4	; 0x04
    681c:	8f 5f       	subi	r24, 0xFF	; 255
    681e:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    6820:	8b 81       	ldd	r24, Y+3	; 0x03
    6822:	87 30       	cpi	r24, 0x07	; 7
    6824:	80 f3       	brcs	.-32     	; 0x6806 <_Z10gpshandlerv+0x540>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6826:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    6828:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    682a:	b0 e0       	ldi	r27, 0x00	; 0
    682c:	a6 56       	subi	r26, 0x66	; 102
    682e:	b7 4f       	sbci	r27, 0xF7	; 247
    6830:	8c 91       	ld	r24, X
    6832:	88 0f       	add	r24, r24
    6834:	80 56       	subi	r24, 0x60	; 96
    6836:	28 2f       	mov	r18, r24
    6838:	22 0f       	add	r18, r18
    683a:	22 0f       	add	r18, r18
    683c:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    683e:	f0 e0       	ldi	r31, 0x00	; 0
    6840:	e6 56       	subi	r30, 0x66	; 102
    6842:	f7 4f       	sbci	r31, 0xF7	; 247
    6844:	81 81       	ldd	r24, Z+1	; 0x01
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	c0 97       	sbiw	r24, 0x30	; 48
    684a:	82 0f       	add	r24, r18
    684c:	91 1d       	adc	r25, r1
    684e:	80 93 89 08 	sts	0x0889, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6852:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6854:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6856:	b0 e0       	ldi	r27, 0x00	; 0
    6858:	a6 56       	subi	r26, 0x66	; 102
    685a:	b7 4f       	sbci	r27, 0xF7	; 247
    685c:	12 96       	adiw	r26, 0x02	; 2
    685e:	8c 91       	ld	r24, X
    6860:	88 0f       	add	r24, r24
    6862:	80 56       	subi	r24, 0x60	; 96
    6864:	28 2f       	mov	r18, r24
    6866:	22 0f       	add	r18, r18
    6868:	22 0f       	add	r18, r18
    686a:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    686c:	f0 e0       	ldi	r31, 0x00	; 0
    686e:	e6 56       	subi	r30, 0x66	; 102
    6870:	f7 4f       	sbci	r31, 0xF7	; 247
    6872:	83 81       	ldd	r24, Z+3	; 0x03
    6874:	90 e0       	ldi	r25, 0x00	; 0
    6876:	c0 97       	sbiw	r24, 0x30	; 48
    6878:	82 0f       	add	r24, r18
    687a:	91 1d       	adc	r25, r1
    687c:	80 93 88 08 	sts	0x0888, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6880:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6882:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6884:	b0 e0       	ldi	r27, 0x00	; 0
    6886:	a6 56       	subi	r26, 0x66	; 102
    6888:	b7 4f       	sbci	r27, 0xF7	; 247
    688a:	14 96       	adiw	r26, 0x04	; 4
    688c:	8c 91       	ld	r24, X
    688e:	88 0f       	add	r24, r24
    6890:	80 56       	subi	r24, 0x60	; 96
    6892:	28 2f       	mov	r18, r24
    6894:	22 0f       	add	r18, r18
    6896:	22 0f       	add	r18, r18
    6898:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    689a:	f0 e0       	ldi	r31, 0x00	; 0
    689c:	e6 56       	subi	r30, 0x66	; 102
    689e:	f7 4f       	sbci	r31, 0xF7	; 247
    68a0:	85 81       	ldd	r24, Z+5	; 0x05
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	c0 97       	sbiw	r24, 0x30	; 48
    68a6:	82 0f       	add	r24, r18
    68a8:	91 1d       	adc	r25, r1
    68aa:	80 93 87 08 	sts	0x0887, r24
		
		gpsstatus &= ~(1<<complete);
    68ae:	8e 2d       	mov	r24, r14
    68b0:	8b 7f       	andi	r24, 0xFB	; 251
    68b2:	80 93 e2 08 	sts	0x08E2, r24
    68b6:	a4 c0       	rjmp	.+328    	; 0x6a00 <_Z10gpshandlerv+0x73a>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    68b8:	e3 fe       	sbrs	r14, 3
    68ba:	a2 c0       	rjmp	.+324    	; 0x6a00 <_Z10gpshandlerv+0x73a>
    68bc:	ee 20       	and	r14, r14
    68be:	0c f0       	brlt	.+2      	; 0x68c2 <_Z10gpshandlerv+0x5fc>
    68c0:	9f c0       	rjmp	.+318    	; 0x6a00 <_Z10gpshandlerv+0x73a>
	{
		//Andere Daten vernichten
		lat = 0;
    68c2:	10 92 95 08 	sts	0x0895, r1
    68c6:	10 92 96 08 	sts	0x0896, r1
    68ca:	10 92 97 08 	sts	0x0897, r1
    68ce:	10 92 98 08 	sts	0x0898, r1
		lon = 0;
    68d2:	10 92 91 08 	sts	0x0891, r1
    68d6:	10 92 92 08 	sts	0x0892, r1
    68da:	10 92 93 08 	sts	0x0893, r1
    68de:	10 92 94 08 	sts	0x0894, r1
		gpsspeed = 0;
    68e2:	10 92 8d 08 	sts	0x088D, r1
    68e6:	10 92 8e 08 	sts	0x088E, r1
    68ea:	10 92 8f 08 	sts	0x088F, r1
    68ee:	10 92 90 08 	sts	0x0890, r1
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    68f2:	ea e9       	ldi	r30, 0x9A	; 154
    68f4:	f8 e0       	ldi	r31, 0x08	; 8
    68f6:	80 85       	ldd	r24, Z+8	; 0x08
    68f8:	21 ed       	ldi	r18, 0xD1	; 209
    68fa:	28 0f       	add	r18, r24
		//Andere Daten vernichten
		lat = 0;
		lon = 0;
		gpsspeed = 0;
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    68fc:	87 81       	ldd	r24, Z+7	; 0x07
    68fe:	88 0f       	add	r24, r24
    6900:	80 56       	subi	r24, 0x60	; 96
    6902:	98 2f       	mov	r25, r24
    6904:	99 0f       	add	r25, r25
    6906:	99 0f       	add	r25, r25
    6908:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    690a:	82 0f       	add	r24, r18
    690c:	80 93 8c 08 	sts	0x088C, r24
    6910:	82 85       	ldd	r24, Z+10	; 0x0a
    6912:	20 ed       	ldi	r18, 0xD0	; 208
    6914:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    6916:	81 85       	ldd	r24, Z+9	; 0x09
    6918:	88 0f       	add	r24, r24
    691a:	80 56       	subi	r24, 0x60	; 96
    691c:	98 2f       	mov	r25, r24
    691e:	99 0f       	add	r25, r25
    6920:	99 0f       	add	r25, r25
    6922:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    6924:	82 0f       	add	r24, r18
    6926:	80 93 8b 08 	sts	0x088B, r24
    692a:	84 85       	ldd	r24, Z+12	; 0x0c
    692c:	20 ed       	ldi	r18, 0xD0	; 208
    692e:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6930:	83 85       	ldd	r24, Z+11	; 0x0b
    6932:	88 0f       	add	r24, r24
    6934:	80 56       	subi	r24, 0x60	; 96
    6936:	98 2f       	mov	r25, r24
    6938:	99 0f       	add	r25, r25
    693a:	99 0f       	add	r25, r25
    693c:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    693e:	82 0f       	add	r24, r18
    6940:	80 93 8a 08 	sts	0x088A, r24
		
		volatile uint8_t counter = 19;
    6944:	83 e1       	ldi	r24, 0x13	; 19
    6946:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    6948:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    694a:	89 81       	ldd	r24, Y+1	; 0x01
    694c:	87 30       	cpi	r24, 0x07	; 7
    694e:	80 f4       	brcc	.+32     	; 0x6970 <_Z10gpshandlerv+0x6aa>
		{
			if (gpsdata[counter] == ',')
    6950:	ea 81       	ldd	r30, Y+2	; 0x02
    6952:	f0 e0       	ldi	r31, 0x00	; 0
    6954:	e6 56       	subi	r30, 0x66	; 102
    6956:	f7 4f       	sbci	r31, 0xF7	; 247
    6958:	80 81       	ld	r24, Z
    695a:	8c 32       	cpi	r24, 0x2C	; 44
    695c:	19 f4       	brne	.+6      	; 0x6964 <_Z10gpshandlerv+0x69e>
			{
				nichterreicht++;
    695e:	89 81       	ldd	r24, Y+1	; 0x01
    6960:	8f 5f       	subi	r24, 0xFF	; 255
    6962:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    6964:	8a 81       	ldd	r24, Y+2	; 0x02
    6966:	8f 5f       	subi	r24, 0xFF	; 255
    6968:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    696a:	89 81       	ldd	r24, Y+1	; 0x01
    696c:	87 30       	cpi	r24, 0x07	; 7
    696e:	80 f3       	brcs	.-32     	; 0x6950 <_Z10gpshandlerv+0x68a>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6970:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    6972:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6974:	b0 e0       	ldi	r27, 0x00	; 0
    6976:	a6 56       	subi	r26, 0x66	; 102
    6978:	b7 4f       	sbci	r27, 0xF7	; 247
    697a:	8c 91       	ld	r24, X
    697c:	88 0f       	add	r24, r24
    697e:	80 56       	subi	r24, 0x60	; 96
    6980:	28 2f       	mov	r18, r24
    6982:	22 0f       	add	r18, r18
    6984:	22 0f       	add	r18, r18
    6986:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    6988:	f0 e0       	ldi	r31, 0x00	; 0
    698a:	e6 56       	subi	r30, 0x66	; 102
    698c:	f7 4f       	sbci	r31, 0xF7	; 247
    698e:	81 81       	ldd	r24, Z+1	; 0x01
    6990:	90 e0       	ldi	r25, 0x00	; 0
    6992:	c0 97       	sbiw	r24, 0x30	; 48
    6994:	82 0f       	add	r24, r18
    6996:	91 1d       	adc	r25, r1
    6998:	80 93 89 08 	sts	0x0889, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    699c:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    699e:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    69a0:	b0 e0       	ldi	r27, 0x00	; 0
    69a2:	a6 56       	subi	r26, 0x66	; 102
    69a4:	b7 4f       	sbci	r27, 0xF7	; 247
    69a6:	12 96       	adiw	r26, 0x02	; 2
    69a8:	8c 91       	ld	r24, X
    69aa:	88 0f       	add	r24, r24
    69ac:	80 56       	subi	r24, 0x60	; 96
    69ae:	28 2f       	mov	r18, r24
    69b0:	22 0f       	add	r18, r18
    69b2:	22 0f       	add	r18, r18
    69b4:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    69b6:	f0 e0       	ldi	r31, 0x00	; 0
    69b8:	e6 56       	subi	r30, 0x66	; 102
    69ba:	f7 4f       	sbci	r31, 0xF7	; 247
    69bc:	83 81       	ldd	r24, Z+3	; 0x03
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	c0 97       	sbiw	r24, 0x30	; 48
    69c2:	82 0f       	add	r24, r18
    69c4:	91 1d       	adc	r25, r1
    69c6:	80 93 88 08 	sts	0x0888, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    69ca:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    69cc:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    69ce:	b0 e0       	ldi	r27, 0x00	; 0
    69d0:	a6 56       	subi	r26, 0x66	; 102
    69d2:	b7 4f       	sbci	r27, 0xF7	; 247
    69d4:	14 96       	adiw	r26, 0x04	; 4
    69d6:	8c 91       	ld	r24, X
    69d8:	88 0f       	add	r24, r24
    69da:	80 56       	subi	r24, 0x60	; 96
    69dc:	28 2f       	mov	r18, r24
    69de:	22 0f       	add	r18, r18
    69e0:	22 0f       	add	r18, r18
    69e2:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    69e4:	f0 e0       	ldi	r31, 0x00	; 0
    69e6:	e6 56       	subi	r30, 0x66	; 102
    69e8:	f7 4f       	sbci	r31, 0xF7	; 247
    69ea:	85 81       	ldd	r24, Z+5	; 0x05
    69ec:	90 e0       	ldi	r25, 0x00	; 0
    69ee:	c0 97       	sbiw	r24, 0x30	; 48
    69f0:	82 0f       	add	r24, r18
    69f2:	91 1d       	adc	r25, r1
    69f4:	80 93 87 08 	sts	0x0887, r24
		
		gpsstatus &= ~(1<<completenotvalid);
    69f8:	8e 2d       	mov	r24, r14
    69fa:	87 7f       	andi	r24, 0xF7	; 247
    69fc:	80 93 e2 08 	sts	0x08E2, r24
	}
	//fix status pruefen, wenn implementiert
}
    6a00:	0f 90       	pop	r0
    6a02:	0f 90       	pop	r0
    6a04:	0f 90       	pop	r0
    6a06:	0f 90       	pop	r0
    6a08:	df 91       	pop	r29
    6a0a:	cf 91       	pop	r28
    6a0c:	1f 91       	pop	r17
    6a0e:	0f 91       	pop	r16
    6a10:	ff 90       	pop	r15
    6a12:	ef 90       	pop	r14
    6a14:	bf 90       	pop	r11
    6a16:	af 90       	pop	r10
    6a18:	9f 90       	pop	r9
    6a1a:	8f 90       	pop	r8
    6a1c:	7f 90       	pop	r7
    6a1e:	6f 90       	pop	r6
    6a20:	5f 90       	pop	r5
    6a22:	4f 90       	pop	r4
    6a24:	08 95       	ret

00006a26 <main>:
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
}

int main(void)
{
    6a26:	cf 93       	push	r28
    6a28:	df 93       	push	r29
    6a2a:	cd b7       	in	r28, 0x3d	; 61
    6a2c:	de b7       	in	r29, 0x3e	; 62
    6a2e:	65 97       	sbiw	r28, 0x15	; 21
    6a30:	0f b6       	in	r0, 0x3f	; 63
    6a32:	f8 94       	cli
    6a34:	de bf       	out	0x3e, r29	; 62
    6a36:	0f be       	out	0x3f, r0	; 63
    6a38:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    6a3a:	3a d8       	rcall	.-3980   	; 0x5ab0 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6a3c:	8a e2       	ldi	r24, 0x2A	; 42
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <malloc>
    6a44:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6a46:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6a48:	81 e1       	ldi	r24, 0x11	; 17
    6a4a:	9a e0       	ldi	r25, 0x0A	; 10
    6a4c:	90 8f       	std	Z+24, r25	; 0x18
    6a4e:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6a50:	82 e1       	ldi	r24, 0x12	; 18
    6a52:	9e e0       	ldi	r25, 0x0E	; 14
    6a54:	92 8f       	std	Z+26, r25	; 0x1a
    6a56:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    6a58:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6a5a:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6a5c:	81 e0       	ldi	r24, 0x01	; 1
    6a5e:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    6a60:	8e ee       	ldi	r24, 0xEE	; 238
    6a62:	93 e0       	ldi	r25, 0x03	; 3
    6a64:	91 83       	std	Z+1, r25	; 0x01
    6a66:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    6a68:	85 e5       	ldi	r24, 0x55	; 85
    6a6a:	98 e6       	ldi	r25, 0x68	; 104
    6a6c:	a2 e7       	ldi	r26, 0x72	; 114
    6a6e:	b0 e0       	ldi	r27, 0x00	; 0
    6a70:	89 83       	std	Y+1, r24	; 0x01
    6a72:	9a 83       	std	Y+2, r25	; 0x02
    6a74:	ab 83       	std	Y+3, r26	; 0x03
    6a76:	bc 83       	std	Y+4, r27	; 0x04
    6a78:	9e 01       	movw	r18, r28
    6a7a:	2f 5f       	subi	r18, 0xFF	; 255
    6a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a7e:	cf 01       	movw	r24, r30
    6a80:	4b 96       	adiw	r24, 0x1b	; 27
    6a82:	be 01       	movw	r22, r28
    6a84:	65 5f       	subi	r22, 0xF5	; 245
    6a86:	7f 4f       	sbci	r23, 0xFF	; 255
    6a88:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6a8a:	40 e2       	ldi	r20, 0x20	; 32
    6a8c:	50 2f       	mov	r21, r16
    6a8e:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6a90:	54 30       	cpi	r21, 0x04	; 4
    6a92:	28 f4       	brcc	.+10     	; 0x6a9e <main+0x78>
			{
				name[i] = na[i];
    6a94:	d8 01       	movw	r26, r16
    6a96:	5c 91       	ld	r21, X
    6a98:	dc 01       	movw	r26, r24
    6a9a:	5c 93       	st	X, r21
    6a9c:	02 c0       	rjmp	.+4      	; 0x6aa2 <main+0x7c>
			}
			else
			{
				name[i] = ' ';
    6a9e:	dc 01       	movw	r26, r24
    6aa0:	4c 93       	st	X, r20
    6aa2:	0f 5f       	subi	r16, 0xFF	; 255
    6aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    6aa6:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    6aa8:	06 17       	cp	r16, r22
    6aaa:	17 07       	cpc	r17, r23
    6aac:	79 f7       	brne	.-34     	; 0x6a8c <main+0x66>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    6aae:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    6ab0:	83 e0       	ldi	r24, 0x03	; 3
    6ab2:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6ab4:	fa 83       	std	Y+2, r31	; 0x02
    6ab6:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6ab8:	89 e2       	ldi	r24, 0x29	; 41
    6aba:	90 e0       	ldi	r25, 0x00	; 0
    6abc:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <malloc>
    6ac0:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6ac2:	fc 01       	movw	r30, r24
    6ac4:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6ac6:	81 e1       	ldi	r24, 0x11	; 17
    6ac8:	9a e0       	ldi	r25, 0x0A	; 10
    6aca:	90 8f       	std	Z+24, r25	; 0x18
    6acc:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6ace:	82 e1       	ldi	r24, 0x12	; 18
    6ad0:	9e e0       	ldi	r25, 0x0E	; 14
    6ad2:	92 8f       	std	Z+26, r25	; 0x1a
    6ad4:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    6ad6:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6ad8:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6ada:	81 e0       	ldi	r24, 0x01	; 1
    6adc:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    6ade:	86 ef       	ldi	r24, 0xF6	; 246
    6ae0:	93 e0       	ldi	r25, 0x03	; 3
    6ae2:	91 83       	std	Z+1, r25	; 0x01
    6ae4:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    6ae6:	86 e0       	ldi	r24, 0x06	; 6
    6ae8:	ec ec       	ldi	r30, 0xCC	; 204
    6aea:	f1 e0       	ldi	r31, 0x01	; 1
    6aec:	de 01       	movw	r26, r28
    6aee:	1d 96       	adiw	r26, 0x0d	; 13
    6af0:	01 90       	ld	r0, Z+
    6af2:	0d 92       	st	X+, r0
    6af4:	8a 95       	dec	r24
    6af6:	e1 f7       	brne	.-8      	; 0x6af0 <main+0xca>
    6af8:	ce 01       	movw	r24, r28
    6afa:	0d 96       	adiw	r24, 0x0d	; 13
    6afc:	d8 01       	movw	r26, r16
    6afe:	5b 96       	adiw	r26, 0x1b	; 27
    6b00:	ae 01       	movw	r20, r28
    6b02:	49 5e       	subi	r20, 0xE9	; 233
    6b04:	5f 4f       	sbci	r21, 0xFF	; 255
    6b06:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6b08:	20 e2       	ldi	r18, 0x20	; 32
    6b0a:	3e 2f       	mov	r19, r30
    6b0c:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6b0e:	36 30       	cpi	r19, 0x06	; 6
    6b10:	18 f4       	brcc	.+6      	; 0x6b18 <main+0xf2>
			{
				name[i] = na[i];
    6b12:	30 81       	ld	r19, Z
    6b14:	3c 93       	st	X, r19
    6b16:	01 c0       	rjmp	.+2      	; 0x6b1a <main+0xf4>
			}
			else
			{
				name[i] = ' ';
    6b18:	2c 93       	st	X, r18
    6b1a:	31 96       	adiw	r30, 0x01	; 1
    6b1c:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    6b1e:	e4 17       	cp	r30, r20
    6b20:	f5 07       	cpc	r31, r21
    6b22:	99 f7       	brne	.-26     	; 0x6b0a <main+0xe4>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    6b24:	0e 94 3b 2c 	call	0x5876	; 0x5876 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6b28:	1c 83       	std	Y+4, r17	; 0x04
    6b2a:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6b2c:	89 e2       	ldi	r24, 0x29	; 41
    6b2e:	90 e0       	ldi	r25, 0x00	; 0
    6b30:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6b34:	dc 01       	movw	r26, r24
    6b36:	56 96       	adiw	r26, 0x16	; 22
    6b38:	1c 92       	st	X, r1
    6b3a:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    6b3c:	21 e1       	ldi	r18, 0x11	; 17
    6b3e:	3a e0       	ldi	r19, 0x0A	; 10
    6b40:	58 96       	adiw	r26, 0x18	; 24
    6b42:	3c 93       	st	X, r19
    6b44:	2e 93       	st	-X, r18
    6b46:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    6b48:	22 e1       	ldi	r18, 0x12	; 18
    6b4a:	3e e0       	ldi	r19, 0x0E	; 14
    6b4c:	5a 96       	adiw	r26, 0x1a	; 26
    6b4e:	3c 93       	st	X, r19
    6b50:	2e 93       	st	-X, r18
    6b52:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    6b54:	95 96       	adiw	r26, 0x25	; 37
    6b56:	1c 92       	st	X, r1
    6b58:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    6b5a:	96 96       	adiw	r26, 0x26	; 38
    6b5c:	1c 92       	st	X, r1
    6b5e:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    6b60:	21 e0       	ldi	r18, 0x01	; 1
    6b62:	98 96       	adiw	r26, 0x28	; 40
    6b64:	2c 93       	st	X, r18
    6b66:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    6b68:	2e ef       	ldi	r18, 0xFE	; 254
    6b6a:	33 e0       	ldi	r19, 0x03	; 3
    6b6c:	2d 93       	st	X+, r18
    6b6e:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    6b70:	28 e0       	ldi	r18, 0x08	; 8
    6b72:	e2 ed       	ldi	r30, 0xD2	; 210
    6b74:	f1 e0       	ldi	r31, 0x01	; 1
    6b76:	de 01       	movw	r26, r28
    6b78:	1d 96       	adiw	r26, 0x0d	; 13
    6b7a:	01 90       	ld	r0, Z+
    6b7c:	0d 92       	st	X+, r0
    6b7e:	2a 95       	dec	r18
    6b80:	e1 f7       	brne	.-8      	; 0x6b7a <main+0x154>
    6b82:	9e 01       	movw	r18, r28
    6b84:	23 5f       	subi	r18, 0xF3	; 243
    6b86:	3f 4f       	sbci	r19, 0xFF	; 255
    6b88:	dc 01       	movw	r26, r24
    6b8a:	5b 96       	adiw	r26, 0x1b	; 27
    6b8c:	be 01       	movw	r22, r28
    6b8e:	69 5e       	subi	r22, 0xE9	; 233
    6b90:	7f 4f       	sbci	r23, 0xFF	; 255
    6b92:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6b94:	40 e2       	ldi	r20, 0x20	; 32
    6b96:	5e 2f       	mov	r21, r30
    6b98:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6b9a:	58 30       	cpi	r21, 0x08	; 8
    6b9c:	18 f4       	brcc	.+6      	; 0x6ba4 <main+0x17e>
			{
				name[i] = na[i];
    6b9e:	50 81       	ld	r21, Z
    6ba0:	5c 93       	st	X, r21
    6ba2:	01 c0       	rjmp	.+2      	; 0x6ba6 <main+0x180>
			}
			else
			{
				name[i] = ' ';
    6ba4:	4c 93       	st	X, r20
    6ba6:	31 96       	adiw	r30, 0x01	; 1
    6ba8:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    6baa:	e6 17       	cp	r30, r22
    6bac:	f7 07       	cpc	r31, r23
    6bae:	99 f7       	brne	.-26     	; 0x6b96 <main+0x170>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6bb0:	9e 83       	std	Y+6, r25	; 0x06
    6bb2:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6bb4:	89 e2       	ldi	r24, 0x29	; 41
    6bb6:	90 e0       	ldi	r25, 0x00	; 0
    6bb8:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6bbc:	fc 01       	movw	r30, r24
    6bbe:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6bc0:	21 e1       	ldi	r18, 0x11	; 17
    6bc2:	3a e0       	ldi	r19, 0x0A	; 10
    6bc4:	30 8f       	std	Z+24, r19	; 0x18
    6bc6:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    6bc8:	22 e1       	ldi	r18, 0x12	; 18
    6bca:	3e e0       	ldi	r19, 0x0E	; 14
    6bcc:	32 8f       	std	Z+26, r19	; 0x1a
    6bce:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    6bd0:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6bd2:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6bd4:	21 e0       	ldi	r18, 0x01	; 1
    6bd6:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    6bd8:	26 e0       	ldi	r18, 0x06	; 6
    6bda:	34 e0       	ldi	r19, 0x04	; 4
    6bdc:	31 83       	std	Z+1, r19	; 0x01
    6bde:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    6be0:	29 e0       	ldi	r18, 0x09	; 9
    6be2:	e2 e1       	ldi	r30, 0x12	; 18
    6be4:	f3 e0       	ldi	r31, 0x03	; 3
    6be6:	de 01       	movw	r26, r28
    6be8:	1d 96       	adiw	r26, 0x0d	; 13
    6bea:	01 90       	ld	r0, Z+
    6bec:	0d 92       	st	X+, r0
    6bee:	2a 95       	dec	r18
    6bf0:	e1 f7       	brne	.-8      	; 0x6bea <main+0x1c4>
    6bf2:	9e 01       	movw	r18, r28
    6bf4:	23 5f       	subi	r18, 0xF3	; 243
    6bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    6bf8:	dc 01       	movw	r26, r24
    6bfa:	5b 96       	adiw	r26, 0x1b	; 27
    6bfc:	be 01       	movw	r22, r28
    6bfe:	69 5e       	subi	r22, 0xE9	; 233
    6c00:	7f 4f       	sbci	r23, 0xFF	; 255
    6c02:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6c04:	40 e2       	ldi	r20, 0x20	; 32
    6c06:	5e 2f       	mov	r21, r30
    6c08:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6c0a:	59 30       	cpi	r21, 0x09	; 9
    6c0c:	18 f4       	brcc	.+6      	; 0x6c14 <main+0x1ee>
			{
				name[i] = na[i];
    6c0e:	50 81       	ld	r21, Z
    6c10:	5c 93       	st	X, r21
    6c12:	01 c0       	rjmp	.+2      	; 0x6c16 <main+0x1f0>
			}
			else
			{
				name[i] = ' ';
    6c14:	4c 93       	st	X, r20
    6c16:	31 96       	adiw	r30, 0x01	; 1
    6c18:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    6c1a:	e6 17       	cp	r30, r22
    6c1c:	f7 07       	cpc	r31, r23
    6c1e:	99 f7       	brne	.-26     	; 0x6c06 <main+0x1e0>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 5;
    6c20:	25 e0       	ldi	r18, 0x05	; 5
    6c22:	dc 01       	movw	r26, r24
    6c24:	97 96       	adiw	r26, 0x27	; 39
    6c26:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6c28:	98 87       	std	Y+8, r25	; 0x08
    6c2a:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6c2c:	89 e2       	ldi	r24, 0x29	; 41
    6c2e:	90 e0       	ldi	r25, 0x00	; 0
    6c30:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <malloc>
    6c34:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6c36:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6c38:	0f 2e       	mov	r0, r31
    6c3a:	f1 e1       	ldi	r31, 0x11	; 17
    6c3c:	cf 2e       	mov	r12, r31
    6c3e:	fa e0       	ldi	r31, 0x0A	; 10
    6c40:	df 2e       	mov	r13, r31
    6c42:	f0 2d       	mov	r31, r0
    6c44:	d0 8e       	std	Z+24, r13	; 0x18
    6c46:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6c48:	0f 2e       	mov	r0, r31
    6c4a:	f2 e1       	ldi	r31, 0x12	; 18
    6c4c:	ef 2e       	mov	r14, r31
    6c4e:	fe e0       	ldi	r31, 0x0E	; 14
    6c50:	ff 2e       	mov	r15, r31
    6c52:	f0 2d       	mov	r31, r0
    6c54:	f2 8e       	std	Z+26, r15	; 0x1a
    6c56:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6c58:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6c5a:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6c5c:	11 e0       	ldi	r17, 0x01	; 1
    6c5e:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    6c60:	8e e1       	ldi	r24, 0x1E	; 30
    6c62:	94 e0       	ldi	r25, 0x04	; 4
    6c64:	91 83       	std	Z+1, r25	; 0x01
    6c66:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6c68:	fa 87       	std	Y+10, r31	; 0x0a
    6c6a:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6c6c:	89 e2       	ldi	r24, 0x29	; 41
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6c74:	fc 01       	movw	r30, r24
    6c76:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6c78:	d0 8e       	std	Z+24, r13	; 0x18
    6c7a:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6c7c:	f2 8e       	std	Z+26, r15	; 0x1a
    6c7e:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6c80:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6c82:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6c84:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    6c86:	26 e1       	ldi	r18, 0x16	; 22
    6c88:	34 e0       	ldi	r19, 0x04	; 4
    6c8a:	31 83       	std	Z+1, r19	; 0x01
    6c8c:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    6c8e:	26 e0       	ldi	r18, 0x06	; 6
    6c90:	eb e1       	ldi	r30, 0x1B	; 27
    6c92:	f3 e0       	ldi	r31, 0x03	; 3
    6c94:	de 01       	movw	r26, r28
    6c96:	1d 96       	adiw	r26, 0x0d	; 13
    6c98:	01 90       	ld	r0, Z+
    6c9a:	0d 92       	st	X+, r0
    6c9c:	2a 95       	dec	r18
    6c9e:	e1 f7       	brne	.-8      	; 0x6c98 <main+0x272>
    6ca0:	9e 01       	movw	r18, r28
    6ca2:	23 5f       	subi	r18, 0xF3	; 243
    6ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca6:	dc 01       	movw	r26, r24
    6ca8:	5b 96       	adiw	r26, 0x1b	; 27
    6caa:	be 01       	movw	r22, r28
    6cac:	69 5e       	subi	r22, 0xE9	; 233
    6cae:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb0:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6cb2:	40 e2       	ldi	r20, 0x20	; 32
    6cb4:	5e 2f       	mov	r21, r30
    6cb6:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    6cb8:	56 30       	cpi	r21, 0x06	; 6
    6cba:	18 f4       	brcc	.+6      	; 0x6cc2 <main+0x29c>
			{
				name[i] = na[i];
    6cbc:	50 81       	ld	r21, Z
    6cbe:	5c 93       	st	X, r21
    6cc0:	01 c0       	rjmp	.+2      	; 0x6cc4 <main+0x29e>
			}
			else
			{
				name[i] = ' ';
    6cc2:	4c 93       	st	X, r20
    6cc4:	31 96       	adiw	r30, 0x01	; 1
    6cc6:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    6cc8:	e6 17       	cp	r30, r22
    6cca:	f7 07       	cpc	r31, r23
    6ccc:	99 f7       	brne	.-26     	; 0x6cb4 <main+0x28e>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    6cce:	dc 01       	movw	r26, r24
    6cd0:	98 96       	adiw	r26, 0x28	; 40
    6cd2:	1c 92       	st	X, r1
    6cd4:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    6cd6:	25 e0       	ldi	r18, 0x05	; 5
    6cd8:	97 96       	adiw	r26, 0x27	; 39
    6cda:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6cdc:	9c 87       	std	Y+12, r25	; 0x0c
    6cde:	8b 87       	std	Y+11, r24	; 0x0b
	
	druck.bmp180_getcalibration();
    6ce0:	81 ef       	ldi	r24, 0xF1	; 241
    6ce2:	98 e0       	ldi	r25, 0x08	; 8
    6ce4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN6BMP18021bmp180_getcalibrationEv>
	
	while (1) 
    {
		maininterupthandler(Folien[position],Tastatur.unified());
    6ce8:	85 e0       	ldi	r24, 0x05	; 5
    6cea:	9a e0       	ldi	r25, 0x0A	; 10
    6cec:	0e 94 4f 24 	call	0x489e	; 0x489e <_ZN9Interface7unifiedEv>
    6cf0:	e0 91 e4 08 	lds	r30, 0x08E4
    6cf4:	f0 e0       	ldi	r31, 0x00	; 0
    6cf6:	ee 0f       	add	r30, r30
    6cf8:	ff 1f       	adc	r31, r31
    6cfa:	21 e0       	ldi	r18, 0x01	; 1
    6cfc:	30 e0       	ldi	r19, 0x00	; 0
    6cfe:	2c 0f       	add	r18, r28
    6d00:	3d 1f       	adc	r19, r29
    6d02:	e2 0f       	add	r30, r18
    6d04:	f3 1f       	adc	r31, r19
    6d06:	68 2f       	mov	r22, r24
    6d08:	80 81       	ld	r24, Z
    6d0a:	91 81       	ldd	r25, Z+1	; 0x01
    6d0c:	1f d8       	rcall	.-4034   	; 0x5d4c <_Z19maininterupthandlerP7monitorh>
		gpshandler();
    6d0e:	db da       	rcall	.-2634   	; 0x62c6 <_Z10gpshandlerv>
    }
    6d10:	eb cf       	rjmp	.-42     	; 0x6ce8 <main+0x2c2>

00006d12 <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    6d12:	2f 92       	push	r2
    6d14:	3f 92       	push	r3
    6d16:	4f 92       	push	r4
    6d18:	5f 92       	push	r5
    6d1a:	6f 92       	push	r6
    6d1c:	7f 92       	push	r7
    6d1e:	8f 92       	push	r8
    6d20:	9f 92       	push	r9
    6d22:	af 92       	push	r10
    6d24:	bf 92       	push	r11
    6d26:	cf 92       	push	r12
    6d28:	df 92       	push	r13
    6d2a:	ef 92       	push	r14
    6d2c:	ff 92       	push	r15
    6d2e:	0f 93       	push	r16
    6d30:	1f 93       	push	r17
    6d32:	cf 93       	push	r28
    6d34:	df 93       	push	r29
    6d36:	cd b7       	in	r28, 0x3d	; 61
    6d38:	de b7       	in	r29, 0x3e	; 62
    6d3a:	66 97       	sbiw	r28, 0x16	; 22
    6d3c:	0f b6       	in	r0, 0x3f	; 63
    6d3e:	f8 94       	cli
    6d40:	de bf       	out	0x3e, r29	; 62
    6d42:	0f be       	out	0x3f, r0	; 63
    6d44:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    6d46:	82 e1       	ldi	r24, 0x12	; 18
    6d48:	9e e0       	ldi	r25, 0x0E	; 14
    6d4a:	c5 d7       	rcall	.+3978   	; 0x7cd6 <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    6d4c:	81 e1       	ldi	r24, 0x11	; 17
    6d4e:	9a e0       	ldi	r25, 0x0A	; 10
    6d50:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    6d54:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6d56:	0f 2e       	mov	r0, r31
    6d58:	ff e0       	ldi	r31, 0x0F	; 15
    6d5a:	7f 2e       	mov	r7, r31
    6d5c:	f0 2d       	mov	r31, r0
    6d5e:	ce 01       	movw	r24, r28
    6d60:	01 96       	adiw	r24, 0x01	; 1
    6d62:	2c 01       	movw	r4, r24
    6d64:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    6d66:	8d 8b       	std	Y+21, r24	; 0x15
    6d68:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6d6a:	0f 2e       	mov	r0, r31
    6d6c:	f2 e1       	ldi	r31, 0x12	; 18
    6d6e:	cf 2e       	mov	r12, r31
    6d70:	fe e0       	ldi	r31, 0x0E	; 14
    6d72:	df 2e       	mov	r13, r31
    6d74:	f0 2d       	mov	r31, r0
    6d76:	0f 2e       	mov	r0, r31
    6d78:	fd ec       	ldi	r31, 0xCD	; 205
    6d7a:	8f 2e       	mov	r8, r31
    6d7c:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    6d7e:	68 94       	set
    6d80:	ee 24       	eor	r14, r14
    6d82:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    6d84:	0f 2e       	mov	r0, r31
    6d86:	fe e2       	ldi	r31, 0x2E	; 46
    6d88:	6f 2e       	mov	r6, r31
    6d8a:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6d8c:	e1 e2       	ldi	r30, 0x21	; 33
    6d8e:	f3 e0       	ldi	r31, 0x03	; 3
    6d90:	d2 01       	movw	r26, r4
    6d92:	87 2d       	mov	r24, r7
    6d94:	01 90       	ld	r0, Z+
    6d96:	0d 92       	st	X+, r0
    6d98:	8a 95       	dec	r24
    6d9a:	e1 f7       	brne	.-8      	; 0x6d94 <_Z13uhreinstellenv+0x82>
    6d9c:	52 01       	movw	r10, r4
    6d9e:	12 01       	movw	r2, r4
    6da0:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    6da2:	f1 01       	movw	r30, r2
    6da4:	61 91       	ld	r22, Z+
    6da6:	1f 01       	movw	r2, r30
    6da8:	2f 2d       	mov	r18, r15
    6daa:	41 2f       	mov	r20, r17
    6dac:	81 e1       	ldi	r24, 0x11	; 17
    6dae:	9a e0       	ldi	r25, 0x0A	; 10
    6db0:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    6db4:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    6db6:	14 35       	cpi	r17, 0x54	; 84
    6db8:	a1 f7       	brne	.-24     	; 0x6da2 <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    6dba:	e5 ea       	ldi	r30, 0xA5	; 165
    6dbc:	f1 e0       	ldi	r31, 0x01	; 1
    6dbe:	d2 01       	movw	r26, r4
    6dc0:	87 2d       	mov	r24, r7
    6dc2:	01 90       	ld	r0, Z+
    6dc4:	0d 92       	st	X+, r0
    6dc6:	8a 95       	dec	r24
    6dc8:	e1 f7       	brne	.-8      	; 0x6dc2 <_Z13uhreinstellenv+0xb0>
    6dca:	2d 88       	ldd	r2, Y+21	; 0x15
    6dcc:	3e 88       	ldd	r3, Y+22	; 0x16
    6dce:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    6dd0:	f1 01       	movw	r30, r2
    6dd2:	61 91       	ld	r22, Z+
    6dd4:	1f 01       	movw	r2, r30
    6dd6:	28 e0       	ldi	r18, 0x08	; 8
    6dd8:	41 2f       	mov	r20, r17
    6dda:	81 e1       	ldi	r24, 0x11	; 17
    6ddc:	9a e0       	ldi	r25, 0x0A	; 10
    6dde:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    6de2:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    6de4:	14 35       	cpi	r17, 0x54	; 84
    6de6:	a1 f7       	brne	.-24     	; 0x6dd0 <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6de8:	f6 01       	movw	r30, r12
    6dea:	90 89       	ldd	r25, Z+16	; 0x10
    6dec:	98 9d       	mul	r25, r8
    6dee:	81 2d       	mov	r24, r1
    6df0:	11 24       	eor	r1, r1
    6df2:	86 95       	lsr	r24
    6df4:	86 95       	lsr	r24
    6df6:	86 95       	lsr	r24
    6df8:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    6dfa:	88 0f       	add	r24, r24
    6dfc:	28 2f       	mov	r18, r24
    6dfe:	22 0f       	add	r18, r18
    6e00:	22 0f       	add	r18, r18
    6e02:	82 0f       	add	r24, r18
    6e04:	98 1b       	sub	r25, r24
    6e06:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    6e08:	fa e3       	ldi	r31, 0x3A	; 58
    6e0a:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    6e0c:	f6 01       	movw	r30, r12
    6e0e:	91 89       	ldd	r25, Z+17	; 0x11
    6e10:	98 9d       	mul	r25, r8
    6e12:	81 2d       	mov	r24, r1
    6e14:	11 24       	eor	r1, r1
    6e16:	86 95       	lsr	r24
    6e18:	86 95       	lsr	r24
    6e1a:	86 95       	lsr	r24
    6e1c:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    6e1e:	88 0f       	add	r24, r24
    6e20:	28 2f       	mov	r18, r24
    6e22:	22 0f       	add	r18, r18
    6e24:	22 0f       	add	r18, r18
    6e26:	82 0f       	add	r24, r18
    6e28:	98 1b       	sub	r25, r24
    6e2a:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    6e2c:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    6e2e:	94 89       	ldd	r25, Z+20	; 0x14
    6e30:	98 9d       	mul	r25, r8
    6e32:	81 2d       	mov	r24, r1
    6e34:	11 24       	eor	r1, r1
    6e36:	86 95       	lsr	r24
    6e38:	86 95       	lsr	r24
    6e3a:	86 95       	lsr	r24
    6e3c:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    6e3e:	88 0f       	add	r24, r24
    6e40:	28 2f       	mov	r18, r24
    6e42:	22 0f       	add	r18, r18
    6e44:	22 0f       	add	r18, r18
    6e46:	82 0f       	add	r24, r18
    6e48:	98 1b       	sub	r25, r24
    6e4a:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    6e4c:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    6e4e:	96 89       	ldd	r25, Z+22	; 0x16
    6e50:	98 9d       	mul	r25, r8
    6e52:	81 2d       	mov	r24, r1
    6e54:	11 24       	eor	r1, r1
    6e56:	86 95       	lsr	r24
    6e58:	86 95       	lsr	r24
    6e5a:	86 95       	lsr	r24
    6e5c:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    6e5e:	88 0f       	add	r24, r24
    6e60:	28 2f       	mov	r18, r24
    6e62:	22 0f       	add	r18, r18
    6e64:	22 0f       	add	r18, r18
    6e66:	82 0f       	add	r24, r18
    6e68:	98 1b       	sub	r25, r24
    6e6a:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    6e6c:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    6e6e:	97 89       	ldd	r25, Z+23	; 0x17
    6e70:	98 9d       	mul	r25, r8
    6e72:	81 2d       	mov	r24, r1
    6e74:	11 24       	eor	r1, r1
    6e76:	86 95       	lsr	r24
    6e78:	86 95       	lsr	r24
    6e7a:	86 95       	lsr	r24
    6e7c:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    6e7e:	88 0f       	add	r24, r24
    6e80:	28 2f       	mov	r18, r24
    6e82:	22 0f       	add	r18, r18
    6e84:	22 0f       	add	r18, r18
    6e86:	82 0f       	add	r24, r18
    6e88:	98 1b       	sub	r25, r24
    6e8a:	9e 87       	std	Y+14, r25	; 0x0e
    6e8c:	0d 89       	ldd	r16, Y+21	; 0x15
    6e8e:	1e 89       	ldd	r17, Y+22	; 0x16
    6e90:	2f 2c       	mov	r2, r15
    6e92:	33 24       	eor	r3, r3
    6e94:	33 94       	inc	r3
    6e96:	05 c0       	rjmp	.+10     	; 0x6ea2 <_Z13uhreinstellenv+0x190>
    6e98:	33 94       	inc	r3
    6e9a:	0f 5f       	subi	r16, 0xFF	; 255
    6e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e9e:	f0 e1       	ldi	r31, 0x10	; 16
    6ea0:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    6ea2:	83 e0       	ldi	r24, 0x03	; 3
    6ea4:	38 16       	cp	r3, r24
    6ea6:	61 f0       	breq	.+24     	; 0x6ec0 <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    6ea8:	20 e1       	ldi	r18, 0x10	; 16
    6eaa:	42 2d       	mov	r20, r2
    6eac:	f8 01       	movw	r30, r16
    6eae:	60 81       	ld	r22, Z
    6eb0:	81 e1       	ldi	r24, 0x11	; 17
    6eb2:	9a e0       	ldi	r25, 0x0A	; 10
    6eb4:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    6eb8:	f4 e0       	ldi	r31, 0x04	; 4
    6eba:	f3 15       	cp	r31, r3
    6ebc:	68 f7       	brcc	.-38     	; 0x6e98 <_Z13uhreinstellenv+0x186>
    6ebe:	08 c0       	rjmp	.+16     	; 0x6ed0 <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    6ec0:	24 e1       	ldi	r18, 0x14	; 20
    6ec2:	48 e2       	ldi	r20, 0x28	; 40
    6ec4:	6b 81       	ldd	r22, Y+3	; 0x03
    6ec6:	81 e1       	ldi	r24, 0x11	; 17
    6ec8:	9a e0       	ldi	r25, 0x0A	; 10
    6eca:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    6ece:	e4 cf       	rjmp	.-56     	; 0x6e98 <_Z13uhreinstellenv+0x186>
    6ed0:	8e 01       	movw	r16, r28
    6ed2:	09 5f       	subi	r16, 0xF9	; 249
    6ed4:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    6ed6:	2f 2c       	mov	r2, r15
    6ed8:	0f 2e       	mov	r0, r31
    6eda:	f6 e0       	ldi	r31, 0x06	; 6
    6edc:	3f 2e       	mov	r3, r31
    6ede:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    6ee0:	88 e0       	ldi	r24, 0x08	; 8
    6ee2:	38 16       	cp	r3, r24
    6ee4:	61 f0       	breq	.+24     	; 0x6efe <_Z13uhreinstellenv+0x1ec>
    6ee6:	9b e0       	ldi	r25, 0x0B	; 11
    6ee8:	39 16       	cp	r3, r25
    6eea:	49 f0       	breq	.+18     	; 0x6efe <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    6eec:	2e 2d       	mov	r18, r14
    6eee:	42 2d       	mov	r20, r2
    6ef0:	f8 01       	movw	r30, r16
    6ef2:	60 81       	ld	r22, Z
    6ef4:	81 e1       	ldi	r24, 0x11	; 17
    6ef6:	9a e0       	ldi	r25, 0x0A	; 10
    6ef8:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN7Display16draw_number16x16Ehhh>
    6efc:	09 c0       	rjmp	.+18     	; 0x6f10 <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    6efe:	28 e2       	ldi	r18, 0x28	; 40
    6f00:	48 e0       	ldi	r20, 0x08	; 8
    6f02:	42 0d       	add	r20, r2
    6f04:	f8 01       	movw	r30, r16
    6f06:	60 81       	ld	r22, Z
    6f08:	81 e1       	ldi	r24, 0x11	; 17
    6f0a:	9a e0       	ldi	r25, 0x0A	; 10
    6f0c:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    6f10:	33 94       	inc	r3
    6f12:	0f 5f       	subi	r16, 0xFF	; 255
    6f14:	1f 4f       	sbci	r17, 0xFF	; 255
    6f16:	f0 e1       	ldi	r31, 0x10	; 16
    6f18:	2f 0e       	add	r2, r31
    6f1a:	8e e0       	ldi	r24, 0x0E	; 14
    6f1c:	38 12       	cpse	r3, r24
    6f1e:	e0 cf       	rjmp	.-64     	; 0x6ee0 <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    6f20:	81 e1       	ldi	r24, 0x11	; 17
    6f22:	9a e0       	ldi	r25, 0x0A	; 10
    6f24:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    6f28:	81 e1       	ldi	r24, 0x11	; 17
    6f2a:	9a e0       	ldi	r25, 0x0A	; 10
    6f2c:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
		switch (pos) {
    6f30:	89 2d       	mov	r24, r9
    6f32:	90 e0       	ldi	r25, 0x00	; 0
    6f34:	8a 30       	cpi	r24, 0x0A	; 10
    6f36:	91 05       	cpc	r25, r1
    6f38:	08 f0       	brcs	.+2      	; 0x6f3c <_Z13uhreinstellenv+0x22a>
    6f3a:	2c c2       	rjmp	.+1112   	; 0x7394 <_Z13uhreinstellenv+0x682>
    6f3c:	fc 01       	movw	r30, r24
    6f3e:	ef 50       	subi	r30, 0x0F	; 15
    6f40:	ff 4f       	sbci	r31, 0xFF	; 255
    6f42:	0c 94 15 46 	jmp	0x8c2a	; 0x8c2a <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    6f46:	85 e0       	ldi	r24, 0x05	; 5
    6f48:	9a e0       	ldi	r25, 0x0A	; 10
    6f4a:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    6f4e:	88 0f       	add	r24, r24
    6f50:	98 2f       	mov	r25, r24
    6f52:	99 0f       	add	r25, r25
    6f54:	99 0f       	add	r25, r25
    6f56:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    6f58:	88 31       	cpi	r24, 0x18	; 24
    6f5a:	08 f4       	brcc	.+2      	; 0x6f5e <_Z13uhreinstellenv+0x24c>
    6f5c:	57 c2       	rjmp	.+1198   	; 0x740c <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    6f5e:	f6 01       	movw	r30, r12
    6f60:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    6f62:	e0 e3       	ldi	r30, 0x30	; 48
    6f64:	f3 e0       	ldi	r31, 0x03	; 3
    6f66:	d2 01       	movw	r26, r4
    6f68:	87 2d       	mov	r24, r7
    6f6a:	01 90       	ld	r0, Z+
    6f6c:	0d 92       	st	X+, r0
    6f6e:	8a 95       	dec	r24
    6f70:	e1 f7       	brne	.-8      	; 0x6f6a <_Z13uhreinstellenv+0x258>
    6f72:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6f74:	f5 01       	movw	r30, r10
    6f76:	61 91       	ld	r22, Z+
    6f78:	5f 01       	movw	r10, r30
    6f7a:	28 e3       	ldi	r18, 0x38	; 56
    6f7c:	41 2f       	mov	r20, r17
    6f7e:	81 e1       	ldi	r24, 0x11	; 17
    6f80:	9a e0       	ldi	r25, 0x0A	; 10
    6f82:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    6f86:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6f88:	14 35       	cpi	r17, 0x54	; 84
    6f8a:	a1 f7       	brne	.-24     	; 0x6f74 <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    6f8c:	99 24       	eor	r9, r9
    6f8e:	9a 94       	dec	r9
    6f90:	3f c2       	rjmp	.+1150   	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    6f92:	85 e0       	ldi	r24, 0x05	; 5
    6f94:	9a e0       	ldi	r25, 0x0A	; 10
    6f96:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    6f9a:	f6 01       	movw	r30, r12
    6f9c:	20 89       	ldd	r18, Z+16	; 0x10
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	82 0f       	add	r24, r18
    6fa2:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    6fa4:	88 31       	cpi	r24, 0x18	; 24
    6fa6:	10 f4       	brcc	.+4      	; 0x6fac <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    6fa8:	80 8b       	std	Z+16, r24	; 0x10
    6faa:	32 c2       	rjmp	.+1124   	; 0x7410 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    6fac:	f6 01       	movw	r30, r12
    6fae:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    6fb0:	e0 e3       	ldi	r30, 0x30	; 48
    6fb2:	f3 e0       	ldi	r31, 0x03	; 3
    6fb4:	d2 01       	movw	r26, r4
    6fb6:	87 2d       	mov	r24, r7
    6fb8:	01 90       	ld	r0, Z+
    6fba:	0d 92       	st	X+, r0
    6fbc:	8a 95       	dec	r24
    6fbe:	e1 f7       	brne	.-8      	; 0x6fb8 <_Z13uhreinstellenv+0x2a6>
    6fc0:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    6fc2:	f5 01       	movw	r30, r10
    6fc4:	61 91       	ld	r22, Z+
    6fc6:	5f 01       	movw	r10, r30
    6fc8:	28 e3       	ldi	r18, 0x38	; 56
    6fca:	41 2f       	mov	r20, r17
    6fcc:	81 e1       	ldi	r24, 0x11	; 17
    6fce:	9a e0       	ldi	r25, 0x0A	; 10
    6fd0:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    6fd4:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    6fd6:	14 35       	cpi	r17, 0x54	; 84
    6fd8:	a1 f7       	brne	.-24     	; 0x6fc2 <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    6fda:	99 24       	eor	r9, r9
    6fdc:	9a 94       	dec	r9
    6fde:	18 c2       	rjmp	.+1072   	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    6fe0:	85 e0       	ldi	r24, 0x05	; 5
    6fe2:	9a e0       	ldi	r25, 0x0A	; 10
    6fe4:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    6fe8:	88 0f       	add	r24, r24
    6fea:	98 2f       	mov	r25, r24
    6fec:	99 0f       	add	r25, r25
    6fee:	99 0f       	add	r25, r25
    6ff0:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    6ff2:	8c 33       	cpi	r24, 0x3C	; 60
    6ff4:	18 f4       	brcc	.+6      	; 0x6ffc <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    6ff6:	f6 01       	movw	r30, r12
    6ff8:	81 8b       	std	Z+17, r24	; 0x11
    6ffa:	0a c2       	rjmp	.+1044   	; 0x7410 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    6ffc:	f6 01       	movw	r30, r12
    6ffe:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7000:	ef e3       	ldi	r30, 0x3F	; 63
    7002:	f3 e0       	ldi	r31, 0x03	; 3
    7004:	d2 01       	movw	r26, r4
    7006:	87 2d       	mov	r24, r7
    7008:	01 90       	ld	r0, Z+
    700a:	0d 92       	st	X+, r0
    700c:	8a 95       	dec	r24
    700e:	e1 f7       	brne	.-8      	; 0x7008 <_Z13uhreinstellenv+0x2f6>
    7010:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7012:	f5 01       	movw	r30, r10
    7014:	61 91       	ld	r22, Z+
    7016:	5f 01       	movw	r10, r30
    7018:	28 e3       	ldi	r18, 0x38	; 56
    701a:	41 2f       	mov	r20, r17
    701c:	81 e1       	ldi	r24, 0x11	; 17
    701e:	9a e0       	ldi	r25, 0x0A	; 10
    7020:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7024:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7026:	14 35       	cpi	r17, 0x54	; 84
    7028:	a1 f7       	brne	.-24     	; 0x7012 <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    702a:	99 24       	eor	r9, r9
    702c:	93 94       	inc	r9
    702e:	f0 c1       	rjmp	.+992    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7030:	85 e0       	ldi	r24, 0x05	; 5
    7032:	9a e0       	ldi	r25, 0x0A	; 10
    7034:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    7038:	f6 01       	movw	r30, r12
    703a:	21 89       	ldd	r18, Z+17	; 0x11
    703c:	90 e0       	ldi	r25, 0x00	; 0
    703e:	82 0f       	add	r24, r18
    7040:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    7042:	8c 33       	cpi	r24, 0x3C	; 60
    7044:	10 f4       	brcc	.+4      	; 0x704a <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7046:	81 8b       	std	Z+17, r24	; 0x11
    7048:	e3 c1       	rjmp	.+966    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    704a:	f6 01       	movw	r30, r12
    704c:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    704e:	ef e3       	ldi	r30, 0x3F	; 63
    7050:	f3 e0       	ldi	r31, 0x03	; 3
    7052:	d2 01       	movw	r26, r4
    7054:	87 2d       	mov	r24, r7
    7056:	01 90       	ld	r0, Z+
    7058:	0d 92       	st	X+, r0
    705a:	8a 95       	dec	r24
    705c:	e1 f7       	brne	.-8      	; 0x7056 <_Z13uhreinstellenv+0x344>
    705e:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7060:	f5 01       	movw	r30, r10
    7062:	61 91       	ld	r22, Z+
    7064:	5f 01       	movw	r10, r30
    7066:	28 e3       	ldi	r18, 0x38	; 56
    7068:	41 2f       	mov	r20, r17
    706a:	81 e1       	ldi	r24, 0x11	; 17
    706c:	9a e0       	ldi	r25, 0x0A	; 10
    706e:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7072:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7074:	14 35       	cpi	r17, 0x54	; 84
    7076:	a1 f7       	brne	.-24     	; 0x7060 <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    7078:	99 24       	eor	r9, r9
    707a:	93 94       	inc	r9
    707c:	c9 c1       	rjmp	.+914    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    707e:	85 e0       	ldi	r24, 0x05	; 5
    7080:	9a e0       	ldi	r25, 0x0A	; 10
    7082:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    7086:	88 0f       	add	r24, r24
    7088:	98 2f       	mov	r25, r24
    708a:	99 0f       	add	r25, r25
    708c:	99 0f       	add	r25, r25
    708e:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    7090:	80 32       	cpi	r24, 0x20	; 32
    7092:	18 f4       	brcc	.+6      	; 0x709a <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    7094:	f6 01       	movw	r30, r12
    7096:	84 8b       	std	Z+20, r24	; 0x14
    7098:	bb c1       	rjmp	.+886    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    709a:	f6 01       	movw	r30, r12
    709c:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    709e:	8b e0       	ldi	r24, 0x0B	; 11
    70a0:	ee e4       	ldi	r30, 0x4E	; 78
    70a2:	f3 e0       	ldi	r31, 0x03	; 3
    70a4:	d2 01       	movw	r26, r4
    70a6:	01 90       	ld	r0, Z+
    70a8:	0d 92       	st	X+, r0
    70aa:	8a 95       	dec	r24
    70ac:	e1 f7       	brne	.-8      	; 0x70a6 <_Z13uhreinstellenv+0x394>
    70ae:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    70b0:	f5 01       	movw	r30, r10
    70b2:	61 91       	ld	r22, Z+
    70b4:	5f 01       	movw	r10, r30
    70b6:	28 e3       	ldi	r18, 0x38	; 56
    70b8:	41 2f       	mov	r20, r17
    70ba:	81 e1       	ldi	r24, 0x11	; 17
    70bc:	9a e0       	ldi	r25, 0x0A	; 10
    70be:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    70c2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    70c4:	1c 33       	cpi	r17, 0x3C	; 60
    70c6:	a1 f7       	brne	.-24     	; 0x70b0 <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    70c8:	0f 2e       	mov	r0, r31
    70ca:	f3 e0       	ldi	r31, 0x03	; 3
    70cc:	9f 2e       	mov	r9, r31
    70ce:	f0 2d       	mov	r31, r0
    70d0:	9f c1       	rjmp	.+830    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    70d2:	85 e0       	ldi	r24, 0x05	; 5
    70d4:	9a e0       	ldi	r25, 0x0A	; 10
    70d6:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    70da:	f6 01       	movw	r30, r12
    70dc:	24 89       	ldd	r18, Z+20	; 0x14
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	82 0f       	add	r24, r18
    70e2:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    70e4:	80 32       	cpi	r24, 0x20	; 32
    70e6:	10 f4       	brcc	.+4      	; 0x70ec <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    70e8:	84 8b       	std	Z+20, r24	; 0x14
    70ea:	92 c1       	rjmp	.+804    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    70ec:	f6 01       	movw	r30, r12
    70ee:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    70f0:	8b e0       	ldi	r24, 0x0B	; 11
    70f2:	ee e4       	ldi	r30, 0x4E	; 78
    70f4:	f3 e0       	ldi	r31, 0x03	; 3
    70f6:	d2 01       	movw	r26, r4
    70f8:	01 90       	ld	r0, Z+
    70fa:	0d 92       	st	X+, r0
    70fc:	8a 95       	dec	r24
    70fe:	e1 f7       	brne	.-8      	; 0x70f8 <_Z13uhreinstellenv+0x3e6>
    7100:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7102:	f5 01       	movw	r30, r10
    7104:	61 91       	ld	r22, Z+
    7106:	5f 01       	movw	r10, r30
    7108:	28 e3       	ldi	r18, 0x38	; 56
    710a:	41 2f       	mov	r20, r17
    710c:	81 e1       	ldi	r24, 0x11	; 17
    710e:	9a e0       	ldi	r25, 0x0A	; 10
    7110:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7114:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7116:	1c 33       	cpi	r17, 0x3C	; 60
    7118:	a1 f7       	brne	.-24     	; 0x7102 <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    711a:	0f 2e       	mov	r0, r31
    711c:	f3 e0       	ldi	r31, 0x03	; 3
    711e:	9f 2e       	mov	r9, r31
    7120:	f0 2d       	mov	r31, r0
    7122:	76 c1       	rjmp	.+748    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    7124:	85 e0       	ldi	r24, 0x05	; 5
    7126:	9a e0       	ldi	r25, 0x0A	; 10
    7128:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    712c:	88 0f       	add	r24, r24
    712e:	98 2f       	mov	r25, r24
    7130:	99 0f       	add	r25, r25
    7132:	99 0f       	add	r25, r25
    7134:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    7136:	8d 30       	cpi	r24, 0x0D	; 13
    7138:	18 f4       	brcc	.+6      	; 0x7140 <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    713a:	f6 01       	movw	r30, r12
    713c:	86 8b       	std	Z+22, r24	; 0x16
    713e:	68 c1       	rjmp	.+720    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    7140:	f6 01       	movw	r30, r12
    7142:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    7144:	8d e0       	ldi	r24, 0x0D	; 13
    7146:	e9 e5       	ldi	r30, 0x59	; 89
    7148:	f3 e0       	ldi	r31, 0x03	; 3
    714a:	d2 01       	movw	r26, r4
    714c:	01 90       	ld	r0, Z+
    714e:	0d 92       	st	X+, r0
    7150:	8a 95       	dec	r24
    7152:	e1 f7       	brne	.-8      	; 0x714c <_Z13uhreinstellenv+0x43a>
    7154:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7156:	f5 01       	movw	r30, r10
    7158:	61 91       	ld	r22, Z+
    715a:	5f 01       	movw	r10, r30
    715c:	28 e3       	ldi	r18, 0x38	; 56
    715e:	41 2f       	mov	r20, r17
    7160:	81 e1       	ldi	r24, 0x11	; 17
    7162:	9a e0       	ldi	r25, 0x0A	; 10
    7164:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7168:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    716a:	18 34       	cpi	r17, 0x48	; 72
    716c:	a1 f7       	brne	.-24     	; 0x7156 <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    716e:	0f 2e       	mov	r0, r31
    7170:	f5 e0       	ldi	r31, 0x05	; 5
    7172:	9f 2e       	mov	r9, r31
    7174:	f0 2d       	mov	r31, r0
    7176:	4c c1       	rjmp	.+664    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    7178:	85 e0       	ldi	r24, 0x05	; 5
    717a:	9a e0       	ldi	r25, 0x0A	; 10
    717c:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    7180:	f6 01       	movw	r30, r12
    7182:	26 89       	ldd	r18, Z+22	; 0x16
    7184:	90 e0       	ldi	r25, 0x00	; 0
    7186:	82 0f       	add	r24, r18
    7188:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    718a:	8d 30       	cpi	r24, 0x0D	; 13
    718c:	10 f4       	brcc	.+4      	; 0x7192 <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    718e:	86 8b       	std	Z+22, r24	; 0x16
    7190:	1d c0       	rjmp	.+58     	; 0x71cc <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    7192:	f6 01       	movw	r30, r12
    7194:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    7196:	8d e0       	ldi	r24, 0x0D	; 13
    7198:	e9 e5       	ldi	r30, 0x59	; 89
    719a:	f3 e0       	ldi	r31, 0x03	; 3
    719c:	d2 01       	movw	r26, r4
    719e:	01 90       	ld	r0, Z+
    71a0:	0d 92       	st	X+, r0
    71a2:	8a 95       	dec	r24
    71a4:	e1 f7       	brne	.-8      	; 0x719e <_Z13uhreinstellenv+0x48c>
    71a6:	2d 88       	ldd	r2, Y+21	; 0x15
    71a8:	3e 88       	ldd	r3, Y+22	; 0x16
    71aa:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    71ac:	f1 01       	movw	r30, r2
    71ae:	61 91       	ld	r22, Z+
    71b0:	1f 01       	movw	r2, r30
    71b2:	28 e3       	ldi	r18, 0x38	; 56
    71b4:	41 2f       	mov	r20, r17
    71b6:	81 e1       	ldi	r24, 0x11	; 17
    71b8:	9a e0       	ldi	r25, 0x0A	; 10
    71ba:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    71be:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    71c0:	18 34       	cpi	r17, 0x48	; 72
    71c2:	a1 f7       	brne	.-24     	; 0x71ac <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    71c4:	0f 2e       	mov	r0, r31
    71c6:	f5 e0       	ldi	r31, 0x05	; 5
    71c8:	9f 2e       	mov	r9, r31
    71ca:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    71cc:	f6 01       	movw	r30, r12
    71ce:	96 89       	ldd	r25, Z+22	; 0x16
    71d0:	89 2f       	mov	r24, r25
    71d2:	8d 7f       	andi	r24, 0xFD	; 253
    71d4:	84 30       	cpi	r24, 0x04	; 4
    71d6:	11 f0       	breq	.+4      	; 0x71dc <_Z13uhreinstellenv+0x4ca>
    71d8:	89 30       	cpi	r24, 0x09	; 9
    71da:	09 f5       	brne	.+66     	; 0x721e <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    71dc:	f6 01       	movw	r30, r12
    71de:	84 89       	ldd	r24, Z+20	; 0x14
    71e0:	8f 31       	cpi	r24, 0x1F	; 31
    71e2:	08 f4       	brcc	.+2      	; 0x71e6 <_Z13uhreinstellenv+0x4d4>
    71e4:	d8 c0       	rjmp	.+432    	; 0x7396 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    71e6:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    71e8:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    71ea:	8b e0       	ldi	r24, 0x0B	; 11
    71ec:	ee e4       	ldi	r30, 0x4E	; 78
    71ee:	f3 e0       	ldi	r31, 0x03	; 3
    71f0:	d2 01       	movw	r26, r4
    71f2:	01 90       	ld	r0, Z+
    71f4:	0d 92       	st	X+, r0
    71f6:	8a 95       	dec	r24
    71f8:	e1 f7       	brne	.-8      	; 0x71f2 <_Z13uhreinstellenv+0x4e0>
    71fa:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    71fc:	f5 01       	movw	r30, r10
    71fe:	61 91       	ld	r22, Z+
    7200:	5f 01       	movw	r10, r30
    7202:	28 e3       	ldi	r18, 0x38	; 56
    7204:	41 2f       	mov	r20, r17
    7206:	81 e1       	ldi	r24, 0x11	; 17
    7208:	9a e0       	ldi	r25, 0x0A	; 10
    720a:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    720e:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7210:	1c 33       	cpi	r17, 0x3C	; 60
    7212:	a1 f7       	brne	.-24     	; 0x71fc <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    7214:	0f 2e       	mov	r0, r31
    7216:	f3 e0       	ldi	r31, 0x03	; 3
    7218:	9f 2e       	mov	r9, r31
    721a:	f0 2d       	mov	r31, r0
    721c:	f9 c0       	rjmp	.+498    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    721e:	92 30       	cpi	r25, 0x02	; 2
    7220:	09 f0       	breq	.+2      	; 0x7224 <_Z13uhreinstellenv+0x512>
    7222:	b9 c0       	rjmp	.+370    	; 0x7396 <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    7224:	f6 01       	movw	r30, r12
    7226:	84 89       	ldd	r24, Z+20	; 0x14
    7228:	8e 31       	cpi	r24, 0x1E	; 30
    722a:	08 f4       	brcc	.+2      	; 0x722e <_Z13uhreinstellenv+0x51c>
    722c:	b4 c0       	rjmp	.+360    	; 0x7396 <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    722e:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7230:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    7232:	8b e0       	ldi	r24, 0x0B	; 11
    7234:	ee e4       	ldi	r30, 0x4E	; 78
    7236:	f3 e0       	ldi	r31, 0x03	; 3
    7238:	d2 01       	movw	r26, r4
    723a:	01 90       	ld	r0, Z+
    723c:	0d 92       	st	X+, r0
    723e:	8a 95       	dec	r24
    7240:	e1 f7       	brne	.-8      	; 0x723a <_Z13uhreinstellenv+0x528>
    7242:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7244:	f5 01       	movw	r30, r10
    7246:	61 91       	ld	r22, Z+
    7248:	5f 01       	movw	r10, r30
    724a:	28 e3       	ldi	r18, 0x38	; 56
    724c:	41 2f       	mov	r20, r17
    724e:	81 e1       	ldi	r24, 0x11	; 17
    7250:	9a e0       	ldi	r25, 0x0A	; 10
    7252:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7256:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7258:	1c 33       	cpi	r17, 0x3C	; 60
    725a:	a1 f7       	brne	.-24     	; 0x7244 <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    725c:	0f 2e       	mov	r0, r31
    725e:	f3 e0       	ldi	r31, 0x03	; 3
    7260:	9f 2e       	mov	r9, r31
    7262:	f0 2d       	mov	r31, r0
    7264:	d5 c0       	rjmp	.+426    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    7266:	85 e0       	ldi	r24, 0x05	; 5
    7268:	9a e0       	ldi	r25, 0x0A	; 10
    726a:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    726e:	88 0f       	add	r24, r24
    7270:	98 2f       	mov	r25, r24
    7272:	99 0f       	add	r25, r25
    7274:	99 0f       	add	r25, r25
    7276:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    7278:	82 33       	cpi	r24, 0x32	; 50
    727a:	18 f4       	brcc	.+6      	; 0x7282 <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    727c:	f6 01       	movw	r30, r12
    727e:	87 8b       	std	Z+23, r24	; 0x17
    7280:	c7 c0       	rjmp	.+398    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    7282:	f6 01       	movw	r30, r12
    7284:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    7286:	8c e0       	ldi	r24, 0x0C	; 12
    7288:	e6 e6       	ldi	r30, 0x66	; 102
    728a:	f3 e0       	ldi	r31, 0x03	; 3
    728c:	d2 01       	movw	r26, r4
    728e:	01 90       	ld	r0, Z+
    7290:	0d 92       	st	X+, r0
    7292:	8a 95       	dec	r24
    7294:	e1 f7       	brne	.-8      	; 0x728e <_Z13uhreinstellenv+0x57c>
    7296:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7298:	f5 01       	movw	r30, r10
    729a:	61 91       	ld	r22, Z+
    729c:	5f 01       	movw	r10, r30
    729e:	28 e3       	ldi	r18, 0x38	; 56
    72a0:	41 2f       	mov	r20, r17
    72a2:	81 e1       	ldi	r24, 0x11	; 17
    72a4:	9a e0       	ldi	r25, 0x0A	; 10
    72a6:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    72aa:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    72ac:	12 34       	cpi	r17, 0x42	; 66
    72ae:	a1 f7       	brne	.-24     	; 0x7298 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    72b0:	0f 2e       	mov	r0, r31
    72b2:	f7 e0       	ldi	r31, 0x07	; 7
    72b4:	9f 2e       	mov	r9, r31
    72b6:	f0 2d       	mov	r31, r0
    72b8:	ab c0       	rjmp	.+342    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    72ba:	85 e0       	ldi	r24, 0x05	; 5
    72bc:	9a e0       	ldi	r25, 0x0A	; 10
    72be:	0e 94 73 24 	call	0x48e6	; 0x48e6 <_ZN9Interface17ZahlenausTastaturEv>
    72c2:	f6 01       	movw	r30, r12
    72c4:	27 89       	ldd	r18, Z+23	; 0x17
    72c6:	90 e0       	ldi	r25, 0x00	; 0
    72c8:	82 0f       	add	r24, r18
    72ca:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    72cc:	82 33       	cpi	r24, 0x32	; 50
    72ce:	08 f4       	brcc	.+2      	; 0x72d2 <_Z13uhreinstellenv+0x5c0>
    72d0:	96 c0       	rjmp	.+300    	; 0x73fe <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    72d2:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    72d4:	8c e0       	ldi	r24, 0x0C	; 12
    72d6:	e6 e6       	ldi	r30, 0x66	; 102
    72d8:	f3 e0       	ldi	r31, 0x03	; 3
    72da:	d2 01       	movw	r26, r4
    72dc:	01 90       	ld	r0, Z+
    72de:	0d 92       	st	X+, r0
    72e0:	8a 95       	dec	r24
    72e2:	e1 f7       	brne	.-8      	; 0x72dc <_Z13uhreinstellenv+0x5ca>
    72e4:	2d 88       	ldd	r2, Y+21	; 0x15
    72e6:	3e 88       	ldd	r3, Y+22	; 0x16
    72e8:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    72ea:	f1 01       	movw	r30, r2
    72ec:	61 91       	ld	r22, Z+
    72ee:	1f 01       	movw	r2, r30
    72f0:	28 e3       	ldi	r18, 0x38	; 56
    72f2:	41 2f       	mov	r20, r17
    72f4:	81 e1       	ldi	r24, 0x11	; 17
    72f6:	9a e0       	ldi	r25, 0x0A	; 10
    72f8:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    72fc:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    72fe:	12 34       	cpi	r17, 0x42	; 66
    7300:	a1 f7       	brne	.-24     	; 0x72ea <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    7302:	0f 2e       	mov	r0, r31
    7304:	f7 e0       	ldi	r31, 0x07	; 7
    7306:	9f 2e       	mov	r9, r31
    7308:	f0 2d       	mov	r31, r0
    730a:	7b c0       	rjmp	.+246    	; 0x7402 <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    730c:	f6 01       	movw	r30, r12
    730e:	17 89       	ldd	r17, Z+23	; 0x17
    7310:	13 70       	andi	r17, 0x03	; 3
    7312:	f9 f4       	brne	.+62     	; 0x7352 <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    7314:	84 89       	ldd	r24, Z+20	; 0x14
    7316:	8e 31       	cpi	r24, 0x1E	; 30
    7318:	f0 f1       	brcs	.+124    	; 0x7396 <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    731a:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    731c:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    731e:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    7320:	8b e0       	ldi	r24, 0x0B	; 11
    7322:	ee e4       	ldi	r30, 0x4E	; 78
    7324:	f3 e0       	ldi	r31, 0x03	; 3
    7326:	d2 01       	movw	r26, r4
    7328:	01 90       	ld	r0, Z+
    732a:	0d 92       	st	X+, r0
    732c:	8a 95       	dec	r24
    732e:	e1 f7       	brne	.-8      	; 0x7328 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7330:	f5 01       	movw	r30, r10
    7332:	61 91       	ld	r22, Z+
    7334:	5f 01       	movw	r10, r30
    7336:	28 e3       	ldi	r18, 0x38	; 56
    7338:	41 2f       	mov	r20, r17
    733a:	81 e1       	ldi	r24, 0x11	; 17
    733c:	9a e0       	ldi	r25, 0x0A	; 10
    733e:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7342:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    7344:	1c 33       	cpi	r17, 0x3C	; 60
    7346:	a1 f7       	brne	.-24     	; 0x7330 <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    7348:	0f 2e       	mov	r0, r31
    734a:	f3 e0       	ldi	r31, 0x03	; 3
    734c:	9f 2e       	mov	r9, r31
    734e:	f0 2d       	mov	r31, r0
    7350:	5f c0       	rjmp	.+190    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    7352:	f6 01       	movw	r30, r12
    7354:	84 89       	ldd	r24, Z+20	; 0x14
    7356:	8d 31       	cpi	r24, 0x1D	; 29
    7358:	f0 f0       	brcs	.+60     	; 0x7396 <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    735a:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    735c:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    735e:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    7360:	8b e0       	ldi	r24, 0x0B	; 11
    7362:	ee e4       	ldi	r30, 0x4E	; 78
    7364:	f3 e0       	ldi	r31, 0x03	; 3
    7366:	d2 01       	movw	r26, r4
    7368:	01 90       	ld	r0, Z+
    736a:	0d 92       	st	X+, r0
    736c:	8a 95       	dec	r24
    736e:	e1 f7       	brne	.-8      	; 0x7368 <_Z13uhreinstellenv+0x656>
    7370:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7372:	f5 01       	movw	r30, r10
    7374:	61 91       	ld	r22, Z+
    7376:	5f 01       	movw	r10, r30
    7378:	28 e3       	ldi	r18, 0x38	; 56
    737a:	41 2f       	mov	r20, r17
    737c:	81 e1       	ldi	r24, 0x11	; 17
    737e:	9a e0       	ldi	r25, 0x0A	; 10
    7380:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7384:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    7386:	1c 33       	cpi	r17, 0x3C	; 60
    7388:	a1 f7       	brne	.-24     	; 0x7372 <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    738a:	0f 2e       	mov	r0, r31
    738c:	f3 e0       	ldi	r31, 0x03	; 3
    738e:	9f 2e       	mov	r9, r31
    7390:	f0 2d       	mov	r31, r0
    7392:	3e c0       	rjmp	.+124    	; 0x7410 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    7394:	93 94       	inc	r9
			break;
		}
		pos++;
    7396:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    7398:	fa e0       	ldi	r31, 0x0A	; 10
    739a:	f9 15       	cp	r31, r9
    739c:	08 f0       	brcs	.+2      	; 0x73a0 <_Z13uhreinstellenv+0x68e>
    739e:	f6 cc       	rjmp	.-1556   	; 0x6d8c <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    73a0:	02 e1       	ldi	r16, 0x12	; 18
    73a2:	1e e0       	ldi	r17, 0x0E	; 14
    73a4:	f8 01       	movw	r30, r16
    73a6:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    73a8:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    73aa:	61 89       	ldd	r22, Z+17	; 0x11
    73ac:	80 e0       	ldi	r24, 0x00	; 0
    73ae:	90 e0       	ldi	r25, 0x00	; 0
    73b0:	0e 94 21 2b 	call	0x5642	; 0x5642 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    73b4:	f8 01       	movw	r30, r16
    73b6:	60 89       	ldd	r22, Z+16	; 0x10
    73b8:	81 e0       	ldi	r24, 0x01	; 1
    73ba:	90 e0       	ldi	r25, 0x00	; 0
    73bc:	0e 94 21 2b 	call	0x5642	; 0x5642 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    73c0:	f8 01       	movw	r30, r16
    73c2:	64 89       	ldd	r22, Z+20	; 0x14
    73c4:	82 e0       	ldi	r24, 0x02	; 2
    73c6:	90 e0       	ldi	r25, 0x00	; 0
    73c8:	0e 94 21 2b 	call	0x5642	; 0x5642 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    73cc:	f8 01       	movw	r30, r16
    73ce:	66 89       	ldd	r22, Z+22	; 0x16
    73d0:	83 e0       	ldi	r24, 0x03	; 3
    73d2:	90 e0       	ldi	r25, 0x00	; 0
    73d4:	0e 94 21 2b 	call	0x5642	; 0x5642 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    73d8:	f8 01       	movw	r30, r16
    73da:	67 89       	ldd	r22, Z+23	; 0x17
    73dc:	84 e0       	ldi	r24, 0x04	; 4
    73de:	90 e0       	ldi	r25, 0x00	; 0
    73e0:	0e 94 21 2b 	call	0x5642	; 0x5642 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    73e4:	81 e1       	ldi	r24, 0x11	; 17
    73e6:	9a e0       	ldi	r25, 0x0A	; 10
    73e8:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    73ec:	c8 01       	movw	r24, r16
    73ee:	78 d3       	rcall	.+1776   	; 0x7ae0 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    73f0:	c8 01       	movw	r24, r16
    73f2:	3d d3       	rcall	.+1658   	; 0x7a6e <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    73f4:	c8 01       	movw	r24, r16
    73f6:	55 d4       	rcall	.+2218   	; 0x7ca2 <_ZN3RTC8RTCstartEv>
    73f8:	0d c0       	rjmp	.+26     	; 0x7414 <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    73fa:	93 94       	inc	r9
    73fc:	c7 cc       	rjmp	.-1650   	; 0x6d8c <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    73fe:	f6 01       	movw	r30, r12
    7400:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    7402:	f6 01       	movw	r30, r12
    7404:	86 89       	ldd	r24, Z+22	; 0x16
    7406:	82 30       	cpi	r24, 0x02	; 2
    7408:	c1 f7       	brne	.-16     	; 0x73fa <_Z13uhreinstellenv+0x6e8>
    740a:	80 cf       	rjmp	.-256    	; 0x730c <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    740c:	f6 01       	movw	r30, r12
    740e:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7410:	93 94       	inc	r9
    7412:	bc cc       	rjmp	.-1672   	; 0x6d8c <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    7414:	66 96       	adiw	r28, 0x16	; 22
    7416:	0f b6       	in	r0, 0x3f	; 63
    7418:	f8 94       	cli
    741a:	de bf       	out	0x3e, r29	; 62
    741c:	0f be       	out	0x3f, r0	; 63
    741e:	cd bf       	out	0x3d, r28	; 61
    7420:	df 91       	pop	r29
    7422:	cf 91       	pop	r28
    7424:	1f 91       	pop	r17
    7426:	0f 91       	pop	r16
    7428:	ff 90       	pop	r15
    742a:	ef 90       	pop	r14
    742c:	df 90       	pop	r13
    742e:	cf 90       	pop	r12
    7430:	bf 90       	pop	r11
    7432:	af 90       	pop	r10
    7434:	9f 90       	pop	r9
    7436:	8f 90       	pop	r8
    7438:	7f 90       	pop	r7
    743a:	6f 90       	pop	r6
    743c:	5f 90       	pop	r5
    743e:	4f 90       	pop	r4
    7440:	3f 90       	pop	r3
    7442:	2f 90       	pop	r2
    7444:	08 95       	ret

00007446 <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    7446:	cf 92       	push	r12
    7448:	df 92       	push	r13
    744a:	ef 92       	push	r14
    744c:	ff 92       	push	r15
    744e:	0f 93       	push	r16
    7450:	1f 93       	push	r17
    7452:	cf 93       	push	r28
    7454:	df 93       	push	r29
    7456:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7458:	8f 89       	ldd	r24, Y+23	; 0x17
    745a:	98 8d       	ldd	r25, Y+24	; 0x18
    745c:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN7Display10clearFrameEv>
    7460:	10 e0       	ldi	r17, 0x00	; 0
    7462:	e1 2c       	mov	r14, r1
    7464:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    7466:	e9 8d       	ldd	r30, Y+25	; 0x19
    7468:	fa 8d       	ldd	r31, Y+26	; 0x1a
    746a:	ee 0d       	add	r30, r14
    746c:	ff 1d       	adc	r31, r15
    746e:	20 e0       	ldi	r18, 0x00	; 0
    7470:	41 2f       	mov	r20, r17
    7472:	60 81       	ld	r22, Z
    7474:	8f 89       	ldd	r24, Y+23	; 0x17
    7476:	98 8d       	ldd	r25, Y+24	; 0x18
    7478:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    747c:	2f ef       	ldi	r18, 0xFF	; 255
    747e:	e2 1a       	sub	r14, r18
    7480:	f2 0a       	sbc	r15, r18
    7482:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    7484:	10 33       	cpi	r17, 0x30	; 48
    7486:	79 f7       	brne	.-34     	; 0x7466 <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    7488:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <_Z14Batteriestatusv>
    748c:	7e 01       	movw	r14, r28
    748e:	32 e0       	ldi	r19, 0x02	; 2
    7490:	e3 0e       	add	r14, r19
    7492:	f1 1c       	adc	r15, r1
    7494:	28 2f       	mov	r18, r24
    7496:	08 2e       	mov	r0, r24
    7498:	00 0c       	add	r0, r0
    749a:	33 0b       	sbc	r19, r19
    749c:	3f 93       	push	r19
    749e:	8f 93       	push	r24
    74a0:	82 ec       	ldi	r24, 0xC2	; 194
    74a2:	91 e0       	ldi	r25, 0x01	; 1
    74a4:	9f 93       	push	r25
    74a6:	8f 93       	push	r24
    74a8:	ff 92       	push	r15
    74aa:	ef 92       	push	r14
    74ac:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    74b0:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    74b2:	15 e1       	ldi	r17, 0x15	; 21
    74b4:	18 1b       	sub	r17, r24
    74b6:	0f 90       	pop	r0
    74b8:	0f 90       	pop	r0
    74ba:	0f 90       	pop	r0
    74bc:	0f 90       	pop	r0
    74be:	0f 90       	pop	r0
    74c0:	0f 90       	pop	r0
    74c2:	15 31       	cpi	r17, 0x15	; 21
    74c4:	08 f0       	brcs	.+2      	; 0x74c8 <_ZN13einstellungen4drawEv+0x82>
    74c6:	80 c1       	rjmp	.+768    	; 0x77c8 <_ZN13einstellungen4drawEv+0x382>
    74c8:	01 2f       	mov	r16, r17
    74ca:	00 0f       	add	r16, r16
    74cc:	01 0f       	add	r16, r17
    74ce:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    74d0:	8e 89       	ldd	r24, Y+22	; 0x16
    74d2:	fe 01       	movw	r30, r28
    74d4:	e1 0f       	add	r30, r17
    74d6:	f1 1d       	adc	r31, r1
    74d8:	e8 0f       	add	r30, r24
    74da:	f1 1d       	adc	r31, r1
    74dc:	73 97       	sbiw	r30, 0x13	; 19
    74de:	20 e0       	ldi	r18, 0x00	; 0
    74e0:	40 2f       	mov	r20, r16
    74e2:	60 81       	ld	r22, Z
    74e4:	8f 89       	ldd	r24, Y+23	; 0x17
    74e6:	98 8d       	ldd	r25, Y+24	; 0x18
    74e8:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    74ec:	1f 5f       	subi	r17, 0xFF	; 255
    74ee:	0a 5f       	subi	r16, 0xFA	; 250
    74f0:	15 31       	cpi	r17, 0x15	; 21
    74f2:	71 f7       	brne	.-36     	; 0x74d0 <_ZN13einstellungen4drawEv+0x8a>
    74f4:	69 c1       	rjmp	.+722    	; 0x77c8 <_ZN13einstellungen4drawEv+0x382>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    74f6:	e9 8d       	ldd	r30, Y+25	; 0x19
    74f8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    74fa:	ec 0d       	add	r30, r12
    74fc:	fd 1d       	adc	r31, r13
    74fe:	28 e3       	ldi	r18, 0x38	; 56
    7500:	41 2f       	mov	r20, r17
    7502:	60 85       	ldd	r22, Z+8	; 0x08
    7504:	8f 89       	ldd	r24, Y+23	; 0x17
    7506:	98 8d       	ldd	r25, Y+24	; 0x18
    7508:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    750c:	8f ef       	ldi	r24, 0xFF	; 255
    750e:	c8 1a       	sub	r12, r24
    7510:	d8 0a       	sbc	r13, r24
    7512:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    7514:	10 38       	cpi	r17, 0x80	; 128
    7516:	79 f7       	brne	.-34     	; 0x74f6 <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    7518:	8e a1       	ldd	r24, Y+38	; 0x26
    751a:	81 11       	cpse	r24, r1
    751c:	ae c0       	rjmp	.+348    	; 0x767a <_ZN13einstellungen4drawEv+0x234>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    751e:	80 e1       	ldi	r24, 0x10	; 16
    7520:	e2 e7       	ldi	r30, 0x72	; 114
    7522:	f3 e0       	ldi	r31, 0x03	; 3
    7524:	d7 01       	movw	r26, r14
    7526:	01 90       	ld	r0, Z+
    7528:	0d 92       	st	X+, r0
    752a:	8a 95       	dec	r24
    752c:	e1 f7       	brne	.-8      	; 0x7526 <_ZN13einstellungen4drawEv+0xe0>
    752e:	8f e0       	ldi	r24, 0x0F	; 15
    7530:	8e 8b       	std	Y+22, r24	; 0x16
    7532:	0c e0       	ldi	r16, 0x0C	; 12
    7534:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    7536:	fe 01       	movw	r30, r28
    7538:	e1 0f       	add	r30, r17
    753a:	f1 1d       	adc	r31, r1
    753c:	20 e1       	ldi	r18, 0x10	; 16
    753e:	40 2f       	mov	r20, r16
    7540:	62 81       	ldd	r22, Z+2	; 0x02
    7542:	8f 89       	ldd	r24, Y+23	; 0x17
    7544:	98 8d       	ldd	r25, Y+24	; 0x18
    7546:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    754a:	1f 5f       	subi	r17, 0xFF	; 255
    754c:	0a 5f       	subi	r16, 0xFA	; 250
    754e:	8e 89       	ldd	r24, Y+22	; 0x16
    7550:	18 17       	cp	r17, r24
    7552:	88 f3       	brcs	.-30     	; 0x7536 <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    7554:	8c e0       	ldi	r24, 0x0C	; 12
    7556:	e2 e8       	ldi	r30, 0x82	; 130
    7558:	f3 e0       	ldi	r31, 0x03	; 3
    755a:	d7 01       	movw	r26, r14
    755c:	01 90       	ld	r0, Z+
    755e:	0d 92       	st	X+, r0
    7560:	8a 95       	dec	r24
    7562:	e1 f7       	brne	.-8      	; 0x755c <_ZN13einstellungen4drawEv+0x116>
    7564:	8b e0       	ldi	r24, 0x0B	; 11
    7566:	8e 8b       	std	Y+22, r24	; 0x16
    7568:	0c e0       	ldi	r16, 0x0C	; 12
    756a:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    756c:	fe 01       	movw	r30, r28
    756e:	e1 0f       	add	r30, r17
    7570:	f1 1d       	adc	r31, r1
    7572:	28 e1       	ldi	r18, 0x18	; 24
    7574:	40 2f       	mov	r20, r16
    7576:	62 81       	ldd	r22, Z+2	; 0x02
    7578:	8f 89       	ldd	r24, Y+23	; 0x17
    757a:	98 8d       	ldd	r25, Y+24	; 0x18
    757c:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7580:	1f 5f       	subi	r17, 0xFF	; 255
    7582:	0a 5f       	subi	r16, 0xFA	; 250
    7584:	8e 89       	ldd	r24, Y+22	; 0x16
    7586:	18 17       	cp	r17, r24
    7588:	88 f3       	brcs	.-30     	; 0x756c <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    758a:	8f e0       	ldi	r24, 0x0F	; 15
    758c:	ee e8       	ldi	r30, 0x8E	; 142
    758e:	f3 e0       	ldi	r31, 0x03	; 3
    7590:	d7 01       	movw	r26, r14
    7592:	01 90       	ld	r0, Z+
    7594:	0d 92       	st	X+, r0
    7596:	8a 95       	dec	r24
    7598:	e1 f7       	brne	.-8      	; 0x7592 <_ZN13einstellungen4drawEv+0x14c>
    759a:	8e e0       	ldi	r24, 0x0E	; 14
    759c:	8e 8b       	std	Y+22, r24	; 0x16
    759e:	0c e0       	ldi	r16, 0x0C	; 12
    75a0:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    75a2:	fe 01       	movw	r30, r28
    75a4:	e1 0f       	add	r30, r17
    75a6:	f1 1d       	adc	r31, r1
    75a8:	20 e2       	ldi	r18, 0x20	; 32
    75aa:	40 2f       	mov	r20, r16
    75ac:	62 81       	ldd	r22, Z+2	; 0x02
    75ae:	8f 89       	ldd	r24, Y+23	; 0x17
    75b0:	98 8d       	ldd	r25, Y+24	; 0x18
    75b2:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    75b6:	1f 5f       	subi	r17, 0xFF	; 255
    75b8:	0a 5f       	subi	r16, 0xFA	; 250
    75ba:	8e 89       	ldd	r24, Y+22	; 0x16
    75bc:	18 17       	cp	r17, r24
    75be:	88 f3       	brcs	.-30     	; 0x75a2 <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"Mount SD: %u", (bool)(statusreg&(1<<mounttingstat)));
    75c0:	80 91 e5 08 	lds	r24, 0x08E5
    75c4:	86 95       	lsr	r24
    75c6:	81 70       	andi	r24, 0x01	; 1
    75c8:	1f 92       	push	r1
    75ca:	8f 93       	push	r24
    75cc:	8d e9       	ldi	r24, 0x9D	; 157
    75ce:	93 e0       	ldi	r25, 0x03	; 3
    75d0:	9f 93       	push	r25
    75d2:	8f 93       	push	r24
    75d4:	ff 92       	push	r15
    75d6:	ef 92       	push	r14
    75d8:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    75dc:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    75de:	0f 90       	pop	r0
    75e0:	0f 90       	pop	r0
    75e2:	0f 90       	pop	r0
    75e4:	0f 90       	pop	r0
    75e6:	0f 90       	pop	r0
    75e8:	0f 90       	pop	r0
    75ea:	88 23       	and	r24, r24
    75ec:	89 f0       	breq	.+34     	; 0x7610 <_ZN13einstellungen4drawEv+0x1ca>
    75ee:	0c e0       	ldi	r16, 0x0C	; 12
    75f0:	10 e0       	ldi	r17, 0x00	; 0
    75f2:	fe 01       	movw	r30, r28
    75f4:	e1 0f       	add	r30, r17
    75f6:	f1 1d       	adc	r31, r1
    75f8:	28 e2       	ldi	r18, 0x28	; 40
    75fa:	40 2f       	mov	r20, r16
    75fc:	62 81       	ldd	r22, Z+2	; 0x02
    75fe:	8f 89       	ldd	r24, Y+23	; 0x17
    7600:	98 8d       	ldd	r25, Y+24	; 0x18
    7602:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7606:	1f 5f       	subi	r17, 0xFF	; 255
    7608:	0a 5f       	subi	r16, 0xFA	; 250
    760a:	8e 89       	ldd	r24, Y+22	; 0x16
    760c:	18 17       	cp	r17, r24
    760e:	88 f3       	brcs	.-30     	; 0x75f2 <_ZN13einstellungen4drawEv+0x1ac>
			buffersize=sprintf(buffer,"Logging:  %u", (bool)(statusreg&(1<<loggingstat)));
    7610:	80 91 e5 08 	lds	r24, 0x08E5
    7614:	82 fb       	bst	r24, 2
    7616:	88 27       	eor	r24, r24
    7618:	80 f9       	bld	r24, 0
    761a:	1f 92       	push	r1
    761c:	8f 93       	push	r24
    761e:	8a ea       	ldi	r24, 0xAA	; 170
    7620:	93 e0       	ldi	r25, 0x03	; 3
    7622:	9f 93       	push	r25
    7624:	8f 93       	push	r24
    7626:	ff 92       	push	r15
    7628:	ef 92       	push	r14
    762a:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    762e:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    7630:	0f 90       	pop	r0
    7632:	0f 90       	pop	r0
    7634:	0f 90       	pop	r0
    7636:	0f 90       	pop	r0
    7638:	0f 90       	pop	r0
    763a:	0f 90       	pop	r0
    763c:	88 23       	and	r24, r24
    763e:	89 f0       	breq	.+34     	; 0x7662 <_ZN13einstellungen4drawEv+0x21c>
    7640:	0c e0       	ldi	r16, 0x0C	; 12
    7642:	10 e0       	ldi	r17, 0x00	; 0
    7644:	fe 01       	movw	r30, r28
    7646:	e1 0f       	add	r30, r17
    7648:	f1 1d       	adc	r31, r1
    764a:	20 e3       	ldi	r18, 0x30	; 48
    764c:	40 2f       	mov	r20, r16
    764e:	62 81       	ldd	r22, Z+2	; 0x02
    7650:	8f 89       	ldd	r24, Y+23	; 0x17
    7652:	98 8d       	ldd	r25, Y+24	; 0x18
    7654:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7658:	1f 5f       	subi	r17, 0xFF	; 255
    765a:	0a 5f       	subi	r16, 0xFA	; 250
    765c:	8e 89       	ldd	r24, Y+22	; 0x16
    765e:	18 17       	cp	r17, r24
    7660:	88 f3       	brcs	.-30     	; 0x7644 <_ZN13einstellungen4drawEv+0x1fe>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    7662:	2d a1       	ldd	r18, Y+37	; 0x25
    7664:	22 0f       	add	r18, r18
    7666:	22 0f       	add	r18, r18
    7668:	22 0f       	add	r18, r18
    766a:	20 5f       	subi	r18, 0xF0	; 240
    766c:	40 e0       	ldi	r20, 0x00	; 0
    766e:	6e e3       	ldi	r22, 0x3E	; 62
    7670:	8f 89       	ldd	r24, Y+23	; 0x17
    7672:	98 8d       	ldd	r25, Y+24	; 0x18
    7674:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7678:	a2 c0       	rjmp	.+324    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==0 && posx==1)
    767a:	9d a1       	ldd	r25, Y+37	; 0x25
    767c:	91 11       	cpse	r25, r1
    767e:	06 c0       	rjmp	.+12     	; 0x768c <_ZN13einstellungen4drawEv+0x246>
    7680:	81 30       	cpi	r24, 0x01	; 1
    7682:	09 f0       	breq	.+2      	; 0x7686 <_ZN13einstellungen4drawEv+0x240>
    7684:	9c c0       	rjmp	.+312    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    7686:	45 db       	rcall	.-2422   	; 0x6d12 <_Z13uhreinstellenv>
			posx=0;
    7688:	1e a2       	std	Y+38, r1	; 0x26
    768a:	99 c0       	rjmp	.+306    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
		}
		else if (posy==1 && posx==1)
    768c:	91 30       	cpi	r25, 0x01	; 1
    768e:	09 f0       	breq	.+2      	; 0x7692 <_ZN13einstellungen4drawEv+0x24c>
    7690:	60 c0       	rjmp	.+192    	; 0x7752 <_ZN13einstellungen4drawEv+0x30c>
    7692:	81 30       	cpi	r24, 0x01	; 1
    7694:	09 f0       	breq	.+2      	; 0x7698 <_ZN13einstellungen4drawEv+0x252>
    7696:	93 c0       	rjmp	.+294    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    7698:	85 e1       	ldi	r24, 0x15	; 21
    769a:	e7 eb       	ldi	r30, 0xB7	; 183
    769c:	f3 e0       	ldi	r31, 0x03	; 3
    769e:	d7 01       	movw	r26, r14
    76a0:	01 90       	ld	r0, Z+
    76a2:	0d 92       	st	X+, r0
    76a4:	8a 95       	dec	r24
    76a6:	e1 f7       	brne	.-8      	; 0x76a0 <_ZN13einstellungen4drawEv+0x25a>
    76a8:	84 e1       	ldi	r24, 0x14	; 20
    76aa:	8e 8b       	std	Y+22, r24	; 0x16
    76ac:	00 e0       	ldi	r16, 0x00	; 0
    76ae:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    76b0:	fe 01       	movw	r30, r28
    76b2:	e1 0f       	add	r30, r17
    76b4:	f1 1d       	adc	r31, r1
    76b6:	20 e1       	ldi	r18, 0x10	; 16
    76b8:	40 2f       	mov	r20, r16
    76ba:	62 81       	ldd	r22, Z+2	; 0x02
    76bc:	8f 89       	ldd	r24, Y+23	; 0x17
    76be:	98 8d       	ldd	r25, Y+24	; 0x18
    76c0:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    76c4:	1f 5f       	subi	r17, 0xFF	; 255
    76c6:	0a 5f       	subi	r16, 0xFA	; 250
    76c8:	8e 89       	ldd	r24, Y+22	; 0x16
    76ca:	18 17       	cp	r17, r24
    76cc:	88 f3       	brcs	.-30     	; 0x76b0 <_ZN13einstellungen4drawEv+0x26a>
			buffersize=sprintf(buffer,"* fuer start");
    76ce:	8d e0       	ldi	r24, 0x0D	; 13
    76d0:	ec ec       	ldi	r30, 0xCC	; 204
    76d2:	f3 e0       	ldi	r31, 0x03	; 3
    76d4:	d7 01       	movw	r26, r14
    76d6:	01 90       	ld	r0, Z+
    76d8:	0d 92       	st	X+, r0
    76da:	8a 95       	dec	r24
    76dc:	e1 f7       	brne	.-8      	; 0x76d6 <_ZN13einstellungen4drawEv+0x290>
    76de:	8c e0       	ldi	r24, 0x0C	; 12
    76e0:	8e 8b       	std	Y+22, r24	; 0x16
    76e2:	00 e0       	ldi	r16, 0x00	; 0
    76e4:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    76e6:	fe 01       	movw	r30, r28
    76e8:	e1 0f       	add	r30, r17
    76ea:	f1 1d       	adc	r31, r1
    76ec:	28 e1       	ldi	r18, 0x18	; 24
    76ee:	40 2f       	mov	r20, r16
    76f0:	62 81       	ldd	r22, Z+2	; 0x02
    76f2:	8f 89       	ldd	r24, Y+23	; 0x17
    76f4:	98 8d       	ldd	r25, Y+24	; 0x18
    76f6:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    76fa:	1f 5f       	subi	r17, 0xFF	; 255
    76fc:	0a 5f       	subi	r16, 0xFA	; 250
    76fe:	8e 89       	ldd	r24, Y+22	; 0x16
    7700:	18 17       	cp	r17, r24
    7702:	88 f3       	brcs	.-30     	; 0x76e6 <_ZN13einstellungen4drawEv+0x2a0>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    7704:	1f 92       	push	r1
    7706:	85 e0       	ldi	r24, 0x05	; 5
    7708:	8f 93       	push	r24
    770a:	89 ed       	ldi	r24, 0xD9	; 217
    770c:	93 e0       	ldi	r25, 0x03	; 3
    770e:	9f 93       	push	r25
    7710:	8f 93       	push	r24
    7712:	ff 92       	push	r15
    7714:	ef 92       	push	r14
    7716:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    771a:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    771c:	0f 90       	pop	r0
    771e:	0f 90       	pop	r0
    7720:	0f 90       	pop	r0
    7722:	0f 90       	pop	r0
    7724:	0f 90       	pop	r0
    7726:	0f 90       	pop	r0
    7728:	88 23       	and	r24, r24
    772a:	09 f4       	brne	.+2      	; 0x772e <_ZN13einstellungen4drawEv+0x2e8>
    772c:	48 c0       	rjmp	.+144    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
    772e:	00 e0       	ldi	r16, 0x00	; 0
    7730:	10 e0       	ldi	r17, 0x00	; 0
    7732:	fe 01       	movw	r30, r28
    7734:	e1 0f       	add	r30, r17
    7736:	f1 1d       	adc	r31, r1
    7738:	28 e2       	ldi	r18, 0x28	; 40
    773a:	40 2f       	mov	r20, r16
    773c:	62 81       	ldd	r22, Z+2	; 0x02
    773e:	8f 89       	ldd	r24, Y+23	; 0x17
    7740:	98 8d       	ldd	r25, Y+24	; 0x18
    7742:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
    7746:	1f 5f       	subi	r17, 0xFF	; 255
    7748:	0a 5f       	subi	r16, 0xFA	; 250
    774a:	8e 89       	ldd	r24, Y+22	; 0x16
    774c:	18 17       	cp	r17, r24
    774e:	88 f3       	brcs	.-30     	; 0x7732 <_ZN13einstellungen4drawEv+0x2ec>
    7750:	36 c0       	rjmp	.+108    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    7752:	92 30       	cpi	r25, 0x02	; 2
    7754:	a1 f5       	brne	.+104    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
    7756:	81 30       	cpi	r24, 0x01	; 1
    7758:	91 f5       	brne	.+100    	; 0x77be <_ZN13einstellungen4drawEv+0x378>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    775a:	80 e4       	ldi	r24, 0x40	; 64
    775c:	8f 93       	push	r24
    775e:	81 e4       	ldi	r24, 0x41	; 65
    7760:	8f 93       	push	r24
    7762:	8b ee       	ldi	r24, 0xEB	; 235
    7764:	8f 93       	push	r24
    7766:	85 e8       	ldi	r24, 0x85	; 133
    7768:	8f 93       	push	r24
    776a:	84 eb       	ldi	r24, 0xB4	; 180
    776c:	91 e0       	ldi	r25, 0x01	; 1
    776e:	9f 93       	push	r25
    7770:	8f 93       	push	r24
    7772:	ff 92       	push	r15
    7774:	ef 92       	push	r14
    7776:	0e 94 90 48 	call	0x9120	; 0x9120 <sprintf>
    777a:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    777c:	2d b7       	in	r18, 0x3d	; 61
    777e:	3e b7       	in	r19, 0x3e	; 62
    7780:	28 5f       	subi	r18, 0xF8	; 248
    7782:	3f 4f       	sbci	r19, 0xFF	; 255
    7784:	0f b6       	in	r0, 0x3f	; 63
    7786:	f8 94       	cli
    7788:	3e bf       	out	0x3e, r19	; 62
    778a:	0f be       	out	0x3f, r0	; 63
    778c:	2d bf       	out	0x3d, r18	; 61
    778e:	88 23       	and	r24, r24
    7790:	b1 f0       	breq	.+44     	; 0x77be <_ZN13einstellungen4drawEv+0x378>
    7792:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    7794:	21 2f       	mov	r18, r17
    7796:	30 e0       	ldi	r19, 0x00	; 0
    7798:	c9 01       	movw	r24, r18
    779a:	02 96       	adiw	r24, 0x02	; 2
    779c:	48 2f       	mov	r20, r24
    779e:	44 0f       	add	r20, r20
    77a0:	48 0f       	add	r20, r24
    77a2:	44 0f       	add	r20, r20
    77a4:	fe 01       	movw	r30, r28
    77a6:	e2 0f       	add	r30, r18
    77a8:	f3 1f       	adc	r31, r19
    77aa:	2c e1       	ldi	r18, 0x1C	; 28
    77ac:	62 81       	ldd	r22, Z+2	; 0x02
    77ae:	8f 89       	ldd	r24, Y+23	; 0x17
    77b0:	98 8d       	ldd	r25, Y+24	; 0x18
    77b2:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    77b6:	1f 5f       	subi	r17, 0xFF	; 255
    77b8:	8e 89       	ldd	r24, Y+22	; 0x16
    77ba:	18 17       	cp	r17, r24
    77bc:	58 f3       	brcs	.-42     	; 0x7794 <_ZN13einstellungen4drawEv+0x34e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    77be:	8f 89       	ldd	r24, Y+23	; 0x17
    77c0:	98 8d       	ldd	r25, Y+24	; 0x18
    77c2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <_ZN7Display9sendFrameEv>
    77c6:	04 c0       	rjmp	.+8      	; 0x77d0 <_ZN13einstellungen4drawEv+0x38a>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    77c8:	10 e5       	ldi	r17, 0x50	; 80
    77ca:	c1 2c       	mov	r12, r1
    77cc:	d1 2c       	mov	r13, r1
    77ce:	93 ce       	rjmp	.-730    	; 0x74f6 <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    77d0:	df 91       	pop	r29
    77d2:	cf 91       	pop	r28
    77d4:	1f 91       	pop	r17
    77d6:	0f 91       	pop	r16
    77d8:	ff 90       	pop	r15
    77da:	ef 90       	pop	r14
    77dc:	df 90       	pop	r13
    77de:	cf 90       	pop	r12
    77e0:	08 95       	ret

000077e2 <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    77e2:	82 e1       	ldi	r24, 0x12	; 18
    77e4:	9e e0       	ldi	r25, 0x0E	; 14
    77e6:	b5 d1       	rcall	.+874    	; 0x7b52 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    77e8:	81 e1       	ldi	r24, 0x11	; 17
    77ea:	9a e0       	ldi	r25, 0x0A	; 10
    77ec:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    77f0:	85 e0       	ldi	r24, 0x05	; 5
    77f2:	9a e0       	ldi	r25, 0x0A	; 10
    77f4:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN9InterfaceC1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    77f8:	8c e1       	ldi	r24, 0x1C	; 28
    77fa:	99 e0       	ldi	r25, 0x09	; 9
    77fc:	0e 94 b2 24 	call	0x4964	; 0x4964 <_ZN7LSM303DC1Ev>

#include "BMP180.h"
BMP180 druck;
    7800:	81 ef       	ldi	r24, 0xF1	; 241
    7802:	98 e0       	ldi	r25, 0x08	; 8
    7804:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN6BMP180C1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7808:	41 e0       	ldi	r20, 0x01	; 1
    780a:	62 e4       	ldi	r22, 0x42	; 66
    780c:	8b ee       	ldi	r24, 0xEB	; 235
    780e:	98 e0       	ldi	r25, 0x08	; 8
    7810:	28 d0       	rcall	.+80     	; 0x7862 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    7812:	42 e0       	ldi	r20, 0x02	; 2
    7814:	62 e4       	ldi	r22, 0x42	; 66
    7816:	89 ee       	ldi	r24, 0xE9	; 233
    7818:	98 e0       	ldi	r25, 0x08	; 8
    781a:	23 d0       	rcall	.+70     	; 0x7862 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    781c:	47 e0       	ldi	r20, 0x07	; 7
    781e:	64 e4       	ldi	r22, 0x44	; 68
    7820:	87 ee       	ldi	r24, 0xE7	; 231
    7822:	98 e0       	ldi	r25, 0x08	; 8
    7824:	1e c0       	rjmp	.+60     	; 0x7862 <_ZN6OutputC1Ehh>
    7826:	08 95       	ret

00007828 <_GLOBAL__sub_D__Znwj>:
    7828:	87 ee       	ldi	r24, 0xE7	; 231
    782a:	98 e0       	ldi	r25, 0x08	; 8
    782c:	54 d0       	rcall	.+168    	; 0x78d6 <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    782e:	89 ee       	ldi	r24, 0xE9	; 233
    7830:	98 e0       	ldi	r25, 0x08	; 8
    7832:	51 d0       	rcall	.+162    	; 0x78d6 <_ZN6OutputD1Ev>
//Kompass kompass;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7834:	8b ee       	ldi	r24, 0xEB	; 235
    7836:	98 e0       	ldi	r25, 0x08	; 8
    7838:	4e d0       	rcall	.+156    	; 0x78d6 <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "BMP180.h"
BMP180 druck;
    783a:	81 ef       	ldi	r24, 0xF1	; 241
    783c:	98 e0       	ldi	r25, 0x08	; 8
    783e:	0e 94 84 03 	call	0x708	; 0x708 <_ZN6BMP180D1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7842:	8c e1       	ldi	r24, 0x1C	; 28
    7844:	99 e0       	ldi	r25, 0x09	; 9
    7846:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_ZN7LSM303DD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    784a:	85 e0       	ldi	r24, 0x05	; 5
    784c:	9a e0       	ldi	r25, 0x0A	; 10
    784e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    7852:	81 e1       	ldi	r24, 0x11	; 17
    7854:	9a e0       	ldi	r25, 0x0A	; 10
    7856:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    785a:	82 e1       	ldi	r24, 0x12	; 18
    785c:	9e e0       	ldi	r25, 0x0E	; 14
    785e:	f5 c0       	rjmp	.+490    	; 0x7a4a <_ZN3RTCD1Ev>
    7860:	08 95       	ret

00007862 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    7862:	fc 01       	movw	r30, r24
    7864:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    7866:	60 83       	st	Z, r22
	switch (Portpraefix)
    7868:	62 34       	cpi	r22, 0x42	; 66
    786a:	a1 f0       	breq	.+40     	; 0x7894 <_ZN6OutputC1Ehh+0x32>
    786c:	18 f4       	brcc	.+6      	; 0x7874 <_ZN6OutputC1Ehh+0x12>
    786e:	61 34       	cpi	r22, 0x41	; 65
    7870:	31 f0       	breq	.+12     	; 0x787e <_ZN6OutputC1Ehh+0x1c>
    7872:	08 95       	ret
    7874:	63 34       	cpi	r22, 0x43	; 67
    7876:	c9 f0       	breq	.+50     	; 0x78aa <_ZN6OutputC1Ehh+0x48>
    7878:	64 34       	cpi	r22, 0x44	; 68
    787a:	11 f1       	breq	.+68     	; 0x78c0 <_ZN6OutputC1Ehh+0x5e>
    787c:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    787e:	21 b1       	in	r18, 0x01	; 1
    7880:	81 e0       	ldi	r24, 0x01	; 1
    7882:	90 e0       	ldi	r25, 0x00	; 0
    7884:	02 c0       	rjmp	.+4      	; 0x788a <_ZN6OutputC1Ehh+0x28>
    7886:	88 0f       	add	r24, r24
    7888:	99 1f       	adc	r25, r25
    788a:	4a 95       	dec	r20
    788c:	e2 f7       	brpl	.-8      	; 0x7886 <_ZN6OutputC1Ehh+0x24>
    788e:	82 2b       	or	r24, r18
    7890:	81 b9       	out	0x01, r24	; 1
			break;
    7892:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    7894:	24 b1       	in	r18, 0x04	; 4
    7896:	81 e0       	ldi	r24, 0x01	; 1
    7898:	90 e0       	ldi	r25, 0x00	; 0
    789a:	02 c0       	rjmp	.+4      	; 0x78a0 <_ZN6OutputC1Ehh+0x3e>
    789c:	88 0f       	add	r24, r24
    789e:	99 1f       	adc	r25, r25
    78a0:	4a 95       	dec	r20
    78a2:	e2 f7       	brpl	.-8      	; 0x789c <_ZN6OutputC1Ehh+0x3a>
    78a4:	82 2b       	or	r24, r18
    78a6:	84 b9       	out	0x04, r24	; 4
			break;
    78a8:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    78aa:	27 b1       	in	r18, 0x07	; 7
    78ac:	81 e0       	ldi	r24, 0x01	; 1
    78ae:	90 e0       	ldi	r25, 0x00	; 0
    78b0:	02 c0       	rjmp	.+4      	; 0x78b6 <_ZN6OutputC1Ehh+0x54>
    78b2:	88 0f       	add	r24, r24
    78b4:	99 1f       	adc	r25, r25
    78b6:	4a 95       	dec	r20
    78b8:	e2 f7       	brpl	.-8      	; 0x78b2 <_ZN6OutputC1Ehh+0x50>
    78ba:	82 2b       	or	r24, r18
    78bc:	87 b9       	out	0x07, r24	; 7
			break;
    78be:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    78c0:	2a b1       	in	r18, 0x0a	; 10
    78c2:	81 e0       	ldi	r24, 0x01	; 1
    78c4:	90 e0       	ldi	r25, 0x00	; 0
    78c6:	02 c0       	rjmp	.+4      	; 0x78cc <_ZN6OutputC1Ehh+0x6a>
    78c8:	88 0f       	add	r24, r24
    78ca:	99 1f       	adc	r25, r25
    78cc:	4a 95       	dec	r20
    78ce:	e2 f7       	brpl	.-8      	; 0x78c8 <_ZN6OutputC1Ehh+0x66>
    78d0:	82 2b       	or	r24, r18
    78d2:	8a b9       	out	0x0a, r24	; 10
    78d4:	08 95       	ret

000078d6 <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    78d6:	08 95       	ret

000078d8 <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    78d8:	fc 01       	movw	r30, r24
	switch (Port)
    78da:	90 81       	ld	r25, Z
    78dc:	92 34       	cpi	r25, 0x42	; 66
    78de:	a9 f0       	breq	.+42     	; 0x790a <_ZN6Output2onEv+0x32>
    78e0:	18 f4       	brcc	.+6      	; 0x78e8 <_ZN6Output2onEv+0x10>
    78e2:	91 34       	cpi	r25, 0x41	; 65
    78e4:	31 f0       	breq	.+12     	; 0x78f2 <_ZN6Output2onEv+0x1a>
    78e6:	08 95       	ret
    78e8:	93 34       	cpi	r25, 0x43	; 67
    78ea:	d9 f0       	breq	.+54     	; 0x7922 <_ZN6Output2onEv+0x4a>
    78ec:	94 34       	cpi	r25, 0x44	; 68
    78ee:	29 f1       	breq	.+74     	; 0x793a <_ZN6Output2onEv+0x62>
    78f0:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    78f2:	22 b1       	in	r18, 0x02	; 2
    78f4:	81 e0       	ldi	r24, 0x01	; 1
    78f6:	90 e0       	ldi	r25, 0x00	; 0
    78f8:	01 80       	ldd	r0, Z+1	; 0x01
    78fa:	02 c0       	rjmp	.+4      	; 0x7900 <_ZN6Output2onEv+0x28>
    78fc:	88 0f       	add	r24, r24
    78fe:	99 1f       	adc	r25, r25
    7900:	0a 94       	dec	r0
    7902:	e2 f7       	brpl	.-8      	; 0x78fc <_ZN6Output2onEv+0x24>
    7904:	82 2b       	or	r24, r18
    7906:	82 b9       	out	0x02, r24	; 2
			break;
    7908:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    790a:	25 b1       	in	r18, 0x05	; 5
    790c:	81 e0       	ldi	r24, 0x01	; 1
    790e:	90 e0       	ldi	r25, 0x00	; 0
    7910:	01 80       	ldd	r0, Z+1	; 0x01
    7912:	02 c0       	rjmp	.+4      	; 0x7918 <_ZN6Output2onEv+0x40>
    7914:	88 0f       	add	r24, r24
    7916:	99 1f       	adc	r25, r25
    7918:	0a 94       	dec	r0
    791a:	e2 f7       	brpl	.-8      	; 0x7914 <_ZN6Output2onEv+0x3c>
    791c:	82 2b       	or	r24, r18
    791e:	85 b9       	out	0x05, r24	; 5
			break;
    7920:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    7922:	28 b1       	in	r18, 0x08	; 8
    7924:	81 e0       	ldi	r24, 0x01	; 1
    7926:	90 e0       	ldi	r25, 0x00	; 0
    7928:	01 80       	ldd	r0, Z+1	; 0x01
    792a:	02 c0       	rjmp	.+4      	; 0x7930 <_ZN6Output2onEv+0x58>
    792c:	88 0f       	add	r24, r24
    792e:	99 1f       	adc	r25, r25
    7930:	0a 94       	dec	r0
    7932:	e2 f7       	brpl	.-8      	; 0x792c <_ZN6Output2onEv+0x54>
    7934:	82 2b       	or	r24, r18
    7936:	88 b9       	out	0x08, r24	; 8
			break;
    7938:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    793a:	2b b1       	in	r18, 0x0b	; 11
    793c:	81 e0       	ldi	r24, 0x01	; 1
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	01 80       	ldd	r0, Z+1	; 0x01
    7942:	02 c0       	rjmp	.+4      	; 0x7948 <_ZN6Output2onEv+0x70>
    7944:	88 0f       	add	r24, r24
    7946:	99 1f       	adc	r25, r25
    7948:	0a 94       	dec	r0
    794a:	e2 f7       	brpl	.-8      	; 0x7944 <_ZN6Output2onEv+0x6c>
    794c:	82 2b       	or	r24, r18
    794e:	8b b9       	out	0x0b, r24	; 11
    7950:	08 95       	ret

00007952 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    7952:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    7954:	90 81       	ld	r25, Z
    7956:	92 34       	cpi	r25, 0x42	; 66
    7958:	a1 f0       	breq	.+40     	; 0x7982 <_ZN6Output4isonEv+0x30>
    795a:	18 f4       	brcc	.+6      	; 0x7962 <_ZN6Output4isonEv+0x10>
    795c:	91 34       	cpi	r25, 0x41	; 65
    795e:	31 f0       	breq	.+12     	; 0x796c <_ZN6Output4isonEv+0x1a>
    7960:	31 c0       	rjmp	.+98     	; 0x79c4 <_ZN6Output4isonEv+0x72>
    7962:	93 34       	cpi	r25, 0x43	; 67
    7964:	c9 f0       	breq	.+50     	; 0x7998 <_ZN6Output4isonEv+0x46>
    7966:	94 34       	cpi	r25, 0x44	; 68
    7968:	11 f1       	breq	.+68     	; 0x79ae <_ZN6Output4isonEv+0x5c>
    796a:	2c c0       	rjmp	.+88     	; 0x79c4 <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    796c:	22 b1       	in	r18, 0x02	; 2
    796e:	30 e0       	ldi	r19, 0x00	; 0
    7970:	c9 01       	movw	r24, r18
    7972:	01 80       	ldd	r0, Z+1	; 0x01
    7974:	02 c0       	rjmp	.+4      	; 0x797a <_ZN6Output4isonEv+0x28>
    7976:	95 95       	asr	r25
    7978:	87 95       	ror	r24
    797a:	0a 94       	dec	r0
    797c:	e2 f7       	brpl	.-8      	; 0x7976 <_ZN6Output4isonEv+0x24>
    797e:	81 70       	andi	r24, 0x01	; 1
    7980:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    7982:	25 b1       	in	r18, 0x05	; 5
    7984:	30 e0       	ldi	r19, 0x00	; 0
    7986:	c9 01       	movw	r24, r18
    7988:	01 80       	ldd	r0, Z+1	; 0x01
    798a:	02 c0       	rjmp	.+4      	; 0x7990 <_ZN6Output4isonEv+0x3e>
    798c:	95 95       	asr	r25
    798e:	87 95       	ror	r24
    7990:	0a 94       	dec	r0
    7992:	e2 f7       	brpl	.-8      	; 0x798c <_ZN6Output4isonEv+0x3a>
    7994:	81 70       	andi	r24, 0x01	; 1
    7996:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    7998:	28 b1       	in	r18, 0x08	; 8
    799a:	30 e0       	ldi	r19, 0x00	; 0
    799c:	c9 01       	movw	r24, r18
    799e:	01 80       	ldd	r0, Z+1	; 0x01
    79a0:	02 c0       	rjmp	.+4      	; 0x79a6 <_ZN6Output4isonEv+0x54>
    79a2:	95 95       	asr	r25
    79a4:	87 95       	ror	r24
    79a6:	0a 94       	dec	r0
    79a8:	e2 f7       	brpl	.-8      	; 0x79a2 <_ZN6Output4isonEv+0x50>
    79aa:	81 70       	andi	r24, 0x01	; 1
    79ac:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    79ae:	2b b1       	in	r18, 0x0b	; 11
    79b0:	30 e0       	ldi	r19, 0x00	; 0
    79b2:	c9 01       	movw	r24, r18
    79b4:	01 80       	ldd	r0, Z+1	; 0x01
    79b6:	02 c0       	rjmp	.+4      	; 0x79bc <_ZN6Output4isonEv+0x6a>
    79b8:	95 95       	asr	r25
    79ba:	87 95       	ror	r24
    79bc:	0a 94       	dec	r0
    79be:	e2 f7       	brpl	.-8      	; 0x79b8 <_ZN6Output4isonEv+0x66>
    79c0:	81 70       	andi	r24, 0x01	; 1
    79c2:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    79c4:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    79c6:	08 95       	ret

000079c8 <_ZN6Output3offEv>:

void Output::off(){
    79c8:	fc 01       	movw	r30, r24
	switch (Port)
    79ca:	90 81       	ld	r25, Z
    79cc:	92 34       	cpi	r25, 0x42	; 66
    79ce:	b1 f0       	breq	.+44     	; 0x79fc <_ZN6Output3offEv+0x34>
    79d0:	18 f4       	brcc	.+6      	; 0x79d8 <_ZN6Output3offEv+0x10>
    79d2:	91 34       	cpi	r25, 0x41	; 65
    79d4:	31 f0       	breq	.+12     	; 0x79e2 <_ZN6Output3offEv+0x1a>
    79d6:	08 95       	ret
    79d8:	93 34       	cpi	r25, 0x43	; 67
    79da:	e9 f0       	breq	.+58     	; 0x7a16 <_ZN6Output3offEv+0x4e>
    79dc:	94 34       	cpi	r25, 0x44	; 68
    79de:	41 f1       	breq	.+80     	; 0x7a30 <_ZN6Output3offEv+0x68>
    79e0:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    79e2:	22 b1       	in	r18, 0x02	; 2
    79e4:	81 e0       	ldi	r24, 0x01	; 1
    79e6:	90 e0       	ldi	r25, 0x00	; 0
    79e8:	01 80       	ldd	r0, Z+1	; 0x01
    79ea:	02 c0       	rjmp	.+4      	; 0x79f0 <_ZN6Output3offEv+0x28>
    79ec:	88 0f       	add	r24, r24
    79ee:	99 1f       	adc	r25, r25
    79f0:	0a 94       	dec	r0
    79f2:	e2 f7       	brpl	.-8      	; 0x79ec <_ZN6Output3offEv+0x24>
    79f4:	80 95       	com	r24
    79f6:	82 23       	and	r24, r18
    79f8:	82 b9       	out	0x02, r24	; 2
			break;
    79fa:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    79fc:	25 b1       	in	r18, 0x05	; 5
    79fe:	81 e0       	ldi	r24, 0x01	; 1
    7a00:	90 e0       	ldi	r25, 0x00	; 0
    7a02:	01 80       	ldd	r0, Z+1	; 0x01
    7a04:	02 c0       	rjmp	.+4      	; 0x7a0a <_ZN6Output3offEv+0x42>
    7a06:	88 0f       	add	r24, r24
    7a08:	99 1f       	adc	r25, r25
    7a0a:	0a 94       	dec	r0
    7a0c:	e2 f7       	brpl	.-8      	; 0x7a06 <_ZN6Output3offEv+0x3e>
    7a0e:	80 95       	com	r24
    7a10:	82 23       	and	r24, r18
    7a12:	85 b9       	out	0x05, r24	; 5
			break;
    7a14:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    7a16:	28 b1       	in	r18, 0x08	; 8
    7a18:	81 e0       	ldi	r24, 0x01	; 1
    7a1a:	90 e0       	ldi	r25, 0x00	; 0
    7a1c:	01 80       	ldd	r0, Z+1	; 0x01
    7a1e:	02 c0       	rjmp	.+4      	; 0x7a24 <_ZN6Output3offEv+0x5c>
    7a20:	88 0f       	add	r24, r24
    7a22:	99 1f       	adc	r25, r25
    7a24:	0a 94       	dec	r0
    7a26:	e2 f7       	brpl	.-8      	; 0x7a20 <_ZN6Output3offEv+0x58>
    7a28:	80 95       	com	r24
    7a2a:	82 23       	and	r24, r18
    7a2c:	88 b9       	out	0x08, r24	; 8
			break;
    7a2e:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    7a30:	2b b1       	in	r18, 0x0b	; 11
    7a32:	81 e0       	ldi	r24, 0x01	; 1
    7a34:	90 e0       	ldi	r25, 0x00	; 0
    7a36:	01 80       	ldd	r0, Z+1	; 0x01
    7a38:	02 c0       	rjmp	.+4      	; 0x7a3e <_ZN6Output3offEv+0x76>
    7a3a:	88 0f       	add	r24, r24
    7a3c:	99 1f       	adc	r25, r25
    7a3e:	0a 94       	dec	r0
    7a40:	e2 f7       	brpl	.-8      	; 0x7a3a <_ZN6Output3offEv+0x72>
    7a42:	80 95       	com	r24
    7a44:	82 23       	and	r24, r18
    7a46:	8b b9       	out	0x0b, r24	; 11
    7a48:	08 95       	ret

00007a4a <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    7a4a:	08 95       	ret

00007a4c <_ZN3RTC6WeckerEv>:
    7a4c:	fc 01       	movw	r30, r24
    7a4e:	80 8d       	ldd	r24, Z+24	; 0x18
    7a50:	83 ff       	sbrs	r24, 3
    7a52:	0c c0       	rjmp	.+24     	; 0x7a6c <_ZN3RTC6WeckerEv+0x20>
    7a54:	84 fd       	sbrc	r24, 4
    7a56:	0a c0       	rjmp	.+20     	; 0x7a6c <_ZN3RTC6WeckerEv+0x20>
    7a58:	22 8d       	ldd	r18, Z+26	; 0x1a
    7a5a:	90 89       	ldd	r25, Z+16	; 0x10
    7a5c:	29 13       	cpse	r18, r25
    7a5e:	06 c0       	rjmp	.+12     	; 0x7a6c <_ZN3RTC6WeckerEv+0x20>
    7a60:	21 8d       	ldd	r18, Z+25	; 0x19
    7a62:	91 89       	ldd	r25, Z+17	; 0x11
    7a64:	29 13       	cpse	r18, r25
    7a66:	02 c0       	rjmp	.+4      	; 0x7a6c <_ZN3RTC6WeckerEv+0x20>
    7a68:	80 61       	ori	r24, 0x10	; 16
    7a6a:	80 8f       	std	Z+24, r24	; 0x18
    7a6c:	08 95       	ret

00007a6e <_ZN3RTC14ausgabezeitneuEv>:
    7a6e:	fc 01       	movw	r30, r24
    7a70:	20 89       	ldd	r18, Z+16	; 0x10
    7a72:	9d ec       	ldi	r25, 0xCD	; 205
    7a74:	29 9f       	mul	r18, r25
    7a76:	81 2d       	mov	r24, r1
    7a78:	11 24       	eor	r1, r1
    7a7a:	86 95       	lsr	r24
    7a7c:	86 95       	lsr	r24
    7a7e:	86 95       	lsr	r24
    7a80:	30 e3       	ldi	r19, 0x30	; 48
    7a82:	38 0f       	add	r19, r24
    7a84:	30 83       	st	Z, r19
    7a86:	88 0f       	add	r24, r24
    7a88:	38 2f       	mov	r19, r24
    7a8a:	33 0f       	add	r19, r19
    7a8c:	33 0f       	add	r19, r19
    7a8e:	83 0f       	add	r24, r19
    7a90:	28 1b       	sub	r18, r24
    7a92:	20 5d       	subi	r18, 0xD0	; 208
    7a94:	21 83       	std	Z+1, r18	; 0x01
    7a96:	21 89       	ldd	r18, Z+17	; 0x11
    7a98:	29 9f       	mul	r18, r25
    7a9a:	81 2d       	mov	r24, r1
    7a9c:	11 24       	eor	r1, r1
    7a9e:	86 95       	lsr	r24
    7aa0:	86 95       	lsr	r24
    7aa2:	86 95       	lsr	r24
    7aa4:	30 e3       	ldi	r19, 0x30	; 48
    7aa6:	38 0f       	add	r19, r24
    7aa8:	33 83       	std	Z+3, r19	; 0x03
    7aaa:	88 0f       	add	r24, r24
    7aac:	38 2f       	mov	r19, r24
    7aae:	33 0f       	add	r19, r19
    7ab0:	33 0f       	add	r19, r19
    7ab2:	83 0f       	add	r24, r19
    7ab4:	28 1b       	sub	r18, r24
    7ab6:	20 5d       	subi	r18, 0xD0	; 208
    7ab8:	24 83       	std	Z+4, r18	; 0x04
    7aba:	82 89       	ldd	r24, Z+18	; 0x12
    7abc:	89 9f       	mul	r24, r25
    7abe:	91 2d       	mov	r25, r1
    7ac0:	11 24       	eor	r1, r1
    7ac2:	96 95       	lsr	r25
    7ac4:	96 95       	lsr	r25
    7ac6:	96 95       	lsr	r25
    7ac8:	20 e3       	ldi	r18, 0x30	; 48
    7aca:	29 0f       	add	r18, r25
    7acc:	26 83       	std	Z+6, r18	; 0x06
    7ace:	99 0f       	add	r25, r25
    7ad0:	29 2f       	mov	r18, r25
    7ad2:	22 0f       	add	r18, r18
    7ad4:	22 0f       	add	r18, r18
    7ad6:	92 0f       	add	r25, r18
    7ad8:	89 1b       	sub	r24, r25
    7ada:	80 5d       	subi	r24, 0xD0	; 208
    7adc:	87 83       	std	Z+7, r24	; 0x07
    7ade:	08 95       	ret

00007ae0 <_ZN3RTC15ausgabedatumneuEv>:
    7ae0:	fc 01       	movw	r30, r24
    7ae2:	24 89       	ldd	r18, Z+20	; 0x14
    7ae4:	9d ec       	ldi	r25, 0xCD	; 205
    7ae6:	29 9f       	mul	r18, r25
    7ae8:	81 2d       	mov	r24, r1
    7aea:	11 24       	eor	r1, r1
    7aec:	86 95       	lsr	r24
    7aee:	86 95       	lsr	r24
    7af0:	86 95       	lsr	r24
    7af2:	30 e3       	ldi	r19, 0x30	; 48
    7af4:	38 0f       	add	r19, r24
    7af6:	30 87       	std	Z+8, r19	; 0x08
    7af8:	88 0f       	add	r24, r24
    7afa:	38 2f       	mov	r19, r24
    7afc:	33 0f       	add	r19, r19
    7afe:	33 0f       	add	r19, r19
    7b00:	83 0f       	add	r24, r19
    7b02:	28 1b       	sub	r18, r24
    7b04:	20 5d       	subi	r18, 0xD0	; 208
    7b06:	21 87       	std	Z+9, r18	; 0x09
    7b08:	26 89       	ldd	r18, Z+22	; 0x16
    7b0a:	29 9f       	mul	r18, r25
    7b0c:	81 2d       	mov	r24, r1
    7b0e:	11 24       	eor	r1, r1
    7b10:	86 95       	lsr	r24
    7b12:	86 95       	lsr	r24
    7b14:	86 95       	lsr	r24
    7b16:	30 e3       	ldi	r19, 0x30	; 48
    7b18:	38 0f       	add	r19, r24
    7b1a:	33 87       	std	Z+11, r19	; 0x0b
    7b1c:	88 0f       	add	r24, r24
    7b1e:	38 2f       	mov	r19, r24
    7b20:	33 0f       	add	r19, r19
    7b22:	33 0f       	add	r19, r19
    7b24:	83 0f       	add	r24, r19
    7b26:	28 1b       	sub	r18, r24
    7b28:	20 5d       	subi	r18, 0xD0	; 208
    7b2a:	24 87       	std	Z+12, r18	; 0x0c
    7b2c:	87 89       	ldd	r24, Z+23	; 0x17
    7b2e:	89 9f       	mul	r24, r25
    7b30:	91 2d       	mov	r25, r1
    7b32:	11 24       	eor	r1, r1
    7b34:	96 95       	lsr	r25
    7b36:	96 95       	lsr	r25
    7b38:	96 95       	lsr	r25
    7b3a:	20 e3       	ldi	r18, 0x30	; 48
    7b3c:	29 0f       	add	r18, r25
    7b3e:	26 87       	std	Z+14, r18	; 0x0e
    7b40:	99 0f       	add	r25, r25
    7b42:	29 2f       	mov	r18, r25
    7b44:	22 0f       	add	r18, r18
    7b46:	22 0f       	add	r18, r18
    7b48:	92 0f       	add	r25, r18
    7b4a:	89 1b       	sub	r24, r25
    7b4c:	80 5d       	subi	r24, 0xD0	; 208
    7b4e:	87 87       	std	Z+15, r24	; 0x0f
    7b50:	08 95       	ret

00007b52 <_ZN3RTCC1Ev>:
    7b52:	cf 93       	push	r28
    7b54:	df 93       	push	r29
    7b56:	ec 01       	movw	r28, r24
    7b58:	1a 8a       	std	Y+18, r1	; 0x12
    7b5a:	1b 8a       	std	Y+19, r1	; 0x13
    7b5c:	19 8a       	std	Y+17, r1	; 0x11
    7b5e:	18 8a       	std	Y+16, r1	; 0x10
    7b60:	1c 8a       	std	Y+20, r1	; 0x14
    7b62:	1e 8a       	std	Y+22, r1	; 0x16
    7b64:	1f 8a       	std	Y+23, r1	; 0x17
    7b66:	1d 8a       	std	Y+21, r1	; 0x15
    7b68:	88 e2       	ldi	r24, 0x28	; 40
    7b6a:	89 8f       	std	Y+25, r24	; 0x19
    7b6c:	8a e0       	ldi	r24, 0x0A	; 10
    7b6e:	8a 8f       	std	Y+26, r24	; 0x1a
    7b70:	1c 8e       	std	Y+28, r1	; 0x1c
    7b72:	1b 8e       	std	Y+27, r1	; 0x1b
    7b74:	1e 8e       	std	Y+30, r1	; 0x1e
    7b76:	1d 8e       	std	Y+29, r1	; 0x1d
    7b78:	fe 01       	movw	r30, r28
    7b7a:	ce 01       	movw	r24, r28
    7b7c:	08 96       	adiw	r24, 0x08	; 8
    7b7e:	dc 01       	movw	r26, r24
    7b80:	11 92       	st	Z+, r1
    7b82:	1d 92       	st	X+, r1
    7b84:	e8 17       	cp	r30, r24
    7b86:	f9 07       	cpc	r31, r25
    7b88:	d9 f7       	brne	.-10     	; 0x7b80 <_ZN3RTCC1Ev+0x2e>
    7b8a:	8a e3       	ldi	r24, 0x3A	; 58
    7b8c:	8a 83       	std	Y+2, r24	; 0x02
    7b8e:	8d 83       	std	Y+5, r24	; 0x05
    7b90:	8e e2       	ldi	r24, 0x2E	; 46
    7b92:	8a 87       	std	Y+10, r24	; 0x0a
    7b94:	8d 87       	std	Y+13, r24	; 0x0d
    7b96:	ce 01       	movw	r24, r28
    7b98:	6a df       	rcall	.-300    	; 0x7a6e <_ZN3RTC14ausgabezeitneuEv>
    7b9a:	ce 01       	movw	r24, r28
    7b9c:	a1 df       	rcall	.-190    	; 0x7ae0 <_ZN3RTC15ausgabedatumneuEv>
    7b9e:	df 91       	pop	r29
    7ba0:	cf 91       	pop	r28
    7ba2:	08 95       	ret

00007ba4 <_ZN3RTC8kalenderEv>:
    7ba4:	fc 01       	movw	r30, r24
    7ba6:	26 89       	ldd	r18, Z+22	; 0x16
    7ba8:	32 2f       	mov	r19, r18
    7baa:	3d 7f       	andi	r19, 0xFD	; 253
    7bac:	34 30       	cpi	r19, 0x04	; 4
    7bae:	11 f0       	breq	.+4      	; 0x7bb4 <_ZN3RTC8kalenderEv+0x10>
    7bb0:	39 30       	cpi	r19, 0x09	; 9
    7bb2:	91 f4       	brne	.+36     	; 0x7bd8 <_ZN3RTC8kalenderEv+0x34>
    7bb4:	fc 01       	movw	r30, r24
    7bb6:	34 89       	ldd	r19, Z+20	; 0x14
    7bb8:	3f 31       	cpi	r19, 0x1F	; 31
    7bba:	b0 f1       	brcs	.+108    	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7bbc:	31 e0       	ldi	r19, 0x01	; 1
    7bbe:	34 8b       	std	Z+20, r19	; 0x14
    7bc0:	2f 5f       	subi	r18, 0xFF	; 255
    7bc2:	2d 30       	cpi	r18, 0x0D	; 13
    7bc4:	10 f4       	brcc	.+4      	; 0x7bca <_ZN3RTC8kalenderEv+0x26>
    7bc6:	26 8b       	std	Z+22, r18	; 0x16
    7bc8:	2f c0       	rjmp	.+94     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7bca:	21 e0       	ldi	r18, 0x01	; 1
    7bcc:	fc 01       	movw	r30, r24
    7bce:	26 8b       	std	Z+22, r18	; 0x16
    7bd0:	27 89       	ldd	r18, Z+23	; 0x17
    7bd2:	2f 5f       	subi	r18, 0xFF	; 255
    7bd4:	27 8b       	std	Z+23, r18	; 0x17
    7bd6:	28 c0       	rjmp	.+80     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7bd8:	22 30       	cpi	r18, 0x02	; 2
    7bda:	a9 f4       	brne	.+42     	; 0x7c06 <_ZN3RTC8kalenderEv+0x62>
    7bdc:	fc 01       	movw	r30, r24
    7bde:	27 89       	ldd	r18, Z+23	; 0x17
    7be0:	23 70       	andi	r18, 0x03	; 3
    7be2:	41 f4       	brne	.+16     	; 0x7bf4 <_ZN3RTC8kalenderEv+0x50>
    7be4:	24 89       	ldd	r18, Z+20	; 0x14
    7be6:	2e 31       	cpi	r18, 0x1E	; 30
    7be8:	f8 f0       	brcs	.+62     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7bea:	21 e0       	ldi	r18, 0x01	; 1
    7bec:	24 8b       	std	Z+20, r18	; 0x14
    7bee:	23 e0       	ldi	r18, 0x03	; 3
    7bf0:	26 8b       	std	Z+22, r18	; 0x16
    7bf2:	1a c0       	rjmp	.+52     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7bf4:	fc 01       	movw	r30, r24
    7bf6:	24 89       	ldd	r18, Z+20	; 0x14
    7bf8:	2d 31       	cpi	r18, 0x1D	; 29
    7bfa:	b0 f0       	brcs	.+44     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7bfc:	21 e0       	ldi	r18, 0x01	; 1
    7bfe:	24 8b       	std	Z+20, r18	; 0x14
    7c00:	23 e0       	ldi	r18, 0x03	; 3
    7c02:	26 8b       	std	Z+22, r18	; 0x16
    7c04:	11 c0       	rjmp	.+34     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7c06:	fc 01       	movw	r30, r24
    7c08:	34 89       	ldd	r19, Z+20	; 0x14
    7c0a:	30 32       	cpi	r19, 0x20	; 32
    7c0c:	68 f0       	brcs	.+26     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7c0e:	31 e0       	ldi	r19, 0x01	; 1
    7c10:	34 8b       	std	Z+20, r19	; 0x14
    7c12:	2f 5f       	subi	r18, 0xFF	; 255
    7c14:	2d 30       	cpi	r18, 0x0D	; 13
    7c16:	10 f4       	brcc	.+4      	; 0x7c1c <_ZN3RTC8kalenderEv+0x78>
    7c18:	26 8b       	std	Z+22, r18	; 0x16
    7c1a:	06 c0       	rjmp	.+12     	; 0x7c28 <_ZN3RTC8kalenderEv+0x84>
    7c1c:	21 e0       	ldi	r18, 0x01	; 1
    7c1e:	fc 01       	movw	r30, r24
    7c20:	26 8b       	std	Z+22, r18	; 0x16
    7c22:	27 89       	ldd	r18, Z+23	; 0x17
    7c24:	2f 5f       	subi	r18, 0xFF	; 255
    7c26:	27 8b       	std	Z+23, r18	; 0x17
    7c28:	5b cf       	rjmp	.-330    	; 0x7ae0 <_ZN3RTC15ausgabedatumneuEv>
    7c2a:	08 95       	ret

00007c2c <_ZN3RTC4zeitEv>:
    7c2c:	cf 93       	push	r28
    7c2e:	df 93       	push	r29
    7c30:	ec 01       	movw	r28, r24
    7c32:	8a 89       	ldd	r24, Y+18	; 0x12
    7c34:	8c 53       	subi	r24, 0x3C	; 60
    7c36:	8d 38       	cpi	r24, 0x8D	; 141
    7c38:	c0 f4       	brcc	.+48     	; 0x7c6a <_ZN3RTC4zeitEv+0x3e>
    7c3a:	1a 8a       	std	Y+18, r1	; 0x12
    7c3c:	89 89       	ldd	r24, Y+17	; 0x11
    7c3e:	8f 5f       	subi	r24, 0xFF	; 255
    7c40:	89 8b       	std	Y+17, r24	; 0x11
    7c42:	98 8d       	ldd	r25, Y+24	; 0x18
    7c44:	94 60       	ori	r25, 0x04	; 4
    7c46:	98 8f       	std	Y+24, r25	; 0x18
    7c48:	8c 33       	cpi	r24, 0x3C	; 60
    7c4a:	68 f0       	brcs	.+26     	; 0x7c66 <_ZN3RTC4zeitEv+0x3a>
    7c4c:	19 8a       	std	Y+17, r1	; 0x11
    7c4e:	88 89       	ldd	r24, Y+16	; 0x10
    7c50:	8f 5f       	subi	r24, 0xFF	; 255
    7c52:	88 31       	cpi	r24, 0x18	; 24
    7c54:	10 f4       	brcc	.+4      	; 0x7c5a <_ZN3RTC4zeitEv+0x2e>
    7c56:	88 8b       	std	Y+16, r24	; 0x10
    7c58:	06 c0       	rjmp	.+12     	; 0x7c66 <_ZN3RTC4zeitEv+0x3a>
    7c5a:	18 8a       	std	Y+16, r1	; 0x10
    7c5c:	8c 89       	ldd	r24, Y+20	; 0x14
    7c5e:	8f 5f       	subi	r24, 0xFF	; 255
    7c60:	8c 8b       	std	Y+20, r24	; 0x14
    7c62:	ce 01       	movw	r24, r28
    7c64:	9f df       	rcall	.-194    	; 0x7ba4 <_ZN3RTC8kalenderEv>
    7c66:	ce 01       	movw	r24, r28
    7c68:	f1 de       	rcall	.-542    	; 0x7a4c <_ZN3RTC6WeckerEv>
    7c6a:	ce 01       	movw	r24, r28
    7c6c:	00 df       	rcall	.-512    	; 0x7a6e <_ZN3RTC14ausgabezeitneuEv>
    7c6e:	88 8d       	ldd	r24, Y+24	; 0x18
    7c70:	85 ff       	sbrs	r24, 5
    7c72:	0b c0       	rjmp	.+22     	; 0x7c8a <_ZN3RTC4zeitEv+0x5e>
    7c74:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7c76:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7c78:	21 50       	subi	r18, 0x01	; 1
    7c7a:	31 09       	sbc	r19, r1
    7c7c:	3c 8f       	std	Y+28, r19	; 0x1c
    7c7e:	2b 8f       	std	Y+27, r18	; 0x1b
    7c80:	23 2b       	or	r18, r19
    7c82:	19 f4       	brne	.+6      	; 0x7c8a <_ZN3RTC4zeitEv+0x5e>
    7c84:	8f 7d       	andi	r24, 0xDF	; 223
    7c86:	81 60       	ori	r24, 0x01	; 1
    7c88:	88 8f       	std	Y+24, r24	; 0x18
    7c8a:	88 8d       	ldd	r24, Y+24	; 0x18
    7c8c:	86 ff       	sbrs	r24, 6
    7c8e:	05 c0       	rjmp	.+10     	; 0x7c9a <_ZN3RTC4zeitEv+0x6e>
    7c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7c92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7c94:	01 96       	adiw	r24, 0x01	; 1
    7c96:	9e 8f       	std	Y+30, r25	; 0x1e
    7c98:	8d 8f       	std	Y+29, r24	; 0x1d
    7c9a:	80 e0       	ldi	r24, 0x00	; 0
    7c9c:	df 91       	pop	r29
    7c9e:	cf 91       	pop	r28
    7ca0:	08 95       	ret

00007ca2 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    7ca2:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    7ca4:	80 e3       	ldi	r24, 0x30	; 48
    7ca6:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    7ca8:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    7caa:	9a e3       	ldi	r25, 0x3A	; 58
    7cac:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    7cae:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    7cb0:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    7cb2:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    7cb4:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    7cb6:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    7cb8:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    7cba:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    7cbe:	e6 eb       	ldi	r30, 0xB6	; 182
    7cc0:	f0 e0       	ldi	r31, 0x00	; 0
    7cc2:	80 81       	ld	r24, Z
    7cc4:	80 62       	ori	r24, 0x20	; 32
    7cc6:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    7cc8:	81 e0       	ldi	r24, 0x01	; 1
    7cca:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    7cce:	85 e0       	ldi	r24, 0x05	; 5
    7cd0:	80 93 b1 00 	sts	0x00B1, r24
    7cd4:	08 95       	ret

00007cd6 <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    7cd6:	e1 eb       	ldi	r30, 0xB1	; 177
    7cd8:	f0 e0       	ldi	r31, 0x00	; 0
    7cda:	80 81       	ld	r24, Z
    7cdc:	89 7f       	andi	r24, 0xF9	; 249
    7cde:	80 83       	st	Z, r24
    7ce0:	08 95       	ret

00007ce2 <__subsf3>:
    7ce2:	50 58       	subi	r21, 0x80	; 128

00007ce4 <__addsf3>:
    7ce4:	bb 27       	eor	r27, r27
    7ce6:	aa 27       	eor	r26, r26
    7ce8:	0e d0       	rcall	.+28     	; 0x7d06 <__addsf3x>
    7cea:	c1 c1       	rjmp	.+898    	; 0x806e <__fp_round>
    7cec:	8a d1       	rcall	.+788    	; 0x8002 <__fp_pscA>
    7cee:	30 f0       	brcs	.+12     	; 0x7cfc <__addsf3+0x18>
    7cf0:	8f d1       	rcall	.+798    	; 0x8010 <__fp_pscB>
    7cf2:	20 f0       	brcs	.+8      	; 0x7cfc <__addsf3+0x18>
    7cf4:	31 f4       	brne	.+12     	; 0x7d02 <__addsf3+0x1e>
    7cf6:	9f 3f       	cpi	r25, 0xFF	; 255
    7cf8:	11 f4       	brne	.+4      	; 0x7cfe <__addsf3+0x1a>
    7cfa:	1e f4       	brtc	.+6      	; 0x7d02 <__addsf3+0x1e>
    7cfc:	5a c1       	rjmp	.+692    	; 0x7fb2 <__fp_nan>
    7cfe:	0e f4       	brtc	.+2      	; 0x7d02 <__addsf3+0x1e>
    7d00:	e0 95       	com	r30
    7d02:	e7 fb       	bst	r30, 7
    7d04:	50 c1       	rjmp	.+672    	; 0x7fa6 <__fp_inf>

00007d06 <__addsf3x>:
    7d06:	e9 2f       	mov	r30, r25
    7d08:	d4 d1       	rcall	.+936    	; 0x80b2 <__fp_split3>
    7d0a:	80 f3       	brcs	.-32     	; 0x7cec <__addsf3+0x8>
    7d0c:	ba 17       	cp	r27, r26
    7d0e:	62 07       	cpc	r22, r18
    7d10:	73 07       	cpc	r23, r19
    7d12:	84 07       	cpc	r24, r20
    7d14:	95 07       	cpc	r25, r21
    7d16:	18 f0       	brcs	.+6      	; 0x7d1e <__addsf3x+0x18>
    7d18:	71 f4       	brne	.+28     	; 0x7d36 <__addsf3x+0x30>
    7d1a:	9e f5       	brtc	.+102    	; 0x7d82 <__addsf3x+0x7c>
    7d1c:	ec c1       	rjmp	.+984    	; 0x80f6 <__fp_zero>
    7d1e:	0e f4       	brtc	.+2      	; 0x7d22 <__addsf3x+0x1c>
    7d20:	e0 95       	com	r30
    7d22:	0b 2e       	mov	r0, r27
    7d24:	ba 2f       	mov	r27, r26
    7d26:	a0 2d       	mov	r26, r0
    7d28:	0b 01       	movw	r0, r22
    7d2a:	b9 01       	movw	r22, r18
    7d2c:	90 01       	movw	r18, r0
    7d2e:	0c 01       	movw	r0, r24
    7d30:	ca 01       	movw	r24, r20
    7d32:	a0 01       	movw	r20, r0
    7d34:	11 24       	eor	r1, r1
    7d36:	ff 27       	eor	r31, r31
    7d38:	59 1b       	sub	r21, r25
    7d3a:	99 f0       	breq	.+38     	; 0x7d62 <__addsf3x+0x5c>
    7d3c:	59 3f       	cpi	r21, 0xF9	; 249
    7d3e:	50 f4       	brcc	.+20     	; 0x7d54 <__addsf3x+0x4e>
    7d40:	50 3e       	cpi	r21, 0xE0	; 224
    7d42:	68 f1       	brcs	.+90     	; 0x7d9e <__addsf3x+0x98>
    7d44:	1a 16       	cp	r1, r26
    7d46:	f0 40       	sbci	r31, 0x00	; 0
    7d48:	a2 2f       	mov	r26, r18
    7d4a:	23 2f       	mov	r18, r19
    7d4c:	34 2f       	mov	r19, r20
    7d4e:	44 27       	eor	r20, r20
    7d50:	58 5f       	subi	r21, 0xF8	; 248
    7d52:	f3 cf       	rjmp	.-26     	; 0x7d3a <__addsf3x+0x34>
    7d54:	46 95       	lsr	r20
    7d56:	37 95       	ror	r19
    7d58:	27 95       	ror	r18
    7d5a:	a7 95       	ror	r26
    7d5c:	f0 40       	sbci	r31, 0x00	; 0
    7d5e:	53 95       	inc	r21
    7d60:	c9 f7       	brne	.-14     	; 0x7d54 <__addsf3x+0x4e>
    7d62:	7e f4       	brtc	.+30     	; 0x7d82 <__addsf3x+0x7c>
    7d64:	1f 16       	cp	r1, r31
    7d66:	ba 0b       	sbc	r27, r26
    7d68:	62 0b       	sbc	r22, r18
    7d6a:	73 0b       	sbc	r23, r19
    7d6c:	84 0b       	sbc	r24, r20
    7d6e:	ba f0       	brmi	.+46     	; 0x7d9e <__addsf3x+0x98>
    7d70:	91 50       	subi	r25, 0x01	; 1
    7d72:	a1 f0       	breq	.+40     	; 0x7d9c <__addsf3x+0x96>
    7d74:	ff 0f       	add	r31, r31
    7d76:	bb 1f       	adc	r27, r27
    7d78:	66 1f       	adc	r22, r22
    7d7a:	77 1f       	adc	r23, r23
    7d7c:	88 1f       	adc	r24, r24
    7d7e:	c2 f7       	brpl	.-16     	; 0x7d70 <__addsf3x+0x6a>
    7d80:	0e c0       	rjmp	.+28     	; 0x7d9e <__addsf3x+0x98>
    7d82:	ba 0f       	add	r27, r26
    7d84:	62 1f       	adc	r22, r18
    7d86:	73 1f       	adc	r23, r19
    7d88:	84 1f       	adc	r24, r20
    7d8a:	48 f4       	brcc	.+18     	; 0x7d9e <__addsf3x+0x98>
    7d8c:	87 95       	ror	r24
    7d8e:	77 95       	ror	r23
    7d90:	67 95       	ror	r22
    7d92:	b7 95       	ror	r27
    7d94:	f7 95       	ror	r31
    7d96:	9e 3f       	cpi	r25, 0xFE	; 254
    7d98:	08 f0       	brcs	.+2      	; 0x7d9c <__addsf3x+0x96>
    7d9a:	b3 cf       	rjmp	.-154    	; 0x7d02 <__addsf3+0x1e>
    7d9c:	93 95       	inc	r25
    7d9e:	88 0f       	add	r24, r24
    7da0:	08 f0       	brcs	.+2      	; 0x7da4 <__addsf3x+0x9e>
    7da2:	99 27       	eor	r25, r25
    7da4:	ee 0f       	add	r30, r30
    7da6:	97 95       	ror	r25
    7da8:	87 95       	ror	r24
    7daa:	08 95       	ret

00007dac <cos>:
    7dac:	39 d1       	rcall	.+626    	; 0x8020 <__fp_rempio2>
    7dae:	e3 95       	inc	r30
    7db0:	6f c1       	rjmp	.+734    	; 0x8090 <__fp_sinus>

00007db2 <__divsf3>:
    7db2:	0c d0       	rcall	.+24     	; 0x7dcc <__divsf3x>
    7db4:	5c c1       	rjmp	.+696    	; 0x806e <__fp_round>
    7db6:	2c d1       	rcall	.+600    	; 0x8010 <__fp_pscB>
    7db8:	40 f0       	brcs	.+16     	; 0x7dca <__divsf3+0x18>
    7dba:	23 d1       	rcall	.+582    	; 0x8002 <__fp_pscA>
    7dbc:	30 f0       	brcs	.+12     	; 0x7dca <__divsf3+0x18>
    7dbe:	21 f4       	brne	.+8      	; 0x7dc8 <__divsf3+0x16>
    7dc0:	5f 3f       	cpi	r21, 0xFF	; 255
    7dc2:	19 f0       	breq	.+6      	; 0x7dca <__divsf3+0x18>
    7dc4:	f0 c0       	rjmp	.+480    	; 0x7fa6 <__fp_inf>
    7dc6:	51 11       	cpse	r21, r1
    7dc8:	97 c1       	rjmp	.+814    	; 0x80f8 <__fp_szero>
    7dca:	f3 c0       	rjmp	.+486    	; 0x7fb2 <__fp_nan>

00007dcc <__divsf3x>:
    7dcc:	72 d1       	rcall	.+740    	; 0x80b2 <__fp_split3>
    7dce:	98 f3       	brcs	.-26     	; 0x7db6 <__divsf3+0x4>

00007dd0 <__divsf3_pse>:
    7dd0:	99 23       	and	r25, r25
    7dd2:	c9 f3       	breq	.-14     	; 0x7dc6 <__divsf3+0x14>
    7dd4:	55 23       	and	r21, r21
    7dd6:	b1 f3       	breq	.-20     	; 0x7dc4 <__divsf3+0x12>
    7dd8:	95 1b       	sub	r25, r21
    7dda:	55 0b       	sbc	r21, r21
    7ddc:	bb 27       	eor	r27, r27
    7dde:	aa 27       	eor	r26, r26
    7de0:	62 17       	cp	r22, r18
    7de2:	73 07       	cpc	r23, r19
    7de4:	84 07       	cpc	r24, r20
    7de6:	38 f0       	brcs	.+14     	; 0x7df6 <__divsf3_pse+0x26>
    7de8:	9f 5f       	subi	r25, 0xFF	; 255
    7dea:	5f 4f       	sbci	r21, 0xFF	; 255
    7dec:	22 0f       	add	r18, r18
    7dee:	33 1f       	adc	r19, r19
    7df0:	44 1f       	adc	r20, r20
    7df2:	aa 1f       	adc	r26, r26
    7df4:	a9 f3       	breq	.-22     	; 0x7de0 <__divsf3_pse+0x10>
    7df6:	33 d0       	rcall	.+102    	; 0x7e5e <__divsf3_pse+0x8e>
    7df8:	0e 2e       	mov	r0, r30
    7dfa:	3a f0       	brmi	.+14     	; 0x7e0a <__divsf3_pse+0x3a>
    7dfc:	e0 e8       	ldi	r30, 0x80	; 128
    7dfe:	30 d0       	rcall	.+96     	; 0x7e60 <__divsf3_pse+0x90>
    7e00:	91 50       	subi	r25, 0x01	; 1
    7e02:	50 40       	sbci	r21, 0x00	; 0
    7e04:	e6 95       	lsr	r30
    7e06:	00 1c       	adc	r0, r0
    7e08:	ca f7       	brpl	.-14     	; 0x7dfc <__divsf3_pse+0x2c>
    7e0a:	29 d0       	rcall	.+82     	; 0x7e5e <__divsf3_pse+0x8e>
    7e0c:	fe 2f       	mov	r31, r30
    7e0e:	27 d0       	rcall	.+78     	; 0x7e5e <__divsf3_pse+0x8e>
    7e10:	66 0f       	add	r22, r22
    7e12:	77 1f       	adc	r23, r23
    7e14:	88 1f       	adc	r24, r24
    7e16:	bb 1f       	adc	r27, r27
    7e18:	26 17       	cp	r18, r22
    7e1a:	37 07       	cpc	r19, r23
    7e1c:	48 07       	cpc	r20, r24
    7e1e:	ab 07       	cpc	r26, r27
    7e20:	b0 e8       	ldi	r27, 0x80	; 128
    7e22:	09 f0       	breq	.+2      	; 0x7e26 <__divsf3_pse+0x56>
    7e24:	bb 0b       	sbc	r27, r27
    7e26:	80 2d       	mov	r24, r0
    7e28:	bf 01       	movw	r22, r30
    7e2a:	ff 27       	eor	r31, r31
    7e2c:	93 58       	subi	r25, 0x83	; 131
    7e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e30:	2a f0       	brmi	.+10     	; 0x7e3c <__divsf3_pse+0x6c>
    7e32:	9e 3f       	cpi	r25, 0xFE	; 254
    7e34:	51 05       	cpc	r21, r1
    7e36:	68 f0       	brcs	.+26     	; 0x7e52 <__divsf3_pse+0x82>
    7e38:	b6 c0       	rjmp	.+364    	; 0x7fa6 <__fp_inf>
    7e3a:	5e c1       	rjmp	.+700    	; 0x80f8 <__fp_szero>
    7e3c:	5f 3f       	cpi	r21, 0xFF	; 255
    7e3e:	ec f3       	brlt	.-6      	; 0x7e3a <__divsf3_pse+0x6a>
    7e40:	98 3e       	cpi	r25, 0xE8	; 232
    7e42:	dc f3       	brlt	.-10     	; 0x7e3a <__divsf3_pse+0x6a>
    7e44:	86 95       	lsr	r24
    7e46:	77 95       	ror	r23
    7e48:	67 95       	ror	r22
    7e4a:	b7 95       	ror	r27
    7e4c:	f7 95       	ror	r31
    7e4e:	9f 5f       	subi	r25, 0xFF	; 255
    7e50:	c9 f7       	brne	.-14     	; 0x7e44 <__divsf3_pse+0x74>
    7e52:	88 0f       	add	r24, r24
    7e54:	91 1d       	adc	r25, r1
    7e56:	96 95       	lsr	r25
    7e58:	87 95       	ror	r24
    7e5a:	97 f9       	bld	r25, 7
    7e5c:	08 95       	ret
    7e5e:	e1 e0       	ldi	r30, 0x01	; 1
    7e60:	66 0f       	add	r22, r22
    7e62:	77 1f       	adc	r23, r23
    7e64:	88 1f       	adc	r24, r24
    7e66:	bb 1f       	adc	r27, r27
    7e68:	62 17       	cp	r22, r18
    7e6a:	73 07       	cpc	r23, r19
    7e6c:	84 07       	cpc	r24, r20
    7e6e:	ba 07       	cpc	r27, r26
    7e70:	20 f0       	brcs	.+8      	; 0x7e7a <__divsf3_pse+0xaa>
    7e72:	62 1b       	sub	r22, r18
    7e74:	73 0b       	sbc	r23, r19
    7e76:	84 0b       	sbc	r24, r20
    7e78:	ba 0b       	sbc	r27, r26
    7e7a:	ee 1f       	adc	r30, r30
    7e7c:	88 f7       	brcc	.-30     	; 0x7e60 <__divsf3_pse+0x90>
    7e7e:	e0 95       	com	r30
    7e80:	08 95       	ret

00007e82 <__fixsfsi>:
    7e82:	04 d0       	rcall	.+8      	; 0x7e8c <__fixunssfsi>
    7e84:	68 94       	set
    7e86:	b1 11       	cpse	r27, r1
    7e88:	37 c1       	rjmp	.+622    	; 0x80f8 <__fp_szero>
    7e8a:	08 95       	ret

00007e8c <__fixunssfsi>:
    7e8c:	1a d1       	rcall	.+564    	; 0x80c2 <__fp_splitA>
    7e8e:	88 f0       	brcs	.+34     	; 0x7eb2 <__fixunssfsi+0x26>
    7e90:	9f 57       	subi	r25, 0x7F	; 127
    7e92:	90 f0       	brcs	.+36     	; 0x7eb8 <__fixunssfsi+0x2c>
    7e94:	b9 2f       	mov	r27, r25
    7e96:	99 27       	eor	r25, r25
    7e98:	b7 51       	subi	r27, 0x17	; 23
    7e9a:	a0 f0       	brcs	.+40     	; 0x7ec4 <__fixunssfsi+0x38>
    7e9c:	d1 f0       	breq	.+52     	; 0x7ed2 <__fixunssfsi+0x46>
    7e9e:	66 0f       	add	r22, r22
    7ea0:	77 1f       	adc	r23, r23
    7ea2:	88 1f       	adc	r24, r24
    7ea4:	99 1f       	adc	r25, r25
    7ea6:	1a f0       	brmi	.+6      	; 0x7eae <__fixunssfsi+0x22>
    7ea8:	ba 95       	dec	r27
    7eaa:	c9 f7       	brne	.-14     	; 0x7e9e <__fixunssfsi+0x12>
    7eac:	12 c0       	rjmp	.+36     	; 0x7ed2 <__fixunssfsi+0x46>
    7eae:	b1 30       	cpi	r27, 0x01	; 1
    7eb0:	81 f0       	breq	.+32     	; 0x7ed2 <__fixunssfsi+0x46>
    7eb2:	21 d1       	rcall	.+578    	; 0x80f6 <__fp_zero>
    7eb4:	b1 e0       	ldi	r27, 0x01	; 1
    7eb6:	08 95       	ret
    7eb8:	1e c1       	rjmp	.+572    	; 0x80f6 <__fp_zero>
    7eba:	67 2f       	mov	r22, r23
    7ebc:	78 2f       	mov	r23, r24
    7ebe:	88 27       	eor	r24, r24
    7ec0:	b8 5f       	subi	r27, 0xF8	; 248
    7ec2:	39 f0       	breq	.+14     	; 0x7ed2 <__fixunssfsi+0x46>
    7ec4:	b9 3f       	cpi	r27, 0xF9	; 249
    7ec6:	cc f3       	brlt	.-14     	; 0x7eba <__fixunssfsi+0x2e>
    7ec8:	86 95       	lsr	r24
    7eca:	77 95       	ror	r23
    7ecc:	67 95       	ror	r22
    7ece:	b3 95       	inc	r27
    7ed0:	d9 f7       	brne	.-10     	; 0x7ec8 <__fixunssfsi+0x3c>
    7ed2:	3e f4       	brtc	.+14     	; 0x7ee2 <__fixunssfsi+0x56>
    7ed4:	90 95       	com	r25
    7ed6:	80 95       	com	r24
    7ed8:	70 95       	com	r23
    7eda:	61 95       	neg	r22
    7edc:	7f 4f       	sbci	r23, 0xFF	; 255
    7ede:	8f 4f       	sbci	r24, 0xFF	; 255
    7ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    7ee2:	08 95       	ret

00007ee4 <__floatunsisf>:
    7ee4:	e8 94       	clt
    7ee6:	09 c0       	rjmp	.+18     	; 0x7efa <__floatsisf+0x12>

00007ee8 <__floatsisf>:
    7ee8:	97 fb       	bst	r25, 7
    7eea:	3e f4       	brtc	.+14     	; 0x7efa <__floatsisf+0x12>
    7eec:	90 95       	com	r25
    7eee:	80 95       	com	r24
    7ef0:	70 95       	com	r23
    7ef2:	61 95       	neg	r22
    7ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    7ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    7efa:	99 23       	and	r25, r25
    7efc:	a9 f0       	breq	.+42     	; 0x7f28 <__floatsisf+0x40>
    7efe:	f9 2f       	mov	r31, r25
    7f00:	96 e9       	ldi	r25, 0x96	; 150
    7f02:	bb 27       	eor	r27, r27
    7f04:	93 95       	inc	r25
    7f06:	f6 95       	lsr	r31
    7f08:	87 95       	ror	r24
    7f0a:	77 95       	ror	r23
    7f0c:	67 95       	ror	r22
    7f0e:	b7 95       	ror	r27
    7f10:	f1 11       	cpse	r31, r1
    7f12:	f8 cf       	rjmp	.-16     	; 0x7f04 <__floatsisf+0x1c>
    7f14:	fa f4       	brpl	.+62     	; 0x7f54 <__floatsisf+0x6c>
    7f16:	bb 0f       	add	r27, r27
    7f18:	11 f4       	brne	.+4      	; 0x7f1e <__floatsisf+0x36>
    7f1a:	60 ff       	sbrs	r22, 0
    7f1c:	1b c0       	rjmp	.+54     	; 0x7f54 <__floatsisf+0x6c>
    7f1e:	6f 5f       	subi	r22, 0xFF	; 255
    7f20:	7f 4f       	sbci	r23, 0xFF	; 255
    7f22:	8f 4f       	sbci	r24, 0xFF	; 255
    7f24:	9f 4f       	sbci	r25, 0xFF	; 255
    7f26:	16 c0       	rjmp	.+44     	; 0x7f54 <__floatsisf+0x6c>
    7f28:	88 23       	and	r24, r24
    7f2a:	11 f0       	breq	.+4      	; 0x7f30 <__floatsisf+0x48>
    7f2c:	96 e9       	ldi	r25, 0x96	; 150
    7f2e:	11 c0       	rjmp	.+34     	; 0x7f52 <__floatsisf+0x6a>
    7f30:	77 23       	and	r23, r23
    7f32:	21 f0       	breq	.+8      	; 0x7f3c <__floatsisf+0x54>
    7f34:	9e e8       	ldi	r25, 0x8E	; 142
    7f36:	87 2f       	mov	r24, r23
    7f38:	76 2f       	mov	r23, r22
    7f3a:	05 c0       	rjmp	.+10     	; 0x7f46 <__floatsisf+0x5e>
    7f3c:	66 23       	and	r22, r22
    7f3e:	71 f0       	breq	.+28     	; 0x7f5c <__floatsisf+0x74>
    7f40:	96 e8       	ldi	r25, 0x86	; 134
    7f42:	86 2f       	mov	r24, r22
    7f44:	70 e0       	ldi	r23, 0x00	; 0
    7f46:	60 e0       	ldi	r22, 0x00	; 0
    7f48:	2a f0       	brmi	.+10     	; 0x7f54 <__floatsisf+0x6c>
    7f4a:	9a 95       	dec	r25
    7f4c:	66 0f       	add	r22, r22
    7f4e:	77 1f       	adc	r23, r23
    7f50:	88 1f       	adc	r24, r24
    7f52:	da f7       	brpl	.-10     	; 0x7f4a <__floatsisf+0x62>
    7f54:	88 0f       	add	r24, r24
    7f56:	96 95       	lsr	r25
    7f58:	87 95       	ror	r24
    7f5a:	97 f9       	bld	r25, 7
    7f5c:	08 95       	ret

00007f5e <__fp_cmp>:
    7f5e:	99 0f       	add	r25, r25
    7f60:	00 08       	sbc	r0, r0
    7f62:	55 0f       	add	r21, r21
    7f64:	aa 0b       	sbc	r26, r26
    7f66:	e0 e8       	ldi	r30, 0x80	; 128
    7f68:	fe ef       	ldi	r31, 0xFE	; 254
    7f6a:	16 16       	cp	r1, r22
    7f6c:	17 06       	cpc	r1, r23
    7f6e:	e8 07       	cpc	r30, r24
    7f70:	f9 07       	cpc	r31, r25
    7f72:	c0 f0       	brcs	.+48     	; 0x7fa4 <__fp_cmp+0x46>
    7f74:	12 16       	cp	r1, r18
    7f76:	13 06       	cpc	r1, r19
    7f78:	e4 07       	cpc	r30, r20
    7f7a:	f5 07       	cpc	r31, r21
    7f7c:	98 f0       	brcs	.+38     	; 0x7fa4 <__fp_cmp+0x46>
    7f7e:	62 1b       	sub	r22, r18
    7f80:	73 0b       	sbc	r23, r19
    7f82:	84 0b       	sbc	r24, r20
    7f84:	95 0b       	sbc	r25, r21
    7f86:	39 f4       	brne	.+14     	; 0x7f96 <__fp_cmp+0x38>
    7f88:	0a 26       	eor	r0, r26
    7f8a:	61 f0       	breq	.+24     	; 0x7fa4 <__fp_cmp+0x46>
    7f8c:	23 2b       	or	r18, r19
    7f8e:	24 2b       	or	r18, r20
    7f90:	25 2b       	or	r18, r21
    7f92:	21 f4       	brne	.+8      	; 0x7f9c <__fp_cmp+0x3e>
    7f94:	08 95       	ret
    7f96:	0a 26       	eor	r0, r26
    7f98:	09 f4       	brne	.+2      	; 0x7f9c <__fp_cmp+0x3e>
    7f9a:	a1 40       	sbci	r26, 0x01	; 1
    7f9c:	a6 95       	lsr	r26
    7f9e:	8f ef       	ldi	r24, 0xFF	; 255
    7fa0:	81 1d       	adc	r24, r1
    7fa2:	81 1d       	adc	r24, r1
    7fa4:	08 95       	ret

00007fa6 <__fp_inf>:
    7fa6:	97 f9       	bld	r25, 7
    7fa8:	9f 67       	ori	r25, 0x7F	; 127
    7faa:	80 e8       	ldi	r24, 0x80	; 128
    7fac:	70 e0       	ldi	r23, 0x00	; 0
    7fae:	60 e0       	ldi	r22, 0x00	; 0
    7fb0:	08 95       	ret

00007fb2 <__fp_nan>:
    7fb2:	9f ef       	ldi	r25, 0xFF	; 255
    7fb4:	80 ec       	ldi	r24, 0xC0	; 192
    7fb6:	08 95       	ret

00007fb8 <__fp_powser>:
    7fb8:	df 93       	push	r29
    7fba:	cf 93       	push	r28
    7fbc:	1f 93       	push	r17
    7fbe:	0f 93       	push	r16
    7fc0:	ff 92       	push	r15
    7fc2:	ef 92       	push	r14
    7fc4:	df 92       	push	r13
    7fc6:	7b 01       	movw	r14, r22
    7fc8:	8c 01       	movw	r16, r24
    7fca:	68 94       	set
    7fcc:	05 c0       	rjmp	.+10     	; 0x7fd8 <__fp_powser+0x20>
    7fce:	da 2e       	mov	r13, r26
    7fd0:	ef 01       	movw	r28, r30
    7fd2:	af d0       	rcall	.+350    	; 0x8132 <__mulsf3x>
    7fd4:	fe 01       	movw	r30, r28
    7fd6:	e8 94       	clt
    7fd8:	a5 91       	lpm	r26, Z+
    7fda:	25 91       	lpm	r18, Z+
    7fdc:	35 91       	lpm	r19, Z+
    7fde:	45 91       	lpm	r20, Z+
    7fe0:	55 91       	lpm	r21, Z+
    7fe2:	ae f3       	brts	.-22     	; 0x7fce <__fp_powser+0x16>
    7fe4:	ef 01       	movw	r28, r30
    7fe6:	8f de       	rcall	.-738    	; 0x7d06 <__addsf3x>
    7fe8:	fe 01       	movw	r30, r28
    7fea:	97 01       	movw	r18, r14
    7fec:	a8 01       	movw	r20, r16
    7fee:	da 94       	dec	r13
    7ff0:	79 f7       	brne	.-34     	; 0x7fd0 <__fp_powser+0x18>
    7ff2:	df 90       	pop	r13
    7ff4:	ef 90       	pop	r14
    7ff6:	ff 90       	pop	r15
    7ff8:	0f 91       	pop	r16
    7ffa:	1f 91       	pop	r17
    7ffc:	cf 91       	pop	r28
    7ffe:	df 91       	pop	r29
    8000:	08 95       	ret

00008002 <__fp_pscA>:
    8002:	00 24       	eor	r0, r0
    8004:	0a 94       	dec	r0
    8006:	16 16       	cp	r1, r22
    8008:	17 06       	cpc	r1, r23
    800a:	18 06       	cpc	r1, r24
    800c:	09 06       	cpc	r0, r25
    800e:	08 95       	ret

00008010 <__fp_pscB>:
    8010:	00 24       	eor	r0, r0
    8012:	0a 94       	dec	r0
    8014:	12 16       	cp	r1, r18
    8016:	13 06       	cpc	r1, r19
    8018:	14 06       	cpc	r1, r20
    801a:	05 06       	cpc	r0, r21
    801c:	08 95       	ret
    801e:	c9 cf       	rjmp	.-110    	; 0x7fb2 <__fp_nan>

00008020 <__fp_rempio2>:
    8020:	50 d0       	rcall	.+160    	; 0x80c2 <__fp_splitA>
    8022:	e8 f3       	brcs	.-6      	; 0x801e <__fp_pscB+0xe>
    8024:	e8 94       	clt
    8026:	e0 e0       	ldi	r30, 0x00	; 0
    8028:	bb 27       	eor	r27, r27
    802a:	9f 57       	subi	r25, 0x7F	; 127
    802c:	f0 f0       	brcs	.+60     	; 0x806a <__fp_rempio2+0x4a>
    802e:	2a ed       	ldi	r18, 0xDA	; 218
    8030:	3f e0       	ldi	r19, 0x0F	; 15
    8032:	49 ec       	ldi	r20, 0xC9	; 201
    8034:	06 c0       	rjmp	.+12     	; 0x8042 <__fp_rempio2+0x22>
    8036:	ee 0f       	add	r30, r30
    8038:	bb 0f       	add	r27, r27
    803a:	66 1f       	adc	r22, r22
    803c:	77 1f       	adc	r23, r23
    803e:	88 1f       	adc	r24, r24
    8040:	28 f0       	brcs	.+10     	; 0x804c <__fp_rempio2+0x2c>
    8042:	b2 3a       	cpi	r27, 0xA2	; 162
    8044:	62 07       	cpc	r22, r18
    8046:	73 07       	cpc	r23, r19
    8048:	84 07       	cpc	r24, r20
    804a:	28 f0       	brcs	.+10     	; 0x8056 <__fp_rempio2+0x36>
    804c:	b2 5a       	subi	r27, 0xA2	; 162
    804e:	62 0b       	sbc	r22, r18
    8050:	73 0b       	sbc	r23, r19
    8052:	84 0b       	sbc	r24, r20
    8054:	e3 95       	inc	r30
    8056:	9a 95       	dec	r25
    8058:	72 f7       	brpl	.-36     	; 0x8036 <__fp_rempio2+0x16>
    805a:	80 38       	cpi	r24, 0x80	; 128
    805c:	30 f4       	brcc	.+12     	; 0x806a <__fp_rempio2+0x4a>
    805e:	9a 95       	dec	r25
    8060:	bb 0f       	add	r27, r27
    8062:	66 1f       	adc	r22, r22
    8064:	77 1f       	adc	r23, r23
    8066:	88 1f       	adc	r24, r24
    8068:	d2 f7       	brpl	.-12     	; 0x805e <__fp_rempio2+0x3e>
    806a:	90 48       	sbci	r25, 0x80	; 128
    806c:	3e c1       	rjmp	.+636    	; 0x82ea <__fp_mpack_finite>

0000806e <__fp_round>:
    806e:	09 2e       	mov	r0, r25
    8070:	03 94       	inc	r0
    8072:	00 0c       	add	r0, r0
    8074:	11 f4       	brne	.+4      	; 0x807a <__fp_round+0xc>
    8076:	88 23       	and	r24, r24
    8078:	52 f0       	brmi	.+20     	; 0x808e <__fp_round+0x20>
    807a:	bb 0f       	add	r27, r27
    807c:	40 f4       	brcc	.+16     	; 0x808e <__fp_round+0x20>
    807e:	bf 2b       	or	r27, r31
    8080:	11 f4       	brne	.+4      	; 0x8086 <__fp_round+0x18>
    8082:	60 ff       	sbrs	r22, 0
    8084:	04 c0       	rjmp	.+8      	; 0x808e <__fp_round+0x20>
    8086:	6f 5f       	subi	r22, 0xFF	; 255
    8088:	7f 4f       	sbci	r23, 0xFF	; 255
    808a:	8f 4f       	sbci	r24, 0xFF	; 255
    808c:	9f 4f       	sbci	r25, 0xFF	; 255
    808e:	08 95       	ret

00008090 <__fp_sinus>:
    8090:	ef 93       	push	r30
    8092:	e0 ff       	sbrs	r30, 0
    8094:	06 c0       	rjmp	.+12     	; 0x80a2 <__fp_sinus+0x12>
    8096:	a2 ea       	ldi	r26, 0xA2	; 162
    8098:	2a ed       	ldi	r18, 0xDA	; 218
    809a:	3f e0       	ldi	r19, 0x0F	; 15
    809c:	49 ec       	ldi	r20, 0xC9	; 201
    809e:	5f eb       	ldi	r21, 0xBF	; 191
    80a0:	32 de       	rcall	.-924    	; 0x7d06 <__addsf3x>
    80a2:	e5 df       	rcall	.-54     	; 0x806e <__fp_round>
    80a4:	0f 90       	pop	r0
    80a6:	03 94       	inc	r0
    80a8:	01 fc       	sbrc	r0, 1
    80aa:	90 58       	subi	r25, 0x80	; 128
    80ac:	e6 ef       	ldi	r30, 0xF6	; 246
    80ae:	f1 e0       	ldi	r31, 0x01	; 1
    80b0:	28 c1       	rjmp	.+592    	; 0x8302 <__fp_powsodd>

000080b2 <__fp_split3>:
    80b2:	57 fd       	sbrc	r21, 7
    80b4:	90 58       	subi	r25, 0x80	; 128
    80b6:	44 0f       	add	r20, r20
    80b8:	55 1f       	adc	r21, r21
    80ba:	59 f0       	breq	.+22     	; 0x80d2 <__fp_splitA+0x10>
    80bc:	5f 3f       	cpi	r21, 0xFF	; 255
    80be:	71 f0       	breq	.+28     	; 0x80dc <__fp_splitA+0x1a>
    80c0:	47 95       	ror	r20

000080c2 <__fp_splitA>:
    80c2:	88 0f       	add	r24, r24
    80c4:	97 fb       	bst	r25, 7
    80c6:	99 1f       	adc	r25, r25
    80c8:	61 f0       	breq	.+24     	; 0x80e2 <__fp_splitA+0x20>
    80ca:	9f 3f       	cpi	r25, 0xFF	; 255
    80cc:	79 f0       	breq	.+30     	; 0x80ec <__fp_splitA+0x2a>
    80ce:	87 95       	ror	r24
    80d0:	08 95       	ret
    80d2:	12 16       	cp	r1, r18
    80d4:	13 06       	cpc	r1, r19
    80d6:	14 06       	cpc	r1, r20
    80d8:	55 1f       	adc	r21, r21
    80da:	f2 cf       	rjmp	.-28     	; 0x80c0 <__fp_split3+0xe>
    80dc:	46 95       	lsr	r20
    80de:	f1 df       	rcall	.-30     	; 0x80c2 <__fp_splitA>
    80e0:	08 c0       	rjmp	.+16     	; 0x80f2 <__fp_splitA+0x30>
    80e2:	16 16       	cp	r1, r22
    80e4:	17 06       	cpc	r1, r23
    80e6:	18 06       	cpc	r1, r24
    80e8:	99 1f       	adc	r25, r25
    80ea:	f1 cf       	rjmp	.-30     	; 0x80ce <__fp_splitA+0xc>
    80ec:	86 95       	lsr	r24
    80ee:	71 05       	cpc	r23, r1
    80f0:	61 05       	cpc	r22, r1
    80f2:	08 94       	sec
    80f4:	08 95       	ret

000080f6 <__fp_zero>:
    80f6:	e8 94       	clt

000080f8 <__fp_szero>:
    80f8:	bb 27       	eor	r27, r27
    80fa:	66 27       	eor	r22, r22
    80fc:	77 27       	eor	r23, r23
    80fe:	cb 01       	movw	r24, r22
    8100:	97 f9       	bld	r25, 7
    8102:	08 95       	ret

00008104 <__gesf2>:
    8104:	2c df       	rcall	.-424    	; 0x7f5e <__fp_cmp>
    8106:	08 f4       	brcc	.+2      	; 0x810a <__gesf2+0x6>
    8108:	8f ef       	ldi	r24, 0xFF	; 255
    810a:	08 95       	ret

0000810c <inverse>:
    810c:	9b 01       	movw	r18, r22
    810e:	ac 01       	movw	r20, r24
    8110:	60 e0       	ldi	r22, 0x00	; 0
    8112:	70 e0       	ldi	r23, 0x00	; 0
    8114:	80 e8       	ldi	r24, 0x80	; 128
    8116:	9f e3       	ldi	r25, 0x3F	; 63
    8118:	4c ce       	rjmp	.-872    	; 0x7db2 <__divsf3>

0000811a <__mulsf3>:
    811a:	0b d0       	rcall	.+22     	; 0x8132 <__mulsf3x>
    811c:	a8 cf       	rjmp	.-176    	; 0x806e <__fp_round>
    811e:	71 df       	rcall	.-286    	; 0x8002 <__fp_pscA>
    8120:	28 f0       	brcs	.+10     	; 0x812c <__mulsf3+0x12>
    8122:	76 df       	rcall	.-276    	; 0x8010 <__fp_pscB>
    8124:	18 f0       	brcs	.+6      	; 0x812c <__mulsf3+0x12>
    8126:	95 23       	and	r25, r21
    8128:	09 f0       	breq	.+2      	; 0x812c <__mulsf3+0x12>
    812a:	3d cf       	rjmp	.-390    	; 0x7fa6 <__fp_inf>
    812c:	42 cf       	rjmp	.-380    	; 0x7fb2 <__fp_nan>
    812e:	11 24       	eor	r1, r1
    8130:	e3 cf       	rjmp	.-58     	; 0x80f8 <__fp_szero>

00008132 <__mulsf3x>:
    8132:	bf df       	rcall	.-130    	; 0x80b2 <__fp_split3>
    8134:	a0 f3       	brcs	.-24     	; 0x811e <__mulsf3+0x4>

00008136 <__mulsf3_pse>:
    8136:	95 9f       	mul	r25, r21
    8138:	d1 f3       	breq	.-12     	; 0x812e <__mulsf3+0x14>
    813a:	95 0f       	add	r25, r21
    813c:	50 e0       	ldi	r21, 0x00	; 0
    813e:	55 1f       	adc	r21, r21
    8140:	62 9f       	mul	r22, r18
    8142:	f0 01       	movw	r30, r0
    8144:	72 9f       	mul	r23, r18
    8146:	bb 27       	eor	r27, r27
    8148:	f0 0d       	add	r31, r0
    814a:	b1 1d       	adc	r27, r1
    814c:	63 9f       	mul	r22, r19
    814e:	aa 27       	eor	r26, r26
    8150:	f0 0d       	add	r31, r0
    8152:	b1 1d       	adc	r27, r1
    8154:	aa 1f       	adc	r26, r26
    8156:	64 9f       	mul	r22, r20
    8158:	66 27       	eor	r22, r22
    815a:	b0 0d       	add	r27, r0
    815c:	a1 1d       	adc	r26, r1
    815e:	66 1f       	adc	r22, r22
    8160:	82 9f       	mul	r24, r18
    8162:	22 27       	eor	r18, r18
    8164:	b0 0d       	add	r27, r0
    8166:	a1 1d       	adc	r26, r1
    8168:	62 1f       	adc	r22, r18
    816a:	73 9f       	mul	r23, r19
    816c:	b0 0d       	add	r27, r0
    816e:	a1 1d       	adc	r26, r1
    8170:	62 1f       	adc	r22, r18
    8172:	83 9f       	mul	r24, r19
    8174:	a0 0d       	add	r26, r0
    8176:	61 1d       	adc	r22, r1
    8178:	22 1f       	adc	r18, r18
    817a:	74 9f       	mul	r23, r20
    817c:	33 27       	eor	r19, r19
    817e:	a0 0d       	add	r26, r0
    8180:	61 1d       	adc	r22, r1
    8182:	23 1f       	adc	r18, r19
    8184:	84 9f       	mul	r24, r20
    8186:	60 0d       	add	r22, r0
    8188:	21 1d       	adc	r18, r1
    818a:	82 2f       	mov	r24, r18
    818c:	76 2f       	mov	r23, r22
    818e:	6a 2f       	mov	r22, r26
    8190:	11 24       	eor	r1, r1
    8192:	9f 57       	subi	r25, 0x7F	; 127
    8194:	50 40       	sbci	r21, 0x00	; 0
    8196:	8a f0       	brmi	.+34     	; 0x81ba <__mulsf3_pse+0x84>
    8198:	e1 f0       	breq	.+56     	; 0x81d2 <__mulsf3_pse+0x9c>
    819a:	88 23       	and	r24, r24
    819c:	4a f0       	brmi	.+18     	; 0x81b0 <__mulsf3_pse+0x7a>
    819e:	ee 0f       	add	r30, r30
    81a0:	ff 1f       	adc	r31, r31
    81a2:	bb 1f       	adc	r27, r27
    81a4:	66 1f       	adc	r22, r22
    81a6:	77 1f       	adc	r23, r23
    81a8:	88 1f       	adc	r24, r24
    81aa:	91 50       	subi	r25, 0x01	; 1
    81ac:	50 40       	sbci	r21, 0x00	; 0
    81ae:	a9 f7       	brne	.-22     	; 0x819a <__mulsf3_pse+0x64>
    81b0:	9e 3f       	cpi	r25, 0xFE	; 254
    81b2:	51 05       	cpc	r21, r1
    81b4:	70 f0       	brcs	.+28     	; 0x81d2 <__mulsf3_pse+0x9c>
    81b6:	f7 ce       	rjmp	.-530    	; 0x7fa6 <__fp_inf>
    81b8:	9f cf       	rjmp	.-194    	; 0x80f8 <__fp_szero>
    81ba:	5f 3f       	cpi	r21, 0xFF	; 255
    81bc:	ec f3       	brlt	.-6      	; 0x81b8 <__mulsf3_pse+0x82>
    81be:	98 3e       	cpi	r25, 0xE8	; 232
    81c0:	dc f3       	brlt	.-10     	; 0x81b8 <__mulsf3_pse+0x82>
    81c2:	86 95       	lsr	r24
    81c4:	77 95       	ror	r23
    81c6:	67 95       	ror	r22
    81c8:	b7 95       	ror	r27
    81ca:	f7 95       	ror	r31
    81cc:	e7 95       	ror	r30
    81ce:	9f 5f       	subi	r25, 0xFF	; 255
    81d0:	c1 f7       	brne	.-16     	; 0x81c2 <__mulsf3_pse+0x8c>
    81d2:	fe 2b       	or	r31, r30
    81d4:	88 0f       	add	r24, r24
    81d6:	91 1d       	adc	r25, r1
    81d8:	96 95       	lsr	r25
    81da:	87 95       	ror	r24
    81dc:	97 f9       	bld	r25, 7
    81de:	08 95       	ret

000081e0 <pow>:
    81e0:	fa 01       	movw	r30, r20
    81e2:	ee 0f       	add	r30, r30
    81e4:	ff 1f       	adc	r31, r31
    81e6:	30 96       	adiw	r30, 0x00	; 0
    81e8:	21 05       	cpc	r18, r1
    81ea:	31 05       	cpc	r19, r1
    81ec:	99 f1       	breq	.+102    	; 0x8254 <pow+0x74>
    81ee:	61 15       	cp	r22, r1
    81f0:	71 05       	cpc	r23, r1
    81f2:	61 f4       	brne	.+24     	; 0x820c <pow+0x2c>
    81f4:	80 38       	cpi	r24, 0x80	; 128
    81f6:	bf e3       	ldi	r27, 0x3F	; 63
    81f8:	9b 07       	cpc	r25, r27
    81fa:	49 f1       	breq	.+82     	; 0x824e <pow+0x6e>
    81fc:	68 94       	set
    81fe:	90 38       	cpi	r25, 0x80	; 128
    8200:	81 05       	cpc	r24, r1
    8202:	61 f0       	breq	.+24     	; 0x821c <pow+0x3c>
    8204:	80 38       	cpi	r24, 0x80	; 128
    8206:	bf ef       	ldi	r27, 0xFF	; 255
    8208:	9b 07       	cpc	r25, r27
    820a:	41 f0       	breq	.+16     	; 0x821c <pow+0x3c>
    820c:	99 23       	and	r25, r25
    820e:	42 f5       	brpl	.+80     	; 0x8260 <pow+0x80>
    8210:	ff 3f       	cpi	r31, 0xFF	; 255
    8212:	e1 05       	cpc	r30, r1
    8214:	31 05       	cpc	r19, r1
    8216:	21 05       	cpc	r18, r1
    8218:	11 f1       	breq	.+68     	; 0x825e <pow+0x7e>
    821a:	e8 94       	clt
    821c:	08 94       	sec
    821e:	e7 95       	ror	r30
    8220:	d9 01       	movw	r26, r18
    8222:	aa 23       	and	r26, r26
    8224:	29 f4       	brne	.+10     	; 0x8230 <pow+0x50>
    8226:	ab 2f       	mov	r26, r27
    8228:	be 2f       	mov	r27, r30
    822a:	f8 5f       	subi	r31, 0xF8	; 248
    822c:	d0 f3       	brcs	.-12     	; 0x8222 <pow+0x42>
    822e:	10 c0       	rjmp	.+32     	; 0x8250 <pow+0x70>
    8230:	ff 5f       	subi	r31, 0xFF	; 255
    8232:	70 f4       	brcc	.+28     	; 0x8250 <pow+0x70>
    8234:	a6 95       	lsr	r26
    8236:	e0 f7       	brcc	.-8      	; 0x8230 <pow+0x50>
    8238:	f7 39       	cpi	r31, 0x97	; 151
    823a:	50 f0       	brcs	.+20     	; 0x8250 <pow+0x70>
    823c:	19 f0       	breq	.+6      	; 0x8244 <pow+0x64>
    823e:	ff 3a       	cpi	r31, 0xAF	; 175
    8240:	38 f4       	brcc	.+14     	; 0x8250 <pow+0x70>
    8242:	9f 77       	andi	r25, 0x7F	; 127
    8244:	9f 93       	push	r25
    8246:	0c d0       	rcall	.+24     	; 0x8260 <pow+0x80>
    8248:	0f 90       	pop	r0
    824a:	07 fc       	sbrc	r0, 7
    824c:	90 58       	subi	r25, 0x80	; 128
    824e:	08 95       	ret
    8250:	3e f0       	brts	.+14     	; 0x8260 <pow+0x80>
    8252:	af ce       	rjmp	.-674    	; 0x7fb2 <__fp_nan>
    8254:	60 e0       	ldi	r22, 0x00	; 0
    8256:	70 e0       	ldi	r23, 0x00	; 0
    8258:	80 e8       	ldi	r24, 0x80	; 128
    825a:	9f e3       	ldi	r25, 0x3F	; 63
    825c:	08 95       	ret
    825e:	4f e7       	ldi	r20, 0x7F	; 127
    8260:	9f 77       	andi	r25, 0x7F	; 127
    8262:	5f 93       	push	r21
    8264:	4f 93       	push	r20
    8266:	3f 93       	push	r19
    8268:	2f 93       	push	r18
    826a:	97 d0       	rcall	.+302    	; 0x839a <log>
    826c:	2f 91       	pop	r18
    826e:	3f 91       	pop	r19
    8270:	4f 91       	pop	r20
    8272:	5f 91       	pop	r21
    8274:	52 df       	rcall	.-348    	; 0x811a <__mulsf3>
    8276:	0b c0       	rjmp	.+22     	; 0x828e <exp>

00008278 <sin>:
    8278:	9f 93       	push	r25
    827a:	d2 de       	rcall	.-604    	; 0x8020 <__fp_rempio2>
    827c:	0f 90       	pop	r0
    827e:	07 fc       	sbrc	r0, 7
    8280:	ee 5f       	subi	r30, 0xFE	; 254
    8282:	06 cf       	rjmp	.-500    	; 0x8090 <__fp_sinus>
    8284:	19 f4       	brne	.+6      	; 0x828c <sin+0x14>
    8286:	0e f0       	brts	.+2      	; 0x828a <sin+0x12>
    8288:	8e ce       	rjmp	.-740    	; 0x7fa6 <__fp_inf>
    828a:	35 cf       	rjmp	.-406    	; 0x80f6 <__fp_zero>
    828c:	92 ce       	rjmp	.-732    	; 0x7fb2 <__fp_nan>

0000828e <exp>:
    828e:	19 df       	rcall	.-462    	; 0x80c2 <__fp_splitA>
    8290:	c8 f3       	brcs	.-14     	; 0x8284 <sin+0xc>
    8292:	96 38       	cpi	r25, 0x86	; 134
    8294:	c0 f7       	brcc	.-16     	; 0x8286 <sin+0xe>
    8296:	07 f8       	bld	r0, 7
    8298:	0f 92       	push	r0
    829a:	e8 94       	clt
    829c:	2b e3       	ldi	r18, 0x3B	; 59
    829e:	3a ea       	ldi	r19, 0xAA	; 170
    82a0:	48 eb       	ldi	r20, 0xB8	; 184
    82a2:	5f e7       	ldi	r21, 0x7F	; 127
    82a4:	48 df       	rcall	.-368    	; 0x8136 <__mulsf3_pse>
    82a6:	0f 92       	push	r0
    82a8:	0f 92       	push	r0
    82aa:	0f 92       	push	r0
    82ac:	4d b7       	in	r20, 0x3d	; 61
    82ae:	5e b7       	in	r21, 0x3e	; 62
    82b0:	0f 92       	push	r0
    82b2:	b3 d0       	rcall	.+358    	; 0x841a <modf>
    82b4:	e4 e1       	ldi	r30, 0x14	; 20
    82b6:	f2 e0       	ldi	r31, 0x02	; 2
    82b8:	7f de       	rcall	.-770    	; 0x7fb8 <__fp_powser>
    82ba:	4f 91       	pop	r20
    82bc:	5f 91       	pop	r21
    82be:	ef 91       	pop	r30
    82c0:	ff 91       	pop	r31
    82c2:	e5 95       	asr	r30
    82c4:	ee 1f       	adc	r30, r30
    82c6:	ff 1f       	adc	r31, r31
    82c8:	49 f0       	breq	.+18     	; 0x82dc <exp+0x4e>
    82ca:	fe 57       	subi	r31, 0x7E	; 126
    82cc:	e0 68       	ori	r30, 0x80	; 128
    82ce:	44 27       	eor	r20, r20
    82d0:	ee 0f       	add	r30, r30
    82d2:	44 1f       	adc	r20, r20
    82d4:	fa 95       	dec	r31
    82d6:	e1 f7       	brne	.-8      	; 0x82d0 <exp+0x42>
    82d8:	41 95       	neg	r20
    82da:	55 0b       	sbc	r21, r21
    82dc:	25 d0       	rcall	.+74     	; 0x8328 <ldexp>
    82de:	0f 90       	pop	r0
    82e0:	07 fe       	sbrs	r0, 7
    82e2:	14 cf       	rjmp	.-472    	; 0x810c <inverse>
    82e4:	08 95       	ret

000082e6 <__fp_mpack>:
    82e6:	9f 3f       	cpi	r25, 0xFF	; 255
    82e8:	31 f0       	breq	.+12     	; 0x82f6 <__fp_mpack_finite+0xc>

000082ea <__fp_mpack_finite>:
    82ea:	91 50       	subi	r25, 0x01	; 1
    82ec:	20 f4       	brcc	.+8      	; 0x82f6 <__fp_mpack_finite+0xc>
    82ee:	87 95       	ror	r24
    82f0:	77 95       	ror	r23
    82f2:	67 95       	ror	r22
    82f4:	b7 95       	ror	r27
    82f6:	88 0f       	add	r24, r24
    82f8:	91 1d       	adc	r25, r1
    82fa:	96 95       	lsr	r25
    82fc:	87 95       	ror	r24
    82fe:	97 f9       	bld	r25, 7
    8300:	08 95       	ret

00008302 <__fp_powsodd>:
    8302:	9f 93       	push	r25
    8304:	8f 93       	push	r24
    8306:	7f 93       	push	r23
    8308:	6f 93       	push	r22
    830a:	ff 93       	push	r31
    830c:	ef 93       	push	r30
    830e:	9b 01       	movw	r18, r22
    8310:	ac 01       	movw	r20, r24
    8312:	03 df       	rcall	.-506    	; 0x811a <__mulsf3>
    8314:	ef 91       	pop	r30
    8316:	ff 91       	pop	r31
    8318:	4f de       	rcall	.-866    	; 0x7fb8 <__fp_powser>
    831a:	2f 91       	pop	r18
    831c:	3f 91       	pop	r19
    831e:	4f 91       	pop	r20
    8320:	5f 91       	pop	r21
    8322:	fb ce       	rjmp	.-522    	; 0x811a <__mulsf3>
    8324:	40 ce       	rjmp	.-896    	; 0x7fa6 <__fp_inf>
    8326:	df cf       	rjmp	.-66     	; 0x82e6 <__fp_mpack>

00008328 <ldexp>:
    8328:	cc de       	rcall	.-616    	; 0x80c2 <__fp_splitA>
    832a:	e8 f3       	brcs	.-6      	; 0x8326 <__fp_powsodd+0x24>
    832c:	99 23       	and	r25, r25
    832e:	d9 f3       	breq	.-10     	; 0x8326 <__fp_powsodd+0x24>
    8330:	94 0f       	add	r25, r20
    8332:	51 1d       	adc	r21, r1
    8334:	bb f3       	brvs	.-18     	; 0x8324 <__fp_powsodd+0x22>
    8336:	91 50       	subi	r25, 0x01	; 1
    8338:	50 40       	sbci	r21, 0x00	; 0
    833a:	94 f0       	brlt	.+36     	; 0x8360 <ldexp+0x38>
    833c:	59 f0       	breq	.+22     	; 0x8354 <ldexp+0x2c>
    833e:	88 23       	and	r24, r24
    8340:	32 f0       	brmi	.+12     	; 0x834e <ldexp+0x26>
    8342:	66 0f       	add	r22, r22
    8344:	77 1f       	adc	r23, r23
    8346:	88 1f       	adc	r24, r24
    8348:	91 50       	subi	r25, 0x01	; 1
    834a:	50 40       	sbci	r21, 0x00	; 0
    834c:	c1 f7       	brne	.-16     	; 0x833e <ldexp+0x16>
    834e:	9e 3f       	cpi	r25, 0xFE	; 254
    8350:	51 05       	cpc	r21, r1
    8352:	44 f7       	brge	.-48     	; 0x8324 <__fp_powsodd+0x22>
    8354:	88 0f       	add	r24, r24
    8356:	91 1d       	adc	r25, r1
    8358:	96 95       	lsr	r25
    835a:	87 95       	ror	r24
    835c:	97 f9       	bld	r25, 7
    835e:	08 95       	ret
    8360:	5f 3f       	cpi	r21, 0xFF	; 255
    8362:	ac f0       	brlt	.+42     	; 0x838e <ldexp+0x66>
    8364:	98 3e       	cpi	r25, 0xE8	; 232
    8366:	9c f0       	brlt	.+38     	; 0x838e <ldexp+0x66>
    8368:	bb 27       	eor	r27, r27
    836a:	86 95       	lsr	r24
    836c:	77 95       	ror	r23
    836e:	67 95       	ror	r22
    8370:	b7 95       	ror	r27
    8372:	08 f4       	brcc	.+2      	; 0x8376 <ldexp+0x4e>
    8374:	b1 60       	ori	r27, 0x01	; 1
    8376:	93 95       	inc	r25
    8378:	c1 f7       	brne	.-16     	; 0x836a <ldexp+0x42>
    837a:	bb 0f       	add	r27, r27
    837c:	58 f7       	brcc	.-42     	; 0x8354 <ldexp+0x2c>
    837e:	11 f4       	brne	.+4      	; 0x8384 <ldexp+0x5c>
    8380:	60 ff       	sbrs	r22, 0
    8382:	e8 cf       	rjmp	.-48     	; 0x8354 <ldexp+0x2c>
    8384:	6f 5f       	subi	r22, 0xFF	; 255
    8386:	7f 4f       	sbci	r23, 0xFF	; 255
    8388:	8f 4f       	sbci	r24, 0xFF	; 255
    838a:	9f 4f       	sbci	r25, 0xFF	; 255
    838c:	e3 cf       	rjmp	.-58     	; 0x8354 <ldexp+0x2c>
    838e:	b4 ce       	rjmp	.-664    	; 0x80f8 <__fp_szero>
    8390:	0e f0       	brts	.+2      	; 0x8394 <ldexp+0x6c>
    8392:	a9 cf       	rjmp	.-174    	; 0x82e6 <__fp_mpack>
    8394:	0e ce       	rjmp	.-996    	; 0x7fb2 <__fp_nan>
    8396:	68 94       	set
    8398:	06 ce       	rjmp	.-1012   	; 0x7fa6 <__fp_inf>

0000839a <log>:
    839a:	93 de       	rcall	.-730    	; 0x80c2 <__fp_splitA>
    839c:	c8 f3       	brcs	.-14     	; 0x8390 <ldexp+0x68>
    839e:	99 23       	and	r25, r25
    83a0:	d1 f3       	breq	.-12     	; 0x8396 <ldexp+0x6e>
    83a2:	c6 f3       	brts	.-16     	; 0x8394 <ldexp+0x6c>
    83a4:	df 93       	push	r29
    83a6:	cf 93       	push	r28
    83a8:	1f 93       	push	r17
    83aa:	0f 93       	push	r16
    83ac:	ff 92       	push	r15
    83ae:	c9 2f       	mov	r28, r25
    83b0:	dd 27       	eor	r29, r29
    83b2:	88 23       	and	r24, r24
    83b4:	2a f0       	brmi	.+10     	; 0x83c0 <log+0x26>
    83b6:	21 97       	sbiw	r28, 0x01	; 1
    83b8:	66 0f       	add	r22, r22
    83ba:	77 1f       	adc	r23, r23
    83bc:	88 1f       	adc	r24, r24
    83be:	da f7       	brpl	.-10     	; 0x83b6 <log+0x1c>
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	40 e8       	ldi	r20, 0x80	; 128
    83c6:	5f eb       	ldi	r21, 0xBF	; 191
    83c8:	9f e3       	ldi	r25, 0x3F	; 63
    83ca:	88 39       	cpi	r24, 0x98	; 152
    83cc:	20 f0       	brcs	.+8      	; 0x83d6 <log+0x3c>
    83ce:	80 3e       	cpi	r24, 0xE0	; 224
    83d0:	30 f0       	brcs	.+12     	; 0x83de <log+0x44>
    83d2:	21 96       	adiw	r28, 0x01	; 1
    83d4:	8f 77       	andi	r24, 0x7F	; 127
    83d6:	86 dc       	rcall	.-1780   	; 0x7ce4 <__addsf3>
    83d8:	ec e3       	ldi	r30, 0x3C	; 60
    83da:	f2 e0       	ldi	r31, 0x02	; 2
    83dc:	03 c0       	rjmp	.+6      	; 0x83e4 <log+0x4a>
    83de:	82 dc       	rcall	.-1788   	; 0x7ce4 <__addsf3>
    83e0:	e9 e6       	ldi	r30, 0x69	; 105
    83e2:	f2 e0       	ldi	r31, 0x02	; 2
    83e4:	e9 dd       	rcall	.-1070   	; 0x7fb8 <__fp_powser>
    83e6:	8b 01       	movw	r16, r22
    83e8:	be 01       	movw	r22, r28
    83ea:	ec 01       	movw	r28, r24
    83ec:	fb 2e       	mov	r15, r27
    83ee:	6f 57       	subi	r22, 0x7F	; 127
    83f0:	71 09       	sbc	r23, r1
    83f2:	75 95       	asr	r23
    83f4:	77 1f       	adc	r23, r23
    83f6:	88 0b       	sbc	r24, r24
    83f8:	99 0b       	sbc	r25, r25
    83fa:	76 dd       	rcall	.-1300   	; 0x7ee8 <__floatsisf>
    83fc:	28 e1       	ldi	r18, 0x18	; 24
    83fe:	32 e7       	ldi	r19, 0x72	; 114
    8400:	41 e3       	ldi	r20, 0x31	; 49
    8402:	5f e3       	ldi	r21, 0x3F	; 63
    8404:	96 de       	rcall	.-724    	; 0x8132 <__mulsf3x>
    8406:	af 2d       	mov	r26, r15
    8408:	98 01       	movw	r18, r16
    840a:	ae 01       	movw	r20, r28
    840c:	ff 90       	pop	r15
    840e:	0f 91       	pop	r16
    8410:	1f 91       	pop	r17
    8412:	cf 91       	pop	r28
    8414:	df 91       	pop	r29
    8416:	77 dc       	rcall	.-1810   	; 0x7d06 <__addsf3x>
    8418:	2a ce       	rjmp	.-940    	; 0x806e <__fp_round>

0000841a <modf>:
    841a:	fa 01       	movw	r30, r20
    841c:	dc 01       	movw	r26, r24
    841e:	aa 0f       	add	r26, r26
    8420:	bb 1f       	adc	r27, r27
    8422:	9b 01       	movw	r18, r22
    8424:	ac 01       	movw	r20, r24
    8426:	bf 57       	subi	r27, 0x7F	; 127
    8428:	28 f4       	brcc	.+10     	; 0x8434 <modf+0x1a>
    842a:	22 27       	eor	r18, r18
    842c:	33 27       	eor	r19, r19
    842e:	44 27       	eor	r20, r20
    8430:	50 78       	andi	r21, 0x80	; 128
    8432:	1f c0       	rjmp	.+62     	; 0x8472 <modf+0x58>
    8434:	b7 51       	subi	r27, 0x17	; 23
    8436:	88 f4       	brcc	.+34     	; 0x845a <modf+0x40>
    8438:	ab 2f       	mov	r26, r27
    843a:	00 24       	eor	r0, r0
    843c:	46 95       	lsr	r20
    843e:	37 95       	ror	r19
    8440:	27 95       	ror	r18
    8442:	01 1c       	adc	r0, r1
    8444:	a3 95       	inc	r26
    8446:	d2 f3       	brmi	.-12     	; 0x843c <modf+0x22>
    8448:	00 20       	and	r0, r0
    844a:	69 f0       	breq	.+26     	; 0x8466 <modf+0x4c>
    844c:	22 0f       	add	r18, r18
    844e:	33 1f       	adc	r19, r19
    8450:	44 1f       	adc	r20, r20
    8452:	b3 95       	inc	r27
    8454:	da f3       	brmi	.-10     	; 0x844c <modf+0x32>
    8456:	0d d0       	rcall	.+26     	; 0x8472 <modf+0x58>
    8458:	44 cc       	rjmp	.-1912   	; 0x7ce2 <__subsf3>
    845a:	61 30       	cpi	r22, 0x01	; 1
    845c:	71 05       	cpc	r23, r1
    845e:	a0 e8       	ldi	r26, 0x80	; 128
    8460:	8a 07       	cpc	r24, r26
    8462:	b9 46       	sbci	r27, 0x69	; 105
    8464:	30 f4       	brcc	.+12     	; 0x8472 <modf+0x58>
    8466:	9b 01       	movw	r18, r22
    8468:	ac 01       	movw	r20, r24
    846a:	66 27       	eor	r22, r22
    846c:	77 27       	eor	r23, r23
    846e:	88 27       	eor	r24, r24
    8470:	90 78       	andi	r25, 0x80	; 128
    8472:	30 96       	adiw	r30, 0x00	; 0
    8474:	21 f0       	breq	.+8      	; 0x847e <modf+0x64>
    8476:	20 83       	st	Z, r18
    8478:	31 83       	std	Z+1, r19	; 0x01
    847a:	42 83       	std	Z+2, r20	; 0x02
    847c:	53 83       	std	Z+3, r21	; 0x03
    847e:	08 95       	ret

00008480 <vfprintf>:
    8480:	2f 92       	push	r2
    8482:	3f 92       	push	r3
    8484:	4f 92       	push	r4
    8486:	5f 92       	push	r5
    8488:	6f 92       	push	r6
    848a:	7f 92       	push	r7
    848c:	8f 92       	push	r8
    848e:	9f 92       	push	r9
    8490:	af 92       	push	r10
    8492:	bf 92       	push	r11
    8494:	cf 92       	push	r12
    8496:	df 92       	push	r13
    8498:	ef 92       	push	r14
    849a:	ff 92       	push	r15
    849c:	0f 93       	push	r16
    849e:	1f 93       	push	r17
    84a0:	cf 93       	push	r28
    84a2:	df 93       	push	r29
    84a4:	cd b7       	in	r28, 0x3d	; 61
    84a6:	de b7       	in	r29, 0x3e	; 62
    84a8:	63 97       	sbiw	r28, 0x13	; 19
    84aa:	0f b6       	in	r0, 0x3f	; 63
    84ac:	f8 94       	cli
    84ae:	de bf       	out	0x3e, r29	; 62
    84b0:	0f be       	out	0x3f, r0	; 63
    84b2:	cd bf       	out	0x3d, r28	; 61
    84b4:	6c 01       	movw	r12, r24
    84b6:	4b 01       	movw	r8, r22
    84b8:	2a 01       	movw	r4, r20
    84ba:	fc 01       	movw	r30, r24
    84bc:	17 82       	std	Z+7, r1	; 0x07
    84be:	16 82       	std	Z+6, r1	; 0x06
    84c0:	83 81       	ldd	r24, Z+3	; 0x03
    84c2:	81 ff       	sbrs	r24, 1
    84c4:	29 c3       	rjmp	.+1618   	; 0x8b18 <vfprintf+0x698>
    84c6:	ae 01       	movw	r20, r28
    84c8:	4f 5f       	subi	r20, 0xFF	; 255
    84ca:	5f 4f       	sbci	r21, 0xFF	; 255
    84cc:	3a 01       	movw	r6, r20
    84ce:	f6 01       	movw	r30, r12
    84d0:	93 81       	ldd	r25, Z+3	; 0x03
    84d2:	f4 01       	movw	r30, r8
    84d4:	93 fd       	sbrc	r25, 3
    84d6:	85 91       	lpm	r24, Z+
    84d8:	93 ff       	sbrs	r25, 3
    84da:	81 91       	ld	r24, Z+
    84dc:	4f 01       	movw	r8, r30
    84de:	88 23       	and	r24, r24
    84e0:	09 f4       	brne	.+2      	; 0x84e4 <vfprintf+0x64>
    84e2:	16 c3       	rjmp	.+1580   	; 0x8b10 <vfprintf+0x690>
    84e4:	85 32       	cpi	r24, 0x25	; 37
    84e6:	39 f4       	brne	.+14     	; 0x84f6 <vfprintf+0x76>
    84e8:	93 fd       	sbrc	r25, 3
    84ea:	85 91       	lpm	r24, Z+
    84ec:	93 ff       	sbrs	r25, 3
    84ee:	81 91       	ld	r24, Z+
    84f0:	4f 01       	movw	r8, r30
    84f2:	85 32       	cpi	r24, 0x25	; 37
    84f4:	31 f4       	brne	.+12     	; 0x8502 <vfprintf+0x82>
    84f6:	b6 01       	movw	r22, r12
    84f8:	90 e0       	ldi	r25, 0x00	; 0
    84fa:	da d5       	rcall	.+2996   	; 0x90b0 <fputc>
    84fc:	52 01       	movw	r10, r4
    84fe:	25 01       	movw	r4, r10
    8500:	e6 cf       	rjmp	.-52     	; 0x84ce <vfprintf+0x4e>
    8502:	10 e0       	ldi	r17, 0x00	; 0
    8504:	f1 2c       	mov	r15, r1
    8506:	20 e0       	ldi	r18, 0x00	; 0
    8508:	20 32       	cpi	r18, 0x20	; 32
    850a:	a0 f4       	brcc	.+40     	; 0x8534 <vfprintf+0xb4>
    850c:	8b 32       	cpi	r24, 0x2B	; 43
    850e:	69 f0       	breq	.+26     	; 0x852a <vfprintf+0xaa>
    8510:	30 f4       	brcc	.+12     	; 0x851e <vfprintf+0x9e>
    8512:	80 32       	cpi	r24, 0x20	; 32
    8514:	59 f0       	breq	.+22     	; 0x852c <vfprintf+0xac>
    8516:	83 32       	cpi	r24, 0x23	; 35
    8518:	69 f4       	brne	.+26     	; 0x8534 <vfprintf+0xb4>
    851a:	20 61       	ori	r18, 0x10	; 16
    851c:	2c c0       	rjmp	.+88     	; 0x8576 <vfprintf+0xf6>
    851e:	8d 32       	cpi	r24, 0x2D	; 45
    8520:	39 f0       	breq	.+14     	; 0x8530 <vfprintf+0xb0>
    8522:	80 33       	cpi	r24, 0x30	; 48
    8524:	39 f4       	brne	.+14     	; 0x8534 <vfprintf+0xb4>
    8526:	21 60       	ori	r18, 0x01	; 1
    8528:	26 c0       	rjmp	.+76     	; 0x8576 <vfprintf+0xf6>
    852a:	22 60       	ori	r18, 0x02	; 2
    852c:	24 60       	ori	r18, 0x04	; 4
    852e:	23 c0       	rjmp	.+70     	; 0x8576 <vfprintf+0xf6>
    8530:	28 60       	ori	r18, 0x08	; 8
    8532:	21 c0       	rjmp	.+66     	; 0x8576 <vfprintf+0xf6>
    8534:	27 fd       	sbrc	r18, 7
    8536:	27 c0       	rjmp	.+78     	; 0x8586 <vfprintf+0x106>
    8538:	30 ed       	ldi	r19, 0xD0	; 208
    853a:	38 0f       	add	r19, r24
    853c:	3a 30       	cpi	r19, 0x0A	; 10
    853e:	78 f4       	brcc	.+30     	; 0x855e <vfprintf+0xde>
    8540:	26 ff       	sbrs	r18, 6
    8542:	06 c0       	rjmp	.+12     	; 0x8550 <vfprintf+0xd0>
    8544:	fa e0       	ldi	r31, 0x0A	; 10
    8546:	1f 9f       	mul	r17, r31
    8548:	30 0d       	add	r19, r0
    854a:	11 24       	eor	r1, r1
    854c:	13 2f       	mov	r17, r19
    854e:	13 c0       	rjmp	.+38     	; 0x8576 <vfprintf+0xf6>
    8550:	4a e0       	ldi	r20, 0x0A	; 10
    8552:	f4 9e       	mul	r15, r20
    8554:	30 0d       	add	r19, r0
    8556:	11 24       	eor	r1, r1
    8558:	f3 2e       	mov	r15, r19
    855a:	20 62       	ori	r18, 0x20	; 32
    855c:	0c c0       	rjmp	.+24     	; 0x8576 <vfprintf+0xf6>
    855e:	8e 32       	cpi	r24, 0x2E	; 46
    8560:	21 f4       	brne	.+8      	; 0x856a <vfprintf+0xea>
    8562:	26 fd       	sbrc	r18, 6
    8564:	d5 c2       	rjmp	.+1450   	; 0x8b10 <vfprintf+0x690>
    8566:	20 64       	ori	r18, 0x40	; 64
    8568:	06 c0       	rjmp	.+12     	; 0x8576 <vfprintf+0xf6>
    856a:	8c 36       	cpi	r24, 0x6C	; 108
    856c:	11 f4       	brne	.+4      	; 0x8572 <vfprintf+0xf2>
    856e:	20 68       	ori	r18, 0x80	; 128
    8570:	02 c0       	rjmp	.+4      	; 0x8576 <vfprintf+0xf6>
    8572:	88 36       	cpi	r24, 0x68	; 104
    8574:	41 f4       	brne	.+16     	; 0x8586 <vfprintf+0x106>
    8576:	f4 01       	movw	r30, r8
    8578:	93 fd       	sbrc	r25, 3
    857a:	85 91       	lpm	r24, Z+
    857c:	93 ff       	sbrs	r25, 3
    857e:	81 91       	ld	r24, Z+
    8580:	4f 01       	movw	r8, r30
    8582:	81 11       	cpse	r24, r1
    8584:	c1 cf       	rjmp	.-126    	; 0x8508 <vfprintf+0x88>
    8586:	9b eb       	ldi	r25, 0xBB	; 187
    8588:	98 0f       	add	r25, r24
    858a:	93 30       	cpi	r25, 0x03	; 3
    858c:	18 f4       	brcc	.+6      	; 0x8594 <vfprintf+0x114>
    858e:	20 61       	ori	r18, 0x10	; 16
    8590:	80 5e       	subi	r24, 0xE0	; 224
    8592:	06 c0       	rjmp	.+12     	; 0x85a0 <vfprintf+0x120>
    8594:	9b e9       	ldi	r25, 0x9B	; 155
    8596:	98 0f       	add	r25, r24
    8598:	93 30       	cpi	r25, 0x03	; 3
    859a:	08 f0       	brcs	.+2      	; 0x859e <vfprintf+0x11e>
    859c:	64 c1       	rjmp	.+712    	; 0x8866 <vfprintf+0x3e6>
    859e:	2f 7e       	andi	r18, 0xEF	; 239
    85a0:	26 ff       	sbrs	r18, 6
    85a2:	16 e0       	ldi	r17, 0x06	; 6
    85a4:	2f 73       	andi	r18, 0x3F	; 63
    85a6:	32 2e       	mov	r3, r18
    85a8:	85 36       	cpi	r24, 0x65	; 101
    85aa:	19 f4       	brne	.+6      	; 0x85b2 <vfprintf+0x132>
    85ac:	20 64       	ori	r18, 0x40	; 64
    85ae:	32 2e       	mov	r3, r18
    85b0:	08 c0       	rjmp	.+16     	; 0x85c2 <vfprintf+0x142>
    85b2:	86 36       	cpi	r24, 0x66	; 102
    85b4:	21 f4       	brne	.+8      	; 0x85be <vfprintf+0x13e>
    85b6:	f2 2f       	mov	r31, r18
    85b8:	f0 68       	ori	r31, 0x80	; 128
    85ba:	3f 2e       	mov	r3, r31
    85bc:	02 c0       	rjmp	.+4      	; 0x85c2 <vfprintf+0x142>
    85be:	11 11       	cpse	r17, r1
    85c0:	11 50       	subi	r17, 0x01	; 1
    85c2:	37 fe       	sbrs	r3, 7
    85c4:	07 c0       	rjmp	.+14     	; 0x85d4 <vfprintf+0x154>
    85c6:	1c 33       	cpi	r17, 0x3C	; 60
    85c8:	50 f4       	brcc	.+20     	; 0x85de <vfprintf+0x15e>
    85ca:	ee 24       	eor	r14, r14
    85cc:	e3 94       	inc	r14
    85ce:	e1 0e       	add	r14, r17
    85d0:	27 e0       	ldi	r18, 0x07	; 7
    85d2:	0b c0       	rjmp	.+22     	; 0x85ea <vfprintf+0x16a>
    85d4:	18 30       	cpi	r17, 0x08	; 8
    85d6:	38 f0       	brcs	.+14     	; 0x85e6 <vfprintf+0x166>
    85d8:	27 e0       	ldi	r18, 0x07	; 7
    85da:	17 e0       	ldi	r17, 0x07	; 7
    85dc:	05 c0       	rjmp	.+10     	; 0x85e8 <vfprintf+0x168>
    85de:	27 e0       	ldi	r18, 0x07	; 7
    85e0:	4c e3       	ldi	r20, 0x3C	; 60
    85e2:	e4 2e       	mov	r14, r20
    85e4:	02 c0       	rjmp	.+4      	; 0x85ea <vfprintf+0x16a>
    85e6:	21 2f       	mov	r18, r17
    85e8:	e1 2c       	mov	r14, r1
    85ea:	52 01       	movw	r10, r4
    85ec:	44 e0       	ldi	r20, 0x04	; 4
    85ee:	a4 0e       	add	r10, r20
    85f0:	b1 1c       	adc	r11, r1
    85f2:	f2 01       	movw	r30, r4
    85f4:	60 81       	ld	r22, Z
    85f6:	71 81       	ldd	r23, Z+1	; 0x01
    85f8:	82 81       	ldd	r24, Z+2	; 0x02
    85fa:	93 81       	ldd	r25, Z+3	; 0x03
    85fc:	0e 2d       	mov	r16, r14
    85fe:	a3 01       	movw	r20, r6
    8600:	69 d4       	rcall	.+2258   	; 0x8ed4 <__ftoa_engine>
    8602:	2c 01       	movw	r4, r24
    8604:	09 81       	ldd	r16, Y+1	; 0x01
    8606:	00 ff       	sbrs	r16, 0
    8608:	02 c0       	rjmp	.+4      	; 0x860e <vfprintf+0x18e>
    860a:	03 ff       	sbrs	r16, 3
    860c:	07 c0       	rjmp	.+14     	; 0x861c <vfprintf+0x19c>
    860e:	31 fc       	sbrc	r3, 1
    8610:	08 c0       	rjmp	.+16     	; 0x8622 <vfprintf+0x1a2>
    8612:	32 fe       	sbrs	r3, 2
    8614:	09 c0       	rjmp	.+18     	; 0x8628 <vfprintf+0x1a8>
    8616:	30 e2       	ldi	r19, 0x20	; 32
    8618:	23 2e       	mov	r2, r19
    861a:	07 c0       	rjmp	.+14     	; 0x862a <vfprintf+0x1aa>
    861c:	2d e2       	ldi	r18, 0x2D	; 45
    861e:	22 2e       	mov	r2, r18
    8620:	04 c0       	rjmp	.+8      	; 0x862a <vfprintf+0x1aa>
    8622:	9b e2       	ldi	r25, 0x2B	; 43
    8624:	29 2e       	mov	r2, r25
    8626:	01 c0       	rjmp	.+2      	; 0x862a <vfprintf+0x1aa>
    8628:	21 2c       	mov	r2, r1
    862a:	80 2f       	mov	r24, r16
    862c:	8c 70       	andi	r24, 0x0C	; 12
    862e:	19 f0       	breq	.+6      	; 0x8636 <vfprintf+0x1b6>
    8630:	21 10       	cpse	r2, r1
    8632:	51 c2       	rjmp	.+1186   	; 0x8ad6 <vfprintf+0x656>
    8634:	8d c2       	rjmp	.+1306   	; 0x8b50 <vfprintf+0x6d0>
    8636:	37 fe       	sbrs	r3, 7
    8638:	0f c0       	rjmp	.+30     	; 0x8658 <vfprintf+0x1d8>
    863a:	e4 0c       	add	r14, r4
    863c:	04 ff       	sbrs	r16, 4
    863e:	04 c0       	rjmp	.+8      	; 0x8648 <vfprintf+0x1c8>
    8640:	8a 81       	ldd	r24, Y+2	; 0x02
    8642:	81 33       	cpi	r24, 0x31	; 49
    8644:	09 f4       	brne	.+2      	; 0x8648 <vfprintf+0x1c8>
    8646:	ea 94       	dec	r14
    8648:	1e 14       	cp	r1, r14
    864a:	74 f5       	brge	.+92     	; 0x86a8 <vfprintf+0x228>
    864c:	f8 e0       	ldi	r31, 0x08	; 8
    864e:	fe 15       	cp	r31, r14
    8650:	78 f5       	brcc	.+94     	; 0x86b0 <vfprintf+0x230>
    8652:	88 e0       	ldi	r24, 0x08	; 8
    8654:	e8 2e       	mov	r14, r24
    8656:	2c c0       	rjmp	.+88     	; 0x86b0 <vfprintf+0x230>
    8658:	36 fc       	sbrc	r3, 6
    865a:	2a c0       	rjmp	.+84     	; 0x86b0 <vfprintf+0x230>
    865c:	81 2f       	mov	r24, r17
    865e:	90 e0       	ldi	r25, 0x00	; 0
    8660:	84 15       	cp	r24, r4
    8662:	95 05       	cpc	r25, r5
    8664:	9c f0       	brlt	.+38     	; 0x868c <vfprintf+0x20c>
    8666:	2c ef       	ldi	r18, 0xFC	; 252
    8668:	42 16       	cp	r4, r18
    866a:	2f ef       	ldi	r18, 0xFF	; 255
    866c:	52 06       	cpc	r5, r18
    866e:	74 f0       	brlt	.+28     	; 0x868c <vfprintf+0x20c>
    8670:	43 2d       	mov	r20, r3
    8672:	40 68       	ori	r20, 0x80	; 128
    8674:	34 2e       	mov	r3, r20
    8676:	0a c0       	rjmp	.+20     	; 0x868c <vfprintf+0x20c>
    8678:	e2 e0       	ldi	r30, 0x02	; 2
    867a:	f0 e0       	ldi	r31, 0x00	; 0
    867c:	ec 0f       	add	r30, r28
    867e:	fd 1f       	adc	r31, r29
    8680:	e1 0f       	add	r30, r17
    8682:	f1 1d       	adc	r31, r1
    8684:	80 81       	ld	r24, Z
    8686:	80 33       	cpi	r24, 0x30	; 48
    8688:	19 f4       	brne	.+6      	; 0x8690 <vfprintf+0x210>
    868a:	11 50       	subi	r17, 0x01	; 1
    868c:	11 11       	cpse	r17, r1
    868e:	f4 cf       	rjmp	.-24     	; 0x8678 <vfprintf+0x1f8>
    8690:	37 fe       	sbrs	r3, 7
    8692:	0e c0       	rjmp	.+28     	; 0x86b0 <vfprintf+0x230>
    8694:	ee 24       	eor	r14, r14
    8696:	e3 94       	inc	r14
    8698:	e1 0e       	add	r14, r17
    869a:	81 2f       	mov	r24, r17
    869c:	90 e0       	ldi	r25, 0x00	; 0
    869e:	48 16       	cp	r4, r24
    86a0:	59 06       	cpc	r5, r25
    86a2:	2c f4       	brge	.+10     	; 0x86ae <vfprintf+0x22e>
    86a4:	14 19       	sub	r17, r4
    86a6:	04 c0       	rjmp	.+8      	; 0x86b0 <vfprintf+0x230>
    86a8:	ee 24       	eor	r14, r14
    86aa:	e3 94       	inc	r14
    86ac:	01 c0       	rjmp	.+2      	; 0x86b0 <vfprintf+0x230>
    86ae:	10 e0       	ldi	r17, 0x00	; 0
    86b0:	37 fe       	sbrs	r3, 7
    86b2:	06 c0       	rjmp	.+12     	; 0x86c0 <vfprintf+0x240>
    86b4:	14 14       	cp	r1, r4
    86b6:	15 04       	cpc	r1, r5
    86b8:	34 f4       	brge	.+12     	; 0x86c6 <vfprintf+0x246>
    86ba:	c2 01       	movw	r24, r4
    86bc:	01 96       	adiw	r24, 0x01	; 1
    86be:	05 c0       	rjmp	.+10     	; 0x86ca <vfprintf+0x24a>
    86c0:	85 e0       	ldi	r24, 0x05	; 5
    86c2:	90 e0       	ldi	r25, 0x00	; 0
    86c4:	02 c0       	rjmp	.+4      	; 0x86ca <vfprintf+0x24a>
    86c6:	81 e0       	ldi	r24, 0x01	; 1
    86c8:	90 e0       	ldi	r25, 0x00	; 0
    86ca:	21 10       	cpse	r2, r1
    86cc:	01 96       	adiw	r24, 0x01	; 1
    86ce:	11 23       	and	r17, r17
    86d0:	31 f0       	breq	.+12     	; 0x86de <vfprintf+0x25e>
    86d2:	21 2f       	mov	r18, r17
    86d4:	30 e0       	ldi	r19, 0x00	; 0
    86d6:	2f 5f       	subi	r18, 0xFF	; 255
    86d8:	3f 4f       	sbci	r19, 0xFF	; 255
    86da:	82 0f       	add	r24, r18
    86dc:	93 1f       	adc	r25, r19
    86de:	2f 2d       	mov	r18, r15
    86e0:	30 e0       	ldi	r19, 0x00	; 0
    86e2:	82 17       	cp	r24, r18
    86e4:	93 07       	cpc	r25, r19
    86e6:	14 f4       	brge	.+4      	; 0x86ec <vfprintf+0x26c>
    86e8:	f8 1a       	sub	r15, r24
    86ea:	01 c0       	rjmp	.+2      	; 0x86ee <vfprintf+0x26e>
    86ec:	f1 2c       	mov	r15, r1
    86ee:	83 2d       	mov	r24, r3
    86f0:	89 70       	andi	r24, 0x09	; 9
    86f2:	41 f4       	brne	.+16     	; 0x8704 <vfprintf+0x284>
    86f4:	ff 20       	and	r15, r15
    86f6:	31 f0       	breq	.+12     	; 0x8704 <vfprintf+0x284>
    86f8:	b6 01       	movw	r22, r12
    86fa:	80 e2       	ldi	r24, 0x20	; 32
    86fc:	90 e0       	ldi	r25, 0x00	; 0
    86fe:	d8 d4       	rcall	.+2480   	; 0x90b0 <fputc>
    8700:	fa 94       	dec	r15
    8702:	f8 cf       	rjmp	.-16     	; 0x86f4 <vfprintf+0x274>
    8704:	22 20       	and	r2, r2
    8706:	21 f0       	breq	.+8      	; 0x8710 <vfprintf+0x290>
    8708:	b6 01       	movw	r22, r12
    870a:	82 2d       	mov	r24, r2
    870c:	90 e0       	ldi	r25, 0x00	; 0
    870e:	d0 d4       	rcall	.+2464   	; 0x90b0 <fputc>
    8710:	33 fc       	sbrc	r3, 3
    8712:	08 c0       	rjmp	.+16     	; 0x8724 <vfprintf+0x2a4>
    8714:	ff 20       	and	r15, r15
    8716:	31 f0       	breq	.+12     	; 0x8724 <vfprintf+0x2a4>
    8718:	b6 01       	movw	r22, r12
    871a:	80 e3       	ldi	r24, 0x30	; 48
    871c:	90 e0       	ldi	r25, 0x00	; 0
    871e:	c8 d4       	rcall	.+2448   	; 0x90b0 <fputc>
    8720:	fa 94       	dec	r15
    8722:	f8 cf       	rjmp	.-16     	; 0x8714 <vfprintf+0x294>
    8724:	37 fe       	sbrs	r3, 7
    8726:	58 c0       	rjmp	.+176    	; 0x87d8 <vfprintf+0x358>
    8728:	94 2d       	mov	r25, r4
    872a:	85 2d       	mov	r24, r5
    872c:	57 fe       	sbrs	r5, 7
    872e:	02 c0       	rjmp	.+4      	; 0x8734 <vfprintf+0x2b4>
    8730:	90 e0       	ldi	r25, 0x00	; 0
    8732:	80 e0       	ldi	r24, 0x00	; 0
    8734:	29 2e       	mov	r2, r25
    8736:	38 2e       	mov	r3, r24
    8738:	20 e0       	ldi	r18, 0x00	; 0
    873a:	30 e0       	ldi	r19, 0x00	; 0
    873c:	a2 01       	movw	r20, r4
    873e:	4e 19       	sub	r20, r14
    8740:	51 09       	sbc	r21, r1
    8742:	5d 87       	std	Y+13, r21	; 0x0d
    8744:	4c 87       	std	Y+12, r20	; 0x0c
    8746:	a2 01       	movw	r20, r4
    8748:	42 19       	sub	r20, r2
    874a:	53 09       	sbc	r21, r3
    874c:	5f 87       	std	Y+15, r21	; 0x0f
    874e:	4e 87       	std	Y+14, r20	; 0x0e
    8750:	61 2f       	mov	r22, r17
    8752:	70 e0       	ldi	r23, 0x00	; 0
    8754:	44 27       	eor	r20, r20
    8756:	55 27       	eor	r21, r21
    8758:	46 1b       	sub	r20, r22
    875a:	57 0b       	sbc	r21, r23
    875c:	59 8b       	std	Y+17, r21	; 0x11
    875e:	48 8b       	std	Y+16, r20	; 0x10
    8760:	5f ef       	ldi	r21, 0xFF	; 255
    8762:	25 16       	cp	r2, r21
    8764:	35 06       	cpc	r3, r21
    8766:	41 f4       	brne	.+16     	; 0x8778 <vfprintf+0x2f8>
    8768:	b6 01       	movw	r22, r12
    876a:	8e e2       	ldi	r24, 0x2E	; 46
    876c:	90 e0       	ldi	r25, 0x00	; 0
    876e:	2a 8b       	std	Y+18, r18	; 0x12
    8770:	3b 8b       	std	Y+19, r19	; 0x13
    8772:	9e d4       	rcall	.+2364   	; 0x90b0 <fputc>
    8774:	3b 89       	ldd	r19, Y+19	; 0x13
    8776:	2a 89       	ldd	r18, Y+18	; 0x12
    8778:	42 14       	cp	r4, r2
    877a:	53 04       	cpc	r5, r3
    877c:	6c f0       	brlt	.+26     	; 0x8798 <vfprintf+0x318>
    877e:	4c 85       	ldd	r20, Y+12	; 0x0c
    8780:	5d 85       	ldd	r21, Y+13	; 0x0d
    8782:	42 15       	cp	r20, r2
    8784:	53 05       	cpc	r21, r3
    8786:	44 f4       	brge	.+16     	; 0x8798 <vfprintf+0x318>
    8788:	ee 85       	ldd	r30, Y+14	; 0x0e
    878a:	ff 85       	ldd	r31, Y+15	; 0x0f
    878c:	e2 0f       	add	r30, r18
    878e:	f3 1f       	adc	r31, r19
    8790:	e6 0d       	add	r30, r6
    8792:	f7 1d       	adc	r31, r7
    8794:	81 81       	ldd	r24, Z+1	; 0x01
    8796:	01 c0       	rjmp	.+2      	; 0x879a <vfprintf+0x31a>
    8798:	80 e3       	ldi	r24, 0x30	; 48
    879a:	51 e0       	ldi	r21, 0x01	; 1
    879c:	25 1a       	sub	r2, r21
    879e:	31 08       	sbc	r3, r1
    87a0:	2f 5f       	subi	r18, 0xFF	; 255
    87a2:	3f 4f       	sbci	r19, 0xFF	; 255
    87a4:	48 89       	ldd	r20, Y+16	; 0x10
    87a6:	59 89       	ldd	r21, Y+17	; 0x11
    87a8:	24 16       	cp	r2, r20
    87aa:	35 06       	cpc	r3, r21
    87ac:	44 f0       	brlt	.+16     	; 0x87be <vfprintf+0x33e>
    87ae:	b6 01       	movw	r22, r12
    87b0:	90 e0       	ldi	r25, 0x00	; 0
    87b2:	2a 8b       	std	Y+18, r18	; 0x12
    87b4:	3b 8b       	std	Y+19, r19	; 0x13
    87b6:	7c d4       	rcall	.+2296   	; 0x90b0 <fputc>
    87b8:	2a 89       	ldd	r18, Y+18	; 0x12
    87ba:	3b 89       	ldd	r19, Y+19	; 0x13
    87bc:	d1 cf       	rjmp	.-94     	; 0x8760 <vfprintf+0x2e0>
    87be:	24 14       	cp	r2, r4
    87c0:	35 04       	cpc	r3, r5
    87c2:	39 f4       	brne	.+14     	; 0x87d2 <vfprintf+0x352>
    87c4:	9a 81       	ldd	r25, Y+2	; 0x02
    87c6:	96 33       	cpi	r25, 0x36	; 54
    87c8:	18 f4       	brcc	.+6      	; 0x87d0 <vfprintf+0x350>
    87ca:	95 33       	cpi	r25, 0x35	; 53
    87cc:	11 f4       	brne	.+4      	; 0x87d2 <vfprintf+0x352>
    87ce:	04 ff       	sbrs	r16, 4
    87d0:	81 e3       	ldi	r24, 0x31	; 49
    87d2:	b6 01       	movw	r22, r12
    87d4:	90 e0       	ldi	r25, 0x00	; 0
    87d6:	45 c0       	rjmp	.+138    	; 0x8862 <vfprintf+0x3e2>
    87d8:	8a 81       	ldd	r24, Y+2	; 0x02
    87da:	81 33       	cpi	r24, 0x31	; 49
    87dc:	09 f0       	breq	.+2      	; 0x87e0 <vfprintf+0x360>
    87de:	0f 7e       	andi	r16, 0xEF	; 239
    87e0:	b6 01       	movw	r22, r12
    87e2:	90 e0       	ldi	r25, 0x00	; 0
    87e4:	65 d4       	rcall	.+2250   	; 0x90b0 <fputc>
    87e6:	11 11       	cpse	r17, r1
    87e8:	05 c0       	rjmp	.+10     	; 0x87f4 <vfprintf+0x374>
    87ea:	34 fc       	sbrc	r3, 4
    87ec:	16 c0       	rjmp	.+44     	; 0x881a <vfprintf+0x39a>
    87ee:	85 e6       	ldi	r24, 0x65	; 101
    87f0:	90 e0       	ldi	r25, 0x00	; 0
    87f2:	15 c0       	rjmp	.+42     	; 0x881e <vfprintf+0x39e>
    87f4:	b6 01       	movw	r22, r12
    87f6:	8e e2       	ldi	r24, 0x2E	; 46
    87f8:	90 e0       	ldi	r25, 0x00	; 0
    87fa:	5a d4       	rcall	.+2228   	; 0x90b0 <fputc>
    87fc:	82 e0       	ldi	r24, 0x02	; 2
    87fe:	ee 24       	eor	r14, r14
    8800:	e3 94       	inc	r14
    8802:	e8 0e       	add	r14, r24
    8804:	f3 01       	movw	r30, r6
    8806:	e8 0f       	add	r30, r24
    8808:	f1 1d       	adc	r31, r1
    880a:	80 81       	ld	r24, Z
    880c:	b6 01       	movw	r22, r12
    880e:	90 e0       	ldi	r25, 0x00	; 0
    8810:	4f d4       	rcall	.+2206   	; 0x90b0 <fputc>
    8812:	11 50       	subi	r17, 0x01	; 1
    8814:	8e 2d       	mov	r24, r14
    8816:	99 f7       	brne	.-26     	; 0x87fe <vfprintf+0x37e>
    8818:	e8 cf       	rjmp	.-48     	; 0x87ea <vfprintf+0x36a>
    881a:	85 e4       	ldi	r24, 0x45	; 69
    881c:	90 e0       	ldi	r25, 0x00	; 0
    881e:	b6 01       	movw	r22, r12
    8820:	47 d4       	rcall	.+2190   	; 0x90b0 <fputc>
    8822:	57 fc       	sbrc	r5, 7
    8824:	05 c0       	rjmp	.+10     	; 0x8830 <vfprintf+0x3b0>
    8826:	41 14       	cp	r4, r1
    8828:	51 04       	cpc	r5, r1
    882a:	39 f4       	brne	.+14     	; 0x883a <vfprintf+0x3ba>
    882c:	04 ff       	sbrs	r16, 4
    882e:	05 c0       	rjmp	.+10     	; 0x883a <vfprintf+0x3ba>
    8830:	51 94       	neg	r5
    8832:	41 94       	neg	r4
    8834:	51 08       	sbc	r5, r1
    8836:	8d e2       	ldi	r24, 0x2D	; 45
    8838:	01 c0       	rjmp	.+2      	; 0x883c <vfprintf+0x3bc>
    883a:	8b e2       	ldi	r24, 0x2B	; 43
    883c:	b6 01       	movw	r22, r12
    883e:	90 e0       	ldi	r25, 0x00	; 0
    8840:	37 d4       	rcall	.+2158   	; 0x90b0 <fputc>
    8842:	80 e3       	ldi	r24, 0x30	; 48
    8844:	9a e0       	ldi	r25, 0x0A	; 10
    8846:	49 16       	cp	r4, r25
    8848:	51 04       	cpc	r5, r1
    884a:	2c f0       	brlt	.+10     	; 0x8856 <vfprintf+0x3d6>
    884c:	8f 5f       	subi	r24, 0xFF	; 255
    884e:	5a e0       	ldi	r21, 0x0A	; 10
    8850:	45 1a       	sub	r4, r21
    8852:	51 08       	sbc	r5, r1
    8854:	f7 cf       	rjmp	.-18     	; 0x8844 <vfprintf+0x3c4>
    8856:	b6 01       	movw	r22, r12
    8858:	90 e0       	ldi	r25, 0x00	; 0
    885a:	2a d4       	rcall	.+2132   	; 0x90b0 <fputc>
    885c:	b6 01       	movw	r22, r12
    885e:	c2 01       	movw	r24, r4
    8860:	c0 96       	adiw	r24, 0x30	; 48
    8862:	26 d4       	rcall	.+2124   	; 0x90b0 <fputc>
    8864:	4c c1       	rjmp	.+664    	; 0x8afe <vfprintf+0x67e>
    8866:	83 36       	cpi	r24, 0x63	; 99
    8868:	31 f0       	breq	.+12     	; 0x8876 <vfprintf+0x3f6>
    886a:	83 37       	cpi	r24, 0x73	; 115
    886c:	79 f0       	breq	.+30     	; 0x888c <vfprintf+0x40c>
    886e:	83 35       	cpi	r24, 0x53	; 83
    8870:	09 f0       	breq	.+2      	; 0x8874 <vfprintf+0x3f4>
    8872:	54 c0       	rjmp	.+168    	; 0x891c <vfprintf+0x49c>
    8874:	20 c0       	rjmp	.+64     	; 0x88b6 <vfprintf+0x436>
    8876:	52 01       	movw	r10, r4
    8878:	e2 e0       	ldi	r30, 0x02	; 2
    887a:	ae 0e       	add	r10, r30
    887c:	b1 1c       	adc	r11, r1
    887e:	f2 01       	movw	r30, r4
    8880:	80 81       	ld	r24, Z
    8882:	89 83       	std	Y+1, r24	; 0x01
    8884:	01 e0       	ldi	r16, 0x01	; 1
    8886:	10 e0       	ldi	r17, 0x00	; 0
    8888:	23 01       	movw	r4, r6
    888a:	13 c0       	rjmp	.+38     	; 0x88b2 <vfprintf+0x432>
    888c:	52 01       	movw	r10, r4
    888e:	f2 e0       	ldi	r31, 0x02	; 2
    8890:	af 0e       	add	r10, r31
    8892:	b1 1c       	adc	r11, r1
    8894:	f2 01       	movw	r30, r4
    8896:	40 80       	ld	r4, Z
    8898:	51 80       	ldd	r5, Z+1	; 0x01
    889a:	26 ff       	sbrs	r18, 6
    889c:	03 c0       	rjmp	.+6      	; 0x88a4 <vfprintf+0x424>
    889e:	61 2f       	mov	r22, r17
    88a0:	70 e0       	ldi	r23, 0x00	; 0
    88a2:	02 c0       	rjmp	.+4      	; 0x88a8 <vfprintf+0x428>
    88a4:	6f ef       	ldi	r22, 0xFF	; 255
    88a6:	7f ef       	ldi	r23, 0xFF	; 255
    88a8:	c2 01       	movw	r24, r4
    88aa:	2a 8b       	std	Y+18, r18	; 0x12
    88ac:	f6 d3       	rcall	.+2028   	; 0x909a <strnlen>
    88ae:	8c 01       	movw	r16, r24
    88b0:	2a 89       	ldd	r18, Y+18	; 0x12
    88b2:	2f 77       	andi	r18, 0x7F	; 127
    88b4:	14 c0       	rjmp	.+40     	; 0x88de <vfprintf+0x45e>
    88b6:	52 01       	movw	r10, r4
    88b8:	f2 e0       	ldi	r31, 0x02	; 2
    88ba:	af 0e       	add	r10, r31
    88bc:	b1 1c       	adc	r11, r1
    88be:	f2 01       	movw	r30, r4
    88c0:	40 80       	ld	r4, Z
    88c2:	51 80       	ldd	r5, Z+1	; 0x01
    88c4:	26 ff       	sbrs	r18, 6
    88c6:	03 c0       	rjmp	.+6      	; 0x88ce <vfprintf+0x44e>
    88c8:	61 2f       	mov	r22, r17
    88ca:	70 e0       	ldi	r23, 0x00	; 0
    88cc:	02 c0       	rjmp	.+4      	; 0x88d2 <vfprintf+0x452>
    88ce:	6f ef       	ldi	r22, 0xFF	; 255
    88d0:	7f ef       	ldi	r23, 0xFF	; 255
    88d2:	c2 01       	movw	r24, r4
    88d4:	2a 8b       	std	Y+18, r18	; 0x12
    88d6:	d6 d3       	rcall	.+1964   	; 0x9084 <strnlen_P>
    88d8:	8c 01       	movw	r16, r24
    88da:	2a 89       	ldd	r18, Y+18	; 0x12
    88dc:	20 68       	ori	r18, 0x80	; 128
    88de:	32 2e       	mov	r3, r18
    88e0:	23 fd       	sbrc	r18, 3
    88e2:	18 c0       	rjmp	.+48     	; 0x8914 <vfprintf+0x494>
    88e4:	8f 2d       	mov	r24, r15
    88e6:	90 e0       	ldi	r25, 0x00	; 0
    88e8:	08 17       	cp	r16, r24
    88ea:	19 07       	cpc	r17, r25
    88ec:	98 f4       	brcc	.+38     	; 0x8914 <vfprintf+0x494>
    88ee:	b6 01       	movw	r22, r12
    88f0:	80 e2       	ldi	r24, 0x20	; 32
    88f2:	90 e0       	ldi	r25, 0x00	; 0
    88f4:	dd d3       	rcall	.+1978   	; 0x90b0 <fputc>
    88f6:	fa 94       	dec	r15
    88f8:	f5 cf       	rjmp	.-22     	; 0x88e4 <vfprintf+0x464>
    88fa:	f2 01       	movw	r30, r4
    88fc:	37 fc       	sbrc	r3, 7
    88fe:	85 91       	lpm	r24, Z+
    8900:	37 fe       	sbrs	r3, 7
    8902:	81 91       	ld	r24, Z+
    8904:	2f 01       	movw	r4, r30
    8906:	b6 01       	movw	r22, r12
    8908:	90 e0       	ldi	r25, 0x00	; 0
    890a:	d2 d3       	rcall	.+1956   	; 0x90b0 <fputc>
    890c:	f1 10       	cpse	r15, r1
    890e:	fa 94       	dec	r15
    8910:	01 50       	subi	r16, 0x01	; 1
    8912:	11 09       	sbc	r17, r1
    8914:	01 15       	cp	r16, r1
    8916:	11 05       	cpc	r17, r1
    8918:	81 f7       	brne	.-32     	; 0x88fa <vfprintf+0x47a>
    891a:	f1 c0       	rjmp	.+482    	; 0x8afe <vfprintf+0x67e>
    891c:	84 36       	cpi	r24, 0x64	; 100
    891e:	11 f0       	breq	.+4      	; 0x8924 <vfprintf+0x4a4>
    8920:	89 36       	cpi	r24, 0x69	; 105
    8922:	51 f5       	brne	.+84     	; 0x8978 <vfprintf+0x4f8>
    8924:	52 01       	movw	r10, r4
    8926:	27 ff       	sbrs	r18, 7
    8928:	09 c0       	rjmp	.+18     	; 0x893c <vfprintf+0x4bc>
    892a:	f4 e0       	ldi	r31, 0x04	; 4
    892c:	af 0e       	add	r10, r31
    892e:	b1 1c       	adc	r11, r1
    8930:	f2 01       	movw	r30, r4
    8932:	60 81       	ld	r22, Z
    8934:	71 81       	ldd	r23, Z+1	; 0x01
    8936:	82 81       	ldd	r24, Z+2	; 0x02
    8938:	93 81       	ldd	r25, Z+3	; 0x03
    893a:	0a c0       	rjmp	.+20     	; 0x8950 <vfprintf+0x4d0>
    893c:	f2 e0       	ldi	r31, 0x02	; 2
    893e:	af 0e       	add	r10, r31
    8940:	b1 1c       	adc	r11, r1
    8942:	f2 01       	movw	r30, r4
    8944:	60 81       	ld	r22, Z
    8946:	71 81       	ldd	r23, Z+1	; 0x01
    8948:	07 2e       	mov	r0, r23
    894a:	00 0c       	add	r0, r0
    894c:	88 0b       	sbc	r24, r24
    894e:	99 0b       	sbc	r25, r25
    8950:	2f 76       	andi	r18, 0x6F	; 111
    8952:	32 2e       	mov	r3, r18
    8954:	97 ff       	sbrs	r25, 7
    8956:	09 c0       	rjmp	.+18     	; 0x896a <vfprintf+0x4ea>
    8958:	90 95       	com	r25
    895a:	80 95       	com	r24
    895c:	70 95       	com	r23
    895e:	61 95       	neg	r22
    8960:	7f 4f       	sbci	r23, 0xFF	; 255
    8962:	8f 4f       	sbci	r24, 0xFF	; 255
    8964:	9f 4f       	sbci	r25, 0xFF	; 255
    8966:	20 68       	ori	r18, 0x80	; 128
    8968:	32 2e       	mov	r3, r18
    896a:	2a e0       	ldi	r18, 0x0A	; 10
    896c:	30 e0       	ldi	r19, 0x00	; 0
    896e:	a3 01       	movw	r20, r6
    8970:	06 d4       	rcall	.+2060   	; 0x917e <__ultoa_invert>
    8972:	e8 2e       	mov	r14, r24
    8974:	e6 18       	sub	r14, r6
    8976:	3e c0       	rjmp	.+124    	; 0x89f4 <vfprintf+0x574>
    8978:	02 2f       	mov	r16, r18
    897a:	85 37       	cpi	r24, 0x75	; 117
    897c:	21 f4       	brne	.+8      	; 0x8986 <vfprintf+0x506>
    897e:	0f 7e       	andi	r16, 0xEF	; 239
    8980:	2a e0       	ldi	r18, 0x0A	; 10
    8982:	30 e0       	ldi	r19, 0x00	; 0
    8984:	1d c0       	rjmp	.+58     	; 0x89c0 <vfprintf+0x540>
    8986:	09 7f       	andi	r16, 0xF9	; 249
    8988:	8f 36       	cpi	r24, 0x6F	; 111
    898a:	91 f0       	breq	.+36     	; 0x89b0 <vfprintf+0x530>
    898c:	18 f4       	brcc	.+6      	; 0x8994 <vfprintf+0x514>
    898e:	88 35       	cpi	r24, 0x58	; 88
    8990:	59 f0       	breq	.+22     	; 0x89a8 <vfprintf+0x528>
    8992:	be c0       	rjmp	.+380    	; 0x8b10 <vfprintf+0x690>
    8994:	80 37       	cpi	r24, 0x70	; 112
    8996:	19 f0       	breq	.+6      	; 0x899e <vfprintf+0x51e>
    8998:	88 37       	cpi	r24, 0x78	; 120
    899a:	11 f0       	breq	.+4      	; 0x89a0 <vfprintf+0x520>
    899c:	b9 c0       	rjmp	.+370    	; 0x8b10 <vfprintf+0x690>
    899e:	00 61       	ori	r16, 0x10	; 16
    89a0:	04 ff       	sbrs	r16, 4
    89a2:	09 c0       	rjmp	.+18     	; 0x89b6 <vfprintf+0x536>
    89a4:	04 60       	ori	r16, 0x04	; 4
    89a6:	07 c0       	rjmp	.+14     	; 0x89b6 <vfprintf+0x536>
    89a8:	24 ff       	sbrs	r18, 4
    89aa:	08 c0       	rjmp	.+16     	; 0x89bc <vfprintf+0x53c>
    89ac:	06 60       	ori	r16, 0x06	; 6
    89ae:	06 c0       	rjmp	.+12     	; 0x89bc <vfprintf+0x53c>
    89b0:	28 e0       	ldi	r18, 0x08	; 8
    89b2:	30 e0       	ldi	r19, 0x00	; 0
    89b4:	05 c0       	rjmp	.+10     	; 0x89c0 <vfprintf+0x540>
    89b6:	20 e1       	ldi	r18, 0x10	; 16
    89b8:	30 e0       	ldi	r19, 0x00	; 0
    89ba:	02 c0       	rjmp	.+4      	; 0x89c0 <vfprintf+0x540>
    89bc:	20 e1       	ldi	r18, 0x10	; 16
    89be:	32 e0       	ldi	r19, 0x02	; 2
    89c0:	52 01       	movw	r10, r4
    89c2:	07 ff       	sbrs	r16, 7
    89c4:	09 c0       	rjmp	.+18     	; 0x89d8 <vfprintf+0x558>
    89c6:	f4 e0       	ldi	r31, 0x04	; 4
    89c8:	af 0e       	add	r10, r31
    89ca:	b1 1c       	adc	r11, r1
    89cc:	f2 01       	movw	r30, r4
    89ce:	60 81       	ld	r22, Z
    89d0:	71 81       	ldd	r23, Z+1	; 0x01
    89d2:	82 81       	ldd	r24, Z+2	; 0x02
    89d4:	93 81       	ldd	r25, Z+3	; 0x03
    89d6:	08 c0       	rjmp	.+16     	; 0x89e8 <vfprintf+0x568>
    89d8:	f2 e0       	ldi	r31, 0x02	; 2
    89da:	af 0e       	add	r10, r31
    89dc:	b1 1c       	adc	r11, r1
    89de:	f2 01       	movw	r30, r4
    89e0:	60 81       	ld	r22, Z
    89e2:	71 81       	ldd	r23, Z+1	; 0x01
    89e4:	80 e0       	ldi	r24, 0x00	; 0
    89e6:	90 e0       	ldi	r25, 0x00	; 0
    89e8:	a3 01       	movw	r20, r6
    89ea:	c9 d3       	rcall	.+1938   	; 0x917e <__ultoa_invert>
    89ec:	e8 2e       	mov	r14, r24
    89ee:	e6 18       	sub	r14, r6
    89f0:	0f 77       	andi	r16, 0x7F	; 127
    89f2:	30 2e       	mov	r3, r16
    89f4:	36 fe       	sbrs	r3, 6
    89f6:	0b c0       	rjmp	.+22     	; 0x8a0e <vfprintf+0x58e>
    89f8:	33 2d       	mov	r19, r3
    89fa:	3e 7f       	andi	r19, 0xFE	; 254
    89fc:	e1 16       	cp	r14, r17
    89fe:	50 f4       	brcc	.+20     	; 0x8a14 <vfprintf+0x594>
    8a00:	34 fe       	sbrs	r3, 4
    8a02:	0a c0       	rjmp	.+20     	; 0x8a18 <vfprintf+0x598>
    8a04:	32 fc       	sbrc	r3, 2
    8a06:	08 c0       	rjmp	.+16     	; 0x8a18 <vfprintf+0x598>
    8a08:	33 2d       	mov	r19, r3
    8a0a:	3e 7e       	andi	r19, 0xEE	; 238
    8a0c:	05 c0       	rjmp	.+10     	; 0x8a18 <vfprintf+0x598>
    8a0e:	0e 2d       	mov	r16, r14
    8a10:	33 2d       	mov	r19, r3
    8a12:	03 c0       	rjmp	.+6      	; 0x8a1a <vfprintf+0x59a>
    8a14:	0e 2d       	mov	r16, r14
    8a16:	01 c0       	rjmp	.+2      	; 0x8a1a <vfprintf+0x59a>
    8a18:	01 2f       	mov	r16, r17
    8a1a:	34 ff       	sbrs	r19, 4
    8a1c:	0c c0       	rjmp	.+24     	; 0x8a36 <vfprintf+0x5b6>
    8a1e:	fe 01       	movw	r30, r28
    8a20:	ee 0d       	add	r30, r14
    8a22:	f1 1d       	adc	r31, r1
    8a24:	80 81       	ld	r24, Z
    8a26:	80 33       	cpi	r24, 0x30	; 48
    8a28:	11 f4       	brne	.+4      	; 0x8a2e <vfprintf+0x5ae>
    8a2a:	39 7e       	andi	r19, 0xE9	; 233
    8a2c:	08 c0       	rjmp	.+16     	; 0x8a3e <vfprintf+0x5be>
    8a2e:	32 ff       	sbrs	r19, 2
    8a30:	05 c0       	rjmp	.+10     	; 0x8a3c <vfprintf+0x5bc>
    8a32:	0e 5f       	subi	r16, 0xFE	; 254
    8a34:	04 c0       	rjmp	.+8      	; 0x8a3e <vfprintf+0x5be>
    8a36:	83 2f       	mov	r24, r19
    8a38:	86 78       	andi	r24, 0x86	; 134
    8a3a:	09 f0       	breq	.+2      	; 0x8a3e <vfprintf+0x5be>
    8a3c:	0f 5f       	subi	r16, 0xFF	; 255
    8a3e:	33 fd       	sbrc	r19, 3
    8a40:	12 c0       	rjmp	.+36     	; 0x8a66 <vfprintf+0x5e6>
    8a42:	30 ff       	sbrs	r19, 0
    8a44:	06 c0       	rjmp	.+12     	; 0x8a52 <vfprintf+0x5d2>
    8a46:	1e 2d       	mov	r17, r14
    8a48:	0f 15       	cp	r16, r15
    8a4a:	18 f4       	brcc	.+6      	; 0x8a52 <vfprintf+0x5d2>
    8a4c:	1f 0d       	add	r17, r15
    8a4e:	10 1b       	sub	r17, r16
    8a50:	0f 2d       	mov	r16, r15
    8a52:	0f 15       	cp	r16, r15
    8a54:	60 f4       	brcc	.+24     	; 0x8a6e <vfprintf+0x5ee>
    8a56:	b6 01       	movw	r22, r12
    8a58:	80 e2       	ldi	r24, 0x20	; 32
    8a5a:	90 e0       	ldi	r25, 0x00	; 0
    8a5c:	3b 8b       	std	Y+19, r19	; 0x13
    8a5e:	28 d3       	rcall	.+1616   	; 0x90b0 <fputc>
    8a60:	0f 5f       	subi	r16, 0xFF	; 255
    8a62:	3b 89       	ldd	r19, Y+19	; 0x13
    8a64:	f6 cf       	rjmp	.-20     	; 0x8a52 <vfprintf+0x5d2>
    8a66:	0f 15       	cp	r16, r15
    8a68:	10 f4       	brcc	.+4      	; 0x8a6e <vfprintf+0x5ee>
    8a6a:	f0 1a       	sub	r15, r16
    8a6c:	01 c0       	rjmp	.+2      	; 0x8a70 <vfprintf+0x5f0>
    8a6e:	f1 2c       	mov	r15, r1
    8a70:	34 ff       	sbrs	r19, 4
    8a72:	11 c0       	rjmp	.+34     	; 0x8a96 <vfprintf+0x616>
    8a74:	b6 01       	movw	r22, r12
    8a76:	80 e3       	ldi	r24, 0x30	; 48
    8a78:	90 e0       	ldi	r25, 0x00	; 0
    8a7a:	3b 8b       	std	Y+19, r19	; 0x13
    8a7c:	19 d3       	rcall	.+1586   	; 0x90b0 <fputc>
    8a7e:	3b 89       	ldd	r19, Y+19	; 0x13
    8a80:	32 ff       	sbrs	r19, 2
    8a82:	16 c0       	rjmp	.+44     	; 0x8ab0 <vfprintf+0x630>
    8a84:	31 fd       	sbrc	r19, 1
    8a86:	03 c0       	rjmp	.+6      	; 0x8a8e <vfprintf+0x60e>
    8a88:	88 e7       	ldi	r24, 0x78	; 120
    8a8a:	90 e0       	ldi	r25, 0x00	; 0
    8a8c:	02 c0       	rjmp	.+4      	; 0x8a92 <vfprintf+0x612>
    8a8e:	88 e5       	ldi	r24, 0x58	; 88
    8a90:	90 e0       	ldi	r25, 0x00	; 0
    8a92:	b6 01       	movw	r22, r12
    8a94:	0c c0       	rjmp	.+24     	; 0x8aae <vfprintf+0x62e>
    8a96:	83 2f       	mov	r24, r19
    8a98:	86 78       	andi	r24, 0x86	; 134
    8a9a:	51 f0       	breq	.+20     	; 0x8ab0 <vfprintf+0x630>
    8a9c:	31 ff       	sbrs	r19, 1
    8a9e:	02 c0       	rjmp	.+4      	; 0x8aa4 <vfprintf+0x624>
    8aa0:	8b e2       	ldi	r24, 0x2B	; 43
    8aa2:	01 c0       	rjmp	.+2      	; 0x8aa6 <vfprintf+0x626>
    8aa4:	80 e2       	ldi	r24, 0x20	; 32
    8aa6:	37 fd       	sbrc	r19, 7
    8aa8:	8d e2       	ldi	r24, 0x2D	; 45
    8aaa:	b6 01       	movw	r22, r12
    8aac:	90 e0       	ldi	r25, 0x00	; 0
    8aae:	00 d3       	rcall	.+1536   	; 0x90b0 <fputc>
    8ab0:	e1 16       	cp	r14, r17
    8ab2:	30 f4       	brcc	.+12     	; 0x8ac0 <vfprintf+0x640>
    8ab4:	b6 01       	movw	r22, r12
    8ab6:	80 e3       	ldi	r24, 0x30	; 48
    8ab8:	90 e0       	ldi	r25, 0x00	; 0
    8aba:	fa d2       	rcall	.+1524   	; 0x90b0 <fputc>
    8abc:	11 50       	subi	r17, 0x01	; 1
    8abe:	f8 cf       	rjmp	.-16     	; 0x8ab0 <vfprintf+0x630>
    8ac0:	ea 94       	dec	r14
    8ac2:	f3 01       	movw	r30, r6
    8ac4:	ee 0d       	add	r30, r14
    8ac6:	f1 1d       	adc	r31, r1
    8ac8:	80 81       	ld	r24, Z
    8aca:	b6 01       	movw	r22, r12
    8acc:	90 e0       	ldi	r25, 0x00	; 0
    8ace:	f0 d2       	rcall	.+1504   	; 0x90b0 <fputc>
    8ad0:	e1 10       	cpse	r14, r1
    8ad2:	f6 cf       	rjmp	.-20     	; 0x8ac0 <vfprintf+0x640>
    8ad4:	14 c0       	rjmp	.+40     	; 0x8afe <vfprintf+0x67e>
    8ad6:	f4 e0       	ldi	r31, 0x04	; 4
    8ad8:	ff 15       	cp	r31, r15
    8ada:	48 f5       	brcc	.+82     	; 0x8b2e <vfprintf+0x6ae>
    8adc:	84 e0       	ldi	r24, 0x04	; 4
    8ade:	f8 1a       	sub	r15, r24
    8ae0:	33 fe       	sbrs	r3, 3
    8ae2:	1d c0       	rjmp	.+58     	; 0x8b1e <vfprintf+0x69e>
    8ae4:	21 10       	cpse	r2, r1
    8ae6:	24 c0       	rjmp	.+72     	; 0x8b30 <vfprintf+0x6b0>
    8ae8:	03 ff       	sbrs	r16, 3
    8aea:	27 c0       	rjmp	.+78     	; 0x8b3a <vfprintf+0x6ba>
    8aec:	0c ea       	ldi	r16, 0xAC	; 172
    8aee:	15 e0       	ldi	r17, 0x05	; 5
    8af0:	f3 2d       	mov	r31, r3
    8af2:	f0 71       	andi	r31, 0x10	; 16
    8af4:	3f 2e       	mov	r3, r31
    8af6:	f8 01       	movw	r30, r16
    8af8:	84 91       	lpm	r24, Z
    8afa:	81 11       	cpse	r24, r1
    8afc:	21 c0       	rjmp	.+66     	; 0x8b40 <vfprintf+0x6c0>
    8afe:	ff 20       	and	r15, r15
    8b00:	09 f4       	brne	.+2      	; 0x8b04 <vfprintf+0x684>
    8b02:	fd cc       	rjmp	.-1542   	; 0x84fe <vfprintf+0x7e>
    8b04:	b6 01       	movw	r22, r12
    8b06:	80 e2       	ldi	r24, 0x20	; 32
    8b08:	90 e0       	ldi	r25, 0x00	; 0
    8b0a:	d2 d2       	rcall	.+1444   	; 0x90b0 <fputc>
    8b0c:	fa 94       	dec	r15
    8b0e:	f7 cf       	rjmp	.-18     	; 0x8afe <vfprintf+0x67e>
    8b10:	f6 01       	movw	r30, r12
    8b12:	86 81       	ldd	r24, Z+6	; 0x06
    8b14:	97 81       	ldd	r25, Z+7	; 0x07
    8b16:	23 c0       	rjmp	.+70     	; 0x8b5e <vfprintf+0x6de>
    8b18:	8f ef       	ldi	r24, 0xFF	; 255
    8b1a:	9f ef       	ldi	r25, 0xFF	; 255
    8b1c:	20 c0       	rjmp	.+64     	; 0x8b5e <vfprintf+0x6de>
    8b1e:	b6 01       	movw	r22, r12
    8b20:	80 e2       	ldi	r24, 0x20	; 32
    8b22:	90 e0       	ldi	r25, 0x00	; 0
    8b24:	c5 d2       	rcall	.+1418   	; 0x90b0 <fputc>
    8b26:	fa 94       	dec	r15
    8b28:	f1 10       	cpse	r15, r1
    8b2a:	f9 cf       	rjmp	.-14     	; 0x8b1e <vfprintf+0x69e>
    8b2c:	db cf       	rjmp	.-74     	; 0x8ae4 <vfprintf+0x664>
    8b2e:	f1 2c       	mov	r15, r1
    8b30:	b6 01       	movw	r22, r12
    8b32:	82 2d       	mov	r24, r2
    8b34:	90 e0       	ldi	r25, 0x00	; 0
    8b36:	bc d2       	rcall	.+1400   	; 0x90b0 <fputc>
    8b38:	d7 cf       	rjmp	.-82     	; 0x8ae8 <vfprintf+0x668>
    8b3a:	00 eb       	ldi	r16, 0xB0	; 176
    8b3c:	15 e0       	ldi	r17, 0x05	; 5
    8b3e:	d8 cf       	rjmp	.-80     	; 0x8af0 <vfprintf+0x670>
    8b40:	31 10       	cpse	r3, r1
    8b42:	80 52       	subi	r24, 0x20	; 32
    8b44:	b6 01       	movw	r22, r12
    8b46:	90 e0       	ldi	r25, 0x00	; 0
    8b48:	b3 d2       	rcall	.+1382   	; 0x90b0 <fputc>
    8b4a:	0f 5f       	subi	r16, 0xFF	; 255
    8b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    8b4e:	d3 cf       	rjmp	.-90     	; 0x8af6 <vfprintf+0x676>
    8b50:	23 e0       	ldi	r18, 0x03	; 3
    8b52:	2f 15       	cp	r18, r15
    8b54:	10 f4       	brcc	.+4      	; 0x8b5a <vfprintf+0x6da>
    8b56:	83 e0       	ldi	r24, 0x03	; 3
    8b58:	c2 cf       	rjmp	.-124    	; 0x8ade <vfprintf+0x65e>
    8b5a:	f1 2c       	mov	r15, r1
    8b5c:	c5 cf       	rjmp	.-118    	; 0x8ae8 <vfprintf+0x668>
    8b5e:	63 96       	adiw	r28, 0x13	; 19
    8b60:	0f b6       	in	r0, 0x3f	; 63
    8b62:	f8 94       	cli
    8b64:	de bf       	out	0x3e, r29	; 62
    8b66:	0f be       	out	0x3f, r0	; 63
    8b68:	cd bf       	out	0x3d, r28	; 61
    8b6a:	df 91       	pop	r29
    8b6c:	cf 91       	pop	r28
    8b6e:	1f 91       	pop	r17
    8b70:	0f 91       	pop	r16
    8b72:	ff 90       	pop	r15
    8b74:	ef 90       	pop	r14
    8b76:	df 90       	pop	r13
    8b78:	cf 90       	pop	r12
    8b7a:	bf 90       	pop	r11
    8b7c:	af 90       	pop	r10
    8b7e:	9f 90       	pop	r9
    8b80:	8f 90       	pop	r8
    8b82:	7f 90       	pop	r7
    8b84:	6f 90       	pop	r6
    8b86:	5f 90       	pop	r5
    8b88:	4f 90       	pop	r4
    8b8a:	3f 90       	pop	r3
    8b8c:	2f 90       	pop	r2
    8b8e:	08 95       	ret

00008b90 <__mulsi3>:
    8b90:	db 01       	movw	r26, r22
    8b92:	8f 93       	push	r24
    8b94:	9f 93       	push	r25
    8b96:	61 d0       	rcall	.+194    	; 0x8c5a <__muluhisi3>
    8b98:	bf 91       	pop	r27
    8b9a:	af 91       	pop	r26
    8b9c:	a2 9f       	mul	r26, r18
    8b9e:	80 0d       	add	r24, r0
    8ba0:	91 1d       	adc	r25, r1
    8ba2:	a3 9f       	mul	r26, r19
    8ba4:	90 0d       	add	r25, r0
    8ba6:	b2 9f       	mul	r27, r18
    8ba8:	90 0d       	add	r25, r0
    8baa:	11 24       	eor	r1, r1
    8bac:	08 95       	ret

00008bae <__udivmodsi4>:
    8bae:	a1 e2       	ldi	r26, 0x21	; 33
    8bb0:	1a 2e       	mov	r1, r26
    8bb2:	aa 1b       	sub	r26, r26
    8bb4:	bb 1b       	sub	r27, r27
    8bb6:	fd 01       	movw	r30, r26
    8bb8:	0d c0       	rjmp	.+26     	; 0x8bd4 <__udivmodsi4_ep>

00008bba <__udivmodsi4_loop>:
    8bba:	aa 1f       	adc	r26, r26
    8bbc:	bb 1f       	adc	r27, r27
    8bbe:	ee 1f       	adc	r30, r30
    8bc0:	ff 1f       	adc	r31, r31
    8bc2:	a2 17       	cp	r26, r18
    8bc4:	b3 07       	cpc	r27, r19
    8bc6:	e4 07       	cpc	r30, r20
    8bc8:	f5 07       	cpc	r31, r21
    8bca:	20 f0       	brcs	.+8      	; 0x8bd4 <__udivmodsi4_ep>
    8bcc:	a2 1b       	sub	r26, r18
    8bce:	b3 0b       	sbc	r27, r19
    8bd0:	e4 0b       	sbc	r30, r20
    8bd2:	f5 0b       	sbc	r31, r21

00008bd4 <__udivmodsi4_ep>:
    8bd4:	66 1f       	adc	r22, r22
    8bd6:	77 1f       	adc	r23, r23
    8bd8:	88 1f       	adc	r24, r24
    8bda:	99 1f       	adc	r25, r25
    8bdc:	1a 94       	dec	r1
    8bde:	69 f7       	brne	.-38     	; 0x8bba <__udivmodsi4_loop>
    8be0:	60 95       	com	r22
    8be2:	70 95       	com	r23
    8be4:	80 95       	com	r24
    8be6:	90 95       	com	r25
    8be8:	9b 01       	movw	r18, r22
    8bea:	ac 01       	movw	r20, r24
    8bec:	bd 01       	movw	r22, r26
    8bee:	cf 01       	movw	r24, r30
    8bf0:	08 95       	ret

00008bf2 <__divmodsi4>:
    8bf2:	05 2e       	mov	r0, r21
    8bf4:	97 fb       	bst	r25, 7
    8bf6:	16 f4       	brtc	.+4      	; 0x8bfc <__divmodsi4+0xa>
    8bf8:	00 94       	com	r0
    8bfa:	0f d0       	rcall	.+30     	; 0x8c1a <__negsi2>
    8bfc:	57 fd       	sbrc	r21, 7
    8bfe:	05 d0       	rcall	.+10     	; 0x8c0a <__divmodsi4_neg2>
    8c00:	d6 df       	rcall	.-84     	; 0x8bae <__udivmodsi4>
    8c02:	07 fc       	sbrc	r0, 7
    8c04:	02 d0       	rcall	.+4      	; 0x8c0a <__divmodsi4_neg2>
    8c06:	46 f4       	brtc	.+16     	; 0x8c18 <__divmodsi4_exit>
    8c08:	08 c0       	rjmp	.+16     	; 0x8c1a <__negsi2>

00008c0a <__divmodsi4_neg2>:
    8c0a:	50 95       	com	r21
    8c0c:	40 95       	com	r20
    8c0e:	30 95       	com	r19
    8c10:	21 95       	neg	r18
    8c12:	3f 4f       	sbci	r19, 0xFF	; 255
    8c14:	4f 4f       	sbci	r20, 0xFF	; 255
    8c16:	5f 4f       	sbci	r21, 0xFF	; 255

00008c18 <__divmodsi4_exit>:
    8c18:	08 95       	ret

00008c1a <__negsi2>:
    8c1a:	90 95       	com	r25
    8c1c:	80 95       	com	r24
    8c1e:	70 95       	com	r23
    8c20:	61 95       	neg	r22
    8c22:	7f 4f       	sbci	r23, 0xFF	; 255
    8c24:	8f 4f       	sbci	r24, 0xFF	; 255
    8c26:	9f 4f       	sbci	r25, 0xFF	; 255
    8c28:	08 95       	ret

00008c2a <__tablejump2__>:
    8c2a:	ee 0f       	add	r30, r30
    8c2c:	ff 1f       	adc	r31, r31
    8c2e:	00 24       	eor	r0, r0
    8c30:	00 1c       	adc	r0, r0
    8c32:	0b be       	out	0x3b, r0	; 59
    8c34:	07 90       	elpm	r0, Z+
    8c36:	f6 91       	elpm	r31, Z
    8c38:	e0 2d       	mov	r30, r0
    8c3a:	09 94       	ijmp

00008c3c <__umulhisi3>:
    8c3c:	a2 9f       	mul	r26, r18
    8c3e:	b0 01       	movw	r22, r0
    8c40:	b3 9f       	mul	r27, r19
    8c42:	c0 01       	movw	r24, r0
    8c44:	a3 9f       	mul	r26, r19
    8c46:	70 0d       	add	r23, r0
    8c48:	81 1d       	adc	r24, r1
    8c4a:	11 24       	eor	r1, r1
    8c4c:	91 1d       	adc	r25, r1
    8c4e:	b2 9f       	mul	r27, r18
    8c50:	70 0d       	add	r23, r0
    8c52:	81 1d       	adc	r24, r1
    8c54:	11 24       	eor	r1, r1
    8c56:	91 1d       	adc	r25, r1
    8c58:	08 95       	ret

00008c5a <__muluhisi3>:
    8c5a:	f0 df       	rcall	.-32     	; 0x8c3c <__umulhisi3>
    8c5c:	a5 9f       	mul	r26, r21
    8c5e:	90 0d       	add	r25, r0
    8c60:	b4 9f       	mul	r27, r20
    8c62:	90 0d       	add	r25, r0
    8c64:	a4 9f       	mul	r26, r20
    8c66:	80 0d       	add	r24, r0
    8c68:	91 1d       	adc	r25, r1
    8c6a:	11 24       	eor	r1, r1
    8c6c:	08 95       	ret

00008c6e <__mulshisi3>:
    8c6e:	b7 ff       	sbrs	r27, 7
    8c70:	f4 cf       	rjmp	.-24     	; 0x8c5a <__muluhisi3>

00008c72 <__mulohisi3>:
    8c72:	f3 df       	rcall	.-26     	; 0x8c5a <__muluhisi3>
    8c74:	82 1b       	sub	r24, r18
    8c76:	93 0b       	sbc	r25, r19
    8c78:	08 95       	ret

00008c7a <malloc>:
    8c7a:	cf 93       	push	r28
    8c7c:	df 93       	push	r29
    8c7e:	82 30       	cpi	r24, 0x02	; 2
    8c80:	91 05       	cpc	r25, r1
    8c82:	10 f4       	brcc	.+4      	; 0x8c88 <malloc+0xe>
    8c84:	82 e0       	ldi	r24, 0x02	; 2
    8c86:	90 e0       	ldi	r25, 0x00	; 0
    8c88:	e0 91 33 0e 	lds	r30, 0x0E33
    8c8c:	f0 91 34 0e 	lds	r31, 0x0E34
    8c90:	20 e0       	ldi	r18, 0x00	; 0
    8c92:	30 e0       	ldi	r19, 0x00	; 0
    8c94:	c0 e0       	ldi	r28, 0x00	; 0
    8c96:	d0 e0       	ldi	r29, 0x00	; 0
    8c98:	30 97       	sbiw	r30, 0x00	; 0
    8c9a:	11 f1       	breq	.+68     	; 0x8ce0 <malloc+0x66>
    8c9c:	40 81       	ld	r20, Z
    8c9e:	51 81       	ldd	r21, Z+1	; 0x01
    8ca0:	48 17       	cp	r20, r24
    8ca2:	59 07       	cpc	r21, r25
    8ca4:	c0 f0       	brcs	.+48     	; 0x8cd6 <malloc+0x5c>
    8ca6:	48 17       	cp	r20, r24
    8ca8:	59 07       	cpc	r21, r25
    8caa:	61 f4       	brne	.+24     	; 0x8cc4 <malloc+0x4a>
    8cac:	82 81       	ldd	r24, Z+2	; 0x02
    8cae:	93 81       	ldd	r25, Z+3	; 0x03
    8cb0:	20 97       	sbiw	r28, 0x00	; 0
    8cb2:	19 f0       	breq	.+6      	; 0x8cba <malloc+0x40>
    8cb4:	9b 83       	std	Y+3, r25	; 0x03
    8cb6:	8a 83       	std	Y+2, r24	; 0x02
    8cb8:	2b c0       	rjmp	.+86     	; 0x8d10 <malloc+0x96>
    8cba:	90 93 34 0e 	sts	0x0E34, r25
    8cbe:	80 93 33 0e 	sts	0x0E33, r24
    8cc2:	26 c0       	rjmp	.+76     	; 0x8d10 <malloc+0x96>
    8cc4:	21 15       	cp	r18, r1
    8cc6:	31 05       	cpc	r19, r1
    8cc8:	19 f0       	breq	.+6      	; 0x8cd0 <malloc+0x56>
    8cca:	42 17       	cp	r20, r18
    8ccc:	53 07       	cpc	r21, r19
    8cce:	18 f4       	brcc	.+6      	; 0x8cd6 <malloc+0x5c>
    8cd0:	9a 01       	movw	r18, r20
    8cd2:	be 01       	movw	r22, r28
    8cd4:	df 01       	movw	r26, r30
    8cd6:	ef 01       	movw	r28, r30
    8cd8:	02 80       	ldd	r0, Z+2	; 0x02
    8cda:	f3 81       	ldd	r31, Z+3	; 0x03
    8cdc:	e0 2d       	mov	r30, r0
    8cde:	dc cf       	rjmp	.-72     	; 0x8c98 <malloc+0x1e>
    8ce0:	21 15       	cp	r18, r1
    8ce2:	31 05       	cpc	r19, r1
    8ce4:	09 f1       	breq	.+66     	; 0x8d28 <malloc+0xae>
    8ce6:	28 1b       	sub	r18, r24
    8ce8:	39 0b       	sbc	r19, r25
    8cea:	24 30       	cpi	r18, 0x04	; 4
    8cec:	31 05       	cpc	r19, r1
    8cee:	90 f4       	brcc	.+36     	; 0x8d14 <malloc+0x9a>
    8cf0:	12 96       	adiw	r26, 0x02	; 2
    8cf2:	8d 91       	ld	r24, X+
    8cf4:	9c 91       	ld	r25, X
    8cf6:	13 97       	sbiw	r26, 0x03	; 3
    8cf8:	61 15       	cp	r22, r1
    8cfa:	71 05       	cpc	r23, r1
    8cfc:	21 f0       	breq	.+8      	; 0x8d06 <malloc+0x8c>
    8cfe:	fb 01       	movw	r30, r22
    8d00:	93 83       	std	Z+3, r25	; 0x03
    8d02:	82 83       	std	Z+2, r24	; 0x02
    8d04:	04 c0       	rjmp	.+8      	; 0x8d0e <malloc+0x94>
    8d06:	90 93 34 0e 	sts	0x0E34, r25
    8d0a:	80 93 33 0e 	sts	0x0E33, r24
    8d0e:	fd 01       	movw	r30, r26
    8d10:	32 96       	adiw	r30, 0x02	; 2
    8d12:	44 c0       	rjmp	.+136    	; 0x8d9c <malloc+0x122>
    8d14:	fd 01       	movw	r30, r26
    8d16:	e2 0f       	add	r30, r18
    8d18:	f3 1f       	adc	r31, r19
    8d1a:	81 93       	st	Z+, r24
    8d1c:	91 93       	st	Z+, r25
    8d1e:	22 50       	subi	r18, 0x02	; 2
    8d20:	31 09       	sbc	r19, r1
    8d22:	2d 93       	st	X+, r18
    8d24:	3c 93       	st	X, r19
    8d26:	3a c0       	rjmp	.+116    	; 0x8d9c <malloc+0x122>
    8d28:	20 91 31 0e 	lds	r18, 0x0E31
    8d2c:	30 91 32 0e 	lds	r19, 0x0E32
    8d30:	23 2b       	or	r18, r19
    8d32:	41 f4       	brne	.+16     	; 0x8d44 <malloc+0xca>
    8d34:	20 91 02 01 	lds	r18, 0x0102
    8d38:	30 91 03 01 	lds	r19, 0x0103
    8d3c:	30 93 32 0e 	sts	0x0E32, r19
    8d40:	20 93 31 0e 	sts	0x0E31, r18
    8d44:	20 91 00 01 	lds	r18, 0x0100
    8d48:	30 91 01 01 	lds	r19, 0x0101
    8d4c:	21 15       	cp	r18, r1
    8d4e:	31 05       	cpc	r19, r1
    8d50:	41 f4       	brne	.+16     	; 0x8d62 <malloc+0xe8>
    8d52:	2d b7       	in	r18, 0x3d	; 61
    8d54:	3e b7       	in	r19, 0x3e	; 62
    8d56:	40 91 04 01 	lds	r20, 0x0104
    8d5a:	50 91 05 01 	lds	r21, 0x0105
    8d5e:	24 1b       	sub	r18, r20
    8d60:	35 0b       	sbc	r19, r21
    8d62:	e0 91 31 0e 	lds	r30, 0x0E31
    8d66:	f0 91 32 0e 	lds	r31, 0x0E32
    8d6a:	e2 17       	cp	r30, r18
    8d6c:	f3 07       	cpc	r31, r19
    8d6e:	a0 f4       	brcc	.+40     	; 0x8d98 <malloc+0x11e>
    8d70:	2e 1b       	sub	r18, r30
    8d72:	3f 0b       	sbc	r19, r31
    8d74:	28 17       	cp	r18, r24
    8d76:	39 07       	cpc	r19, r25
    8d78:	78 f0       	brcs	.+30     	; 0x8d98 <malloc+0x11e>
    8d7a:	ac 01       	movw	r20, r24
    8d7c:	4e 5f       	subi	r20, 0xFE	; 254
    8d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d80:	24 17       	cp	r18, r20
    8d82:	35 07       	cpc	r19, r21
    8d84:	48 f0       	brcs	.+18     	; 0x8d98 <malloc+0x11e>
    8d86:	4e 0f       	add	r20, r30
    8d88:	5f 1f       	adc	r21, r31
    8d8a:	50 93 32 0e 	sts	0x0E32, r21
    8d8e:	40 93 31 0e 	sts	0x0E31, r20
    8d92:	81 93       	st	Z+, r24
    8d94:	91 93       	st	Z+, r25
    8d96:	02 c0       	rjmp	.+4      	; 0x8d9c <malloc+0x122>
    8d98:	e0 e0       	ldi	r30, 0x00	; 0
    8d9a:	f0 e0       	ldi	r31, 0x00	; 0
    8d9c:	cf 01       	movw	r24, r30
    8d9e:	df 91       	pop	r29
    8da0:	cf 91       	pop	r28
    8da2:	08 95       	ret

00008da4 <free>:
    8da4:	0f 93       	push	r16
    8da6:	1f 93       	push	r17
    8da8:	cf 93       	push	r28
    8daa:	df 93       	push	r29
    8dac:	00 97       	sbiw	r24, 0x00	; 0
    8dae:	09 f4       	brne	.+2      	; 0x8db2 <free+0xe>
    8db0:	8c c0       	rjmp	.+280    	; 0x8eca <free+0x126>
    8db2:	fc 01       	movw	r30, r24
    8db4:	32 97       	sbiw	r30, 0x02	; 2
    8db6:	13 82       	std	Z+3, r1	; 0x03
    8db8:	12 82       	std	Z+2, r1	; 0x02
    8dba:	00 91 33 0e 	lds	r16, 0x0E33
    8dbe:	10 91 34 0e 	lds	r17, 0x0E34
    8dc2:	01 15       	cp	r16, r1
    8dc4:	11 05       	cpc	r17, r1
    8dc6:	81 f4       	brne	.+32     	; 0x8de8 <free+0x44>
    8dc8:	20 81       	ld	r18, Z
    8dca:	31 81       	ldd	r19, Z+1	; 0x01
    8dcc:	82 0f       	add	r24, r18
    8dce:	93 1f       	adc	r25, r19
    8dd0:	20 91 31 0e 	lds	r18, 0x0E31
    8dd4:	30 91 32 0e 	lds	r19, 0x0E32
    8dd8:	28 17       	cp	r18, r24
    8dda:	39 07       	cpc	r19, r25
    8ddc:	79 f5       	brne	.+94     	; 0x8e3c <free+0x98>
    8dde:	f0 93 32 0e 	sts	0x0E32, r31
    8de2:	e0 93 31 0e 	sts	0x0E31, r30
    8de6:	71 c0       	rjmp	.+226    	; 0x8eca <free+0x126>
    8de8:	d8 01       	movw	r26, r16
    8dea:	40 e0       	ldi	r20, 0x00	; 0
    8dec:	50 e0       	ldi	r21, 0x00	; 0
    8dee:	ae 17       	cp	r26, r30
    8df0:	bf 07       	cpc	r27, r31
    8df2:	50 f4       	brcc	.+20     	; 0x8e08 <free+0x64>
    8df4:	12 96       	adiw	r26, 0x02	; 2
    8df6:	2d 91       	ld	r18, X+
    8df8:	3c 91       	ld	r19, X
    8dfa:	13 97       	sbiw	r26, 0x03	; 3
    8dfc:	ad 01       	movw	r20, r26
    8dfe:	21 15       	cp	r18, r1
    8e00:	31 05       	cpc	r19, r1
    8e02:	09 f1       	breq	.+66     	; 0x8e46 <free+0xa2>
    8e04:	d9 01       	movw	r26, r18
    8e06:	f3 cf       	rjmp	.-26     	; 0x8dee <free+0x4a>
    8e08:	9d 01       	movw	r18, r26
    8e0a:	da 01       	movw	r26, r20
    8e0c:	33 83       	std	Z+3, r19	; 0x03
    8e0e:	22 83       	std	Z+2, r18	; 0x02
    8e10:	60 81       	ld	r22, Z
    8e12:	71 81       	ldd	r23, Z+1	; 0x01
    8e14:	86 0f       	add	r24, r22
    8e16:	97 1f       	adc	r25, r23
    8e18:	82 17       	cp	r24, r18
    8e1a:	93 07       	cpc	r25, r19
    8e1c:	69 f4       	brne	.+26     	; 0x8e38 <free+0x94>
    8e1e:	ec 01       	movw	r28, r24
    8e20:	28 81       	ld	r18, Y
    8e22:	39 81       	ldd	r19, Y+1	; 0x01
    8e24:	26 0f       	add	r18, r22
    8e26:	37 1f       	adc	r19, r23
    8e28:	2e 5f       	subi	r18, 0xFE	; 254
    8e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e2c:	31 83       	std	Z+1, r19	; 0x01
    8e2e:	20 83       	st	Z, r18
    8e30:	8a 81       	ldd	r24, Y+2	; 0x02
    8e32:	9b 81       	ldd	r25, Y+3	; 0x03
    8e34:	93 83       	std	Z+3, r25	; 0x03
    8e36:	82 83       	std	Z+2, r24	; 0x02
    8e38:	45 2b       	or	r20, r21
    8e3a:	29 f4       	brne	.+10     	; 0x8e46 <free+0xa2>
    8e3c:	f0 93 34 0e 	sts	0x0E34, r31
    8e40:	e0 93 33 0e 	sts	0x0E33, r30
    8e44:	42 c0       	rjmp	.+132    	; 0x8eca <free+0x126>
    8e46:	13 96       	adiw	r26, 0x03	; 3
    8e48:	fc 93       	st	X, r31
    8e4a:	ee 93       	st	-X, r30
    8e4c:	12 97       	sbiw	r26, 0x02	; 2
    8e4e:	ed 01       	movw	r28, r26
    8e50:	49 91       	ld	r20, Y+
    8e52:	59 91       	ld	r21, Y+
    8e54:	9e 01       	movw	r18, r28
    8e56:	24 0f       	add	r18, r20
    8e58:	35 1f       	adc	r19, r21
    8e5a:	e2 17       	cp	r30, r18
    8e5c:	f3 07       	cpc	r31, r19
    8e5e:	71 f4       	brne	.+28     	; 0x8e7c <free+0xd8>
    8e60:	80 81       	ld	r24, Z
    8e62:	91 81       	ldd	r25, Z+1	; 0x01
    8e64:	84 0f       	add	r24, r20
    8e66:	95 1f       	adc	r25, r21
    8e68:	02 96       	adiw	r24, 0x02	; 2
    8e6a:	11 96       	adiw	r26, 0x01	; 1
    8e6c:	9c 93       	st	X, r25
    8e6e:	8e 93       	st	-X, r24
    8e70:	82 81       	ldd	r24, Z+2	; 0x02
    8e72:	93 81       	ldd	r25, Z+3	; 0x03
    8e74:	13 96       	adiw	r26, 0x03	; 3
    8e76:	9c 93       	st	X, r25
    8e78:	8e 93       	st	-X, r24
    8e7a:	12 97       	sbiw	r26, 0x02	; 2
    8e7c:	e0 e0       	ldi	r30, 0x00	; 0
    8e7e:	f0 e0       	ldi	r31, 0x00	; 0
    8e80:	d8 01       	movw	r26, r16
    8e82:	12 96       	adiw	r26, 0x02	; 2
    8e84:	8d 91       	ld	r24, X+
    8e86:	9c 91       	ld	r25, X
    8e88:	13 97       	sbiw	r26, 0x03	; 3
    8e8a:	00 97       	sbiw	r24, 0x00	; 0
    8e8c:	19 f0       	breq	.+6      	; 0x8e94 <free+0xf0>
    8e8e:	f8 01       	movw	r30, r16
    8e90:	8c 01       	movw	r16, r24
    8e92:	f6 cf       	rjmp	.-20     	; 0x8e80 <free+0xdc>
    8e94:	8d 91       	ld	r24, X+
    8e96:	9c 91       	ld	r25, X
    8e98:	98 01       	movw	r18, r16
    8e9a:	2e 5f       	subi	r18, 0xFE	; 254
    8e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    8e9e:	82 0f       	add	r24, r18
    8ea0:	93 1f       	adc	r25, r19
    8ea2:	20 91 31 0e 	lds	r18, 0x0E31
    8ea6:	30 91 32 0e 	lds	r19, 0x0E32
    8eaa:	28 17       	cp	r18, r24
    8eac:	39 07       	cpc	r19, r25
    8eae:	69 f4       	brne	.+26     	; 0x8eca <free+0x126>
    8eb0:	30 97       	sbiw	r30, 0x00	; 0
    8eb2:	29 f4       	brne	.+10     	; 0x8ebe <free+0x11a>
    8eb4:	10 92 34 0e 	sts	0x0E34, r1
    8eb8:	10 92 33 0e 	sts	0x0E33, r1
    8ebc:	02 c0       	rjmp	.+4      	; 0x8ec2 <free+0x11e>
    8ebe:	13 82       	std	Z+3, r1	; 0x03
    8ec0:	12 82       	std	Z+2, r1	; 0x02
    8ec2:	10 93 32 0e 	sts	0x0E32, r17
    8ec6:	00 93 31 0e 	sts	0x0E31, r16
    8eca:	df 91       	pop	r29
    8ecc:	cf 91       	pop	r28
    8ece:	1f 91       	pop	r17
    8ed0:	0f 91       	pop	r16
    8ed2:	08 95       	ret

00008ed4 <__ftoa_engine>:
    8ed4:	28 30       	cpi	r18, 0x08	; 8
    8ed6:	08 f0       	brcs	.+2      	; 0x8eda <__ftoa_engine+0x6>
    8ed8:	27 e0       	ldi	r18, 0x07	; 7
    8eda:	33 27       	eor	r19, r19
    8edc:	da 01       	movw	r26, r20
    8ede:	99 0f       	add	r25, r25
    8ee0:	31 1d       	adc	r19, r1
    8ee2:	87 fd       	sbrc	r24, 7
    8ee4:	91 60       	ori	r25, 0x01	; 1
    8ee6:	00 96       	adiw	r24, 0x00	; 0
    8ee8:	61 05       	cpc	r22, r1
    8eea:	71 05       	cpc	r23, r1
    8eec:	39 f4       	brne	.+14     	; 0x8efc <__ftoa_engine+0x28>
    8eee:	32 60       	ori	r19, 0x02	; 2
    8ef0:	2e 5f       	subi	r18, 0xFE	; 254
    8ef2:	3d 93       	st	X+, r19
    8ef4:	30 e3       	ldi	r19, 0x30	; 48
    8ef6:	2a 95       	dec	r18
    8ef8:	e1 f7       	brne	.-8      	; 0x8ef2 <__ftoa_engine+0x1e>
    8efa:	08 95       	ret
    8efc:	9f 3f       	cpi	r25, 0xFF	; 255
    8efe:	30 f0       	brcs	.+12     	; 0x8f0c <__ftoa_engine+0x38>
    8f00:	80 38       	cpi	r24, 0x80	; 128
    8f02:	71 05       	cpc	r23, r1
    8f04:	61 05       	cpc	r22, r1
    8f06:	09 f0       	breq	.+2      	; 0x8f0a <__ftoa_engine+0x36>
    8f08:	3c 5f       	subi	r19, 0xFC	; 252
    8f0a:	3c 5f       	subi	r19, 0xFC	; 252
    8f0c:	3d 93       	st	X+, r19
    8f0e:	91 30       	cpi	r25, 0x01	; 1
    8f10:	08 f0       	brcs	.+2      	; 0x8f14 <__ftoa_engine+0x40>
    8f12:	80 68       	ori	r24, 0x80	; 128
    8f14:	91 1d       	adc	r25, r1
    8f16:	df 93       	push	r29
    8f18:	cf 93       	push	r28
    8f1a:	1f 93       	push	r17
    8f1c:	0f 93       	push	r16
    8f1e:	ff 92       	push	r15
    8f20:	ef 92       	push	r14
    8f22:	19 2f       	mov	r17, r25
    8f24:	98 7f       	andi	r25, 0xF8	; 248
    8f26:	96 95       	lsr	r25
    8f28:	e9 2f       	mov	r30, r25
    8f2a:	96 95       	lsr	r25
    8f2c:	96 95       	lsr	r25
    8f2e:	e9 0f       	add	r30, r25
    8f30:	ff 27       	eor	r31, r31
    8f32:	e2 5f       	subi	r30, 0xF2	; 242
    8f34:	f9 4f       	sbci	r31, 0xF9	; 249
    8f36:	99 27       	eor	r25, r25
    8f38:	33 27       	eor	r19, r19
    8f3a:	ee 24       	eor	r14, r14
    8f3c:	ff 24       	eor	r15, r15
    8f3e:	a7 01       	movw	r20, r14
    8f40:	e7 01       	movw	r28, r14
    8f42:	05 90       	lpm	r0, Z+
    8f44:	08 94       	sec
    8f46:	07 94       	ror	r0
    8f48:	28 f4       	brcc	.+10     	; 0x8f54 <__ftoa_engine+0x80>
    8f4a:	36 0f       	add	r19, r22
    8f4c:	e7 1e       	adc	r14, r23
    8f4e:	f8 1e       	adc	r15, r24
    8f50:	49 1f       	adc	r20, r25
    8f52:	51 1d       	adc	r21, r1
    8f54:	66 0f       	add	r22, r22
    8f56:	77 1f       	adc	r23, r23
    8f58:	88 1f       	adc	r24, r24
    8f5a:	99 1f       	adc	r25, r25
    8f5c:	06 94       	lsr	r0
    8f5e:	a1 f7       	brne	.-24     	; 0x8f48 <__ftoa_engine+0x74>
    8f60:	05 90       	lpm	r0, Z+
    8f62:	07 94       	ror	r0
    8f64:	28 f4       	brcc	.+10     	; 0x8f70 <__ftoa_engine+0x9c>
    8f66:	e7 0e       	add	r14, r23
    8f68:	f8 1e       	adc	r15, r24
    8f6a:	49 1f       	adc	r20, r25
    8f6c:	56 1f       	adc	r21, r22
    8f6e:	c1 1d       	adc	r28, r1
    8f70:	77 0f       	add	r23, r23
    8f72:	88 1f       	adc	r24, r24
    8f74:	99 1f       	adc	r25, r25
    8f76:	66 1f       	adc	r22, r22
    8f78:	06 94       	lsr	r0
    8f7a:	a1 f7       	brne	.-24     	; 0x8f64 <__ftoa_engine+0x90>
    8f7c:	05 90       	lpm	r0, Z+
    8f7e:	07 94       	ror	r0
    8f80:	28 f4       	brcc	.+10     	; 0x8f8c <__ftoa_engine+0xb8>
    8f82:	f8 0e       	add	r15, r24
    8f84:	49 1f       	adc	r20, r25
    8f86:	56 1f       	adc	r21, r22
    8f88:	c7 1f       	adc	r28, r23
    8f8a:	d1 1d       	adc	r29, r1
    8f8c:	88 0f       	add	r24, r24
    8f8e:	99 1f       	adc	r25, r25
    8f90:	66 1f       	adc	r22, r22
    8f92:	77 1f       	adc	r23, r23
    8f94:	06 94       	lsr	r0
    8f96:	a1 f7       	brne	.-24     	; 0x8f80 <__ftoa_engine+0xac>
    8f98:	05 90       	lpm	r0, Z+
    8f9a:	07 94       	ror	r0
    8f9c:	20 f4       	brcc	.+8      	; 0x8fa6 <__ftoa_engine+0xd2>
    8f9e:	49 0f       	add	r20, r25
    8fa0:	56 1f       	adc	r21, r22
    8fa2:	c7 1f       	adc	r28, r23
    8fa4:	d8 1f       	adc	r29, r24
    8fa6:	99 0f       	add	r25, r25
    8fa8:	66 1f       	adc	r22, r22
    8faa:	77 1f       	adc	r23, r23
    8fac:	88 1f       	adc	r24, r24
    8fae:	06 94       	lsr	r0
    8fb0:	a9 f7       	brne	.-22     	; 0x8f9c <__ftoa_engine+0xc8>
    8fb2:	84 91       	lpm	r24, Z
    8fb4:	10 95       	com	r17
    8fb6:	17 70       	andi	r17, 0x07	; 7
    8fb8:	41 f0       	breq	.+16     	; 0x8fca <__ftoa_engine+0xf6>
    8fba:	d6 95       	lsr	r29
    8fbc:	c7 95       	ror	r28
    8fbe:	57 95       	ror	r21
    8fc0:	47 95       	ror	r20
    8fc2:	f7 94       	ror	r15
    8fc4:	e7 94       	ror	r14
    8fc6:	1a 95       	dec	r17
    8fc8:	c1 f7       	brne	.-16     	; 0x8fba <__ftoa_engine+0xe6>
    8fca:	e4 eb       	ldi	r30, 0xB4	; 180
    8fcc:	f5 e0       	ldi	r31, 0x05	; 5
    8fce:	68 94       	set
    8fd0:	15 90       	lpm	r1, Z+
    8fd2:	15 91       	lpm	r17, Z+
    8fd4:	35 91       	lpm	r19, Z+
    8fd6:	65 91       	lpm	r22, Z+
    8fd8:	95 91       	lpm	r25, Z+
    8fda:	05 90       	lpm	r0, Z+
    8fdc:	7f e2       	ldi	r23, 0x2F	; 47
    8fde:	73 95       	inc	r23
    8fe0:	e1 18       	sub	r14, r1
    8fe2:	f1 0a       	sbc	r15, r17
    8fe4:	43 0b       	sbc	r20, r19
    8fe6:	56 0b       	sbc	r21, r22
    8fe8:	c9 0b       	sbc	r28, r25
    8fea:	d0 09       	sbc	r29, r0
    8fec:	c0 f7       	brcc	.-16     	; 0x8fde <__ftoa_engine+0x10a>
    8fee:	e1 0c       	add	r14, r1
    8ff0:	f1 1e       	adc	r15, r17
    8ff2:	43 1f       	adc	r20, r19
    8ff4:	56 1f       	adc	r21, r22
    8ff6:	c9 1f       	adc	r28, r25
    8ff8:	d0 1d       	adc	r29, r0
    8ffa:	7e f4       	brtc	.+30     	; 0x901a <__ftoa_engine+0x146>
    8ffc:	70 33       	cpi	r23, 0x30	; 48
    8ffe:	11 f4       	brne	.+4      	; 0x9004 <__ftoa_engine+0x130>
    9000:	8a 95       	dec	r24
    9002:	e6 cf       	rjmp	.-52     	; 0x8fd0 <__ftoa_engine+0xfc>
    9004:	e8 94       	clt
    9006:	01 50       	subi	r16, 0x01	; 1
    9008:	30 f0       	brcs	.+12     	; 0x9016 <__ftoa_engine+0x142>
    900a:	08 0f       	add	r16, r24
    900c:	0a f4       	brpl	.+2      	; 0x9010 <__ftoa_engine+0x13c>
    900e:	00 27       	eor	r16, r16
    9010:	02 17       	cp	r16, r18
    9012:	08 f4       	brcc	.+2      	; 0x9016 <__ftoa_engine+0x142>
    9014:	20 2f       	mov	r18, r16
    9016:	23 95       	inc	r18
    9018:	02 2f       	mov	r16, r18
    901a:	7a 33       	cpi	r23, 0x3A	; 58
    901c:	28 f0       	brcs	.+10     	; 0x9028 <__ftoa_engine+0x154>
    901e:	79 e3       	ldi	r23, 0x39	; 57
    9020:	7d 93       	st	X+, r23
    9022:	2a 95       	dec	r18
    9024:	e9 f7       	brne	.-6      	; 0x9020 <__ftoa_engine+0x14c>
    9026:	10 c0       	rjmp	.+32     	; 0x9048 <__ftoa_engine+0x174>
    9028:	7d 93       	st	X+, r23
    902a:	2a 95       	dec	r18
    902c:	89 f6       	brne	.-94     	; 0x8fd0 <__ftoa_engine+0xfc>
    902e:	06 94       	lsr	r0
    9030:	97 95       	ror	r25
    9032:	67 95       	ror	r22
    9034:	37 95       	ror	r19
    9036:	17 95       	ror	r17
    9038:	17 94       	ror	r1
    903a:	e1 18       	sub	r14, r1
    903c:	f1 0a       	sbc	r15, r17
    903e:	43 0b       	sbc	r20, r19
    9040:	56 0b       	sbc	r21, r22
    9042:	c9 0b       	sbc	r28, r25
    9044:	d0 09       	sbc	r29, r0
    9046:	98 f0       	brcs	.+38     	; 0x906e <__ftoa_engine+0x19a>
    9048:	23 95       	inc	r18
    904a:	7e 91       	ld	r23, -X
    904c:	73 95       	inc	r23
    904e:	7a 33       	cpi	r23, 0x3A	; 58
    9050:	08 f0       	brcs	.+2      	; 0x9054 <__ftoa_engine+0x180>
    9052:	70 e3       	ldi	r23, 0x30	; 48
    9054:	7c 93       	st	X, r23
    9056:	20 13       	cpse	r18, r16
    9058:	b8 f7       	brcc	.-18     	; 0x9048 <__ftoa_engine+0x174>
    905a:	7e 91       	ld	r23, -X
    905c:	70 61       	ori	r23, 0x10	; 16
    905e:	7d 93       	st	X+, r23
    9060:	30 f0       	brcs	.+12     	; 0x906e <__ftoa_engine+0x19a>
    9062:	83 95       	inc	r24
    9064:	71 e3       	ldi	r23, 0x31	; 49
    9066:	7d 93       	st	X+, r23
    9068:	70 e3       	ldi	r23, 0x30	; 48
    906a:	2a 95       	dec	r18
    906c:	e1 f7       	brne	.-8      	; 0x9066 <__ftoa_engine+0x192>
    906e:	11 24       	eor	r1, r1
    9070:	ef 90       	pop	r14
    9072:	ff 90       	pop	r15
    9074:	0f 91       	pop	r16
    9076:	1f 91       	pop	r17
    9078:	cf 91       	pop	r28
    907a:	df 91       	pop	r29
    907c:	99 27       	eor	r25, r25
    907e:	87 fd       	sbrc	r24, 7
    9080:	90 95       	com	r25
    9082:	08 95       	ret

00009084 <strnlen_P>:
    9084:	fc 01       	movw	r30, r24
    9086:	05 90       	lpm	r0, Z+
    9088:	61 50       	subi	r22, 0x01	; 1
    908a:	70 40       	sbci	r23, 0x00	; 0
    908c:	01 10       	cpse	r0, r1
    908e:	d8 f7       	brcc	.-10     	; 0x9086 <strnlen_P+0x2>
    9090:	80 95       	com	r24
    9092:	90 95       	com	r25
    9094:	8e 0f       	add	r24, r30
    9096:	9f 1f       	adc	r25, r31
    9098:	08 95       	ret

0000909a <strnlen>:
    909a:	fc 01       	movw	r30, r24
    909c:	61 50       	subi	r22, 0x01	; 1
    909e:	70 40       	sbci	r23, 0x00	; 0
    90a0:	01 90       	ld	r0, Z+
    90a2:	01 10       	cpse	r0, r1
    90a4:	d8 f7       	brcc	.-10     	; 0x909c <strnlen+0x2>
    90a6:	80 95       	com	r24
    90a8:	90 95       	com	r25
    90aa:	8e 0f       	add	r24, r30
    90ac:	9f 1f       	adc	r25, r31
    90ae:	08 95       	ret

000090b0 <fputc>:
    90b0:	0f 93       	push	r16
    90b2:	1f 93       	push	r17
    90b4:	cf 93       	push	r28
    90b6:	df 93       	push	r29
    90b8:	fb 01       	movw	r30, r22
    90ba:	23 81       	ldd	r18, Z+3	; 0x03
    90bc:	21 fd       	sbrc	r18, 1
    90be:	03 c0       	rjmp	.+6      	; 0x90c6 <fputc+0x16>
    90c0:	8f ef       	ldi	r24, 0xFF	; 255
    90c2:	9f ef       	ldi	r25, 0xFF	; 255
    90c4:	28 c0       	rjmp	.+80     	; 0x9116 <fputc+0x66>
    90c6:	22 ff       	sbrs	r18, 2
    90c8:	16 c0       	rjmp	.+44     	; 0x90f6 <fputc+0x46>
    90ca:	46 81       	ldd	r20, Z+6	; 0x06
    90cc:	57 81       	ldd	r21, Z+7	; 0x07
    90ce:	24 81       	ldd	r18, Z+4	; 0x04
    90d0:	35 81       	ldd	r19, Z+5	; 0x05
    90d2:	42 17       	cp	r20, r18
    90d4:	53 07       	cpc	r21, r19
    90d6:	44 f4       	brge	.+16     	; 0x90e8 <fputc+0x38>
    90d8:	a0 81       	ld	r26, Z
    90da:	b1 81       	ldd	r27, Z+1	; 0x01
    90dc:	9d 01       	movw	r18, r26
    90de:	2f 5f       	subi	r18, 0xFF	; 255
    90e0:	3f 4f       	sbci	r19, 0xFF	; 255
    90e2:	31 83       	std	Z+1, r19	; 0x01
    90e4:	20 83       	st	Z, r18
    90e6:	8c 93       	st	X, r24
    90e8:	26 81       	ldd	r18, Z+6	; 0x06
    90ea:	37 81       	ldd	r19, Z+7	; 0x07
    90ec:	2f 5f       	subi	r18, 0xFF	; 255
    90ee:	3f 4f       	sbci	r19, 0xFF	; 255
    90f0:	37 83       	std	Z+7, r19	; 0x07
    90f2:	26 83       	std	Z+6, r18	; 0x06
    90f4:	10 c0       	rjmp	.+32     	; 0x9116 <fputc+0x66>
    90f6:	eb 01       	movw	r28, r22
    90f8:	09 2f       	mov	r16, r25
    90fa:	18 2f       	mov	r17, r24
    90fc:	00 84       	ldd	r0, Z+8	; 0x08
    90fe:	f1 85       	ldd	r31, Z+9	; 0x09
    9100:	e0 2d       	mov	r30, r0
    9102:	09 95       	icall
    9104:	89 2b       	or	r24, r25
    9106:	e1 f6       	brne	.-72     	; 0x90c0 <fputc+0x10>
    9108:	8e 81       	ldd	r24, Y+6	; 0x06
    910a:	9f 81       	ldd	r25, Y+7	; 0x07
    910c:	01 96       	adiw	r24, 0x01	; 1
    910e:	9f 83       	std	Y+7, r25	; 0x07
    9110:	8e 83       	std	Y+6, r24	; 0x06
    9112:	81 2f       	mov	r24, r17
    9114:	90 2f       	mov	r25, r16
    9116:	df 91       	pop	r29
    9118:	cf 91       	pop	r28
    911a:	1f 91       	pop	r17
    911c:	0f 91       	pop	r16
    911e:	08 95       	ret

00009120 <sprintf>:
    9120:	0f 93       	push	r16
    9122:	1f 93       	push	r17
    9124:	cf 93       	push	r28
    9126:	df 93       	push	r29
    9128:	cd b7       	in	r28, 0x3d	; 61
    912a:	de b7       	in	r29, 0x3e	; 62
    912c:	2e 97       	sbiw	r28, 0x0e	; 14
    912e:	0f b6       	in	r0, 0x3f	; 63
    9130:	f8 94       	cli
    9132:	de bf       	out	0x3e, r29	; 62
    9134:	0f be       	out	0x3f, r0	; 63
    9136:	cd bf       	out	0x3d, r28	; 61
    9138:	0d 89       	ldd	r16, Y+21	; 0x15
    913a:	1e 89       	ldd	r17, Y+22	; 0x16
    913c:	86 e0       	ldi	r24, 0x06	; 6
    913e:	8c 83       	std	Y+4, r24	; 0x04
    9140:	1a 83       	std	Y+2, r17	; 0x02
    9142:	09 83       	std	Y+1, r16	; 0x01
    9144:	8f ef       	ldi	r24, 0xFF	; 255
    9146:	9f e7       	ldi	r25, 0x7F	; 127
    9148:	9e 83       	std	Y+6, r25	; 0x06
    914a:	8d 83       	std	Y+5, r24	; 0x05
    914c:	ae 01       	movw	r20, r28
    914e:	47 5e       	subi	r20, 0xE7	; 231
    9150:	5f 4f       	sbci	r21, 0xFF	; 255
    9152:	6f 89       	ldd	r22, Y+23	; 0x17
    9154:	78 8d       	ldd	r23, Y+24	; 0x18
    9156:	ce 01       	movw	r24, r28
    9158:	01 96       	adiw	r24, 0x01	; 1
    915a:	92 d9       	rcall	.-3292   	; 0x8480 <vfprintf>
    915c:	2f 81       	ldd	r18, Y+7	; 0x07
    915e:	38 85       	ldd	r19, Y+8	; 0x08
    9160:	f8 01       	movw	r30, r16
    9162:	e2 0f       	add	r30, r18
    9164:	f3 1f       	adc	r31, r19
    9166:	10 82       	st	Z, r1
    9168:	2e 96       	adiw	r28, 0x0e	; 14
    916a:	0f b6       	in	r0, 0x3f	; 63
    916c:	f8 94       	cli
    916e:	de bf       	out	0x3e, r29	; 62
    9170:	0f be       	out	0x3f, r0	; 63
    9172:	cd bf       	out	0x3d, r28	; 61
    9174:	df 91       	pop	r29
    9176:	cf 91       	pop	r28
    9178:	1f 91       	pop	r17
    917a:	0f 91       	pop	r16
    917c:	08 95       	ret

0000917e <__ultoa_invert>:
    917e:	fa 01       	movw	r30, r20
    9180:	aa 27       	eor	r26, r26
    9182:	28 30       	cpi	r18, 0x08	; 8
    9184:	51 f1       	breq	.+84     	; 0x91da <__ultoa_invert+0x5c>
    9186:	20 31       	cpi	r18, 0x10	; 16
    9188:	81 f1       	breq	.+96     	; 0x91ea <__ultoa_invert+0x6c>
    918a:	e8 94       	clt
    918c:	6f 93       	push	r22
    918e:	6e 7f       	andi	r22, 0xFE	; 254
    9190:	6e 5f       	subi	r22, 0xFE	; 254
    9192:	7f 4f       	sbci	r23, 0xFF	; 255
    9194:	8f 4f       	sbci	r24, 0xFF	; 255
    9196:	9f 4f       	sbci	r25, 0xFF	; 255
    9198:	af 4f       	sbci	r26, 0xFF	; 255
    919a:	b1 e0       	ldi	r27, 0x01	; 1
    919c:	3e d0       	rcall	.+124    	; 0x921a <__ultoa_invert+0x9c>
    919e:	b4 e0       	ldi	r27, 0x04	; 4
    91a0:	3c d0       	rcall	.+120    	; 0x921a <__ultoa_invert+0x9c>
    91a2:	67 0f       	add	r22, r23
    91a4:	78 1f       	adc	r23, r24
    91a6:	89 1f       	adc	r24, r25
    91a8:	9a 1f       	adc	r25, r26
    91aa:	a1 1d       	adc	r26, r1
    91ac:	68 0f       	add	r22, r24
    91ae:	79 1f       	adc	r23, r25
    91b0:	8a 1f       	adc	r24, r26
    91b2:	91 1d       	adc	r25, r1
    91b4:	a1 1d       	adc	r26, r1
    91b6:	6a 0f       	add	r22, r26
    91b8:	71 1d       	adc	r23, r1
    91ba:	81 1d       	adc	r24, r1
    91bc:	91 1d       	adc	r25, r1
    91be:	a1 1d       	adc	r26, r1
    91c0:	20 d0       	rcall	.+64     	; 0x9202 <__ultoa_invert+0x84>
    91c2:	09 f4       	brne	.+2      	; 0x91c6 <__ultoa_invert+0x48>
    91c4:	68 94       	set
    91c6:	3f 91       	pop	r19
    91c8:	2a e0       	ldi	r18, 0x0A	; 10
    91ca:	26 9f       	mul	r18, r22
    91cc:	11 24       	eor	r1, r1
    91ce:	30 19       	sub	r19, r0
    91d0:	30 5d       	subi	r19, 0xD0	; 208
    91d2:	31 93       	st	Z+, r19
    91d4:	de f6       	brtc	.-74     	; 0x918c <__ultoa_invert+0xe>
    91d6:	cf 01       	movw	r24, r30
    91d8:	08 95       	ret
    91da:	46 2f       	mov	r20, r22
    91dc:	47 70       	andi	r20, 0x07	; 7
    91de:	40 5d       	subi	r20, 0xD0	; 208
    91e0:	41 93       	st	Z+, r20
    91e2:	b3 e0       	ldi	r27, 0x03	; 3
    91e4:	0f d0       	rcall	.+30     	; 0x9204 <__ultoa_invert+0x86>
    91e6:	c9 f7       	brne	.-14     	; 0x91da <__ultoa_invert+0x5c>
    91e8:	f6 cf       	rjmp	.-20     	; 0x91d6 <__ultoa_invert+0x58>
    91ea:	46 2f       	mov	r20, r22
    91ec:	4f 70       	andi	r20, 0x0F	; 15
    91ee:	40 5d       	subi	r20, 0xD0	; 208
    91f0:	4a 33       	cpi	r20, 0x3A	; 58
    91f2:	18 f0       	brcs	.+6      	; 0x91fa <__ultoa_invert+0x7c>
    91f4:	49 5d       	subi	r20, 0xD9	; 217
    91f6:	31 fd       	sbrc	r19, 1
    91f8:	40 52       	subi	r20, 0x20	; 32
    91fa:	41 93       	st	Z+, r20
    91fc:	02 d0       	rcall	.+4      	; 0x9202 <__ultoa_invert+0x84>
    91fe:	a9 f7       	brne	.-22     	; 0x91ea <__ultoa_invert+0x6c>
    9200:	ea cf       	rjmp	.-44     	; 0x91d6 <__ultoa_invert+0x58>
    9202:	b4 e0       	ldi	r27, 0x04	; 4
    9204:	a6 95       	lsr	r26
    9206:	97 95       	ror	r25
    9208:	87 95       	ror	r24
    920a:	77 95       	ror	r23
    920c:	67 95       	ror	r22
    920e:	ba 95       	dec	r27
    9210:	c9 f7       	brne	.-14     	; 0x9204 <__ultoa_invert+0x86>
    9212:	00 97       	sbiw	r24, 0x00	; 0
    9214:	61 05       	cpc	r22, r1
    9216:	71 05       	cpc	r23, r1
    9218:	08 95       	ret
    921a:	9b 01       	movw	r18, r22
    921c:	ac 01       	movw	r20, r24
    921e:	0a 2e       	mov	r0, r26
    9220:	06 94       	lsr	r0
    9222:	57 95       	ror	r21
    9224:	47 95       	ror	r20
    9226:	37 95       	ror	r19
    9228:	27 95       	ror	r18
    922a:	ba 95       	dec	r27
    922c:	c9 f7       	brne	.-14     	; 0x9220 <__ultoa_invert+0xa2>
    922e:	62 0f       	add	r22, r18
    9230:	73 1f       	adc	r23, r19
    9232:	84 1f       	adc	r24, r20
    9234:	95 1f       	adc	r25, r21
    9236:	a0 1d       	adc	r26, r0
    9238:	08 95       	ret

0000923a <__do_global_dtors>:
    923a:	13 e0       	ldi	r17, 0x03	; 3
    923c:	c8 e5       	ldi	r28, 0x58	; 88
    923e:	d3 e0       	ldi	r29, 0x03	; 3
    9240:	03 c0       	rjmp	.+6      	; 0x9248 <__do_global_dtors+0xe>
    9242:	fe 01       	movw	r30, r28
    9244:	f2 dc       	rcall	.-1564   	; 0x8c2a <__tablejump2__>
    9246:	21 96       	adiw	r28, 0x01	; 1
    9248:	c9 35       	cpi	r28, 0x59	; 89
    924a:	d1 07       	cpc	r29, r17
    924c:	d1 f7       	brne	.-12     	; 0x9242 <__do_global_dtors+0x8>
    924e:	f8 94       	cli

00009250 <__stop_program>:
    9250:	ff cf       	rjmp	.-2      	; 0x9250 <__stop_program>
