
FWCP_MK3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000328  00800100  00009498  0000952c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a37  00800428  00800428  00009854  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000098b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000588  00000000  00000000  000098f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd86  00000000  00000000  00009e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002056  00000000  00000000  00017bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b68  00000000  00000000  00019c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a84  00000000  00000000  0001f7bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b9d  00000000  00000000  00021240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d621  00000000  00000000  00022ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  000303fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	58 c3       	rjmp	.+1712   	; 0x6b2 <__dtors_end>
       2:	00 00       	nop
       4:	80 c3       	rjmp	.+1792   	; 0x706 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c3       	rjmp	.+1788   	; 0x706 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c3       	rjmp	.+1784   	; 0x706 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c3       	rjmp	.+1780   	; 0x706 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c3       	rjmp	.+1776   	; 0x706 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c3       	rjmp	.+1772   	; 0x706 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c3       	rjmp	.+1768   	; 0x706 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c3       	rjmp	.+1764   	; 0x706 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c3       	rjmp	.+1760   	; 0x706 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 20 2c 	jmp	0x5840	; 0x5840 <__vector_11>
      30:	6a c3       	rjmp	.+1748   	; 0x706 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 3c 2c 	jmp	0x5878	; 0x5878 <__vector_13>
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c3       	rjmp	.+1736   	; 0x706 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 f8 2b 	jmp	0x57f0	; 0x57f0 <__vector_16>
      44:	60 c3       	rjmp	.+1728   	; 0x706 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c3       	rjmp	.+1724   	; 0x706 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c3       	rjmp	.+1720   	; 0x706 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 4d 2c 	jmp	0x589a	; 0x589a <__vector_20>
      54:	58 c3       	rjmp	.+1712   	; 0x706 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c3       	rjmp	.+1708   	; 0x706 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c3       	rjmp	.+1704   	; 0x706 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c3       	rjmp	.+1700   	; 0x706 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c3       	rjmp	.+1696   	; 0x706 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c3       	rjmp	.+1692   	; 0x706 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c3       	rjmp	.+1688   	; 0x706 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c3       	rjmp	.+1684   	; 0x706 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c3       	rjmp	.+1680   	; 0x706 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c3       	rjmp	.+1676   	; 0x706 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c3       	rjmp	.+1672   	; 0x706 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c3       	rjmp	.+1668   	; 0x706 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c3       	rjmp	.+1664   	; 0x706 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c3       	rjmp	.+1660   	; 0x706 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a4 09       	sbc	r26, r4
      8e:	ab 09       	sbc	r26, r11
      90:	f8 0a       	sbc	r15, r24
      92:	1b 0a       	sbc	r1, r27
      94:	f8 0a       	sbc	r15, r24
      96:	f8 0a       	sbc	r15, r24
      98:	f8 0a       	sbc	r15, r24
      9a:	f0 0a       	sbc	r15, r16
      9c:	f8 0a       	sbc	r15, r24
      9e:	f8 0a       	sbc	r15, r24
      a0:	f8 0a       	sbc	r15, r24
      a2:	f8 0a       	sbc	r15, r24
      a4:	f8 0a       	sbc	r15, r24
      a6:	f8 0a       	sbc	r15, r24
      a8:	f8 0a       	sbc	r15, r24
      aa:	f8 0a       	sbc	r15, r24
      ac:	f8 0a       	sbc	r15, r24
      ae:	f8 0a       	sbc	r15, r24
      b0:	f8 0a       	sbc	r15, r24
      b2:	f8 0a       	sbc	r15, r24
      b4:	f8 0a       	sbc	r15, r24
      b6:	f8 0a       	sbc	r15, r24
      b8:	f8 0a       	sbc	r15, r24
      ba:	f8 0a       	sbc	r15, r24
      bc:	f8 0a       	sbc	r15, r24
      be:	f8 0a       	sbc	r15, r24
      c0:	f8 0a       	sbc	r15, r24
      c2:	f8 0a       	sbc	r15, r24
      c4:	f8 0a       	sbc	r15, r24
      c6:	f8 0a       	sbc	r15, r24
      c8:	f8 0a       	sbc	r15, r24
      ca:	f8 0a       	sbc	r15, r24
      cc:	f8 0a       	sbc	r15, r24
      ce:	f8 0a       	sbc	r15, r24
      d0:	f8 0a       	sbc	r15, r24
      d2:	f8 0a       	sbc	r15, r24
      d4:	f8 0a       	sbc	r15, r24
      d6:	f8 0a       	sbc	r15, r24
      d8:	f8 0a       	sbc	r15, r24
      da:	f8 0a       	sbc	r15, r24
      dc:	f8 0a       	sbc	r15, r24
      de:	f8 0a       	sbc	r15, r24
      e0:	f8 0a       	sbc	r15, r24
      e2:	f8 0a       	sbc	r15, r24
      e4:	f8 0a       	sbc	r15, r24
      e6:	f8 0a       	sbc	r15, r24
      e8:	f8 0a       	sbc	r15, r24
      ea:	f8 0a       	sbc	r15, r24
      ec:	f8 0a       	sbc	r15, r24
      ee:	f8 0a       	sbc	r15, r24
      f0:	a1 0a       	sbc	r10, r17
      f2:	a7 0a       	sbc	r10, r23
      f4:	b8 0a       	sbc	r11, r24
      f6:	c9 0a       	sbc	r12, r25
      f8:	de 0a       	sbc	r13, r30
      fa:	21 23       	and	r18, r17
      fc:	f4 21       	and	r31, r4
      fe:	03 22       	and	r0, r19
     100:	fe 21       	and	r31, r14
     102:	fe 21       	and	r31, r14
     104:	fe 21       	and	r31, r14
     106:	fe 21       	and	r31, r14
     108:	fe 21       	and	r31, r14
     10a:	fe 21       	and	r31, r14
     10c:	fe 21       	and	r31, r14
     10e:	fe 21       	and	r31, r14
     110:	fe 21       	and	r31, r14
     112:	fe 21       	and	r31, r14
     114:	2f 23       	and	r18, r31
     116:	fe 21       	and	r31, r14
     118:	fe 21       	and	r31, r14
     11a:	fe 21       	and	r31, r14
     11c:	aa 21       	and	r26, r10
     11e:	fe 21       	and	r31, r14
     120:	03 22       	and	r0, r19
     122:	fe 21       	and	r31, r14
     124:	fe 21       	and	r31, r14
     126:	f2 22       	and	r15, r18
     128:	80 24       	eor	r8, r0
     12a:	82 24       	eor	r8, r2
     12c:	82 24       	eor	r8, r2
     12e:	82 24       	eor	r8, r2
     130:	82 24       	eor	r8, r2
     132:	82 24       	eor	r8, r2
     134:	82 24       	eor	r8, r2
     136:	7e 24       	eor	r7, r14
     138:	82 24       	eor	r8, r2
     13a:	82 24       	eor	r8, r2
     13c:	82 24       	eor	r8, r2
     13e:	82 24       	eor	r8, r2
     140:	82 24       	eor	r8, r2
     142:	85 24       	eor	r8, r5
     144:	84 24       	eor	r8, r4
     146:	6e 24       	eor	r6, r14
     148:	70 24       	eor	r7, r0
     14a:	72 24       	eor	r7, r2
     14c:	74 24       	eor	r7, r4
     14e:	76 24       	eor	r7, r6
     150:	78 24       	eor	r7, r8
     152:	7a 24       	eor	r7, r10
     154:	7c 24       	eor	r7, r12
     156:	9b 2f       	mov	r25, r27
     158:	ab 2f       	mov	r26, r27
     15a:	ab 2f       	mov	r26, r27
     15c:	ab 2f       	mov	r26, r27
     15e:	ab 2f       	mov	r26, r27
     160:	ab 2f       	mov	r26, r27
     162:	ab 2f       	mov	r26, r27
     164:	ab 2f       	mov	r26, r27
     166:	ab 2f       	mov	r26, r27
     168:	ab 2f       	mov	r26, r27
     16a:	ab 2f       	mov	r26, r27
     16c:	ab 2f       	mov	r26, r27
     16e:	ab 2f       	mov	r26, r27
     170:	ab 2f       	mov	r26, r27
     172:	ab 2f       	mov	r26, r27
     174:	ab 2f       	mov	r26, r27
     176:	ab 2f       	mov	r26, r27
     178:	ab 2f       	mov	r26, r27
     17a:	ab 2f       	mov	r26, r27
     17c:	ab 2f       	mov	r26, r27
     17e:	ab 2f       	mov	r26, r27
     180:	ab 2f       	mov	r26, r27
     182:	ab 2f       	mov	r26, r27
     184:	ab 2f       	mov	r26, r27
     186:	ab 2f       	mov	r26, r27
     188:	ab 2f       	mov	r26, r27
     18a:	ab 2f       	mov	r26, r27
     18c:	ab 2f       	mov	r26, r27
     18e:	ab 2f       	mov	r26, r27
     190:	ab 2f       	mov	r26, r27
     192:	ab 2f       	mov	r26, r27
     194:	ab 2f       	mov	r26, r27
     196:	ab 2f       	mov	r26, r27
     198:	ab 2f       	mov	r26, r27
     19a:	ab 2f       	mov	r26, r27
     19c:	ab 2f       	mov	r26, r27
     19e:	ab 2f       	mov	r26, r27
     1a0:	ab 2f       	mov	r26, r27
     1a2:	ab 2f       	mov	r26, r27
     1a4:	ab 2f       	mov	r26, r27
     1a6:	ab 2f       	mov	r26, r27
     1a8:	ab 2f       	mov	r26, r27
     1aa:	ab 2f       	mov	r26, r27
     1ac:	ab 2f       	mov	r26, r27
     1ae:	ab 2f       	mov	r26, r27
     1b0:	ab 2f       	mov	r26, r27
     1b2:	ab 2f       	mov	r26, r27
     1b4:	ab 2f       	mov	r26, r27
     1b6:	ab 2f       	mov	r26, r27
     1b8:	ab 2f       	mov	r26, r27
     1ba:	ab 2f       	mov	r26, r27
     1bc:	ab 2f       	mov	r26, r27
     1be:	77 2f       	mov	r23, r23
     1c0:	ab 2f       	mov	r26, r27
     1c2:	ab 2f       	mov	r26, r27
     1c4:	ab 2f       	mov	r26, r27
     1c6:	ab 2f       	mov	r26, r27
     1c8:	ab 2f       	mov	r26, r27
     1ca:	ab 2f       	mov	r26, r27
     1cc:	ab 2f       	mov	r26, r27
     1ce:	3e 2f       	mov	r19, r30
     1d0:	3a 2f       	mov	r19, r26
     1d2:	ab 2f       	mov	r26, r27
     1d4:	61 2f       	mov	r22, r17
     1d6:	ab 2f       	mov	r26, r27
     1d8:	ab 2f       	mov	r26, r27
     1da:	4b 2f       	mov	r20, r27
     1dc:	ab 2f       	mov	r26, r27
     1de:	ab 2f       	mov	r26, r27
     1e0:	8b 2f       	mov	r24, r27
     1e2:	c7 38       	cpi	r28, 0x87	; 135
     1e4:	ed 38       	cpi	r30, 0x8D	; 141
     1e6:	14 39       	cpi	r17, 0x94	; 148
     1e8:	3c 39       	cpi	r19, 0x9C	; 156
     1ea:	63 39       	cpi	r22, 0x93	; 147
     1ec:	8d 39       	cpi	r24, 0x9D	; 157
     1ee:	b6 39       	cpi	r27, 0x96	; 150
     1f0:	e0 39       	cpi	r30, 0x90	; 144
     1f2:	57 3a       	cpi	r21, 0xA7	; 167
     1f4:	81 3a       	cpi	r24, 0xA1	; 161
     1f6:	05 a8       	ldd	r0, Z+53	; 0x35
     1f8:	4c cd       	rjmp	.-1384   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     1fa:	b2 d4       	rcall	.+2404   	; 0xb60 <_ZN6BMP18018bmp180_getpressureEv+0xf2>
     1fc:	4e b9       	out	0x0e, r20	; 14
     1fe:	38 36       	cpi	r19, 0x68	; 104
     200:	a9 02       	muls	r26, r25
     202:	0c 50       	subi	r16, 0x0C	; 12
     204:	b9 91       	ld	r27, Y+
     206:	86 88       	ldd	r8, Z+22	; 0x16
     208:	08 3c       	cpi	r16, 0xC8	; 200
     20a:	a6 aa       	std	Z+54, r10	; 0x36
     20c:	aa 2a       	or	r10, r26
     20e:	be 00       	.word	0x00be	; ????
     210:	00 00       	nop
     212:	80 3f       	cpi	r24, 0xF0	; 240
     214:	07 63       	ori	r16, 0x37	; 55
     216:	42 36       	cpi	r20, 0x62	; 98
     218:	b7 9b       	sbis	0x16, 7	; 22
     21a:	d8 a7       	std	Y+40, r29	; 0x28
     21c:	1a 39       	cpi	r17, 0x9A	; 154
     21e:	68 56       	subi	r22, 0x68	; 104
     220:	18 ae       	std	Y+56, r1	; 0x38
     222:	ba ab       	std	Y+50, r27	; 0x32
     224:	55 8c       	ldd	r5, Z+29	; 0x1d
     226:	1d 3c       	cpi	r17, 0xCD	; 205
     228:	b7 cc       	rjmp	.-1682   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     22a:	57 63       	ori	r21, 0x37	; 55
     22c:	bd 6d       	ori	r27, 0xDD	; 221
     22e:	ed fd       	.word	0xfded	; ????
     230:	75 3e       	cpi	r23, 0xE5	; 229
     232:	f6 17       	cp	r31, r22
     234:	72 31       	cpi	r23, 0x12	; 18
     236:	bf 00       	.word	0x00bf	; ????
     238:	00 00       	nop
     23a:	80 3f       	cpi	r24, 0xF0	; 240
     23c:	08 00       	.word	0x0008	; ????
     23e:	00 00       	nop
     240:	be 92       	st	-X, r11
     242:	24 49       	sbci	r18, 0x94	; 148
     244:	12 3e       	cpi	r17, 0xE2	; 226
     246:	ab aa       	std	Y+51, r10	; 0x33
     248:	aa 2a       	or	r10, r26
     24a:	be cd       	rjmp	.-1156   	; 0xfffffdc8 <__eeprom_end+0xff7efdc8>
     24c:	cc cc       	rjmp	.-1640   	; 0xfffffbe6 <__eeprom_end+0xff7efbe6>
     24e:	4c 3e       	cpi	r20, 0xEC	; 236
     250:	00 00       	nop
     252:	00 80       	ld	r0, Z
     254:	be ab       	std	Y+54, r27	; 0x36
     256:	aa aa       	std	Y+50, r10	; 0x32
     258:	aa 3e       	cpi	r26, 0xEA	; 234
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	bf 00       	.word	0x00bf	; ????
     260:	00 00       	nop
     262:	80 3f       	cpi	r24, 0xF0	; 240
     264:	00 00       	nop
     266:	00 00       	nop
     268:	00 08       	sbc	r0, r0
     26a:	41 78       	andi	r20, 0x81	; 129
     26c:	d3 bb       	out	0x13, r29	; 19
     26e:	43 87       	std	Z+11, r20	; 0x0b
     270:	d1 13       	cpse	r29, r17
     272:	3d 19       	sub	r19, r13
     274:	0e 3c       	cpi	r16, 0xCE	; 206
     276:	c3 bd       	out	0x23, r28	; 35
     278:	42 82       	std	Z+2, r4	; 0x02
     27a:	ad 2b       	or	r26, r29
     27c:	3e 68       	ori	r19, 0x8E	; 142
     27e:	ec 82       	std	Y+4, r14	; 0x04
     280:	76 be       	out	0x36, r7	; 54
     282:	d9 8f       	std	Y+25, r29	; 0x19
     284:	e1 a9       	ldd	r30, Z+49	; 0x31
     286:	3e 4c       	sbci	r19, 0xCE	; 206
     288:	80 ef       	ldi	r24, 0xF0	; 240
     28a:	ff be       	out	0x3f, r15	; 63
     28c:	01 c4       	rjmp	.+2050   	; 0xa90 <_ZN6BMP18018bmp180_getpressureEv+0x22>
     28e:	ff 7f       	andi	r31, 0xFF	; 255
     290:	3f 00       	.word	0x003f	; ????
     292:	00 00       	nop
	...

00000296 <__trampolines_end>:
     296:	00 e0       	ldi	r16, 0x00	; 0
     298:	f8 fc       	.word	0xfcf8	; ????
     29a:	fe 1e       	adc	r15, r30
     29c:	07 07       	cpc	r16, r23
     29e:	07 07       	cpc	r16, r23
     2a0:	1e fe       	.word	0xfe1e	; ????
     2a2:	fc f8       	.word	0xf8fc	; ????
     2a4:	f0 00       	.word	0x00f0	; ????
     2a6:	00 07       	cpc	r16, r16
     2a8:	0f 3f       	cpi	r16, 0xFF	; 255
     2aa:	3f 7c       	andi	r19, 0xCF	; 207
     2ac:	70 70       	andi	r23, 0x00	; 0
     2ae:	70 70       	andi	r23, 0x00	; 0
     2b0:	7c 3f       	cpi	r23, 0xFC	; 252
     2b2:	1f 1f       	adc	r17, r31
     2b4:	07 00       	.word	0x0007	; ????
     2b6:	00 00       	nop
     2b8:	00 06       	cpc	r0, r16
     2ba:	07 07       	cpc	r16, r23
     2bc:	ff ff       	.word	0xffff	; ????
     2be:	ff ff       	.word	0xffff	; ????
	...
     2cc:	7f 7f       	andi	r23, 0xFF	; 255
     2ce:	7f 7f       	andi	r23, 0xFF	; 255
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	00 00       	nop
     2d6:	00 38       	cpi	r16, 0x80	; 128
     2d8:	3c 3e       	cpi	r19, 0xEC	; 236
     2da:	3e 0f       	add	r19, r30
     2dc:	07 07       	cpc	r16, r23
     2de:	07 cf       	rjmp	.-498    	; 0xee <__SREG__+0xaf>
     2e0:	ff fe       	.word	0xfeff	; ????
     2e2:	fe 38       	cpi	r31, 0x8E	; 142
     2e4:	00 00       	nop
     2e6:	00 40       	sbci	r16, 0x00	; 0
     2e8:	40 60       	ori	r20, 0x00	; 0
     2ea:	70 78       	andi	r23, 0x80	; 128
     2ec:	7c 7e       	andi	r23, 0xEC	; 236
     2ee:	7f 77       	andi	r23, 0x7F	; 127
     2f0:	73 71       	andi	r23, 0x13	; 19
     2f2:	70 70       	andi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 18       	sub	r0, r0
     2f8:	1c 1e       	adc	r1, r28
     2fa:	1e 0f       	add	r17, r30
     2fc:	c7 c7       	rjmp	.+3982   	; 0x128c <disk_write+0x60>
     2fe:	e7 ff       	sbrs	r30, 7
     300:	fe be       	out	0x3e, r15	; 62
     302:	9c 00       	.word	0x009c	; ????
     304:	00 00       	nop
     306:	00 0c       	add	r0, r0
     308:	1c 3c       	cpi	r17, 0xCC	; 204
     30a:	3c 78       	andi	r19, 0x8C	; 140
     30c:	70 70       	andi	r23, 0x00	; 0
     30e:	70 79       	andi	r23, 0x90	; 144
     310:	7f 3f       	cpi	r23, 0xFF	; 255
     312:	1f 0f       	add	r17, r31
     314:	00 00       	nop
     316:	00 00       	nop
     318:	80 c0       	rjmp	.+256    	; 0x41a <_ZL7font5x8+0x44>
     31a:	e0 70       	andi	r30, 0x00	; 0
     31c:	38 1c       	adc	r3, r8
     31e:	1e ff       	.word	0xff1e	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff 00       	.word	0x00ff	; ????
     324:	00 00       	nop
     326:	06 07       	cpc	r16, r22
     328:	07 07       	cpc	r16, r23
     32a:	06 06       	cpc	r0, r22
     32c:	06 06       	cpc	r0, r22
     32e:	06 7f       	andi	r16, 0xF6	; 246
     330:	7f 7f       	andi	r23, 0xFF	; 255
     332:	7f 06       	cpc	r7, r31
     334:	06 00       	.word	0x0006	; ????
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	f0 ff       	sbrs	r31, 0
     33c:	ff ff       	.word	0xffff	; ????
     33e:	e7 e7       	ldi	r30, 0x77	; 119
     340:	e7 e7       	ldi	r30, 0x77	; 119
     342:	c7 87       	std	Z+15, r28	; 0x0f
     344:	00 00       	nop
     346:	00 00       	nop
     348:	38 78       	andi	r19, 0x88	; 136
     34a:	71 70       	andi	r23, 0x01	; 1
     34c:	70 70       	andi	r23, 0x00	; 0
     34e:	70 70       	andi	r23, 0x00	; 0
     350:	39 3f       	cpi	r19, 0xF9	; 249
     352:	3f 1f       	adc	r19, r31
     354:	0f 00       	.word	0x000f	; ????
     356:	00 80       	ld	r0, Z
     358:	e0 f0       	brcs	.+56     	; 0x392 <__trampolines_end+0xfc>
     35a:	f8 fc       	.word	0xfcf8	; ????
     35c:	7f 7f       	andi	r23, 0xFF	; 255
     35e:	6f 67       	ori	r22, 0x7F	; 127
     360:	e1 e1       	ldi	r30, 0x11	; 17
     362:	c0 80       	ld	r12, Z
     364:	00 00       	nop
     366:	00 0f       	add	r16, r16
     368:	1f 3f       	cpi	r17, 0xFF	; 255
     36a:	3f 78       	andi	r19, 0x8F	; 143
     36c:	70 70       	andi	r23, 0x00	; 0
     36e:	70 70       	andi	r23, 0x00	; 0
     370:	78 3f       	cpi	r23, 0xF8	; 248
     372:	3f 1f       	adc	r19, r31
     374:	0f 00       	.word	0x000f	; ????
     376:	00 07       	cpc	r16, r16
     378:	07 07       	cpc	r16, r23
     37a:	07 07       	cpc	r16, r23
     37c:	c7 e7       	ldi	r28, 0x77	; 119
     37e:	f7 ff       	sbrs	r31, 7
     380:	7f 3f       	cpi	r23, 0xFF	; 255
     382:	1f 07       	cpc	r17, r31
     384:	03 01       	movw	r0, r6
     386:	00 20       	and	r0, r0
     388:	38 7c       	andi	r19, 0xC8	; 200
     38a:	7e 3f       	cpi	r23, 0xFE	; 254
     38c:	0f 07       	cpc	r16, r31
     38e:	03 00       	.word	0x0003	; ????
	...
     398:	00 1c       	adc	r0, r0
     39a:	be fe       	.word	0xfebe	; ????
     39c:	ff e7       	ldi	r31, 0x7F	; 127
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <_ZN6BMP18018bmp180_getpressureEv+0xb8>
     3a0:	e7 ff       	sbrs	r30, 7
     3a2:	fe be       	out	0x3e, r15	; 62
     3a4:	1c 00       	.word	0x001c	; ????
     3a6:	00 00       	nop
     3a8:	0e 3f       	cpi	r16, 0xFE	; 254
     3aa:	3f 7f       	andi	r19, 0xFF	; 255
     3ac:	71 60       	ori	r23, 0x01	; 1
     3ae:	60 60       	ori	r22, 0x00	; 0
     3b0:	71 7f       	andi	r23, 0xF1	; 241
     3b2:	3f 3f       	cpi	r19, 0xFF	; 255
     3b4:	0f 00       	.word	0x000f	; ????
     3b6:	00 78       	andi	r16, 0x80	; 128
     3b8:	fc fe       	.word	0xfefc	; ????
     3ba:	fe 8f       	std	Y+30, r31	; 0x1e
     3bc:	07 07       	cpc	r16, r23
     3be:	07 07       	cpc	r16, r23
     3c0:	8f fe       	.word	0xfe8f	; ????
     3c2:	fe fc       	.word	0xfcfe	; ????
     3c4:	f8 00       	.word	0x00f8	; ????
     3c6:	00 00       	nop
     3c8:	00 01       	movw	r0, r0
     3ca:	43 43       	sbci	r20, 0x33	; 51
     3cc:	73 7b       	andi	r23, 0xB3	; 179
     3ce:	7f 7f       	andi	r23, 0xFF	; 255
     3d0:	1f 0f       	add	r17, r31
     3d2:	07 03       	mulsu	r16, r23
	...

000003d6 <_ZL7font5x8>:
     3d6:	00 00 5f 00 00 00 07 00 07 00 14 7f 14 7f 14 24     .._............$
     3e6:	2a 7f 2a 12 23 13 08 64 62 36 49 55 22 50 00 05     *.*.#..db6IU"P..
     3f6:	03 00 00 00 1c 22 41 00 00 41 22 1c 00 14 08 3e     ....."A..A"....>
     406:	08 14 08 08 3e 08 08 00 50 30 00 00 08 08 08 08     ....>...P0......
     416:	08 00 60 60 00 00 20 10 08 04 02 3e 51 49 45 3e     ..``.. ....>QIE>
     426:	00 42 7f 40 00 42 61 51 49 46 21 41 45 4b 31 18     .B.@.BaQIF!AEK1.
     436:	14 12 7f 10 27 45 45 45 39 3c 4a 49 49 30 01 71     ....'EEE9<JII0.q
     446:	09 05 03 36 49 49 49 36 06 49 49 29 1e 00 36 36     ...6III6.II)..66
     456:	00 00 00 56 36 00 00 08 14 22 41 00 14 14 14 14     ...V6...."A.....
     466:	14 00 41 22 14 08 02 01 51 09 06 32 49 79 41 3e     ..A"....Q..2IyA>
     476:	7e 11 11 11 7e 7f 49 49 49 36 3e 41 41 41 22 7f     ~...~.III6>AAA".
     486:	41 41 22 1c 7f 49 49 49 41 7f 09 09 09 01 3e 41     AA"..IIIA.....>A
     496:	49 49 7a 7f 08 08 08 7f 00 41 7f 41 00 20 40 41     IIz......A.A. @A
     4a6:	3f 01 7f 08 14 22 41 7f 40 40 40 40 7f 02 0c 02     ?...."A.@@@@....
     4b6:	7f 7f 04 08 10 7f 3e 41 41 41 3e 7f 09 09 09 06     ......>AAA>.....
     4c6:	3e 41 51 21 5e 7f 09 19 29 46 46 49 49 49 31 01     >AQ!^...)FFIII1.
     4d6:	01 7f 01 01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40     ....?@@@?. @ .?@
     4e6:	38 40 3f 63 14 08 14 63 07 08 70 08 07 61 51 49     8@?c...c..p..aQI
     4f6:	45 43 00 7f 41 41 00 02 04 08 10 20 00 41 41 7f     EC..AA..... .AA.
     506:	00 04 02 01 02 04 40 40 40 40 40 00 01 02 04 00     ......@@@@@.....
     516:	20 54 54 54 78 7f 48 44 44 38 38 44 44 44 20 38      TTTx.HDD88DDD 8
     526:	44 44 48 7f 38 54 54 54 18 08 7e 09 01 02 0c 52     DDH.8TTT..~....R
     536:	52 52 3e 7f 08 04 04 78 00 44 7d 40 00 20 40 44     RR>....x.D}@. @D
     546:	3d 00 7f 10 28 44 00 00 41 7f 40 00 7c 04 18 04     =...(D..A.@.|...
     556:	78 7c 08 04 04 78 38 44 44 44 38 7c 14 14 14 08     x|...x8DDD8|....
     566:	08 14 14 18 7c 7c 08 04 04 08 48 54 54 54 20 04     ....||....HTTT .
     576:	3f 44 40 20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40     ?D@ <@@ |. @ .<@
     586:	30 40 3c 44 28 10 28 44 0c 50 50 50 3c 44 64 54     0@<D(.(D.PPP<DdT
     596:	4c 44 00 08 36 41 00 00 00 7f 00 00 00 41 36 08     LD..6A.......A6.
     5a6:	00 10 08 08 10 08                                   ......

000005ac <__c.2179>:
     5ac:	6e 61 6e 00                                         nan.

000005b0 <__c.2177>:
     5b0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     5c0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     5d0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     5e0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5f0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     600:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     610:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     620:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     630:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     640:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     650:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     660:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     670:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     680:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     690:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     6a0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000006ae <__ctors_start>:
     6ae:	14 3d       	cpi	r17, 0xD4	; 212

000006b0 <__ctors_end>:
     6b0:	37 3d       	cpi	r19, 0xD7	; 215

000006b2 <__dtors_end>:
     6b2:	11 24       	eor	r1, r1
     6b4:	1f be       	out	0x3f, r1	; 63
     6b6:	cf ef       	ldi	r28, 0xFF	; 255
     6b8:	d0 e4       	ldi	r29, 0x40	; 64
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	cd bf       	out	0x3d, r28	; 61

000006be <__do_copy_data>:
     6be:	14 e0       	ldi	r17, 0x04	; 4
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	e8 e9       	ldi	r30, 0x98	; 152
     6c6:	f4 e9       	ldi	r31, 0x94	; 148
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	0b bf       	out	0x3b, r16	; 59
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <__do_copy_data+0x14>
     6ce:	07 90       	elpm	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	a8 32       	cpi	r26, 0x28	; 40
     6d4:	b1 07       	cpc	r27, r17
     6d6:	d9 f7       	brne	.-10     	; 0x6ce <__do_copy_data+0x10>

000006d8 <__do_clear_bss>:
     6d8:	2e e0       	ldi	r18, 0x0E	; 14
     6da:	a8 e2       	ldi	r26, 0x28	; 40
     6dc:	b4 e0       	ldi	r27, 0x04	; 4
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <.do_clear_bss_start>

000006e0 <.do_clear_bss_loop>:
     6e0:	1d 92       	st	X+, r1

000006e2 <.do_clear_bss_start>:
     6e2:	af 35       	cpi	r26, 0x5F	; 95
     6e4:	b2 07       	cpc	r27, r18
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <.do_clear_bss_loop>

000006e8 <__do_global_ctors>:
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 e5       	ldi	r28, 0x58	; 88
     6ec:	d3 e0       	ldi	r29, 0x03	; 3
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__do_global_ctors+0x10>
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	fe 01       	movw	r30, r28
     6f4:	0e 94 38 47 	call	0x8e70	; 0x8e70 <__tablejump2__>
     6f8:	c7 35       	cpi	r28, 0x57	; 87
     6fa:	d1 07       	cpc	r29, r17
     6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__do_global_ctors+0x8>
     6fe:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <main>
     702:	0c 94 40 4a 	jmp	0x9480	; 0x9480 <__do_global_dtors>

00000706 <__bad_interrupt>:
     706:	7c cc       	rjmp	.-1800   	; 0x0 <__vectors>

00000708 <_ZN6BMP180D1Ev>:
	bmp180_getcalibration();
	
} //BMP180

// default destructor
BMP180::~BMP180()
     708:	8e 96       	adiw	r24, 0x2e	; 46
     70a:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <_ZN3I2CD1Ev>
     70e:	08 95       	ret

00000710 <_ZN6BMP18015bmp180_writememEhh>:
{
} //~BMP180bmp180_regac2

void BMP180::bmp180_writemem(uint8_t reg, uint8_t value){
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	06 2f       	mov	r16, r22
     71a:	14 2f       	mov	r17, r20
	i2c.twi_start();
     71c:	ec 01       	movw	r28, r24
     71e:	ae 96       	adiw	r28, 0x2e	; 46
     720:	ce 01       	movw	r24, r28
     722:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
	i2c.twi_write(BMP180_ADDR | I2C_WRITE);
     726:	6e ee       	ldi	r22, 0xEE	; 238
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(reg);
     72e:	60 2f       	mov	r22, r16
     730:	ce 01       	movw	r24, r28
     732:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(value);
     736:	61 2f       	mov	r22, r17
     738:	ce 01       	movw	r24, r28
     73a:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_stop();
     73e:	ce 01       	movw	r24, r28
     740:	0e 94 56 23 	call	0x46ac	; 0x46ac <_ZN3I2C8twi_stopEv>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <_ZN6BMP18021bmp180_getcalibrationEv>:

void BMP180::bmp180_getcalibration() {
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
	i2c.twi_start();
     758:	8c 01       	movw	r16, r24
     75a:	02 5d       	subi	r16, 0xD2	; 210
     75c:	1f 4f       	sbci	r17, 0xFF	; 255
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     764:	6e ee       	ldi	r22, 0xEE	; 238
     766:	c8 01       	movw	r24, r16
     768:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGAC1);
     76c:	6a ea       	ldi	r22, 0xAA	; 170
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     774:	c8 01       	movw	r24, r16
     776:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     77a:	6f ee       	ldi	r22, 0xEF	; 239
     77c:	c8 01       	movw	r24, r16
     77e:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	bmp180_regac1 = (i2c.twi_read(1) << 8);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	c8 01       	movw	r24, r16
     786:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     78a:	18 8a       	std	Y+16, r1	; 0x10
     78c:	89 8b       	std	Y+17, r24	; 0x11
	bmp180_regac1 += (i2c.twi_read(1));
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	c8 01       	movw	r24, r16
     792:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     796:	28 89       	ldd	r18, Y+16	; 0x10
     798:	39 89       	ldd	r19, Y+17	; 0x11
     79a:	28 0f       	add	r18, r24
     79c:	31 1d       	adc	r19, r1
     79e:	39 8b       	std	Y+17, r19	; 0x11
     7a0:	28 8b       	std	Y+16, r18	; 0x10
	
	bmp180_regac2 = (i2c.twi_read(1) << 8);
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     7aa:	1a 8a       	std	Y+18, r1	; 0x12
     7ac:	8b 8b       	std	Y+19, r24	; 0x13
	bmp180_regac2 += (i2c.twi_read(1));
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	c8 01       	movw	r24, r16
     7b2:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     7b6:	2a 89       	ldd	r18, Y+18	; 0x12
     7b8:	3b 89       	ldd	r19, Y+19	; 0x13
     7ba:	28 0f       	add	r18, r24
     7bc:	31 1d       	adc	r19, r1
     7be:	3b 8b       	std	Y+19, r19	; 0x13
     7c0:	2a 8b       	std	Y+18, r18	; 0x12
	
	bmp180_regac3 = (i2c.twi_read(1) << 8);
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	c8 01       	movw	r24, r16
     7c6:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     7ca:	1c 8a       	std	Y+20, r1	; 0x14
     7cc:	8d 8b       	std	Y+21, r24	; 0x15
	bmp180_regac3 += (i2c.twi_read(1));
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     7d6:	2c 89       	ldd	r18, Y+20	; 0x14
     7d8:	3d 89       	ldd	r19, Y+21	; 0x15
     7da:	28 0f       	add	r18, r24
     7dc:	31 1d       	adc	r19, r1
     7de:	3d 8b       	std	Y+21, r19	; 0x15
     7e0:	2c 8b       	std	Y+20, r18	; 0x14
	
	bmp180_regac4 = (i2c.twi_read(1) << 8);
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     7ea:	18 a2       	std	Y+32, r1	; 0x20
     7ec:	89 a3       	std	Y+33, r24	; 0x21
	bmp180_regac4 += (i2c.twi_read(1));
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     7f6:	28 a1       	ldd	r18, Y+32	; 0x20
     7f8:	39 a1       	ldd	r19, Y+33	; 0x21
     7fa:	28 0f       	add	r18, r24
     7fc:	31 1d       	adc	r19, r1
     7fe:	39 a3       	std	Y+33, r19	; 0x21
     800:	28 a3       	std	Y+32, r18	; 0x20
	
	bmp180_regac5 = (i2c.twi_read(1) << 8);
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	c8 01       	movw	r24, r16
     806:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     80a:	1a a2       	std	Y+34, r1	; 0x22
     80c:	8b a3       	std	Y+35, r24	; 0x23
	bmp180_regac5 += (i2c.twi_read(1));
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	c8 01       	movw	r24, r16
     812:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     816:	2a a1       	ldd	r18, Y+34	; 0x22
     818:	3b a1       	ldd	r19, Y+35	; 0x23
     81a:	28 0f       	add	r18, r24
     81c:	31 1d       	adc	r19, r1
     81e:	3b a3       	std	Y+35, r19	; 0x23
     820:	2a a3       	std	Y+34, r18	; 0x22
	
	bmp180_regac6 = (i2c.twi_read(1) << 8);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	c8 01       	movw	r24, r16
     826:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     82a:	1c a2       	std	Y+36, r1	; 0x24
     82c:	8d a3       	std	Y+37, r24	; 0x25
	bmp180_regac6 += (i2c.twi_read(1));
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	c8 01       	movw	r24, r16
     832:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     836:	2c a1       	ldd	r18, Y+36	; 0x24
     838:	3d a1       	ldd	r19, Y+37	; 0x25
     83a:	28 0f       	add	r18, r24
     83c:	31 1d       	adc	r19, r1
     83e:	3d a3       	std	Y+37, r19	; 0x25
     840:	2c a3       	std	Y+36, r18	; 0x24
	
	bmp180_regb1 = (i2c.twi_read(1) << 8);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	c8 01       	movw	r24, r16
     846:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     84a:	1e 8a       	std	Y+22, r1	; 0x16
     84c:	8f 8b       	std	Y+23, r24	; 0x17
	bmp180_regb1 += (i2c.twi_read(1));
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	c8 01       	movw	r24, r16
     852:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     856:	2e 89       	ldd	r18, Y+22	; 0x16
     858:	3f 89       	ldd	r19, Y+23	; 0x17
     85a:	28 0f       	add	r18, r24
     85c:	31 1d       	adc	r19, r1
     85e:	3f 8b       	std	Y+23, r19	; 0x17
     860:	2e 8b       	std	Y+22, r18	; 0x16
	
	bmp180_regb2 = (i2c.twi_read(1) << 8);
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	c8 01       	movw	r24, r16
     866:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     86a:	18 8e       	std	Y+24, r1	; 0x18
     86c:	89 8f       	std	Y+25, r24	; 0x19
	bmp180_regb2 += (i2c.twi_read(1));
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	c8 01       	movw	r24, r16
     872:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     876:	28 8d       	ldd	r18, Y+24	; 0x18
     878:	39 8d       	ldd	r19, Y+25	; 0x19
     87a:	28 0f       	add	r18, r24
     87c:	31 1d       	adc	r19, r1
     87e:	39 8f       	std	Y+25, r19	; 0x19
     880:	28 8f       	std	Y+24, r18	; 0x18
	
	bmp180_regmb = (i2c.twi_read(1) << 8);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	c8 01       	movw	r24, r16
     886:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     88a:	1a 8e       	std	Y+26, r1	; 0x1a
     88c:	8b 8f       	std	Y+27, r24	; 0x1b
	bmp180_regmb += (i2c.twi_read(1));
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	c8 01       	movw	r24, r16
     892:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     896:	2a 8d       	ldd	r18, Y+26	; 0x1a
     898:	3b 8d       	ldd	r19, Y+27	; 0x1b
     89a:	28 0f       	add	r18, r24
     89c:	31 1d       	adc	r19, r1
     89e:	3b 8f       	std	Y+27, r19	; 0x1b
     8a0:	2a 8f       	std	Y+26, r18	; 0x1a
	
	bmp180_regmc = (i2c.twi_read(1) << 8);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	c8 01       	movw	r24, r16
     8a6:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     8aa:	1c 8e       	std	Y+28, r1	; 0x1c
     8ac:	8d 8f       	std	Y+29, r24	; 0x1d
	bmp180_regmc += (i2c.twi_read(1));
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     8b6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8b8:	3d 8d       	ldd	r19, Y+29	; 0x1d
     8ba:	28 0f       	add	r18, r24
     8bc:	31 1d       	adc	r19, r1
     8be:	3d 8f       	std	Y+29, r19	; 0x1d
     8c0:	2c 8f       	std	Y+28, r18	; 0x1c
	
	bmp180_regmd = (i2c.twi_read(1) << 8);
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	c8 01       	movw	r24, r16
     8c6:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     8ca:	1e 8e       	std	Y+30, r1	; 0x1e
     8cc:	8f 8f       	std	Y+31, r24	; 0x1f
	bmp180_regmd += (i2c.twi_read(0));
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     8d6:	2e 8d       	ldd	r18, Y+30	; 0x1e
     8d8:	3f 8d       	ldd	r19, Y+31	; 0x1f
     8da:	28 0f       	add	r18, r24
     8dc:	31 1d       	adc	r19, r1
     8de:	3f 8f       	std	Y+31, r19	; 0x1f
     8e0:	2e 8f       	std	Y+30, r18	; 0x1e
	
	i2c.twi_stop();
     8e2:	c8 01       	movw	r24, r16
     8e4:	0e 94 56 23 	call	0x46ac	; 0x46ac <_ZN3I2C8twi_stopEv>
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <_ZN6BMP180C1Ev>:


#include "BMP180.h"

// default constructor
BMP180::BMP180()
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
     8f8:	8e 96       	adiw	r24, 0x2e	; 46
     8fa:	0e 94 4d 23 	call	0x469a	; 0x469a <_ZN3I2CC1Ev>
{
	bmp180_rawtemperature = 0;
     8fe:	1e a2       	std	Y+38, r1	; 0x26
     900:	1f a2       	std	Y+39, r1	; 0x27
     902:	18 a6       	std	Y+40, r1	; 0x28
     904:	19 a6       	std	Y+41, r1	; 0x29
	bmp180_rawpressure = 0;
     906:	1a a6       	std	Y+42, r1	; 0x2a
     908:	1b a6       	std	Y+43, r1	; 0x2b
     90a:	1c a6       	std	Y+44, r1	; 0x2c
     90c:	1d a6       	std	Y+45, r1	; 0x2d
	pressure0 = PRESSURE00;
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e5       	ldi	r25, 0x50	; 80
     912:	ad e7       	ldi	r26, 0x7D	; 125
     914:	b4 e4       	ldi	r27, 0x44	; 68
     916:	8c 83       	std	Y+4, r24	; 0x04
     918:	9d 83       	std	Y+5, r25	; 0x05
     91a:	ae 83       	std	Y+6, r26	; 0x06
     91c:	bf 83       	std	Y+7, r27	; 0x07
	
	bmp180_getcalibration();
     91e:	ce 01       	movw	r24, r28
     920:	16 df       	rcall	.-468    	; 0x74e <_ZN6BMP18021bmp180_getcalibrationEv>
	
} //BMP180
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <_ZN6BMP18021bmp180_gettemperatureEv>:
	altitude  = pow(altitude,1/5.255);
	altitude  = 1-altitude;
	altitude *= 44330;
}

void BMP180::bmp180_gettemperature(){
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	8c 01       	movw	r16, r24
	//uint8_t buff[2] = {0,0};
	int32_t ut,x1,x2;

	//read raw temperature
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADTEMPERATURE);
     942:	4e e2       	ldi	r20, 0x2E	; 46
     944:	64 ef       	ldi	r22, 0xF4	; 244
     946:	e4 de       	rcall	.-568    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     948:	8f e0       	ldi	r24, 0x0F	; 15
     94a:	97 e2       	ldi	r25, 0x27	; 39
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <_ZN6BMP18021bmp180_gettemperatureEv+0x24>
     950:	00 c0       	rjmp	.+0      	; 0x952 <_ZN6BMP18021bmp180_gettemperatureEv+0x2a>
     952:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 2);
	i2c.twi_start();
     954:	e8 01       	movw	r28, r16
     956:	ae 96       	adiw	r28, 0x2e	; 46
     958:	ce 01       	movw	r24, r28
     95a:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     95e:	6e ee       	ldi	r22, 0xEE	; 238
     960:	ce 01       	movw	r24, r28
     962:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
     966:	66 ef       	ldi	r22, 0xF6	; 246
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     974:	6f ee       	ldi	r22, 0xEF	; 239
     976:	ce 01       	movw	r24, r28
     978:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	ut  = (i2c.twi_read(1)<<8);
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	ce 01       	movw	r24, r28
     980:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     984:	c8 2e       	mov	r12, r24
     986:	d1 2c       	mov	r13, r1
     988:	dc 2c       	mov	r13, r12
     98a:	cc 24       	eor	r12, r12
     98c:	0d 2c       	mov	r0, r13
     98e:	00 0c       	add	r0, r0
     990:	ee 08       	sbc	r14, r14
     992:	ff 08       	sbc	r15, r15
	ut += i2c.twi_read(0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	ce 01       	movw	r24, r28
     998:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     99c:	c8 0e       	add	r12, r24
     99e:	d1 1c       	adc	r13, r1
     9a0:	e1 1c       	adc	r14, r1
     9a2:	f1 1c       	adc	r15, r1
	i2c.twi_stop();
     9a4:	ce 01       	movw	r24, r28
     9a6:	0e 94 56 23 	call	0x46ac	; 0x46ac <_ZN3I2C8twi_stopEv>

	//calculate raw temperature
	x1	  = (ut - bmp180_regac6);
     9aa:	f8 01       	movw	r30, r16
     9ac:	84 a1       	ldd	r24, Z+36	; 0x24
     9ae:	95 a1       	ldd	r25, Z+37	; 0x25
     9b0:	a7 01       	movw	r20, r14
     9b2:	96 01       	movw	r18, r12
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	41 09       	sbc	r20, r1
     9ba:	51 09       	sbc	r21, r1
	x1	 *= bmp180_regac5;
     9bc:	a2 a1       	ldd	r26, Z+34	; 0x22
     9be:	b3 a1       	ldd	r27, Z+35	; 0x23
     9c0:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <__muluhisi3>
	x1	>>= 15;
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
     9c8:	0b 2e       	mov	r0, r27
     9ca:	bf e0       	ldi	r27, 0x0F	; 15
     9cc:	f5 94       	asr	r15
     9ce:	e7 94       	ror	r14
     9d0:	d7 94       	ror	r13
     9d2:	c7 94       	ror	r12
     9d4:	ba 95       	dec	r27
     9d6:	d1 f7       	brne	.-12     	; 0x9cc <_ZN6BMP18021bmp180_gettemperatureEv+0xa4>
     9d8:	b0 2d       	mov	r27, r0
	x2	  = (bmp180_regmc << 11);
     9da:	84 8d       	ldd	r24, Z+28	; 0x1c
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	78 2f       	mov	r23, r24
     9e2:	77 0f       	add	r23, r23
     9e4:	77 0f       	add	r23, r23
     9e6:	77 0f       	add	r23, r23
     9e8:	07 2e       	mov	r0, r23
     9ea:	00 0c       	add	r0, r0
     9ec:	88 0b       	sbc	r24, r24
     9ee:	99 0b       	sbc	r25, r25
	x2	 /= (x1 + bmp180_regmd);
     9f0:	26 8d       	ldd	r18, Z+30	; 0x1e
     9f2:	37 8d       	ldd	r19, Z+31	; 0x1f
     9f4:	49 01       	movw	r8, r18
     9f6:	33 0f       	add	r19, r19
     9f8:	aa 08       	sbc	r10, r10
     9fa:	bb 08       	sbc	r11, r11
     9fc:	a5 01       	movw	r20, r10
     9fe:	94 01       	movw	r18, r8
     a00:	2c 0d       	add	r18, r12
     a02:	3d 1d       	adc	r19, r13
     a04:	4e 1d       	adc	r20, r14
     a06:	5f 1d       	adc	r21, r15
     a08:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <__divmodsi4>
	bmp180_rawtemperature = x1 + x2;
     a0c:	d7 01       	movw	r26, r14
     a0e:	c6 01       	movw	r24, r12
     a10:	82 0f       	add	r24, r18
     a12:	93 1f       	adc	r25, r19
     a14:	a4 1f       	adc	r26, r20
     a16:	b5 1f       	adc	r27, r21
     a18:	f8 01       	movw	r30, r16
     a1a:	86 a3       	std	Z+38, r24	; 0x26
     a1c:	97 a3       	std	Z+39, r25	; 0x27
     a1e:	a0 a7       	std	Z+40, r26	; 0x28
     a20:	b1 a7       	std	Z+41, r27	; 0x29
	//Korrektur heuristisch 
	//bmp180_rawtemperature -= 3077;
	
	temperature	  = (bmp180_rawtemperature+8);
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	68 5f       	subi	r22, 0xF8	; 248
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	8f 4f       	sbci	r24, 0xFF	; 255
     a2c:	9f 4f       	sbci	r25, 0xFF	; 255
     a2e:	0e 94 95 40 	call	0x812a	; 0x812a <__floatunsisf>
	temperature	/= 16.0;
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5d e3       	ldi	r21, 0x3D	; 61
     a3a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
	temperature	 /= 10.0;
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e2       	ldi	r20, 0x20	; 32
     a44:	51 e4       	ldi	r21, 0x41	; 65
     a46:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
     a4a:	f8 01       	movw	r30, r16
     a4c:	60 87       	std	Z+8, r22	; 0x08
     a4e:	71 87       	std	Z+9, r23	; 0x09
     a50:	82 87       	std	Z+10, r24	; 0x0a
     a52:	93 87       	std	Z+11, r25	; 0x0b
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	9f 90       	pop	r9
     a6a:	8f 90       	pop	r8
     a6c:	08 95       	ret

00000a6e <_ZN6BMP18018bmp180_getpressureEv>:
	bmp180_regmd += (i2c.twi_read(0));
	
	i2c.twi_stop();
}

void BMP180::bmp180_getpressure(){
     a6e:	2f 92       	push	r2
     a70:	3f 92       	push	r3
     a72:	4f 92       	push	r4
     a74:	5f 92       	push	r5
     a76:	6f 92       	push	r6
     a78:	7f 92       	push	r7
     a7a:	8f 92       	push	r8
     a7c:	9f 92       	push	r9
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <_ZN6BMP18018bmp180_getpressureEv+0x26>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <_ZN6BMP18018bmp180_getpressureEv+0x28>
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	1c 01       	movw	r2, r24
	long up;
	int32_t x1,x2,x3,b3,b6,p;
	uint32_t b4,b7;

	bmp180_gettemperature();
     a9c:	45 df       	rcall	.-374    	; 0x928 <_ZN6BMP18021bmp180_gettemperatureEv>

	//read raw pressure
	bmp180_writemem(BMP180_REGCONTROL, BMP180_REGREADPRESSURE+(BMP180_MODE << 6));
     a9e:	44 ef       	ldi	r20, 0xF4	; 244
     aa0:	64 ef       	ldi	r22, 0xF4	; 244
     aa2:	c1 01       	movw	r24, r2
     aa4:	35 de       	rcall	.-918    	; 0x710 <_ZN6BMP18015bmp180_writememEhh>
     aa6:	8f e1       	ldi	r24, 0x1F	; 31
     aa8:	9b ec       	ldi	r25, 0xCB	; 203
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <_ZN6BMP18018bmp180_getpressureEv+0x3c>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <_ZN6BMP18018bmp180_getpressureEv+0x42>
     ab0:	00 00       	nop
	_delay_ms(2 + (3<<BMP180_MODE));
	
	//bmp180_readmem(BMP180_REGCONTROLOUTPUT, buff, 3);
	//up = ((((int32_t)buff[0] <<16) | ((int32_t)buff[1] <<8) | ((int32_t)buff[2])) >> (8-BMP180_MODE)); // uncompensated pressure value
	i2c.twi_start();
     ab2:	71 01       	movw	r14, r2
     ab4:	9e e2       	ldi	r25, 0x2E	; 46
     ab6:	e9 0e       	add	r14, r25
     ab8:	f1 1c       	adc	r15, r1
     aba:	c7 01       	movw	r24, r14
     abc:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_WRITE));
     ac0:	6e ee       	ldi	r22, 0xEE	; 238
     ac2:	c7 01       	movw	r24, r14
     ac4:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_write(BMP180_REGCONTROLOUTPUT);
     ac8:	66 ef       	ldi	r22, 0xF6	; 246
     aca:	c7 01       	movw	r24, r14
     acc:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	i2c.twi_start();
     ad0:	c7 01       	movw	r24, r14
     ad2:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
	i2c.twi_write((BMP180_ADDR | I2C_READ));
     ad6:	6f ee       	ldi	r22, 0xEF	; 239
     ad8:	c7 01       	movw	r24, r14
     ada:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
	up   = i2c.twi_read(1) * 65536;
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	c7 01       	movw	r24, r14
     ae2:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     ae6:	48 2e       	mov	r4, r24
     ae8:	51 2c       	mov	r5, r1
     aea:	61 2c       	mov	r6, r1
     aec:	71 2c       	mov	r7, r1
     aee:	32 01       	movw	r6, r4
     af0:	55 24       	eor	r5, r5
     af2:	44 24       	eor	r4, r4
	up  += i2c.twi_read(1) << 8;
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	c7 01       	movw	r24, r14
     af8:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     afc:	88 2e       	mov	r8, r24
     afe:	91 2c       	mov	r9, r1
     b00:	98 2c       	mov	r9, r8
     b02:	88 24       	eor	r8, r8
     b04:	09 2c       	mov	r0, r9
     b06:	00 0c       	add	r0, r0
     b08:	aa 08       	sbc	r10, r10
     b0a:	bb 08       	sbc	r11, r11
     b0c:	84 0c       	add	r8, r4
     b0e:	95 1c       	adc	r9, r5
     b10:	a6 1c       	adc	r10, r6
     b12:	b7 1c       	adc	r11, r7
	up  += i2c.twi_read(0);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	c7 01       	movw	r24, r14
     b18:	0e 94 6a 23 	call	0x46d4	; 0x46d4 <_ZN3I2C8twi_readEh>
     b1c:	88 0e       	add	r8, r24
     b1e:	91 1c       	adc	r9, r1
     b20:	a1 1c       	adc	r10, r1
     b22:	b1 1c       	adc	r11, r1
	up >>= (8-BMP180_MODE);
	i2c.twi_stop();
     b24:	c7 01       	movw	r24, r14
     b26:	0e 94 56 23 	call	0x46ac	; 0x46ac <_ZN3I2C8twi_stopEv>

	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
     b2a:	f1 01       	movw	r30, r2
     b2c:	46 a0       	ldd	r4, Z+38	; 0x26
     b2e:	57 a0       	ldd	r5, Z+39	; 0x27
     b30:	60 a4       	ldd	r6, Z+40	; 0x28
     b32:	71 a4       	ldd	r7, Z+41	; 0x29
     b34:	f0 ea       	ldi	r31, 0xA0	; 160
     b36:	4f 1a       	sub	r4, r31
     b38:	ff e0       	ldi	r31, 0x0F	; 15
     b3a:	5f 0a       	sbc	r5, r31
     b3c:	61 08       	sbc	r6, r1
     b3e:	71 08       	sbc	r7, r1
	x1   = b6*b6;
     b40:	a3 01       	movw	r20, r6
     b42:	92 01       	movw	r18, r4
     b44:	c3 01       	movw	r24, r6
     b46:	b2 01       	movw	r22, r4
     b48:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <__mulsi3>
	x1 >>= 12;
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	01 2e       	mov	r0, r17
     b52:	1c e0       	ldi	r17, 0x0C	; 12
     b54:	55 95       	asr	r21
     b56:	47 95       	ror	r20
     b58:	37 95       	ror	r19
     b5a:	27 95       	ror	r18
     b5c:	1a 95       	dec	r17
     b5e:	d1 f7       	brne	.-12     	; 0xb54 <_ZN6BMP18018bmp180_getpressureEv+0xe6>
     b60:	10 2d       	mov	r17, r0
     b62:	29 83       	std	Y+1, r18	; 0x01
     b64:	3a 83       	std	Y+2, r19	; 0x02
     b66:	4b 83       	std	Y+3, r20	; 0x03
     b68:	5c 83       	std	Y+4, r21	; 0x04
	x1  *= bmp180_regb2;
     b6a:	f1 01       	movw	r30, r2
     b6c:	a0 8d       	ldd	r26, Z+24	; 0x18
     b6e:	b1 8d       	ldd	r27, Z+25	; 0x19
     b70:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <__mulshisi3>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
	x1 >>= 11;
	x2   = bmp180_regac2 * b6;
     b78:	a2 89       	ldd	r26, Z+18	; 0x12
     b7a:	b3 89       	ldd	r27, Z+19	; 0x13
     b7c:	a3 01       	movw	r20, r6
     b7e:	92 01       	movw	r18, r4
     b80:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <__mulshisi3>
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
     b84:	20 89       	ldd	r18, Z+16	; 0x10
     b86:	31 89       	ldd	r19, Z+17	; 0x11
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	22 0f       	add	r18, r18
     b8e:	33 1f       	adc	r19, r19
     b90:	89 01       	movw	r16, r18
     b92:	33 0f       	add	r19, r19
     b94:	22 0b       	sbc	r18, r18
     b96:	33 0b       	sbc	r19, r19
	//calculate raw pressure
	b6   = bmp180_rawtemperature - 4000;
	x1   = b6*b6;
	x1 >>= 12;
	x1  *= bmp180_regb2;
	x1 >>= 11;
     b98:	0b 2e       	mov	r0, r27
     b9a:	bb e0       	ldi	r27, 0x0B	; 11
     b9c:	f5 94       	asr	r15
     b9e:	e7 94       	ror	r14
     ba0:	d7 94       	ror	r13
     ba2:	c7 94       	ror	r12
     ba4:	ba 95       	dec	r27
     ba6:	d1 f7       	brne	.-12     	; 0xb9c <_ZN6BMP18018bmp180_getpressureEv+0x12e>
     ba8:	b0 2d       	mov	r27, r0
	x2   = bmp180_regac2 * b6;
	x2 >>= 11;
     baa:	ab 01       	movw	r20, r22
     bac:	bc 01       	movw	r22, r24
     bae:	03 2e       	mov	r0, r19
     bb0:	3b e0       	ldi	r19, 0x0B	; 11
     bb2:	75 95       	asr	r23
     bb4:	67 95       	ror	r22
     bb6:	57 95       	ror	r21
     bb8:	47 95       	ror	r20
     bba:	3a 95       	dec	r19
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <_ZN6BMP18018bmp180_getpressureEv+0x144>
     bbe:	30 2d       	mov	r19, r0
	x3   = x1 + x2;
     bc0:	c4 0e       	add	r12, r20
     bc2:	d5 1e       	adc	r13, r21
     bc4:	e6 1e       	adc	r14, r22
     bc6:	f7 1e       	adc	r15, r23
	b3   = bmp180_regac1 * 4 +x3;
     bc8:	c0 0e       	add	r12, r16
     bca:	d1 1e       	adc	r13, r17
     bcc:	e2 1e       	adc	r14, r18
     bce:	f3 1e       	adc	r15, r19
	b3 <<= BMP180_MODE;
     bd0:	cc 0c       	add	r12, r12
     bd2:	dd 1c       	adc	r13, r13
     bd4:	ee 1c       	adc	r14, r14
     bd6:	ff 1c       	adc	r15, r15
     bd8:	cc 0c       	add	r12, r12
     bda:	dd 1c       	adc	r13, r13
     bdc:	ee 1c       	adc	r14, r14
     bde:	ff 1c       	adc	r15, r15
     be0:	cc 0c       	add	r12, r12
     be2:	dd 1c       	adc	r13, r13
     be4:	ee 1c       	adc	r14, r14
     be6:	ff 1c       	adc	r15, r15
	b3  += 2;
     be8:	f2 e0       	ldi	r31, 0x02	; 2
     bea:	cf 0e       	add	r12, r31
     bec:	d1 1c       	adc	r13, r1
     bee:	e1 1c       	adc	r14, r1
     bf0:	f1 1c       	adc	r15, r1
	b3  /= 4;
	x1   = bmp180_regac3 * b6;
     bf2:	f1 01       	movw	r30, r2
     bf4:	a4 89       	ldd	r26, Z+20	; 0x14
     bf6:	b5 89       	ldd	r27, Z+21	; 0x15
     bf8:	a3 01       	movw	r20, r6
     bfa:	92 01       	movw	r18, r4
     bfc:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <__mulshisi3>
     c00:	2b 01       	movw	r4, r22
     c02:	3c 01       	movw	r6, r24
	x1 >>= 13;
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
     c04:	a6 89       	ldd	r26, Z+22	; 0x16
     c06:	b7 89       	ldd	r27, Z+23	; 0x17
     c08:	29 81       	ldd	r18, Y+1	; 0x01
     c0a:	3a 81       	ldd	r19, Y+2	; 0x02
     c0c:	4b 81       	ldd	r20, Y+3	; 0x03
     c0e:	5c 81       	ldd	r21, Y+4	; 0x04
     c10:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <__mulshisi3>
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  /= 4;
	x1   = bmp180_regac3 * b6;
	x1 >>= 13;
     c14:	93 01       	movw	r18, r6
     c16:	82 01       	movw	r16, r4
     c18:	0f 2e       	mov	r0, r31
     c1a:	fd e0       	ldi	r31, 0x0D	; 13
     c1c:	35 95       	asr	r19
     c1e:	27 95       	ror	r18
     c20:	17 95       	ror	r17
     c22:	07 95       	ror	r16
     c24:	fa 95       	dec	r31
     c26:	d1 f7       	brne	.-12     	; 0xc1c <_ZN6BMP18018bmp180_getpressureEv+0x1ae>
     c28:	f0 2d       	mov	r31, r0
	x2   = b6*b6;
	x2 >>= 12;
	x2  *= bmp180_regb1;
	x2 >>= 10;
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	07 2e       	mov	r0, r23
     c30:	7a e0       	ldi	r23, 0x0A	; 10
     c32:	b5 95       	asr	r27
     c34:	a7 95       	ror	r26
     c36:	97 95       	ror	r25
     c38:	87 95       	ror	r24
     c3a:	7a 95       	dec	r23
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <_ZN6BMP18018bmp180_getpressureEv+0x1c4>
     c3e:	70 2d       	mov	r23, r0
	x3   = x1 + x2;
     c40:	80 0f       	add	r24, r16
     c42:	91 1f       	adc	r25, r17
     c44:	a2 1f       	adc	r26, r18
     c46:	b3 1f       	adc	r27, r19
	x3  += 2;
     c48:	02 96       	adiw	r24, 0x02	; 2
     c4a:	a1 1d       	adc	r26, r1
     c4c:	b1 1d       	adc	r27, r1
	x3 >>= 2;
     c4e:	b5 95       	asr	r27
     c50:	a7 95       	ror	r26
     c52:	97 95       	ror	r25
     c54:	87 95       	ror	r24
     c56:	b5 95       	asr	r27
     c58:	a7 95       	ror	r26
     c5a:	97 95       	ror	r25
     c5c:	87 95       	ror	r24
	b4   = (uint32_t)(x3+32768);
     c5e:	9c 01       	movw	r18, r24
     c60:	ad 01       	movw	r20, r26
     c62:	30 58       	subi	r19, 0x80	; 128
     c64:	4f 4f       	sbci	r20, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
	b4  *= bmp180_regac4;
     c68:	a0 a1       	ldd	r26, Z+32	; 0x20
     c6a:	b1 a1       	ldd	r27, Z+33	; 0x21
     c6c:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <__muluhisi3>
	b4 >>= 15;
     c70:	2b 01       	movw	r4, r22
     c72:	3c 01       	movw	r6, r24
     c74:	03 2e       	mov	r0, r19
     c76:	3f e0       	ldi	r19, 0x0F	; 15
     c78:	76 94       	lsr	r7
     c7a:	67 94       	ror	r6
     c7c:	57 94       	ror	r5
     c7e:	47 94       	ror	r4
     c80:	3a 95       	dec	r19
     c82:	d1 f7       	brne	.-12     	; 0xc78 <_ZN6BMP18018bmp180_getpressureEv+0x20a>
     c84:	30 2d       	mov	r19, r0
	i2c.twi_start();
	i2c.twi_write((BMP180_ADDR | I2C_READ));
	up   = i2c.twi_read(1) * 65536;
	up  += i2c.twi_read(1) << 8;
	up  += i2c.twi_read(0);
	up >>= (8-BMP180_MODE);
     c86:	b5 01       	movw	r22, r10
     c88:	a4 01       	movw	r20, r8
     c8a:	68 94       	set
     c8c:	14 f8       	bld	r1, 4
     c8e:	75 95       	asr	r23
     c90:	67 95       	ror	r22
     c92:	57 95       	ror	r21
     c94:	47 95       	ror	r20
     c96:	16 94       	lsr	r1
     c98:	d1 f7       	brne	.-12     	; 0xc8e <_ZN6BMP18018bmp180_getpressureEv+0x220>
	x2 >>= 11;
	x3   = x1 + x2;
	b3   = bmp180_regac1 * 4 +x3;
	b3 <<= BMP180_MODE;
	b3  += 2;
	b3  /= 4;
     c9a:	d7 01       	movw	r26, r14
     c9c:	c6 01       	movw	r24, r12
     c9e:	ff 20       	and	r15, r15
     ca0:	1c f4       	brge	.+6      	; 0xca8 <_ZN6BMP18018bmp180_getpressureEv+0x23a>
     ca2:	03 96       	adiw	r24, 0x03	; 3
     ca4:	a1 1d       	adc	r26, r1
     ca6:	b1 1d       	adc	r27, r1
     ca8:	b5 95       	asr	r27
     caa:	a7 95       	ror	r26
     cac:	97 95       	ror	r25
     cae:	87 95       	ror	r24
     cb0:	b5 95       	asr	r27
     cb2:	a7 95       	ror	r26
     cb4:	97 95       	ror	r25
     cb6:	87 95       	ror	r24
	x3  += 2;
	x3 >>= 2;
	b4   = (uint32_t)(x3+32768);
	b4  *= bmp180_regac4;
	b4 >>= 15;
	b7   = ((uint32_t)up - b3);
     cb8:	9a 01       	movw	r18, r20
     cba:	ab 01       	movw	r20, r22
     cbc:	28 1b       	sub	r18, r24
     cbe:	39 0b       	sbc	r19, r25
     cc0:	4a 0b       	sbc	r20, r26
     cc2:	5b 0b       	sbc	r21, r27
	b7  *= (50000 >> BMP180_MODE);
     cc4:	aa e6       	ldi	r26, 0x6A	; 106
     cc6:	b8 e1       	ldi	r27, 0x18	; 24
     cc8:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <__muluhisi3>
	if (b7 < 0x80000000){
     ccc:	99 23       	and	r25, r25
     cce:	5c f0       	brlt	.+22     	; 0xce6 <_ZN6BMP18018bmp180_getpressureEv+0x278>
		p  = b7*2;
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	88 1f       	adc	r24, r24
     cd6:	99 1f       	adc	r25, r25
		p /= b4;
     cd8:	a3 01       	movw	r20, r6
     cda:	92 01       	movw	r18, r4
     cdc:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <__udivmodsi4>
     ce0:	69 01       	movw	r12, r18
     ce2:	7a 01       	movw	r14, r20
     ce4:	0a c0       	rjmp	.+20     	; 0xcfa <_ZN6BMP18018bmp180_getpressureEv+0x28c>
	}
	else {
		p  = b7/b4;
     ce6:	a3 01       	movw	r20, r6
     ce8:	92 01       	movw	r18, r4
     cea:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <__udivmodsi4>
		p *= 2;
     cee:	69 01       	movw	r12, r18
     cf0:	7a 01       	movw	r14, r20
     cf2:	cc 0c       	add	r12, r12
     cf4:	dd 1c       	adc	r13, r13
     cf6:	ee 1c       	adc	r14, r14
     cf8:	ff 1c       	adc	r15, r15
	}
	x1   = (p >> 8);
     cfa:	99 27       	eor	r25, r25
     cfc:	f7 fc       	sbrc	r15, 7
     cfe:	9a 95       	dec	r25
     d00:	8f 2d       	mov	r24, r15
     d02:	7e 2d       	mov	r23, r14
     d04:	6d 2d       	mov	r22, r13
	x1  *= (p >> 8);
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <__mulsi3>
     d0e:	9b 01       	movw	r18, r22
     d10:	ac 01       	movw	r20, r24
	x1   = (x1 * 3038);
     d12:	ae ed       	ldi	r26, 0xDE	; 222
     d14:	bb e0       	ldi	r27, 0x0B	; 11
     d16:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <__muluhisi3>
     d1a:	4b 01       	movw	r8, r22
     d1c:	5c 01       	movw	r10, r24
	x1 >>= 10;
	x2   = (-7357 * p);
     d1e:	a3 e4       	ldi	r26, 0x43	; 67
     d20:	b3 ee       	ldi	r27, 0xE3	; 227
     d22:	a7 01       	movw	r20, r14
     d24:	96 01       	movw	r18, r12
     d26:	0e 94 5c 47 	call	0x8eb8	; 0x8eb8 <__mulohisi3>
		p *= 2;
	}
	x1   = (p >> 8);
	x1  *= (p >> 8);
	x1   = (x1 * 3038);
	x1 >>= 10;
     d2a:	07 2e       	mov	r0, r23
     d2c:	7a e0       	ldi	r23, 0x0A	; 10
     d2e:	b5 94       	asr	r11
     d30:	a7 94       	ror	r10
     d32:	97 94       	ror	r9
     d34:	87 94       	ror	r8
     d36:	7a 95       	dec	r23
     d38:	d1 f7       	brne	.-12     	; 0xd2e <_ZN6BMP18018bmp180_getpressureEv+0x2c0>
     d3a:	70 2d       	mov	r23, r0
	x2   = (-7357 * p);
	x2 >>= 16;
     d3c:	bb 27       	eor	r27, r27
     d3e:	97 fd       	sbrc	r25, 7
     d40:	b0 95       	com	r27
     d42:	ab 2f       	mov	r26, r27
	bmp180_rawpressure   = (x1 + x2 + 3791);
     d44:	88 0d       	add	r24, r8
     d46:	99 1d       	adc	r25, r9
     d48:	aa 1d       	adc	r26, r10
     d4a:	bb 1d       	adc	r27, r11
     d4c:	81 53       	subi	r24, 0x31	; 49
     d4e:	91 4f       	sbci	r25, 0xF1	; 241
     d50:	af 4f       	sbci	r26, 0xFF	; 255
     d52:	bf 4f       	sbci	r27, 0xFF	; 255
	bmp180_rawpressure >>= 4;
     d54:	68 94       	set
     d56:	13 f8       	bld	r1, 3
     d58:	b6 95       	lsr	r27
     d5a:	a7 95       	ror	r26
     d5c:	97 95       	ror	r25
     d5e:	87 95       	ror	r24
     d60:	16 94       	lsr	r1
     d62:	d1 f7       	brne	.-12     	; 0xd58 <_ZN6BMP18018bmp180_getpressureEv+0x2ea>
	bmp180_rawpressure  += p;
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	6c 0d       	add	r22, r12
     d6a:	7d 1d       	adc	r23, r13
     d6c:	8e 1d       	adc	r24, r14
     d6e:	9f 1d       	adc	r25, r15
     d70:	f1 01       	movw	r30, r2
     d72:	62 a7       	std	Z+42, r22	; 0x2a
     d74:	73 a7       	std	Z+43, r23	; 0x2b
     d76:	84 a7       	std	Z+44, r24	; 0x2c
     d78:	95 a7       	std	Z+45, r25	; 0x2d
	//Korrektur heuristisch 
	//bmp180_rawpressure  -= 23700;
	
	pressure = (bmp180_rawpressure+BMP180_UNITPAOFFSET)/100.0;
     d7a:	0e 94 95 40 	call	0x812a	; 0x812a <__floatunsisf>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	48 ec       	ldi	r20, 0xC8	; 200
     d84:	52 e4       	ldi	r21, 0x42	; 66
     d86:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
     d8a:	f1 01       	movw	r30, r2
     d8c:	60 83       	st	Z, r22
     d8e:	71 83       	std	Z+1, r23	; 0x01
     d90:	82 83       	std	Z+2, r24	; 0x02
     d92:	93 83       	std	Z+3, r25	; 0x03
	
}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	08 95       	ret

00000dc2 <_ZN6BMP18018bmp180_getaltitudeEv>:

void BMP180::bmp180_getaltitude(){
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
	bmp180_getpressure();
     dc8:	52 de       	rcall	.-860    	; 0xa6e <_ZN6BMP18018bmp180_getpressureEv>
	altitude  = pressure/pressure0;
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	4e 81       	ldd	r20, Y+6	; 0x06
     dd0:	5f 81       	ldd	r21, Y+7	; 0x07
     dd2:	68 81       	ld	r22, Y
     dd4:	79 81       	ldd	r23, Y+1	; 0x01
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	9b 81       	ldd	r25, Y+3	; 0x03
     dda:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
	altitude  = pow(altitude,1/5.255);
     dde:	2e ea       	ldi	r18, 0xAE	; 174
     de0:	3c ed       	ldi	r19, 0xDC	; 220
     de2:	42 e4       	ldi	r20, 0x42	; 66
     de4:	5e e3       	ldi	r21, 0x3E	; 62
     de6:	0e 94 13 42 	call	0x8426	; 0x8426 <pow>
     dea:	9b 01       	movw	r18, r22
     dec:	ac 01       	movw	r20, r24
	altitude  = 1-altitude;
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	80 e8       	ldi	r24, 0x80	; 128
     df4:	9f e3       	ldi	r25, 0x3F	; 63
     df6:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <__subsf3>
	altitude *= 44330;
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	3a e2       	ldi	r19, 0x2A	; 42
     dfe:	4d e2       	ldi	r20, 0x2D	; 45
     e00:	57 e4       	ldi	r21, 0x47	; 71
     e02:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
     e06:	6c 87       	std	Y+12, r22	; 0x0c
     e08:	7d 87       	std	Y+13, r23	; 0x0d
     e0a:	8e 87       	std	Y+14, r24	; 0x0e
     e0c:	9f 87       	std	Y+15, r25	; 0x0f
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
     e14:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<PORTB7) | (1<<PORTB5));// | (1<<PORTB4));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
     e16:	84 b1       	in	r24, 0x04	; 4
     e18:	8f 75       	andi	r24, 0x5F	; 95
     e1a:	84 b9       	out	0x04, r24	; 4
	CS_HIGH();
     e1c:	2c 9a       	sbi	0x05, 4	; 5
     e1e:	08 95       	ret

00000e20 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     e20:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e22:	0d b4       	in	r0, 0x2d	; 45
     e24:	07 fe       	sbrs	r0, 7
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <xchg_spi+0x2>
	return SPDR;
     e28:	8e b5       	in	r24, 0x2e	; 46
}
     e2a:	08 95       	ret

00000e2c <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     e2c:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	f7 cf       	rjmp	.-18     	; 0xe20 <xchg_spi>
     e32:	08 95       	ret

00000e34 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     e34:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	f3 df       	rcall	.-26     	; 0xe20 <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
     e3a:	82 e3       	ldi	r24, 0x32	; 50
     e3c:	80 93 29 04 	sts	0x0429, r24
	do{
		d = xchg_spi(0xFF);
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	ee df       	rcall	.-36     	; 0xe20 <xchg_spi>
	}while (d != 0xFF && Timer2);
     e44:	8f 3f       	cpi	r24, 0xFF	; 255
     e46:	41 f0       	breq	.+16     	; 0xe58 <select+0x24>
     e48:	80 91 29 04 	lds	r24, 0x0429
     e4c:	81 11       	cpse	r24, r1
     e4e:	f8 cf       	rjmp	.-16     	; 0xe40 <select+0xc>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
     e50:	ed df       	rcall	.-38     	; 0xe2c <deselect>
	return 0;	/* Timeout */
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     e5c:	08 95       	ret

00000e5e <rcvr_datablock>:
static
int rcvr_datablock (
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count (must be multiple of 4) */
)
{
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ec 01       	movw	r28, r24
     e68:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     e6a:	84 e1       	ldi	r24, 0x14	; 20
     e6c:	80 93 2a 04 	sts	0x042A, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	d6 df       	rcall	.-84     	; 0xe20 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     e74:	8f 3f       	cpi	r24, 0xFF	; 255
     e76:	39 f4       	brne	.+14     	; 0xe86 <rcvr_datablock+0x28>
     e78:	90 91 2a 04 	lds	r25, 0x042A
     e7c:	91 11       	cpse	r25, r1
     e7e:	f8 cf       	rjmp	.-16     	; 0xe70 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	20 c0       	rjmp	.+64     	; 0xec6 <rcvr_datablock+0x68>
     e86:	8e 3f       	cpi	r24, 0xFE	; 254
     e88:	e1 f4       	brne	.+56     	; 0xec2 <rcvr_datablock+0x64>
void rcvr_spi_multi (
BYTE *p,	/* Data buffer */
UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	cli();
     e8a:	f8 94       	cli
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	8e bd       	out	0x2e, r24	; 46
     e90:	0d b4       	in	r0, 0x2d	; 45
     e92:	07 fe       	sbrs	r0, 7
     e94:	fd cf       	rjmp	.-6      	; 0xe90 <rcvr_datablock+0x32>
     e96:	9e b5       	in	r25, 0x2e	; 46
     e98:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     e9a:	8e bd       	out	0x2e, r24	; 46
     e9c:	0d b4       	in	r0, 0x2d	; 45
     e9e:	07 fe       	sbrs	r0, 7
     ea0:	fd cf       	rjmp	.-6      	; 0xe9c <rcvr_datablock+0x3e>
     ea2:	22 96       	adiw	r28, 0x02	; 2
     ea4:	9e b5       	in	r25, 0x2e	; 46
     ea6:	fe 01       	movw	r30, r28
     ea8:	31 97       	sbiw	r30, 0x01	; 1
     eaa:	90 83       	st	Z, r25
	} while (cnt -= 2);
     eac:	02 50       	subi	r16, 0x02	; 2
     eae:	11 09       	sbc	r17, r1
     eb0:	71 f7       	brne	.-36     	; 0xe8e <rcvr_datablock+0x30>
	sei();
     eb2:	78 94       	sei
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	b4 df       	rcall	.-152    	; 0xe20 <xchg_spi>
	xchg_spi(0xFF);
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	b2 df       	rcall	.-156    	; 0xe20 <xchg_spi>

	return 1;						/* Return with success */
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <rcvr_datablock+0x68>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, return with error */
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	08 95       	ret

00000ed0 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	c8 2f       	mov	r28, r24
     edc:	d4 2f       	mov	r29, r20
     ede:	15 2f       	mov	r17, r21
     ee0:	06 2f       	mov	r16, r22
     ee2:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     ee4:	88 23       	and	r24, r24
     ee6:	4c f4       	brge	.+18     	; 0xefa <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	ba 01       	movw	r22, r20
     eee:	87 e3       	ldi	r24, 0x37	; 55
     ef0:	ef df       	rcall	.-34     	; 0xed0 <send_cmd>
		if (res > 1) return res;
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	08 f0       	brcs	.+2      	; 0xef8 <send_cmd+0x28>
     ef6:	3c c0       	rjmp	.+120    	; 0xf70 <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     ef8:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     efa:	cc 30       	cpi	r28, 0x0C	; 12
     efc:	f1 f0       	breq	.+60     	; 0xf3a <send_cmd+0x6a>
		deselect();
     efe:	96 df       	rcall	.-212    	; 0xe2c <deselect>
		if (!select()) return 0xFF;
     f00:	99 df       	rcall	.-206    	; 0xe34 <select>
     f02:	89 2b       	or	r24, r25
     f04:	c1 f0       	breq	.+48     	; 0xf36 <send_cmd+0x66>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     f06:	8c 2f       	mov	r24, r28
     f08:	80 64       	ori	r24, 0x40	; 64
     f0a:	8a df       	rcall	.-236    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     f0c:	8f 2d       	mov	r24, r15
     f0e:	88 df       	rcall	.-240    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     f10:	80 2f       	mov	r24, r16
     f12:	86 df       	rcall	.-244    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     f14:	81 2f       	mov	r24, r17
     f16:	84 df       	rcall	.-248    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     f18:	8d 2f       	mov	r24, r29
     f1a:	82 df       	rcall	.-252    	; 0xe20 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     f1c:	cc 23       	and	r28, r28
     f1e:	29 f1       	breq	.+74     	; 0xf6a <send_cmd+0x9a>
     f20:	21 c0       	rjmp	.+66     	; 0xf64 <send_cmd+0x94>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	7d df       	rcall	.-262    	; 0xe20 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     f26:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	7a df       	rcall	.-268    	; 0xe20 <xchg_spi>
	while ((res & 0x80) && --n);
     f2c:	88 23       	and	r24, r24
     f2e:	04 f5       	brge	.+64     	; 0xf70 <send_cmd+0xa0>
     f30:	c1 50       	subi	r28, 0x01	; 1
     f32:	d1 f7       	brne	.-12     	; 0xf28 <send_cmd+0x58>
     f34:	1d c0       	rjmp	.+58     	; 0xf70 <send_cmd+0xa0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	1b c0       	rjmp	.+54     	; 0xf70 <send_cmd+0xa0>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     f3a:	8c e4       	ldi	r24, 0x4C	; 76
     f3c:	71 df       	rcall	.-286    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     f3e:	8f 2d       	mov	r24, r15
     f40:	6f df       	rcall	.-290    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     f42:	80 2f       	mov	r24, r16
     f44:	6d df       	rcall	.-294    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     f46:	81 2f       	mov	r24, r17
     f48:	6b df       	rcall	.-298    	; 0xe20 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     f4a:	8d 2f       	mov	r24, r29
     f4c:	69 df       	rcall	.-302    	; 0xe20 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	67 df       	rcall	.-306    	; 0xe20 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     f52:	cc 30       	cpi	r28, 0x0C	; 12
     f54:	31 f3       	breq	.-52     	; 0xf22 <send_cmd+0x52>
     f56:	e7 cf       	rjmp	.-50     	; 0xf26 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     f58:	87 e8       	ldi	r24, 0x87	; 135
     f5a:	62 df       	rcall	.-316    	; 0xe20 <xchg_spi>
     f5c:	e4 cf       	rjmp	.-56     	; 0xf26 <send_cmd+0x56>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	5f df       	rcall	.-322    	; 0xe20 <xchg_spi>
     f62:	e1 cf       	rjmp	.-62     	; 0xf26 <send_cmd+0x56>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     f64:	c8 30       	cpi	r28, 0x08	; 8
     f66:	c1 f3       	breq	.-16     	; 0xf58 <send_cmd+0x88>
     f68:	fa cf       	rjmp	.-12     	; 0xf5e <send_cmd+0x8e>
	xchg_spi(n);
     f6a:	85 e9       	ldi	r24, 0x95	; 149
     f6c:	59 df       	rcall	.-334    	; 0xe20 <xchg_spi>
     f6e:	db cf       	rjmp	.-74     	; 0xf26 <send_cmd+0x56>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	08 95       	ret

00000f7c <xmit_datablock>:
static
int xmit_datablock (
const BYTE *buff,	/* 512 byte data block to be transmitted */
BYTE token			/* Data/Stop token */
)
{
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
     f86:	92 e3       	ldi	r25, 0x32	; 50
     f88:	90 93 29 04 	sts	0x0429, r25
	do{
		d = xchg_spi(0xFF);
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	48 df       	rcall	.-368    	; 0xe20 <xchg_spi>
	}while (d != 0xFF && Timer2);
     f90:	8f 3f       	cpi	r24, 0xFF	; 255
     f92:	31 f0       	breq	.+12     	; 0xfa0 <xmit_datablock+0x24>
     f94:	90 91 29 04 	lds	r25, 0x0429
     f98:	91 11       	cpse	r25, r1
     f9a:	f8 cf       	rjmp	.-16     	; 0xf8c <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	28 c0       	rjmp	.+80     	; 0xff0 <xmit_datablock+0x74>

	xchg_spi(token);					/* Xmit data token */
     fa0:	81 2f       	mov	r24, r17
     fa2:	3e df       	rcall	.-388    	; 0xe20 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     fa4:	1d 3f       	cpi	r17, 0xFD	; 253
     fa6:	11 f1       	breq	.+68     	; 0xfec <xmit_datablock+0x70>
void xmit_spi_multi (
const BYTE *p,	/* Data block to be sent */
UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	cli();
     fa8:	f8 94       	cli
     faa:	9e 01       	movw	r18, r28
     fac:	3e 5f       	subi	r19, 0xFE	; 254
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     fae:	88 81       	ld	r24, Y
     fb0:	8e bd       	out	0x2e, r24	; 46
     fb2:	0d b4       	in	r0, 0x2d	; 45
     fb4:	07 fe       	sbrs	r0, 7
     fb6:	fd cf       	rjmp	.-6      	; 0xfb2 <xmit_datablock+0x36>
     fb8:	22 96       	adiw	r28, 0x02	; 2
     fba:	fe 01       	movw	r30, r28
     fbc:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     fbe:	80 81       	ld	r24, Z
     fc0:	8e bd       	out	0x2e, r24	; 46
     fc2:	0d b4       	in	r0, 0x2d	; 45
     fc4:	07 fe       	sbrs	r0, 7
     fc6:	fd cf       	rjmp	.-6      	; 0xfc2 <xmit_datablock+0x46>
	} while (cnt -= 2);
     fc8:	2c 17       	cp	r18, r28
     fca:	3d 07       	cpc	r19, r29
     fcc:	81 f7       	brne	.-32     	; 0xfae <xmit_datablock+0x32>
	sei();
     fce:	78 94       	sei
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, CLUSTERSIZE);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	26 df       	rcall	.-436    	; 0xe20 <xchg_spi>
		xchg_spi(0xFF);
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	24 df       	rcall	.-440    	; 0xe20 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	22 df       	rcall	.-444    	; 0xe20 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     fdc:	28 2f       	mov	r18, r24
     fde:	2f 71       	andi	r18, 0x1F	; 31
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	25 30       	cpi	r18, 0x05	; 5
     fe6:	21 f0       	breq	.+8      	; 0xff0 <xmit_datablock+0x74>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <xmit_datablock+0x74>
		return 0;
	}

	return 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	08 95       	ret

00000ff8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	00 d0       	rcall	.+0      	; 0x100a <disk_initialize+0x12>
    100a:	00 d0       	rcall	.+0      	; 0x100c <disk_initialize+0x14>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    1010:	81 11       	cpse	r24, r1
    1012:	9b c0       	rjmp	.+310    	; 0x114a <disk_initialize+0x152>
	power_off();						/* Turn off the socket power to reset the card */
    1014:	ff de       	rcall	.-514    	; 0xe14 <power_off>
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
    1016:	80 91 06 01 	lds	r24, 0x0106
    101a:	82 ff       	sbrs	r24, 2
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <disk_initialize+0x2c>
    101e:	80 91 06 01 	lds	r24, 0x0106
    1022:	9e c0       	rjmp	.+316    	; 0x1160 <disk_initialize+0x168>

static
void power_on (void)
{
	//PORTB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);	/* Configure SCK/MOSI/CS as output */
	DDRB |= (1<<PORTB7) | (1<<PORTB5) | (1<<PORTB4);
    1024:	84 b1       	in	r24, 0x04	; 4
    1026:	80 6b       	ori	r24, 0xB0	; 176
    1028:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PORTB6);
    102a:	26 98       	cbi	0x04, 6	; 4
	CS_HIGH();
    102c:	2c 9a       	sbi	0x05, 4	; 5

	SPSR = 0x01;			/* SPI 2x mode */
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	8d bd       	out	0x2d, r24	; 45
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    1032:	82 e5       	ldi	r24, 0x52	; 82
    1034:	8c bd       	out	0x2c, r24	; 44
    1036:	1a e0       	ldi	r17, 0x0A	; 10
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & (1<<STA_NODISK)) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
//	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	f2 de       	rcall	.-540    	; 0xe20 <xchg_spi>
    103c:	11 50       	subi	r17, 0x01	; 1
    103e:	e1 f7       	brne	.-8      	; 0x1038 <disk_initialize+0x40>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	ba 01       	movw	r22, r20
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	43 df       	rcall	.-378    	; 0xed0 <send_cmd>
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	09 f0       	breq	.+2      	; 0x1050 <disk_initialize+0x58>
    104e:	84 c0       	rjmp	.+264    	; 0x1158 <disk_initialize+0x160>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    1050:	84 e6       	ldi	r24, 0x64	; 100
    1052:	80 93 2a 04 	sts	0x042A, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    1056:	4a ea       	ldi	r20, 0xAA	; 170
    1058:	51 e0       	ldi	r21, 0x01	; 1
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	37 df       	rcall	.-402    	; 0xed0 <send_cmd>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	09 f0       	breq	.+2      	; 0x1068 <disk_initialize+0x70>
    1066:	3f c0       	rjmp	.+126    	; 0x10e6 <disk_initialize+0xee>
    1068:	ce 01       	movw	r24, r28
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	6c 01       	movw	r12, r24
    106e:	7e 01       	movw	r14, r28
    1070:	95 e0       	ldi	r25, 0x05	; 5
    1072:	e9 0e       	add	r14, r25
    1074:	f1 1c       	adc	r15, r1
    1076:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	d2 de       	rcall	.-604    	; 0xe20 <xchg_spi>
    107c:	f8 01       	movw	r30, r16
    107e:	81 93       	st	Z+, r24
    1080:	8f 01       	movw	r16, r30
    1082:	ee 15       	cp	r30, r14
    1084:	ff 05       	cpc	r31, r15
    1086:	c1 f7       	brne	.-16     	; 0x1078 <disk_initialize+0x80>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	09 f0       	breq	.+2      	; 0x1090 <disk_initialize+0x98>
    108e:	64 c0       	rjmp	.+200    	; 0x1158 <disk_initialize+0x160>
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	8a 3a       	cpi	r24, 0xAA	; 170
    1094:	09 f0       	breq	.+2      	; 0x1098 <disk_initialize+0xa0>
    1096:	60 c0       	rjmp	.+192    	; 0x1158 <disk_initialize+0x160>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1098:	80 91 2a 04 	lds	r24, 0x042A
    109c:	88 23       	and	r24, r24
    109e:	41 f0       	breq	.+16     	; 0x10b0 <disk_initialize+0xb8>
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e4       	ldi	r23, 0x40	; 64
    10a8:	89 ea       	ldi	r24, 0xA9	; 169
    10aa:	12 df       	rcall	.-476    	; 0xed0 <send_cmd>
    10ac:	81 11       	cpse	r24, r1
    10ae:	f4 cf       	rjmp	.-24     	; 0x1098 <disk_initialize+0xa0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    10b0:	80 91 2a 04 	lds	r24, 0x042A
    10b4:	88 23       	and	r24, r24
    10b6:	09 f4       	brne	.+2      	; 0x10ba <disk_initialize+0xc2>
    10b8:	4f c0       	rjmp	.+158    	; 0x1158 <disk_initialize+0x160>
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	ba 01       	movw	r22, r20
    10c0:	8a e3       	ldi	r24, 0x3A	; 58
    10c2:	06 df       	rcall	.-500    	; 0xed0 <send_cmd>
    10c4:	81 11       	cpse	r24, r1
    10c6:	48 c0       	rjmp	.+144    	; 0x1158 <disk_initialize+0x160>
    10c8:	76 01       	movw	r14, r12
    10ca:	14 e0       	ldi	r17, 0x04	; 4
    10cc:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	a7 de       	rcall	.-690    	; 0xe20 <xchg_spi>
    10d2:	f7 01       	movw	r30, r14
    10d4:	81 93       	st	Z+, r24
    10d6:	7f 01       	movw	r14, r30
    10d8:	1e 13       	cpse	r17, r30
    10da:	f9 cf       	rjmp	.-14     	; 0x10ce <disk_initialize+0xd6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	86 fd       	sbrc	r24, 6
    10e0:	36 c0       	rjmp	.+108    	; 0x114e <disk_initialize+0x156>
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	35 c0       	rjmp	.+106    	; 0x1150 <disk_initialize+0x158>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	ba 01       	movw	r22, r20
    10ec:	89 ea       	ldi	r24, 0xA9	; 169
    10ee:	f0 de       	rcall	.-544    	; 0xed0 <send_cmd>
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	18 f0       	brcs	.+6      	; 0x10fa <disk_initialize+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    10f4:	01 e0       	ldi	r16, 0x01	; 1
    10f6:	11 e0       	ldi	r17, 0x01	; 1
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <disk_initialize+0x106>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    10fa:	02 e0       	ldi	r16, 0x02	; 2
    10fc:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    10fe:	90 91 2a 04 	lds	r25, 0x042A
    1102:	99 23       	and	r25, r25
    1104:	39 f0       	breq	.+14     	; 0x1114 <disk_initialize+0x11c>
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	ba 01       	movw	r22, r20
    110c:	81 2f       	mov	r24, r17
    110e:	e0 de       	rcall	.-576    	; 0xed0 <send_cmd>
    1110:	81 11       	cpse	r24, r1
    1112:	f5 cf       	rjmp	.-22     	; 0x10fe <disk_initialize+0x106>
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
    1114:	80 91 2a 04 	lds	r24, 0x042A
    1118:	88 23       	and	r24, r24
    111a:	f1 f0       	breq	.+60     	; 0x1158 <disk_initialize+0x160>
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	52 e0       	ldi	r21, 0x02	; 2
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	80 e1       	ldi	r24, 0x10	; 16
    1126:	d4 de       	rcall	.-600    	; 0xed0 <send_cmd>
    1128:	81 11       	cpse	r24, r1
    112a:	16 c0       	rjmp	.+44     	; 0x1158 <disk_initialize+0x160>
				ty = 0;
		}
	}
	CardType = ty;
    112c:	00 93 28 04 	sts	0x0428, r16
	deselect();
    1130:	7d de       	rcall	.-774    	; 0xe2c <deselect>

	if (ty) {			/* Initialization succeded */
    1132:	00 23       	and	r16, r16
    1134:	31 f0       	breq	.+12     	; 0x1142 <disk_initialize+0x14a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    1136:	80 91 06 01 	lds	r24, 0x0106
    113a:	8e 7f       	andi	r24, 0xFE	; 254
    113c:	80 93 06 01 	sts	0x0106, r24
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <disk_initialize+0x14c>
//		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
    1142:	68 de       	rcall	.-816    	; 0xe14 <power_off>
	}

	return Stat;
    1144:	80 91 06 01 	lds	r24, 0x0106
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <disk_initialize+0x168>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    114e:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1150:	80 93 28 04 	sts	0x0428, r24
	deselect();
    1154:	6b de       	rcall	.-810    	; 0xe2c <deselect>
    1156:	ef cf       	rjmp	.-34     	; 0x1136 <disk_initialize+0x13e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, CLUSTERSIZE) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1158:	10 92 28 04 	sts	0x0428, r1
	deselect();
    115c:	67 de       	rcall	.-818    	; 0xe2c <deselect>
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <disk_initialize+0x14a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	08 95       	ret

0000117a <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    117a:	81 11       	cpse	r24, r1
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <disk_status+0xa>
	return Stat;
    117e:	80 91 06 01 	lds	r24, 0x0106
    1182:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    1184:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    1186:	08 95       	ret

00001188 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    1194:	81 11       	cpse	r24, r1
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <disk_read+0x8e>
    1198:	01 15       	cp	r16, r1
    119a:	11 05       	cpc	r17, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <disk_read+0x18>
    119e:	3d c0       	rjmp	.+122    	; 0x121a <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    11a0:	80 91 06 01 	lds	r24, 0x0106
    11a4:	80 fd       	sbrc	r24, 0
    11a6:	3b c0       	rjmp	.+118    	; 0x121e <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    11a8:	80 91 28 04 	lds	r24, 0x0428
    11ac:	83 fd       	sbrc	r24, 3
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <disk_read+0x3a>
    11b0:	01 2e       	mov	r0, r17
    11b2:	19 e0       	ldi	r17, 0x09	; 9
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	44 1f       	adc	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	1a 95       	dec	r17
    11be:	d1 f7       	brne	.-12     	; 0x11b4 <disk_read+0x2c>
    11c0:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    11c2:	02 30       	cpi	r16, 0x02	; 2
    11c4:	11 05       	cpc	r17, r1
    11c6:	28 f4       	brcc	.+10     	; 0x11d2 <disk_read+0x4a>
    11c8:	0f 2e       	mov	r0, r31
    11ca:	f1 e1       	ldi	r31, 0x11	; 17
    11cc:	ff 2e       	mov	r15, r31
    11ce:	f0 2d       	mov	r31, r0
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <disk_read+0x52>
    11d2:	0f 2e       	mov	r0, r31
    11d4:	f2 e1       	ldi	r31, 0x12	; 18
    11d6:	ff 2e       	mov	r15, r31
    11d8:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    11da:	ba 01       	movw	r22, r20
    11dc:	a9 01       	movw	r20, r18
    11de:	8f 2d       	mov	r24, r15
    11e0:	77 de       	rcall	.-786    	; 0xed0 <send_cmd>
    11e2:	81 11       	cpse	r24, r1
    11e4:	12 c0       	rjmp	.+36     	; 0x120a <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, CLUSTERSIZE)) break;
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	72 e0       	ldi	r23, 0x02	; 2
    11ea:	ce 01       	movw	r24, r28
    11ec:	38 de       	rcall	.-912    	; 0xe5e <rcvr_datablock>
    11ee:	89 2b       	or	r24, r25
    11f0:	21 f0       	breq	.+8      	; 0x11fa <disk_read+0x72>
			buff += CLUSTERSIZE;
    11f2:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    11f4:	01 50       	subi	r16, 0x01	; 1
    11f6:	11 09       	sbc	r17, r1
    11f8:	b1 f7       	brne	.-20     	; 0x11e6 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    11fa:	82 e1       	ldi	r24, 0x12	; 18
    11fc:	f8 12       	cpse	r15, r24
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <disk_read+0x82>
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	ba 01       	movw	r22, r20
    1206:	8c e0       	ldi	r24, 0x0C	; 12
    1208:	63 de       	rcall	.-826    	; 0xed0 <send_cmd>
	}
	deselect();
    120a:	10 de       	rcall	.-992    	; 0xe2c <deselect>

	return count ? RES_ERROR : RES_OK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	01 2b       	or	r16, r17
    1210:	39 f4       	brne	.+14     	; 0x1220 <disk_read+0x98>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <disk_read+0x98>
    121a:	84 e0       	ldi	r24, 0x04	; 4
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    121e:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	08 95       	ret

0000122c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	eb 01       	movw	r28, r22
    123e:	69 01       	movw	r12, r18
    1240:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    1242:	81 11       	cpse	r24, r1
    1244:	51 c0       	rjmp	.+162    	; 0x12e8 <disk_write+0xbc>
    1246:	01 15       	cp	r16, r1
    1248:	11 05       	cpc	r17, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <disk_write+0x22>
    124c:	4f c0       	rjmp	.+158    	; 0x12ec <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    124e:	80 91 06 01 	lds	r24, 0x0106
    1252:	80 fd       	sbrc	r24, 0
    1254:	4d c0       	rjmp	.+154    	; 0x12f0 <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    1256:	80 91 06 01 	lds	r24, 0x0106
    125a:	82 fd       	sbrc	r24, 2
    125c:	4b c0       	rjmp	.+150    	; 0x12f4 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= CLUSTERSIZE;	/* Convert to byte address if needed */
    125e:	80 91 28 04 	lds	r24, 0x0428
    1262:	83 fd       	sbrc	r24, 3
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <disk_write+0x4c>
    1266:	0b 2e       	mov	r0, r27
    1268:	b9 e0       	ldi	r27, 0x09	; 9
    126a:	cc 0c       	add	r12, r12
    126c:	dd 1c       	adc	r13, r13
    126e:	ee 1c       	adc	r14, r14
    1270:	ff 1c       	adc	r15, r15
    1272:	ba 95       	dec	r27
    1274:	d1 f7       	brne	.-12     	; 0x126a <disk_write+0x3e>
    1276:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    1278:	01 30       	cpi	r16, 0x01	; 1
    127a:	11 05       	cpc	r17, r1
    127c:	89 f4       	brne	.+34     	; 0x12a0 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    127e:	b7 01       	movw	r22, r14
    1280:	a6 01       	movw	r20, r12
    1282:	88 e1       	ldi	r24, 0x18	; 24
    1284:	25 de       	rcall	.-950    	; 0xed0 <send_cmd>
    1286:	81 11       	cpse	r24, r1
    1288:	29 c0       	rjmp	.+82     	; 0x12dc <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    128a:	6e ef       	ldi	r22, 0xFE	; 254
    128c:	ce 01       	movw	r24, r28
    128e:	76 de       	rcall	.-788    	; 0xf7c <xmit_datablock>
    1290:	31 e0       	ldi	r19, 0x01	; 1
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	89 2b       	or	r24, r25
    1296:	09 f0       	breq	.+2      	; 0x129a <disk_write+0x6e>
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	03 2f       	mov	r16, r19
    129c:	12 2f       	mov	r17, r18
    129e:	1e c0       	rjmp	.+60     	; 0x12dc <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    12a0:	86 70       	andi	r24, 0x06	; 6
    12a2:	29 f0       	breq	.+10     	; 0x12ae <disk_write+0x82>
    12a4:	a8 01       	movw	r20, r16
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	87 e9       	ldi	r24, 0x97	; 151
    12ac:	11 de       	rcall	.-990    	; 0xed0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    12ae:	b7 01       	movw	r22, r14
    12b0:	a6 01       	movw	r20, r12
    12b2:	89 e1       	ldi	r24, 0x19	; 25
    12b4:	0d de       	rcall	.-998    	; 0xed0 <send_cmd>
    12b6:	81 11       	cpse	r24, r1
    12b8:	11 c0       	rjmp	.+34     	; 0x12dc <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    12ba:	6c ef       	ldi	r22, 0xFC	; 252
    12bc:	ce 01       	movw	r24, r28
    12be:	5e de       	rcall	.-836    	; 0xf7c <xmit_datablock>
    12c0:	89 2b       	or	r24, r25
    12c2:	21 f0       	breq	.+8      	; 0x12cc <disk_write+0xa0>
				buff += CLUSTERSIZE;
    12c4:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    12c6:	01 50       	subi	r16, 0x01	; 1
    12c8:	11 09       	sbc	r17, r1
    12ca:	b9 f7       	brne	.-18     	; 0x12ba <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    12cc:	6d ef       	ldi	r22, 0xFD	; 253
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	54 de       	rcall	.-856    	; 0xf7c <xmit_datablock>
    12d4:	89 2b       	or	r24, r25
    12d6:	11 f4       	brne	.+4      	; 0x12dc <disk_write+0xb0>
				count = 1;
    12d8:	01 e0       	ldi	r16, 0x01	; 1
    12da:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    12dc:	a7 dd       	rcall	.-1202   	; 0xe2c <deselect>

	return count ? RES_ERROR : RES_OK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	01 2b       	or	r16, r17
    12e2:	49 f4       	brne	.+18     	; 0x12f6 <disk_write+0xca>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	07 c0       	rjmp	.+14     	; 0x12f6 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <disk_write+0xca>
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    12f4:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	08 95       	ret

00001308 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	60 97       	sbiw	r28, 0x10	; 16
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    1324:	81 11       	cpse	r24, r1
    1326:	7c c1       	rjmp	.+760    	; 0x1620 <disk_ioctl+0x318>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1328:	80 91 06 01 	lds	r24, 0x0106
    132c:	80 fd       	sbrc	r24, 0
    132e:	7a c1       	rjmp	.+756    	; 0x1624 <disk_ioctl+0x31c>
    1330:	7a 01       	movw	r14, r20

	switch (cmd) {
    1332:	06 2f       	mov	r16, r22
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	07 33       	cpi	r16, 0x37	; 55
    1338:	11 05       	cpc	r17, r1
    133a:	08 f0       	brcs	.+2      	; 0x133e <disk_ioctl+0x36>
    133c:	59 c1       	rjmp	.+690    	; 0x15f0 <disk_ioctl+0x2e8>
    133e:	f8 01       	movw	r30, r16
    1340:	ea 5b       	subi	r30, 0xBA	; 186
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	0c 94 38 47 	jmp	0x8e70	; 0x8e70 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    1348:	75 dd       	rcall	.-1302   	; 0xe34 <select>
    134a:	11 e0       	ldi	r17, 0x01	; 1
    134c:	89 2b       	or	r24, r25
    134e:	09 f4       	brne	.+2      	; 0x1352 <disk_ioctl+0x4a>
    1350:	64 c1       	rjmp	.+712    	; 0x161a <disk_ioctl+0x312>
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	62 c1       	rjmp	.+708    	; 0x161a <disk_ioctl+0x312>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	ba 01       	movw	r22, r20
    135c:	89 e0       	ldi	r24, 0x09	; 9
    135e:	b8 dd       	rcall	.-1168   	; 0xed0 <send_cmd>
    1360:	81 11       	cpse	r24, r1
    1362:	48 c1       	rjmp	.+656    	; 0x15f4 <disk_ioctl+0x2ec>
    1364:	60 e1       	ldi	r22, 0x10	; 16
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	ce 01       	movw	r24, r28
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	78 dd       	rcall	.-1296   	; 0xe5e <rcvr_datablock>
    136e:	89 2b       	or	r24, r25
    1370:	09 f4       	brne	.+2      	; 0x1374 <disk_ioctl+0x6c>
    1372:	42 c1       	rjmp	.+644    	; 0x15f8 <disk_ioctl+0x2f0>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	82 95       	swap	r24
    1378:	86 95       	lsr	r24
    137a:	86 95       	lsr	r24
    137c:	83 70       	andi	r24, 0x03	; 3
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	31 f5       	brne	.+76     	; 0x13ce <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    1382:	88 85       	ldd	r24, Y+8	; 0x08
    1384:	8f 73       	andi	r24, 0x3F	; 63
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	a1 1d       	adc	r26, r1
    1396:	b1 1d       	adc	r27, r1
    1398:	29 85       	ldd	r18, Y+9	; 0x09
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	32 2f       	mov	r19, r18
    139e:	22 27       	eor	r18, r18
    13a0:	4a 85       	ldd	r20, Y+10	; 0x0a
    13a2:	24 0f       	add	r18, r20
    13a4:	31 1d       	adc	r19, r1
    13a6:	82 0f       	add	r24, r18
    13a8:	93 1f       	adc	r25, r19
    13aa:	a1 1d       	adc	r26, r1
    13ac:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    13ae:	07 2e       	mov	r0, r23
    13b0:	7a e0       	ldi	r23, 0x0A	; 10
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	aa 1f       	adc	r26, r26
    13b8:	bb 1f       	adc	r27, r27
    13ba:	7a 95       	dec	r23
    13bc:	d1 f7       	brne	.-12     	; 0x13b2 <disk_ioctl+0xaa>
    13be:	70 2d       	mov	r23, r0
    13c0:	f7 01       	movw	r30, r14
    13c2:	80 83       	st	Z, r24
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	a2 83       	std	Z+2, r26	; 0x02
    13c8:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    13ca:	10 e0       	ldi	r17, 0x00	; 0
    13cc:	26 c1       	rjmp	.+588    	; 0x161a <disk_ioctl+0x312>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	82 95       	swap	r24
    13d2:	86 95       	lsr	r24
    13d4:	86 95       	lsr	r24
    13d6:	83 70       	andi	r24, 0x03	; 3
    13d8:	28 85       	ldd	r18, Y+8	; 0x08
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	f4 e0       	ldi	r31, 0x04	; 4
    13de:	2f 9f       	mul	r18, r31
    13e0:	80 0d       	add	r24, r0
    13e2:	91 1d       	adc	r25, r1
    13e4:	11 24       	eor	r1, r1
    13e6:	9c 01       	movw	r18, r24
    13e8:	2f 5f       	subi	r18, 0xFF	; 255
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	8f 81       	ldd	r24, Y+7	; 0x07
    13ee:	83 70       	andi	r24, 0x03	; 3
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	98 2f       	mov	r25, r24
    13f4:	88 27       	eor	r24, r24
    13f6:	99 0f       	add	r25, r25
    13f8:	99 0f       	add	r25, r25
    13fa:	82 0f       	add	r24, r18
    13fc:	93 1f       	adc	r25, r19
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1402:	3e 81       	ldd	r19, Y+6	; 0x06
    1404:	3f 70       	andi	r19, 0x0F	; 15
    1406:	2b 85       	ldd	r18, Y+11	; 0x0b
    1408:	22 1f       	adc	r18, r18
    140a:	22 27       	eor	r18, r18
    140c:	22 1f       	adc	r18, r18
    140e:	32 0f       	add	r19, r18
    1410:	2a 85       	ldd	r18, Y+10	; 0x0a
    1412:	23 70       	andi	r18, 0x03	; 3
    1414:	22 0f       	add	r18, r18
    1416:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    1418:	27 50       	subi	r18, 0x07	; 7
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <disk_ioctl+0x11c>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	aa 1f       	adc	r26, r26
    1422:	bb 1f       	adc	r27, r27
    1424:	2a 95       	dec	r18
    1426:	d2 f7       	brpl	.-12     	; 0x141c <disk_ioctl+0x114>
    1428:	f7 01       	movw	r30, r14
    142a:	80 83       	st	Z, r24
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	a2 83       	std	Z+2, r26	; 0x02
    1430:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	f2 c0       	rjmp	.+484    	; 0x161a <disk_ioctl+0x312>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    1436:	10 91 28 04 	lds	r17, 0x0428
    143a:	12 ff       	sbrs	r17, 2
    143c:	2a c0       	rjmp	.+84     	; 0x1492 <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	ba 01       	movw	r22, r20
    1444:	8d e8       	ldi	r24, 0x8D	; 141
    1446:	44 dd       	rcall	.-1400   	; 0xed0 <send_cmd>
    1448:	81 11       	cpse	r24, r1
    144a:	d8 c0       	rjmp	.+432    	; 0x15fc <disk_ioctl+0x2f4>
				xchg_spi(0xFF);
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	e8 dc       	rcall	.-1584   	; 0xe20 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    1450:	60 e1       	ldi	r22, 0x10	; 16
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	02 dd       	rcall	.-1532   	; 0xe5e <rcvr_datablock>
    145a:	89 2b       	or	r24, r25
    145c:	09 f4       	brne	.+2      	; 0x1460 <disk_ioctl+0x158>
    145e:	d0 c0       	rjmp	.+416    	; 0x1600 <disk_ioctl+0x2f8>
    1460:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	dd dc       	rcall	.-1606   	; 0xe20 <xchg_spi>
    1466:	11 50       	subi	r17, 0x01	; 1
    1468:	e1 f7       	brne	.-8      	; 0x1462 <disk_ioctl+0x15a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    146a:	2b 85       	ldd	r18, Y+11	; 0x0b
    146c:	22 95       	swap	r18
    146e:	2f 70       	andi	r18, 0x0F	; 15
    1470:	80 e1       	ldi	r24, 0x10	; 16
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <disk_ioctl+0x17a>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	aa 1f       	adc	r26, r26
    1480:	bb 1f       	adc	r27, r27
    1482:	2a 95       	dec	r18
    1484:	d2 f7       	brpl	.-12     	; 0x147a <disk_ioctl+0x172>
    1486:	f7 01       	movw	r30, r14
    1488:	80 83       	st	Z, r24
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	a2 83       	std	Z+2, r26	; 0x02
    148e:	b3 83       	std	Z+3, r27	; 0x03
    1490:	c4 c0       	rjmp	.+392    	; 0x161a <disk_ioctl+0x312>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	ba 01       	movw	r22, r20
    1498:	89 e0       	ldi	r24, 0x09	; 9
    149a:	1a dd       	rcall	.-1484   	; 0xed0 <send_cmd>
    149c:	81 11       	cpse	r24, r1
    149e:	b2 c0       	rjmp	.+356    	; 0x1604 <disk_ioctl+0x2fc>
    14a0:	60 e1       	ldi	r22, 0x10	; 16
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	ce 01       	movw	r24, r28
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	da dc       	rcall	.-1612   	; 0xe5e <rcvr_datablock>
    14aa:	89 2b       	or	r24, r25
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <disk_ioctl+0x1a8>
    14ae:	ac c0       	rjmp	.+344    	; 0x1608 <disk_ioctl+0x300>
				if (CardType & CT_SD1) {	/* SDv1 */
    14b0:	11 ff       	sbrs	r17, 1
    14b2:	20 c0       	rjmp	.+64     	; 0x14f4 <disk_ioctl+0x1ec>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    14b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14b6:	88 1f       	adc	r24, r24
    14b8:	88 27       	eor	r24, r24
    14ba:	88 1f       	adc	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    14c2:	2f 73       	andi	r18, 0x3F	; 63
    14c4:	82 0f       	add	r24, r18
    14c6:	91 1d       	adc	r25, r1
    14c8:	82 0f       	add	r24, r18
    14ca:	91 1d       	adc	r25, r1
    14cc:	2e 85       	ldd	r18, Y+14	; 0x0e
    14ce:	22 95       	swap	r18
    14d0:	26 95       	lsr	r18
    14d2:	26 95       	lsr	r18
    14d4:	23 70       	andi	r18, 0x03	; 3
    14d6:	21 50       	subi	r18, 0x01	; 1
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <disk_ioctl+0x1d6>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	2a 95       	dec	r18
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <disk_ioctl+0x1d2>
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	f7 01       	movw	r30, r14
    14e8:	80 83       	st	Z, r24
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	a2 83       	std	Z+2, r26	; 0x02
    14ee:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	93 c0       	rjmp	.+294    	; 0x161a <disk_ioctl+0x312>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    14f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14f6:	28 2f       	mov	r18, r24
    14f8:	23 70       	andi	r18, 0x03	; 3
    14fa:	82 95       	swap	r24
    14fc:	86 95       	lsr	r24
    14fe:	87 70       	andi	r24, 0x07	; 7
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	f8 e0       	ldi	r31, 0x08	; 8
    1504:	2f 9f       	mul	r18, r31
    1506:	80 0d       	add	r24, r0
    1508:	91 1d       	adc	r25, r1
    150a:	11 24       	eor	r1, r1
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1510:	2c 77       	andi	r18, 0x7C	; 124
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	35 95       	asr	r19
    1516:	27 95       	ror	r18
    1518:	35 95       	asr	r19
    151a:	27 95       	ror	r18
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	82 9f       	mul	r24, r18
    1522:	a0 01       	movw	r20, r0
    1524:	83 9f       	mul	r24, r19
    1526:	50 0d       	add	r21, r0
    1528:	92 9f       	mul	r25, r18
    152a:	50 0d       	add	r21, r0
    152c:	11 24       	eor	r1, r1
    152e:	ca 01       	movw	r24, r20
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	f7 01       	movw	r30, r14
    1536:	80 83       	st	Z, r24
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	a2 83       	std	Z+2, r26	; 0x02
    153c:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	6c c0       	rjmp	.+216    	; 0x161a <disk_ioctl+0x312>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    1542:	80 91 28 04 	lds	r24, 0x0428
    1546:	fa 01       	movw	r30, r20
    1548:	80 83       	st	Z, r24
		res = RES_OK;
    154a:	10 e0       	ldi	r17, 0x00	; 0
		break;
    154c:	66 c0       	rjmp	.+204    	; 0x161a <disk_ioctl+0x312>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	ba 01       	movw	r22, r20
    1554:	89 e0       	ldi	r24, 0x09	; 9
    1556:	bc dc       	rcall	.-1672   	; 0xed0 <send_cmd>
    1558:	81 11       	cpse	r24, r1
    155a:	58 c0       	rjmp	.+176    	; 0x160c <disk_ioctl+0x304>
			&& rcvr_datablock(ptr, 16))
    155c:	60 e1       	ldi	r22, 0x10	; 16
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	c7 01       	movw	r24, r14
    1562:	7d dc       	rcall	.-1798   	; 0xe5e <rcvr_datablock>
    1564:	11 e0       	ldi	r17, 0x01	; 1
    1566:	89 2b       	or	r24, r25
    1568:	09 f4       	brne	.+2      	; 0x156c <disk_ioctl+0x264>
    156a:	57 c0       	rjmp	.+174    	; 0x161a <disk_ioctl+0x312>
    156c:	10 e0       	ldi	r17, 0x00	; 0
    156e:	55 c0       	rjmp	.+170    	; 0x161a <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	ba 01       	movw	r22, r20
    1576:	8a e0       	ldi	r24, 0x0A	; 10
    1578:	ab dc       	rcall	.-1706   	; 0xed0 <send_cmd>
    157a:	81 11       	cpse	r24, r1
    157c:	49 c0       	rjmp	.+146    	; 0x1610 <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
    157e:	60 e1       	ldi	r22, 0x10	; 16
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	c7 01       	movw	r24, r14
    1584:	6c dc       	rcall	.-1832   	; 0xe5e <rcvr_datablock>
    1586:	11 e0       	ldi	r17, 0x01	; 1
    1588:	89 2b       	or	r24, r25
    158a:	09 f4       	brne	.+2      	; 0x158e <disk_ioctl+0x286>
    158c:	46 c0       	rjmp	.+140    	; 0x161a <disk_ioctl+0x312>
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	44 c0       	rjmp	.+136    	; 0x161a <disk_ioctl+0x312>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	ba 01       	movw	r22, r20
    1598:	8a e3       	ldi	r24, 0x3A	; 58
    159a:	9a dc       	rcall	.-1740   	; 0xed0 <send_cmd>
    159c:	81 11       	cpse	r24, r1
    159e:	3a c0       	rjmp	.+116    	; 0x1614 <disk_ioctl+0x30c>
    15a0:	87 01       	movw	r16, r14
    15a2:	f4 e0       	ldi	r31, 0x04	; 4
    15a4:	ef 0e       	add	r14, r31
    15a6:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	3a dc       	rcall	.-1932   	; 0xe20 <xchg_spi>
    15ac:	f8 01       	movw	r30, r16
    15ae:	81 93       	st	Z+, r24
    15b0:	8f 01       	movw	r16, r30
    15b2:	ee 15       	cp	r30, r14
    15b4:	ff 05       	cpc	r31, r15
    15b6:	c1 f7       	brne	.-16     	; 0x15a8 <disk_ioctl+0x2a0>
			res = RES_OK;
    15b8:	10 e0       	ldi	r17, 0x00	; 0
    15ba:	2f c0       	rjmp	.+94     	; 0x161a <disk_ioctl+0x312>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	ba 01       	movw	r22, r20
    15c2:	8d e8       	ldi	r24, 0x8D	; 141
    15c4:	85 dc       	rcall	.-1782   	; 0xed0 <send_cmd>
    15c6:	81 11       	cpse	r24, r1
    15c8:	27 c0       	rjmp	.+78     	; 0x1618 <disk_ioctl+0x310>
			xchg_spi(0xFF);
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	29 dc       	rcall	.-1966   	; 0xe20 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    15ce:	60 e4       	ldi	r22, 0x40	; 64
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	c7 01       	movw	r24, r14
    15d4:	44 dc       	rcall	.-1912   	; 0xe5e <rcvr_datablock>
    15d6:	11 e0       	ldi	r17, 0x01	; 1
    15d8:	89 2b       	or	r24, r25
    15da:	f9 f0       	breq	.+62     	; 0x161a <disk_ioctl+0x312>
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	1d c0       	rjmp	.+58     	; 0x161a <disk_ioctl+0x312>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    15e0:	19 dc       	rcall	.-1998   	; 0xe14 <power_off>
		Stat |= STA_NOINIT;
    15e2:	80 91 06 01 	lds	r24, 0x0106
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	80 93 06 01 	sts	0x0106, r24
		res = RES_OK;
    15ec:	10 e0       	ldi	r17, 0x00	; 0
		break;
    15ee:	15 c0       	rjmp	.+42     	; 0x161a <disk_ioctl+0x312>

	default:
		res = RES_PARERR;
    15f0:	14 e0       	ldi	r17, 0x04	; 4
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <disk_ioctl+0x312>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    15f4:	11 e0       	ldi	r17, 0x01	; 1
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <disk_ioctl+0x312>
    15f8:	11 e0       	ldi	r17, 0x01	; 1
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <disk_ioctl+0x312>
    15fc:	11 e0       	ldi	r17, 0x01	; 1
    15fe:	0d c0       	rjmp	.+26     	; 0x161a <disk_ioctl+0x312>
    1600:	11 e0       	ldi	r17, 0x01	; 1
    1602:	0b c0       	rjmp	.+22     	; 0x161a <disk_ioctl+0x312>
    1604:	11 e0       	ldi	r17, 0x01	; 1
    1606:	09 c0       	rjmp	.+18     	; 0x161a <disk_ioctl+0x312>
    1608:	11 e0       	ldi	r17, 0x01	; 1
    160a:	07 c0       	rjmp	.+14     	; 0x161a <disk_ioctl+0x312>
    160c:	11 e0       	ldi	r17, 0x01	; 1
    160e:	05 c0       	rjmp	.+10     	; 0x161a <disk_ioctl+0x312>
    1610:	11 e0       	ldi	r17, 0x01	; 1
    1612:	03 c0       	rjmp	.+6      	; 0x161a <disk_ioctl+0x312>
    1614:	11 e0       	ldi	r17, 0x01	; 1
    1616:	01 c0       	rjmp	.+2      	; 0x161a <disk_ioctl+0x312>
    1618:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    161a:	08 dc       	rcall	.-2032   	; 0xe2c <deselect>

	return res;
    161c:	81 2f       	mov	r24, r17
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <disk_ioctl+0x31e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <disk_ioctl+0x31e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    1624:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    1626:	60 96       	adiw	r28, 0x10	; 16
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	08 95       	ret

00001640 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    1640:	80 91 2a 04 	lds	r24, 0x042A
	if (n) Timer1 = --n;
    1644:	88 23       	and	r24, r24
    1646:	19 f0       	breq	.+6      	; 0x164e <disk_timerproc+0xe>
    1648:	81 50       	subi	r24, 0x01	; 1
    164a:	80 93 2a 04 	sts	0x042A, r24
	n = Timer2;
    164e:	80 91 29 04 	lds	r24, 0x0429
	if (n) Timer2 = --n;
    1652:	88 23       	and	r24, r24
    1654:	19 f0       	breq	.+6      	; 0x165c <disk_timerproc+0x1c>
    1656:	81 50       	subi	r24, 0x01	; 1
    1658:	80 93 29 04 	sts	0x0429, r24
	
	s = Stat;
    165c:	80 91 06 01 	lds	r24, 0x0106
//	if (MMC_CD)				/* Card inserted */
//		s &= ~STA_NODISK;
//	else					/* Socket empty */
//		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    1660:	80 93 06 01 	sts	0x0106, r24
    1664:	08 95       	ret

00001666 <_ZN7DisplayD1Ev>:
	else{
		for(uint8_t i = 0; i < 7; i++){
			Displayframe[x+(y/8)*SSD1306_WIDTH+i] |= 0;
		}
	}
}
    1666:	9c 5f       	subi	r25, 0xFC	; 252
    1668:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <_ZN3I2CD1Ev>
    166c:	08 95       	ret

0000166e <_ZN7Display10clearFrameEv>:
    166e:	fc 01       	movw	r30, r24
    1670:	9c 5f       	subi	r25, 0xFC	; 252
    1672:	11 92       	st	Z+, r1
    1674:	e8 17       	cp	r30, r24
    1676:	f9 07       	cpc	r31, r25
    1678:	e1 f7       	brne	.-8      	; 0x1672 <_ZN7Display10clearFrameEv+0x4>
    167a:	08 95       	ret

0000167c <_ZN7Display15ssd1306_commandEh>:
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	16 2f       	mov	r17, r22
    1684:	ec 01       	movw	r28, r24
    1686:	dc 5f       	subi	r29, 0xFC	; 252
    1688:	ce 01       	movw	r24, r28
    168a:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
    168e:	68 e7       	ldi	r22, 0x78	; 120
    1690:	ce 01       	movw	r24, r28
    1692:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
    169e:	61 2f       	mov	r22, r17
    16a0:	ce 01       	movw	r24, r28
    16a2:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
    16a6:	ce 01       	movw	r24, r28
    16a8:	0e 94 56 23 	call	0x46ac	; 0x46ac <_ZN3I2C8twi_stopEv>
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	08 95       	ret

000016b4 <_ZN7Display17InitializeDisplayEv>:
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	ec 01       	movw	r28, r24
    16ba:	6e ea       	ldi	r22, 0xAE	; 174
    16bc:	df df       	rcall	.-66     	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16be:	65 ed       	ldi	r22, 0xD5	; 213
    16c0:	ce 01       	movw	r24, r28
    16c2:	dc df       	rcall	.-72     	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16c4:	60 e8       	ldi	r22, 0x80	; 128
    16c6:	ce 01       	movw	r24, r28
    16c8:	d9 df       	rcall	.-78     	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16ca:	68 ea       	ldi	r22, 0xA8	; 168
    16cc:	ce 01       	movw	r24, r28
    16ce:	d6 df       	rcall	.-84     	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16d0:	6f e3       	ldi	r22, 0x3F	; 63
    16d2:	ce 01       	movw	r24, r28
    16d4:	d3 df       	rcall	.-90     	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16d6:	63 ed       	ldi	r22, 0xD3	; 211
    16d8:	ce 01       	movw	r24, r28
    16da:	d0 df       	rcall	.-96     	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	ce 01       	movw	r24, r28
    16e0:	cd df       	rcall	.-102    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16e2:	60 e4       	ldi	r22, 0x40	; 64
    16e4:	ce 01       	movw	r24, r28
    16e6:	ca df       	rcall	.-108    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16e8:	6d e8       	ldi	r22, 0x8D	; 141
    16ea:	ce 01       	movw	r24, r28
    16ec:	c7 df       	rcall	.-114    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16ee:	64 e1       	ldi	r22, 0x14	; 20
    16f0:	ce 01       	movw	r24, r28
    16f2:	c4 df       	rcall	.-120    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16f4:	60 e2       	ldi	r22, 0x20	; 32
    16f6:	ce 01       	movw	r24, r28
    16f8:	c1 df       	rcall	.-126    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	ce 01       	movw	r24, r28
    16fe:	be df       	rcall	.-132    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1700:	61 ea       	ldi	r22, 0xA1	; 161
    1702:	ce 01       	movw	r24, r28
    1704:	bb df       	rcall	.-138    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1706:	68 ec       	ldi	r22, 0xC8	; 200
    1708:	ce 01       	movw	r24, r28
    170a:	b8 df       	rcall	.-144    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    170c:	6a ed       	ldi	r22, 0xDA	; 218
    170e:	ce 01       	movw	r24, r28
    1710:	b5 df       	rcall	.-150    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1712:	62 e1       	ldi	r22, 0x12	; 18
    1714:	ce 01       	movw	r24, r28
    1716:	b2 df       	rcall	.-156    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1718:	61 e8       	ldi	r22, 0x81	; 129
    171a:	ce 01       	movw	r24, r28
    171c:	af df       	rcall	.-162    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    171e:	6f ec       	ldi	r22, 0xCF	; 207
    1720:	ce 01       	movw	r24, r28
    1722:	ac df       	rcall	.-168    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1724:	69 ed       	ldi	r22, 0xD9	; 217
    1726:	ce 01       	movw	r24, r28
    1728:	a9 df       	rcall	.-174    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    172a:	61 ef       	ldi	r22, 0xF1	; 241
    172c:	ce 01       	movw	r24, r28
    172e:	a6 df       	rcall	.-180    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1730:	6b ed       	ldi	r22, 0xDB	; 219
    1732:	ce 01       	movw	r24, r28
    1734:	a3 df       	rcall	.-186    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1736:	60 e4       	ldi	r22, 0x40	; 64
    1738:	ce 01       	movw	r24, r28
    173a:	a0 df       	rcall	.-192    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    173c:	64 ea       	ldi	r22, 0xA4	; 164
    173e:	ce 01       	movw	r24, r28
    1740:	9d df       	rcall	.-198    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1742:	66 ea       	ldi	r22, 0xA6	; 166
    1744:	ce 01       	movw	r24, r28
    1746:	9a df       	rcall	.-204    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1748:	6f ea       	ldi	r22, 0xAF	; 175
    174a:	ce 01       	movw	r24, r28
    174c:	97 df       	rcall	.-210    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <_ZN7DisplayC1Ev>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
    175a:	9c 5f       	subi	r25, 0xFC	; 252
    175c:	0e 94 4d 23 	call	0x469a	; 0x469a <_ZN3I2CC1Ev>
    1760:	ce 01       	movw	r24, r28
    1762:	a8 df       	rcall	.-176    	; 0x16b4 <_ZN7Display17InitializeDisplayEv>
    1764:	ce 01       	movw	r24, r28
    1766:	83 df       	rcall	.-250    	; 0x166e <_ZN7Display10clearFrameEv>
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <_ZN7Display9sendFrameEv>:
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	ec 01       	movw	r28, r24
    177c:	61 e2       	ldi	r22, 0x21	; 33
    177e:	7e df       	rcall	.-260    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	ce 01       	movw	r24, r28
    1784:	7b df       	rcall	.-266    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1786:	6f e7       	ldi	r22, 0x7F	; 127
    1788:	ce 01       	movw	r24, r28
    178a:	78 df       	rcall	.-272    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    178c:	62 e2       	ldi	r22, 0x22	; 34
    178e:	ce 01       	movw	r24, r28
    1790:	75 df       	rcall	.-278    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	ce 01       	movw	r24, r28
    1796:	72 df       	rcall	.-284    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    1798:	67 e0       	ldi	r22, 0x07	; 7
    179a:	ce 01       	movw	r24, r28
    179c:	6f df       	rcall	.-290    	; 0x167c <_ZN7Display15ssd1306_commandEh>
    179e:	8e 01       	movw	r16, r28
    17a0:	1c 5f       	subi	r17, 0xFC	; 252
    17a2:	c8 01       	movw	r24, r16
    17a4:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_ZN3I2C9twi_startEv>
    17a8:	68 e7       	ldi	r22, 0x78	; 120
    17aa:	c8 01       	movw	r24, r16
    17ac:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
    17b0:	60 e4       	ldi	r22, 0x40	; 64
    17b2:	c8 01       	movw	r24, r16
    17b4:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
    17b8:	78 01       	movw	r14, r16
    17ba:	69 91       	ld	r22, Y+
    17bc:	c8 01       	movw	r24, r16
    17be:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN3I2C9twi_writeEh>
    17c2:	ce 15       	cp	r28, r14
    17c4:	df 05       	cpc	r29, r15
    17c6:	c9 f7       	brne	.-14     	; 0x17ba <_ZN7Display9sendFrameEv+0x4c>
    17c8:	c8 01       	movw	r24, r16
    17ca:	0e 94 56 23 	call	0x46ac	; 0x46ac <_ZN3I2C8twi_stopEv>
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	08 95       	ret

000017dc <_ZN7Display9drawPixelEhhh>:
    17dc:	66 23       	and	r22, r22
    17de:	ac f1       	brlt	.+106    	; 0x184a <_ZN7Display9drawPixelEhhh+0x6e>
    17e0:	40 34       	cpi	r20, 0x40	; 64
    17e2:	98 f5       	brcc	.+102    	; 0x184a <_ZN7Display9drawPixelEhhh+0x6e>
    17e4:	21 11       	cpse	r18, r1
    17e6:	19 c0       	rjmp	.+50     	; 0x181a <_ZN7Display9drawPixelEhhh+0x3e>
    17e8:	24 2f       	mov	r18, r20
    17ea:	26 95       	lsr	r18
    17ec:	26 95       	lsr	r18
    17ee:	26 95       	lsr	r18
    17f0:	50 e8       	ldi	r21, 0x80	; 128
    17f2:	25 9f       	mul	r18, r21
    17f4:	90 01       	movw	r18, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	26 0f       	add	r18, r22
    17fa:	31 1d       	adc	r19, r1
    17fc:	fc 01       	movw	r30, r24
    17fe:	e2 0f       	add	r30, r18
    1800:	f3 1f       	adc	r31, r19
    1802:	47 70       	andi	r20, 0x07	; 7
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <_ZN7Display9drawPixelEhhh+0x32>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	4a 95       	dec	r20
    1810:	e2 f7       	brpl	.-8      	; 0x180a <_ZN7Display9drawPixelEhhh+0x2e>
    1812:	90 81       	ld	r25, Z
    1814:	89 2b       	or	r24, r25
    1816:	80 83       	st	Z, r24
    1818:	08 95       	ret
    181a:	24 2f       	mov	r18, r20
    181c:	26 95       	lsr	r18
    181e:	26 95       	lsr	r18
    1820:	26 95       	lsr	r18
    1822:	30 e8       	ldi	r19, 0x80	; 128
    1824:	23 9f       	mul	r18, r19
    1826:	f0 01       	movw	r30, r0
    1828:	11 24       	eor	r1, r1
    182a:	e6 0f       	add	r30, r22
    182c:	f1 1d       	adc	r31, r1
    182e:	e8 0f       	add	r30, r24
    1830:	f9 1f       	adc	r31, r25
    1832:	47 70       	andi	r20, 0x07	; 7
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <_ZN7Display9drawPixelEhhh+0x62>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	4a 95       	dec	r20
    1840:	e2 f7       	brpl	.-8      	; 0x183a <_ZN7Display9drawPixelEhhh+0x5e>
    1842:	80 95       	com	r24
    1844:	90 81       	ld	r25, Z
    1846:	89 23       	and	r24, r25
    1848:	80 83       	st	Z, r24
    184a:	08 95       	ret

0000184c <_ZN7Display9drawVLineEhhh>:
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	22 23       	and	r18, r18
    1858:	69 f0       	breq	.+26     	; 0x1874 <_ZN7Display9drawVLineEhhh+0x28>
    185a:	c4 2f       	mov	r28, r20
    185c:	f6 2e       	mov	r15, r22
    185e:	8c 01       	movw	r16, r24
    1860:	d2 2f       	mov	r29, r18
    1862:	d4 0f       	add	r29, r20
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	4c 2f       	mov	r20, r28
    1868:	6f 2d       	mov	r22, r15
    186a:	c8 01       	movw	r24, r16
    186c:	b7 df       	rcall	.-146    	; 0x17dc <_ZN7Display9drawPixelEhhh>
    186e:	cf 5f       	subi	r28, 0xFF	; 255
    1870:	cd 13       	cpse	r28, r29
    1872:	f8 cf       	rjmp	.-16     	; 0x1864 <_ZN7Display9drawVLineEhhh+0x18>
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	08 95       	ret

00001880 <_ZN7Display9drawHLineEhhh>:
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	22 23       	and	r18, r18
    188c:	69 f0       	breq	.+26     	; 0x18a8 <_ZN7Display9drawHLineEhhh+0x28>
    188e:	f4 2e       	mov	r15, r20
    1890:	c6 2f       	mov	r28, r22
    1892:	8c 01       	movw	r16, r24
    1894:	d2 2f       	mov	r29, r18
    1896:	d6 0f       	add	r29, r22
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	4f 2d       	mov	r20, r15
    189c:	6c 2f       	mov	r22, r28
    189e:	c8 01       	movw	r24, r16
    18a0:	9d df       	rcall	.-198    	; 0x17dc <_ZN7Display9drawPixelEhhh>
    18a2:	cf 5f       	subi	r28, 0xFF	; 255
    18a4:	cd 13       	cpse	r28, r29
    18a6:	f8 cf       	rjmp	.-16     	; 0x1898 <_ZN7Display9drawHLineEhhh+0x18>
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	08 95       	ret

000018b4 <_ZN7Display9draw_ASCIEhhh>:
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	61 32       	cpi	r22, 0x21	; 33
    18be:	08 f4       	brcc	.+2      	; 0x18c2 <_ZN7Display9draw_ASCIEhhh+0xe>
    18c0:	3e c0       	rjmp	.+124    	; 0x193e <_ZN7Display9draw_ASCIEhhh+0x8a>
    18c2:	a4 2f       	mov	r26, r20
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	02 2f       	mov	r16, r18
    18c8:	06 95       	lsr	r16
    18ca:	06 95       	lsr	r16
    18cc:	06 95       	lsr	r16
    18ce:	30 e8       	ldi	r19, 0x80	; 128
    18d0:	03 9f       	mul	r16, r19
    18d2:	80 01       	movw	r16, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	61 52       	subi	r22, 0x21	; 33
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	fb 01       	movw	r30, r22
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	e6 0f       	add	r30, r22
    18e6:	f7 1f       	adc	r31, r23
    18e8:	ea 52       	subi	r30, 0x2A	; 42
    18ea:	fc 4f       	sbci	r31, 0xFC	; 252
    18ec:	ad 01       	movw	r20, r26
    18ee:	40 0f       	add	r20, r16
    18f0:	51 1f       	adc	r21, r17
    18f2:	ec 01       	movw	r28, r24
    18f4:	c4 0f       	add	r28, r20
    18f6:	d5 1f       	adc	r29, r21
    18f8:	00 58       	subi	r16, 0x80	; 128
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	a0 0f       	add	r26, r16
    18fe:	b1 1f       	adc	r27, r17
    1900:	a8 0f       	add	r26, r24
    1902:	b9 1f       	adc	r27, r25
    1904:	4b 5f       	subi	r20, 0xFB	; 251
    1906:	5f 4f       	sbci	r21, 0xFF	; 255
    1908:	48 0f       	add	r20, r24
    190a:	59 1f       	adc	r21, r25
    190c:	27 70       	andi	r18, 0x07	; 7
    190e:	64 91       	lpm	r22, Z
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <_ZN7Display9draw_ASCIEhhh+0x66>
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <_ZN7Display9draw_ASCIEhhh+0x62>
    191e:	98 81       	ld	r25, Y
    1920:	96 2b       	or	r25, r22
    1922:	99 93       	st	Y+, r25
    1924:	67 2f       	mov	r22, r23
    1926:	77 27       	eor	r23, r23
    1928:	61 15       	cp	r22, r1
    192a:	71 05       	cpc	r23, r1
    192c:	19 f0       	breq	.+6      	; 0x1934 <_ZN7Display9draw_ASCIEhhh+0x80>
    192e:	8c 91       	ld	r24, X
    1930:	68 2b       	or	r22, r24
    1932:	6c 93       	st	X, r22
    1934:	31 96       	adiw	r30, 0x01	; 1
    1936:	11 96       	adiw	r26, 0x01	; 1
    1938:	c4 17       	cp	r28, r20
    193a:	d5 07       	cpc	r29, r21
    193c:	41 f7       	brne	.-48     	; 0x190e <_ZN7Display9draw_ASCIEhhh+0x5a>
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	08 95       	ret

00001948 <_ZN7Display16draw_number16x16Ehhh>:
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	6a 30       	cpi	r22, 0x0A	; 10
    195a:	08 f0       	brcs	.+2      	; 0x195e <_ZN7Display16draw_number16x16Ehhh+0x16>
    195c:	66 c0       	rjmp	.+204    	; 0x1a2a <_ZN7Display16draw_number16x16Ehhh+0xe2>
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	02 2f       	mov	r16, r18
    1962:	06 95       	lsr	r16
    1964:	06 95       	lsr	r16
    1966:	06 95       	lsr	r16
    1968:	10 e0       	ldi	r17, 0x00	; 0
    196a:	d8 01       	movw	r26, r16
    196c:	b6 95       	lsr	r27
    196e:	ba 2f       	mov	r27, r26
    1970:	aa 27       	eor	r26, r26
    1972:	b7 95       	ror	r27
    1974:	a7 95       	ror	r26
    1976:	0f 5f       	subi	r16, 0xFF	; 255
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	16 95       	lsr	r17
    197c:	10 2f       	mov	r17, r16
    197e:	00 27       	eor	r16, r16
    1980:	17 95       	ror	r17
    1982:	07 95       	ror	r16
    1984:	7d 01       	movw	r14, r26
    1986:	30 e8       	ldi	r19, 0x80	; 128
    1988:	e3 0e       	add	r14, r19
    198a:	f1 1c       	adc	r15, r1
    198c:	e4 0e       	add	r14, r20
    198e:	f5 1e       	adc	r15, r21
    1990:	e8 0e       	add	r14, r24
    1992:	f9 1e       	adc	r15, r25
    1994:	ea 01       	movw	r28, r20
    1996:	c0 0f       	add	r28, r16
    1998:	d1 1f       	adc	r29, r17
    199a:	60 97       	sbiw	r28, 0x10	; 16
    199c:	c8 0f       	add	r28, r24
    199e:	d9 1f       	adc	r29, r25
    19a0:	04 0f       	add	r16, r20
    19a2:	15 1f       	adc	r17, r21
    19a4:	00 59       	subi	r16, 0x90	; 144
    19a6:	1f 4f       	sbci	r17, 0xFF	; 255
    19a8:	08 0f       	add	r16, r24
    19aa:	19 1f       	adc	r17, r25
    19ac:	a4 0f       	add	r26, r20
    19ae:	b5 1f       	adc	r27, r21
    19b0:	a8 0f       	add	r26, r24
    19b2:	b9 1f       	adc	r27, r25
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	68 9f       	mul	r22, r24
    19b8:	b0 01       	movw	r22, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	27 70       	andi	r18, 0x07	; 7
    19c2:	fa 01       	movw	r30, r20
    19c4:	e6 0f       	add	r30, r22
    19c6:	f7 1f       	adc	r31, r23
    19c8:	ea 56       	subi	r30, 0x6A	; 106
    19ca:	fd 4f       	sbci	r31, 0xFD	; 253
    19cc:	e4 91       	lpm	r30, Z
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <_ZN7Display16draw_number16x16Ehhh+0x90>
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <_ZN7Display16draw_number16x16Ehhh+0x8c>
    19dc:	40 31       	cpi	r20, 0x10	; 16
    19de:	68 f4       	brcc	.+26     	; 0x19fa <_ZN7Display16draw_number16x16Ehhh+0xb2>
    19e0:	8c 91       	ld	r24, X
    19e2:	8e 2b       	or	r24, r30
    19e4:	8c 93       	st	X, r24
    19e6:	cf 2e       	mov	r12, r31
    19e8:	dd 24       	eor	r13, r13
    19ea:	c1 14       	cp	r12, r1
    19ec:	d1 04       	cpc	r13, r1
    19ee:	89 f0       	breq	.+34     	; 0x1a12 <_ZN7Display16draw_number16x16Ehhh+0xca>
    19f0:	f7 01       	movw	r30, r14
    19f2:	80 81       	ld	r24, Z
    19f4:	8c 29       	or	r24, r12
    19f6:	80 83       	st	Z, r24
    19f8:	0c c0       	rjmp	.+24     	; 0x1a12 <_ZN7Display16draw_number16x16Ehhh+0xca>
    19fa:	88 81       	ld	r24, Y
    19fc:	8e 2b       	or	r24, r30
    19fe:	88 83       	st	Y, r24
    1a00:	cf 2e       	mov	r12, r31
    1a02:	dd 24       	eor	r13, r13
    1a04:	c1 14       	cp	r12, r1
    1a06:	d1 04       	cpc	r13, r1
    1a08:	21 f0       	breq	.+8      	; 0x1a12 <_ZN7Display16draw_number16x16Ehhh+0xca>
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8c 29       	or	r24, r12
    1a10:	80 83       	st	Z, r24
    1a12:	4f 5f       	subi	r20, 0xFF	; 255
    1a14:	5f 4f       	sbci	r21, 0xFF	; 255
    1a16:	ff ef       	ldi	r31, 0xFF	; 255
    1a18:	ef 1a       	sub	r14, r31
    1a1a:	ff 0a       	sbc	r15, r31
    1a1c:	21 96       	adiw	r28, 0x01	; 1
    1a1e:	0f 5f       	subi	r16, 0xFF	; 255
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	11 96       	adiw	r26, 0x01	; 1
    1a24:	40 32       	cpi	r20, 0x20	; 32
    1a26:	51 05       	cpc	r21, r1
    1a28:	61 f6       	brne	.-104    	; 0x19c2 <_ZN7Display16draw_number16x16Ehhh+0x7a>
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	08 95       	ret

00001a3c <_ZN7Display6analogEhhhh>:

void Display::analog(uint8_t stunde, uint8_t minute, uint8_t sekunde, uint8_t sekanzeige){
    1a3c:	2f 92       	push	r2
    1a3e:	3f 92       	push	r3
    1a40:	4f 92       	push	r4
    1a42:	5f 92       	push	r5
    1a44:	6f 92       	push	r6
    1a46:	7f 92       	push	r7
    1a48:	8f 92       	push	r8
    1a4a:	9f 92       	push	r9
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	27 97       	sbiw	r28, 0x07	; 7
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	9f 83       	std	Y+7, r25	; 0x07
    1a72:	8e 83       	std	Y+6, r24	; 0x06
    1a74:	6d 83       	std	Y+5, r22	; 0x05
    1a76:	34 2e       	mov	r3, r20
	uint8_t Px=32-1;
	uint8_t Py=32-1;
	uint8_t x=0,y=0;
	float winkel=0;
	
	if (sekanzeige)
    1a78:	00 23       	and	r16, r16
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <_ZN7Display6analogEhhhh+0x42>
    1a7c:	26 c1       	rjmp	.+588    	; 0x1cca <_ZN7Display6analogEhhhh+0x28e>
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
    1a7e:	62 2f       	mov	r22, r18
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 ec       	ldi	r20, 0xC0	; 192
    1a90:	50 e4       	ldi	r21, 0x40	; 64
    1a92:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1a96:	2b ed       	ldi	r18, 0xDB	; 219
    1a98:	3f e0       	ldi	r19, 0x0F	; 15
    1a9a:	49 e4       	ldi	r20, 0x49	; 73
    1a9c:	50 e4       	ldi	r21, 0x40	; 64
    1a9e:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	44 e3       	ldi	r20, 0x34	; 52
    1aa8:	53 e4       	ldi	r21, 0x43	; 67
    1aaa:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    1aae:	2b ed       	ldi	r18, 0xDB	; 219
    1ab0:	3f e0       	ldi	r19, 0x0F	; 15
    1ab2:	49 ec       	ldi	r20, 0xC9	; 201
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <__subsf3>
    1aba:	6b 01       	movw	r12, r22
    1abc:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1abe:	0e 94 f9 3f 	call	0x7ff2	; 0x7ff2 <cos>
    1ac2:	4b 01       	movw	r8, r22
    1ac4:	5c 01       	movw	r10, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	b6 01       	movw	r22, r12
    1aca:	0e 94 5f 42 	call	0x84be	; 0x84be <sin>
    1ace:	2b 01       	movw	r4, r22
    1ad0:	3c 01       	movw	r6, r24
    1ad2:	00 e0       	ldi	r16, 0x00	; 0
    1ad4:	10 e0       	ldi	r17, 0x00	; 0
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1ad6:	b8 01       	movw	r22, r16
    1ad8:	01 2e       	mov	r0, r17
    1ada:	00 0c       	add	r0, r0
    1adc:	88 0b       	sbc	r24, r24
    1ade:	99 0b       	sbc	r25, r25
    1ae0:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1ae4:	6b 01       	movw	r12, r22
    1ae6:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1ae8:	a3 01       	movw	r20, r6
    1aea:	92 01       	movw	r18, r4
    1aec:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	48 ef       	ldi	r20, 0xF8	; 248
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1afc:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    1b00:	26 2e       	mov	r2, r22
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(sekunde*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1b02:	a5 01       	movw	r20, r10
    1b04:	94 01       	movw	r18, r8
    1b06:	c7 01       	movw	r24, r14
    1b08:	b6 01       	movw	r22, r12
    1b0a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	48 ef       	ldi	r20, 0xF8	; 248
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1b1a:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	42 2d       	mov	r20, r2
    1b22:	8e 81       	ldd	r24, Y+6	; 0x06
    1b24:	9f 81       	ldd	r25, Y+7	; 0x07
    1b26:	5a de       	rcall	.-844    	; 0x17dc <_ZN7Display9drawPixelEhhh>
    1b28:	0f 5f       	subi	r16, 0xFF	; 255
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
	float winkel=0;
	
	if (sekanzeige)
	{
		//Berechnen des Sekundenzeigers
		for(uint8_t i=0;i<r;i++){
    1b2c:	09 31       	cpi	r16, 0x19	; 25
    1b2e:	11 05       	cpc	r17, r1
    1b30:	91 f6       	brne	.-92     	; 0x1ad6 <_ZN7Display6analogEhhhh+0x9a>
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1b32:	63 2d       	mov	r22, r3
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1b3e:	69 83       	std	Y+1, r22	; 0x01
    1b40:	7a 83       	std	Y+2, r23	; 0x02
    1b42:	8b 83       	std	Y+3, r24	; 0x03
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 ec       	ldi	r20, 0xC0	; 192
    1b4c:	50 e4       	ldi	r21, 0x40	; 64
    1b4e:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1b52:	2b ed       	ldi	r18, 0xDB	; 219
    1b54:	3f e0       	ldi	r19, 0x0F	; 15
    1b56:	49 e4       	ldi	r20, 0x49	; 73
    1b58:	50 e4       	ldi	r21, 0x40	; 64
    1b5a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	44 e3       	ldi	r20, 0x34	; 52
    1b64:	53 e4       	ldi	r21, 0x43	; 67
    1b66:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    1b6a:	2b ed       	ldi	r18, 0xDB	; 219
    1b6c:	3f e0       	ldi	r19, 0x0F	; 15
    1b6e:	49 ec       	ldi	r20, 0xC9	; 201
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <__subsf3>
    1b76:	6b 01       	movw	r12, r22
    1b78:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1b7a:	0e 94 f9 3f 	call	0x7ff2	; 0x7ff2 <cos>
    1b7e:	2b 01       	movw	r4, r22
    1b80:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1b82:	c7 01       	movw	r24, r14
    1b84:	b6 01       	movw	r22, r12
    1b86:	0e 94 5f 42 	call	0x84be	; 0x84be <sin>
    1b8a:	4b 01       	movw	r8, r22
    1b8c:	5c 01       	movw	r10, r24
    1b8e:	00 e0       	ldi	r16, 0x00	; 0
    1b90:	10 e0       	ldi	r17, 0x00	; 0

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1b92:	b8 01       	movw	r22, r16
    1b94:	01 2e       	mov	r0, r17
    1b96:	00 0c       	add	r0, r0
    1b98:	88 0b       	sbc	r24, r24
    1b9a:	99 0b       	sbc	r25, r25
    1b9c:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1ba0:	6b 01       	movw	r12, r22
    1ba2:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1ba4:	a5 01       	movw	r20, r10
    1ba6:	94 01       	movw	r18, r8
    1ba8:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	48 ef       	ldi	r20, 0xF8	; 248
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1bb8:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    1bbc:	36 2e       	mov	r3, r22

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1bbe:	a3 01       	movw	r20, r6
    1bc0:	92 01       	movw	r18, r4
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	b6 01       	movw	r22, r12
    1bc6:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	48 ef       	ldi	r20, 0xF8	; 248
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1bd6:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	43 2d       	mov	r20, r3
    1bde:	8e 81       	ldd	r24, Y+6	; 0x06
    1be0:	9f 81       	ldd	r25, Y+7	; 0x07
    1be2:	fc dd       	rcall	.-1032   	; 0x17dc <_ZN7Display9drawPixelEhhh>
    1be4:	0f 5f       	subi	r16, 0xFF	; 255
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=21;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1be8:	05 31       	cpi	r16, 0x15	; 21
    1bea:	11 05       	cpc	r17, r1
    1bec:	91 f6       	brne	.-92     	; 0x1b92 <_ZN7Display6analogEhhhh+0x156>
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1bee:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf0:	62 2f       	mov	r22, r18
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 ef       	ldi	r20, 0xF0	; 240
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1c08:	6b 01       	movw	r12, r22
    1c0a:	7c 01       	movw	r14, r24
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	69 81       	ldd	r22, Y+1	; 0x01
    1c16:	7a 81       	ldd	r23, Y+2	; 0x02
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	c7 01       	movw	r24, r14
    1c26:	b6 01       	movw	r22, r12
    1c28:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1c2c:	2b ed       	ldi	r18, 0xDB	; 219
    1c2e:	3f e0       	ldi	r19, 0x0F	; 15
    1c30:	49 e4       	ldi	r20, 0x49	; 73
    1c32:	50 e4       	ldi	r21, 0x40	; 64
    1c34:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	44 e3       	ldi	r20, 0x34	; 52
    1c3e:	53 e4       	ldi	r21, 0x43	; 67
    1c40:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    1c44:	2b ed       	ldi	r18, 0xDB	; 219
    1c46:	3f e0       	ldi	r19, 0x0F	; 15
    1c48:	49 ec       	ldi	r20, 0xC9	; 201
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <__subsf3>
    1c50:	6b 01       	movw	r12, r22
    1c52:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1c54:	0e 94 f9 3f 	call	0x7ff2	; 0x7ff2 <cos>
    1c58:	4b 01       	movw	r8, r22
    1c5a:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1c5c:	c7 01       	movw	r24, r14
    1c5e:	b6 01       	movw	r22, r12
    1c60:	0e 94 5f 42 	call	0x84be	; 0x84be <sin>
    1c64:	2b 01       	movw	r4, r22
    1c66:	3c 01       	movw	r6, r24
    1c68:	00 e0       	ldi	r16, 0x00	; 0
    1c6a:	10 e0       	ldi	r17, 0x00	; 0

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1c6c:	b8 01       	movw	r22, r16
    1c6e:	01 2e       	mov	r0, r17
    1c70:	00 0c       	add	r0, r0
    1c72:	88 0b       	sbc	r24, r24
    1c74:	99 0b       	sbc	r25, r25
    1c76:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1c7a:	6b 01       	movw	r12, r22
    1c7c:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1c7e:	a3 01       	movw	r20, r6
    1c80:	92 01       	movw	r18, r4
    1c82:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	48 ef       	ldi	r20, 0xF8	; 248
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1c92:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    1c96:	36 2e       	mov	r3, r22

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1c98:	a5 01       	movw	r20, r10
    1c9a:	94 01       	movw	r18, r8
    1c9c:	c7 01       	movw	r24, r14
    1c9e:	b6 01       	movw	r22, r12
    1ca0:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	48 ef       	ldi	r20, 0xF8	; 248
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1cb0:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	43 2d       	mov	r20, r3
    1cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cba:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbc:	8f dd       	rcall	.-1250   	; 0x17dc <_ZN7Display9drawPixelEhhh>
    1cbe:	0f 5f       	subi	r16, 0xFF	; 255
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=13;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1cc2:	0d 30       	cpi	r16, 0x0D	; 13
    1cc4:	11 05       	cpc	r17, r1
    1cc6:	91 f6       	brne	.-92     	; 0x1c6c <_ZN7Display6analogEhhhh+0x230>
    1cc8:	cb c0       	rjmp	.+406    	; 0x1e60 <_ZN7Display6analogEhhhh+0x424>
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
    1cca:	64 2f       	mov	r22, r20
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1cd6:	69 83       	std	Y+1, r22	; 0x01
    1cd8:	7a 83       	std	Y+2, r23	; 0x02
    1cda:	8b 83       	std	Y+3, r24	; 0x03
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 ec       	ldi	r20, 0xC0	; 192
    1ce4:	50 e4       	ldi	r21, 0x40	; 64
    1ce6:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1cea:	2b ed       	ldi	r18, 0xDB	; 219
    1cec:	3f e0       	ldi	r19, 0x0F	; 15
    1cee:	49 e4       	ldi	r20, 0x49	; 73
    1cf0:	50 e4       	ldi	r21, 0x40	; 64
    1cf2:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	44 e3       	ldi	r20, 0x34	; 52
    1cfc:	53 e4       	ldi	r21, 0x43	; 67
    1cfe:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    1d02:	2b ed       	ldi	r18, 0xDB	; 219
    1d04:	3f e0       	ldi	r19, 0x0F	; 15
    1d06:	49 ec       	ldi	r20, 0xC9	; 201
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <__subsf3>
    1d0e:	6b 01       	movw	r12, r22
    1d10:	7c 01       	movw	r14, r24
			x=(uint8_t) i*cos(winkel)+Px;
    1d12:	0e 94 f9 3f 	call	0x7ff2	; 0x7ff2 <cos>
    1d16:	2b 01       	movw	r4, r22
    1d18:	3c 01       	movw	r6, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1d1a:	c7 01       	movw	r24, r14
    1d1c:	b6 01       	movw	r22, r12
    1d1e:	0e 94 5f 42 	call	0x84be	; 0x84be <sin>
    1d22:	4b 01       	movw	r8, r22
    1d24:	5c 01       	movw	r10, r24
    1d26:	00 e0       	ldi	r16, 0x00	; 0
    1d28:	10 e0       	ldi	r17, 0x00	; 0
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1d2a:	b8 01       	movw	r22, r16
    1d2c:	01 2e       	mov	r0, r17
    1d2e:	00 0c       	add	r0, r0
    1d30:	88 0b       	sbc	r24, r24
    1d32:	99 0b       	sbc	r25, r25
    1d34:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1d38:	6b 01       	movw	r12, r22
    1d3a:	7c 01       	movw	r14, r24
			y=(uint8_t) i*sin(winkel)+Py;
    1d3c:	a5 01       	movw	r20, r10
    1d3e:	94 01       	movw	r18, r8
    1d40:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	48 ef       	ldi	r20, 0xF8	; 248
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1d50:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    1d54:	36 2e       	mov	r3, r22
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(minute*6.0)*M_PI/180.0-M_PI/2.0;
			x=(uint8_t) i*cos(winkel)+Px;
    1d56:	a3 01       	movw	r20, r6
    1d58:	92 01       	movw	r18, r4
    1d5a:	c7 01       	movw	r24, r14
    1d5c:	b6 01       	movw	r22, r12
    1d5e:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	48 ef       	ldi	r20, 0xF8	; 248
    1d68:	51 e4       	ldi	r21, 0x41	; 65
    1d6a:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1d6e:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
			y=(uint8_t) i*sin(winkel)+Py;

			drawPixel(x,y,0);
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	43 2d       	mov	r20, r3
    1d76:	8e 81       	ldd	r24, Y+6	; 0x06
    1d78:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7a:	30 dd       	rcall	.-1440   	; 0x17dc <_ZN7Display9drawPixelEhhh>
    1d7c:	0f 5f       	subi	r16, 0xFF	; 255
    1d7e:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else{
		r=25;
		//Berechnen des Minutenzeigers
		for(uint8_t i=0;i<r;i++){
    1d80:	09 31       	cpi	r16, 0x19	; 25
    1d82:	11 05       	cpc	r17, r1
    1d84:	91 f6       	brne	.-92     	; 0x1d2a <_ZN7Display6analogEhhhh+0x2ee>
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
    1d86:	ed 81       	ldd	r30, Y+5	; 0x05
    1d88:	6e 2f       	mov	r22, r30
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 ef       	ldi	r20, 0xF0	; 240
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1da0:	6b 01       	movw	r12, r22
    1da2:	7c 01       	movw	r14, r24
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	69 81       	ldd	r22, Y+1	; 0x01
    1dae:	7a 81       	ldd	r23, Y+2	; 0x02
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1db8:	9b 01       	movw	r18, r22
    1dba:	ac 01       	movw	r20, r24
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	b6 01       	movw	r22, r12
    1dc0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1dc4:	2b ed       	ldi	r18, 0xDB	; 219
    1dc6:	3f e0       	ldi	r19, 0x0F	; 15
    1dc8:	49 e4       	ldi	r20, 0x49	; 73
    1dca:	50 e4       	ldi	r21, 0x40	; 64
    1dcc:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	44 e3       	ldi	r20, 0x34	; 52
    1dd6:	53 e4       	ldi	r21, 0x43	; 67
    1dd8:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    1ddc:	2b ed       	ldi	r18, 0xDB	; 219
    1dde:	3f e0       	ldi	r19, 0x0F	; 15
    1de0:	49 ec       	ldi	r20, 0xC9	; 201
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <__subsf3>
    1de8:	6b 01       	movw	r12, r22
    1dea:	7c 01       	movw	r14, r24
			x= (uint8_t) i*cos(winkel) +Px;
    1dec:	0e 94 f9 3f 	call	0x7ff2	; 0x7ff2 <cos>
    1df0:	4b 01       	movw	r8, r22
    1df2:	5c 01       	movw	r10, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1df4:	c7 01       	movw	r24, r14
    1df6:	b6 01       	movw	r22, r12
    1df8:	0e 94 5f 42 	call	0x84be	; 0x84be <sin>
    1dfc:	2b 01       	movw	r4, r22
    1dfe:	3c 01       	movw	r6, r24
    1e00:	00 e0       	ldi	r16, 0x00	; 0
    1e02:	10 e0       	ldi	r17, 0x00	; 0

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1e04:	b8 01       	movw	r22, r16
    1e06:	01 2e       	mov	r0, r17
    1e08:	00 0c       	add	r0, r0
    1e0a:	88 0b       	sbc	r24, r24
    1e0c:	99 0b       	sbc	r25, r25
    1e0e:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    1e12:	6b 01       	movw	r12, r22
    1e14:	7c 01       	movw	r14, r24
			y= (uint8_t) i*sin(winkel) +Py;
    1e16:	a3 01       	movw	r20, r6
    1e18:	92 01       	movw	r18, r4
    1e1a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	48 ef       	ldi	r20, 0xF8	; 248
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1e2a:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    1e2e:	36 2e       	mov	r3, r22

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
			winkel=(stunde*30.0+minute/2.0)*M_PI/180.0-M_PI/2.0;
			x= (uint8_t) i*cos(winkel) +Px;
    1e30:	a5 01       	movw	r20, r10
    1e32:	94 01       	movw	r18, r8
    1e34:	c7 01       	movw	r24, r14
    1e36:	b6 01       	movw	r22, r12
    1e38:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	48 ef       	ldi	r20, 0xF8	; 248
    1e42:	51 e4       	ldi	r21, 0x41	; 65
    1e44:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    1e48:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
			y= (uint8_t) i*sin(winkel) +Py;

			drawPixel(x,y,0);
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	43 2d       	mov	r20, r3
    1e50:	8e 81       	ldd	r24, Y+6	; 0x06
    1e52:	9f 81       	ldd	r25, Y+7	; 0x07
    1e54:	c3 dc       	rcall	.-1658   	; 0x17dc <_ZN7Display9drawPixelEhhh>
    1e56:	0f 5f       	subi	r16, 0xFF	; 255
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
			drawPixel(x,y,0);
		}

		r=17;
		//Berechnen des Stundenzeigers
		for(uint8_t i=0;i<r;i++){
    1e5a:	01 31       	cpi	r16, 0x11	; 17
    1e5c:	11 05       	cpc	r17, r1
    1e5e:	91 f6       	brne	.-92     	; 0x1e04 <_ZN7Display6analogEhhhh+0x3c8>
		}
	}
	

	//Anzeige der Zahlen
	draw_ASCI('1',32-charsize,0);
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	4a e1       	ldi	r20, 0x1A	; 26
    1e64:	61 e3       	ldi	r22, 0x31	; 49
    1e66:	8e 81       	ldd	r24, Y+6	; 0x06
    1e68:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6a:	24 dd       	rcall	.-1464   	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('2',32,0);
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	62 e3       	ldi	r22, 0x32	; 50
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	9f 81       	ldd	r25, Y+7	; 0x07
    1e76:	1e dd       	rcall	.-1476   	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('3',64-charsize,4*charhighte-charhighte/2);
    1e78:	2c e1       	ldi	r18, 0x1C	; 28
    1e7a:	4a e3       	ldi	r20, 0x3A	; 58
    1e7c:	63 e3       	ldi	r22, 0x33	; 51
    1e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e80:	9f 81       	ldd	r25, Y+7	; 0x07
    1e82:	18 dd       	rcall	.-1488   	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('6',32-charsize/2,7*charhighte);
    1e84:	28 e3       	ldi	r18, 0x38	; 56
    1e86:	4d e1       	ldi	r20, 0x1D	; 29
    1e88:	66 e3       	ldi	r22, 0x36	; 54
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	12 dd       	rcall	.-1500   	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	draw_ASCI('9',0,4*charhighte-charhighte/2);
    1e90:	2c e1       	ldi	r18, 0x1C	; 28
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	69 e3       	ldi	r22, 0x39	; 57
    1e96:	8e 81       	ldd	r24, Y+6	; 0x06
    1e98:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9a:	0c dd       	rcall	.-1512   	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>

	//anzeige des Rings fuer die Restlichen Stunden Zahlen
	//1
	drawPixel(26*cos((30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	48 e0       	ldi	r20, 0x08	; 8
    1ea0:	6c e2       	ldi	r22, 0x2C	; 44
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	9a dc       	rcall	.-1740   	; 0x17dc <_ZN7Display9drawPixelEhhh>
	//2
	drawPixel(26*cos((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((2*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	42 e1       	ldi	r20, 0x12	; 18
    1eac:	65 e3       	ldi	r22, 0x35	; 53
    1eae:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb2:	94 dc       	rcall	.-1752   	; 0x17dc <_ZN7Display9drawPixelEhhh>
	//4
	drawPixel(26*cos((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((4*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	4c e2       	ldi	r20, 0x2C	; 44
    1eb8:	65 e3       	ldi	r22, 0x35	; 53
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebe:	8e dc       	rcall	.-1764   	; 0x17dc <_ZN7Display9drawPixelEhhh>
	//5
	drawPixel(26*cos((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((5*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	45 e3       	ldi	r20, 0x35	; 53
    1ec4:	6b e2       	ldi	r22, 0x2B	; 43
    1ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eca:	88 dc       	rcall	.-1776   	; 0x17dc <_ZN7Display9drawPixelEhhh>
	//7
	drawPixel(26*cos((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((7*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	45 e3       	ldi	r20, 0x35	; 53
    1ed0:	61 e1       	ldi	r22, 0x11	; 17
    1ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed6:	82 dc       	rcall	.-1788   	; 0x17dc <_ZN7Display9drawPixelEhhh>
	//8
	drawPixel(26*cos((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((8*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	4c e2       	ldi	r20, 0x2C	; 44
    1edc:	68 e0       	ldi	r22, 0x08	; 8
    1ede:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee2:	7c dc       	rcall	.-1800   	; 0x17dc <_ZN7Display9drawPixelEhhh>
	//10
	drawPixel(26*cos((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((10*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	41 e1       	ldi	r20, 0x11	; 17
    1ee8:	68 e0       	ldi	r22, 0x08	; 8
    1eea:	8e 81       	ldd	r24, Y+6	; 0x06
    1eec:	9f 81       	ldd	r25, Y+7	; 0x07
    1eee:	76 dc       	rcall	.-1812   	; 0x17dc <_ZN7Display9drawPixelEhhh>
	//11
	drawPixel(26*cos((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,26*sin((11*30.0)*M_PI/180.0-M_PI/2.0)+Px,0);
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	48 e0       	ldi	r20, 0x08	; 8
    1ef4:	62 e1       	ldi	r22, 0x12	; 18
    1ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    1efa:	70 dc       	rcall	.-1824   	; 0x17dc <_ZN7Display9drawPixelEhhh>
}
    1efc:	27 96       	adiw	r28, 0x07	; 7
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	5f 90       	pop	r5
    1f26:	4f 90       	pop	r4
    1f28:	3f 90       	pop	r3
    1f2a:	2f 90       	pop	r2
    1f2c:	08 95       	ret

00001f2e <mem_cpy>:

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    1f2e:	41 15       	cp	r20, r1
    1f30:	51 05       	cpc	r21, r1
    1f32:	51 f0       	breq	.+20     	; 0x1f48 <mem_cpy+0x1a>
    1f34:	a6 2f       	mov	r26, r22
    1f36:	b7 2f       	mov	r27, r23
    1f38:	fc 01       	movw	r30, r24
    1f3a:	48 0f       	add	r20, r24
    1f3c:	59 1f       	adc	r21, r25
    1f3e:	9d 91       	ld	r25, X+
    1f40:	91 93       	st	Z+, r25
    1f42:	e4 17       	cp	r30, r20
    1f44:	f5 07       	cpc	r31, r21
    1f46:	d9 f7       	brne	.-10     	; 0x1f3e <mem_cpy+0x10>
    1f48:	08 95       	ret

00001f4a <ld_clust>:
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	dc 01       	movw	r26, r24
    1f50:	fb 01       	movw	r30, r22
    1f52:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f54:	69 2f       	mov	r22, r25
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	76 2f       	mov	r23, r22
    1f5a:	66 27       	eor	r22, r22
    1f5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f5e:	68 2b       	or	r22, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	2c 91       	ld	r18, X
    1f66:	23 30       	cpi	r18, 0x03	; 3
    1f68:	79 f4       	brne	.+30     	; 0x1f88 <ld_clust+0x3e>
    1f6a:	05 89       	ldd	r16, Z+21	; 0x15
    1f6c:	10 e0       	ldi	r17, 0x00	; 0
    1f6e:	10 2f       	mov	r17, r16
    1f70:	00 27       	eor	r16, r16
    1f72:	24 89       	ldd	r18, Z+20	; 0x14
    1f74:	02 2b       	or	r16, r18
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	98 01       	movw	r18, r16
    1f7c:	11 27       	eor	r17, r17
    1f7e:	00 27       	eor	r16, r16
    1f80:	60 2b       	or	r22, r16
    1f82:	71 2b       	or	r23, r17
    1f84:	82 2b       	or	r24, r18
    1f86:	93 2b       	or	r25, r19
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <get_ldnumber>:
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	a8 81       	ld	r26, Y
    1f96:	b9 81       	ldd	r27, Y+1	; 0x01
    1f98:	10 97       	sbiw	r26, 0x00	; 0
    1f9a:	f9 f0       	breq	.+62     	; 0x1fda <get_ldnumber+0x4c>
    1f9c:	4c 91       	ld	r20, X
    1f9e:	41 32       	cpi	r20, 0x21	; 33
    1fa0:	58 f0       	brcs	.+22     	; 0x1fb8 <get_ldnumber+0x2a>
    1fa2:	4a 33       	cpi	r20, 0x3A	; 58
    1fa4:	31 f1       	breq	.+76     	; 0x1ff2 <get_ldnumber+0x64>
    1fa6:	fd 01       	movw	r30, r26
    1fa8:	31 96       	adiw	r30, 0x01	; 1
    1faa:	9f 01       	movw	r18, r30
    1fac:	91 91       	ld	r25, Z+
    1fae:	91 32       	cpi	r25, 0x21	; 33
    1fb0:	28 f0       	brcs	.+10     	; 0x1fbc <get_ldnumber+0x2e>
    1fb2:	9a 33       	cpi	r25, 0x3A	; 58
    1fb4:	d1 f7       	brne	.-12     	; 0x1faa <get_ldnumber+0x1c>
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <get_ldnumber+0x32>
    1fb8:	94 2f       	mov	r25, r20
    1fba:	9d 01       	movw	r18, r26
    1fbc:	9a 33       	cpi	r25, 0x3A	; 58
    1fbe:	81 f4       	brne	.+32     	; 0x1fe0 <get_ldnumber+0x52>
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	28 17       	cp	r18, r24
    1fc6:	39 07       	cpc	r19, r25
    1fc8:	71 f4       	brne	.+28     	; 0x1fe6 <get_ldnumber+0x58>
    1fca:	40 33       	cpi	r20, 0x30	; 48
    1fcc:	79 f4       	brne	.+30     	; 0x1fec <get_ldnumber+0x5e>
    1fce:	12 96       	adiw	r26, 0x02	; 2
    1fd0:	b9 83       	std	Y+1, r27	; 0x01
    1fd2:	a8 83       	st	Y, r26
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e c0       	rjmp	.+28     	; 0x1ff6 <get_ldnumber+0x68>
    1fda:	8f ef       	ldi	r24, 0xFF	; 255
    1fdc:	9f ef       	ldi	r25, 0xFF	; 255
    1fde:	0b c0       	rjmp	.+22     	; 0x1ff6 <get_ldnumber+0x68>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	08 c0       	rjmp	.+16     	; 0x1ff6 <get_ldnumber+0x68>
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	9f ef       	ldi	r25, 0xFF	; 255
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <get_ldnumber+0x68>
    1fec:	8f ef       	ldi	r24, 0xFF	; 255
    1fee:	9f ef       	ldi	r25, 0xFF	; 255
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <get_ldnumber+0x68>
    1ff2:	9d 01       	movw	r18, r26
    1ff4:	e5 cf       	rjmp	.-54     	; 0x1fc0 <get_ldnumber+0x32>
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <sync_window>:
    1ffc:	8f 92       	push	r8
    1ffe:	9f 92       	push	r9
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	fc 01       	movw	r30, r24
    2016:	24 81       	ldd	r18, Z+4	; 0x04
    2018:	22 23       	and	r18, r18
    201a:	09 f4       	brne	.+2      	; 0x201e <sync_window+0x22>
    201c:	44 c0       	rjmp	.+136    	; 0x20a6 <sync_window+0xaa>
    201e:	ec 01       	movw	r28, r24
    2020:	c2 a4       	ldd	r12, Z+42	; 0x2a
    2022:	d3 a4       	ldd	r13, Z+43	; 0x2b
    2024:	e4 a4       	ldd	r14, Z+44	; 0x2c
    2026:	f5 a4       	ldd	r15, Z+45	; 0x2d
    2028:	5c 01       	movw	r10, r24
    202a:	fe e2       	ldi	r31, 0x2E	; 46
    202c:	af 0e       	add	r10, r31
    202e:	b1 1c       	adc	r11, r1
    2030:	01 e0       	ldi	r16, 0x01	; 1
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	a7 01       	movw	r20, r14
    2036:	96 01       	movw	r18, r12
    2038:	b5 01       	movw	r22, r10
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	f7 d8       	rcall	.-3602   	; 0x122c <disk_write>
    203e:	81 11       	cpse	r24, r1
    2040:	34 c0       	rjmp	.+104    	; 0x20aa <sync_window+0xae>
    2042:	1c 82       	std	Y+4, r1	; 0x04
    2044:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2046:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2048:	a8 a1       	ldd	r26, Y+32	; 0x20
    204a:	b9 a1       	ldd	r27, Y+33	; 0x21
    204c:	b7 01       	movw	r22, r14
    204e:	a6 01       	movw	r20, r12
    2050:	48 1b       	sub	r20, r24
    2052:	59 0b       	sbc	r21, r25
    2054:	6a 0b       	sbc	r22, r26
    2056:	7b 0b       	sbc	r23, r27
    2058:	8e 89       	ldd	r24, Y+22	; 0x16
    205a:	9f 89       	ldd	r25, Y+23	; 0x17
    205c:	a8 8d       	ldd	r26, Y+24	; 0x18
    205e:	b9 8d       	ldd	r27, Y+25	; 0x19
    2060:	48 17       	cp	r20, r24
    2062:	59 07       	cpc	r21, r25
    2064:	6a 07       	cpc	r22, r26
    2066:	7b 07       	cpc	r23, r27
    2068:	10 f5       	brcc	.+68     	; 0x20ae <sync_window+0xb2>
    206a:	8b 80       	ldd	r8, Y+3	; 0x03
    206c:	91 2c       	mov	r9, r1
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	88 16       	cp	r8, r24
    2072:	91 04       	cpc	r9, r1
    2074:	f0 f0       	brcs	.+60     	; 0x20b2 <sync_window+0xb6>
    2076:	8e 89       	ldd	r24, Y+22	; 0x16
    2078:	9f 89       	ldd	r25, Y+23	; 0x17
    207a:	a8 8d       	ldd	r26, Y+24	; 0x18
    207c:	b9 8d       	ldd	r27, Y+25	; 0x19
    207e:	c8 0e       	add	r12, r24
    2080:	d9 1e       	adc	r13, r25
    2082:	ea 1e       	adc	r14, r26
    2084:	fb 1e       	adc	r15, r27
    2086:	01 e0       	ldi	r16, 0x01	; 1
    2088:	10 e0       	ldi	r17, 0x00	; 0
    208a:	a7 01       	movw	r20, r14
    208c:	96 01       	movw	r18, r12
    208e:	b5 01       	movw	r22, r10
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	cc d8       	rcall	.-3688   	; 0x122c <disk_write>
    2094:	e1 e0       	ldi	r30, 0x01	; 1
    2096:	8e 1a       	sub	r8, r30
    2098:	91 08       	sbc	r9, r1
    209a:	f1 e0       	ldi	r31, 0x01	; 1
    209c:	8f 16       	cp	r8, r31
    209e:	91 04       	cpc	r9, r1
    20a0:	51 f7       	brne	.-44     	; 0x2076 <sync_window+0x7a>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <sync_window+0xb8>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <sync_window+0xb8>
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <sync_window+0xb8>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <sync_window+0xb8>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	ff 90       	pop	r15
    20be:	ef 90       	pop	r14
    20c0:	df 90       	pop	r13
    20c2:	cf 90       	pop	r12
    20c4:	bf 90       	pop	r11
    20c6:	af 90       	pop	r10
    20c8:	9f 90       	pop	r9
    20ca:	8f 90       	pop	r8
    20cc:	08 95       	ret

000020ce <move_window>:
    20ce:	8f 92       	push	r8
    20d0:	9f 92       	push	r9
    20d2:	af 92       	push	r10
    20d4:	bf 92       	push	r11
    20d6:	ff 92       	push	r15
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	ec 01       	movw	r28, r24
    20e2:	4a 01       	movw	r8, r20
    20e4:	5b 01       	movw	r10, r22
    20e6:	8a a5       	ldd	r24, Y+42	; 0x2a
    20e8:	9b a5       	ldd	r25, Y+43	; 0x2b
    20ea:	ac a5       	ldd	r26, Y+44	; 0x2c
    20ec:	bd a5       	ldd	r27, Y+45	; 0x2d
    20ee:	84 17       	cp	r24, r20
    20f0:	95 07       	cpc	r25, r21
    20f2:	a6 07       	cpc	r26, r22
    20f4:	b7 07       	cpc	r27, r23
    20f6:	d9 f0       	breq	.+54     	; 0x212e <move_window+0x60>
    20f8:	ce 01       	movw	r24, r28
    20fa:	80 df       	rcall	.-256    	; 0x1ffc <sync_window>
    20fc:	f8 2e       	mov	r15, r24
    20fe:	81 11       	cpse	r24, r1
    2100:	17 c0       	rjmp	.+46     	; 0x2130 <move_window+0x62>
    2102:	01 e0       	ldi	r16, 0x01	; 1
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	a5 01       	movw	r20, r10
    2108:	94 01       	movw	r18, r8
    210a:	be 01       	movw	r22, r28
    210c:	62 5d       	subi	r22, 0xD2	; 210
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	3a d8       	rcall	.-3980   	; 0x1188 <disk_read>
    2114:	88 23       	and	r24, r24
    2116:	31 f0       	breq	.+12     	; 0x2124 <move_window+0x56>
    2118:	ff 24       	eor	r15, r15
    211a:	f3 94       	inc	r15
    211c:	88 24       	eor	r8, r8
    211e:	8a 94       	dec	r8
    2120:	98 2c       	mov	r9, r8
    2122:	54 01       	movw	r10, r8
    2124:	8a a6       	std	Y+42, r8	; 0x2a
    2126:	9b a6       	std	Y+43, r9	; 0x2b
    2128:	ac a6       	std	Y+44, r10	; 0x2c
    212a:	bd a6       	std	Y+45, r11	; 0x2d
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <move_window+0x62>
    212e:	f1 2c       	mov	r15, r1
    2130:	8f 2d       	mov	r24, r15
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	bf 90       	pop	r11
    213e:	af 90       	pop	r10
    2140:	9f 90       	pop	r9
    2142:	8f 90       	pop	r8
    2144:	08 95       	ret

00002146 <check_fs>:
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	ec 01       	movw	r28, r24
    214c:	1c 82       	std	Y+4, r1	; 0x04
    214e:	8f ef       	ldi	r24, 0xFF	; 255
    2150:	9f ef       	ldi	r25, 0xFF	; 255
    2152:	dc 01       	movw	r26, r24
    2154:	8a a7       	std	Y+42, r24	; 0x2a
    2156:	9b a7       	std	Y+43, r25	; 0x2b
    2158:	ac a7       	std	Y+44, r26	; 0x2c
    215a:	bd a7       	std	Y+45, r27	; 0x2d
    215c:	ce 01       	movw	r24, r28
    215e:	b7 df       	rcall	.-146    	; 0x20ce <move_window>
    2160:	81 11       	cpse	r24, r1
    2162:	51 c0       	rjmp	.+162    	; 0x2206 <check_fs+0xc0>
    2164:	fe 01       	movw	r30, r28
    2166:	e3 5d       	subi	r30, 0xD3	; 211
    2168:	fd 4f       	sbci	r31, 0xFD	; 253
    216a:	80 81       	ld	r24, Z
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	98 2f       	mov	r25, r24
    2170:	88 27       	eor	r24, r24
    2172:	31 97       	sbiw	r30, 0x01	; 1
    2174:	20 81       	ld	r18, Z
    2176:	82 2b       	or	r24, r18
    2178:	85 35       	cpi	r24, 0x55	; 85
    217a:	9a 4a       	sbci	r25, 0xAA	; 170
    217c:	09 f0       	breq	.+2      	; 0x2180 <check_fs+0x3a>
    217e:	45 c0       	rjmp	.+138    	; 0x220a <check_fs+0xc4>
    2180:	e5 5c       	subi	r30, 0xC5	; 197
    2182:	f1 40       	sbci	r31, 0x01	; 1
    2184:	20 81       	ld	r18, Z
    2186:	31 97       	sbiw	r30, 0x01	; 1
    2188:	80 81       	ld	r24, Z
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	a0 e0       	ldi	r26, 0x00	; 0
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	dc 01       	movw	r26, r24
    2192:	99 27       	eor	r25, r25
    2194:	88 27       	eor	r24, r24
    2196:	b2 2b       	or	r27, r18
    2198:	32 97       	sbiw	r30, 0x02	; 2
    219a:	20 81       	ld	r18, Z
    219c:	82 2b       	or	r24, r18
    219e:	31 96       	adiw	r30, 0x01	; 1
    21a0:	40 81       	ld	r20, Z
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	54 2f       	mov	r21, r20
    21a6:	44 27       	eor	r20, r20
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	84 2b       	or	r24, r20
    21ae:	95 2b       	or	r25, r21
    21b0:	a6 2b       	or	r26, r22
    21b2:	b7 2b       	or	r27, r23
    21b4:	bb 27       	eor	r27, r27
    21b6:	86 34       	cpi	r24, 0x46	; 70
    21b8:	91 44       	sbci	r25, 0x41	; 65
    21ba:	a4 45       	sbci	r26, 0x54	; 84
    21bc:	b1 05       	cpc	r27, r1
    21be:	39 f1       	breq	.+78     	; 0x220e <check_fs+0xc8>
    21c0:	7e 96       	adiw	r30, 0x1e	; 30
    21c2:	80 81       	ld	r24, Z
    21c4:	31 97       	sbiw	r30, 0x01	; 1
    21c6:	40 81       	ld	r20, Z
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	ba 01       	movw	r22, r20
    21d0:	55 27       	eor	r21, r21
    21d2:	44 27       	eor	r20, r20
    21d4:	78 2b       	or	r23, r24
    21d6:	32 97       	sbiw	r30, 0x02	; 2
    21d8:	80 81       	ld	r24, Z
    21da:	48 2b       	or	r20, r24
    21dc:	cf 57       	subi	r28, 0x7F	; 127
    21de:	df 4f       	sbci	r29, 0xFF	; 255
    21e0:	88 81       	ld	r24, Y
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	98 2f       	mov	r25, r24
    21e6:	88 27       	eor	r24, r24
    21e8:	a0 e0       	ldi	r26, 0x00	; 0
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	48 2b       	or	r20, r24
    21ee:	59 2b       	or	r21, r25
    21f0:	6a 2b       	or	r22, r26
    21f2:	7b 2b       	or	r23, r27
    21f4:	77 27       	eor	r23, r23
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	46 34       	cpi	r20, 0x46	; 70
    21fa:	51 44       	sbci	r21, 0x41	; 65
    21fc:	64 45       	sbci	r22, 0x54	; 84
    21fe:	71 05       	cpc	r23, r1
    2200:	39 f4       	brne	.+14     	; 0x2210 <check_fs+0xca>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	05 c0       	rjmp	.+10     	; 0x2210 <check_fs+0xca>
    2206:	83 e0       	ldi	r24, 0x03	; 3
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <check_fs+0xca>
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <check_fs+0xca>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	08 95       	ret

00002216 <validate>:
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	c9 f0       	breq	.+50     	; 0x224c <validate+0x36>
    221a:	dc 01       	movw	r26, r24
    221c:	ed 91       	ld	r30, X+
    221e:	fc 91       	ld	r31, X
    2220:	11 97       	sbiw	r26, 0x01	; 1
    2222:	30 97       	sbiw	r30, 0x00	; 0
    2224:	a9 f0       	breq	.+42     	; 0x2250 <validate+0x3a>
    2226:	20 81       	ld	r18, Z
    2228:	22 23       	and	r18, r18
    222a:	a1 f0       	breq	.+40     	; 0x2254 <validate+0x3e>
    222c:	26 81       	ldd	r18, Z+6	; 0x06
    222e:	37 81       	ldd	r19, Z+7	; 0x07
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	8d 91       	ld	r24, X+
    2234:	9c 91       	ld	r25, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	28 17       	cp	r18, r24
    223a:	39 07       	cpc	r19, r25
    223c:	69 f4       	brne	.+26     	; 0x2258 <validate+0x42>
    223e:	81 81       	ldd	r24, Z+1	; 0x01
    2240:	0e 94 bd 08 	call	0x117a	; 0x117a <disk_status>
    2244:	80 ff       	sbrs	r24, 0
    2246:	0a c0       	rjmp	.+20     	; 0x225c <validate+0x46>
    2248:	89 e0       	ldi	r24, 0x09	; 9
    224a:	08 95       	ret
    224c:	89 e0       	ldi	r24, 0x09	; 9
    224e:	08 95       	ret
    2250:	89 e0       	ldi	r24, 0x09	; 9
    2252:	08 95       	ret
    2254:	89 e0       	ldi	r24, 0x09	; 9
    2256:	08 95       	ret
    2258:	89 e0       	ldi	r24, 0x09	; 9
    225a:	08 95       	ret
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	08 95       	ret

00002260 <find_volume>:
    2260:	2f 92       	push	r2
    2262:	3f 92       	push	r3
    2264:	4f 92       	push	r4
    2266:	5f 92       	push	r5
    2268:	6f 92       	push	r6
    226a:	7f 92       	push	r7
    226c:	8f 92       	push	r8
    226e:	9f 92       	push	r9
    2270:	af 92       	push	r10
    2272:	bf 92       	push	r11
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	6d 97       	sbiw	r28, 0x1d	; 29
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	6c 01       	movw	r12, r24
    2296:	cb 01       	movw	r24, r22
    2298:	b4 2e       	mov	r11, r20
    229a:	d6 01       	movw	r26, r12
    229c:	1d 92       	st	X+, r1
    229e:	1c 92       	st	X, r1
    22a0:	76 de       	rcall	.-788    	; 0x1f8e <get_ldnumber>
    22a2:	7c 01       	movw	r14, r24
    22a4:	99 23       	and	r25, r25
    22a6:	0c f4       	brge	.+2      	; 0x22aa <find_volume+0x4a>
    22a8:	d7 c2       	rjmp	.+1454   	; 0x2858 <find_volume+0x5f8>
    22aa:	fc 01       	movw	r30, r24
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	e3 5d       	subi	r30, 0xD3	; 211
    22b2:	fb 4f       	sbci	r31, 0xFB	; 251
    22b4:	00 81       	ld	r16, Z
    22b6:	11 81       	ldd	r17, Z+1	; 0x01
    22b8:	01 15       	cp	r16, r1
    22ba:	11 05       	cpc	r17, r1
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <find_volume+0x60>
    22be:	ce c2       	rjmp	.+1436   	; 0x285c <find_volume+0x5fc>
    22c0:	f6 01       	movw	r30, r12
    22c2:	11 83       	std	Z+1, r17	; 0x01
    22c4:	00 83       	st	Z, r16
    22c6:	d8 01       	movw	r26, r16
    22c8:	8c 91       	ld	r24, X
    22ca:	88 23       	and	r24, r24
    22cc:	69 f0       	breq	.+26     	; 0x22e8 <find_volume+0x88>
    22ce:	11 96       	adiw	r26, 0x01	; 1
    22d0:	8c 91       	ld	r24, X
    22d2:	0e 94 bd 08 	call	0x117a	; 0x117a <disk_status>
    22d6:	80 fd       	sbrc	r24, 0
    22d8:	07 c0       	rjmp	.+14     	; 0x22e8 <find_volume+0x88>
    22da:	bb 20       	and	r11, r11
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <find_volume+0x80>
    22de:	c0 c2       	rjmp	.+1408   	; 0x2860 <find_volume+0x600>
    22e0:	82 ff       	sbrs	r24, 2
    22e2:	c0 c2       	rjmp	.+1408   	; 0x2864 <find_volume+0x604>
    22e4:	8a e0       	ldi	r24, 0x0A	; 10
    22e6:	65 c3       	rjmp	.+1738   	; 0x29b2 <find_volume+0x752>
    22e8:	f8 01       	movw	r30, r16
    22ea:	10 82       	st	Z, r1
    22ec:	e1 82       	std	Z+1, r14	; 0x01
    22ee:	8e 2d       	mov	r24, r14
    22f0:	0e 94 fc 07 	call	0xff8	; 0xff8 <disk_initialize>
    22f4:	80 fd       	sbrc	r24, 0
    22f6:	b8 c2       	rjmp	.+1392   	; 0x2868 <find_volume+0x608>
    22f8:	bb 20       	and	r11, r11
    22fa:	09 f4       	brne	.+2      	; 0x22fe <find_volume+0x9e>
    22fc:	d5 c2       	rjmp	.+1450   	; 0x28a8 <find_volume+0x648>
    22fe:	82 fd       	sbrc	r24, 2
    2300:	b5 c2       	rjmp	.+1386   	; 0x286c <find_volume+0x60c>
    2302:	d2 c2       	rjmp	.+1444   	; 0x28a8 <find_volume+0x648>
    2304:	df 01       	movw	r26, r30
    2306:	17 97       	sbiw	r26, 0x07	; 7
    2308:	8c 91       	ld	r24, X
    230a:	88 23       	and	r24, r24
    230c:	b9 f0       	breq	.+46     	; 0x233c <find_volume+0xdc>
    230e:	14 96       	adiw	r26, 0x04	; 4
    2310:	cc 90       	ld	r12, X
    2312:	80 81       	ld	r24, Z
    2314:	d1 2c       	mov	r13, r1
    2316:	e1 2c       	mov	r14, r1
    2318:	f1 2c       	mov	r15, r1
    231a:	f8 2a       	or	r15, r24
    231c:	12 96       	adiw	r26, 0x02	; 2
    231e:	8c 91       	ld	r24, X
    2320:	e8 2a       	or	r14, r24
    2322:	11 97       	sbiw	r26, 0x01	; 1
    2324:	ac 91       	ld	r26, X
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	ba 2f       	mov	r27, r26
    232a:	aa 27       	eor	r26, r26
    232c:	cd 01       	movw	r24, r26
    232e:	a0 e0       	ldi	r26, 0x00	; 0
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	c8 2a       	or	r12, r24
    2334:	d9 2a       	or	r13, r25
    2336:	ea 2a       	or	r14, r26
    2338:	fb 2a       	or	r15, r27
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <find_volume+0xe4>
    233c:	c8 2c       	mov	r12, r8
    233e:	d9 2c       	mov	r13, r9
    2340:	e7 2e       	mov	r14, r23
    2342:	f6 2e       	mov	r15, r22
    2344:	d9 01       	movw	r26, r18
    2346:	cd 92       	st	X+, r12
    2348:	dd 92       	st	X+, r13
    234a:	ed 92       	st	X+, r14
    234c:	fd 92       	st	X+, r15
    234e:	9d 01       	movw	r18, r26
    2350:	70 96       	adiw	r30, 0x10	; 16
    2352:	e4 17       	cp	r30, r20
    2354:	f5 07       	cpc	r31, r21
    2356:	b1 f6       	brne	.-84     	; 0x2304 <find_volume+0xa4>
    2358:	4e 01       	movw	r8, r28
    235a:	b1 e1       	ldi	r27, 0x11	; 17
    235c:	8b 0e       	add	r8, r27
    235e:	91 1c       	adc	r9, r1
    2360:	68 94       	set
    2362:	77 24       	eor	r7, r7
    2364:	71 f8       	bld	r7, 1
    2366:	f5 01       	movw	r30, r10
    2368:	c1 90       	ld	r12, Z+
    236a:	d1 90       	ld	r13, Z+
    236c:	e1 90       	ld	r14, Z+
    236e:	f1 90       	ld	r15, Z+
    2370:	5f 01       	movw	r10, r30
    2372:	c1 14       	cp	r12, r1
    2374:	d1 04       	cpc	r13, r1
    2376:	e1 04       	cpc	r14, r1
    2378:	f1 04       	cpc	r15, r1
    237a:	39 f0       	breq	.+14     	; 0x238a <find_volume+0x12a>
    237c:	b7 01       	movw	r22, r14
    237e:	a6 01       	movw	r20, r12
    2380:	c8 01       	movw	r24, r16
    2382:	e1 de       	rcall	.-574    	; 0x2146 <check_fs>
    2384:	81 11       	cpse	r24, r1
    2386:	02 c0       	rjmp	.+4      	; 0x238c <find_volume+0x12c>
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <find_volume+0x144>
    238a:	87 2d       	mov	r24, r7
    238c:	a8 14       	cp	r10, r8
    238e:	b9 04       	cpc	r11, r9
    2390:	51 f7       	brne	.-44     	; 0x2366 <find_volume+0x106>
    2392:	03 c0       	rjmp	.+6      	; 0x239a <find_volume+0x13a>
    2394:	c1 2c       	mov	r12, r1
    2396:	d1 2c       	mov	r13, r1
    2398:	76 01       	movw	r14, r12
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	09 f4       	brne	.+2      	; 0x23a0 <find_volume+0x140>
    239e:	68 c2       	rjmp	.+1232   	; 0x2870 <find_volume+0x610>
    23a0:	81 11       	cpse	r24, r1
    23a2:	68 c2       	rjmp	.+1232   	; 0x2874 <find_volume+0x614>
    23a4:	d8 01       	movw	r26, r16
    23a6:	da 96       	adiw	r26, 0x3a	; 58
    23a8:	8c 91       	ld	r24, X
    23aa:	da 97       	sbiw	r26, 0x3a	; 58
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	98 2f       	mov	r25, r24
    23b0:	88 27       	eor	r24, r24
    23b2:	d9 96       	adiw	r26, 0x39	; 57
    23b4:	2c 91       	ld	r18, X
    23b6:	82 2b       	or	r24, r18
    23b8:	81 15       	cp	r24, r1
    23ba:	92 40       	sbci	r25, 0x02	; 2
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <find_volume+0x160>
    23be:	5c c2       	rjmp	.+1208   	; 0x2878 <find_volume+0x618>
    23c0:	f8 01       	movw	r30, r16
    23c2:	eb 5b       	subi	r30, 0xBB	; 187
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 80       	ld	r8, Z
    23c8:	91 2c       	mov	r9, r1
    23ca:	98 2c       	mov	r9, r8
    23cc:	88 24       	eor	r8, r8
    23ce:	31 97       	sbiw	r30, 0x01	; 1
    23d0:	80 81       	ld	r24, Z
    23d2:	88 2a       	or	r8, r24
    23d4:	a1 2c       	mov	r10, r1
    23d6:	b1 2c       	mov	r11, r1
    23d8:	81 14       	cp	r8, r1
    23da:	91 04       	cpc	r9, r1
    23dc:	a1 04       	cpc	r10, r1
    23de:	b1 04       	cpc	r11, r1
    23e0:	e9 f4       	brne	.+58     	; 0x241c <find_volume+0x1bc>
    23e2:	71 96       	adiw	r30, 0x11	; 17
    23e4:	80 81       	ld	r24, Z
    23e6:	31 97       	sbiw	r30, 0x01	; 1
    23e8:	80 80       	ld	r8, Z
    23ea:	91 2c       	mov	r9, r1
    23ec:	a1 2c       	mov	r10, r1
    23ee:	b1 2c       	mov	r11, r1
    23f0:	54 01       	movw	r10, r8
    23f2:	99 24       	eor	r9, r9
    23f4:	88 24       	eor	r8, r8
    23f6:	b8 2a       	or	r11, r24
    23f8:	32 97       	sbiw	r30, 0x02	; 2
    23fa:	80 81       	ld	r24, Z
    23fc:	a5 01       	movw	r20, r10
    23fe:	94 01       	movw	r18, r8
    2400:	28 2b       	or	r18, r24
    2402:	da 01       	movw	r26, r20
    2404:	c9 01       	movw	r24, r18
    2406:	31 96       	adiw	r30, 0x01	; 1
    2408:	80 80       	ld	r8, Z
    240a:	91 2c       	mov	r9, r1
    240c:	98 2c       	mov	r9, r8
    240e:	88 24       	eor	r8, r8
    2410:	a1 2c       	mov	r10, r1
    2412:	b1 2c       	mov	r11, r1
    2414:	88 2a       	or	r8, r24
    2416:	99 2a       	or	r9, r25
    2418:	aa 2a       	or	r10, r26
    241a:	bb 2a       	or	r11, r27
    241c:	d8 01       	movw	r26, r16
    241e:	56 96       	adiw	r26, 0x16	; 22
    2420:	8d 92       	st	X+, r8
    2422:	9d 92       	st	X+, r9
    2424:	ad 92       	st	X+, r10
    2426:	bc 92       	st	X, r11
    2428:	59 97       	sbiw	r26, 0x19	; 25
    242a:	de 96       	adiw	r26, 0x3e	; 62
    242c:	ac 91       	ld	r26, X
    242e:	f8 01       	movw	r30, r16
    2430:	a3 83       	std	Z+3, r26	; 0x03
    2432:	8f ef       	ldi	r24, 0xFF	; 255
    2434:	8a 0f       	add	r24, r26
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	08 f0       	brcs	.+2      	; 0x243c <find_volume+0x1dc>
    243a:	20 c2       	rjmp	.+1088   	; 0x287c <find_volume+0x61c>
    243c:	f3 ad       	ldd	r31, Z+59	; 0x3b
    243e:	f9 8b       	std	Y+17, r31	; 0x11
    2440:	2f 2f       	mov	r18, r31
    2442:	f8 01       	movw	r30, r16
    2444:	22 83       	std	Z+2, r18	; 0x02
    2446:	22 23       	and	r18, r18
    2448:	09 f4       	brne	.+2      	; 0x244c <find_volume+0x1ec>
    244a:	1a c2       	rjmp	.+1076   	; 0x2880 <find_volume+0x620>
    244c:	82 2f       	mov	r24, r18
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9c 01       	movw	r18, r24
    2452:	21 50       	subi	r18, 0x01	; 1
    2454:	31 09       	sbc	r19, r1
    2456:	82 23       	and	r24, r18
    2458:	93 23       	and	r25, r19
    245a:	89 2b       	or	r24, r25
    245c:	09 f0       	breq	.+2      	; 0x2460 <find_volume+0x200>
    245e:	12 c2       	rjmp	.+1060   	; 0x2884 <find_volume+0x624>
    2460:	e0 5c       	subi	r30, 0xC0	; 192
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	98 2f       	mov	r25, r24
    246a:	88 27       	eor	r24, r24
    246c:	f8 01       	movw	r30, r16
    246e:	27 ad       	ldd	r18, Z+63	; 0x3f
    2470:	1c 01       	movw	r2, r24
    2472:	22 2a       	or	r2, r18
    2474:	31 86       	std	Z+9, r3	; 0x09
    2476:	20 86       	std	Z+8, r2	; 0x08
    2478:	c1 01       	movw	r24, r2
    247a:	8f 70       	andi	r24, 0x0F	; 15
    247c:	99 27       	eor	r25, r25
    247e:	89 2b       	or	r24, r25
    2480:	09 f0       	breq	.+2      	; 0x2484 <find_volume+0x224>
    2482:	02 c2       	rjmp	.+1028   	; 0x2888 <find_volume+0x628>
    2484:	ee 5b       	subi	r30, 0xBE	; 190
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	40 80       	ld	r4, Z
    248a:	51 2c       	mov	r5, r1
    248c:	54 2c       	mov	r5, r4
    248e:	44 24       	eor	r4, r4
    2490:	31 97       	sbiw	r30, 0x01	; 1
    2492:	80 81       	ld	r24, Z
    2494:	48 2a       	or	r4, r24
    2496:	61 2c       	mov	r6, r1
    2498:	71 2c       	mov	r7, r1
    249a:	41 14       	cp	r4, r1
    249c:	51 04       	cpc	r5, r1
    249e:	61 04       	cpc	r6, r1
    24a0:	71 04       	cpc	r7, r1
    24a2:	d1 f4       	brne	.+52     	; 0x24d8 <find_volume+0x278>
    24a4:	70 96       	adiw	r30, 0x10	; 16
    24a6:	80 81       	ld	r24, Z
    24a8:	31 97       	sbiw	r30, 0x01	; 1
    24aa:	40 80       	ld	r4, Z
    24ac:	51 2c       	mov	r5, r1
    24ae:	61 2c       	mov	r6, r1
    24b0:	71 2c       	mov	r7, r1
    24b2:	32 01       	movw	r6, r4
    24b4:	55 24       	eor	r5, r5
    24b6:	44 24       	eor	r4, r4
    24b8:	78 2a       	or	r7, r24
    24ba:	32 97       	sbiw	r30, 0x02	; 2
    24bc:	80 81       	ld	r24, Z
    24be:	48 2a       	or	r4, r24
    24c0:	31 96       	adiw	r30, 0x01	; 1
    24c2:	80 81       	ld	r24, Z
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	98 2f       	mov	r25, r24
    24c8:	88 27       	eor	r24, r24
    24ca:	ac 01       	movw	r20, r24
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	70 e0       	ldi	r23, 0x00	; 0
    24d0:	44 2a       	or	r4, r20
    24d2:	55 2a       	or	r5, r21
    24d4:	66 2a       	or	r6, r22
    24d6:	77 2a       	or	r7, r23
    24d8:	f8 01       	movw	r30, r16
    24da:	85 ad       	ldd	r24, Z+61	; 0x3d
    24dc:	e8 2f       	mov	r30, r24
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	3e 2f       	mov	r19, r30
    24e2:	22 27       	eor	r18, r18
    24e4:	f8 01       	movw	r30, r16
    24e6:	84 ad       	ldd	r24, Z+60	; 0x3c
    24e8:	f9 01       	movw	r30, r18
    24ea:	e8 2b       	or	r30, r24
    24ec:	30 97       	sbiw	r30, 0x00	; 0
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <find_volume+0x292>
    24f0:	cd c1       	rjmp	.+922    	; 0x288c <find_volume+0x62c>
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	a5 01       	movw	r20, r10
    24f6:	94 01       	movw	r18, r8
    24f8:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <__muluhisi3>
    24fc:	6a 8f       	std	Y+26, r22	; 0x1a
    24fe:	7b 8f       	std	Y+27, r23	; 0x1b
    2500:	8c 8f       	std	Y+28, r24	; 0x1c
    2502:	9d 8f       	std	Y+29, r25	; 0x1d
    2504:	9f 01       	movw	r18, r30
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	2e 8b       	std	Y+22, r18	; 0x16
    250c:	3f 8b       	std	Y+23, r19	; 0x17
    250e:	48 8f       	std	Y+24, r20	; 0x18
    2510:	59 8f       	std	Y+25, r21	; 0x19
    2512:	c1 01       	movw	r24, r2
    2514:	92 95       	swap	r25
    2516:	82 95       	swap	r24
    2518:	8f 70       	andi	r24, 0x0F	; 15
    251a:	89 27       	eor	r24, r25
    251c:	9f 70       	andi	r25, 0x0F	; 15
    251e:	89 27       	eor	r24, r25
    2520:	28 0f       	add	r18, r24
    2522:	39 1f       	adc	r19, r25
    2524:	41 1d       	adc	r20, r1
    2526:	51 1d       	adc	r21, r1
    2528:	da 01       	movw	r26, r20
    252a:	c9 01       	movw	r24, r18
    252c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    252e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2530:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2532:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2534:	28 0f       	add	r18, r24
    2536:	39 1f       	adc	r19, r25
    2538:	4a 1f       	adc	r20, r26
    253a:	5b 1f       	adc	r21, r27
    253c:	2a 8b       	std	Y+18, r18	; 0x12
    253e:	3b 8b       	std	Y+19, r19	; 0x13
    2540:	4c 8b       	std	Y+20, r20	; 0x14
    2542:	5d 8b       	std	Y+21, r21	; 0x15
    2544:	42 16       	cp	r4, r18
    2546:	53 06       	cpc	r5, r19
    2548:	64 06       	cpc	r6, r20
    254a:	75 06       	cpc	r7, r21
    254c:	08 f4       	brcc	.+2      	; 0x2550 <find_volume+0x2f0>
    254e:	a0 c1       	rjmp	.+832    	; 0x2890 <find_volume+0x630>
    2550:	c3 01       	movw	r24, r6
    2552:	b2 01       	movw	r22, r4
    2554:	62 1b       	sub	r22, r18
    2556:	73 0b       	sbc	r23, r19
    2558:	84 0b       	sbc	r24, r20
    255a:	95 0b       	sbc	r25, r21
    255c:	e9 89       	ldd	r30, Y+17	; 0x11
    255e:	2e 2f       	mov	r18, r30
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <__udivmodsi4>
    256a:	da 01       	movw	r26, r20
    256c:	c9 01       	movw	r24, r18
    256e:	21 15       	cp	r18, r1
    2570:	31 05       	cpc	r19, r1
    2572:	41 05       	cpc	r20, r1
    2574:	51 05       	cpc	r21, r1
    2576:	09 f4       	brne	.+2      	; 0x257a <find_volume+0x31a>
    2578:	8d c1       	rjmp	.+794    	; 0x2894 <find_volume+0x634>
    257a:	26 3f       	cpi	r18, 0xF6	; 246
    257c:	ff e0       	ldi	r31, 0x0F	; 15
    257e:	3f 07       	cpc	r19, r31
    2580:	41 05       	cpc	r20, r1
    2582:	51 05       	cpc	r21, r1
    2584:	18 f0       	brcs	.+6      	; 0x258c <find_volume+0x32c>
    2586:	e2 e0       	ldi	r30, 0x02	; 2
    2588:	e9 8b       	std	Y+17, r30	; 0x11
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <find_volume+0x330>
    258c:	f1 e0       	ldi	r31, 0x01	; 1
    258e:	f9 8b       	std	Y+17, r31	; 0x11
    2590:	86 3f       	cpi	r24, 0xF6	; 246
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	a1 05       	cpc	r26, r1
    2596:	b1 05       	cpc	r27, r1
    2598:	08 f0       	brcs	.+2      	; 0x259c <find_volume+0x33c>
    259a:	9d c1       	rjmp	.+826    	; 0x28d6 <find_volume+0x676>
    259c:	29 01       	movw	r4, r18
    259e:	3a 01       	movw	r6, r20
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	48 0e       	add	r4, r24
    25a4:	51 1c       	adc	r5, r1
    25a6:	61 1c       	adc	r6, r1
    25a8:	71 1c       	adc	r7, r1
    25aa:	d8 01       	movw	r26, r16
    25ac:	52 96       	adiw	r26, 0x12	; 18
    25ae:	4d 92       	st	X+, r4
    25b0:	5d 92       	st	X+, r5
    25b2:	6d 92       	st	X+, r6
    25b4:	7c 92       	st	X, r7
    25b6:	55 97       	sbiw	r26, 0x15	; 21
    25b8:	f8 01       	movw	r30, r16
    25ba:	c2 8e       	std	Z+26, r12	; 0x1a
    25bc:	d3 8e       	std	Z+27, r13	; 0x1b
    25be:	e4 8e       	std	Z+28, r14	; 0x1c
    25c0:	f5 8e       	std	Z+29, r15	; 0x1d
    25c2:	8e 89       	ldd	r24, Y+22	; 0x16
    25c4:	9f 89       	ldd	r25, Y+23	; 0x17
    25c6:	a8 8d       	ldd	r26, Y+24	; 0x18
    25c8:	b9 8d       	ldd	r27, Y+25	; 0x19
    25ca:	8c 0d       	add	r24, r12
    25cc:	9d 1d       	adc	r25, r13
    25ce:	ae 1d       	adc	r26, r14
    25d0:	bf 1d       	adc	r27, r15
    25d2:	86 8f       	std	Z+30, r24	; 0x1e
    25d4:	97 8f       	std	Z+31, r25	; 0x1f
    25d6:	a0 a3       	std	Z+32, r26	; 0x20
    25d8:	b1 a3       	std	Z+33, r27	; 0x21
    25da:	4a 89       	ldd	r20, Y+18	; 0x12
    25dc:	5b 89       	ldd	r21, Y+19	; 0x13
    25de:	6c 89       	ldd	r22, Y+20	; 0x14
    25e0:	7d 89       	ldd	r23, Y+21	; 0x15
    25e2:	4c 0d       	add	r20, r12
    25e4:	5d 1d       	adc	r21, r13
    25e6:	6e 1d       	adc	r22, r14
    25e8:	7f 1d       	adc	r23, r15
    25ea:	46 a3       	std	Z+38, r20	; 0x26
    25ec:	57 a3       	std	Z+39, r21	; 0x27
    25ee:	60 a7       	std	Z+40, r22	; 0x28
    25f0:	71 a7       	std	Z+41, r23	; 0x29
    25f2:	f9 89       	ldd	r31, Y+17	; 0x11
    25f4:	f3 30       	cpi	r31, 0x03	; 3
    25f6:	09 f0       	breq	.+2      	; 0x25fa <find_volume+0x39a>
    25f8:	44 c0       	rjmp	.+136    	; 0x2682 <find_volume+0x422>
    25fa:	23 28       	or	r2, r3
    25fc:	09 f0       	breq	.+2      	; 0x2600 <find_volume+0x3a0>
    25fe:	4c c1       	rjmp	.+664    	; 0x2898 <find_volume+0x638>
    2600:	f8 01       	movw	r30, r16
    2602:	e3 5a       	subi	r30, 0xA3	; 163
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	20 81       	ld	r18, Z
    2608:	31 97       	sbiw	r30, 0x01	; 1
    260a:	80 81       	ld	r24, Z
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e0       	ldi	r26, 0x00	; 0
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	dc 01       	movw	r26, r24
    2614:	99 27       	eor	r25, r25
    2616:	88 27       	eor	r24, r24
    2618:	b2 2b       	or	r27, r18
    261a:	32 97       	sbiw	r30, 0x02	; 2
    261c:	20 81       	ld	r18, Z
    261e:	ac 01       	movw	r20, r24
    2620:	bd 01       	movw	r22, r26
    2622:	42 2b       	or	r20, r18
    2624:	31 96       	adiw	r30, 0x01	; 1
    2626:	80 81       	ld	r24, Z
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	92 2f       	mov	r25, r18
    262e:	88 27       	eor	r24, r24
    2630:	a0 e0       	ldi	r26, 0x00	; 0
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	84 2b       	or	r24, r20
    2636:	95 2b       	or	r25, r21
    2638:	a6 2b       	or	r26, r22
    263a:	b7 2b       	or	r27, r23
    263c:	f8 01       	movw	r30, r16
    263e:	82 a3       	std	Z+34, r24	; 0x22
    2640:	93 a3       	std	Z+35, r25	; 0x23
    2642:	a4 a3       	std	Z+36, r26	; 0x24
    2644:	b5 a3       	std	Z+37, r27	; 0x25
    2646:	44 0c       	add	r4, r4
    2648:	55 1c       	adc	r5, r5
    264a:	66 1c       	adc	r6, r6
    264c:	77 1c       	adc	r7, r7
    264e:	44 0c       	add	r4, r4
    2650:	55 1c       	adc	r5, r5
    2652:	66 1c       	adc	r6, r6
    2654:	77 1c       	adc	r7, r7
    2656:	ff ef       	ldi	r31, 0xFF	; 255
    2658:	4f 0e       	add	r4, r31
    265a:	f1 e0       	ldi	r31, 0x01	; 1
    265c:	5f 1e       	adc	r5, r31
    265e:	61 1c       	adc	r6, r1
    2660:	71 1c       	adc	r7, r1
    2662:	03 2e       	mov	r0, r19
    2664:	39 e0       	ldi	r19, 0x09	; 9
    2666:	76 94       	lsr	r7
    2668:	67 94       	ror	r6
    266a:	57 94       	ror	r5
    266c:	47 94       	ror	r4
    266e:	3a 95       	dec	r19
    2670:	d1 f7       	brne	.-12     	; 0x2666 <find_volume+0x406>
    2672:	30 2d       	mov	r19, r0
    2674:	84 14       	cp	r8, r4
    2676:	95 04       	cpc	r9, r5
    2678:	a6 04       	cpc	r10, r6
    267a:	b7 04       	cpc	r11, r7
    267c:	08 f4       	brcc	.+2      	; 0x2680 <find_volume+0x420>
    267e:	0e c1       	rjmp	.+540    	; 0x289c <find_volume+0x63c>
    2680:	56 c1       	rjmp	.+684    	; 0x292e <find_volume+0x6ce>
    2682:	23 28       	or	r2, r3
    2684:	09 f4       	brne	.+2      	; 0x2688 <find_volume+0x428>
    2686:	0c c1       	rjmp	.+536    	; 0x28a0 <find_volume+0x640>
    2688:	2a 8d       	ldd	r18, Y+26	; 0x1a
    268a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    268c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    268e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2690:	82 0f       	add	r24, r18
    2692:	93 1f       	adc	r25, r19
    2694:	a4 1f       	adc	r26, r20
    2696:	b5 1f       	adc	r27, r21
    2698:	f8 01       	movw	r30, r16
    269a:	82 a3       	std	Z+34, r24	; 0x22
    269c:	93 a3       	std	Z+35, r25	; 0x23
    269e:	a4 a3       	std	Z+36, r26	; 0x24
    26a0:	b5 a3       	std	Z+37, r27	; 0x25
    26a2:	f9 89       	ldd	r31, Y+17	; 0x11
    26a4:	f2 30       	cpi	r31, 0x02	; 2
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <find_volume+0x452>
    26a8:	44 0c       	add	r4, r4
    26aa:	55 1c       	adc	r5, r5
    26ac:	66 1c       	adc	r6, r6
    26ae:	77 1c       	adc	r7, r7
    26b0:	6a c1       	rjmp	.+724    	; 0x2986 <find_volume+0x726>
    26b2:	a3 e0       	ldi	r26, 0x03	; 3
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	a3 01       	movw	r20, r6
    26b8:	92 01       	movw	r18, r4
    26ba:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <__muluhisi3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	b6 95       	lsr	r27
    26c4:	a7 95       	ror	r26
    26c6:	97 95       	ror	r25
    26c8:	87 95       	ror	r24
    26ca:	21 e0       	ldi	r18, 0x01	; 1
    26cc:	42 22       	and	r4, r18
    26ce:	55 24       	eor	r5, r5
    26d0:	66 24       	eor	r6, r6
    26d2:	77 24       	eor	r7, r7
    26d4:	48 0e       	add	r4, r24
    26d6:	59 1e       	adc	r5, r25
    26d8:	6a 1e       	adc	r6, r26
    26da:	7b 1e       	adc	r7, r27
    26dc:	54 c1       	rjmp	.+680    	; 0x2986 <find_volume+0x726>
    26de:	b7 01       	movw	r22, r14
    26e0:	a6 01       	movw	r20, r12
    26e2:	4f 5f       	subi	r20, 0xFF	; 255
    26e4:	5f 4f       	sbci	r21, 0xFF	; 255
    26e6:	6f 4f       	sbci	r22, 0xFF	; 255
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	c8 01       	movw	r24, r16
    26ec:	f0 dc       	rcall	.-1568   	; 0x20ce <move_window>
    26ee:	81 11       	cpse	r24, r1
    26f0:	96 c0       	rjmp	.+300    	; 0x281e <find_volume+0x5be>
    26f2:	d8 01       	movw	r26, r16
    26f4:	15 96       	adiw	r26, 0x05	; 5
    26f6:	1c 92       	st	X, r1
    26f8:	f8 01       	movw	r30, r16
    26fa:	e3 5d       	subi	r30, 0xD3	; 211
    26fc:	fd 4f       	sbci	r31, 0xFD	; 253
    26fe:	80 81       	ld	r24, Z
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	98 2f       	mov	r25, r24
    2704:	88 27       	eor	r24, r24
    2706:	31 97       	sbiw	r30, 0x01	; 1
    2708:	20 81       	ld	r18, Z
    270a:	82 2b       	or	r24, r18
    270c:	85 35       	cpi	r24, 0x55	; 85
    270e:	9a 4a       	sbci	r25, 0xAA	; 170
    2710:	09 f0       	breq	.+2      	; 0x2714 <find_volume+0x4b4>
    2712:	88 c0       	rjmp	.+272    	; 0x2824 <find_volume+0x5c4>
    2714:	f8 01       	movw	r30, r16
    2716:	21 a9       	ldd	r18, Z+49	; 0x31
    2718:	80 a9       	ldd	r24, Z+48	; 0x30
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e0       	ldi	r26, 0x00	; 0
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	dc 01       	movw	r26, r24
    2722:	99 27       	eor	r25, r25
    2724:	88 27       	eor	r24, r24
    2726:	b2 2b       	or	r27, r18
    2728:	26 a5       	ldd	r18, Z+46	; 0x2e
    272a:	ac 01       	movw	r20, r24
    272c:	bd 01       	movw	r22, r26
    272e:	42 2b       	or	r20, r18
    2730:	27 a5       	ldd	r18, Z+47	; 0x2f
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	92 2f       	mov	r25, r18
    2736:	88 27       	eor	r24, r24
    2738:	a0 e0       	ldi	r26, 0x00	; 0
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	84 2b       	or	r24, r20
    273e:	95 2b       	or	r25, r21
    2740:	a6 2b       	or	r26, r22
    2742:	b7 2b       	or	r27, r23
    2744:	82 35       	cpi	r24, 0x52	; 82
    2746:	92 45       	sbci	r25, 0x52	; 82
    2748:	a1 46       	sbci	r26, 0x61	; 97
    274a:	b1 44       	sbci	r27, 0x41	; 65
    274c:	09 f0       	breq	.+2      	; 0x2750 <find_volume+0x4f0>
    274e:	6d c0       	rjmp	.+218    	; 0x282a <find_volume+0x5ca>
    2750:	f8 01       	movw	r30, r16
    2752:	eb 5e       	subi	r30, 0xEB	; 235
    2754:	fd 4f       	sbci	r31, 0xFD	; 253
    2756:	20 81       	ld	r18, Z
    2758:	31 97       	sbiw	r30, 0x01	; 1
    275a:	80 81       	ld	r24, Z
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	a0 e0       	ldi	r26, 0x00	; 0
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	dc 01       	movw	r26, r24
    2764:	99 27       	eor	r25, r25
    2766:	88 27       	eor	r24, r24
    2768:	b2 2b       	or	r27, r18
    276a:	32 97       	sbiw	r30, 0x02	; 2
    276c:	20 81       	ld	r18, Z
    276e:	ac 01       	movw	r20, r24
    2770:	bd 01       	movw	r22, r26
    2772:	42 2b       	or	r20, r18
    2774:	31 96       	adiw	r30, 0x01	; 1
    2776:	20 81       	ld	r18, Z
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	92 2f       	mov	r25, r18
    277c:	88 27       	eor	r24, r24
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	84 2b       	or	r24, r20
    2784:	95 2b       	or	r25, r21
    2786:	a6 2b       	or	r26, r22
    2788:	b7 2b       	or	r27, r23
    278a:	82 37       	cpi	r24, 0x72	; 114
    278c:	92 47       	sbci	r25, 0x72	; 114
    278e:	a1 44       	sbci	r26, 0x41	; 65
    2790:	b1 46       	sbci	r27, 0x61	; 97
    2792:	09 f0       	breq	.+2      	; 0x2796 <find_volume+0x536>
    2794:	4d c0       	rjmp	.+154    	; 0x2830 <find_volume+0x5d0>
    2796:	36 96       	adiw	r30, 0x06	; 6
    2798:	20 81       	ld	r18, Z
    279a:	31 97       	sbiw	r30, 0x01	; 1
    279c:	80 81       	ld	r24, Z
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a0 e0       	ldi	r26, 0x00	; 0
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	dc 01       	movw	r26, r24
    27a6:	99 27       	eor	r25, r25
    27a8:	88 27       	eor	r24, r24
    27aa:	b2 2b       	or	r27, r18
    27ac:	32 97       	sbiw	r30, 0x02	; 2
    27ae:	20 81       	ld	r18, Z
    27b0:	ac 01       	movw	r20, r24
    27b2:	bd 01       	movw	r22, r26
    27b4:	42 2b       	or	r20, r18
    27b6:	31 96       	adiw	r30, 0x01	; 1
    27b8:	20 81       	ld	r18, Z
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	92 2f       	mov	r25, r18
    27be:	88 27       	eor	r24, r24
    27c0:	a0 e0       	ldi	r26, 0x00	; 0
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	84 2b       	or	r24, r20
    27c6:	95 2b       	or	r25, r21
    27c8:	a6 2b       	or	r26, r22
    27ca:	b7 2b       	or	r27, r23
    27cc:	f8 01       	movw	r30, r16
    27ce:	86 87       	std	Z+14, r24	; 0x0e
    27d0:	97 87       	std	Z+15, r25	; 0x0f
    27d2:	a0 8b       	std	Z+16, r26	; 0x10
    27d4:	b1 8b       	std	Z+17, r27	; 0x11
    27d6:	e3 5e       	subi	r30, 0xE3	; 227
    27d8:	fd 4f       	sbci	r31, 0xFD	; 253
    27da:	20 81       	ld	r18, Z
    27dc:	31 97       	sbiw	r30, 0x01	; 1
    27de:	80 81       	ld	r24, Z
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e0       	ldi	r26, 0x00	; 0
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	dc 01       	movw	r26, r24
    27e8:	99 27       	eor	r25, r25
    27ea:	88 27       	eor	r24, r24
    27ec:	b2 2b       	or	r27, r18
    27ee:	32 97       	sbiw	r30, 0x02	; 2
    27f0:	20 81       	ld	r18, Z
    27f2:	ac 01       	movw	r20, r24
    27f4:	bd 01       	movw	r22, r26
    27f6:	42 2b       	or	r20, r18
    27f8:	31 96       	adiw	r30, 0x01	; 1
    27fa:	20 81       	ld	r18, Z
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	92 2f       	mov	r25, r18
    2800:	88 27       	eor	r24, r24
    2802:	a0 e0       	ldi	r26, 0x00	; 0
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	84 2b       	or	r24, r20
    2808:	95 2b       	or	r25, r21
    280a:	a6 2b       	or	r26, r22
    280c:	b7 2b       	or	r27, r23
    280e:	f8 01       	movw	r30, r16
    2810:	82 87       	std	Z+10, r24	; 0x0a
    2812:	93 87       	std	Z+11, r25	; 0x0b
    2814:	a4 87       	std	Z+12, r26	; 0x0c
    2816:	b5 87       	std	Z+13, r27	; 0x0d
    2818:	f3 e0       	ldi	r31, 0x03	; 3
    281a:	f9 8b       	std	Y+17, r31	; 0x11
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <find_volume+0x5d4>
    281e:	e3 e0       	ldi	r30, 0x03	; 3
    2820:	e9 8b       	std	Y+17, r30	; 0x11
    2822:	08 c0       	rjmp	.+16     	; 0x2834 <find_volume+0x5d4>
    2824:	f3 e0       	ldi	r31, 0x03	; 3
    2826:	f9 8b       	std	Y+17, r31	; 0x11
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <find_volume+0x5d4>
    282a:	e3 e0       	ldi	r30, 0x03	; 3
    282c:	e9 8b       	std	Y+17, r30	; 0x11
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <find_volume+0x5d4>
    2830:	f3 e0       	ldi	r31, 0x03	; 3
    2832:	f9 8b       	std	Y+17, r31	; 0x11
    2834:	e9 89       	ldd	r30, Y+17	; 0x11
    2836:	d8 01       	movw	r26, r16
    2838:	ec 93       	st	X, r30
    283a:	80 91 2b 04 	lds	r24, 0x042B
    283e:	90 91 2c 04 	lds	r25, 0x042C
    2842:	01 96       	adiw	r24, 0x01	; 1
    2844:	90 93 2c 04 	sts	0x042C, r25
    2848:	80 93 2b 04 	sts	0x042B, r24
    284c:	17 96       	adiw	r26, 0x07	; 7
    284e:	9c 93       	st	X, r25
    2850:	8e 93       	st	-X, r24
    2852:	16 97       	sbiw	r26, 0x06	; 6
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	ad c0       	rjmp	.+346    	; 0x29b2 <find_volume+0x752>
    2858:	8b e0       	ldi	r24, 0x0B	; 11
    285a:	ab c0       	rjmp	.+342    	; 0x29b2 <find_volume+0x752>
    285c:	8c e0       	ldi	r24, 0x0C	; 12
    285e:	a9 c0       	rjmp	.+338    	; 0x29b2 <find_volume+0x752>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	a7 c0       	rjmp	.+334    	; 0x29b2 <find_volume+0x752>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	a5 c0       	rjmp	.+330    	; 0x29b2 <find_volume+0x752>
    2868:	83 e0       	ldi	r24, 0x03	; 3
    286a:	a3 c0       	rjmp	.+326    	; 0x29b2 <find_volume+0x752>
    286c:	8a e0       	ldi	r24, 0x0A	; 10
    286e:	a1 c0       	rjmp	.+322    	; 0x29b2 <find_volume+0x752>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	9f c0       	rjmp	.+318    	; 0x29b2 <find_volume+0x752>
    2874:	8d e0       	ldi	r24, 0x0D	; 13
    2876:	9d c0       	rjmp	.+314    	; 0x29b2 <find_volume+0x752>
    2878:	8d e0       	ldi	r24, 0x0D	; 13
    287a:	9b c0       	rjmp	.+310    	; 0x29b2 <find_volume+0x752>
    287c:	8d e0       	ldi	r24, 0x0D	; 13
    287e:	99 c0       	rjmp	.+306    	; 0x29b2 <find_volume+0x752>
    2880:	8d e0       	ldi	r24, 0x0D	; 13
    2882:	97 c0       	rjmp	.+302    	; 0x29b2 <find_volume+0x752>
    2884:	8d e0       	ldi	r24, 0x0D	; 13
    2886:	95 c0       	rjmp	.+298    	; 0x29b2 <find_volume+0x752>
    2888:	8d e0       	ldi	r24, 0x0D	; 13
    288a:	93 c0       	rjmp	.+294    	; 0x29b2 <find_volume+0x752>
    288c:	8d e0       	ldi	r24, 0x0D	; 13
    288e:	91 c0       	rjmp	.+290    	; 0x29b2 <find_volume+0x752>
    2890:	8d e0       	ldi	r24, 0x0D	; 13
    2892:	8f c0       	rjmp	.+286    	; 0x29b2 <find_volume+0x752>
    2894:	8d e0       	ldi	r24, 0x0D	; 13
    2896:	8d c0       	rjmp	.+282    	; 0x29b2 <find_volume+0x752>
    2898:	8d e0       	ldi	r24, 0x0D	; 13
    289a:	8b c0       	rjmp	.+278    	; 0x29b2 <find_volume+0x752>
    289c:	8d e0       	ldi	r24, 0x0D	; 13
    289e:	89 c0       	rjmp	.+274    	; 0x29b2 <find_volume+0x752>
    28a0:	8d e0       	ldi	r24, 0x0D	; 13
    28a2:	87 c0       	rjmp	.+270    	; 0x29b2 <find_volume+0x752>
    28a4:	8d e0       	ldi	r24, 0x0D	; 13
    28a6:	85 c0       	rjmp	.+266    	; 0x29b2 <find_volume+0x752>
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	ba 01       	movw	r22, r20
    28ae:	c8 01       	movw	r24, r16
    28b0:	4a dc       	rcall	.-1900   	; 0x2146 <check_fs>
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <find_volume+0x658>
    28b6:	6e cd       	rjmp	.-1316   	; 0x2394 <find_volume+0x134>
    28b8:	9e 01       	movw	r18, r28
    28ba:	2f 5f       	subi	r18, 0xFF	; 255
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	59 01       	movw	r10, r18
    28c0:	f8 01       	movw	r30, r16
    28c2:	e9 50       	subi	r30, 0x09	; 9
    28c4:	fe 4f       	sbci	r31, 0xFE	; 254
    28c6:	a8 01       	movw	r20, r16
    28c8:	49 5c       	subi	r20, 0xC9	; 201
    28ca:	5d 4f       	sbci	r21, 0xFD	; 253
    28cc:	81 2c       	mov	r8, r1
    28ce:	91 2c       	mov	r9, r1
    28d0:	70 e0       	ldi	r23, 0x00	; 0
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	17 cd       	rjmp	.-1490   	; 0x2304 <find_volume+0xa4>
    28d6:	29 01       	movw	r4, r18
    28d8:	3a 01       	movw	r6, r20
    28da:	62 e0       	ldi	r22, 0x02	; 2
    28dc:	46 0e       	add	r4, r22
    28de:	51 1c       	adc	r5, r1
    28e0:	61 1c       	adc	r6, r1
    28e2:	71 1c       	adc	r7, r1
    28e4:	d8 01       	movw	r26, r16
    28e6:	52 96       	adiw	r26, 0x12	; 18
    28e8:	4d 92       	st	X+, r4
    28ea:	5d 92       	st	X+, r5
    28ec:	6d 92       	st	X+, r6
    28ee:	7c 92       	st	X, r7
    28f0:	55 97       	sbiw	r26, 0x15	; 21
    28f2:	f8 01       	movw	r30, r16
    28f4:	c2 8e       	std	Z+26, r12	; 0x1a
    28f6:	d3 8e       	std	Z+27, r13	; 0x1b
    28f8:	e4 8e       	std	Z+28, r14	; 0x1c
    28fa:	f5 8e       	std	Z+29, r15	; 0x1d
    28fc:	8e 89       	ldd	r24, Y+22	; 0x16
    28fe:	9f 89       	ldd	r25, Y+23	; 0x17
    2900:	a8 8d       	ldd	r26, Y+24	; 0x18
    2902:	b9 8d       	ldd	r27, Y+25	; 0x19
    2904:	8c 0d       	add	r24, r12
    2906:	9d 1d       	adc	r25, r13
    2908:	ae 1d       	adc	r26, r14
    290a:	bf 1d       	adc	r27, r15
    290c:	86 8f       	std	Z+30, r24	; 0x1e
    290e:	97 8f       	std	Z+31, r25	; 0x1f
    2910:	a0 a3       	std	Z+32, r26	; 0x20
    2912:	b1 a3       	std	Z+33, r27	; 0x21
    2914:	8a 89       	ldd	r24, Y+18	; 0x12
    2916:	9b 89       	ldd	r25, Y+19	; 0x13
    2918:	ac 89       	ldd	r26, Y+20	; 0x14
    291a:	bd 89       	ldd	r27, Y+21	; 0x15
    291c:	8c 0d       	add	r24, r12
    291e:	9d 1d       	adc	r25, r13
    2920:	ae 1d       	adc	r26, r14
    2922:	bf 1d       	adc	r27, r15
    2924:	86 a3       	std	Z+38, r24	; 0x26
    2926:	97 a3       	std	Z+39, r25	; 0x27
    2928:	a0 a7       	std	Z+40, r26	; 0x28
    292a:	b1 a7       	std	Z+41, r27	; 0x29
    292c:	66 ce       	rjmp	.-820    	; 0x25fa <find_volume+0x39a>
    292e:	8f ef       	ldi	r24, 0xFF	; 255
    2930:	9f ef       	ldi	r25, 0xFF	; 255
    2932:	dc 01       	movw	r26, r24
    2934:	f8 01       	movw	r30, r16
    2936:	86 87       	std	Z+14, r24	; 0x0e
    2938:	97 87       	std	Z+15, r25	; 0x0f
    293a:	a0 8b       	std	Z+16, r26	; 0x10
    293c:	b1 8b       	std	Z+17, r27	; 0x11
    293e:	82 87       	std	Z+10, r24	; 0x0a
    2940:	93 87       	std	Z+11, r25	; 0x0b
    2942:	a4 87       	std	Z+12, r26	; 0x0c
    2944:	b5 87       	std	Z+13, r27	; 0x0d
    2946:	80 e8       	ldi	r24, 0x80	; 128
    2948:	85 83       	std	Z+5, r24	; 0x05
    294a:	e1 5a       	subi	r30, 0xA1	; 161
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 81       	ld	r24, Z
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	98 2f       	mov	r25, r24
    2954:	88 27       	eor	r24, r24
    2956:	31 97       	sbiw	r30, 0x01	; 1
    2958:	20 81       	ld	r18, Z
    295a:	82 2b       	or	r24, r18
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	09 f4       	brne	.+2      	; 0x2962 <find_volume+0x702>
    2960:	be ce       	rjmp	.-644    	; 0x26de <find_volume+0x47e>
    2962:	f3 e0       	ldi	r31, 0x03	; 3
    2964:	f9 8b       	std	Y+17, r31	; 0x11
    2966:	66 cf       	rjmp	.-308    	; 0x2834 <find_volume+0x5d4>
    2968:	8f ef       	ldi	r24, 0xFF	; 255
    296a:	9f ef       	ldi	r25, 0xFF	; 255
    296c:	dc 01       	movw	r26, r24
    296e:	f8 01       	movw	r30, r16
    2970:	86 87       	std	Z+14, r24	; 0x0e
    2972:	97 87       	std	Z+15, r25	; 0x0f
    2974:	a0 8b       	std	Z+16, r26	; 0x10
    2976:	b1 8b       	std	Z+17, r27	; 0x11
    2978:	82 87       	std	Z+10, r24	; 0x0a
    297a:	93 87       	std	Z+11, r25	; 0x0b
    297c:	a4 87       	std	Z+12, r26	; 0x0c
    297e:	b5 87       	std	Z+13, r27	; 0x0d
    2980:	80 e8       	ldi	r24, 0x80	; 128
    2982:	85 83       	std	Z+5, r24	; 0x05
    2984:	57 cf       	rjmp	.-338    	; 0x2834 <find_volume+0x5d4>
    2986:	ff ef       	ldi	r31, 0xFF	; 255
    2988:	4f 0e       	add	r4, r31
    298a:	f1 e0       	ldi	r31, 0x01	; 1
    298c:	5f 1e       	adc	r5, r31
    298e:	61 1c       	adc	r6, r1
    2990:	71 1c       	adc	r7, r1
    2992:	03 2e       	mov	r0, r19
    2994:	39 e0       	ldi	r19, 0x09	; 9
    2996:	76 94       	lsr	r7
    2998:	67 94       	ror	r6
    299a:	57 94       	ror	r5
    299c:	47 94       	ror	r4
    299e:	3a 95       	dec	r19
    29a0:	d1 f7       	brne	.-12     	; 0x2996 <find_volume+0x736>
    29a2:	30 2d       	mov	r19, r0
    29a4:	84 14       	cp	r8, r4
    29a6:	95 04       	cpc	r9, r5
    29a8:	a6 04       	cpc	r10, r6
    29aa:	b7 04       	cpc	r11, r7
    29ac:	08 f4       	brcc	.+2      	; 0x29b0 <find_volume+0x750>
    29ae:	7a cf       	rjmp	.-268    	; 0x28a4 <find_volume+0x644>
    29b0:	db cf       	rjmp	.-74     	; 0x2968 <find_volume+0x708>
    29b2:	6d 96       	adiw	r28, 0x1d	; 29
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	bf 90       	pop	r11
    29d0:	af 90       	pop	r10
    29d2:	9f 90       	pop	r9
    29d4:	8f 90       	pop	r8
    29d6:	7f 90       	pop	r7
    29d8:	6f 90       	pop	r6
    29da:	5f 90       	pop	r5
    29dc:	4f 90       	pop	r4
    29de:	3f 90       	pop	r3
    29e0:	2f 90       	pop	r2
    29e2:	08 95       	ret

000029e4 <clust2sect>:
    29e4:	cf 92       	push	r12
    29e6:	df 92       	push	r13
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	fc 01       	movw	r30, r24
    29ee:	9a 01       	movw	r18, r20
    29f0:	ab 01       	movw	r20, r22
    29f2:	22 50       	subi	r18, 0x02	; 2
    29f4:	31 09       	sbc	r19, r1
    29f6:	41 09       	sbc	r20, r1
    29f8:	51 09       	sbc	r21, r1
    29fa:	c2 88       	ldd	r12, Z+18	; 0x12
    29fc:	d3 88       	ldd	r13, Z+19	; 0x13
    29fe:	e4 88       	ldd	r14, Z+20	; 0x14
    2a00:	f5 88       	ldd	r15, Z+21	; 0x15
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	c8 1a       	sub	r12, r24
    2a06:	d1 08       	sbc	r13, r1
    2a08:	e1 08       	sbc	r14, r1
    2a0a:	f1 08       	sbc	r15, r1
    2a0c:	2c 15       	cp	r18, r12
    2a0e:	3d 05       	cpc	r19, r13
    2a10:	4e 05       	cpc	r20, r14
    2a12:	5f 05       	cpc	r21, r15
    2a14:	68 f4       	brcc	.+26     	; 0x2a30 <clust2sect+0x4c>
    2a16:	a2 81       	ldd	r26, Z+2	; 0x02
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <__muluhisi3>
    2a1e:	c6 a0       	ldd	r12, Z+38	; 0x26
    2a20:	d7 a0       	ldd	r13, Z+39	; 0x27
    2a22:	e0 a4       	ldd	r14, Z+40	; 0x28
    2a24:	f1 a4       	ldd	r15, Z+41	; 0x29
    2a26:	6c 0d       	add	r22, r12
    2a28:	7d 1d       	adc	r23, r13
    2a2a:	8e 1d       	adc	r24, r14
    2a2c:	9f 1d       	adc	r25, r15
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <clust2sect+0x52>
    2a30:	60 e0       	ldi	r22, 0x00	; 0
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	cb 01       	movw	r24, r22
    2a36:	ff 90       	pop	r15
    2a38:	ef 90       	pop	r14
    2a3a:	df 90       	pop	r13
    2a3c:	cf 90       	pop	r12
    2a3e:	08 95       	ret

00002a40 <get_fat>:
    2a40:	af 92       	push	r10
    2a42:	bf 92       	push	r11
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	ec 01       	movw	r28, r24
    2a56:	6a 01       	movw	r12, r20
    2a58:	7b 01       	movw	r14, r22
    2a5a:	42 30       	cpi	r20, 0x02	; 2
    2a5c:	51 05       	cpc	r21, r1
    2a5e:	61 05       	cpc	r22, r1
    2a60:	71 05       	cpc	r23, r1
    2a62:	08 f4       	brcc	.+2      	; 0x2a66 <get_fat+0x26>
    2a64:	c3 c0       	rjmp	.+390    	; 0x2bec <get_fat+0x1ac>
    2a66:	8a 89       	ldd	r24, Y+18	; 0x12
    2a68:	9b 89       	ldd	r25, Y+19	; 0x13
    2a6a:	ac 89       	ldd	r26, Y+20	; 0x14
    2a6c:	bd 89       	ldd	r27, Y+21	; 0x15
    2a6e:	48 17       	cp	r20, r24
    2a70:	59 07       	cpc	r21, r25
    2a72:	6a 07       	cpc	r22, r26
    2a74:	7b 07       	cpc	r23, r27
    2a76:	08 f0       	brcs	.+2      	; 0x2a7a <get_fat+0x3a>
    2a78:	be c0       	rjmp	.+380    	; 0x2bf6 <get_fat+0x1b6>
    2a7a:	88 81       	ld	r24, Y
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <get_fat+0x42>
    2a80:	4b c0       	rjmp	.+150    	; 0x2b18 <get_fat+0xd8>
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <get_fat+0x48>
    2a86:	6c c0       	rjmp	.+216    	; 0x2b60 <get_fat+0x120>
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <get_fat+0x4e>
    2a8c:	b9 c0       	rjmp	.+370    	; 0x2c00 <get_fat+0x1c0>
    2a8e:	8a 01       	movw	r16, r20
    2a90:	16 95       	lsr	r17
    2a92:	07 95       	ror	r16
    2a94:	04 0f       	add	r16, r20
    2a96:	15 1f       	adc	r17, r21
    2a98:	c8 01       	movw	r24, r16
    2a9a:	89 2f       	mov	r24, r25
    2a9c:	99 27       	eor	r25, r25
    2a9e:	86 95       	lsr	r24
    2aa0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2aa2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2aa4:	68 a1       	ldd	r22, Y+32	; 0x20
    2aa6:	79 a1       	ldd	r23, Y+33	; 0x21
    2aa8:	48 0f       	add	r20, r24
    2aaa:	59 1f       	adc	r21, r25
    2aac:	61 1d       	adc	r22, r1
    2aae:	71 1d       	adc	r23, r1
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	0d db       	rcall	.-2534   	; 0x20ce <move_window>
    2ab4:	81 11       	cpse	r24, r1
    2ab6:	a9 c0       	rjmp	.+338    	; 0x2c0a <get_fat+0x1ca>
    2ab8:	58 01       	movw	r10, r16
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	a8 1a       	sub	r10, r24
    2abe:	b8 0a       	sbc	r11, r24
    2ac0:	11 70       	andi	r17, 0x01	; 1
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e0 0f       	add	r30, r16
    2ac6:	f1 1f       	adc	r31, r17
    2ac8:	16 a5       	ldd	r17, Z+46	; 0x2e
    2aca:	c5 01       	movw	r24, r10
    2acc:	89 2f       	mov	r24, r25
    2ace:	99 27       	eor	r25, r25
    2ad0:	86 95       	lsr	r24
    2ad2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2ad4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2ad6:	68 a1       	ldd	r22, Y+32	; 0x20
    2ad8:	79 a1       	ldd	r23, Y+33	; 0x21
    2ada:	48 0f       	add	r20, r24
    2adc:	59 1f       	adc	r21, r25
    2ade:	61 1d       	adc	r22, r1
    2ae0:	71 1d       	adc	r23, r1
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	f4 da       	rcall	.-2584   	; 0x20ce <move_window>
    2ae6:	81 11       	cpse	r24, r1
    2ae8:	94 c0       	rjmp	.+296    	; 0x2c12 <get_fat+0x1d2>
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	b8 22       	and	r11, r24
    2aee:	ca 0d       	add	r28, r10
    2af0:	db 1d       	adc	r29, r11
    2af2:	8e a5       	ldd	r24, Y+46	; 0x2e
    2af4:	61 2f       	mov	r22, r17
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	78 2b       	or	r23, r24
    2afa:	c0 fe       	sbrs	r12, 0
    2afc:	09 c0       	rjmp	.+18     	; 0x2b10 <get_fat+0xd0>
    2afe:	72 95       	swap	r23
    2b00:	62 95       	swap	r22
    2b02:	6f 70       	andi	r22, 0x0F	; 15
    2b04:	67 27       	eor	r22, r23
    2b06:	7f 70       	andi	r23, 0x0F	; 15
    2b08:	67 27       	eor	r22, r23
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	8c c0       	rjmp	.+280    	; 0x2c28 <get_fat+0x1e8>
    2b10:	7f 70       	andi	r23, 0x0F	; 15
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	88 c0       	rjmp	.+272    	; 0x2c28 <get_fat+0x1e8>
    2b18:	45 2f       	mov	r20, r21
    2b1a:	56 2f       	mov	r21, r22
    2b1c:	67 2f       	mov	r22, r23
    2b1e:	77 27       	eor	r23, r23
    2b20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b24:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b26:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b28:	48 0f       	add	r20, r24
    2b2a:	59 1f       	adc	r21, r25
    2b2c:	6a 1f       	adc	r22, r26
    2b2e:	7b 1f       	adc	r23, r27
    2b30:	ce 01       	movw	r24, r28
    2b32:	cd da       	rcall	.-2662   	; 0x20ce <move_window>
    2b34:	81 11       	cpse	r24, r1
    2b36:	71 c0       	rjmp	.+226    	; 0x2c1a <get_fat+0x1da>
    2b38:	cc 0c       	add	r12, r12
    2b3a:	dd 1c       	adc	r13, r13
    2b3c:	ee 1c       	adc	r14, r14
    2b3e:	ff 1c       	adc	r15, r15
    2b40:	e8 94       	clt
    2b42:	c0 f8       	bld	r12, 0
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	d8 22       	and	r13, r24
    2b48:	ee 24       	eor	r14, r14
    2b4a:	ff 24       	eor	r15, r15
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ec 0d       	add	r30, r12
    2b50:	fd 1d       	adc	r31, r13
    2b52:	66 a5       	ldd	r22, Z+46	; 0x2e
    2b54:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	78 2b       	or	r23, r24
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	64 c0       	rjmp	.+200    	; 0x2c28 <get_fat+0x1e8>
    2b60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b64:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b66:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b68:	68 94       	set
    2b6a:	16 f8       	bld	r1, 6
    2b6c:	76 95       	lsr	r23
    2b6e:	67 95       	ror	r22
    2b70:	57 95       	ror	r21
    2b72:	47 95       	ror	r20
    2b74:	16 94       	lsr	r1
    2b76:	d1 f7       	brne	.-12     	; 0x2b6c <get_fat+0x12c>
    2b78:	48 0f       	add	r20, r24
    2b7a:	59 1f       	adc	r21, r25
    2b7c:	6a 1f       	adc	r22, r26
    2b7e:	7b 1f       	adc	r23, r27
    2b80:	ce 01       	movw	r24, r28
    2b82:	a5 da       	rcall	.-2742   	; 0x20ce <move_window>
    2b84:	81 11       	cpse	r24, r1
    2b86:	4d c0       	rjmp	.+154    	; 0x2c22 <get_fat+0x1e2>
    2b88:	cc 0c       	add	r12, r12
    2b8a:	dd 1c       	adc	r13, r13
    2b8c:	ee 1c       	adc	r14, r14
    2b8e:	ff 1c       	adc	r15, r15
    2b90:	cc 0c       	add	r12, r12
    2b92:	dd 1c       	adc	r13, r13
    2b94:	ee 1c       	adc	r14, r14
    2b96:	ff 1c       	adc	r15, r15
    2b98:	8c ef       	ldi	r24, 0xFC	; 252
    2b9a:	c8 22       	and	r12, r24
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	d8 22       	and	r13, r24
    2ba0:	ee 24       	eor	r14, r14
    2ba2:	ff 24       	eor	r15, r15
    2ba4:	f6 01       	movw	r30, r12
    2ba6:	be 96       	adiw	r30, 0x2e	; 46
    2ba8:	ec 0f       	add	r30, r28
    2baa:	fd 1f       	adc	r31, r29
    2bac:	22 81       	ldd	r18, Z+2	; 0x02
    2bae:	63 81       	ldd	r22, Z+3	; 0x03
    2bb0:	86 2f       	mov	r24, r22
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a0 e0       	ldi	r26, 0x00	; 0
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	b8 2f       	mov	r27, r24
    2bba:	aa 27       	eor	r26, r26
    2bbc:	99 27       	eor	r25, r25
    2bbe:	88 27       	eor	r24, r24
    2bc0:	ac 01       	movw	r20, r24
    2bc2:	bd 01       	movw	r22, r26
    2bc4:	62 2b       	or	r22, r18
    2bc6:	81 81       	ldd	r24, Z+1	; 0x01
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	98 2f       	mov	r25, r24
    2bcc:	88 27       	eor	r24, r24
    2bce:	a0 e0       	ldi	r26, 0x00	; 0
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	84 2b       	or	r24, r20
    2bd4:	95 2b       	or	r25, r21
    2bd6:	a6 2b       	or	r26, r22
    2bd8:	b7 2b       	or	r27, r23
    2bda:	fe 01       	movw	r30, r28
    2bdc:	ec 0d       	add	r30, r12
    2bde:	fd 1d       	adc	r31, r13
    2be0:	26 a5       	ldd	r18, Z+46	; 0x2e
    2be2:	82 2b       	or	r24, r18
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	9f 70       	andi	r25, 0x0F	; 15
    2bea:	1e c0       	rjmp	.+60     	; 0x2c28 <get_fat+0x1e8>
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	19 c0       	rjmp	.+50     	; 0x2c28 <get_fat+0x1e8>
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <get_fat+0x1e8>
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <get_fat+0x1e8>
    2c0a:	6f ef       	ldi	r22, 0xFF	; 255
    2c0c:	7f ef       	ldi	r23, 0xFF	; 255
    2c0e:	cb 01       	movw	r24, r22
    2c10:	0b c0       	rjmp	.+22     	; 0x2c28 <get_fat+0x1e8>
    2c12:	6f ef       	ldi	r22, 0xFF	; 255
    2c14:	7f ef       	ldi	r23, 0xFF	; 255
    2c16:	cb 01       	movw	r24, r22
    2c18:	07 c0       	rjmp	.+14     	; 0x2c28 <get_fat+0x1e8>
    2c1a:	6f ef       	ldi	r22, 0xFF	; 255
    2c1c:	7f ef       	ldi	r23, 0xFF	; 255
    2c1e:	cb 01       	movw	r24, r22
    2c20:	03 c0       	rjmp	.+6      	; 0x2c28 <get_fat+0x1e8>
    2c22:	6f ef       	ldi	r22, 0xFF	; 255
    2c24:	7f ef       	ldi	r23, 0xFF	; 255
    2c26:	cb 01       	movw	r24, r22
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	bf 90       	pop	r11
    2c3a:	af 90       	pop	r10
    2c3c:	08 95       	ret

00002c3e <dir_sdi>:
    2c3e:	af 92       	push	r10
    2c40:	bf 92       	push	r11
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	ec 01       	movw	r28, r24
    2c54:	8b 01       	movw	r16, r22
    2c56:	7d 83       	std	Y+5, r23	; 0x05
    2c58:	6c 83       	std	Y+4, r22	; 0x04
    2c5a:	ce 80       	ldd	r12, Y+6	; 0x06
    2c5c:	df 80       	ldd	r13, Y+7	; 0x07
    2c5e:	e8 84       	ldd	r14, Y+8	; 0x08
    2c60:	f9 84       	ldd	r15, Y+9	; 0x09
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	c8 16       	cp	r12, r24
    2c66:	d1 04       	cpc	r13, r1
    2c68:	e1 04       	cpc	r14, r1
    2c6a:	f1 04       	cpc	r15, r1
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <dir_sdi+0x32>
    2c6e:	8a c0       	rjmp	.+276    	; 0x2d84 <dir_sdi+0x146>
    2c70:	e8 81       	ld	r30, Y
    2c72:	f9 81       	ldd	r31, Y+1	; 0x01
    2c74:	82 89       	ldd	r24, Z+18	; 0x12
    2c76:	93 89       	ldd	r25, Z+19	; 0x13
    2c78:	a4 89       	ldd	r26, Z+20	; 0x14
    2c7a:	b5 89       	ldd	r27, Z+21	; 0x15
    2c7c:	c8 16       	cp	r12, r24
    2c7e:	d9 06       	cpc	r13, r25
    2c80:	ea 06       	cpc	r14, r26
    2c82:	fb 06       	cpc	r15, r27
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <dir_sdi+0x4a>
    2c86:	80 c0       	rjmp	.+256    	; 0x2d88 <dir_sdi+0x14a>
    2c88:	c1 14       	cp	r12, r1
    2c8a:	d1 04       	cpc	r13, r1
    2c8c:	e1 04       	cpc	r14, r1
    2c8e:	f1 04       	cpc	r15, r1
    2c90:	c1 f4       	brne	.+48     	; 0x2cc2 <dir_sdi+0x84>
    2c92:	80 81       	ld	r24, Z
    2c94:	83 30       	cpi	r24, 0x03	; 3
    2c96:	41 f4       	brne	.+16     	; 0x2ca8 <dir_sdi+0x6a>
    2c98:	82 a1       	ldd	r24, Z+34	; 0x22
    2c9a:	93 a1       	ldd	r25, Z+35	; 0x23
    2c9c:	a4 a1       	ldd	r26, Z+36	; 0x24
    2c9e:	b5 a1       	ldd	r27, Z+37	; 0x25
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	a1 05       	cpc	r26, r1
    2ca4:	b1 05       	cpc	r27, r1
    2ca6:	59 f4       	brne	.+22     	; 0x2cbe <dir_sdi+0x80>
    2ca8:	80 85       	ldd	r24, Z+8	; 0x08
    2caa:	91 85       	ldd	r25, Z+9	; 0x09
    2cac:	08 17       	cp	r16, r24
    2cae:	19 07       	cpc	r17, r25
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <dir_sdi+0x76>
    2cb2:	6c c0       	rjmp	.+216    	; 0x2d8c <dir_sdi+0x14e>
    2cb4:	62 a1       	ldd	r22, Z+34	; 0x22
    2cb6:	73 a1       	ldd	r23, Z+35	; 0x23
    2cb8:	84 a1       	ldd	r24, Z+36	; 0x24
    2cba:	95 a1       	ldd	r25, Z+37	; 0x25
    2cbc:	35 c0       	rjmp	.+106    	; 0x2d28 <dir_sdi+0xea>
    2cbe:	6c 01       	movw	r12, r24
    2cc0:	7d 01       	movw	r14, r26
    2cc2:	a2 80       	ldd	r10, Z+2	; 0x02
    2cc4:	80 e1       	ldi	r24, 0x10	; 16
    2cc6:	a8 9e       	mul	r10, r24
    2cc8:	50 01       	movw	r10, r0
    2cca:	11 24       	eor	r1, r1
    2ccc:	0a 15       	cp	r16, r10
    2cce:	1b 05       	cpc	r17, r11
    2cd0:	30 f1       	brcs	.+76     	; 0x2d1e <dir_sdi+0xe0>
    2cd2:	b7 01       	movw	r22, r14
    2cd4:	a6 01       	movw	r20, r12
    2cd6:	88 81       	ld	r24, Y
    2cd8:	99 81       	ldd	r25, Y+1	; 0x01
    2cda:	b2 de       	rcall	.-668    	; 0x2a40 <get_fat>
    2cdc:	6b 01       	movw	r12, r22
    2cde:	7c 01       	movw	r14, r24
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	c8 16       	cp	r12, r24
    2ce4:	d8 06       	cpc	r13, r24
    2ce6:	e8 06       	cpc	r14, r24
    2ce8:	f8 06       	cpc	r15, r24
    2cea:	09 f4       	brne	.+2      	; 0x2cee <dir_sdi+0xb0>
    2cec:	51 c0       	rjmp	.+162    	; 0x2d90 <dir_sdi+0x152>
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	c8 16       	cp	r12, r24
    2cf2:	d1 04       	cpc	r13, r1
    2cf4:	e1 04       	cpc	r14, r1
    2cf6:	f1 04       	cpc	r15, r1
    2cf8:	08 f4       	brcc	.+2      	; 0x2cfc <dir_sdi+0xbe>
    2cfa:	4c c0       	rjmp	.+152    	; 0x2d94 <dir_sdi+0x156>
    2cfc:	e8 81       	ld	r30, Y
    2cfe:	f9 81       	ldd	r31, Y+1	; 0x01
    2d00:	82 89       	ldd	r24, Z+18	; 0x12
    2d02:	93 89       	ldd	r25, Z+19	; 0x13
    2d04:	a4 89       	ldd	r26, Z+20	; 0x14
    2d06:	b5 89       	ldd	r27, Z+21	; 0x15
    2d08:	c8 16       	cp	r12, r24
    2d0a:	d9 06       	cpc	r13, r25
    2d0c:	ea 06       	cpc	r14, r26
    2d0e:	fb 06       	cpc	r15, r27
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <dir_sdi+0xd6>
    2d12:	42 c0       	rjmp	.+132    	; 0x2d98 <dir_sdi+0x15a>
    2d14:	0a 19       	sub	r16, r10
    2d16:	1b 09       	sbc	r17, r11
    2d18:	0a 15       	cp	r16, r10
    2d1a:	1b 05       	cpc	r17, r11
    2d1c:	d0 f6       	brcc	.-76     	; 0x2cd2 <dir_sdi+0x94>
    2d1e:	b7 01       	movw	r22, r14
    2d20:	a6 01       	movw	r20, r12
    2d22:	88 81       	ld	r24, Y
    2d24:	99 81       	ldd	r25, Y+1	; 0x01
    2d26:	5e de       	rcall	.-836    	; 0x29e4 <clust2sect>
    2d28:	ca 86       	std	Y+10, r12	; 0x0a
    2d2a:	db 86       	std	Y+11, r13	; 0x0b
    2d2c:	ec 86       	std	Y+12, r14	; 0x0c
    2d2e:	fd 86       	std	Y+13, r15	; 0x0d
    2d30:	61 15       	cp	r22, r1
    2d32:	71 05       	cpc	r23, r1
    2d34:	81 05       	cpc	r24, r1
    2d36:	91 05       	cpc	r25, r1
    2d38:	89 f1       	breq	.+98     	; 0x2d9c <dir_sdi+0x15e>
    2d3a:	98 01       	movw	r18, r16
    2d3c:	32 95       	swap	r19
    2d3e:	22 95       	swap	r18
    2d40:	2f 70       	andi	r18, 0x0F	; 15
    2d42:	23 27       	eor	r18, r19
    2d44:	3f 70       	andi	r19, 0x0F	; 15
    2d46:	23 27       	eor	r18, r19
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	82 0f       	add	r24, r18
    2d4e:	93 1f       	adc	r25, r19
    2d50:	a1 1d       	adc	r26, r1
    2d52:	b1 1d       	adc	r27, r1
    2d54:	8e 87       	std	Y+14, r24	; 0x0e
    2d56:	9f 87       	std	Y+15, r25	; 0x0f
    2d58:	a8 8b       	std	Y+16, r26	; 0x10
    2d5a:	b9 8b       	std	Y+17, r27	; 0x11
    2d5c:	0f 70       	andi	r16, 0x0F	; 15
    2d5e:	11 27       	eor	r17, r17
    2d60:	00 0f       	add	r16, r16
    2d62:	11 1f       	adc	r17, r17
    2d64:	02 95       	swap	r16
    2d66:	12 95       	swap	r17
    2d68:	10 7f       	andi	r17, 0xF0	; 240
    2d6a:	10 27       	eor	r17, r16
    2d6c:	00 7f       	andi	r16, 0xF0	; 240
    2d6e:	10 27       	eor	r17, r16
    2d70:	02 5d       	subi	r16, 0xD2	; 210
    2d72:	1f 4f       	sbci	r17, 0xFF	; 255
    2d74:	88 81       	ld	r24, Y
    2d76:	99 81       	ldd	r25, Y+1	; 0x01
    2d78:	80 0f       	add	r24, r16
    2d7a:	91 1f       	adc	r25, r17
    2d7c:	9b 8b       	std	Y+19, r25	; 0x13
    2d7e:	8a 8b       	std	Y+18, r24	; 0x12
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <dir_sdi+0x160>
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	0b c0       	rjmp	.+22     	; 0x2d9e <dir_sdi+0x160>
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	09 c0       	rjmp	.+18     	; 0x2d9e <dir_sdi+0x160>
    2d8c:	82 e0       	ldi	r24, 0x02	; 2
    2d8e:	07 c0       	rjmp	.+14     	; 0x2d9e <dir_sdi+0x160>
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	05 c0       	rjmp	.+10     	; 0x2d9e <dir_sdi+0x160>
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	03 c0       	rjmp	.+6      	; 0x2d9e <dir_sdi+0x160>
    2d98:	82 e0       	ldi	r24, 0x02	; 2
    2d9a:	01 c0       	rjmp	.+2      	; 0x2d9e <dir_sdi+0x160>
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	1f 91       	pop	r17
    2da4:	0f 91       	pop	r16
    2da6:	ff 90       	pop	r15
    2da8:	ef 90       	pop	r14
    2daa:	df 90       	pop	r13
    2dac:	cf 90       	pop	r12
    2dae:	bf 90       	pop	r11
    2db0:	af 90       	pop	r10
    2db2:	08 95       	ret

00002db4 <put_fat>:
    2db4:	4f 92       	push	r4
    2db6:	5f 92       	push	r5
    2db8:	6f 92       	push	r6
    2dba:	7f 92       	push	r7
    2dbc:	8f 92       	push	r8
    2dbe:	9f 92       	push	r9
    2dc0:	af 92       	push	r10
    2dc2:	bf 92       	push	r11
    2dc4:	cf 92       	push	r12
    2dc6:	df 92       	push	r13
    2dc8:	ef 92       	push	r14
    2dca:	ff 92       	push	r15
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	ec 01       	movw	r28, r24
    2dd6:	6a 01       	movw	r12, r20
    2dd8:	7b 01       	movw	r14, r22
    2dda:	28 01       	movw	r4, r16
    2ddc:	39 01       	movw	r6, r18
    2dde:	42 30       	cpi	r20, 0x02	; 2
    2de0:	51 05       	cpc	r21, r1
    2de2:	61 05       	cpc	r22, r1
    2de4:	71 05       	cpc	r23, r1
    2de6:	08 f4       	brcc	.+2      	; 0x2dea <put_fat+0x36>
    2de8:	d8 c0       	rjmp	.+432    	; 0x2f9a <put_fat+0x1e6>
    2dea:	8a 89       	ldd	r24, Y+18	; 0x12
    2dec:	9b 89       	ldd	r25, Y+19	; 0x13
    2dee:	ac 89       	ldd	r26, Y+20	; 0x14
    2df0:	bd 89       	ldd	r27, Y+21	; 0x15
    2df2:	48 17       	cp	r20, r24
    2df4:	59 07       	cpc	r21, r25
    2df6:	6a 07       	cpc	r22, r26
    2df8:	7b 07       	cpc	r23, r27
    2dfa:	08 f0       	brcs	.+2      	; 0x2dfe <put_fat+0x4a>
    2dfc:	d0 c0       	rjmp	.+416    	; 0x2f9e <put_fat+0x1ea>
    2dfe:	88 81       	ld	r24, Y
    2e00:	82 30       	cpi	r24, 0x02	; 2
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <put_fat+0x52>
    2e04:	62 c0       	rjmp	.+196    	; 0x2eca <put_fat+0x116>
    2e06:	83 30       	cpi	r24, 0x03	; 3
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <put_fat+0x58>
    2e0a:	85 c0       	rjmp	.+266    	; 0x2f16 <put_fat+0x162>
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <put_fat+0x5e>
    2e10:	c8 c0       	rjmp	.+400    	; 0x2fa2 <put_fat+0x1ee>
    2e12:	5a 01       	movw	r10, r20
    2e14:	b6 94       	lsr	r11
    2e16:	a7 94       	ror	r10
    2e18:	a4 0e       	add	r10, r20
    2e1a:	b5 1e       	adc	r11, r21
    2e1c:	c5 01       	movw	r24, r10
    2e1e:	89 2f       	mov	r24, r25
    2e20:	99 27       	eor	r25, r25
    2e22:	86 95       	lsr	r24
    2e24:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e26:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e28:	68 a1       	ldd	r22, Y+32	; 0x20
    2e2a:	79 a1       	ldd	r23, Y+33	; 0x21
    2e2c:	48 0f       	add	r20, r24
    2e2e:	59 1f       	adc	r21, r25
    2e30:	61 1d       	adc	r22, r1
    2e32:	71 1d       	adc	r23, r1
    2e34:	ce 01       	movw	r24, r28
    2e36:	4b d9       	rcall	.-3434   	; 0x20ce <move_window>
    2e38:	18 2f       	mov	r17, r24
    2e3a:	81 11       	cpse	r24, r1
    2e3c:	d0 c0       	rjmp	.+416    	; 0x2fde <put_fat+0x22a>
    2e3e:	45 01       	movw	r8, r10
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	88 1a       	sub	r8, r24
    2e44:	98 0a       	sbc	r9, r24
    2e46:	a1 e0       	ldi	r26, 0x01	; 1
    2e48:	ba 22       	and	r11, r26
    2e4a:	c0 fe       	sbrs	r12, 0
    2e4c:	20 c0       	rjmp	.+64     	; 0x2e8e <put_fat+0xda>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ea 0d       	add	r30, r10
    2e52:	fb 1d       	adc	r31, r11
    2e54:	86 a5       	ldd	r24, Z+46	; 0x2e
    2e56:	28 2f       	mov	r18, r24
    2e58:	2f 70       	andi	r18, 0x0F	; 15
    2e5a:	b0 e1       	ldi	r27, 0x10	; 16
    2e5c:	4b 9e       	mul	r4, r27
    2e5e:	c0 01       	movw	r24, r0
    2e60:	11 24       	eor	r1, r1
    2e62:	82 2b       	or	r24, r18
    2e64:	86 a7       	std	Z+46, r24	; 0x2e
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	8c 83       	std	Y+4, r24	; 0x04
    2e6a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e6c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e6e:	68 a1       	ldd	r22, Y+32	; 0x20
    2e70:	79 a1       	ldd	r23, Y+33	; 0x21
    2e72:	c4 01       	movw	r24, r8
    2e74:	89 2f       	mov	r24, r25
    2e76:	99 27       	eor	r25, r25
    2e78:	86 95       	lsr	r24
    2e7a:	48 0f       	add	r20, r24
    2e7c:	59 1f       	adc	r21, r25
    2e7e:	61 1d       	adc	r22, r1
    2e80:	71 1d       	adc	r23, r1
    2e82:	ce 01       	movw	r24, r28
    2e84:	24 d9       	rcall	.-3512   	; 0x20ce <move_window>
    2e86:	88 23       	and	r24, r24
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <put_fat+0xd8>
    2e8a:	91 c0       	rjmp	.+290    	; 0x2fae <put_fat+0x1fa>
    2e8c:	8c c0       	rjmp	.+280    	; 0x2fa6 <put_fat+0x1f2>
    2e8e:	fe 01       	movw	r30, r28
    2e90:	ea 0d       	add	r30, r10
    2e92:	fb 1d       	adc	r31, r11
    2e94:	46 a6       	std	Z+46, r4	; 0x2e
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	8c 83       	std	Y+4, r24	; 0x04
    2e9a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2e9c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2e9e:	68 a1       	ldd	r22, Y+32	; 0x20
    2ea0:	79 a1       	ldd	r23, Y+33	; 0x21
    2ea2:	c4 01       	movw	r24, r8
    2ea4:	89 2f       	mov	r24, r25
    2ea6:	99 27       	eor	r25, r25
    2ea8:	86 95       	lsr	r24
    2eaa:	48 0f       	add	r20, r24
    2eac:	59 1f       	adc	r21, r25
    2eae:	61 1d       	adc	r22, r1
    2eb0:	71 1d       	adc	r23, r1
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	0c d9       	rcall	.-3560   	; 0x20ce <move_window>
    2eb6:	88 23       	and	r24, r24
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <put_fat+0x108>
    2eba:	84 c0       	rjmp	.+264    	; 0x2fc4 <put_fat+0x210>
    2ebc:	76 c0       	rjmp	.+236    	; 0x2faa <put_fat+0x1f6>
    2ebe:	ec 0f       	add	r30, r28
    2ec0:	fd 1f       	adc	r31, r29
    2ec2:	46 a6       	std	Z+46, r4	; 0x2e
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	8c 83       	std	Y+4, r24	; 0x04
    2ec8:	8a c0       	rjmp	.+276    	; 0x2fde <put_fat+0x22a>
    2eca:	45 2f       	mov	r20, r21
    2ecc:	56 2f       	mov	r21, r22
    2ece:	67 2f       	mov	r22, r23
    2ed0:	77 27       	eor	r23, r23
    2ed2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ed4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ed6:	a8 a1       	ldd	r26, Y+32	; 0x20
    2ed8:	b9 a1       	ldd	r27, Y+33	; 0x21
    2eda:	48 0f       	add	r20, r24
    2edc:	59 1f       	adc	r21, r25
    2ede:	6a 1f       	adc	r22, r26
    2ee0:	7b 1f       	adc	r23, r27
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	f4 d8       	rcall	.-3608   	; 0x20ce <move_window>
    2ee6:	18 2f       	mov	r17, r24
    2ee8:	81 11       	cpse	r24, r1
    2eea:	79 c0       	rjmp	.+242    	; 0x2fde <put_fat+0x22a>
    2eec:	cc 0c       	add	r12, r12
    2eee:	dd 1c       	adc	r13, r13
    2ef0:	ee 1c       	adc	r14, r14
    2ef2:	ff 1c       	adc	r15, r15
    2ef4:	e8 94       	clt
    2ef6:	c0 f8       	bld	r12, 0
    2ef8:	31 e0       	ldi	r19, 0x01	; 1
    2efa:	d3 22       	and	r13, r19
    2efc:	ee 24       	eor	r14, r14
    2efe:	ff 24       	eor	r15, r15
    2f00:	fe 01       	movw	r30, r28
    2f02:	ec 0d       	add	r30, r12
    2f04:	fd 1d       	adc	r31, r13
    2f06:	46 a6       	std	Z+46, r4	; 0x2e
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ec 0d       	add	r30, r12
    2f0c:	fd 1d       	adc	r31, r13
    2f0e:	57 a6       	std	Z+47, r5	; 0x2f
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	8c 83       	std	Y+4, r24	; 0x04
    2f14:	64 c0       	rjmp	.+200    	; 0x2fde <put_fat+0x22a>
    2f16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f1a:	a8 a1       	ldd	r26, Y+32	; 0x20
    2f1c:	b9 a1       	ldd	r27, Y+33	; 0x21
    2f1e:	68 94       	set
    2f20:	16 f8       	bld	r1, 6
    2f22:	76 95       	lsr	r23
    2f24:	67 95       	ror	r22
    2f26:	57 95       	ror	r21
    2f28:	47 95       	ror	r20
    2f2a:	16 94       	lsr	r1
    2f2c:	d1 f7       	brne	.-12     	; 0x2f22 <put_fat+0x16e>
    2f2e:	48 0f       	add	r20, r24
    2f30:	59 1f       	adc	r21, r25
    2f32:	6a 1f       	adc	r22, r26
    2f34:	7b 1f       	adc	r23, r27
    2f36:	ce 01       	movw	r24, r28
    2f38:	ca d8       	rcall	.-3692   	; 0x20ce <move_window>
    2f3a:	18 2f       	mov	r17, r24
    2f3c:	81 11       	cpse	r24, r1
    2f3e:	4f c0       	rjmp	.+158    	; 0x2fde <put_fat+0x22a>
    2f40:	cc 0c       	add	r12, r12
    2f42:	dd 1c       	adc	r13, r13
    2f44:	ee 1c       	adc	r14, r14
    2f46:	ff 1c       	adc	r15, r15
    2f48:	cc 0c       	add	r12, r12
    2f4a:	dd 1c       	adc	r13, r13
    2f4c:	ee 1c       	adc	r14, r14
    2f4e:	ff 1c       	adc	r15, r15
    2f50:	8c ef       	ldi	r24, 0xFC	; 252
    2f52:	c8 22       	and	r12, r24
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	d8 22       	and	r13, r24
    2f58:	ee 24       	eor	r14, r14
    2f5a:	ff 24       	eor	r15, r15
    2f5c:	f6 01       	movw	r30, r12
    2f5e:	be 96       	adiw	r30, 0x2e	; 46
    2f60:	ec 0f       	add	r30, r28
    2f62:	fd 1f       	adc	r31, r29
    2f64:	83 81       	ldd	r24, Z+3	; 0x03
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a0 e0       	ldi	r26, 0x00	; 0
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	b8 2f       	mov	r27, r24
    2f6e:	aa 27       	eor	r26, r26
    2f70:	99 27       	eor	r25, r25
    2f72:	88 27       	eor	r24, r24
    2f74:	cc 0e       	add	r12, r28
    2f76:	dd 1e       	adc	r13, r29
    2f78:	88 27       	eor	r24, r24
    2f7a:	99 27       	eor	r25, r25
    2f7c:	aa 27       	eor	r26, r26
    2f7e:	b0 7f       	andi	r27, 0xF0	; 240
    2f80:	48 2a       	or	r4, r24
    2f82:	59 2a       	or	r5, r25
    2f84:	6a 2a       	or	r6, r26
    2f86:	7b 2a       	or	r7, r27
    2f88:	d6 01       	movw	r26, r12
    2f8a:	9e 96       	adiw	r26, 0x2e	; 46
    2f8c:	4c 92       	st	X, r4
    2f8e:	51 82       	std	Z+1, r5	; 0x01
    2f90:	62 82       	std	Z+2, r6	; 0x02
    2f92:	73 82       	std	Z+3, r7	; 0x03
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	8c 83       	std	Y+4, r24	; 0x04
    2f98:	22 c0       	rjmp	.+68     	; 0x2fde <put_fat+0x22a>
    2f9a:	12 e0       	ldi	r17, 0x02	; 2
    2f9c:	20 c0       	rjmp	.+64     	; 0x2fde <put_fat+0x22a>
    2f9e:	12 e0       	ldi	r17, 0x02	; 2
    2fa0:	1e c0       	rjmp	.+60     	; 0x2fde <put_fat+0x22a>
    2fa2:	12 e0       	ldi	r17, 0x02	; 2
    2fa4:	1c c0       	rjmp	.+56     	; 0x2fde <put_fat+0x22a>
    2fa6:	18 2f       	mov	r17, r24
    2fa8:	1a c0       	rjmp	.+52     	; 0x2fde <put_fat+0x22a>
    2faa:	18 2f       	mov	r17, r24
    2fac:	18 c0       	rjmp	.+48     	; 0x2fde <put_fat+0x22a>
    2fae:	f4 01       	movw	r30, r8
    2fb0:	f1 70       	andi	r31, 0x01	; 1
    2fb2:	68 94       	set
    2fb4:	13 f8       	bld	r1, 3
    2fb6:	76 94       	lsr	r7
    2fb8:	67 94       	ror	r6
    2fba:	57 94       	ror	r5
    2fbc:	47 94       	ror	r4
    2fbe:	16 94       	lsr	r1
    2fc0:	d1 f7       	brne	.-12     	; 0x2fb6 <put_fat+0x202>
    2fc2:	7d cf       	rjmp	.-262    	; 0x2ebe <put_fat+0x10a>
    2fc4:	f4 01       	movw	r30, r8
    2fc6:	f1 70       	andi	r31, 0x01	; 1
    2fc8:	de 01       	movw	r26, r28
    2fca:	ae 0f       	add	r26, r30
    2fcc:	bf 1f       	adc	r27, r31
    2fce:	9e 96       	adiw	r26, 0x2e	; 46
    2fd0:	9c 91       	ld	r25, X
    2fd2:	90 7f       	andi	r25, 0xF0	; 240
    2fd4:	85 2d       	mov	r24, r5
    2fd6:	8f 70       	andi	r24, 0x0F	; 15
    2fd8:	49 2e       	mov	r4, r25
    2fda:	48 2a       	or	r4, r24
    2fdc:	70 cf       	rjmp	.-288    	; 0x2ebe <put_fat+0x10a>
    2fde:	81 2f       	mov	r24, r17
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	ef 90       	pop	r14
    2fec:	df 90       	pop	r13
    2fee:	cf 90       	pop	r12
    2ff0:	bf 90       	pop	r11
    2ff2:	af 90       	pop	r10
    2ff4:	9f 90       	pop	r9
    2ff6:	8f 90       	pop	r8
    2ff8:	7f 90       	pop	r7
    2ffa:	6f 90       	pop	r6
    2ffc:	5f 90       	pop	r5
    2ffe:	4f 90       	pop	r4
    3000:	08 95       	ret

00003002 <create_chain>:
    3002:	2f 92       	push	r2
    3004:	3f 92       	push	r3
    3006:	4f 92       	push	r4
    3008:	5f 92       	push	r5
    300a:	6f 92       	push	r6
    300c:	7f 92       	push	r7
    300e:	8f 92       	push	r8
    3010:	9f 92       	push	r9
    3012:	af 92       	push	r10
    3014:	bf 92       	push	r11
    3016:	cf 92       	push	r12
    3018:	df 92       	push	r13
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	ec 01       	movw	r28, r24
    3028:	2a 01       	movw	r4, r20
    302a:	3b 01       	movw	r6, r22
    302c:	41 15       	cp	r20, r1
    302e:	51 05       	cpc	r21, r1
    3030:	61 05       	cpc	r22, r1
    3032:	71 05       	cpc	r23, r1
    3034:	b9 f4       	brne	.+46     	; 0x3064 <create_chain+0x62>
    3036:	8a 84       	ldd	r8, Y+10	; 0x0a
    3038:	9b 84       	ldd	r9, Y+11	; 0x0b
    303a:	ac 84       	ldd	r10, Y+12	; 0x0c
    303c:	bd 84       	ldd	r11, Y+13	; 0x0d
    303e:	81 14       	cp	r8, r1
    3040:	91 04       	cpc	r9, r1
    3042:	a1 04       	cpc	r10, r1
    3044:	b1 04       	cpc	r11, r1
    3046:	59 f1       	breq	.+86     	; 0x309e <create_chain+0x9c>
    3048:	8a 89       	ldd	r24, Y+18	; 0x12
    304a:	9b 89       	ldd	r25, Y+19	; 0x13
    304c:	ac 89       	ldd	r26, Y+20	; 0x14
    304e:	bd 89       	ldd	r27, Y+21	; 0x15
    3050:	88 16       	cp	r8, r24
    3052:	99 06       	cpc	r9, r25
    3054:	aa 06       	cpc	r10, r26
    3056:	bb 06       	cpc	r11, r27
    3058:	30 f1       	brcs	.+76     	; 0x30a6 <create_chain+0xa4>
    305a:	81 2c       	mov	r8, r1
    305c:	91 2c       	mov	r9, r1
    305e:	54 01       	movw	r10, r8
    3060:	83 94       	inc	r8
    3062:	21 c0       	rjmp	.+66     	; 0x30a6 <create_chain+0xa4>
    3064:	ed dc       	rcall	.-1574   	; 0x2a40 <get_fat>
    3066:	6b 01       	movw	r12, r22
    3068:	7c 01       	movw	r14, r24
    306a:	62 30       	cpi	r22, 0x02	; 2
    306c:	71 05       	cpc	r23, r1
    306e:	81 05       	cpc	r24, r1
    3070:	91 05       	cpc	r25, r1
    3072:	08 f4       	brcc	.+2      	; 0x3076 <create_chain+0x74>
    3074:	96 c0       	rjmp	.+300    	; 0x31a2 <create_chain+0x1a0>
    3076:	8f ef       	ldi	r24, 0xFF	; 255
    3078:	c8 16       	cp	r12, r24
    307a:	d8 06       	cpc	r13, r24
    307c:	e8 06       	cpc	r14, r24
    307e:	f8 06       	cpc	r15, r24
    3080:	09 f4       	brne	.+2      	; 0x3084 <create_chain+0x82>
    3082:	94 c0       	rjmp	.+296    	; 0x31ac <create_chain+0x1aa>
    3084:	8a 89       	ldd	r24, Y+18	; 0x12
    3086:	9b 89       	ldd	r25, Y+19	; 0x13
    3088:	ac 89       	ldd	r26, Y+20	; 0x14
    308a:	bd 89       	ldd	r27, Y+21	; 0x15
    308c:	c8 16       	cp	r12, r24
    308e:	d9 06       	cpc	r13, r25
    3090:	ea 06       	cpc	r14, r26
    3092:	fb 06       	cpc	r15, r27
    3094:	08 f4       	brcc	.+2      	; 0x3098 <create_chain+0x96>
    3096:	8f c0       	rjmp	.+286    	; 0x31b6 <create_chain+0x1b4>
    3098:	53 01       	movw	r10, r6
    309a:	42 01       	movw	r8, r4
    309c:	04 c0       	rjmp	.+8      	; 0x30a6 <create_chain+0xa4>
    309e:	81 2c       	mov	r8, r1
    30a0:	91 2c       	mov	r9, r1
    30a2:	54 01       	movw	r10, r8
    30a4:	83 94       	inc	r8
    30a6:	75 01       	movw	r14, r10
    30a8:	64 01       	movw	r12, r8
    30aa:	68 94       	set
    30ac:	22 24       	eor	r2, r2
    30ae:	21 f8       	bld	r2, 1
    30b0:	31 2c       	mov	r3, r1
    30b2:	00 e0       	ldi	r16, 0x00	; 0
    30b4:	10 e0       	ldi	r17, 0x00	; 0
    30b6:	2f ef       	ldi	r18, 0xFF	; 255
    30b8:	c2 1a       	sub	r12, r18
    30ba:	d2 0a       	sbc	r13, r18
    30bc:	e2 0a       	sbc	r14, r18
    30be:	f2 0a       	sbc	r15, r18
    30c0:	8a 89       	ldd	r24, Y+18	; 0x12
    30c2:	9b 89       	ldd	r25, Y+19	; 0x13
    30c4:	ac 89       	ldd	r26, Y+20	; 0x14
    30c6:	bd 89       	ldd	r27, Y+21	; 0x15
    30c8:	c8 16       	cp	r12, r24
    30ca:	d9 06       	cpc	r13, r25
    30cc:	ea 06       	cpc	r14, r26
    30ce:	fb 06       	cpc	r15, r27
    30d0:	58 f0       	brcs	.+22     	; 0x30e8 <create_chain+0xe6>
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	88 16       	cp	r8, r24
    30d6:	91 04       	cpc	r9, r1
    30d8:	a1 04       	cpc	r10, r1
    30da:	b1 04       	cpc	r11, r1
    30dc:	08 f4       	brcc	.+2      	; 0x30e0 <create_chain+0xde>
    30de:	70 c0       	rjmp	.+224    	; 0x31c0 <create_chain+0x1be>
    30e0:	c2 2c       	mov	r12, r2
    30e2:	d3 2c       	mov	r13, r3
    30e4:	e0 2e       	mov	r14, r16
    30e6:	f1 2e       	mov	r15, r17
    30e8:	b7 01       	movw	r22, r14
    30ea:	a6 01       	movw	r20, r12
    30ec:	ce 01       	movw	r24, r28
    30ee:	a8 dc       	rcall	.-1712   	; 0x2a40 <get_fat>
    30f0:	61 15       	cp	r22, r1
    30f2:	71 05       	cpc	r23, r1
    30f4:	81 05       	cpc	r24, r1
    30f6:	91 05       	cpc	r25, r1
    30f8:	99 f0       	breq	.+38     	; 0x3120 <create_chain+0x11e>
    30fa:	6f 3f       	cpi	r22, 0xFF	; 255
    30fc:	2f ef       	ldi	r18, 0xFF	; 255
    30fe:	72 07       	cpc	r23, r18
    3100:	82 07       	cpc	r24, r18
    3102:	92 07       	cpc	r25, r18
    3104:	09 f4       	brne	.+2      	; 0x3108 <create_chain+0x106>
    3106:	61 c0       	rjmp	.+194    	; 0x31ca <create_chain+0x1c8>
    3108:	61 30       	cpi	r22, 0x01	; 1
    310a:	71 05       	cpc	r23, r1
    310c:	81 05       	cpc	r24, r1
    310e:	91 05       	cpc	r25, r1
    3110:	09 f4       	brne	.+2      	; 0x3114 <create_chain+0x112>
    3112:	60 c0       	rjmp	.+192    	; 0x31d4 <create_chain+0x1d2>
    3114:	c8 14       	cp	r12, r8
    3116:	d9 04       	cpc	r13, r9
    3118:	ea 04       	cpc	r14, r10
    311a:	fb 04       	cpc	r15, r11
    311c:	61 f6       	brne	.-104    	; 0x30b6 <create_chain+0xb4>
    311e:	5f c0       	rjmp	.+190    	; 0x31de <create_chain+0x1dc>
    3120:	8c 2c       	mov	r8, r12
    3122:	9d 2c       	mov	r9, r13
    3124:	ae 2c       	mov	r10, r14
    3126:	bf 2c       	mov	r11, r15
    3128:	0f ef       	ldi	r16, 0xFF	; 255
    312a:	1f ef       	ldi	r17, 0xFF	; 255
    312c:	2f ef       	ldi	r18, 0xFF	; 255
    312e:	3f e0       	ldi	r19, 0x0F	; 15
    3130:	b7 01       	movw	r22, r14
    3132:	a6 01       	movw	r20, r12
    3134:	ce 01       	movw	r24, r28
    3136:	3e de       	rcall	.-900    	; 0x2db4 <put_fat>
    3138:	81 11       	cpse	r24, r1
    313a:	2c c0       	rjmp	.+88     	; 0x3194 <create_chain+0x192>
    313c:	41 14       	cp	r4, r1
    313e:	51 04       	cpc	r5, r1
    3140:	61 04       	cpc	r6, r1
    3142:	71 04       	cpc	r7, r1
    3144:	51 f0       	breq	.+20     	; 0x315a <create_chain+0x158>
    3146:	0c 2d       	mov	r16, r12
    3148:	1d 2d       	mov	r17, r13
    314a:	2e 2d       	mov	r18, r14
    314c:	3f 2d       	mov	r19, r15
    314e:	b3 01       	movw	r22, r6
    3150:	a2 01       	movw	r20, r4
    3152:	ce 01       	movw	r24, r28
    3154:	2f de       	rcall	.-930    	; 0x2db4 <put_fat>
    3156:	81 11       	cpse	r24, r1
    3158:	1d c0       	rjmp	.+58     	; 0x3194 <create_chain+0x192>
    315a:	8a 86       	std	Y+10, r8	; 0x0a
    315c:	9b 86       	std	Y+11, r9	; 0x0b
    315e:	ac 86       	std	Y+12, r10	; 0x0c
    3160:	bd 86       	std	Y+13, r11	; 0x0d
    3162:	8e 85       	ldd	r24, Y+14	; 0x0e
    3164:	9f 85       	ldd	r25, Y+15	; 0x0f
    3166:	a8 89       	ldd	r26, Y+16	; 0x10
    3168:	b9 89       	ldd	r27, Y+17	; 0x11
    316a:	8f 3f       	cpi	r24, 0xFF	; 255
    316c:	2f ef       	ldi	r18, 0xFF	; 255
    316e:	92 07       	cpc	r25, r18
    3170:	a2 07       	cpc	r26, r18
    3172:	b2 07       	cpc	r27, r18
    3174:	c9 f1       	breq	.+114    	; 0x31e8 <create_chain+0x1e6>
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	a1 09       	sbc	r26, r1
    317a:	b1 09       	sbc	r27, r1
    317c:	8e 87       	std	Y+14, r24	; 0x0e
    317e:	9f 87       	std	Y+15, r25	; 0x0f
    3180:	a8 8b       	std	Y+16, r26	; 0x10
    3182:	b9 8b       	std	Y+17, r27	; 0x11
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	81 60       	ori	r24, 0x01	; 1
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	6c 2d       	mov	r22, r12
    318c:	7d 2d       	mov	r23, r13
    318e:	8e 2d       	mov	r24, r14
    3190:	9f 2d       	mov	r25, r15
    3192:	33 c0       	rjmp	.+102    	; 0x31fa <create_chain+0x1f8>
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	69 f1       	breq	.+90     	; 0x31f2 <create_chain+0x1f0>
    3198:	61 e0       	ldi	r22, 0x01	; 1
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	2c c0       	rjmp	.+88     	; 0x31fa <create_chain+0x1f8>
    31a2:	61 e0       	ldi	r22, 0x01	; 1
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	27 c0       	rjmp	.+78     	; 0x31fa <create_chain+0x1f8>
    31ac:	6f ef       	ldi	r22, 0xFF	; 255
    31ae:	7f ef       	ldi	r23, 0xFF	; 255
    31b0:	8f ef       	ldi	r24, 0xFF	; 255
    31b2:	9f ef       	ldi	r25, 0xFF	; 255
    31b4:	22 c0       	rjmp	.+68     	; 0x31fa <create_chain+0x1f8>
    31b6:	6c 2d       	mov	r22, r12
    31b8:	7d 2d       	mov	r23, r13
    31ba:	8e 2d       	mov	r24, r14
    31bc:	9f 2d       	mov	r25, r15
    31be:	1d c0       	rjmp	.+58     	; 0x31fa <create_chain+0x1f8>
    31c0:	60 e0       	ldi	r22, 0x00	; 0
    31c2:	70 e0       	ldi	r23, 0x00	; 0
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	18 c0       	rjmp	.+48     	; 0x31fa <create_chain+0x1f8>
    31ca:	6f ef       	ldi	r22, 0xFF	; 255
    31cc:	7f ef       	ldi	r23, 0xFF	; 255
    31ce:	8f ef       	ldi	r24, 0xFF	; 255
    31d0:	9f ef       	ldi	r25, 0xFF	; 255
    31d2:	13 c0       	rjmp	.+38     	; 0x31fa <create_chain+0x1f8>
    31d4:	61 e0       	ldi	r22, 0x01	; 1
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e c0       	rjmp	.+28     	; 0x31fa <create_chain+0x1f8>
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	09 c0       	rjmp	.+18     	; 0x31fa <create_chain+0x1f8>
    31e8:	6c 2d       	mov	r22, r12
    31ea:	7d 2d       	mov	r23, r13
    31ec:	8e 2d       	mov	r24, r14
    31ee:	9f 2d       	mov	r25, r15
    31f0:	04 c0       	rjmp	.+8      	; 0x31fa <create_chain+0x1f8>
    31f2:	6f ef       	ldi	r22, 0xFF	; 255
    31f4:	7f ef       	ldi	r23, 0xFF	; 255
    31f6:	8f ef       	ldi	r24, 0xFF	; 255
    31f8:	9f ef       	ldi	r25, 0xFF	; 255
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	1f 91       	pop	r17
    3200:	0f 91       	pop	r16
    3202:	ff 90       	pop	r15
    3204:	ef 90       	pop	r14
    3206:	df 90       	pop	r13
    3208:	cf 90       	pop	r12
    320a:	bf 90       	pop	r11
    320c:	af 90       	pop	r10
    320e:	9f 90       	pop	r9
    3210:	8f 90       	pop	r8
    3212:	7f 90       	pop	r7
    3214:	6f 90       	pop	r6
    3216:	5f 90       	pop	r5
    3218:	4f 90       	pop	r4
    321a:	3f 90       	pop	r3
    321c:	2f 90       	pop	r2
    321e:	08 95       	ret

00003220 <dir_next>:
    3220:	7f 92       	push	r7
    3222:	8f 92       	push	r8
    3224:	9f 92       	push	r9
    3226:	af 92       	push	r10
    3228:	bf 92       	push	r11
    322a:	cf 92       	push	r12
    322c:	df 92       	push	r13
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	dc 01       	movw	r26, r24
    323c:	14 96       	adiw	r26, 0x04	; 4
    323e:	cd 91       	ld	r28, X+
    3240:	dc 91       	ld	r29, X
    3242:	15 97       	sbiw	r26, 0x05	; 5
    3244:	21 96       	adiw	r28, 0x01	; 1
    3246:	09 f4       	brne	.+2      	; 0x324a <dir_next+0x2a>
    3248:	03 c1       	rjmp	.+518    	; 0x3450 <dir_next+0x230>
    324a:	1e 96       	adiw	r26, 0x0e	; 14
    324c:	8d 90       	ld	r8, X+
    324e:	9d 90       	ld	r9, X+
    3250:	ad 90       	ld	r10, X+
    3252:	bc 90       	ld	r11, X
    3254:	51 97       	sbiw	r26, 0x11	; 17
    3256:	81 14       	cp	r8, r1
    3258:	91 04       	cpc	r9, r1
    325a:	a1 04       	cpc	r10, r1
    325c:	b1 04       	cpc	r11, r1
    325e:	09 f4       	brne	.+2      	; 0x3262 <dir_next+0x42>
    3260:	f9 c0       	rjmp	.+498    	; 0x3454 <dir_next+0x234>
    3262:	7b 01       	movw	r14, r22
    3264:	8c 01       	movw	r16, r24
    3266:	6e 01       	movw	r12, r28
    3268:	bf e0       	ldi	r27, 0x0F	; 15
    326a:	cb 22       	and	r12, r27
    326c:	dd 24       	eor	r13, r13
    326e:	c1 14       	cp	r12, r1
    3270:	d1 04       	cpc	r13, r1
    3272:	09 f0       	breq	.+2      	; 0x3276 <dir_next+0x56>
    3274:	d1 c0       	rjmp	.+418    	; 0x3418 <dir_next+0x1f8>
    3276:	ef ef       	ldi	r30, 0xFF	; 255
    3278:	8e 1a       	sub	r8, r30
    327a:	9e 0a       	sbc	r9, r30
    327c:	ae 0a       	sbc	r10, r30
    327e:	be 0a       	sbc	r11, r30
    3280:	dc 01       	movw	r26, r24
    3282:	1e 96       	adiw	r26, 0x0e	; 14
    3284:	8d 92       	st	X+, r8
    3286:	9d 92       	st	X+, r9
    3288:	ad 92       	st	X+, r10
    328a:	bc 92       	st	X, r11
    328c:	51 97       	sbiw	r26, 0x11	; 17
    328e:	1a 96       	adiw	r26, 0x0a	; 10
    3290:	4d 91       	ld	r20, X+
    3292:	5d 91       	ld	r21, X+
    3294:	6d 91       	ld	r22, X+
    3296:	7c 91       	ld	r23, X
    3298:	1d 97       	sbiw	r26, 0x0d	; 13
    329a:	41 15       	cp	r20, r1
    329c:	51 05       	cpc	r21, r1
    329e:	61 05       	cpc	r22, r1
    32a0:	71 05       	cpc	r23, r1
    32a2:	49 f4       	brne	.+18     	; 0x32b6 <dir_next+0x96>
    32a4:	ed 91       	ld	r30, X+
    32a6:	fc 91       	ld	r31, X
    32a8:	80 85       	ldd	r24, Z+8	; 0x08
    32aa:	91 85       	ldd	r25, Z+9	; 0x09
    32ac:	c8 17       	cp	r28, r24
    32ae:	d9 07       	cpc	r29, r25
    32b0:	08 f0       	brcs	.+2      	; 0x32b4 <dir_next+0x94>
    32b2:	d2 c0       	rjmp	.+420    	; 0x3458 <dir_next+0x238>
    32b4:	b1 c0       	rjmp	.+354    	; 0x3418 <dir_next+0x1f8>
    32b6:	dc 01       	movw	r26, r24
    32b8:	ed 91       	ld	r30, X+
    32ba:	fc 91       	ld	r31, X
    32bc:	22 81       	ldd	r18, Z+2	; 0x02
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	21 50       	subi	r18, 0x01	; 1
    32c2:	31 09       	sbc	r19, r1
    32c4:	ce 01       	movw	r24, r28
    32c6:	92 95       	swap	r25
    32c8:	82 95       	swap	r24
    32ca:	8f 70       	andi	r24, 0x0F	; 15
    32cc:	89 27       	eor	r24, r25
    32ce:	9f 70       	andi	r25, 0x0F	; 15
    32d0:	89 27       	eor	r24, r25
    32d2:	28 23       	and	r18, r24
    32d4:	39 23       	and	r19, r25
    32d6:	23 2b       	or	r18, r19
    32d8:	09 f0       	breq	.+2      	; 0x32dc <dir_next+0xbc>
    32da:	9e c0       	rjmp	.+316    	; 0x3418 <dir_next+0x1f8>
    32dc:	cf 01       	movw	r24, r30
    32de:	b0 db       	rcall	.-2208   	; 0x2a40 <get_fat>
    32e0:	4b 01       	movw	r8, r22
    32e2:	5c 01       	movw	r10, r24
    32e4:	62 30       	cpi	r22, 0x02	; 2
    32e6:	71 05       	cpc	r23, r1
    32e8:	81 05       	cpc	r24, r1
    32ea:	91 05       	cpc	r25, r1
    32ec:	08 f4       	brcc	.+2      	; 0x32f0 <dir_next+0xd0>
    32ee:	b6 c0       	rjmp	.+364    	; 0x345c <dir_next+0x23c>
    32f0:	6f 3f       	cpi	r22, 0xFF	; 255
    32f2:	7f 4f       	sbci	r23, 0xFF	; 255
    32f4:	8f 4f       	sbci	r24, 0xFF	; 255
    32f6:	9f 4f       	sbci	r25, 0xFF	; 255
    32f8:	09 f4       	brne	.+2      	; 0x32fc <dir_next+0xdc>
    32fa:	b2 c0       	rjmp	.+356    	; 0x3460 <dir_next+0x240>
    32fc:	d8 01       	movw	r26, r16
    32fe:	ed 91       	ld	r30, X+
    3300:	fc 91       	ld	r31, X
    3302:	82 89       	ldd	r24, Z+18	; 0x12
    3304:	93 89       	ldd	r25, Z+19	; 0x13
    3306:	a4 89       	ldd	r26, Z+20	; 0x14
    3308:	b5 89       	ldd	r27, Z+21	; 0x15
    330a:	88 16       	cp	r8, r24
    330c:	99 06       	cpc	r9, r25
    330e:	aa 06       	cpc	r10, r26
    3310:	bb 06       	cpc	r11, r27
    3312:	08 f4       	brcc	.+2      	; 0x3316 <dir_next+0xf6>
    3314:	70 c0       	rjmp	.+224    	; 0x33f6 <dir_next+0x1d6>
    3316:	ef 28       	or	r14, r15
    3318:	09 f4       	brne	.+2      	; 0x331c <dir_next+0xfc>
    331a:	a4 c0       	rjmp	.+328    	; 0x3464 <dir_next+0x244>
    331c:	d8 01       	movw	r26, r16
    331e:	1a 96       	adiw	r26, 0x0a	; 10
    3320:	4d 91       	ld	r20, X+
    3322:	5d 91       	ld	r21, X+
    3324:	6d 91       	ld	r22, X+
    3326:	7c 91       	ld	r23, X
    3328:	1d 97       	sbiw	r26, 0x0d	; 13
    332a:	cf 01       	movw	r24, r30
    332c:	6a de       	rcall	.-812    	; 0x3002 <create_chain>
    332e:	4b 01       	movw	r8, r22
    3330:	5c 01       	movw	r10, r24
    3332:	61 15       	cp	r22, r1
    3334:	71 05       	cpc	r23, r1
    3336:	81 05       	cpc	r24, r1
    3338:	91 05       	cpc	r25, r1
    333a:	09 f4       	brne	.+2      	; 0x333e <dir_next+0x11e>
    333c:	95 c0       	rjmp	.+298    	; 0x3468 <dir_next+0x248>
    333e:	61 30       	cpi	r22, 0x01	; 1
    3340:	71 05       	cpc	r23, r1
    3342:	81 05       	cpc	r24, r1
    3344:	91 05       	cpc	r25, r1
    3346:	09 f4       	brne	.+2      	; 0x334a <dir_next+0x12a>
    3348:	91 c0       	rjmp	.+290    	; 0x346c <dir_next+0x24c>
    334a:	6f 3f       	cpi	r22, 0xFF	; 255
    334c:	7f 4f       	sbci	r23, 0xFF	; 255
    334e:	8f 4f       	sbci	r24, 0xFF	; 255
    3350:	9f 4f       	sbci	r25, 0xFF	; 255
    3352:	09 f4       	brne	.+2      	; 0x3356 <dir_next+0x136>
    3354:	8d c0       	rjmp	.+282    	; 0x3470 <dir_next+0x250>
    3356:	d8 01       	movw	r26, r16
    3358:	8d 91       	ld	r24, X+
    335a:	9c 91       	ld	r25, X
    335c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync_window>
    3360:	81 11       	cpse	r24, r1
    3362:	88 c0       	rjmp	.+272    	; 0x3474 <dir_next+0x254>
    3364:	f8 01       	movw	r30, r16
    3366:	80 81       	ld	r24, Z
    3368:	91 81       	ldd	r25, Z+1	; 0x01
    336a:	fc 01       	movw	r30, r24
    336c:	be 96       	adiw	r30, 0x2e	; 46
    336e:	82 5d       	subi	r24, 0xD2	; 210
    3370:	9d 4f       	sbci	r25, 0xFD	; 253
    3372:	11 92       	st	Z+, r1
    3374:	e8 17       	cp	r30, r24
    3376:	f9 07       	cpc	r31, r25
    3378:	e1 f7       	brne	.-8      	; 0x3372 <dir_next+0x152>
    337a:	d8 01       	movw	r26, r16
    337c:	ed 90       	ld	r14, X+
    337e:	fc 90       	ld	r15, X
    3380:	b5 01       	movw	r22, r10
    3382:	a4 01       	movw	r20, r8
    3384:	c7 01       	movw	r24, r14
    3386:	2e db       	rcall	.-2468   	; 0x29e4 <clust2sect>
    3388:	f7 01       	movw	r30, r14
    338a:	62 a7       	std	Z+42, r22	; 0x2a
    338c:	73 a7       	std	Z+43, r23	; 0x2b
    338e:	84 a7       	std	Z+44, r24	; 0x2c
    3390:	95 a7       	std	Z+45, r25	; 0x2d
    3392:	e1 2c       	mov	r14, r1
    3394:	f1 2c       	mov	r15, r1
    3396:	77 24       	eor	r7, r7
    3398:	73 94       	inc	r7
    339a:	19 c0       	rjmp	.+50     	; 0x33ce <dir_next+0x1ae>
    339c:	74 82       	std	Z+4, r7	; 0x04
    339e:	d8 01       	movw	r26, r16
    33a0:	8d 91       	ld	r24, X+
    33a2:	9c 91       	ld	r25, X
    33a4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync_window>
    33a8:	81 11       	cpse	r24, r1
    33aa:	66 c0       	rjmp	.+204    	; 0x3478 <dir_next+0x258>
    33ac:	d8 01       	movw	r26, r16
    33ae:	ed 91       	ld	r30, X+
    33b0:	fc 91       	ld	r31, X
    33b2:	82 a5       	ldd	r24, Z+42	; 0x2a
    33b4:	93 a5       	ldd	r25, Z+43	; 0x2b
    33b6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    33b8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    33ba:	01 96       	adiw	r24, 0x01	; 1
    33bc:	a1 1d       	adc	r26, r1
    33be:	b1 1d       	adc	r27, r1
    33c0:	82 a7       	std	Z+42, r24	; 0x2a
    33c2:	93 a7       	std	Z+43, r25	; 0x2b
    33c4:	a4 a7       	std	Z+44, r26	; 0x2c
    33c6:	b5 a7       	std	Z+45, r27	; 0x2d
    33c8:	bf ef       	ldi	r27, 0xFF	; 255
    33ca:	eb 1a       	sub	r14, r27
    33cc:	fb 0a       	sbc	r15, r27
    33ce:	d8 01       	movw	r26, r16
    33d0:	ed 91       	ld	r30, X+
    33d2:	fc 91       	ld	r31, X
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	e8 16       	cp	r14, r24
    33da:	f9 06       	cpc	r15, r25
    33dc:	f8 f2       	brcs	.-66     	; 0x339c <dir_next+0x17c>
    33de:	82 a5       	ldd	r24, Z+42	; 0x2a
    33e0:	93 a5       	ldd	r25, Z+43	; 0x2b
    33e2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    33e4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    33e6:	8e 19       	sub	r24, r14
    33e8:	9f 09       	sbc	r25, r15
    33ea:	a1 09       	sbc	r26, r1
    33ec:	b1 09       	sbc	r27, r1
    33ee:	82 a7       	std	Z+42, r24	; 0x2a
    33f0:	93 a7       	std	Z+43, r25	; 0x2b
    33f2:	a4 a7       	std	Z+44, r26	; 0x2c
    33f4:	b5 a7       	std	Z+45, r27	; 0x2d
    33f6:	f8 01       	movw	r30, r16
    33f8:	82 86       	std	Z+10, r8	; 0x0a
    33fa:	93 86       	std	Z+11, r9	; 0x0b
    33fc:	a4 86       	std	Z+12, r10	; 0x0c
    33fe:	b5 86       	std	Z+13, r11	; 0x0d
    3400:	b5 01       	movw	r22, r10
    3402:	a4 01       	movw	r20, r8
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	ed da       	rcall	.-2598   	; 0x29e4 <clust2sect>
    340a:	d8 01       	movw	r26, r16
    340c:	1e 96       	adiw	r26, 0x0e	; 14
    340e:	6d 93       	st	X+, r22
    3410:	7d 93       	st	X+, r23
    3412:	8d 93       	st	X+, r24
    3414:	9c 93       	st	X, r25
    3416:	51 97       	sbiw	r26, 0x11	; 17
    3418:	f8 01       	movw	r30, r16
    341a:	d5 83       	std	Z+5, r29	; 0x05
    341c:	c4 83       	std	Z+4, r28	; 0x04
    341e:	cc 0c       	add	r12, r12
    3420:	dd 1c       	adc	r13, r13
    3422:	cc 0c       	add	r12, r12
    3424:	dd 1c       	adc	r13, r13
    3426:	cc 0c       	add	r12, r12
    3428:	dd 1c       	adc	r13, r13
    342a:	cc 0c       	add	r12, r12
    342c:	dd 1c       	adc	r13, r13
    342e:	cc 0c       	add	r12, r12
    3430:	dd 1c       	adc	r13, r13
    3432:	fe e2       	ldi	r31, 0x2E	; 46
    3434:	cf 0e       	add	r12, r31
    3436:	d1 1c       	adc	r13, r1
    3438:	d8 01       	movw	r26, r16
    343a:	8d 91       	ld	r24, X+
    343c:	9c 91       	ld	r25, X
    343e:	11 97       	sbiw	r26, 0x01	; 1
    3440:	c8 0e       	add	r12, r24
    3442:	d9 1e       	adc	r13, r25
    3444:	53 96       	adiw	r26, 0x13	; 19
    3446:	dc 92       	st	X, r13
    3448:	ce 92       	st	-X, r12
    344a:	52 97       	sbiw	r26, 0x12	; 18
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	15 c0       	rjmp	.+42     	; 0x347a <dir_next+0x25a>
    3450:	84 e0       	ldi	r24, 0x04	; 4
    3452:	13 c0       	rjmp	.+38     	; 0x347a <dir_next+0x25a>
    3454:	84 e0       	ldi	r24, 0x04	; 4
    3456:	11 c0       	rjmp	.+34     	; 0x347a <dir_next+0x25a>
    3458:	84 e0       	ldi	r24, 0x04	; 4
    345a:	0f c0       	rjmp	.+30     	; 0x347a <dir_next+0x25a>
    345c:	82 e0       	ldi	r24, 0x02	; 2
    345e:	0d c0       	rjmp	.+26     	; 0x347a <dir_next+0x25a>
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	0b c0       	rjmp	.+22     	; 0x347a <dir_next+0x25a>
    3464:	84 e0       	ldi	r24, 0x04	; 4
    3466:	09 c0       	rjmp	.+18     	; 0x347a <dir_next+0x25a>
    3468:	87 e0       	ldi	r24, 0x07	; 7
    346a:	07 c0       	rjmp	.+14     	; 0x347a <dir_next+0x25a>
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	05 c0       	rjmp	.+10     	; 0x347a <dir_next+0x25a>
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	03 c0       	rjmp	.+6      	; 0x347a <dir_next+0x25a>
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	01 c0       	rjmp	.+2      	; 0x347a <dir_next+0x25a>
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	ff 90       	pop	r15
    3484:	ef 90       	pop	r14
    3486:	df 90       	pop	r13
    3488:	cf 90       	pop	r12
    348a:	bf 90       	pop	r11
    348c:	af 90       	pop	r10
    348e:	9f 90       	pop	r9
    3490:	8f 90       	pop	r8
    3492:	7f 90       	pop	r7
    3494:	08 95       	ret

00003496 <f_mount>:
    3496:	1f 93       	push	r17
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	00 d0       	rcall	.+0      	; 0x349e <f_mount+0x8>
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <f_mount+0xa>
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <f_mount+0xc>
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	9c 83       	std	Y+4, r25	; 0x04
    34a8:	8b 83       	std	Y+3, r24	; 0x03
    34aa:	7e 83       	std	Y+6, r23	; 0x06
    34ac:	6d 83       	std	Y+5, r22	; 0x05
    34ae:	14 2f       	mov	r17, r20
    34b0:	7a 83       	std	Y+2, r23	; 0x02
    34b2:	69 83       	std	Y+1, r22	; 0x01
    34b4:	ce 01       	movw	r24, r28
    34b6:	01 96       	adiw	r24, 0x01	; 1
    34b8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <get_ldnumber>
    34bc:	99 23       	and	r25, r25
    34be:	34 f1       	brlt	.+76     	; 0x350c <f_mount+0x76>
    34c0:	fc 01       	movw	r30, r24
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	e3 5d       	subi	r30, 0xD3	; 211
    34c8:	fb 4f       	sbci	r31, 0xFB	; 251
    34ca:	01 90       	ld	r0, Z+
    34cc:	f0 81       	ld	r31, Z
    34ce:	e0 2d       	mov	r30, r0
    34d0:	30 97       	sbiw	r30, 0x00	; 0
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <f_mount+0x40>
    34d4:	10 82       	st	Z, r1
    34d6:	eb 81       	ldd	r30, Y+3	; 0x03
    34d8:	fc 81       	ldd	r31, Y+4	; 0x04
    34da:	30 97       	sbiw	r30, 0x00	; 0
    34dc:	e9 f0       	breq	.+58     	; 0x3518 <f_mount+0x82>
    34de:	10 82       	st	Z, r1
    34e0:	2b 81       	ldd	r18, Y+3	; 0x03
    34e2:	3c 81       	ldd	r19, Y+4	; 0x04
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	fc 01       	movw	r30, r24
    34ea:	e3 5d       	subi	r30, 0xD3	; 211
    34ec:	fb 4f       	sbci	r31, 0xFB	; 251
    34ee:	31 83       	std	Z+1, r19	; 0x01
    34f0:	20 83       	st	Z, r18
    34f2:	23 2b       	or	r18, r19
    34f4:	69 f0       	breq	.+26     	; 0x3510 <f_mount+0x7a>
    34f6:	11 30       	cpi	r17, 0x01	; 1
    34f8:	69 f4       	brne	.+26     	; 0x3514 <f_mount+0x7e>
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	be 01       	movw	r22, r28
    34fe:	6b 5f       	subi	r22, 0xFB	; 251
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	ce 01       	movw	r24, r28
    3504:	03 96       	adiw	r24, 0x03	; 3
    3506:	0e 94 30 11 	call	0x2260	; 0x2260 <find_volume>
    350a:	0e c0       	rjmp	.+28     	; 0x3528 <f_mount+0x92>
    350c:	8b e0       	ldi	r24, 0x0B	; 11
    350e:	0c c0       	rjmp	.+24     	; 0x3528 <f_mount+0x92>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	0a c0       	rjmp	.+20     	; 0x3528 <f_mount+0x92>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	08 c0       	rjmp	.+16     	; 0x3528 <f_mount+0x92>
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	fc 01       	movw	r30, r24
    351e:	e3 5d       	subi	r30, 0xD3	; 211
    3520:	fb 4f       	sbci	r31, 0xFB	; 251
    3522:	11 82       	std	Z+1, r1	; 0x01
    3524:	10 82       	st	Z, r1
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	26 96       	adiw	r28, 0x06	; 6
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	f8 94       	cli
    352e:	de bf       	out	0x3e, r29	; 62
    3530:	0f be       	out	0x3f, r0	; 63
    3532:	cd bf       	out	0x3d, r28	; 61
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	08 95       	ret

0000353c <f_open>:
    353c:	2f 92       	push	r2
    353e:	3f 92       	push	r3
    3540:	4f 92       	push	r4
    3542:	5f 92       	push	r5
    3544:	6f 92       	push	r6
    3546:	7f 92       	push	r7
    3548:	8f 92       	push	r8
    354a:	9f 92       	push	r9
    354c:	af 92       	push	r10
    354e:	bf 92       	push	r11
    3550:	cf 92       	push	r12
    3552:	df 92       	push	r13
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	ae 97       	sbiw	r28, 0x2e	; 46
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	7c a3       	std	Y+36, r23	; 0x24
    3572:	6b a3       	std	Y+35, r22	; 0x23
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	09 f4       	brne	.+2      	; 0x357a <f_open+0x3e>
    3578:	83 c2       	rjmp	.+1286   	; 0x3a80 <f_open+0x544>
    357a:	4d a3       	std	Y+37, r20	; 0x25
    357c:	1c 01       	movw	r2, r24
    357e:	dc 01       	movw	r26, r24
    3580:	1d 92       	st	X+, r1
    3582:	1c 92       	st	X, r1
    3584:	4e 71       	andi	r20, 0x1E	; 30
    3586:	be 01       	movw	r22, r28
    3588:	6d 5d       	subi	r22, 0xDD	; 221
    358a:	7f 4f       	sbci	r23, 0xFF	; 255
    358c:	ce 01       	movw	r24, r28
    358e:	01 96       	adiw	r24, 0x01	; 1
    3590:	0e 94 30 11 	call	0x2260	; 0x2260 <find_volume>
    3594:	81 11       	cpse	r24, r1
    3596:	03 c3       	rjmp	.+1542   	; 0x3b9e <f_open+0x662>
    3598:	ce 01       	movw	r24, r28
    359a:	47 96       	adiw	r24, 0x17	; 23
    359c:	9e 8b       	std	Y+22, r25	; 0x16
    359e:	8d 8b       	std	Y+21, r24	; 0x15
    35a0:	cb a0       	ldd	r12, Y+35	; 0x23
    35a2:	dc a0       	ldd	r13, Y+36	; 0x24
    35a4:	f6 01       	movw	r30, r12
    35a6:	80 81       	ld	r24, Z
    35a8:	8f 32       	cpi	r24, 0x2F	; 47
    35aa:	11 f0       	breq	.+4      	; 0x35b0 <f_open+0x74>
    35ac:	8c 35       	cpi	r24, 0x5C	; 92
    35ae:	19 f4       	brne	.+6      	; 0x35b6 <f_open+0x7a>
    35b0:	ff ef       	ldi	r31, 0xFF	; 255
    35b2:	cf 1a       	sub	r12, r31
    35b4:	df 0a       	sbc	r13, r31
    35b6:	2d a1       	ldd	r18, Y+37	; 0x25
    35b8:	2f 71       	andi	r18, 0x1F	; 31
    35ba:	29 a7       	std	Y+41, r18	; 0x29
    35bc:	1f 82       	std	Y+7, r1	; 0x07
    35be:	18 86       	std	Y+8, r1	; 0x08
    35c0:	19 86       	std	Y+9, r1	; 0x09
    35c2:	1a 86       	std	Y+10, r1	; 0x0a
    35c4:	d6 01       	movw	r26, r12
    35c6:	8c 91       	ld	r24, X
    35c8:	80 32       	cpi	r24, 0x20	; 32
    35ca:	68 f4       	brcc	.+26     	; 0x35e6 <f_open+0xaa>
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	ce 01       	movw	r24, r28
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	34 db       	rcall	.-2456   	; 0x2c3e <dir_sdi>
    35d6:	1c 8a       	std	Y+20, r1	; 0x14
    35d8:	1b 8a       	std	Y+19, r1	; 0x13
    35da:	e1 2c       	mov	r14, r1
    35dc:	f1 2c       	mov	r15, r1
    35de:	88 23       	and	r24, r24
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <f_open+0xa8>
    35e2:	91 c2       	rjmp	.+1314   	; 0x3b06 <f_open+0x5ca>
    35e4:	87 c2       	rjmp	.+1294   	; 0x3af4 <f_open+0x5b8>
    35e6:	68 94       	set
    35e8:	bb 24       	eor	r11, r11
    35ea:	b5 f8       	bld	r11, 5
    35ec:	a1 2c       	mov	r10, r1
    35ee:	71 2c       	mov	r7, r1
    35f0:	68 94       	set
    35f2:	66 24       	eor	r6, r6
    35f4:	63 f8       	bld	r6, 3
    35f6:	51 2c       	mov	r5, r1
    35f8:	41 2c       	mov	r4, r1
    35fa:	6a a6       	std	Y+42, r6	; 0x2a
    35fc:	5e a6       	std	Y+46, r5	; 0x2e
    35fe:	f6 01       	movw	r30, r12
    3600:	af 01       	movw	r20, r30
    3602:	81 91       	ld	r24, Z+
    3604:	8f 32       	cpi	r24, 0x2F	; 47
    3606:	e1 f3       	breq	.-8      	; 0x3600 <f_open+0xc4>
    3608:	8c 35       	cpi	r24, 0x5C	; 92
    360a:	d1 f3       	breq	.-12     	; 0x3600 <f_open+0xc4>
    360c:	0d 89       	ldd	r16, Y+21	; 0x15
    360e:	1e 89       	ldd	r17, Y+22	; 0x16
    3610:	f8 01       	movw	r30, r16
    3612:	c8 01       	movw	r24, r16
    3614:	0b 96       	adiw	r24, 0x0b	; 11
    3616:	b1 92       	st	Z+, r11
    3618:	e8 17       	cp	r30, r24
    361a:	f9 07       	cpc	r31, r25
    361c:	e1 f7       	brne	.-8      	; 0x3616 <f_open+0xda>
    361e:	6a 01       	movw	r12, r20
    3620:	ea 2c       	mov	r14, r10
    3622:	f7 2c       	mov	r15, r7
    3624:	8a 2d       	mov	r24, r10
    3626:	97 2d       	mov	r25, r7
    3628:	86 2c       	mov	r8, r6
    362a:	95 2c       	mov	r9, r5
    362c:	74 2d       	mov	r23, r4
    362e:	da 01       	movw	r26, r20
    3630:	01 96       	adiw	r24, 0x01	; 1
    3632:	6d 91       	ld	r22, X+
    3634:	61 32       	cpi	r22, 0x21	; 33
    3636:	08 f4       	brcc	.+2      	; 0x363a <f_open+0xfe>
    3638:	3c c2       	rjmp	.+1144   	; 0x3ab2 <f_open+0x576>
    363a:	6f 32       	cpi	r22, 0x2F	; 47
    363c:	09 f4       	brne	.+2      	; 0x3640 <f_open+0x104>
    363e:	3e c2       	rjmp	.+1148   	; 0x3abc <f_open+0x580>
    3640:	6c 35       	cpi	r22, 0x5C	; 92
    3642:	09 f4       	brne	.+2      	; 0x3646 <f_open+0x10a>
    3644:	3b c2       	rjmp	.+1142   	; 0x3abc <f_open+0x580>
    3646:	6e 32       	cpi	r22, 0x2E	; 46
    3648:	09 f4       	brne	.+2      	; 0x364c <f_open+0x110>
    364a:	1c c2       	rjmp	.+1080   	; 0x3a84 <f_open+0x548>
    364c:	e8 14       	cp	r14, r8
    364e:	f9 04       	cpc	r15, r9
    3650:	08 f0       	brcs	.+2      	; 0x3654 <f_open+0x118>
    3652:	79 c2       	rjmp	.+1266   	; 0x3b46 <f_open+0x60a>
    3654:	0a c0       	rjmp	.+20     	; 0x366a <f_open+0x12e>
    3656:	77 0f       	add	r23, r23
    3658:	77 0f       	add	r23, r23
    365a:	ea a4       	ldd	r14, Y+42	; 0x2a
    365c:	fe a4       	ldd	r15, Y+46	; 0x2e
    365e:	0f 2e       	mov	r0, r31
    3660:	fb e0       	ldi	r31, 0x0B	; 11
    3662:	8f 2e       	mov	r8, r31
    3664:	f0 2d       	mov	r31, r0
    3666:	91 2c       	mov	r9, r1
    3668:	e3 cf       	rjmp	.-58     	; 0x3630 <f_open+0xf4>
    366a:	66 23       	and	r22, r22
    366c:	0c f0       	brlt	.+2      	; 0x3670 <f_open+0x134>
    366e:	10 c2       	rjmp	.+1056   	; 0x3a90 <f_open+0x554>
    3670:	73 60       	ori	r23, 0x03	; 3
    3672:	e6 2f       	mov	r30, r22
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	ea 56       	subi	r30, 0x6A	; 106
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	60 81       	ld	r22, Z
    367c:	09 c2       	rjmp	.+1042   	; 0x3a90 <f_open+0x554>
    367e:	81 91       	ld	r24, Z+
    3680:	88 23       	and	r24, r24
    3682:	09 f4       	brne	.+2      	; 0x3686 <f_open+0x14a>
    3684:	0f c2       	rjmp	.+1054   	; 0x3aa4 <f_open+0x568>
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	48 17       	cp	r20, r24
    368a:	59 07       	cpc	r21, r25
    368c:	c1 f7       	brne	.-16     	; 0x367e <f_open+0x142>
    368e:	86 e0       	ldi	r24, 0x06	; 6
    3690:	77 c2       	rjmp	.+1262   	; 0x3b80 <f_open+0x644>
    3692:	72 60       	ori	r23, 0x02	; 2
    3694:	06 c0       	rjmp	.+12     	; 0x36a2 <f_open+0x166>
    3696:	2f e9       	ldi	r18, 0x9F	; 159
    3698:	26 0f       	add	r18, r22
    369a:	2a 31       	cpi	r18, 0x1A	; 26
    369c:	10 f4       	brcc	.+4      	; 0x36a2 <f_open+0x166>
    369e:	71 60       	ori	r23, 0x01	; 1
    36a0:	60 52       	subi	r22, 0x20	; 32
    36a2:	f8 01       	movw	r30, r16
    36a4:	ee 0d       	add	r30, r14
    36a6:	ff 1d       	adc	r31, r15
    36a8:	60 83       	st	Z, r22
    36aa:	f7 01       	movw	r30, r14
    36ac:	31 96       	adiw	r30, 0x01	; 1
    36ae:	7f 01       	movw	r14, r30
    36b0:	bf cf       	rjmp	.-130    	; 0x3630 <f_open+0xf4>
    36b2:	ef 28       	or	r14, r15
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <f_open+0x17c>
    36b6:	47 c2       	rjmp	.+1166   	; 0x3b46 <f_open+0x60a>
    36b8:	d8 01       	movw	r26, r16
    36ba:	2c 91       	ld	r18, X
    36bc:	25 3e       	cpi	r18, 0xE5	; 229
    36be:	11 f4       	brne	.+4      	; 0x36c4 <f_open+0x188>
    36c0:	e5 e0       	ldi	r30, 0x05	; 5
    36c2:	ec 93       	st	X, r30
    36c4:	f8 e0       	ldi	r31, 0x08	; 8
    36c6:	8f 16       	cp	r8, r31
    36c8:	91 04       	cpc	r9, r1
    36ca:	19 f4       	brne	.+6      	; 0x36d2 <f_open+0x196>
    36cc:	79 2f       	mov	r23, r25
    36ce:	77 0f       	add	r23, r23
    36d0:	77 0f       	add	r23, r23
    36d2:	97 2f       	mov	r25, r23
    36d4:	93 70       	andi	r25, 0x03	; 3
    36d6:	91 30       	cpi	r25, 0x01	; 1
    36d8:	09 f4       	brne	.+2      	; 0x36dc <f_open+0x1a0>
    36da:	80 61       	ori	r24, 0x10	; 16
    36dc:	97 2f       	mov	r25, r23
    36de:	9c 70       	andi	r25, 0x0C	; 12
    36e0:	94 30       	cpi	r25, 0x04	; 4
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <f_open+0x1aa>
    36e4:	88 60       	ori	r24, 0x08	; 8
    36e6:	d8 01       	movw	r26, r16
    36e8:	1b 96       	adiw	r26, 0x0b	; 11
    36ea:	8c 93       	st	X, r24
    36ec:	6a 2d       	mov	r22, r10
    36ee:	77 2d       	mov	r23, r7
    36f0:	ce 01       	movw	r24, r28
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	a4 da       	rcall	.-2744   	; 0x2c3e <dir_sdi>
    36f6:	81 11       	cpse	r24, r1
    36f8:	ec c1       	rjmp	.+984    	; 0x3ad2 <f_open+0x596>
    36fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    36fc:	58 89       	ldd	r21, Y+16	; 0x10
    36fe:	69 89       	ldd	r22, Y+17	; 0x11
    3700:	7a 89       	ldd	r23, Y+18	; 0x12
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	0e 94 67 10 	call	0x20ce	; 0x20ce <move_window>
    370a:	81 11       	cpse	r24, r1
    370c:	e2 c1       	rjmp	.+964    	; 0x3ad2 <f_open+0x596>
    370e:	6b 89       	ldd	r22, Y+19	; 0x13
    3710:	7c 89       	ldd	r23, Y+20	; 0x14
    3712:	fb 01       	movw	r30, r22
    3714:	80 81       	ld	r24, Z
    3716:	88 23       	and	r24, r24
    3718:	d1 f0       	breq	.+52     	; 0x374e <f_open+0x212>
    371a:	83 85       	ldd	r24, Z+11	; 0x0b
    371c:	83 fd       	sbrc	r24, 3
    371e:	0f c0       	rjmp	.+30     	; 0x373e <f_open+0x202>
    3720:	4d 89       	ldd	r20, Y+21	; 0x15
    3722:	5e 89       	ldd	r21, Y+22	; 0x16
    3724:	da 01       	movw	r26, r20
    3726:	9b 01       	movw	r18, r22
    3728:	25 5f       	subi	r18, 0xF5	; 245
    372a:	3f 4f       	sbci	r19, 0xFF	; 255
    372c:	04 c0       	rjmp	.+8      	; 0x3736 <f_open+0x1fa>
    372e:	e2 17       	cp	r30, r18
    3730:	f3 07       	cpc	r31, r19
    3732:	09 f4       	brne	.+2      	; 0x3736 <f_open+0x1fa>
    3734:	c8 c1       	rjmp	.+912    	; 0x3ac6 <f_open+0x58a>
    3736:	91 91       	ld	r25, Z+
    3738:	8d 91       	ld	r24, X+
    373a:	98 17       	cp	r25, r24
    373c:	c1 f3       	breq	.-16     	; 0x372e <f_open+0x1f2>
    373e:	6a 2d       	mov	r22, r10
    3740:	77 2d       	mov	r23, r7
    3742:	ce 01       	movw	r24, r28
    3744:	01 96       	adiw	r24, 0x01	; 1
    3746:	6c dd       	rcall	.-1320   	; 0x3220 <dir_next>
    3748:	88 23       	and	r24, r24
    374a:	b9 f2       	breq	.-82     	; 0x36fa <f_open+0x1be>
    374c:	c2 c1       	rjmp	.+900    	; 0x3ad2 <f_open+0x596>
    374e:	ed 89       	ldd	r30, Y+21	; 0x15
    3750:	fe 89       	ldd	r31, Y+22	; 0x16
    3752:	93 85       	ldd	r25, Z+11	; 0x0b
    3754:	92 fd       	sbrc	r25, 2
    3756:	0d c2       	rjmp	.+1050   	; 0x3b72 <f_open+0x636>
    3758:	85 e0       	ldi	r24, 0x05	; 5
    375a:	12 c2       	rjmp	.+1060   	; 0x3b80 <f_open+0x644>
    375c:	db 01       	movw	r26, r22
    375e:	1b 96       	adiw	r26, 0x0b	; 11
    3760:	8c 91       	ld	r24, X
    3762:	84 ff       	sbrs	r24, 4
    3764:	08 c2       	rjmp	.+1040   	; 0x3b76 <f_open+0x63a>
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	9a 81       	ldd	r25, Y+2	; 0x02
    376a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <ld_clust>
    376e:	6f 83       	std	Y+7, r22	; 0x07
    3770:	78 87       	std	Y+8, r23	; 0x08
    3772:	89 87       	std	Y+9, r24	; 0x09
    3774:	9a 87       	std	Y+10, r25	; 0x0a
    3776:	43 cf       	rjmp	.-378    	; 0x35fe <f_open+0xc2>
    3778:	81 11       	cpse	r24, r1
    377a:	ef c1       	rjmp	.+990    	; 0x3b5a <f_open+0x61e>
    377c:	44 c0       	rjmp	.+136    	; 0x3806 <f_open+0x2ca>
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	70 e0       	ldi	r23, 0x00	; 0
    3782:	ce 01       	movw	r24, r28
    3784:	01 96       	adiw	r24, 0x01	; 1
    3786:	5b da       	rcall	.-2890   	; 0x2c3e <dir_sdi>
    3788:	81 11       	cpse	r24, r1
    378a:	06 c2       	rjmp	.+1036   	; 0x3b98 <f_open+0x65c>
    378c:	4f 85       	ldd	r20, Y+15	; 0x0f
    378e:	58 89       	ldd	r21, Y+16	; 0x10
    3790:	69 89       	ldd	r22, Y+17	; 0x11
    3792:	7a 89       	ldd	r23, Y+18	; 0x12
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	9a 81       	ldd	r25, Y+2	; 0x02
    3798:	0e 94 67 10 	call	0x20ce	; 0x20ce <move_window>
    379c:	81 11       	cpse	r24, r1
    379e:	fc c1       	rjmp	.+1016   	; 0x3b98 <f_open+0x65c>
    37a0:	eb 89       	ldd	r30, Y+19	; 0x13
    37a2:	fc 89       	ldd	r31, Y+20	; 0x14
    37a4:	80 81       	ld	r24, Z
    37a6:	85 3e       	cpi	r24, 0xE5	; 229
    37a8:	51 f0       	breq	.+20     	; 0x37be <f_open+0x282>
    37aa:	88 23       	and	r24, r24
    37ac:	41 f0       	breq	.+16     	; 0x37be <f_open+0x282>
    37ae:	61 e0       	ldi	r22, 0x01	; 1
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	ce 01       	movw	r24, r28
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	34 dd       	rcall	.-1432   	; 0x3220 <dir_next>
    37b8:	88 23       	and	r24, r24
    37ba:	41 f3       	breq	.-48     	; 0x378c <f_open+0x250>
    37bc:	ed c1       	rjmp	.+986    	; 0x3b98 <f_open+0x65c>
    37be:	4f 85       	ldd	r20, Y+15	; 0x0f
    37c0:	58 89       	ldd	r21, Y+16	; 0x10
    37c2:	69 89       	ldd	r22, Y+17	; 0x11
    37c4:	7a 89       	ldd	r23, Y+18	; 0x12
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ca:	0e 94 67 10 	call	0x20ce	; 0x20ce <move_window>
    37ce:	81 11       	cpse	r24, r1
    37d0:	ca c1       	rjmp	.+916    	; 0x3b66 <f_open+0x62a>
    37d2:	eb 89       	ldd	r30, Y+19	; 0x13
    37d4:	fc 89       	ldd	r31, Y+20	; 0x14
    37d6:	cf 01       	movw	r24, r30
    37d8:	80 96       	adiw	r24, 0x20	; 32
    37da:	11 92       	st	Z+, r1
    37dc:	e8 17       	cp	r30, r24
    37de:	f9 07       	cpc	r31, r25
    37e0:	e1 f7       	brne	.-8      	; 0x37da <f_open+0x29e>
    37e2:	6d 89       	ldd	r22, Y+21	; 0x15
    37e4:	7e 89       	ldd	r23, Y+22	; 0x16
    37e6:	4b e0       	ldi	r20, 0x0B	; 11
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	8b 89       	ldd	r24, Y+19	; 0x13
    37ec:	9c 89       	ldd	r25, Y+20	; 0x14
    37ee:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <mem_cpy>
    37f2:	e9 81       	ldd	r30, Y+1	; 0x01
    37f4:	fa 81       	ldd	r31, Y+2	; 0x02
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	84 83       	std	Z+4, r24	; 0x04
    37fa:	b9 a5       	ldd	r27, Y+41	; 0x29
    37fc:	b8 60       	ori	r27, 0x08	; 8
    37fe:	b9 a7       	std	Y+41, r27	; 0x29
    3800:	eb 88       	ldd	r14, Y+19	; 0x13
    3802:	fc 88       	ldd	r15, Y+20	; 0x14
    3804:	08 c0       	rjmp	.+16     	; 0x3816 <f_open+0x2da>
    3806:	f7 01       	movw	r30, r14
    3808:	83 85       	ldd	r24, Z+11	; 0x0b
    380a:	81 71       	andi	r24, 0x11	; 17
    380c:	09 f0       	breq	.+2      	; 0x3810 <f_open+0x2d4>
    380e:	82 c1       	rjmp	.+772    	; 0x3b14 <f_open+0x5d8>
    3810:	fd a1       	ldd	r31, Y+37	; 0x25
    3812:	f2 fd       	sbrc	r31, 2
    3814:	81 c1       	rjmp	.+770    	; 0x3b18 <f_open+0x5dc>
    3816:	29 a5       	ldd	r18, Y+41	; 0x29
    3818:	23 ff       	sbrs	r18, 3
    381a:	db c0       	rjmp	.+438    	; 0x39d2 <f_open+0x496>
    381c:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <get_fattime>
    3820:	d7 01       	movw	r26, r14
    3822:	1e 96       	adiw	r26, 0x0e	; 14
    3824:	6c 93       	st	X, r22
    3826:	1e 97       	sbiw	r26, 0x0e	; 14
    3828:	47 2f       	mov	r20, r23
    382a:	55 27       	eor	r21, r21
    382c:	1f 96       	adiw	r26, 0x0f	; 15
    382e:	4c 93       	st	X, r20
    3830:	1f 97       	sbiw	r26, 0x0f	; 15
    3832:	4c 01       	movw	r8, r24
    3834:	aa 24       	eor	r10, r10
    3836:	bb 24       	eor	r11, r11
    3838:	50 96       	adiw	r26, 0x10	; 16
    383a:	8c 92       	st	X, r8
    383c:	50 97       	sbiw	r26, 0x10	; 16
    383e:	09 2f       	mov	r16, r25
    3840:	11 27       	eor	r17, r17
    3842:	22 27       	eor	r18, r18
    3844:	33 27       	eor	r19, r19
    3846:	51 96       	adiw	r26, 0x11	; 17
    3848:	0c 93       	st	X, r16
    384a:	51 97       	sbiw	r26, 0x11	; 17
    384c:	56 96       	adiw	r26, 0x16	; 22
    384e:	6c 93       	st	X, r22
    3850:	56 97       	sbiw	r26, 0x16	; 22
    3852:	57 96       	adiw	r26, 0x17	; 23
    3854:	4c 93       	st	X, r20
    3856:	57 97       	sbiw	r26, 0x17	; 23
    3858:	58 96       	adiw	r26, 0x18	; 24
    385a:	8c 92       	st	X, r8
    385c:	58 97       	sbiw	r26, 0x18	; 24
    385e:	59 96       	adiw	r26, 0x19	; 25
    3860:	0c 93       	st	X, r16
    3862:	59 97       	sbiw	r26, 0x19	; 25
    3864:	1b 96       	adiw	r26, 0x0b	; 11
    3866:	1c 92       	st	X, r1
    3868:	1b 97       	sbiw	r26, 0x0b	; 11
    386a:	5c 96       	adiw	r26, 0x1c	; 28
    386c:	1c 92       	st	X, r1
    386e:	5c 97       	sbiw	r26, 0x1c	; 28
    3870:	5d 96       	adiw	r26, 0x1d	; 29
    3872:	1c 92       	st	X, r1
    3874:	5d 97       	sbiw	r26, 0x1d	; 29
    3876:	5e 96       	adiw	r26, 0x1e	; 30
    3878:	1c 92       	st	X, r1
    387a:	5e 97       	sbiw	r26, 0x1e	; 30
    387c:	5f 96       	adiw	r26, 0x1f	; 31
    387e:	1c 92       	st	X, r1
    3880:	c9 80       	ldd	r12, Y+1	; 0x01
    3882:	da 80       	ldd	r13, Y+2	; 0x02
    3884:	b7 01       	movw	r22, r14
    3886:	c6 01       	movw	r24, r12
    3888:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <ld_clust>
    388c:	4b 01       	movw	r8, r22
    388e:	5c 01       	movw	r10, r24
    3890:	f7 01       	movw	r30, r14
    3892:	12 8e       	std	Z+26, r1	; 0x1a
    3894:	13 8e       	std	Z+27, r1	; 0x1b
    3896:	14 8a       	std	Z+20, r1	; 0x14
    3898:	15 8a       	std	Z+21, r1	; 0x15
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	d6 01       	movw	r26, r12
    389e:	14 96       	adiw	r26, 0x04	; 4
    38a0:	8c 93       	st	X, r24
    38a2:	14 97       	sbiw	r26, 0x04	; 4
    38a4:	81 14       	cp	r8, r1
    38a6:	91 04       	cpc	r9, r1
    38a8:	a1 04       	cpc	r10, r1
    38aa:	b1 04       	cpc	r11, r1
    38ac:	09 f4       	brne	.+2      	; 0x38b0 <f_open+0x374>
    38ae:	91 c0       	rjmp	.+290    	; 0x39d2 <f_open+0x496>
    38b0:	9a 96       	adiw	r26, 0x2a	; 42
    38b2:	2d 91       	ld	r18, X+
    38b4:	3d 91       	ld	r19, X+
    38b6:	4d 91       	ld	r20, X+
    38b8:	5c 91       	ld	r21, X
    38ba:	9d 97       	sbiw	r26, 0x2d	; 45
    38bc:	2a a7       	std	Y+42, r18	; 0x2a
    38be:	3b a7       	std	Y+43, r19	; 0x2b
    38c0:	4c a7       	std	Y+44, r20	; 0x2c
    38c2:	5d a7       	std	Y+45, r21	; 0x2d
    38c4:	b2 e0       	ldi	r27, 0x02	; 2
    38c6:	8b 16       	cp	r8, r27
    38c8:	91 04       	cpc	r9, r1
    38ca:	a1 04       	cpc	r10, r1
    38cc:	b1 04       	cpc	r11, r1
    38ce:	08 f4       	brcc	.+2      	; 0x38d2 <f_open+0x396>
    38d0:	28 c1       	rjmp	.+592    	; 0x3b22 <f_open+0x5e6>
    38d2:	f6 01       	movw	r30, r12
    38d4:	82 89       	ldd	r24, Z+18	; 0x12
    38d6:	93 89       	ldd	r25, Z+19	; 0x13
    38d8:	a4 89       	ldd	r26, Z+20	; 0x14
    38da:	b5 89       	ldd	r27, Z+21	; 0x15
    38dc:	88 16       	cp	r8, r24
    38de:	99 06       	cpc	r9, r25
    38e0:	aa 06       	cpc	r10, r26
    38e2:	bb 06       	cpc	r11, r27
    38e4:	08 f0       	brcs	.+2      	; 0x38e8 <f_open+0x3ac>
    38e6:	1f c1       	rjmp	.+574    	; 0x3b26 <f_open+0x5ea>
    38e8:	8d a2       	std	Y+37, r8	; 0x25
    38ea:	9e a2       	std	Y+38, r9	; 0x26
    38ec:	af a2       	std	Y+39, r10	; 0x27
    38ee:	b8 a6       	std	Y+40, r11	; 0x28
    38f0:	3f c0       	rjmp	.+126    	; 0x3970 <f_open+0x434>
    38f2:	4d a1       	ldd	r20, Y+37	; 0x25
    38f4:	5e a1       	ldd	r21, Y+38	; 0x26
    38f6:	6f a1       	ldd	r22, Y+39	; 0x27
    38f8:	78 a5       	ldd	r23, Y+40	; 0x28
    38fa:	c6 01       	movw	r24, r12
    38fc:	a1 d8       	rcall	.-3774   	; 0x2a40 <get_fat>
    38fe:	2b 01       	movw	r4, r22
    3900:	3c 01       	movw	r6, r24
    3902:	61 15       	cp	r22, r1
    3904:	71 05       	cpc	r23, r1
    3906:	81 05       	cpc	r24, r1
    3908:	91 05       	cpc	r25, r1
    390a:	09 f4       	brne	.+2      	; 0x390e <f_open+0x3d2>
    390c:	40 c0       	rjmp	.+128    	; 0x398e <f_open+0x452>
    390e:	61 30       	cpi	r22, 0x01	; 1
    3910:	71 05       	cpc	r23, r1
    3912:	81 05       	cpc	r24, r1
    3914:	91 05       	cpc	r25, r1
    3916:	09 f4       	brne	.+2      	; 0x391a <f_open+0x3de>
    3918:	08 c1       	rjmp	.+528    	; 0x3b2a <f_open+0x5ee>
    391a:	6f 3f       	cpi	r22, 0xFF	; 255
    391c:	7f 4f       	sbci	r23, 0xFF	; 255
    391e:	8f 4f       	sbci	r24, 0xFF	; 255
    3920:	9f 4f       	sbci	r25, 0xFF	; 255
    3922:	09 f4       	brne	.+2      	; 0x3926 <f_open+0x3ea>
    3924:	04 c1       	rjmp	.+520    	; 0x3b2e <f_open+0x5f2>
    3926:	00 e0       	ldi	r16, 0x00	; 0
    3928:	10 e0       	ldi	r17, 0x00	; 0
    392a:	98 01       	movw	r18, r16
    392c:	4d a1       	ldd	r20, Y+37	; 0x25
    392e:	5e a1       	ldd	r21, Y+38	; 0x26
    3930:	6f a1       	ldd	r22, Y+39	; 0x27
    3932:	78 a5       	ldd	r23, Y+40	; 0x28
    3934:	c6 01       	movw	r24, r12
    3936:	3e da       	rcall	.-2948   	; 0x2db4 <put_fat>
    3938:	81 11       	cpse	r24, r1
    393a:	fa c0       	rjmp	.+500    	; 0x3b30 <f_open+0x5f4>
    393c:	f6 01       	movw	r30, r12
    393e:	86 85       	ldd	r24, Z+14	; 0x0e
    3940:	97 85       	ldd	r25, Z+15	; 0x0f
    3942:	a0 89       	ldd	r26, Z+16	; 0x10
    3944:	b1 89       	ldd	r27, Z+17	; 0x11
    3946:	8f 3f       	cpi	r24, 0xFF	; 255
    3948:	ff ef       	ldi	r31, 0xFF	; 255
    394a:	9f 07       	cpc	r25, r31
    394c:	af 07       	cpc	r26, r31
    394e:	bf 07       	cpc	r27, r31
    3950:	59 f0       	breq	.+22     	; 0x3968 <f_open+0x42c>
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	a1 1d       	adc	r26, r1
    3956:	b1 1d       	adc	r27, r1
    3958:	f6 01       	movw	r30, r12
    395a:	86 87       	std	Z+14, r24	; 0x0e
    395c:	97 87       	std	Z+15, r25	; 0x0f
    395e:	a0 8b       	std	Z+16, r26	; 0x10
    3960:	b1 8b       	std	Z+17, r27	; 0x11
    3962:	85 81       	ldd	r24, Z+5	; 0x05
    3964:	81 60       	ori	r24, 0x01	; 1
    3966:	85 83       	std	Z+5, r24	; 0x05
    3968:	4d a2       	std	Y+37, r4	; 0x25
    396a:	5e a2       	std	Y+38, r5	; 0x26
    396c:	6f a2       	std	Y+39, r6	; 0x27
    396e:	78 a6       	std	Y+40, r7	; 0x28
    3970:	f6 01       	movw	r30, r12
    3972:	82 89       	ldd	r24, Z+18	; 0x12
    3974:	93 89       	ldd	r25, Z+19	; 0x13
    3976:	a4 89       	ldd	r26, Z+20	; 0x14
    3978:	b5 89       	ldd	r27, Z+21	; 0x15
    397a:	2d a1       	ldd	r18, Y+37	; 0x25
    397c:	3e a1       	ldd	r19, Y+38	; 0x26
    397e:	4f a1       	ldd	r20, Y+39	; 0x27
    3980:	58 a5       	ldd	r21, Y+40	; 0x28
    3982:	28 17       	cp	r18, r24
    3984:	39 07       	cpc	r19, r25
    3986:	4a 07       	cpc	r20, r26
    3988:	5b 07       	cpc	r21, r27
    398a:	08 f4       	brcc	.+2      	; 0x398e <f_open+0x452>
    398c:	b2 cf       	rjmp	.-156    	; 0x38f2 <f_open+0x3b6>
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	9a 81       	ldd	r25, Y+2	; 0x02
    3992:	31 e0       	ldi	r19, 0x01	; 1
    3994:	83 1a       	sub	r8, r19
    3996:	91 08       	sbc	r9, r1
    3998:	a1 08       	sbc	r10, r1
    399a:	b1 08       	sbc	r11, r1
    399c:	dc 01       	movw	r26, r24
    399e:	1a 96       	adiw	r26, 0x0a	; 10
    39a0:	8d 92       	st	X+, r8
    39a2:	9d 92       	st	X+, r9
    39a4:	ad 92       	st	X+, r10
    39a6:	bc 92       	st	X, r11
    39a8:	1d 97       	sbiw	r26, 0x0d	; 13
    39aa:	4a a5       	ldd	r20, Y+42	; 0x2a
    39ac:	5b a5       	ldd	r21, Y+43	; 0x2b
    39ae:	6c a5       	ldd	r22, Y+44	; 0x2c
    39b0:	7d a5       	ldd	r23, Y+45	; 0x2d
    39b2:	0e 94 67 10 	call	0x20ce	; 0x20ce <move_window>
    39b6:	88 23       	and	r24, r24
    39b8:	79 f0       	breq	.+30     	; 0x39d8 <f_open+0x49c>
    39ba:	f1 c0       	rjmp	.+482    	; 0x3b9e <f_open+0x662>
    39bc:	81 11       	cpse	r24, r1
    39be:	bf c0       	rjmp	.+382    	; 0x3b3e <f_open+0x602>
    39c0:	f7 01       	movw	r30, r14
    39c2:	83 85       	ldd	r24, Z+11	; 0x0b
    39c4:	84 fd       	sbrc	r24, 4
    39c6:	b8 c0       	rjmp	.+368    	; 0x3b38 <f_open+0x5fc>
    39c8:	fd a1       	ldd	r31, Y+37	; 0x25
    39ca:	f1 ff       	sbrs	r31, 1
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <f_open+0x496>
    39ce:	80 fd       	sbrc	r24, 0
    39d0:	b5 c0       	rjmp	.+362    	; 0x3b3c <f_open+0x600>
    39d2:	29 a5       	ldd	r18, Y+41	; 0x29
    39d4:	23 ff       	sbrs	r18, 3
    39d6:	03 c0       	rjmp	.+6      	; 0x39de <f_open+0x4a2>
    39d8:	39 a5       	ldd	r19, Y+41	; 0x29
    39da:	30 62       	ori	r19, 0x20	; 32
    39dc:	39 a7       	std	Y+41, r19	; 0x29
    39de:	e9 81       	ldd	r30, Y+1	; 0x01
    39e0:	fa 81       	ldd	r31, Y+2	; 0x02
    39e2:	82 a5       	ldd	r24, Z+42	; 0x2a
    39e4:	93 a5       	ldd	r25, Z+43	; 0x2b
    39e6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    39e8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    39ea:	f1 01       	movw	r30, r2
    39ec:	82 8f       	std	Z+26, r24	; 0x1a
    39ee:	93 8f       	std	Z+27, r25	; 0x1b
    39f0:	a4 8f       	std	Z+28, r26	; 0x1c
    39f2:	b5 8f       	std	Z+29, r27	; 0x1d
    39f4:	f7 8e       	std	Z+31, r15	; 0x1f
    39f6:	e6 8e       	std	Z+30, r14	; 0x1e
    39f8:	e9 a5       	ldd	r30, Y+41	; 0x29
    39fa:	d1 01       	movw	r26, r2
    39fc:	14 96       	adiw	r26, 0x04	; 4
    39fe:	ec 93       	st	X, r30
    3a00:	14 97       	sbiw	r26, 0x04	; 4
    3a02:	15 96       	adiw	r26, 0x05	; 5
    3a04:	1c 92       	st	X, r1
    3a06:	09 81       	ldd	r16, Y+1	; 0x01
    3a08:	1a 81       	ldd	r17, Y+2	; 0x02
    3a0a:	b7 01       	movw	r22, r14
    3a0c:	c8 01       	movw	r24, r16
    3a0e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <ld_clust>
    3a12:	d1 01       	movw	r26, r2
    3a14:	1e 96       	adiw	r26, 0x0e	; 14
    3a16:	6d 93       	st	X+, r22
    3a18:	7d 93       	st	X+, r23
    3a1a:	8d 93       	st	X+, r24
    3a1c:	9c 93       	st	X, r25
    3a1e:	51 97       	sbiw	r26, 0x11	; 17
    3a20:	f7 01       	movw	r30, r14
    3a22:	27 8d       	ldd	r18, Z+31	; 0x1f
    3a24:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	a0 e0       	ldi	r26, 0x00	; 0
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	99 27       	eor	r25, r25
    3a30:	88 27       	eor	r24, r24
    3a32:	b2 2b       	or	r27, r18
    3a34:	24 8d       	ldd	r18, Z+28	; 0x1c
    3a36:	ac 01       	movw	r20, r24
    3a38:	bd 01       	movw	r22, r26
    3a3a:	42 2b       	or	r20, r18
    3a3c:	25 8d       	ldd	r18, Z+29	; 0x1d
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	92 2f       	mov	r25, r18
    3a42:	88 27       	eor	r24, r24
    3a44:	a0 e0       	ldi	r26, 0x00	; 0
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	84 2b       	or	r24, r20
    3a4a:	95 2b       	or	r25, r21
    3a4c:	a6 2b       	or	r26, r22
    3a4e:	b7 2b       	or	r27, r23
    3a50:	f1 01       	movw	r30, r2
    3a52:	82 87       	std	Z+10, r24	; 0x0a
    3a54:	93 87       	std	Z+11, r25	; 0x0b
    3a56:	a4 87       	std	Z+12, r26	; 0x0c
    3a58:	b5 87       	std	Z+13, r27	; 0x0d
    3a5a:	16 82       	std	Z+6, r1	; 0x06
    3a5c:	17 82       	std	Z+7, r1	; 0x07
    3a5e:	10 86       	std	Z+8, r1	; 0x08
    3a60:	11 86       	std	Z+9, r1	; 0x09
    3a62:	16 8a       	std	Z+22, r1	; 0x16
    3a64:	17 8a       	std	Z+23, r1	; 0x17
    3a66:	10 8e       	std	Z+24, r1	; 0x18
    3a68:	11 8e       	std	Z+25, r1	; 0x19
    3a6a:	11 83       	std	Z+1, r17	; 0x01
    3a6c:	00 83       	st	Z, r16
    3a6e:	d8 01       	movw	r26, r16
    3a70:	16 96       	adiw	r26, 0x06	; 6
    3a72:	8d 91       	ld	r24, X+
    3a74:	9c 91       	ld	r25, X
    3a76:	17 97       	sbiw	r26, 0x07	; 7
    3a78:	93 83       	std	Z+3, r25	; 0x03
    3a7a:	82 83       	std	Z+2, r24	; 0x02
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	8f c0       	rjmp	.+286    	; 0x3b9e <f_open+0x662>
    3a80:	89 e0       	ldi	r24, 0x09	; 9
    3a82:	8d c0       	rjmp	.+282    	; 0x3b9e <f_open+0x662>
    3a84:	e8 e0       	ldi	r30, 0x08	; 8
    3a86:	8e 16       	cp	r8, r30
    3a88:	91 04       	cpc	r9, r1
    3a8a:	09 f4       	brne	.+2      	; 0x3a8e <f_open+0x552>
    3a8c:	e4 cd       	rjmp	.-1080   	; 0x3656 <f_open+0x11a>
    3a8e:	75 c0       	rjmp	.+234    	; 0x3b7a <f_open+0x63e>
    3a90:	46 2f       	mov	r20, r22
    3a92:	50 e0       	ldi	r21, 0x00	; 0
    3a94:	42 32       	cpi	r20, 0x22	; 34
    3a96:	51 05       	cpc	r21, r1
    3a98:	09 f4       	brne	.+2      	; 0x3a9c <f_open+0x560>
    3a9a:	71 c0       	rjmp	.+226    	; 0x3b7e <f_open+0x642>
    3a9c:	e8 e0       	ldi	r30, 0x08	; 8
    3a9e:	f1 e0       	ldi	r31, 0x01	; 1
    3aa0:	9c 01       	movw	r18, r24
    3aa2:	ed cd       	rjmp	.-1062   	; 0x367e <f_open+0x142>
    3aa4:	c9 01       	movw	r24, r18
    3aa6:	2f eb       	ldi	r18, 0xBF	; 191
    3aa8:	26 0f       	add	r18, r22
    3aaa:	2a 31       	cpi	r18, 0x1A	; 26
    3aac:	08 f4       	brcc	.+2      	; 0x3ab0 <f_open+0x574>
    3aae:	f1 cd       	rjmp	.-1054   	; 0x3692 <f_open+0x156>
    3ab0:	f2 cd       	rjmp	.-1052   	; 0x3696 <f_open+0x15a>
    3ab2:	c8 0e       	add	r12, r24
    3ab4:	d9 1e       	adc	r13, r25
    3ab6:	97 2f       	mov	r25, r23
    3ab8:	84 e0       	ldi	r24, 0x04	; 4
    3aba:	fb cd       	rjmp	.-1034   	; 0x36b2 <f_open+0x176>
    3abc:	c8 0e       	add	r12, r24
    3abe:	d9 1e       	adc	r13, r25
    3ac0:	97 2f       	mov	r25, r23
    3ac2:	84 2d       	mov	r24, r4
    3ac4:	f6 cd       	rjmp	.-1044   	; 0x36b2 <f_open+0x176>
    3ac6:	da 01       	movw	r26, r20
    3ac8:	1b 96       	adiw	r26, 0x0b	; 11
    3aca:	8c 91       	ld	r24, X
    3acc:	82 ff       	sbrs	r24, 2
    3ace:	46 ce       	rjmp	.-884    	; 0x375c <f_open+0x220>
    3ad0:	0d c0       	rjmp	.+26     	; 0x3aec <f_open+0x5b0>
    3ad2:	ed 89       	ldd	r30, Y+21	; 0x15
    3ad4:	fe 89       	ldd	r31, Y+22	; 0x16
    3ad6:	93 85       	ldd	r25, Z+11	; 0x0b
    3ad8:	84 30       	cpi	r24, 0x04	; 4
    3ada:	09 f4       	brne	.+2      	; 0x3ade <f_open+0x5a2>
    3adc:	3b ce       	rjmp	.-906    	; 0x3754 <f_open+0x218>
    3ade:	eb 88       	ldd	r14, Y+19	; 0x13
    3ae0:	fc 88       	ldd	r15, Y+20	; 0x14
    3ae2:	9d a1       	ldd	r25, Y+37	; 0x25
    3ae4:	9c 71       	andi	r25, 0x1C	; 28
    3ae6:	09 f0       	breq	.+2      	; 0x3aea <f_open+0x5ae>
    3ae8:	47 ce       	rjmp	.-882    	; 0x3778 <f_open+0x23c>
    3aea:	68 cf       	rjmp	.-304    	; 0x39bc <f_open+0x480>
    3aec:	7b 01       	movw	r14, r22
    3aee:	67 2b       	or	r22, r23
    3af0:	29 f4       	brne	.+10     	; 0x3afc <f_open+0x5c0>
    3af2:	09 c0       	rjmp	.+18     	; 0x3b06 <f_open+0x5ca>
    3af4:	0d a1       	ldd	r16, Y+37	; 0x25
    3af6:	0c 71       	andi	r16, 0x1C	; 28
    3af8:	81 f5       	brne	.+96     	; 0x3b5a <f_open+0x61e>
    3afa:	21 c0       	rjmp	.+66     	; 0x3b3e <f_open+0x602>
    3afc:	8d a1       	ldd	r24, Y+37	; 0x25
    3afe:	8c 71       	andi	r24, 0x1C	; 28
    3b00:	09 f0       	breq	.+2      	; 0x3b04 <f_open+0x5c8>
    3b02:	81 ce       	rjmp	.-766    	; 0x3806 <f_open+0x2ca>
    3b04:	5d cf       	rjmp	.-326    	; 0x39c0 <f_open+0x484>
    3b06:	0d a1       	ldd	r16, Y+37	; 0x25
    3b08:	0c 71       	andi	r16, 0x1C	; 28
    3b0a:	51 f5       	brne	.+84     	; 0x3b60 <f_open+0x624>
    3b0c:	e1 2c       	mov	r14, r1
    3b0e:	f1 2c       	mov	r15, r1
    3b10:	86 e0       	ldi	r24, 0x06	; 6
    3b12:	15 c0       	rjmp	.+42     	; 0x3b3e <f_open+0x602>
    3b14:	87 e0       	ldi	r24, 0x07	; 7
    3b16:	01 c0       	rjmp	.+2      	; 0x3b1a <f_open+0x5de>
    3b18:	88 e0       	ldi	r24, 0x08	; 8
    3b1a:	88 23       	and	r24, r24
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <f_open+0x5e4>
    3b1e:	59 cf       	rjmp	.-334    	; 0x39d2 <f_open+0x496>
    3b20:	3e c0       	rjmp	.+124    	; 0x3b9e <f_open+0x662>
    3b22:	82 e0       	ldi	r24, 0x02	; 2
    3b24:	05 c0       	rjmp	.+10     	; 0x3b30 <f_open+0x5f4>
    3b26:	82 e0       	ldi	r24, 0x02	; 2
    3b28:	03 c0       	rjmp	.+6      	; 0x3b30 <f_open+0x5f4>
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	01 c0       	rjmp	.+2      	; 0x3b30 <f_open+0x5f4>
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	88 23       	and	r24, r24
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <f_open+0x5fa>
    3b34:	51 cf       	rjmp	.-350    	; 0x39d8 <f_open+0x49c>
    3b36:	33 c0       	rjmp	.+102    	; 0x3b9e <f_open+0x662>
    3b38:	84 e0       	ldi	r24, 0x04	; 4
    3b3a:	01 c0       	rjmp	.+2      	; 0x3b3e <f_open+0x602>
    3b3c:	87 e0       	ldi	r24, 0x07	; 7
    3b3e:	88 23       	and	r24, r24
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <f_open+0x608>
    3b42:	5a cf       	rjmp	.-332    	; 0x39f8 <f_open+0x4bc>
    3b44:	2c c0       	rjmp	.+88     	; 0x3b9e <f_open+0x662>
    3b46:	eb 88       	ldd	r14, Y+19	; 0x13
    3b48:	fc 88       	ldd	r15, Y+20	; 0x14
    3b4a:	86 e0       	ldi	r24, 0x06	; 6
    3b4c:	d3 cf       	rjmp	.-90     	; 0x3af4 <f_open+0x5b8>
    3b4e:	b9 a5       	ldd	r27, Y+41	; 0x29
    3b50:	b8 60       	ori	r27, 0x08	; 8
    3b52:	b9 a7       	std	Y+41, r27	; 0x29
    3b54:	eb 88       	ldd	r14, Y+19	; 0x13
    3b56:	fc 88       	ldd	r15, Y+20	; 0x14
    3b58:	f2 cf       	rjmp	.-28     	; 0x3b3e <f_open+0x602>
    3b5a:	84 30       	cpi	r24, 0x04	; 4
    3b5c:	c1 f7       	brne	.-16     	; 0x3b4e <f_open+0x612>
    3b5e:	0f ce       	rjmp	.-994    	; 0x377e <f_open+0x242>
    3b60:	86 e0       	ldi	r24, 0x06	; 6
    3b62:	01 c0       	rjmp	.+2      	; 0x3b66 <f_open+0x62a>
    3b64:	87 e0       	ldi	r24, 0x07	; 7
    3b66:	e9 a5       	ldd	r30, Y+41	; 0x29
    3b68:	e8 60       	ori	r30, 0x08	; 8
    3b6a:	e9 a7       	std	Y+41, r30	; 0x29
    3b6c:	eb 88       	ldd	r14, Y+19	; 0x13
    3b6e:	fc 88       	ldd	r15, Y+20	; 0x14
    3b70:	e6 cf       	rjmp	.-52     	; 0x3b3e <f_open+0x602>
    3b72:	84 e0       	ldi	r24, 0x04	; 4
    3b74:	05 c0       	rjmp	.+10     	; 0x3b80 <f_open+0x644>
    3b76:	85 e0       	ldi	r24, 0x05	; 5
    3b78:	03 c0       	rjmp	.+6      	; 0x3b80 <f_open+0x644>
    3b7a:	86 e0       	ldi	r24, 0x06	; 6
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <f_open+0x644>
    3b7e:	86 e0       	ldi	r24, 0x06	; 6
    3b80:	eb 88       	ldd	r14, Y+19	; 0x13
    3b82:	fc 88       	ldd	r15, Y+20	; 0x14
    3b84:	9d a1       	ldd	r25, Y+37	; 0x25
    3b86:	9c 71       	andi	r25, 0x1C	; 28
    3b88:	41 f7       	brne	.-48     	; 0x3b5a <f_open+0x61e>
    3b8a:	18 cf       	rjmp	.-464    	; 0x39bc <f_open+0x480>
    3b8c:	f9 a5       	ldd	r31, Y+41	; 0x29
    3b8e:	f8 60       	ori	r31, 0x08	; 8
    3b90:	f9 a7       	std	Y+41, r31	; 0x29
    3b92:	eb 88       	ldd	r14, Y+19	; 0x13
    3b94:	fc 88       	ldd	r15, Y+20	; 0x14
    3b96:	d3 cf       	rjmp	.-90     	; 0x3b3e <f_open+0x602>
    3b98:	84 30       	cpi	r24, 0x04	; 4
    3b9a:	21 f3       	breq	.-56     	; 0x3b64 <f_open+0x628>
    3b9c:	f7 cf       	rjmp	.-18     	; 0x3b8c <f_open+0x650>
    3b9e:	ae 96       	adiw	r28, 0x2e	; 46
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	df 91       	pop	r29
    3bac:	cf 91       	pop	r28
    3bae:	1f 91       	pop	r17
    3bb0:	0f 91       	pop	r16
    3bb2:	ff 90       	pop	r15
    3bb4:	ef 90       	pop	r14
    3bb6:	df 90       	pop	r13
    3bb8:	cf 90       	pop	r12
    3bba:	bf 90       	pop	r11
    3bbc:	af 90       	pop	r10
    3bbe:	9f 90       	pop	r9
    3bc0:	8f 90       	pop	r8
    3bc2:	7f 90       	pop	r7
    3bc4:	6f 90       	pop	r6
    3bc6:	5f 90       	pop	r5
    3bc8:	4f 90       	pop	r4
    3bca:	3f 90       	pop	r3
    3bcc:	2f 90       	pop	r2
    3bce:	08 95       	ret

00003bd0 <f_write>:
    3bd0:	3f 92       	push	r3
    3bd2:	4f 92       	push	r4
    3bd4:	5f 92       	push	r5
    3bd6:	6f 92       	push	r6
    3bd8:	7f 92       	push	r7
    3bda:	8f 92       	push	r8
    3bdc:	9f 92       	push	r9
    3bde:	af 92       	push	r10
    3be0:	bf 92       	push	r11
    3be2:	cf 92       	push	r12
    3be4:	df 92       	push	r13
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <f_write+0x24>
    3bf4:	00 d0       	rcall	.+0      	; 0x3bf6 <f_write+0x26>
    3bf6:	00 d0       	rcall	.+0      	; 0x3bf8 <f_write+0x28>
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	9e 83       	std	Y+6, r25	; 0x06
    3bfe:	8d 83       	std	Y+5, r24	; 0x05
    3c00:	4b 01       	movw	r8, r22
    3c02:	6a 01       	movw	r12, r20
    3c04:	59 01       	movw	r10, r18
    3c06:	d9 01       	movw	r26, r18
    3c08:	1d 92       	st	X+, r1
    3c0a:	1c 92       	st	X, r1
    3c0c:	0e 94 0b 11 	call	0x2216	; 0x2216 <validate>
    3c10:	81 11       	cpse	r24, r1
    3c12:	c0 c1       	rjmp	.+896    	; 0x3f94 <f_write+0x3c4>
    3c14:	ed 81       	ldd	r30, Y+5	; 0x05
    3c16:	fe 81       	ldd	r31, Y+6	; 0x06
    3c18:	85 81       	ldd	r24, Z+5	; 0x05
    3c1a:	81 11       	cpse	r24, r1
    3c1c:	bb c1       	rjmp	.+886    	; 0x3f94 <f_write+0x3c4>
    3c1e:	84 81       	ldd	r24, Z+4	; 0x04
    3c20:	81 ff       	sbrs	r24, 1
    3c22:	b7 c1       	rjmp	.+878    	; 0x3f92 <f_write+0x3c2>
    3c24:	86 81       	ldd	r24, Z+6	; 0x06
    3c26:	97 81       	ldd	r25, Z+7	; 0x07
    3c28:	a0 85       	ldd	r26, Z+8	; 0x08
    3c2a:	b1 85       	ldd	r27, Z+9	; 0x09
    3c2c:	ac 01       	movw	r20, r24
    3c2e:	bd 01       	movw	r22, r26
    3c30:	4c 0d       	add	r20, r12
    3c32:	5d 1d       	adc	r21, r13
    3c34:	61 1d       	adc	r22, r1
    3c36:	71 1d       	adc	r23, r1
    3c38:	48 17       	cp	r20, r24
    3c3a:	59 07       	cpc	r21, r25
    3c3c:	6a 07       	cpc	r22, r26
    3c3e:	7b 07       	cpc	r23, r27
    3c40:	08 f4       	brcc	.+2      	; 0x3c44 <f_write+0x74>
    3c42:	8a c1       	rjmp	.+788    	; 0x3f58 <f_write+0x388>
    3c44:	c1 14       	cp	r12, r1
    3c46:	d1 04       	cpc	r13, r1
    3c48:	09 f4       	brne	.+2      	; 0x3c4c <f_write+0x7c>
    3c4a:	86 c1       	rjmp	.+780    	; 0x3f58 <f_write+0x388>
    3c4c:	b0 96       	adiw	r30, 0x20	; 32
    3c4e:	fc 83       	std	Y+4, r31	; 0x04
    3c50:	eb 83       	std	Y+3, r30	; 0x03
    3c52:	ed 81       	ldd	r30, Y+5	; 0x05
    3c54:	fe 81       	ldd	r31, Y+6	; 0x06
    3c56:	86 81       	ldd	r24, Z+6	; 0x06
    3c58:	97 81       	ldd	r25, Z+7	; 0x07
    3c5a:	a0 85       	ldd	r26, Z+8	; 0x08
    3c5c:	b1 85       	ldd	r27, Z+9	; 0x09
    3c5e:	ac 01       	movw	r20, r24
    3c60:	bd 01       	movw	r22, r26
    3c62:	51 70       	andi	r21, 0x01	; 1
    3c64:	66 27       	eor	r22, r22
    3c66:	77 27       	eor	r23, r23
    3c68:	45 2b       	or	r20, r21
    3c6a:	46 2b       	or	r20, r22
    3c6c:	47 2b       	or	r20, r23
    3c6e:	09 f0       	breq	.+2      	; 0x3c72 <f_write+0xa2>
    3c70:	32 c1       	rjmp	.+612    	; 0x3ed6 <f_write+0x306>
    3c72:	e0 80       	ld	r14, Z
    3c74:	f1 80       	ldd	r15, Z+1	; 0x01
    3c76:	f7 01       	movw	r30, r14
    3c78:	22 81       	ldd	r18, Z+2	; 0x02
    3c7a:	21 50       	subi	r18, 0x01	; 1
    3c7c:	ac 01       	movw	r20, r24
    3c7e:	bd 01       	movw	r22, r26
    3c80:	03 2e       	mov	r0, r19
    3c82:	39 e0       	ldi	r19, 0x09	; 9
    3c84:	76 95       	lsr	r23
    3c86:	67 95       	ror	r22
    3c88:	57 95       	ror	r21
    3c8a:	47 95       	ror	r20
    3c8c:	3a 95       	dec	r19
    3c8e:	d1 f7       	brne	.-12     	; 0x3c84 <f_write+0xb4>
    3c90:	30 2d       	mov	r19, r0
    3c92:	32 2e       	mov	r3, r18
    3c94:	34 22       	and	r3, r20
    3c96:	09 f0       	breq	.+2      	; 0x3c9a <f_write+0xca>
    3c98:	52 c0       	rjmp	.+164    	; 0x3d3e <f_write+0x16e>
    3c9a:	89 2b       	or	r24, r25
    3c9c:	8a 2b       	or	r24, r26
    3c9e:	8b 2b       	or	r24, r27
    3ca0:	99 f4       	brne	.+38     	; 0x3cc8 <f_write+0xf8>
    3ca2:	ad 81       	ldd	r26, Y+5	; 0x05
    3ca4:	be 81       	ldd	r27, Y+6	; 0x06
    3ca6:	1e 96       	adiw	r26, 0x0e	; 14
    3ca8:	6d 91       	ld	r22, X+
    3caa:	7d 91       	ld	r23, X+
    3cac:	8d 91       	ld	r24, X+
    3cae:	9c 91       	ld	r25, X
    3cb0:	51 97       	sbiw	r26, 0x11	; 17
    3cb2:	61 15       	cp	r22, r1
    3cb4:	71 05       	cpc	r23, r1
    3cb6:	81 05       	cpc	r24, r1
    3cb8:	91 05       	cpc	r25, r1
    3cba:	a1 f4       	brne	.+40     	; 0x3ce4 <f_write+0x114>
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	ba 01       	movw	r22, r20
    3cc2:	c7 01       	movw	r24, r14
    3cc4:	9e d9       	rcall	.-3268   	; 0x3002 <create_chain>
    3cc6:	08 c0       	rjmp	.+16     	; 0x3cd8 <f_write+0x108>
    3cc8:	ed 81       	ldd	r30, Y+5	; 0x05
    3cca:	fe 81       	ldd	r31, Y+6	; 0x06
    3ccc:	42 89       	ldd	r20, Z+18	; 0x12
    3cce:	53 89       	ldd	r21, Z+19	; 0x13
    3cd0:	64 89       	ldd	r22, Z+20	; 0x14
    3cd2:	75 89       	ldd	r23, Z+21	; 0x15
    3cd4:	c7 01       	movw	r24, r14
    3cd6:	95 d9       	rcall	.-3286   	; 0x3002 <create_chain>
    3cd8:	61 15       	cp	r22, r1
    3cda:	71 05       	cpc	r23, r1
    3cdc:	81 05       	cpc	r24, r1
    3cde:	91 05       	cpc	r25, r1
    3ce0:	09 f4       	brne	.+2      	; 0x3ce4 <f_write+0x114>
    3ce2:	3a c1       	rjmp	.+628    	; 0x3f58 <f_write+0x388>
    3ce4:	61 30       	cpi	r22, 0x01	; 1
    3ce6:	71 05       	cpc	r23, r1
    3ce8:	81 05       	cpc	r24, r1
    3cea:	91 05       	cpc	r25, r1
    3cec:	31 f4       	brne	.+12     	; 0x3cfa <f_write+0x12a>
    3cee:	82 e0       	ldi	r24, 0x02	; 2
    3cf0:	ad 81       	ldd	r26, Y+5	; 0x05
    3cf2:	be 81       	ldd	r27, Y+6	; 0x06
    3cf4:	15 96       	adiw	r26, 0x05	; 5
    3cf6:	8c 93       	st	X, r24
    3cf8:	4d c1       	rjmp	.+666    	; 0x3f94 <f_write+0x3c4>
    3cfa:	6f 3f       	cpi	r22, 0xFF	; 255
    3cfc:	bf ef       	ldi	r27, 0xFF	; 255
    3cfe:	7b 07       	cpc	r23, r27
    3d00:	8b 07       	cpc	r24, r27
    3d02:	9b 07       	cpc	r25, r27
    3d04:	29 f4       	brne	.+10     	; 0x3d10 <f_write+0x140>
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	ed 81       	ldd	r30, Y+5	; 0x05
    3d0a:	fe 81       	ldd	r31, Y+6	; 0x06
    3d0c:	85 83       	std	Z+5, r24	; 0x05
    3d0e:	42 c1       	rjmp	.+644    	; 0x3f94 <f_write+0x3c4>
    3d10:	ad 81       	ldd	r26, Y+5	; 0x05
    3d12:	be 81       	ldd	r27, Y+6	; 0x06
    3d14:	52 96       	adiw	r26, 0x12	; 18
    3d16:	6d 93       	st	X+, r22
    3d18:	7d 93       	st	X+, r23
    3d1a:	8d 93       	st	X+, r24
    3d1c:	9c 93       	st	X, r25
    3d1e:	55 97       	sbiw	r26, 0x15	; 21
    3d20:	1e 96       	adiw	r26, 0x0e	; 14
    3d22:	4d 90       	ld	r4, X+
    3d24:	5d 90       	ld	r5, X+
    3d26:	6d 90       	ld	r6, X+
    3d28:	7c 90       	ld	r7, X
    3d2a:	51 97       	sbiw	r26, 0x11	; 17
    3d2c:	45 28       	or	r4, r5
    3d2e:	46 28       	or	r4, r6
    3d30:	47 28       	or	r4, r7
    3d32:	29 f4       	brne	.+10     	; 0x3d3e <f_write+0x16e>
    3d34:	fd 01       	movw	r30, r26
    3d36:	66 87       	std	Z+14, r22	; 0x0e
    3d38:	77 87       	std	Z+15, r23	; 0x0f
    3d3a:	80 8b       	std	Z+16, r24	; 0x10
    3d3c:	91 8b       	std	Z+17, r25	; 0x11
    3d3e:	ad 81       	ldd	r26, Y+5	; 0x05
    3d40:	be 81       	ldd	r27, Y+6	; 0x06
    3d42:	14 96       	adiw	r26, 0x04	; 4
    3d44:	8c 91       	ld	r24, X
    3d46:	14 97       	sbiw	r26, 0x04	; 4
    3d48:	86 ff       	sbrs	r24, 6
    3d4a:	1e c0       	rjmp	.+60     	; 0x3d88 <f_write+0x1b8>
    3d4c:	56 96       	adiw	r26, 0x16	; 22
    3d4e:	2d 91       	ld	r18, X+
    3d50:	3d 91       	ld	r19, X+
    3d52:	4d 91       	ld	r20, X+
    3d54:	5c 91       	ld	r21, X
    3d56:	59 97       	sbiw	r26, 0x19	; 25
    3d58:	ed 91       	ld	r30, X+
    3d5a:	fc 91       	ld	r31, X
    3d5c:	01 e0       	ldi	r16, 0x01	; 1
    3d5e:	10 e0       	ldi	r17, 0x00	; 0
    3d60:	6b 81       	ldd	r22, Y+3	; 0x03
    3d62:	7c 81       	ldd	r23, Y+4	; 0x04
    3d64:	81 81       	ldd	r24, Z+1	; 0x01
    3d66:	0e 94 16 09 	call	0x122c	; 0x122c <disk_write>
    3d6a:	88 23       	and	r24, r24
    3d6c:	29 f0       	breq	.+10     	; 0x3d78 <f_write+0x1a8>
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	ed 81       	ldd	r30, Y+5	; 0x05
    3d72:	fe 81       	ldd	r31, Y+6	; 0x06
    3d74:	85 83       	std	Z+5, r24	; 0x05
    3d76:	0e c1       	rjmp	.+540    	; 0x3f94 <f_write+0x3c4>
    3d78:	ad 81       	ldd	r26, Y+5	; 0x05
    3d7a:	be 81       	ldd	r27, Y+6	; 0x06
    3d7c:	14 96       	adiw	r26, 0x04	; 4
    3d7e:	8c 91       	ld	r24, X
    3d80:	14 97       	sbiw	r26, 0x04	; 4
    3d82:	8f 7b       	andi	r24, 0xBF	; 191
    3d84:	14 96       	adiw	r26, 0x04	; 4
    3d86:	8c 93       	st	X, r24
    3d88:	ed 81       	ldd	r30, Y+5	; 0x05
    3d8a:	fe 81       	ldd	r31, Y+6	; 0x06
    3d8c:	01 90       	ld	r0, Z+
    3d8e:	f0 81       	ld	r31, Z
    3d90:	e0 2d       	mov	r30, r0
    3d92:	fa 83       	std	Y+2, r31	; 0x02
    3d94:	e9 83       	std	Y+1, r30	; 0x01
    3d96:	ad 81       	ldd	r26, Y+5	; 0x05
    3d98:	be 81       	ldd	r27, Y+6	; 0x06
    3d9a:	52 96       	adiw	r26, 0x12	; 18
    3d9c:	4d 91       	ld	r20, X+
    3d9e:	5d 91       	ld	r21, X+
    3da0:	6d 91       	ld	r22, X+
    3da2:	7c 91       	ld	r23, X
    3da4:	55 97       	sbiw	r26, 0x15	; 21
    3da6:	cf 01       	movw	r24, r30
    3da8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <clust2sect>
    3dac:	61 15       	cp	r22, r1
    3dae:	71 05       	cpc	r23, r1
    3db0:	81 05       	cpc	r24, r1
    3db2:	91 05       	cpc	r25, r1
    3db4:	29 f4       	brne	.+10     	; 0x3dc0 <f_write+0x1f0>
    3db6:	82 e0       	ldi	r24, 0x02	; 2
    3db8:	ed 81       	ldd	r30, Y+5	; 0x05
    3dba:	fe 81       	ldd	r31, Y+6	; 0x06
    3dbc:	85 83       	std	Z+5, r24	; 0x05
    3dbe:	ea c0       	rjmp	.+468    	; 0x3f94 <f_write+0x3c4>
    3dc0:	2b 01       	movw	r4, r22
    3dc2:	3c 01       	movw	r6, r24
    3dc4:	43 0c       	add	r4, r3
    3dc6:	51 1c       	adc	r5, r1
    3dc8:	61 1c       	adc	r6, r1
    3dca:	71 1c       	adc	r7, r1
    3dcc:	76 01       	movw	r14, r12
    3dce:	ef 2c       	mov	r14, r15
    3dd0:	ff 24       	eor	r15, r15
    3dd2:	e6 94       	lsr	r14
    3dd4:	e1 14       	cp	r14, r1
    3dd6:	f1 04       	cpc	r15, r1
    3dd8:	09 f4       	brne	.+2      	; 0x3ddc <f_write+0x20c>
    3dda:	4a c0       	rjmp	.+148    	; 0x3e70 <f_write+0x2a0>
    3ddc:	a9 81       	ldd	r26, Y+1	; 0x01
    3dde:	ba 81       	ldd	r27, Y+2	; 0x02
    3de0:	12 96       	adiw	r26, 0x02	; 2
    3de2:	4c 91       	ld	r20, X
    3de4:	24 2f       	mov	r18, r20
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	c7 01       	movw	r24, r14
    3dea:	83 0d       	add	r24, r3
    3dec:	91 1d       	adc	r25, r1
    3dee:	28 17       	cp	r18, r24
    3df0:	39 07       	cpc	r19, r25
    3df2:	18 f4       	brcc	.+6      	; 0x3dfa <f_write+0x22a>
    3df4:	79 01       	movw	r14, r18
    3df6:	e3 18       	sub	r14, r3
    3df8:	f1 08       	sbc	r15, r1
    3dfa:	87 01       	movw	r16, r14
    3dfc:	a3 01       	movw	r20, r6
    3dfe:	92 01       	movw	r18, r4
    3e00:	b4 01       	movw	r22, r8
    3e02:	e9 81       	ldd	r30, Y+1	; 0x01
    3e04:	fa 81       	ldd	r31, Y+2	; 0x02
    3e06:	81 81       	ldd	r24, Z+1	; 0x01
    3e08:	0e 94 16 09 	call	0x122c	; 0x122c <disk_write>
    3e0c:	88 23       	and	r24, r24
    3e0e:	31 f0       	breq	.+12     	; 0x3e1c <f_write+0x24c>
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	ad 81       	ldd	r26, Y+5	; 0x05
    3e14:	be 81       	ldd	r27, Y+6	; 0x06
    3e16:	15 96       	adiw	r26, 0x05	; 5
    3e18:	8c 93       	st	X, r24
    3e1a:	bc c0       	rjmp	.+376    	; 0x3f94 <f_write+0x3c4>
    3e1c:	ed 81       	ldd	r30, Y+5	; 0x05
    3e1e:	fe 81       	ldd	r31, Y+6	; 0x06
    3e20:	86 89       	ldd	r24, Z+22	; 0x16
    3e22:	97 89       	ldd	r25, Z+23	; 0x17
    3e24:	a0 8d       	ldd	r26, Z+24	; 0x18
    3e26:	b1 8d       	ldd	r27, Z+25	; 0x19
    3e28:	84 19       	sub	r24, r4
    3e2a:	95 09       	sbc	r25, r5
    3e2c:	a6 09       	sbc	r26, r6
    3e2e:	b7 09       	sbc	r27, r7
    3e30:	a7 01       	movw	r20, r14
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	84 17       	cp	r24, r20
    3e38:	95 07       	cpc	r25, r21
    3e3a:	a6 07       	cpc	r26, r22
    3e3c:	b7 07       	cpc	r27, r23
    3e3e:	a0 f4       	brcc	.+40     	; 0x3e68 <f_write+0x298>
    3e40:	98 2f       	mov	r25, r24
    3e42:	88 27       	eor	r24, r24
    3e44:	99 0f       	add	r25, r25
    3e46:	b4 01       	movw	r22, r8
    3e48:	68 0f       	add	r22, r24
    3e4a:	79 1f       	adc	r23, r25
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
    3e4e:	52 e0       	ldi	r21, 0x02	; 2
    3e50:	8b 81       	ldd	r24, Y+3	; 0x03
    3e52:	9c 81       	ldd	r25, Y+4	; 0x04
    3e54:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <mem_cpy>
    3e58:	ad 81       	ldd	r26, Y+5	; 0x05
    3e5a:	be 81       	ldd	r27, Y+6	; 0x06
    3e5c:	14 96       	adiw	r26, 0x04	; 4
    3e5e:	8c 91       	ld	r24, X
    3e60:	14 97       	sbiw	r26, 0x04	; 4
    3e62:	8f 7b       	andi	r24, 0xBF	; 191
    3e64:	14 96       	adiw	r26, 0x04	; 4
    3e66:	8c 93       	st	X, r24
    3e68:	fe 2c       	mov	r15, r14
    3e6a:	ee 24       	eor	r14, r14
    3e6c:	ff 0c       	add	r15, r15
    3e6e:	58 c0       	rjmp	.+176    	; 0x3f20 <f_write+0x350>
    3e70:	ed 81       	ldd	r30, Y+5	; 0x05
    3e72:	fe 81       	ldd	r31, Y+6	; 0x06
    3e74:	86 89       	ldd	r24, Z+22	; 0x16
    3e76:	97 89       	ldd	r25, Z+23	; 0x17
    3e78:	a0 8d       	ldd	r26, Z+24	; 0x18
    3e7a:	b1 8d       	ldd	r27, Z+25	; 0x19
    3e7c:	84 15       	cp	r24, r4
    3e7e:	95 05       	cpc	r25, r5
    3e80:	a6 05       	cpc	r26, r6
    3e82:	b7 05       	cpc	r27, r7
    3e84:	01 f1       	breq	.+64     	; 0x3ec6 <f_write+0x2f6>
    3e86:	46 81       	ldd	r20, Z+6	; 0x06
    3e88:	57 81       	ldd	r21, Z+7	; 0x07
    3e8a:	60 85       	ldd	r22, Z+8	; 0x08
    3e8c:	71 85       	ldd	r23, Z+9	; 0x09
    3e8e:	82 85       	ldd	r24, Z+10	; 0x0a
    3e90:	93 85       	ldd	r25, Z+11	; 0x0b
    3e92:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e94:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e96:	48 17       	cp	r20, r24
    3e98:	59 07       	cpc	r21, r25
    3e9a:	6a 07       	cpc	r22, r26
    3e9c:	7b 07       	cpc	r23, r27
    3e9e:	98 f4       	brcc	.+38     	; 0x3ec6 <f_write+0x2f6>
    3ea0:	01 e0       	ldi	r16, 0x01	; 1
    3ea2:	10 e0       	ldi	r17, 0x00	; 0
    3ea4:	a3 01       	movw	r20, r6
    3ea6:	92 01       	movw	r18, r4
    3ea8:	6b 81       	ldd	r22, Y+3	; 0x03
    3eaa:	7c 81       	ldd	r23, Y+4	; 0x04
    3eac:	a9 81       	ldd	r26, Y+1	; 0x01
    3eae:	ba 81       	ldd	r27, Y+2	; 0x02
    3eb0:	11 96       	adiw	r26, 0x01	; 1
    3eb2:	8c 91       	ld	r24, X
    3eb4:	0e 94 c4 08 	call	0x1188	; 0x1188 <disk_read>
    3eb8:	88 23       	and	r24, r24
    3eba:	29 f0       	breq	.+10     	; 0x3ec6 <f_write+0x2f6>
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	ed 81       	ldd	r30, Y+5	; 0x05
    3ec0:	fe 81       	ldd	r31, Y+6	; 0x06
    3ec2:	85 83       	std	Z+5, r24	; 0x05
    3ec4:	67 c0       	rjmp	.+206    	; 0x3f94 <f_write+0x3c4>
    3ec6:	ad 81       	ldd	r26, Y+5	; 0x05
    3ec8:	be 81       	ldd	r27, Y+6	; 0x06
    3eca:	56 96       	adiw	r26, 0x16	; 22
    3ecc:	4d 92       	st	X+, r4
    3ece:	5d 92       	st	X+, r5
    3ed0:	6d 92       	st	X+, r6
    3ed2:	7c 92       	st	X, r7
    3ed4:	59 97       	sbiw	r26, 0x19	; 25
    3ed6:	ed 81       	ldd	r30, Y+5	; 0x05
    3ed8:	fe 81       	ldd	r31, Y+6	; 0x06
    3eda:	86 81       	ldd	r24, Z+6	; 0x06
    3edc:	97 81       	ldd	r25, Z+7	; 0x07
    3ede:	a0 85       	ldd	r26, Z+8	; 0x08
    3ee0:	b1 85       	ldd	r27, Z+9	; 0x09
    3ee2:	ac 01       	movw	r20, r24
    3ee4:	51 70       	andi	r21, 0x01	; 1
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	32 e0       	ldi	r19, 0x02	; 2
    3eea:	24 1b       	sub	r18, r20
    3eec:	35 0b       	sbc	r19, r21
    3eee:	76 01       	movw	r14, r12
    3ef0:	2c 15       	cp	r18, r12
    3ef2:	3d 05       	cpc	r19, r13
    3ef4:	08 f4       	brcc	.+2      	; 0x3ef8 <f_write+0x328>
    3ef6:	79 01       	movw	r14, r18
    3ef8:	91 70       	andi	r25, 0x01	; 1
    3efa:	aa 27       	eor	r26, r26
    3efc:	bb 27       	eor	r27, r27
    3efe:	80 96       	adiw	r24, 0x20	; 32
    3f00:	a7 01       	movw	r20, r14
    3f02:	b4 01       	movw	r22, r8
    3f04:	2d 81       	ldd	r18, Y+5	; 0x05
    3f06:	3e 81       	ldd	r19, Y+6	; 0x06
    3f08:	82 0f       	add	r24, r18
    3f0a:	93 1f       	adc	r25, r19
    3f0c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <mem_cpy>
    3f10:	ad 81       	ldd	r26, Y+5	; 0x05
    3f12:	be 81       	ldd	r27, Y+6	; 0x06
    3f14:	14 96       	adiw	r26, 0x04	; 4
    3f16:	8c 91       	ld	r24, X
    3f18:	14 97       	sbiw	r26, 0x04	; 4
    3f1a:	80 64       	ori	r24, 0x40	; 64
    3f1c:	14 96       	adiw	r26, 0x04	; 4
    3f1e:	8c 93       	st	X, r24
    3f20:	8e 0c       	add	r8, r14
    3f22:	9f 1c       	adc	r9, r15
    3f24:	ed 81       	ldd	r30, Y+5	; 0x05
    3f26:	fe 81       	ldd	r31, Y+6	; 0x06
    3f28:	86 81       	ldd	r24, Z+6	; 0x06
    3f2a:	97 81       	ldd	r25, Z+7	; 0x07
    3f2c:	a0 85       	ldd	r26, Z+8	; 0x08
    3f2e:	b1 85       	ldd	r27, Z+9	; 0x09
    3f30:	8e 0d       	add	r24, r14
    3f32:	9f 1d       	adc	r25, r15
    3f34:	a1 1d       	adc	r26, r1
    3f36:	b1 1d       	adc	r27, r1
    3f38:	86 83       	std	Z+6, r24	; 0x06
    3f3a:	97 83       	std	Z+7, r25	; 0x07
    3f3c:	a0 87       	std	Z+8, r26	; 0x08
    3f3e:	b1 87       	std	Z+9, r27	; 0x09
    3f40:	d5 01       	movw	r26, r10
    3f42:	8d 91       	ld	r24, X+
    3f44:	9c 91       	ld	r25, X
    3f46:	11 97       	sbiw	r26, 0x01	; 1
    3f48:	8e 0d       	add	r24, r14
    3f4a:	9f 1d       	adc	r25, r15
    3f4c:	8d 93       	st	X+, r24
    3f4e:	9c 93       	st	X, r25
    3f50:	ce 18       	sub	r12, r14
    3f52:	df 08       	sbc	r13, r15
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <f_write+0x388>
    3f56:	7d ce       	rjmp	.-774    	; 0x3c52 <f_write+0x82>
    3f58:	ed 81       	ldd	r30, Y+5	; 0x05
    3f5a:	fe 81       	ldd	r31, Y+6	; 0x06
    3f5c:	86 81       	ldd	r24, Z+6	; 0x06
    3f5e:	97 81       	ldd	r25, Z+7	; 0x07
    3f60:	a0 85       	ldd	r26, Z+8	; 0x08
    3f62:	b1 85       	ldd	r27, Z+9	; 0x09
    3f64:	42 85       	ldd	r20, Z+10	; 0x0a
    3f66:	53 85       	ldd	r21, Z+11	; 0x0b
    3f68:	64 85       	ldd	r22, Z+12	; 0x0c
    3f6a:	75 85       	ldd	r23, Z+13	; 0x0d
    3f6c:	48 17       	cp	r20, r24
    3f6e:	59 07       	cpc	r21, r25
    3f70:	6a 07       	cpc	r22, r26
    3f72:	7b 07       	cpc	r23, r27
    3f74:	20 f4       	brcc	.+8      	; 0x3f7e <f_write+0x3ae>
    3f76:	82 87       	std	Z+10, r24	; 0x0a
    3f78:	93 87       	std	Z+11, r25	; 0x0b
    3f7a:	a4 87       	std	Z+12, r26	; 0x0c
    3f7c:	b5 87       	std	Z+13, r27	; 0x0d
    3f7e:	ad 81       	ldd	r26, Y+5	; 0x05
    3f80:	be 81       	ldd	r27, Y+6	; 0x06
    3f82:	14 96       	adiw	r26, 0x04	; 4
    3f84:	8c 91       	ld	r24, X
    3f86:	14 97       	sbiw	r26, 0x04	; 4
    3f88:	80 62       	ori	r24, 0x20	; 32
    3f8a:	14 96       	adiw	r26, 0x04	; 4
    3f8c:	8c 93       	st	X, r24
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	01 c0       	rjmp	.+2      	; 0x3f94 <f_write+0x3c4>
    3f92:	87 e0       	ldi	r24, 0x07	; 7
    3f94:	26 96       	adiw	r28, 0x06	; 6
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	df 91       	pop	r29
    3fa2:	cf 91       	pop	r28
    3fa4:	1f 91       	pop	r17
    3fa6:	0f 91       	pop	r16
    3fa8:	ff 90       	pop	r15
    3faa:	ef 90       	pop	r14
    3fac:	df 90       	pop	r13
    3fae:	cf 90       	pop	r12
    3fb0:	bf 90       	pop	r11
    3fb2:	af 90       	pop	r10
    3fb4:	9f 90       	pop	r9
    3fb6:	8f 90       	pop	r8
    3fb8:	7f 90       	pop	r7
    3fba:	6f 90       	pop	r6
    3fbc:	5f 90       	pop	r5
    3fbe:	4f 90       	pop	r4
    3fc0:	3f 90       	pop	r3
    3fc2:	08 95       	ret

00003fc4 <putc_bfd>:
    3fc4:	ef 92       	push	r14
    3fc6:	ff 92       	push	r15
    3fc8:	0f 93       	push	r16
    3fca:	1f 93       	push	r17
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	00 d0       	rcall	.+0      	; 0x3fd2 <putc_bfd+0xe>
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	22 81       	ldd	r18, Z+2	; 0x02
    3fda:	33 81       	ldd	r19, Z+3	; 0x03
    3fdc:	33 23       	and	r19, r19
    3fde:	6c f1       	brlt	.+90     	; 0x403a <putc_bfd+0x76>
    3fe0:	8c 01       	movw	r16, r24
    3fe2:	79 01       	movw	r14, r18
    3fe4:	ff ef       	ldi	r31, 0xFF	; 255
    3fe6:	ef 1a       	sub	r14, r31
    3fe8:	ff 0a       	sbc	r15, r31
    3fea:	fc 01       	movw	r30, r24
    3fec:	e2 0f       	add	r30, r18
    3fee:	f3 1f       	adc	r31, r19
    3ff0:	66 83       	std	Z+6, r22	; 0x06
    3ff2:	8d e3       	ldi	r24, 0x3D	; 61
    3ff4:	e8 16       	cp	r14, r24
    3ff6:	f1 04       	cpc	r15, r1
    3ff8:	c4 f0       	brlt	.+48     	; 0x402a <putc_bfd+0x66>
    3ffa:	9e 01       	movw	r18, r28
    3ffc:	2f 5f       	subi	r18, 0xFF	; 255
    3ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    4000:	a7 01       	movw	r20, r14
    4002:	b8 01       	movw	r22, r16
    4004:	6a 5f       	subi	r22, 0xFA	; 250
    4006:	7f 4f       	sbci	r23, 0xFF	; 255
    4008:	f8 01       	movw	r30, r16
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	e0 dd       	rcall	.-1088   	; 0x3bd0 <f_write>
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	29 81       	ldd	r18, Y+1	; 0x01
    4016:	3a 81       	ldd	r19, Y+2	; 0x02
    4018:	e2 16       	cp	r14, r18
    401a:	f3 06       	cpc	r15, r19
    401c:	11 f4       	brne	.+4      	; 0x4022 <putc_bfd+0x5e>
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	ee 24       	eor	r14, r14
    4024:	ff 24       	eor	r15, r15
    4026:	e8 1a       	sub	r14, r24
    4028:	f9 0a       	sbc	r15, r25
    402a:	f8 01       	movw	r30, r16
    402c:	f3 82       	std	Z+3, r15	; 0x03
    402e:	e2 82       	std	Z+2, r14	; 0x02
    4030:	84 81       	ldd	r24, Z+4	; 0x04
    4032:	95 81       	ldd	r25, Z+5	; 0x05
    4034:	01 96       	adiw	r24, 0x01	; 1
    4036:	95 83       	std	Z+5, r25	; 0x05
    4038:	84 83       	std	Z+4, r24	; 0x04
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	1f 91       	pop	r17
    4044:	0f 91       	pop	r16
    4046:	ff 90       	pop	r15
    4048:	ef 90       	pop	r14
    404a:	08 95       	ret

0000404c <f_sync>:
    404c:	0f 93       	push	r16
    404e:	1f 93       	push	r17
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	ec 01       	movw	r28, r24
    4056:	0e 94 0b 11 	call	0x2216	; 0x2216 <validate>
    405a:	81 11       	cpse	r24, r1
    405c:	b5 c0       	rjmp	.+362    	; 0x41c8 <__stack+0xc9>
    405e:	8c 81       	ldd	r24, Y+4	; 0x04
    4060:	85 ff       	sbrs	r24, 5
    4062:	b4 c0       	rjmp	.+360    	; 0x41cc <__stack+0xcd>
    4064:	86 ff       	sbrs	r24, 6
    4066:	13 c0       	rjmp	.+38     	; 0x408e <f_sync+0x42>
    4068:	2e 89       	ldd	r18, Y+22	; 0x16
    406a:	3f 89       	ldd	r19, Y+23	; 0x17
    406c:	48 8d       	ldd	r20, Y+24	; 0x18
    406e:	59 8d       	ldd	r21, Y+25	; 0x19
    4070:	e8 81       	ld	r30, Y
    4072:	f9 81       	ldd	r31, Y+1	; 0x01
    4074:	01 e0       	ldi	r16, 0x01	; 1
    4076:	10 e0       	ldi	r17, 0x00	; 0
    4078:	be 01       	movw	r22, r28
    407a:	60 5e       	subi	r22, 0xE0	; 224
    407c:	7f 4f       	sbci	r23, 0xFF	; 255
    407e:	81 81       	ldd	r24, Z+1	; 0x01
    4080:	0e 94 16 09 	call	0x122c	; 0x122c <disk_write>
    4084:	81 11       	cpse	r24, r1
    4086:	a4 c0       	rjmp	.+328    	; 0x41d0 <__stack+0xd1>
    4088:	8c 81       	ldd	r24, Y+4	; 0x04
    408a:	8f 7b       	andi	r24, 0xBF	; 191
    408c:	8c 83       	std	Y+4, r24	; 0x04
    408e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    4090:	5b 8d       	ldd	r21, Y+27	; 0x1b
    4092:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4094:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4096:	88 81       	ld	r24, Y
    4098:	99 81       	ldd	r25, Y+1	; 0x01
    409a:	0e 94 67 10 	call	0x20ce	; 0x20ce <move_window>
    409e:	81 11       	cpse	r24, r1
    40a0:	99 c0       	rjmp	.+306    	; 0x41d4 <__stack+0xd5>
    40a2:	0e 8d       	ldd	r16, Y+30	; 0x1e
    40a4:	1f 8d       	ldd	r17, Y+31	; 0x1f
    40a6:	f8 01       	movw	r30, r16
    40a8:	83 85       	ldd	r24, Z+11	; 0x0b
    40aa:	80 62       	ori	r24, 0x20	; 32
    40ac:	83 87       	std	Z+11, r24	; 0x0b
    40ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b0:	84 8f       	std	Z+28, r24	; 0x1c
    40b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    40b4:	85 8f       	std	Z+29, r24	; 0x1d
    40b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    40b8:	86 8f       	std	Z+30, r24	; 0x1e
    40ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    40bc:	87 8f       	std	Z+31, r24	; 0x1f
    40be:	8e 85       	ldd	r24, Y+14	; 0x0e
    40c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    40c2:	a8 89       	ldd	r26, Y+16	; 0x10
    40c4:	b9 89       	ldd	r27, Y+17	; 0x11
    40c6:	82 8f       	std	Z+26, r24	; 0x1a
    40c8:	93 8f       	std	Z+27, r25	; 0x1b
    40ca:	cd 01       	movw	r24, r26
    40cc:	aa 27       	eor	r26, r26
    40ce:	bb 27       	eor	r27, r27
    40d0:	84 8b       	std	Z+20, r24	; 0x14
    40d2:	95 8b       	std	Z+21, r25	; 0x15
    40d4:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <get_fattime>
    40d8:	f8 01       	movw	r30, r16
    40da:	66 8b       	std	Z+22, r22	; 0x16
    40dc:	77 8b       	std	Z+23, r23	; 0x17
    40de:	80 8f       	std	Z+24, r24	; 0x18
    40e0:	91 8f       	std	Z+25, r25	; 0x19
    40e2:	12 8a       	std	Z+18, r1	; 0x12
    40e4:	13 8a       	std	Z+19, r1	; 0x13
    40e6:	8c 81       	ldd	r24, Y+4	; 0x04
    40e8:	8f 7d       	andi	r24, 0xDF	; 223
    40ea:	8c 83       	std	Y+4, r24	; 0x04
    40ec:	e8 81       	ld	r30, Y
    40ee:	f9 81       	ldd	r31, Y+1	; 0x01
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	84 83       	std	Z+4, r24	; 0x04
    40f4:	09 90       	ld	r0, Y+
    40f6:	d8 81       	ld	r29, Y
    40f8:	c0 2d       	mov	r28, r0
    40fa:	ce 01       	movw	r24, r28
    40fc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync_window>
    4100:	81 11       	cpse	r24, r1
    4102:	6a c0       	rjmp	.+212    	; 0x41d8 <__stack+0xd9>
    4104:	88 81       	ld	r24, Y
    4106:	83 30       	cpi	r24, 0x03	; 3
    4108:	09 f0       	breq	.+2      	; 0x410c <__stack+0xd>
    410a:	53 c0       	rjmp	.+166    	; 0x41b2 <__stack+0xb3>
    410c:	8d 81       	ldd	r24, Y+5	; 0x05
    410e:	81 30       	cpi	r24, 0x01	; 1
    4110:	09 f0       	breq	.+2      	; 0x4114 <__stack+0x15>
    4112:	4f c0       	rjmp	.+158    	; 0x41b2 <__stack+0xb3>
    4114:	be 01       	movw	r22, r28
    4116:	62 5d       	subi	r22, 0xD2	; 210
    4118:	7f 4f       	sbci	r23, 0xFF	; 255
    411a:	fb 01       	movw	r30, r22
    411c:	ce 01       	movw	r24, r28
    411e:	82 5d       	subi	r24, 0xD2	; 210
    4120:	9d 4f       	sbci	r25, 0xFD	; 253
    4122:	11 92       	st	Z+, r1
    4124:	e8 17       	cp	r30, r24
    4126:	f9 07       	cpc	r31, r25
    4128:	e1 f7       	brne	.-8      	; 0x4122 <__stack+0x23>
    412a:	85 e5       	ldi	r24, 0x55	; 85
    412c:	fe 01       	movw	r30, r28
    412e:	e4 5d       	subi	r30, 0xD4	; 212
    4130:	fd 4f       	sbci	r31, 0xFD	; 253
    4132:	80 83       	st	Z, r24
    4134:	8a ea       	ldi	r24, 0xAA	; 170
    4136:	31 96       	adiw	r30, 0x01	; 1
    4138:	80 83       	st	Z, r24
    413a:	82 e5       	ldi	r24, 0x52	; 82
    413c:	8e a7       	std	Y+46, r24	; 0x2e
    413e:	8f a7       	std	Y+47, r24	; 0x2f
    4140:	81 e6       	ldi	r24, 0x61	; 97
    4142:	88 ab       	std	Y+48, r24	; 0x30
    4144:	91 e4       	ldi	r25, 0x41	; 65
    4146:	99 ab       	std	Y+49, r25	; 0x31
    4148:	22 e7       	ldi	r18, 0x72	; 114
    414a:	7b 97       	sbiw	r30, 0x1b	; 27
    414c:	20 83       	st	Z, r18
    414e:	31 96       	adiw	r30, 0x01	; 1
    4150:	20 83       	st	Z, r18
    4152:	31 96       	adiw	r30, 0x01	; 1
    4154:	90 83       	st	Z, r25
    4156:	31 96       	adiw	r30, 0x01	; 1
    4158:	80 83       	st	Z, r24
    415a:	3e 85       	ldd	r19, Y+14	; 0x0e
    415c:	2f 85       	ldd	r18, Y+15	; 0x0f
    415e:	98 89       	ldd	r25, Y+16	; 0x10
    4160:	89 89       	ldd	r24, Y+17	; 0x11
    4162:	31 96       	adiw	r30, 0x01	; 1
    4164:	30 83       	st	Z, r19
    4166:	31 96       	adiw	r30, 0x01	; 1
    4168:	20 83       	st	Z, r18
    416a:	31 96       	adiw	r30, 0x01	; 1
    416c:	90 83       	st	Z, r25
    416e:	31 96       	adiw	r30, 0x01	; 1
    4170:	80 83       	st	Z, r24
    4172:	3a 85       	ldd	r19, Y+10	; 0x0a
    4174:	2b 85       	ldd	r18, Y+11	; 0x0b
    4176:	9c 85       	ldd	r25, Y+12	; 0x0c
    4178:	8d 85       	ldd	r24, Y+13	; 0x0d
    417a:	31 96       	adiw	r30, 0x01	; 1
    417c:	30 83       	st	Z, r19
    417e:	31 96       	adiw	r30, 0x01	; 1
    4180:	20 83       	st	Z, r18
    4182:	31 96       	adiw	r30, 0x01	; 1
    4184:	90 83       	st	Z, r25
    4186:	31 96       	adiw	r30, 0x01	; 1
    4188:	80 83       	st	Z, r24
    418a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    418c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    418e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4190:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4192:	9c 01       	movw	r18, r24
    4194:	ad 01       	movw	r20, r26
    4196:	2f 5f       	subi	r18, 0xFF	; 255
    4198:	3f 4f       	sbci	r19, 0xFF	; 255
    419a:	4f 4f       	sbci	r20, 0xFF	; 255
    419c:	5f 4f       	sbci	r21, 0xFF	; 255
    419e:	2a a7       	std	Y+42, r18	; 0x2a
    41a0:	3b a7       	std	Y+43, r19	; 0x2b
    41a2:	4c a7       	std	Y+44, r20	; 0x2c
    41a4:	5d a7       	std	Y+45, r21	; 0x2d
    41a6:	01 e0       	ldi	r16, 0x01	; 1
    41a8:	10 e0       	ldi	r17, 0x00	; 0
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	0e 94 16 09 	call	0x122c	; 0x122c <disk_write>
    41b0:	1d 82       	std	Y+5, r1	; 0x05
    41b2:	40 e0       	ldi	r20, 0x00	; 0
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	0e 94 84 09 	call	0x1308	; 0x1308 <disk_ioctl>
    41be:	91 e0       	ldi	r25, 0x01	; 1
    41c0:	81 11       	cpse	r24, r1
    41c2:	0b c0       	rjmp	.+22     	; 0x41da <__stack+0xdb>
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	09 c0       	rjmp	.+18     	; 0x41da <__stack+0xdb>
    41c8:	98 2f       	mov	r25, r24
    41ca:	07 c0       	rjmp	.+14     	; 0x41da <__stack+0xdb>
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	05 c0       	rjmp	.+10     	; 0x41da <__stack+0xdb>
    41d0:	91 e0       	ldi	r25, 0x01	; 1
    41d2:	03 c0       	rjmp	.+6      	; 0x41da <__stack+0xdb>
    41d4:	98 2f       	mov	r25, r24
    41d6:	01 c0       	rjmp	.+2      	; 0x41da <__stack+0xdb>
    41d8:	98 2f       	mov	r25, r24
    41da:	89 2f       	mov	r24, r25
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	1f 91       	pop	r17
    41e2:	0f 91       	pop	r16
    41e4:	08 95       	ret

000041e6 <f_close>:
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	ec 01       	movw	r28, r24
    41ec:	2f df       	rcall	.-418    	; 0x404c <f_sync>
    41ee:	81 11       	cpse	r24, r1
    41f0:	07 c0       	rjmp	.+14     	; 0x4200 <f_close+0x1a>
    41f2:	ce 01       	movw	r24, r28
    41f4:	0e 94 0b 11 	call	0x2216	; 0x2216 <validate>
    41f8:	81 11       	cpse	r24, r1
    41fa:	02 c0       	rjmp	.+4      	; 0x4200 <f_close+0x1a>
    41fc:	19 82       	std	Y+1, r1	; 0x01
    41fe:	18 82       	st	Y, r1
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	08 95       	ret

00004206 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    4206:	2f 92       	push	r2
    4208:	3f 92       	push	r3
    420a:	4f 92       	push	r4
    420c:	5f 92       	push	r5
    420e:	6f 92       	push	r6
    4210:	7f 92       	push	r7
    4212:	8f 92       	push	r8
    4214:	9f 92       	push	r9
    4216:	af 92       	push	r10
    4218:	bf 92       	push	r11
    421a:	cf 92       	push	r12
    421c:	df 92       	push	r13
    421e:	ef 92       	push	r14
    4220:	ff 92       	push	r15
    4222:	0f 93       	push	r16
    4224:	1f 93       	push	r17
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
    422e:	cc 55       	subi	r28, 0x5C	; 92
    4230:	d1 09       	sbc	r29, r1
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	e5 96       	adiw	r28, 0x35	; 53
    423e:	ee ac       	ldd	r14, Y+62	; 0x3e
    4240:	ff ac       	ldd	r15, Y+63	; 0x3f
    4242:	e5 97       	sbiw	r28, 0x35	; 53
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    4244:	e3 96       	adiw	r28, 0x33	; 51
    4246:	8e ad       	ldd	r24, Y+62	; 0x3e
    4248:	9f ad       	ldd	r25, Y+63	; 0x3f
    424a:	e3 97       	sbiw	r28, 0x33	; 51
    424c:	9c 8b       	std	Y+20, r25	; 0x14
    424e:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    4250:	1e 8a       	std	Y+22, r1	; 0x16
    4252:	1d 8a       	std	Y+21, r1	; 0x15
    4254:	18 8e       	std	Y+24, r1	; 0x18
    4256:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    4258:	2e 01       	movw	r4, r28
    425a:	25 e7       	ldi	r18, 0x75	; 117
    425c:	42 0e       	add	r4, r18
    425e:	51 1c       	adc	r5, r1
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
			f |= 8;
		}
		i = 0;
    4260:	21 2c       	mov	r2, r1
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    4262:	0f 2e       	mov	r0, r31
    4264:	f7 e0       	ldi	r31, 0x07	; 7
    4266:	3f 2e       	mov	r3, r31
    4268:	f0 2d       	mov	r31, r0
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    426a:	d7 01       	movw	r26, r14
    426c:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    426e:	66 23       	and	r22, r22
    4270:	09 f4       	brne	.+2      	; 0x4274 <f_printf+0x6e>
    4272:	8e c1       	rjmp	.+796    	; 0x4590 <f_printf+0x38a>
		if (c != '%') {				/* Non escape character */
    4274:	65 32       	cpi	r22, 0x25	; 37
    4276:	39 f0       	breq	.+14     	; 0x4286 <f_printf+0x80>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    4278:	bf ef       	ldi	r27, 0xFF	; 255
    427a:	eb 1a       	sub	r14, r27
    427c:	fb 0a       	sbc	r15, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    427e:	ce 01       	movw	r24, r28
    4280:	43 96       	adiw	r24, 0x13	; 19
    4282:	a0 de       	rcall	.-704    	; 0x3fc4 <putc_bfd>
			continue;
    4284:	f2 cf       	rjmp	.-28     	; 0x426a <f_printf+0x64>
		}
		w = f = 0;
		c = *fmt++;
    4286:	f7 01       	movw	r30, r14
    4288:	d1 80       	ldd	r13, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    428a:	f0 e3       	ldi	r31, 0x30	; 48
    428c:	df 12       	cpse	r13, r31
    428e:	09 c0       	rjmp	.+18     	; 0x42a2 <f_printf+0x9c>
			f = 1; c = *fmt++;
    4290:	d7 01       	movw	r26, r14
    4292:	12 96       	adiw	r26, 0x02	; 2
    4294:	dc 90       	ld	r13, X
    4296:	f7 01       	movw	r30, r14
    4298:	33 96       	adiw	r30, 0x03	; 3
    429a:	7f 01       	movw	r14, r30
    429c:	77 24       	eor	r7, r7
    429e:	73 94       	inc	r7
    42a0:	11 c0       	rjmp	.+34     	; 0x42c4 <f_printf+0xbe>
		} else {
			if (c == '-') {			/* Flag: left justified */
    42a2:	fd e2       	ldi	r31, 0x2D	; 45
    42a4:	df 16       	cp	r13, r31
    42a6:	29 f0       	breq	.+10     	; 0x42b2 <f_printf+0xac>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    42a8:	22 e0       	ldi	r18, 0x02	; 2
    42aa:	e2 0e       	add	r14, r18
    42ac:	f1 1c       	adc	r15, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    42ae:	71 2c       	mov	r7, r1
    42b0:	09 c0       	rjmp	.+18     	; 0x42c4 <f_printf+0xbe>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    42b2:	d7 01       	movw	r26, r14
    42b4:	12 96       	adiw	r26, 0x02	; 2
    42b6:	dc 90       	ld	r13, X
    42b8:	f7 01       	movw	r30, r14
    42ba:	33 96       	adiw	r30, 0x03	; 3
    42bc:	7f 01       	movw	r14, r30
    42be:	68 94       	set
    42c0:	77 24       	eor	r7, r7
    42c2:	71 f8       	bld	r7, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    42c4:	80 ed       	ldi	r24, 0xD0	; 208
    42c6:	8d 0d       	add	r24, r13
    42c8:	8a 30       	cpi	r24, 0x0A	; 10
    42ca:	f0 f4       	brcc	.+60     	; 0x4308 <f_printf+0x102>
    42cc:	02 2d       	mov	r16, r2
    42ce:	10 e0       	ldi	r17, 0x00	; 0
    42d0:	8d 2d       	mov	r24, r13
			w = w * 10 + c - '0';
    42d2:	98 01       	movw	r18, r16
    42d4:	22 0f       	add	r18, r18
    42d6:	33 1f       	adc	r19, r19
    42d8:	00 0f       	add	r16, r16
    42da:	11 1f       	adc	r17, r17
    42dc:	00 0f       	add	r16, r16
    42de:	11 1f       	adc	r17, r17
    42e0:	00 0f       	add	r16, r16
    42e2:	11 1f       	adc	r17, r17
    42e4:	02 0f       	add	r16, r18
    42e6:	13 1f       	adc	r17, r19
    42e8:	08 0f       	add	r16, r24
    42ea:	11 1d       	adc	r17, r1
    42ec:	00 53       	subi	r16, 0x30	; 48
    42ee:	11 09       	sbc	r17, r1
			c = *fmt++;
    42f0:	ff ef       	ldi	r31, 0xFF	; 255
    42f2:	ef 1a       	sub	r14, r31
    42f4:	ff 0a       	sbc	r15, r31
    42f6:	f7 01       	movw	r30, r14
    42f8:	31 97       	sbiw	r30, 0x01	; 1
    42fa:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    42fc:	90 ed       	ldi	r25, 0xD0	; 208
    42fe:	98 0f       	add	r25, r24
    4300:	9a 30       	cpi	r25, 0x0A	; 10
    4302:	38 f3       	brcs	.-50     	; 0x42d2 <f_printf+0xcc>
    4304:	d8 2e       	mov	r13, r24
    4306:	02 c0       	rjmp	.+4      	; 0x430c <f_printf+0x106>
    4308:	02 2d       	mov	r16, r2
    430a:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    430c:	8d 2d       	mov	r24, r13
    430e:	8f 7d       	andi	r24, 0xDF	; 223
    4310:	8c 34       	cpi	r24, 0x4C	; 76
    4312:	41 f4       	brne	.+16     	; 0x4324 <f_printf+0x11e>
			f |= 4; c = *fmt++;
    4314:	27 2d       	mov	r18, r7
    4316:	24 60       	ori	r18, 0x04	; 4
    4318:	72 2e       	mov	r7, r18
    431a:	d7 01       	movw	r26, r14
    431c:	dc 90       	ld	r13, X
    431e:	f7 01       	movw	r30, r14
    4320:	31 96       	adiw	r30, 0x01	; 1
    4322:	7f 01       	movw	r14, r30
		}
		if (!c) break;
    4324:	dd 20       	and	r13, r13
    4326:	09 f4       	brne	.+2      	; 0x432a <f_printf+0x124>
    4328:	33 c1       	rjmp	.+614    	; 0x4590 <f_printf+0x38a>
		d = c;
		if (IsLower(d)) d -= 0x20;
    432a:	8f e9       	ldi	r24, 0x9F	; 159
    432c:	8d 0d       	add	r24, r13
    432e:	8a 31       	cpi	r24, 0x1A	; 26
    4330:	18 f4       	brcc	.+6      	; 0x4338 <f_printf+0x132>
    4332:	30 ee       	ldi	r19, 0xE0	; 224
    4334:	3d 0d       	add	r19, r13
    4336:	01 c0       	rjmp	.+2      	; 0x433a <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    4338:	3d 2d       	mov	r19, r13
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    433a:	83 2f       	mov	r24, r19
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	fc 01       	movw	r30, r24
    4340:	e2 54       	subi	r30, 0x42	; 66
    4342:	f1 09       	sbc	r31, r1
    4344:	e7 31       	cpi	r30, 0x17	; 23
    4346:	f1 05       	cpc	r31, r1
    4348:	08 f0       	brcs	.+2      	; 0x434c <f_printf+0x146>
    434a:	58 c0       	rjmp	.+176    	; 0x43fc <f_printf+0x1f6>
    434c:	e3 58       	subi	r30, 0x83	; 131
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	0c 94 38 47 	jmp	0x8e70	; 0x8e70 <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    4354:	f2 01       	movw	r30, r4
    4356:	a0 80       	ld	r10, Z
    4358:	b1 80       	ldd	r11, Z+1	; 0x01
    435a:	f2 e0       	ldi	r31, 0x02	; 2
    435c:	4f 0e       	add	r4, r31
    435e:	51 1c       	adc	r5, r1
			for (j = 0; p[j]; j++) ;
    4360:	d5 01       	movw	r26, r10
    4362:	6c 91       	ld	r22, X
    4364:	66 23       	and	r22, r22
    4366:	09 f4       	brne	.+2      	; 0x436a <f_printf+0x164>
    4368:	38 c1       	rjmp	.+624    	; 0x45da <f_printf+0x3d4>
    436a:	f5 01       	movw	r30, r10
    436c:	31 96       	adiw	r30, 0x01	; 1
    436e:	c2 2c       	mov	r12, r2
    4370:	d1 2c       	mov	r13, r1
    4372:	bf ef       	ldi	r27, 0xFF	; 255
    4374:	cb 1a       	sub	r12, r27
    4376:	db 0a       	sbc	r13, r27
    4378:	81 91       	ld	r24, Z+
    437a:	81 11       	cpse	r24, r1
    437c:	fa cf       	rjmp	.-12     	; 0x4372 <f_printf+0x16c>
    437e:	2a c1       	rjmp	.+596    	; 0x45d4 <f_printf+0x3ce>
    4380:	c2 2c       	mov	r12, r2
    4382:	d1 2c       	mov	r13, r1
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    4384:	66 24       	eor	r6, r6
    4386:	63 94       	inc	r6
    4388:	71 2c       	mov	r7, r1
    438a:	46 01       	movw	r8, r12
    438c:	60 e2       	ldi	r22, 0x20	; 32
    438e:	ce 01       	movw	r24, r28
    4390:	43 96       	adiw	r24, 0x13	; 19
    4392:	18 de       	rcall	.-976    	; 0x3fc4 <putc_bfd>
    4394:	ef ef       	ldi	r30, 0xFF	; 255
    4396:	8e 1a       	sub	r8, r30
    4398:	9e 0a       	sbc	r9, r30
    439a:	80 16       	cp	r8, r16
    439c:	91 06       	cpc	r9, r17
    439e:	b0 f3       	brcs	.-20     	; 0x438c <f_printf+0x186>
    43a0:	93 01       	movw	r18, r6
    43a2:	2c 19       	sub	r18, r12
    43a4:	3d 09       	sbc	r19, r13
    43a6:	69 01       	movw	r12, r18
    43a8:	c0 0e       	add	r12, r16
    43aa:	d1 1e       	adc	r13, r17
			}
			while (*p) putc_bfd(&pb, *p++);
    43ac:	d5 01       	movw	r26, r10
    43ae:	6c 91       	ld	r22, X
    43b0:	66 23       	and	r22, r22
    43b2:	59 f0       	breq	.+22     	; 0x43ca <f_printf+0x1c4>
    43b4:	bf ef       	ldi	r27, 0xFF	; 255
    43b6:	ab 1a       	sub	r10, r27
    43b8:	bb 0a       	sbc	r11, r27
    43ba:	ce 01       	movw	r24, r28
    43bc:	43 96       	adiw	r24, 0x13	; 19
    43be:	02 de       	rcall	.-1020   	; 0x3fc4 <putc_bfd>
    43c0:	f5 01       	movw	r30, r10
    43c2:	61 91       	ld	r22, Z+
    43c4:	5f 01       	movw	r10, r30
    43c6:	61 11       	cpse	r22, r1
    43c8:	f8 cf       	rjmp	.-16     	; 0x43ba <f_printf+0x1b4>
			while (j++ < w) putc_bfd(&pb, ' ');
    43ca:	c0 16       	cp	r12, r16
    43cc:	d1 06       	cpc	r13, r17
    43ce:	08 f0       	brcs	.+2      	; 0x43d2 <f_printf+0x1cc>
    43d0:	4c cf       	rjmp	.-360    	; 0x426a <f_printf+0x64>
    43d2:	60 e2       	ldi	r22, 0x20	; 32
    43d4:	ce 01       	movw	r24, r28
    43d6:	43 96       	adiw	r24, 0x13	; 19
    43d8:	f5 dd       	rcall	.-1046   	; 0x3fc4 <putc_bfd>
    43da:	ff ef       	ldi	r31, 0xFF	; 255
    43dc:	cf 1a       	sub	r12, r31
    43de:	df 0a       	sbc	r13, r31
    43e0:	c0 16       	cp	r12, r16
    43e2:	d1 06       	cpc	r13, r17
    43e4:	b0 f3       	brcs	.-20     	; 0x43d2 <f_printf+0x1cc>
    43e6:	41 cf       	rjmp	.-382    	; 0x426a <f_printf+0x64>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    43e8:	82 01       	movw	r16, r4
    43ea:	0e 5f       	subi	r16, 0xFE	; 254
    43ec:	1f 4f       	sbci	r17, 0xFF	; 255
    43ee:	d2 01       	movw	r26, r4
    43f0:	6c 91       	ld	r22, X
    43f2:	ce 01       	movw	r24, r28
    43f4:	43 96       	adiw	r24, 0x13	; 19
    43f6:	e6 dd       	rcall	.-1076   	; 0x3fc4 <putc_bfd>
    43f8:	28 01       	movw	r4, r16
    43fa:	37 cf       	rjmp	.-402    	; 0x426a <f_printf+0x64>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    43fc:	6d 2d       	mov	r22, r13
    43fe:	ce 01       	movw	r24, r28
    4400:	43 96       	adiw	r24, 0x13	; 19
    4402:	e0 dd       	rcall	.-1088   	; 0x3fc4 <putc_bfd>
    4404:	32 cf       	rjmp	.-412    	; 0x426a <f_printf+0x64>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4406:	72 fe       	sbrs	r7, 2
    4408:	0e c0       	rjmp	.+28     	; 0x4426 <f_printf+0x220>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    440a:	aa e0       	ldi	r26, 0x0A	; 10
    440c:	01 c0       	rjmp	.+2      	; 0x4410 <f_printf+0x20a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    440e:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4410:	f2 01       	movw	r30, r4
    4412:	60 81       	ld	r22, Z
    4414:	71 81       	ldd	r23, Z+1	; 0x01
    4416:	82 81       	ldd	r24, Z+2	; 0x02
    4418:	93 81       	ldd	r25, Z+3	; 0x03
    441a:	b4 e0       	ldi	r27, 0x04	; 4
    441c:	4b 0e       	add	r4, r27
    441e:	51 1c       	adc	r5, r1
		if (d == 'D' && (v & 0x80000000)) {
    4420:	34 34       	cpi	r19, 0x44	; 68
    4422:	31 f5       	brne	.+76     	; 0x4470 <f_printf+0x26a>
    4424:	19 c0       	rjmp	.+50     	; 0x4458 <f_printf+0x252>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    4426:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4428:	34 34       	cpi	r19, 0x44	; 68
    442a:	61 f4       	brne	.+24     	; 0x4444 <f_printf+0x23e>
    442c:	f2 01       	movw	r30, r4
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	07 2e       	mov	r0, r23
    4434:	00 0c       	add	r0, r0
    4436:	88 0b       	sbc	r24, r24
    4438:	99 0b       	sbc	r25, r25
    443a:	92 01       	movw	r18, r4
    443c:	2e 5f       	subi	r18, 0xFE	; 254
    443e:	3f 4f       	sbci	r19, 0xFF	; 255
    4440:	29 01       	movw	r4, r18
    4442:	0a c0       	rjmp	.+20     	; 0x4458 <f_printf+0x252>
    4444:	f2 01       	movw	r30, r4
    4446:	60 81       	ld	r22, Z
    4448:	71 81       	ldd	r23, Z+1	; 0x01
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	92 01       	movw	r18, r4
    4450:	2e 5f       	subi	r18, 0xFE	; 254
    4452:	3f 4f       	sbci	r19, 0xFF	; 255
    4454:	29 01       	movw	r4, r18
    4456:	0c c0       	rjmp	.+24     	; 0x4470 <f_printf+0x26a>
		if (d == 'D' && (v & 0x80000000)) {
    4458:	99 23       	and	r25, r25
    445a:	54 f4       	brge	.+20     	; 0x4470 <f_printf+0x26a>
			v = 0 - v;
    445c:	90 95       	com	r25
    445e:	80 95       	com	r24
    4460:	70 95       	com	r23
    4462:	61 95       	neg	r22
    4464:	7f 4f       	sbci	r23, 0xFF	; 255
    4466:	8f 4f       	sbci	r24, 0xFF	; 255
    4468:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    446a:	37 2d       	mov	r19, r7
    446c:	38 60       	ori	r19, 0x08	; 8
    446e:	73 2e       	mov	r7, r19
    4470:	ae 01       	movw	r20, r28
    4472:	4d 5f       	subi	r20, 0xFD	; 253
    4474:	5f 4f       	sbci	r21, 0xFF	; 255
    4476:	5a 01       	movw	r10, r20
		}
		i = 0;
    4478:	82 2c       	mov	r8, r2
    447a:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    447c:	2a 2f       	mov	r18, r26
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	6d 96       	adiw	r28, 0x1d	; 29
    4486:	2c af       	std	Y+60, r18	; 0x3c
    4488:	3d af       	std	Y+61, r19	; 0x3d
    448a:	4e af       	std	Y+62, r20	; 0x3e
    448c:	5f af       	std	Y+63, r21	; 0x3f
    448e:	6d 97       	sbiw	r28, 0x1d	; 29
    4490:	97 01       	movw	r18, r14
    4492:	78 01       	movw	r14, r16
    4494:	1d 2d       	mov	r17, r13
    4496:	69 01       	movw	r12, r18
    4498:	6d 96       	adiw	r28, 0x1d	; 29
    449a:	2c ad       	ldd	r18, Y+60	; 0x3c
    449c:	3d ad       	ldd	r19, Y+61	; 0x3d
    449e:	4e ad       	ldd	r20, Y+62	; 0x3e
    44a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    44a2:	6d 97       	sbiw	r28, 0x1d	; 29
    44a4:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <__udivmodsi4>
    44a8:	f6 2f       	mov	r31, r22
    44aa:	e6 2f       	mov	r30, r22
    44ac:	62 2f       	mov	r22, r18
    44ae:	73 2f       	mov	r23, r19
    44b0:	84 2f       	mov	r24, r20
    44b2:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    44b4:	fa 30       	cpi	r31, 0x0A	; 10
    44b6:	30 f0       	brcs	.+12     	; 0x44c4 <f_printf+0x2be>
    44b8:	18 37       	cpi	r17, 0x78	; 120
    44ba:	11 f0       	breq	.+4      	; 0x44c0 <f_printf+0x2ba>
    44bc:	e3 2d       	mov	r30, r3
    44be:	01 c0       	rjmp	.+2      	; 0x44c2 <f_printf+0x2bc>
    44c0:	e7 e2       	ldi	r30, 0x27	; 39
    44c2:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    44c4:	3f ef       	ldi	r19, 0xFF	; 255
    44c6:	83 1a       	sub	r8, r19
    44c8:	93 0a       	sbc	r9, r19
    44ca:	e0 5d       	subi	r30, 0xD0	; 208
    44cc:	d5 01       	movw	r26, r10
    44ce:	ed 93       	st	X+, r30
    44d0:	5d 01       	movw	r10, r26
		} while (v && i < sizeof s / sizeof s[0]);
    44d2:	61 15       	cp	r22, r1
    44d4:	71 05       	cpc	r23, r1
    44d6:	81 05       	cpc	r24, r1
    44d8:	91 05       	cpc	r25, r1
    44da:	21 f0       	breq	.+8      	; 0x44e4 <f_printf+0x2de>
    44dc:	b0 e1       	ldi	r27, 0x10	; 16
    44de:	8b 16       	cp	r8, r27
    44e0:	91 04       	cpc	r9, r1
    44e2:	d1 f6       	brne	.-76     	; 0x4498 <f_printf+0x292>
    44e4:	87 01       	movw	r16, r14
    44e6:	76 01       	movw	r14, r12
		if (f & 8) s[i++] = '-';
    44e8:	73 fe       	sbrs	r7, 3
    44ea:	0c c0       	rjmp	.+24     	; 0x4504 <f_printf+0x2fe>
    44ec:	e3 e0       	ldi	r30, 0x03	; 3
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	ec 0f       	add	r30, r28
    44f2:	fd 1f       	adc	r31, r29
    44f4:	e8 0d       	add	r30, r8
    44f6:	f9 1d       	adc	r31, r9
    44f8:	2d e2       	ldi	r18, 0x2D	; 45
    44fa:	20 83       	st	Z, r18
    44fc:	a4 01       	movw	r20, r8
    44fe:	4f 5f       	subi	r20, 0xFF	; 255
    4500:	5f 4f       	sbci	r21, 0xFF	; 255
    4502:	4a 01       	movw	r8, r20
		j = i; d = (f & 1) ? '0' : ' ';
    4504:	70 fc       	sbrc	r7, 0
    4506:	04 c0       	rjmp	.+8      	; 0x4510 <f_printf+0x30a>
    4508:	68 94       	set
    450a:	66 24       	eor	r6, r6
    450c:	65 f8       	bld	r6, 5
    450e:	04 c0       	rjmp	.+8      	; 0x4518 <f_printf+0x312>
    4510:	0f 2e       	mov	r0, r31
    4512:	f0 e3       	ldi	r31, 0x30	; 48
    4514:	6f 2e       	mov	r6, r31
    4516:	f0 2d       	mov	r31, r0
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    4518:	71 fc       	sbrc	r7, 1
    451a:	15 c0       	rjmp	.+42     	; 0x4546 <f_printf+0x340>
    451c:	64 01       	movw	r12, r8
    451e:	5f ef       	ldi	r21, 0xFF	; 255
    4520:	c5 1a       	sub	r12, r21
    4522:	d5 0a       	sbc	r13, r21
    4524:	80 16       	cp	r8, r16
    4526:	91 06       	cpc	r9, r17
    4528:	08 f4       	brcc	.+2      	; 0x452c <f_printf+0x326>
    452a:	65 c0       	rjmp	.+202    	; 0x45f6 <f_printf+0x3f0>
    452c:	0d c0       	rjmp	.+26     	; 0x4548 <f_printf+0x342>
    452e:	8f ef       	ldi	r24, 0xFF	; 255
    4530:	c8 1a       	sub	r12, r24
    4532:	d8 0a       	sbc	r13, r24
    4534:	c0 16       	cp	r12, r16
    4536:	d1 06       	cpc	r13, r17
    4538:	08 f4       	brcc	.+2      	; 0x453c <f_printf+0x336>
    453a:	58 c0       	rjmp	.+176    	; 0x45ec <f_printf+0x3e6>
    453c:	68 01       	movw	r12, r16
    453e:	9f ef       	ldi	r25, 0xFF	; 255
    4540:	c9 1a       	sub	r12, r25
    4542:	d9 0a       	sbc	r13, r25
    4544:	01 c0       	rjmp	.+2      	; 0x4548 <f_printf+0x342>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    4546:	64 01       	movw	r12, r8
    4548:	0f 2e       	mov	r0, r31
    454a:	f3 e0       	ldi	r31, 0x03	; 3
    454c:	af 2e       	mov	r10, r31
    454e:	b1 2c       	mov	r11, r1
    4550:	f0 2d       	mov	r31, r0
    4552:	ac 0e       	add	r10, r28
    4554:	bd 1e       	adc	r11, r29
    4556:	a8 0c       	add	r10, r8
    4558:	b9 1c       	adc	r11, r9
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    455a:	a1 e0       	ldi	r26, 0x01	; 1
    455c:	8a 1a       	sub	r8, r26
    455e:	91 08       	sbc	r9, r1
    4560:	f5 01       	movw	r30, r10
    4562:	62 91       	ld	r22, -Z
    4564:	5f 01       	movw	r10, r30
    4566:	ce 01       	movw	r24, r28
    4568:	43 96       	adiw	r24, 0x13	; 19
    456a:	2c dd       	rcall	.-1448   	; 0x3fc4 <putc_bfd>
    456c:	81 14       	cp	r8, r1
    456e:	91 04       	cpc	r9, r1
    4570:	a1 f7       	brne	.-24     	; 0x455a <f_printf+0x354>
		while (j++ < w) putc_bfd(&pb, d);
    4572:	c0 16       	cp	r12, r16
    4574:	d1 06       	cpc	r13, r17
    4576:	08 f0       	brcs	.+2      	; 0x457a <f_printf+0x374>
    4578:	78 ce       	rjmp	.-784    	; 0x426a <f_printf+0x64>
    457a:	66 2d       	mov	r22, r6
    457c:	ce 01       	movw	r24, r28
    457e:	43 96       	adiw	r24, 0x13	; 19
    4580:	21 dd       	rcall	.-1470   	; 0x3fc4 <putc_bfd>
    4582:	ff ef       	ldi	r31, 0xFF	; 255
    4584:	cf 1a       	sub	r12, r31
    4586:	df 0a       	sbc	r13, r31
    4588:	c0 16       	cp	r12, r16
    458a:	d1 06       	cpc	r13, r17
    458c:	b0 f3       	brcs	.-20     	; 0x457a <f_printf+0x374>
    458e:	6d ce       	rjmp	.-806    	; 0x426a <f_printf+0x64>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    4590:	4d 89       	ldd	r20, Y+21	; 0x15
    4592:	5e 89       	ldd	r21, Y+22	; 0x16
    4594:	55 23       	and	r21, r21
    4596:	ac f0       	brlt	.+42     	; 0x45c2 <f_printf+0x3bc>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    4598:	9e 01       	movw	r18, r28
    459a:	2f 5f       	subi	r18, 0xFF	; 255
    459c:	3f 4f       	sbci	r19, 0xFF	; 255
    459e:	be 01       	movw	r22, r28
    45a0:	67 5e       	subi	r22, 0xE7	; 231
    45a2:	7f 4f       	sbci	r23, 0xFF	; 255
    45a4:	8b 89       	ldd	r24, Y+19	; 0x13
    45a6:	9c 89       	ldd	r25, Y+20	; 0x14
    45a8:	13 db       	rcall	.-2522   	; 0x3bd0 <f_write>
    45aa:	81 11       	cpse	r24, r1
    45ac:	0d c0       	rjmp	.+26     	; 0x45c8 <f_printf+0x3c2>
		&& (UINT)pb.idx == nw) return pb.nchr;
    45ae:	2d 89       	ldd	r18, Y+21	; 0x15
    45b0:	3e 89       	ldd	r19, Y+22	; 0x16
    45b2:	89 81       	ldd	r24, Y+1	; 0x01
    45b4:	9a 81       	ldd	r25, Y+2	; 0x02
    45b6:	28 17       	cp	r18, r24
    45b8:	39 07       	cpc	r19, r25
    45ba:	49 f4       	brne	.+18     	; 0x45ce <f_printf+0x3c8>
    45bc:	8f 89       	ldd	r24, Y+23	; 0x17
    45be:	98 8d       	ldd	r25, Y+24	; 0x18
    45c0:	52 c0       	rjmp	.+164    	; 0x4666 <f_printf+0x460>
	return EOF;
    45c2:	8f ef       	ldi	r24, 0xFF	; 255
    45c4:	9f ef       	ldi	r25, 0xFF	; 255
    45c6:	4f c0       	rjmp	.+158    	; 0x4666 <f_printf+0x460>
    45c8:	8f ef       	ldi	r24, 0xFF	; 255
    45ca:	9f ef       	ldi	r25, 0xFF	; 255
    45cc:	4c c0       	rjmp	.+152    	; 0x4666 <f_printf+0x460>
    45ce:	8f ef       	ldi	r24, 0xFF	; 255
    45d0:	9f ef       	ldi	r25, 0xFF	; 255
    45d2:	49 c0       	rjmp	.+146    	; 0x4666 <f_printf+0x460>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
    45d4:	71 fe       	sbrs	r7, 1
    45d6:	19 c0       	rjmp	.+50     	; 0x460a <f_printf+0x404>
    45d8:	ed ce       	rjmp	.-550    	; 0x43b4 <f_printf+0x1ae>
    45da:	71 fe       	sbrs	r7, 1
    45dc:	1f c0       	rjmp	.+62     	; 0x461c <f_printf+0x416>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    45de:	c2 2c       	mov	r12, r2
    45e0:	d1 2c       	mov	r13, r1
    45e2:	f3 ce       	rjmp	.-538    	; 0x43ca <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    45e4:	72 fc       	sbrc	r7, 2
    45e6:	13 cf       	rjmp	.-474    	; 0x440e <f_printf+0x208>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    45e8:	a0 e1       	ldi	r26, 0x10	; 16
    45ea:	2c cf       	rjmp	.-424    	; 0x4444 <f_printf+0x23e>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    45ec:	66 2d       	mov	r22, r6
    45ee:	ce 01       	movw	r24, r28
    45f0:	43 96       	adiw	r24, 0x13	; 19
    45f2:	e8 dc       	rcall	.-1584   	; 0x3fc4 <putc_bfd>
    45f4:	9c cf       	rjmp	.-200    	; 0x452e <f_printf+0x328>
    45f6:	66 2d       	mov	r22, r6
    45f8:	ce 01       	movw	r24, r28
    45fa:	43 96       	adiw	r24, 0x13	; 19
    45fc:	e3 dc       	rcall	.-1594   	; 0x3fc4 <putc_bfd>
    45fe:	64 01       	movw	r12, r8
    4600:	96 cf       	rjmp	.-212    	; 0x452e <f_printf+0x328>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    4602:	d5 01       	movw	r26, r10
    4604:	6c 91       	ld	r22, X
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    4606:	63 01       	movw	r12, r6
    4608:	d5 ce       	rjmp	.-598    	; 0x43b4 <f_printf+0x1ae>
    460a:	36 01       	movw	r6, r12
    460c:	bf ef       	ldi	r27, 0xFF	; 255
    460e:	6b 1a       	sub	r6, r27
    4610:	7b 0a       	sbc	r7, r27
    4612:	c0 16       	cp	r12, r16
    4614:	d1 06       	cpc	r13, r17
    4616:	08 f4       	brcc	.+2      	; 0x461a <f_printf+0x414>
    4618:	b8 ce       	rjmp	.-656    	; 0x438a <f_printf+0x184>
    461a:	f3 cf       	rjmp	.-26     	; 0x4602 <f_printf+0x3fc>
    461c:	01 15       	cp	r16, r1
    461e:	11 05       	cpc	r17, r1
    4620:	09 f0       	breq	.+2      	; 0x4624 <f_printf+0x41e>
    4622:	ae ce       	rjmp	.-676    	; 0x4380 <f_printf+0x17a>
    4624:	cc 24       	eor	r12, r12
    4626:	c3 94       	inc	r12
    4628:	d1 2c       	mov	r13, r1
    462a:	cf ce       	rjmp	.-610    	; 0x43ca <f_printf+0x1c4>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    462c:	f2 01       	movw	r30, r4
    462e:	60 81       	ld	r22, Z
    4630:	71 81       	ldd	r23, Z+1	; 0x01
    4632:	82 81       	ldd	r24, Z+2	; 0x02
    4634:	93 81       	ldd	r25, Z+3	; 0x03
    4636:	92 01       	movw	r18, r4
    4638:	2c 5f       	subi	r18, 0xFC	; 252
    463a:	3f 4f       	sbci	r19, 0xFF	; 255
    463c:	29 01       	movw	r4, r18
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    463e:	a2 e0       	ldi	r26, 0x02	; 2
    4640:	17 cf       	rjmp	.-466    	; 0x4470 <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    4642:	72 fc       	sbrc	r7, 2
    4644:	f3 cf       	rjmp	.-26     	; 0x462c <f_printf+0x426>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    4646:	a2 e0       	ldi	r26, 0x02	; 2
    4648:	ef ce       	rjmp	.-546    	; 0x4428 <f_printf+0x222>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    464a:	d2 01       	movw	r26, r4
    464c:	6d 91       	ld	r22, X+
    464e:	7d 91       	ld	r23, X+
    4650:	8d 91       	ld	r24, X+
    4652:	9c 91       	ld	r25, X
    4654:	f2 01       	movw	r30, r4
    4656:	34 96       	adiw	r30, 0x04	; 4
    4658:	2f 01       	movw	r4, r30
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    465a:	a8 e0       	ldi	r26, 0x08	; 8
    465c:	09 cf       	rjmp	.-494    	; 0x4470 <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    465e:	72 fc       	sbrc	r7, 2
    4660:	f4 cf       	rjmp	.-24     	; 0x464a <f_printf+0x444>
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    4662:	a8 e0       	ldi	r26, 0x08	; 8
    4664:	ef ce       	rjmp	.-546    	; 0x4444 <f_printf+0x23e>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
}
    4666:	c4 5a       	subi	r28, 0xA4	; 164
    4668:	df 4f       	sbci	r29, 0xFF	; 255
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	df 91       	pop	r29
    4676:	cf 91       	pop	r28
    4678:	1f 91       	pop	r17
    467a:	0f 91       	pop	r16
    467c:	ff 90       	pop	r15
    467e:	ef 90       	pop	r14
    4680:	df 90       	pop	r13
    4682:	cf 90       	pop	r12
    4684:	bf 90       	pop	r11
    4686:	af 90       	pop	r10
    4688:	9f 90       	pop	r9
    468a:	8f 90       	pop	r8
    468c:	7f 90       	pop	r7
    468e:	6f 90       	pop	r6
    4690:	5f 90       	pop	r5
    4692:	4f 90       	pop	r4
    4694:	3f 90       	pop	r3
    4696:	2f 90       	pop	r2
    4698:	08 95       	ret

0000469a <_ZN3I2CC1Ev>:
void I2C::twi_ack(){
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
}
void I2C::twi_nack(){
	TWCR = (1<<TWINT) | (1<<TWEN);
	TWCR &= ~(1<<TWEA);
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	80 93 b8 00 	sts	0x00B8, r24
    46a0:	08 95       	ret

000046a2 <_ZN3I2CD1Ev>:
    46a2:	08 95       	ret

000046a4 <_ZN3I2C9twi_startEv>:
    46a4:	84 ea       	ldi	r24, 0xA4	; 164
    46a6:	80 93 bc 00 	sts	0x00BC, r24
    46aa:	08 95       	ret

000046ac <_ZN3I2C8twi_stopEv>:
    46ac:	84 e9       	ldi	r24, 0x94	; 148
    46ae:	80 93 bc 00 	sts	0x00BC, r24
    46b2:	08 95       	ret

000046b4 <_ZN3I2C9twi_writeEh>:
}

void I2C::twi_write(uint8_t data){
	while(!(TWCR & (1<<TWINT)));
    46b4:	ec eb       	ldi	r30, 0xBC	; 188
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	80 81       	ld	r24, Z
    46ba:	88 23       	and	r24, r24
    46bc:	ec f7       	brge	.-6      	; 0x46b8 <_ZN3I2C9twi_writeEh+0x4>
	TWDR = data;
    46be:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT) | (1<<TWEN);
    46c2:	84 e8       	ldi	r24, 0x84	; 132
    46c4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    46c8:	ec eb       	ldi	r30, 0xBC	; 188
    46ca:	f0 e0       	ldi	r31, 0x00	; 0
    46cc:	80 81       	ld	r24, Z
    46ce:	88 23       	and	r24, r24
    46d0:	ec f7       	brge	.-6      	; 0x46cc <_ZN3I2C9twi_writeEh+0x18>
}
    46d2:	08 95       	ret

000046d4 <_ZN3I2C8twi_readEh>:

uint8_t I2C::twi_read(uint8_t ack){
	if (ack)
    46d4:	66 23       	and	r22, r22
    46d6:	21 f0       	breq	.+8      	; 0x46e0 <_ZN3I2C8twi_readEh+0xc>
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    46d8:	84 ec       	ldi	r24, 0xC4	; 196
    46da:	80 93 bc 00 	sts	0x00BC, r24
    46de:	03 c0       	rjmp	.+6      	; 0x46e6 <_ZN3I2C8twi_readEh+0x12>
	}
	else{
		TWCR = (1<<TWINT) | (1<<TWEN);
    46e0:	84 e8       	ldi	r24, 0x84	; 132
    46e2:	80 93 bc 00 	sts	0x00BC, r24
	}
	
	while(!(TWCR & (1<<TWINT)));
    46e6:	ec eb       	ldi	r30, 0xBC	; 188
    46e8:	f0 e0       	ldi	r31, 0x00	; 0
    46ea:	80 81       	ld	r24, Z
    46ec:	88 23       	and	r24, r24
    46ee:	ec f7       	brge	.-6      	; 0x46ea <_ZN3I2C8twi_readEh+0x16>
	return TWDR;
    46f0:	80 91 bb 00 	lds	r24, 0x00BB
    46f4:	08 95       	ret

000046f6 <_ZN9InterfaceC1Ev>:
		default:
		abfrage = 0;
		break;
	}
	return abfrage;
}
    46f6:	2a b1       	in	r18, 0x0a	; 10
    46f8:	20 66       	ori	r18, 0x60	; 96
    46fa:	2a b9       	out	0x0a, r18	; 10
    46fc:	28 b1       	in	r18, 0x08	; 8
    46fe:	23 7f       	andi	r18, 0xF3	; 243
    4700:	28 b9       	out	0x08, r18	; 8
    4702:	27 b1       	in	r18, 0x07	; 7
    4704:	2c 60       	ori	r18, 0x0C	; 12
    4706:	27 b9       	out	0x07, r18	; 7
    4708:	2a b1       	in	r18, 0x0a	; 10
    470a:	23 7e       	andi	r18, 0xE3	; 227
    470c:	2a b9       	out	0x0a, r18	; 10
    470e:	fc 01       	movw	r30, r24
    4710:	0c 96       	adiw	r24, 0x0c	; 12
    4712:	11 92       	st	Z+, r1
    4714:	e8 17       	cp	r30, r24
    4716:	f9 07       	cpc	r31, r25
    4718:	e1 f7       	brne	.-8      	; 0x4712 <_ZN9InterfaceC1Ev+0x1c>
    471a:	08 95       	ret

0000471c <_ZN9InterfaceD1Ev>:
    471c:	08 95       	ret

0000471e <_ZN9Interface7paradebEPVhhPh>:
    471e:	fb 01       	movw	r30, r22
    4720:	80 81       	ld	r24, Z
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	04 2e       	mov	r0, r20
    4726:	02 c0       	rjmp	.+4      	; 0x472c <_ZN9Interface7paradebEPVhhPh+0xe>
    4728:	95 95       	asr	r25
    472a:	87 95       	ror	r24
    472c:	0a 94       	dec	r0
    472e:	e2 f7       	brpl	.-8      	; 0x4728 <_ZN9Interface7paradebEPVhhPh+0xa>
    4730:	80 ff       	sbrs	r24, 0
    4732:	05 c0       	rjmp	.+10     	; 0x473e <_ZN9Interface7paradebEPVhhPh+0x20>
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	f9 01       	movw	r30, r18
    4738:	80 83       	st	Z, r24
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	08 95       	ret
    473e:	f9 01       	movw	r30, r18
    4740:	80 81       	ld	r24, Z
    4742:	81 30       	cpi	r24, 0x01	; 1
    4744:	71 f4       	brne	.+28     	; 0x4762 <_ZN9Interface7paradebEPVhhPh+0x44>
    4746:	fb 01       	movw	r30, r22
    4748:	60 81       	ld	r22, Z
    474a:	70 e0       	ldi	r23, 0x00	; 0
    474c:	fb 01       	movw	r30, r22
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <_ZN9Interface7paradebEPVhhPh+0x36>
    4750:	f5 95       	asr	r31
    4752:	e7 95       	ror	r30
    4754:	4a 95       	dec	r20
    4756:	e2 f7       	brpl	.-8      	; 0x4750 <_ZN9Interface7paradebEPVhhPh+0x32>
    4758:	e0 fd       	sbrc	r30, 0
    475a:	03 c0       	rjmp	.+6      	; 0x4762 <_ZN9Interface7paradebEPVhhPh+0x44>
    475c:	f9 01       	movw	r30, r18
    475e:	10 82       	st	Z, r1
    4760:	08 95       	ret
    4762:	f9 01       	movw	r30, r18
    4764:	10 82       	st	Z, r1
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	08 95       	ret

0000476a <_ZN9Interface6TasterEv>:

uint8_t Interface::Taster(){
    476a:	1f 93       	push	r17
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	ec 01       	movw	r28, r24
	uint8_t taste = ' ';
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
    4772:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4774:	82 e0       	ldi	r24, 0x02	; 2
    4776:	8a 95       	dec	r24
    4778:	f1 f7       	brne	.-4      	; 0x4776 <_ZN9Interface6TasterEv+0xc>
    477a:	00 c0       	rjmp	.+0      	; 0x477c <_ZN9Interface6TasterEv+0x12>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
    477c:	9e 01       	movw	r18, r28
    477e:	2e 5f       	subi	r18, 0xFE	; 254
    4780:	3f 4f       	sbci	r19, 0xFF	; 255
    4782:	44 e0       	ldi	r20, 0x04	; 4
    4784:	69 e2       	ldi	r22, 0x29	; 41
    4786:	70 e0       	ldi	r23, 0x00	; 0
    4788:	ce 01       	movw	r24, r28
    478a:	c9 df       	rcall	.-110    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    478c:	81 11       	cpse	r24, r1
    478e:	14 c0       	rjmp	.+40     	; 0x47b8 <_ZN9Interface6TasterEv+0x4e>
		taste = '3';
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
    4790:	9e 01       	movw	r18, r28
    4792:	2f 5f       	subi	r18, 0xFF	; 255
    4794:	3f 4f       	sbci	r19, 0xFF	; 255
    4796:	43 e0       	ldi	r20, 0x03	; 3
    4798:	69 e2       	ldi	r22, 0x29	; 41
    479a:	70 e0       	ldi	r23, 0x00	; 0
    479c:	ce 01       	movw	r24, r28
    479e:	bf df       	rcall	.-130    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    47a0:	81 11       	cpse	r24, r1
    47a2:	0c c0       	rjmp	.+24     	; 0x47bc <_ZN9Interface6TasterEv+0x52>
	{
		taste = '2';
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
    47a4:	9e 01       	movw	r18, r28
    47a6:	42 e0       	ldi	r20, 0x02	; 2
    47a8:	69 e2       	ldi	r22, 0x29	; 41
    47aa:	70 e0       	ldi	r23, 0x00	; 0
    47ac:	ce 01       	movw	r24, r28
    47ae:	b7 df       	rcall	.-146    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    47b0:	88 23       	and	r24, r24
    47b2:	31 f0       	breq	.+12     	; 0x47c0 <_ZN9Interface6TasterEv+0x56>
	{
		taste = '1';
    47b4:	11 e3       	ldi	r17, 0x31	; 49
    47b6:	05 c0       	rjmp	.+10     	; 0x47c2 <_ZN9Interface6TasterEv+0x58>
	
	//erste Zeile
	PORTC |= (1<<PORTC3);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[2])){//debounce(&PIND,PIND4)){
		taste = '3';
    47b8:	13 e3       	ldi	r17, 0x33	; 51
    47ba:	03 c0       	rjmp	.+6      	; 0x47c2 <_ZN9Interface6TasterEv+0x58>
	}
	else if (paradeb(&PIND,PIND3,&stat[1]))//debounce(&PIND,PIND3))
	{
		taste = '2';
    47bc:	12 e3       	ldi	r17, 0x32	; 50
    47be:	01 c0       	rjmp	.+2      	; 0x47c2 <_ZN9Interface6TasterEv+0x58>
	}
	return abfrage;
}

uint8_t Interface::Taster(){
	uint8_t taste = ' ';
    47c0:	10 e2       	ldi	r17, 0x20	; 32
	}
	else if (paradeb(&PIND,PIND2,&stat[0]))//debounce(&PIND,PIND2))
	{
		taste = '1';
	}
	PORTC &= ~(1<<PORTC3);
    47c2:	43 98       	cbi	0x08, 3	; 8
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
    47c4:	42 9a       	sbi	0x08, 2	; 8
    47c6:	82 e0       	ldi	r24, 0x02	; 2
    47c8:	8a 95       	dec	r24
    47ca:	f1 f7       	brne	.-4      	; 0x47c8 <_ZN9Interface6TasterEv+0x5e>
    47cc:	00 c0       	rjmp	.+0      	; 0x47ce <_ZN9Interface6TasterEv+0x64>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
    47ce:	9e 01       	movw	r18, r28
    47d0:	2b 5f       	subi	r18, 0xFB	; 251
    47d2:	3f 4f       	sbci	r19, 0xFF	; 255
    47d4:	44 e0       	ldi	r20, 0x04	; 4
    47d6:	69 e2       	ldi	r22, 0x29	; 41
    47d8:	70 e0       	ldi	r23, 0x00	; 0
    47da:	ce 01       	movw	r24, r28
    47dc:	a0 df       	rcall	.-192    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    47de:	81 11       	cpse	r24, r1
    47e0:	16 c0       	rjmp	.+44     	; 0x480e <_ZN9Interface6TasterEv+0xa4>
		taste = '6';
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
    47e2:	9e 01       	movw	r18, r28
    47e4:	2c 5f       	subi	r18, 0xFC	; 252
    47e6:	3f 4f       	sbci	r19, 0xFF	; 255
    47e8:	43 e0       	ldi	r20, 0x03	; 3
    47ea:	69 e2       	ldi	r22, 0x29	; 41
    47ec:	70 e0       	ldi	r23, 0x00	; 0
    47ee:	ce 01       	movw	r24, r28
    47f0:	96 df       	rcall	.-212    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    47f2:	81 11       	cpse	r24, r1
    47f4:	0e c0       	rjmp	.+28     	; 0x4812 <_ZN9Interface6TasterEv+0xa8>
	{
		taste = '5';
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
    47f6:	9e 01       	movw	r18, r28
    47f8:	2d 5f       	subi	r18, 0xFD	; 253
    47fa:	3f 4f       	sbci	r19, 0xFF	; 255
    47fc:	42 e0       	ldi	r20, 0x02	; 2
    47fe:	69 e2       	ldi	r22, 0x29	; 41
    4800:	70 e0       	ldi	r23, 0x00	; 0
    4802:	ce 01       	movw	r24, r28
    4804:	8c df       	rcall	.-232    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    4806:	88 23       	and	r24, r24
    4808:	29 f0       	breq	.+10     	; 0x4814 <_ZN9Interface6TasterEv+0xaa>
	{
		taste = '4';
    480a:	14 e3       	ldi	r17, 0x34	; 52
    480c:	03 c0       	rjmp	.+6      	; 0x4814 <_ZN9Interface6TasterEv+0xaa>
	
	//zweite Zeile
	PORTC |= (1<<PORTC2);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[5])){//debounce(&PIND,PIND4)){
		taste = '6';
    480e:	16 e3       	ldi	r17, 0x36	; 54
    4810:	01 c0       	rjmp	.+2      	; 0x4814 <_ZN9Interface6TasterEv+0xaa>
	}
	else if (paradeb(&PIND,PIND3,&stat[4]))//debounce(&PIND,PIND3))
	{
		taste = '5';
    4812:	15 e3       	ldi	r17, 0x35	; 53
	}
	else if (paradeb(&PIND,PIND2,&stat[3]))//debounce(&PIND,PIND2))
	{
		taste = '4';
	}
	PORTC &= ~(1<<PORTC2);
    4814:	42 98       	cbi	0x08, 2	; 8
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
    4816:	5e 9a       	sbi	0x0b, 6	; 11
    4818:	82 e0       	ldi	r24, 0x02	; 2
    481a:	8a 95       	dec	r24
    481c:	f1 f7       	brne	.-4      	; 0x481a <_ZN9Interface6TasterEv+0xb0>
    481e:	00 c0       	rjmp	.+0      	; 0x4820 <_ZN9Interface6TasterEv+0xb6>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
    4820:	9e 01       	movw	r18, r28
    4822:	28 5f       	subi	r18, 0xF8	; 248
    4824:	3f 4f       	sbci	r19, 0xFF	; 255
    4826:	44 e0       	ldi	r20, 0x04	; 4
    4828:	69 e2       	ldi	r22, 0x29	; 41
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	ce 01       	movw	r24, r28
    482e:	77 df       	rcall	.-274    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    4830:	81 11       	cpse	r24, r1
    4832:	16 c0       	rjmp	.+44     	; 0x4860 <_ZN9Interface6TasterEv+0xf6>
		taste = '9';
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
    4834:	9e 01       	movw	r18, r28
    4836:	29 5f       	subi	r18, 0xF9	; 249
    4838:	3f 4f       	sbci	r19, 0xFF	; 255
    483a:	43 e0       	ldi	r20, 0x03	; 3
    483c:	69 e2       	ldi	r22, 0x29	; 41
    483e:	70 e0       	ldi	r23, 0x00	; 0
    4840:	ce 01       	movw	r24, r28
    4842:	6d df       	rcall	.-294    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    4844:	81 11       	cpse	r24, r1
    4846:	0e c0       	rjmp	.+28     	; 0x4864 <_ZN9Interface6TasterEv+0xfa>
	{
		taste = '8';
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
    4848:	9e 01       	movw	r18, r28
    484a:	2a 5f       	subi	r18, 0xFA	; 250
    484c:	3f 4f       	sbci	r19, 0xFF	; 255
    484e:	42 e0       	ldi	r20, 0x02	; 2
    4850:	69 e2       	ldi	r22, 0x29	; 41
    4852:	70 e0       	ldi	r23, 0x00	; 0
    4854:	ce 01       	movw	r24, r28
    4856:	63 df       	rcall	.-314    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    4858:	88 23       	and	r24, r24
    485a:	29 f0       	breq	.+10     	; 0x4866 <_ZN9Interface6TasterEv+0xfc>
	{
		taste = '7';
    485c:	17 e3       	ldi	r17, 0x37	; 55
    485e:	03 c0       	rjmp	.+6      	; 0x4866 <_ZN9Interface6TasterEv+0xfc>
	
	//dritte Zeile
	PORTD |= (1<<PORTD6);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[8])){//debounce(&PIND,PIND4)){
		taste = '9';
    4860:	19 e3       	ldi	r17, 0x39	; 57
    4862:	01 c0       	rjmp	.+2      	; 0x4866 <_ZN9Interface6TasterEv+0xfc>
	}
	else if (paradeb(&PIND,PIND3,&stat[7]))//debounce(&PIND,PIND3))
	{
		taste = '8';
    4864:	18 e3       	ldi	r17, 0x38	; 56
	}
	else if (paradeb(&PIND,PIND2,&stat[6]))//debounce(&PIND,PIND2))
	{
		taste = '7';
	}
	PORTD &= ~(1<<PORTD6);
    4866:	5e 98       	cbi	0x0b, 6	; 11
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
    4868:	5d 9a       	sbi	0x0b, 5	; 11
    486a:	82 e0       	ldi	r24, 0x02	; 2
    486c:	8a 95       	dec	r24
    486e:	f1 f7       	brne	.-4      	; 0x486c <_ZN9Interface6TasterEv+0x102>
    4870:	00 c0       	rjmp	.+0      	; 0x4872 <_ZN9Interface6TasterEv+0x108>
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
    4872:	9e 01       	movw	r18, r28
    4874:	25 5f       	subi	r18, 0xF5	; 245
    4876:	3f 4f       	sbci	r19, 0xFF	; 255
    4878:	44 e0       	ldi	r20, 0x04	; 4
    487a:	69 e2       	ldi	r22, 0x29	; 41
    487c:	70 e0       	ldi	r23, 0x00	; 0
    487e:	ce 01       	movw	r24, r28
    4880:	4e df       	rcall	.-356    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    4882:	81 11       	cpse	r24, r1
    4884:	16 c0       	rjmp	.+44     	; 0x48b2 <_ZN9Interface6TasterEv+0x148>
		taste = '#';
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
    4886:	9e 01       	movw	r18, r28
    4888:	26 5f       	subi	r18, 0xF6	; 246
    488a:	3f 4f       	sbci	r19, 0xFF	; 255
    488c:	43 e0       	ldi	r20, 0x03	; 3
    488e:	69 e2       	ldi	r22, 0x29	; 41
    4890:	70 e0       	ldi	r23, 0x00	; 0
    4892:	ce 01       	movw	r24, r28
    4894:	44 df       	rcall	.-376    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    4896:	81 11       	cpse	r24, r1
    4898:	0e c0       	rjmp	.+28     	; 0x48b6 <_ZN9Interface6TasterEv+0x14c>
	{
		taste = '0';
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
    489a:	9e 01       	movw	r18, r28
    489c:	27 5f       	subi	r18, 0xF7	; 247
    489e:	3f 4f       	sbci	r19, 0xFF	; 255
    48a0:	42 e0       	ldi	r20, 0x02	; 2
    48a2:	69 e2       	ldi	r22, 0x29	; 41
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	ce 01       	movw	r24, r28
    48a8:	3a df       	rcall	.-396    	; 0x471e <_ZN9Interface7paradebEPVhhPh>
    48aa:	88 23       	and	r24, r24
    48ac:	29 f0       	breq	.+10     	; 0x48b8 <_ZN9Interface6TasterEv+0x14e>
	{
		taste = '*';
    48ae:	1a e2       	ldi	r17, 0x2A	; 42
    48b0:	03 c0       	rjmp	.+6      	; 0x48b8 <_ZN9Interface6TasterEv+0x14e>
	
	//vierte Zeile
	PORTD |= (1<<PORTD5);
	_delay_us(1);
	if(paradeb(&PIND,PIND4,&stat[11])){//debounce(&PIND,PIND4)){
		taste = '#';
    48b2:	13 e2       	ldi	r17, 0x23	; 35
    48b4:	01 c0       	rjmp	.+2      	; 0x48b8 <_ZN9Interface6TasterEv+0x14e>
	}
	else if (paradeb(&PIND,PIND3,&stat[10]))//debounce(&PIND,PIND3))
	{
		taste = '0';
    48b6:	10 e3       	ldi	r17, 0x30	; 48
	}
	else if (paradeb(&PIND,PIND2,&stat[9]))//debounce(&PIND,PIND2))
	{
		taste = '*';
	}
	PORTD &= ~(1<<PORTD5);
    48b8:	5d 98       	cbi	0x0b, 5	; 11
	
	return taste;
}
    48ba:	81 2f       	mov	r24, r17
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	1f 91       	pop	r17
    48c2:	08 95       	ret

000048c4 <_ZN9Interface7unifiedEv>:

uint8_t Interface::unified(){
	switch (Taster())
    48c4:	52 df       	rcall	.-348    	; 0x476a <_ZN9Interface6TasterEv>
    48c6:	48 2f       	mov	r20, r24
    48c8:	50 e0       	ldi	r21, 0x00	; 0
    48ca:	fa 01       	movw	r30, r20
    48cc:	b3 97       	sbiw	r30, 0x23	; 35
    48ce:	e7 31       	cpi	r30, 0x17	; 23
    48d0:	f1 05       	cpc	r31, r1
    48d2:	c0 f4       	brcc	.+48     	; 0x4904 <_ZN9Interface7unifiedEv+0x40>
    48d4:	ec 56       	subi	r30, 0x6C	; 108
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	0c 94 38 47 	jmp	0x8e70	; 0x8e70 <__tablejump2__>
	{
	case '1':
		return 'B';
		break;
	case '2':
		return 'u';
    48dc:	85 e7       	ldi	r24, 0x75	; 117
    48de:	08 95       	ret
		break;
	case '3':
		return 'A';
    48e0:	81 e4       	ldi	r24, 0x41	; 65
    48e2:	08 95       	ret
		break;
	case '4':
		return 'l';
    48e4:	8c e6       	ldi	r24, 0x6C	; 108
    48e6:	08 95       	ret
		break;
	case '5':
		return 'o';
    48e8:	8f e6       	ldi	r24, 0x6F	; 111
    48ea:	08 95       	ret
		break;
	case '6':
		return 'r';
    48ec:	82 e7       	ldi	r24, 0x72	; 114
    48ee:	08 95       	ret
		break;
	case '7':
		return 'Y';
    48f0:	89 e5       	ldi	r24, 0x59	; 89
    48f2:	08 95       	ret
		break;
	case '8':
		return 'd';
    48f4:	84 e6       	ldi	r24, 0x64	; 100
    48f6:	08 95       	ret
		break;
	case '9':
		return 'X';
    48f8:	88 e5       	ldi	r24, 0x58	; 88
    48fa:	08 95       	ret
		break;
	case '*':
		return 'e';
    48fc:	85 e6       	ldi	r24, 0x65	; 101
    48fe:	08 95       	ret
		break;
	case '0':
		return '0';
		break;
	case '#':
		return 'm';
    4900:	8d e6       	ldi	r24, 0x6D	; 109
    4902:	08 95       	ret
		break;
	default:
		return ' ';
    4904:	80 e2       	ldi	r24, 0x20	; 32
    4906:	08 95       	ret

uint8_t Interface::unified(){
	switch (Taster())
	{
	case '1':
		return 'B';
    4908:	82 e4       	ldi	r24, 0x42	; 66
		break;
	default:
		return ' ';
		break;
	}
}
    490a:	08 95       	ret

0000490c <_ZN9Interface17ZahlenausTastaturEv>:

uint8_t Interface::ZahlenausTastatur(){
    490c:	cf 93       	push	r28
    490e:	df 93       	push	r29
    4910:	ec 01       	movw	r28, r24
	while(true){
		uint8_t taste = Taster();
    4912:	ce 01       	movw	r24, r28
    4914:	2a df       	rcall	.-428    	; 0x476a <_ZN9Interface6TasterEv>
		if(taste>='0' && taste<='9'){
    4916:	80 53       	subi	r24, 0x30	; 48
    4918:	8a 30       	cpi	r24, 0x0A	; 10
    491a:	d8 f7       	brcc	.-10     	; 0x4912 <_ZN9Interface17ZahlenausTastaturEv+0x6>
			return taste - '0';
		}
	}
}
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	08 95       	ret

00004922 <_ZN7LSM303DD1Ev>:
	//FIFO Bypass Mode
	ACCBypassmode();
}

void LSM303D::ACCStreammode(){
	LSM303_command(FIFO_CTRL,(1<<FM1));
    4922:	46 96       	adiw	r24, 0x16	; 22
    4924:	be ce       	rjmp	.-644    	; 0x46a2 <_ZN3I2CD1Ev>
    4926:	08 95       	ret

00004928 <_ZN7LSM303D14LSM303_commandEhh>:
    4928:	0f 93       	push	r16
    492a:	1f 93       	push	r17
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	06 2f       	mov	r16, r22
    4932:	14 2f       	mov	r17, r20
    4934:	ec 01       	movw	r28, r24
    4936:	66 96       	adiw	r28, 0x16	; 22
    4938:	ce 01       	movw	r24, r28
    493a:	b4 de       	rcall	.-664    	; 0x46a4 <_ZN3I2C9twi_startEv>
    493c:	6a e3       	ldi	r22, 0x3A	; 58
    493e:	ce 01       	movw	r24, r28
    4940:	b9 de       	rcall	.-654    	; 0x46b4 <_ZN3I2C9twi_writeEh>
    4942:	60 2f       	mov	r22, r16
    4944:	ce 01       	movw	r24, r28
    4946:	b6 de       	rcall	.-660    	; 0x46b4 <_ZN3I2C9twi_writeEh>
    4948:	61 2f       	mov	r22, r17
    494a:	ce 01       	movw	r24, r28
    494c:	b3 de       	rcall	.-666    	; 0x46b4 <_ZN3I2C9twi_writeEh>
    494e:	ce 01       	movw	r24, r28
    4950:	ad de       	rcall	.-678    	; 0x46ac <_ZN3I2C8twi_stopEv>
    4952:	df 91       	pop	r29
    4954:	cf 91       	pop	r28
    4956:	1f 91       	pop	r17
    4958:	0f 91       	pop	r16
    495a:	08 95       	ret

0000495c <_ZN7LSM303D13ACCBypassmodeEv>:
}

void LSM303D::ACCBypassmode(){
	LSM303_command(FIFO_CTRL,0x00);
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	6e e2       	ldi	r22, 0x2E	; 46
    4960:	e3 cf       	rjmp	.-58     	; 0x4928 <_ZN7LSM303D14LSM303_commandEhh>
    4962:	08 95       	ret

00004964 <_ZN7LSM303D9acce_initEv>:
// default destructor
LSM303D::~LSM303D()
{
} //~LSM303D

void LSM303D::acce_init(){
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	ec 01       	movw	r28, r24
	//ACC Activ und 25Hz ohne Block dataread
	LSM303_command(CTRL1,(1<<AXEN)|(1<<AYEN)|(1<<AZEN)|(1<<AODR2));
    496a:	47 e4       	ldi	r20, 0x47	; 71
    496c:	60 e2       	ldi	r22, 0x20	; 32
    496e:	dc df       	rcall	.-72     	; 0x4928 <_ZN7LSM303D14LSM303_commandEhh>
	
	//ACC fuer +-2g
	LSM303_command(CTRL2,0x00);
    4970:	40 e0       	ldi	r20, 0x00	; 0
    4972:	61 e2       	ldi	r22, 0x21	; 33
    4974:	ce 01       	movw	r24, r28
    4976:	d8 df       	rcall	.-80     	; 0x4928 <_ZN7LSM303D14LSM303_commandEhh>
	
	//Temperatursensor an
	LSM303_command(CTRL5,(1<<TEMP_EN));
    4978:	40 e8       	ldi	r20, 0x80	; 128
    497a:	64 e2       	ldi	r22, 0x24	; 36
    497c:	ce 01       	movw	r24, r28
    497e:	d4 df       	rcall	.-88     	; 0x4928 <_ZN7LSM303D14LSM303_commandEhh>
	
	//FIFO Bypass Mode
	ACCBypassmode();
    4980:	ce 01       	movw	r24, r28
    4982:	ec df       	rcall	.-40     	; 0x495c <_ZN7LSM303D13ACCBypassmodeEv>
}
    4984:	df 91       	pop	r29
    4986:	cf 91       	pop	r28
    4988:	08 95       	ret

0000498a <_ZN7LSM303DC1Ev>:


#include "LSM303D.h"

// default constructor
LSM303D::LSM303D()
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	ec 01       	movw	r28, r24
    4990:	46 96       	adiw	r24, 0x16	; 22
    4992:	83 de       	rcall	.-762    	; 0x469a <_ZN3I2CC1Ev>
{
	//Variablen initialisieren
	Tempera=0;
    4994:	1f 82       	std	Y+7, r1	; 0x07
    4996:	1e 82       	std	Y+6, r1	; 0x06
	roll=0.0;
    4998:	18 86       	std	Y+8, r1	; 0x08
    499a:	19 86       	std	Y+9, r1	; 0x09
    499c:	1a 86       	std	Y+10, r1	; 0x0a
    499e:	1b 86       	std	Y+11, r1	; 0x0b
	pitch=0.0;
    49a0:	1c 86       	std	Y+12, r1	; 0x0c
    49a2:	1d 86       	std	Y+13, r1	; 0x0d
    49a4:	1e 86       	std	Y+14, r1	; 0x0e
    49a6:	1f 86       	std	Y+15, r1	; 0x0f
	Schrittzaehler=0;
    49a8:	19 8a       	std	Y+17, r1	; 0x11
    49aa:	18 8a       	std	Y+16, r1	; 0x10
	gravity=0;
    49ac:	1a 8a       	std	Y+18, r1	; 0x12
    49ae:	1b 8a       	std	Y+19, r1	; 0x13
    49b0:	1c 8a       	std	Y+20, r1	; 0x14
    49b2:	1d 8a       	std	Y+21, r1	; 0x15
	higher=0;
    49b4:	de 01       	movw	r26, r28
    49b6:	a1 52       	subi	r26, 0x21	; 33
    49b8:	bf 4f       	sbci	r27, 0xFF	; 255
    49ba:	1d 92       	st	X+, r1
    49bc:	1d 92       	st	X+, r1
    49be:	1d 92       	st	X+, r1
    49c0:	1c 92       	st	X, r1
    49c2:	13 97       	sbiw	r26, 0x03	; 3
	lower=0;
    49c4:	fe 01       	movw	r30, r28
    49c6:	ed 51       	subi	r30, 0x1D	; 29
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	10 82       	st	Z, r1
    49cc:	11 82       	std	Z+1, r1	; 0x01
    49ce:	12 82       	std	Z+2, r1	; 0x02
    49d0:	13 82       	std	Z+3, r1	; 0x03
	threschold=27;	//aus Erfahrung
    49d2:	34 96       	adiw	r30, 0x04	; 4
    49d4:	8b e1       	ldi	r24, 0x1B	; 27
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	91 83       	std	Z+1, r25	; 0x01
    49da:	80 83       	st	Z, r24
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
    49dc:	19 82       	std	Y+1, r1	; 0x01
    49de:	18 82       	st	Y, r1
    49e0:	1b 82       	std	Y+3, r1	; 0x03
    49e2:	1a 82       	std	Y+2, r1	; 0x02
    49e4:	1d 82       	std	Y+5, r1	; 0x05
    49e6:	1c 82       	std	Y+4, r1	; 0x04
    49e8:	e0 5d       	subi	r30, 0xD0	; 208
    49ea:	f1 09       	sbc	r31, r1
    49ec:	9d 01       	movw	r18, r26
	}
	for (uint8_t i=0;i<50;i++)
	{
		Daten[i]=0;
    49ee:	11 92       	st	Z+, r1
    49f0:	11 92       	st	Z+, r1
    49f2:	11 92       	st	Z+, r1
    49f4:	11 92       	st	Z+, r1
	threschold=27;	//aus Erfahrung
	for (uint8_t i=0;i<3;i++)
	{
		achsen_A[i]=0;
	}
	for (uint8_t i=0;i<50;i++)
    49f6:	e2 17       	cp	r30, r18
    49f8:	f3 07       	cpc	r31, r19
    49fa:	c9 f7       	brne	.-14     	; 0x49ee <_ZN7LSM303DC1Ev+0x64>
	{
		Daten[i]=0;
	}
	
	//ACC init
	acce_init();
    49fc:	ce 01       	movw	r24, r28
    49fe:	b2 df       	rcall	.-156    	; 0x4964 <_ZN7LSM303D9acce_initEv>
} //LSM303D
    4a00:	df 91       	pop	r29
    4a02:	cf 91       	pop	r28
    4a04:	08 95       	ret

00004a06 <_ZN7monitor11tastendruckEPh>:
	for (uint8_t i = 0; i < nsamples; ++i ) {
		sum += ADC_Read( channel );
	}
	
	return (uint16_t)( sum / nsamples );
}
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	08 95       	ret

00004a0a <_ZN3uhr11tastendruckEPh>:
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	db 01       	movw	r26, r22
    4a0e:	9c 91       	ld	r25, X
    4a10:	95 36       	cpi	r25, 0x65	; 101
    4a12:	39 f4       	brne	.+14     	; 0x4a22 <_ZN3uhr11tastendruckEPh+0x18>
    4a14:	81 a5       	ldd	r24, Z+41	; 0x29
    4a16:	81 30       	cpi	r24, 0x01	; 1
    4a18:	11 f4       	brne	.+4      	; 0x4a1e <_ZN3uhr11tastendruckEPh+0x14>
    4a1a:	11 a6       	std	Z+41, r1	; 0x29
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <_ZN3uhr11tastendruckEPh+0x18>
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	81 a7       	std	Z+41, r24	; 0x29
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	08 95       	ret

00004a26 <_ZN13einstellungen11tastendruckEPh>:
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	08 95       	ret

00004a2a <_ZN5menue11tastendruckEPh>:
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	08 95       	ret

00004a2e <_ZN9offscreen4drawEv>:
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29
    4a32:	ec 01       	movw	r28, r24
    4a34:	8f 89       	ldd	r24, Y+23	; 0x17
    4a36:	98 8d       	ldd	r25, Y+24	; 0x18
    4a38:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
    4a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a40:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    4a44:	df 91       	pop	r29
    4a46:	cf 91       	pop	r28
    4a48:	08 95       	ret

00004a4a <_ZN9wilkommen4drawEv>:
    4a4a:	ef 92       	push	r14
    4a4c:	ff 92       	push	r15
    4a4e:	0f 93       	push	r16
    4a50:	1f 93       	push	r17
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	ec 01       	movw	r28, r24
    4a58:	8f 89       	ldd	r24, Y+23	; 0x17
    4a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a5c:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
    4a60:	7e 01       	movw	r14, r28
    4a62:	22 e0       	ldi	r18, 0x02	; 2
    4a64:	e2 0e       	add	r14, r18
    4a66:	f1 1c       	adc	r15, r1
    4a68:	8f e0       	ldi	r24, 0x0F	; 15
    4a6a:	e6 e9       	ldi	r30, 0x96	; 150
    4a6c:	f1 e0       	ldi	r31, 0x01	; 1
    4a6e:	d7 01       	movw	r26, r14
    4a70:	01 90       	ld	r0, Z+
    4a72:	0d 92       	st	X+, r0
    4a74:	8a 95       	dec	r24
    4a76:	e1 f7       	brne	.-8      	; 0x4a70 <_ZN9wilkommen4drawEv+0x26>
    4a78:	8e e0       	ldi	r24, 0x0E	; 14
    4a7a:	8e 8b       	std	Y+22, r24	; 0x16
    4a7c:	00 e0       	ldi	r16, 0x00	; 0
    4a7e:	10 e0       	ldi	r17, 0x00	; 0
    4a80:	fe 01       	movw	r30, r28
    4a82:	e1 0f       	add	r30, r17
    4a84:	f1 1d       	adc	r31, r1
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	40 2f       	mov	r20, r16
    4a8a:	62 81       	ldd	r22, Z+2	; 0x02
    4a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a90:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4a94:	1f 5f       	subi	r17, 0xFF	; 255
    4a96:	0a 5f       	subi	r16, 0xFA	; 250
    4a98:	8e 89       	ldd	r24, Y+22	; 0x16
    4a9a:	18 17       	cp	r17, r24
    4a9c:	88 f3       	brcs	.-30     	; 0x4a80 <_ZN9wilkommen4drawEv+0x36>
    4a9e:	8f e0       	ldi	r24, 0x0F	; 15
    4aa0:	e5 ea       	ldi	r30, 0xA5	; 165
    4aa2:	f1 e0       	ldi	r31, 0x01	; 1
    4aa4:	d7 01       	movw	r26, r14
    4aa6:	01 90       	ld	r0, Z+
    4aa8:	0d 92       	st	X+, r0
    4aaa:	8a 95       	dec	r24
    4aac:	e1 f7       	brne	.-8      	; 0x4aa6 <_ZN9wilkommen4drawEv+0x5c>
    4aae:	8e e0       	ldi	r24, 0x0E	; 14
    4ab0:	8e 8b       	std	Y+22, r24	; 0x16
    4ab2:	00 e0       	ldi	r16, 0x00	; 0
    4ab4:	10 e0       	ldi	r17, 0x00	; 0
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	e1 0f       	add	r30, r17
    4aba:	f1 1d       	adc	r31, r1
    4abc:	28 e0       	ldi	r18, 0x08	; 8
    4abe:	40 2f       	mov	r20, r16
    4ac0:	62 81       	ldd	r22, Z+2	; 0x02
    4ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ac6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4aca:	1f 5f       	subi	r17, 0xFF	; 255
    4acc:	0a 5f       	subi	r16, 0xFA	; 250
    4ace:	8e 89       	ldd	r24, Y+22	; 0x16
    4ad0:	18 17       	cp	r17, r24
    4ad2:	88 f3       	brcs	.-30     	; 0x4ab6 <_ZN9wilkommen4drawEv+0x6c>
    4ad4:	80 e4       	ldi	r24, 0x40	; 64
    4ad6:	8f 93       	push	r24
    4ad8:	83 e4       	ldi	r24, 0x43	; 67
    4ada:	8f 93       	push	r24
    4adc:	83 e3       	ldi	r24, 0x33	; 51
    4ade:	8f 93       	push	r24
    4ae0:	8f 93       	push	r24
    4ae2:	84 eb       	ldi	r24, 0xB4	; 180
    4ae4:	91 e0       	ldi	r25, 0x01	; 1
    4ae6:	9f 93       	push	r25
    4ae8:	8f 93       	push	r24
    4aea:	ff 92       	push	r15
    4aec:	ef 92       	push	r14
    4aee:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4af2:	8e 8b       	std	Y+22, r24	; 0x16
    4af4:	2d b7       	in	r18, 0x3d	; 61
    4af6:	3e b7       	in	r19, 0x3e	; 62
    4af8:	28 5f       	subi	r18, 0xF8	; 248
    4afa:	3f 4f       	sbci	r19, 0xFF	; 255
    4afc:	0f b6       	in	r0, 0x3f	; 63
    4afe:	f8 94       	cli
    4b00:	3e bf       	out	0x3e, r19	; 62
    4b02:	0f be       	out	0x3f, r0	; 63
    4b04:	2d bf       	out	0x3d, r18	; 61
    4b06:	88 23       	and	r24, r24
    4b08:	89 f0       	breq	.+34     	; 0x4b2c <_ZN9wilkommen4drawEv+0xe2>
    4b0a:	00 e0       	ldi	r16, 0x00	; 0
    4b0c:	10 e0       	ldi	r17, 0x00	; 0
    4b0e:	fe 01       	movw	r30, r28
    4b10:	e1 0f       	add	r30, r17
    4b12:	f1 1d       	adc	r31, r1
    4b14:	20 e2       	ldi	r18, 0x20	; 32
    4b16:	40 2f       	mov	r20, r16
    4b18:	62 81       	ldd	r22, Z+2	; 0x02
    4b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b1e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4b22:	1f 5f       	subi	r17, 0xFF	; 255
    4b24:	0a 5f       	subi	r16, 0xFA	; 250
    4b26:	8e 89       	ldd	r24, Y+22	; 0x16
    4b28:	18 17       	cp	r17, r24
    4b2a:	88 f3       	brcs	.-30     	; 0x4b0e <_ZN9wilkommen4drawEv+0xc4>
    4b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    4b30:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	1f 91       	pop	r17
    4b3a:	0f 91       	pop	r16
    4b3c:	ff 90       	pop	r15
    4b3e:	ef 90       	pop	r14
    4b40:	08 95       	ret

00004b42 <_Z8ADC_Readh>:
    4b42:	ec e7       	ldi	r30, 0x7C	; 124
    4b44:	f0 e0       	ldi	r31, 0x00	; 0
    4b46:	90 81       	ld	r25, Z
    4b48:	8f 71       	andi	r24, 0x1F	; 31
    4b4a:	90 7e       	andi	r25, 0xE0	; 224
    4b4c:	89 2b       	or	r24, r25
    4b4e:	80 83       	st	Z, r24
    4b50:	ea e7       	ldi	r30, 0x7A	; 122
    4b52:	f0 e0       	ldi	r31, 0x00	; 0
    4b54:	80 81       	ld	r24, Z
    4b56:	80 64       	ori	r24, 0x40	; 64
    4b58:	80 83       	st	Z, r24
    4b5a:	80 81       	ld	r24, Z
    4b5c:	86 fd       	sbrc	r24, 6
    4b5e:	fd cf       	rjmp	.-6      	; 0x4b5a <_Z8ADC_Readh+0x18>
    4b60:	80 91 78 00 	lds	r24, 0x0078
    4b64:	90 91 79 00 	lds	r25, 0x0079
    4b68:	08 95       	ret

00004b6a <_Z14Batteriestatusv>:
#endif
#ifndef BATMAX
#define BATMAX	4.2
#endif

int8_t Batteriestatus(){
    4b6a:	cf 92       	push	r12
    4b6c:	df 92       	push	r13
    4b6e:	ef 92       	push	r14
    4b70:	ff 92       	push	r15
	uint16_t ADCwert=ADC_Read(0);
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	e6 df       	rcall	.-52     	; 0x4b42 <_Z8ADC_Readh>
	batterie = (ADCwert/1023.0)*3.29*SPANNUNGSTEILER;
    4b76:	bc 01       	movw	r22, r24
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	0e 94 95 40 	call	0x812a	; 0x812a <__floatunsisf>
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 ec       	ldi	r19, 0xC0	; 192
    4b84:	4f e7       	ldi	r20, 0x7F	; 127
    4b86:	54 e4       	ldi	r21, 0x44	; 68
    4b88:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    4b8c:	2c e5       	ldi	r18, 0x5C	; 92
    4b8e:	3f e8       	ldi	r19, 0x8F	; 143
    4b90:	42 e5       	ldi	r20, 0x52	; 82
    4b92:	50 e4       	ldi	r21, 0x40	; 64
    4b94:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    4b98:	2d e0       	ldi	r18, 0x0D	; 13
    4b9a:	31 e7       	ldi	r19, 0x71	; 113
    4b9c:	40 e0       	ldi	r20, 0x00	; 0
    4b9e:	50 e4       	ldi	r21, 0x40	; 64
    4ba0:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    4ba4:	60 93 13 09 	sts	0x0913, r22
    4ba8:	70 93 14 09 	sts	0x0914, r23
    4bac:	80 93 15 09 	sts	0x0915, r24
    4bb0:	90 93 16 09 	sts	0x0916, r25
	float stat = ((batterie-BATMIN)/(BATMAX-BATMIN)*100);
    4bb4:	26 e6       	ldi	r18, 0x66	; 102
    4bb6:	36 e6       	ldi	r19, 0x66	; 102
    4bb8:	46 e6       	ldi	r20, 0x66	; 102
    4bba:	50 e4       	ldi	r21, 0x40	; 64
    4bbc:	0e 94 94 3f 	call	0x7f28	; 0x7f28 <__subsf3>
    4bc0:	28 e9       	ldi	r18, 0x98	; 152
    4bc2:	39 e9       	ldi	r19, 0x99	; 153
    4bc4:	49 e1       	ldi	r20, 0x19	; 25
    4bc6:	5f e3       	ldi	r21, 0x3F	; 63
    4bc8:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	48 ec       	ldi	r20, 0xC8	; 200
    4bd2:	52 e4       	ldi	r21, 0x42	; 66
    4bd4:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    4bd8:	6b 01       	movw	r12, r22
    4bda:	7c 01       	movw	r14, r24
	uint8_t temp =(uint8_t) (stat*10);
    4bdc:	20 e0       	ldi	r18, 0x00	; 0
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	40 e2       	ldi	r20, 0x20	; 32
    4be2:	51 e4       	ldi	r21, 0x41	; 65
    4be4:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    4be8:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
	if (temp%10>=5)
    4bec:	8d ec       	ldi	r24, 0xCD	; 205
    4bee:	68 9f       	mul	r22, r24
    4bf0:	81 2d       	mov	r24, r1
    4bf2:	11 24       	eor	r1, r1
    4bf4:	86 95       	lsr	r24
    4bf6:	86 95       	lsr	r24
    4bf8:	86 95       	lsr	r24
    4bfa:	88 0f       	add	r24, r24
    4bfc:	28 2f       	mov	r18, r24
    4bfe:	22 0f       	add	r18, r18
    4c00:	22 0f       	add	r18, r18
    4c02:	82 0f       	add	r24, r18
    4c04:	96 2f       	mov	r25, r22
    4c06:	98 1b       	sub	r25, r24
    4c08:	95 30       	cpi	r25, 0x05	; 5
    4c0a:	70 f0       	brcs	.+28     	; 0x4c28 <_Z14Batteriestatusv+0xbe>
	{
		stat = (uint8_t)stat+1;
    4c0c:	c7 01       	movw	r24, r14
    4c0e:	b6 01       	movw	r22, r12
    4c10:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    4c14:	70 e0       	ldi	r23, 0x00	; 0
    4c16:	6f 5f       	subi	r22, 0xFF	; 255
    4c18:	7f 4f       	sbci	r23, 0xFF	; 255
    4c1a:	07 2e       	mov	r0, r23
    4c1c:	00 0c       	add	r0, r0
    4c1e:	88 0b       	sbc	r24, r24
    4c20:	99 0b       	sbc	r25, r25
    4c22:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    4c26:	09 c0       	rjmp	.+18     	; 0x4c3a <_Z14Batteriestatusv+0xd0>
	}
	else
	{
		stat = (uint8_t)stat;
    4c28:	c7 01       	movw	r24, r14
    4c2a:	b6 01       	movw	r22, r12
    4c2c:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    4c30:	70 e0       	ldi	r23, 0x00	; 0
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	0e 94 95 40 	call	0x812a	; 0x812a <__floatunsisf>
	}
	return stat;
    4c3a:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__fixsfsi>
    4c3e:	86 2f       	mov	r24, r22
}
    4c40:	ff 90       	pop	r15
    4c42:	ef 90       	pop	r14
    4c44:	df 90       	pop	r13
    4c46:	cf 90       	pop	r12
    4c48:	08 95       	ret

00004c4a <_ZN7wandern4drawEv>:
			GPSDISABLE();
		}
		return 0;
	}
	
	void draw(){
    4c4a:	cf 92       	push	r12
    4c4c:	df 92       	push	r13
    4c4e:	ef 92       	push	r14
    4c50:	ff 92       	push	r15
    4c52:	0f 93       	push	r16
    4c54:	1f 93       	push	r17
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4c5c:	8f 89       	ldd	r24, Y+23	; 0x17
    4c5e:	98 8d       	ldd	r25, Y+24	; 0x18
    4c60:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
    4c64:	10 e0       	ldi	r17, 0x00	; 0
    4c66:	e1 2c       	mov	r14, r1
    4c68:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    4c6a:	e9 8d       	ldd	r30, Y+25	; 0x19
    4c6c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4c6e:	ee 0d       	add	r30, r14
    4c70:	ff 1d       	adc	r31, r15
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	41 2f       	mov	r20, r17
    4c76:	60 81       	ld	r22, Z
    4c78:	8f 89       	ldd	r24, Y+23	; 0x17
    4c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    4c7c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4c80:	2f ef       	ldi	r18, 0xFF	; 255
    4c82:	e2 1a       	sub	r14, r18
    4c84:	f2 0a       	sbc	r15, r18
    4c86:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    4c88:	10 33       	cpi	r17, 0x30	; 48
    4c8a:	79 f7       	brne	.-34     	; 0x4c6a <_ZN7wandern4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    4c8c:	6e df       	rcall	.-292    	; 0x4b6a <_Z14Batteriestatusv>
    4c8e:	7e 01       	movw	r14, r28
    4c90:	32 e0       	ldi	r19, 0x02	; 2
    4c92:	e3 0e       	add	r14, r19
    4c94:	f1 1c       	adc	r15, r1
    4c96:	28 2f       	mov	r18, r24
    4c98:	08 2e       	mov	r0, r24
    4c9a:	00 0c       	add	r0, r0
    4c9c:	33 0b       	sbc	r19, r19
    4c9e:	3f 93       	push	r19
    4ca0:	8f 93       	push	r24
    4ca2:	82 ec       	ldi	r24, 0xC2	; 194
    4ca4:	91 e0       	ldi	r25, 0x01	; 1
    4ca6:	9f 93       	push	r25
    4ca8:	8f 93       	push	r24
    4caa:	ff 92       	push	r15
    4cac:	ef 92       	push	r14
    4cae:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4cb2:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4cb4:	15 e1       	ldi	r17, 0x15	; 21
    4cb6:	18 1b       	sub	r17, r24
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	15 31       	cpi	r17, 0x15	; 21
    4cc6:	08 f0       	brcs	.+2      	; 0x4cca <_ZN7wandern4drawEv+0x80>
    4cc8:	5b c1       	rjmp	.+694    	; 0x4f80 <_ZN7wandern4drawEv+0x336>
    4cca:	01 2f       	mov	r16, r17
    4ccc:	00 0f       	add	r16, r16
    4cce:	01 0f       	add	r16, r17
    4cd0:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    4cd2:	8e 89       	ldd	r24, Y+22	; 0x16
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	e1 0f       	add	r30, r17
    4cd8:	f1 1d       	adc	r31, r1
    4cda:	e8 0f       	add	r30, r24
    4cdc:	f1 1d       	adc	r31, r1
    4cde:	73 97       	sbiw	r30, 0x13	; 19
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	40 2f       	mov	r20, r16
    4ce4:	60 81       	ld	r22, Z
    4ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    4cea:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4cee:	1f 5f       	subi	r17, 0xFF	; 255
    4cf0:	0a 5f       	subi	r16, 0xFA	; 250
    4cf2:	15 31       	cpi	r17, 0x15	; 21
    4cf4:	71 f7       	brne	.-36     	; 0x4cd2 <_ZN7wandern4drawEv+0x88>
    4cf6:	44 c1       	rjmp	.+648    	; 0x4f80 <_ZN7wandern4drawEv+0x336>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    4cf8:	e9 8d       	ldd	r30, Y+25	; 0x19
    4cfa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4cfc:	ec 0d       	add	r30, r12
    4cfe:	fd 1d       	adc	r31, r13
    4d00:	28 e3       	ldi	r18, 0x38	; 56
    4d02:	41 2f       	mov	r20, r17
    4d04:	60 85       	ldd	r22, Z+8	; 0x08
    4d06:	8f 89       	ldd	r24, Y+23	; 0x17
    4d08:	98 8d       	ldd	r25, Y+24	; 0x18
    4d0a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4d0e:	8f ef       	ldi	r24, 0xFF	; 255
    4d10:	c8 1a       	sub	r12, r24
    4d12:	d8 0a       	sbc	r13, r24
    4d14:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    4d16:	10 38       	cpi	r17, 0x80	; 128
    4d18:	79 f7       	brne	.-34     	; 0x4cf8 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"Data: %c%c%c%c%c",gpsdata[0],gpsdata[1],gpsdata[2],gpsdata[3],gpsdata[4]);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
		*/

		//Latitude
		buffersize=sprintf(buffer,"Lat: %.7f",lat);
    4d1a:	80 91 be 08 	lds	r24, 0x08BE
    4d1e:	8f 93       	push	r24
    4d20:	80 91 bd 08 	lds	r24, 0x08BD
    4d24:	8f 93       	push	r24
    4d26:	80 91 bc 08 	lds	r24, 0x08BC
    4d2a:	8f 93       	push	r24
    4d2c:	80 91 bb 08 	lds	r24, 0x08BB
    4d30:	8f 93       	push	r24
    4d32:	8c ec       	ldi	r24, 0xCC	; 204
    4d34:	91 e0       	ldi	r25, 0x01	; 1
    4d36:	9f 93       	push	r25
    4d38:	8f 93       	push	r24
    4d3a:	ff 92       	push	r15
    4d3c:	ef 92       	push	r14
    4d3e:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4d42:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    4d44:	2d b7       	in	r18, 0x3d	; 61
    4d46:	3e b7       	in	r19, 0x3e	; 62
    4d48:	28 5f       	subi	r18, 0xF8	; 248
    4d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d4c:	0f b6       	in	r0, 0x3f	; 63
    4d4e:	f8 94       	cli
    4d50:	3e bf       	out	0x3e, r19	; 62
    4d52:	0f be       	out	0x3f, r0	; 63
    4d54:	2d bf       	out	0x3d, r18	; 61
    4d56:	88 23       	and	r24, r24
    4d58:	89 f0       	breq	.+34     	; 0x4d7c <_ZN7wandern4drawEv+0x132>
    4d5a:	00 e0       	ldi	r16, 0x00	; 0
    4d5c:	10 e0       	ldi	r17, 0x00	; 0
    4d5e:	fe 01       	movw	r30, r28
    4d60:	e1 0f       	add	r30, r17
    4d62:	f1 1d       	adc	r31, r1
    4d64:	20 e1       	ldi	r18, 0x10	; 16
    4d66:	40 2f       	mov	r20, r16
    4d68:	62 81       	ldd	r22, Z+2	; 0x02
    4d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d6e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4d72:	1f 5f       	subi	r17, 0xFF	; 255
    4d74:	0a 5f       	subi	r16, 0xFA	; 250
    4d76:	8e 89       	ldd	r24, Y+22	; 0x16
    4d78:	18 17       	cp	r17, r24
    4d7a:	88 f3       	brcs	.-30     	; 0x4d5e <_ZN7wandern4drawEv+0x114>
		
		//Longitude
		buffersize=sprintf(buffer,"Lon: %.7f",lon);
    4d7c:	80 91 aa 08 	lds	r24, 0x08AA
    4d80:	8f 93       	push	r24
    4d82:	80 91 a9 08 	lds	r24, 0x08A9
    4d86:	8f 93       	push	r24
    4d88:	80 91 a8 08 	lds	r24, 0x08A8
    4d8c:	8f 93       	push	r24
    4d8e:	80 91 a7 08 	lds	r24, 0x08A7
    4d92:	8f 93       	push	r24
    4d94:	86 ed       	ldi	r24, 0xD6	; 214
    4d96:	91 e0       	ldi	r25, 0x01	; 1
    4d98:	9f 93       	push	r25
    4d9a:	8f 93       	push	r24
    4d9c:	ff 92       	push	r15
    4d9e:	ef 92       	push	r14
    4da0:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4da4:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    4da6:	2d b7       	in	r18, 0x3d	; 61
    4da8:	3e b7       	in	r19, 0x3e	; 62
    4daa:	28 5f       	subi	r18, 0xF8	; 248
    4dac:	3f 4f       	sbci	r19, 0xFF	; 255
    4dae:	0f b6       	in	r0, 0x3f	; 63
    4db0:	f8 94       	cli
    4db2:	3e bf       	out	0x3e, r19	; 62
    4db4:	0f be       	out	0x3f, r0	; 63
    4db6:	2d bf       	out	0x3d, r18	; 61
    4db8:	88 23       	and	r24, r24
    4dba:	89 f0       	breq	.+34     	; 0x4dde <_ZN7wandern4drawEv+0x194>
    4dbc:	00 e0       	ldi	r16, 0x00	; 0
    4dbe:	10 e0       	ldi	r17, 0x00	; 0
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	e1 0f       	add	r30, r17
    4dc4:	f1 1d       	adc	r31, r1
    4dc6:	28 e1       	ldi	r18, 0x18	; 24
    4dc8:	40 2f       	mov	r20, r16
    4dca:	62 81       	ldd	r22, Z+2	; 0x02
    4dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    4dce:	98 8d       	ldd	r25, Y+24	; 0x18
    4dd0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4dd4:	1f 5f       	subi	r17, 0xFF	; 255
    4dd6:	0a 5f       	subi	r16, 0xFA	; 250
    4dd8:	8e 89       	ldd	r24, Y+22	; 0x16
    4dda:	18 17       	cp	r17, r24
    4ddc:	88 f3       	brcs	.-30     	; 0x4dc0 <_ZN7wandern4drawEv+0x176>
			
		//Speed
		buffersize=sprintf(buffer,"Spe: %.2f",gpsspeed);
    4dde:	80 91 96 08 	lds	r24, 0x0896
    4de2:	8f 93       	push	r24
    4de4:	80 91 95 08 	lds	r24, 0x0895
    4de8:	8f 93       	push	r24
    4dea:	80 91 94 08 	lds	r24, 0x0894
    4dee:	8f 93       	push	r24
    4df0:	80 91 93 08 	lds	r24, 0x0893
    4df4:	8f 93       	push	r24
    4df6:	80 ee       	ldi	r24, 0xE0	; 224
    4df8:	91 e0       	ldi	r25, 0x01	; 1
    4dfa:	9f 93       	push	r25
    4dfc:	8f 93       	push	r24
    4dfe:	ff 92       	push	r15
    4e00:	ef 92       	push	r14
    4e02:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4e06:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,4*charhighte);}
    4e08:	2d b7       	in	r18, 0x3d	; 61
    4e0a:	3e b7       	in	r19, 0x3e	; 62
    4e0c:	28 5f       	subi	r18, 0xF8	; 248
    4e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	3e bf       	out	0x3e, r19	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	2d bf       	out	0x3d, r18	; 61
    4e1a:	88 23       	and	r24, r24
    4e1c:	89 f0       	breq	.+34     	; 0x4e40 <_ZN7wandern4drawEv+0x1f6>
    4e1e:	00 e0       	ldi	r16, 0x00	; 0
    4e20:	10 e0       	ldi	r17, 0x00	; 0
    4e22:	fe 01       	movw	r30, r28
    4e24:	e1 0f       	add	r30, r17
    4e26:	f1 1d       	adc	r31, r1
    4e28:	20 e2       	ldi	r18, 0x20	; 32
    4e2a:	40 2f       	mov	r20, r16
    4e2c:	62 81       	ldd	r22, Z+2	; 0x02
    4e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e30:	98 8d       	ldd	r25, Y+24	; 0x18
    4e32:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4e36:	1f 5f       	subi	r17, 0xFF	; 255
    4e38:	0a 5f       	subi	r16, 0xFA	; 250
    4e3a:	8e 89       	ldd	r24, Y+22	; 0x16
    4e3c:	18 17       	cp	r17, r24
    4e3e:	88 f3       	brcs	.-30     	; 0x4e22 <_ZN7wandern4drawEv+0x1d8>
			
		//gpstime
		buffersize=sprintf(buffer,"%02i:%02i:%02i %02i.%02i.%02i",gpsstunde,gpsminute,gpssekunde,gpsTag,gpsMonat,gpsJahr);
    4e40:	80 91 8d 08 	lds	r24, 0x088D
    4e44:	1f 92       	push	r1
    4e46:	8f 93       	push	r24
    4e48:	80 91 8e 08 	lds	r24, 0x088E
    4e4c:	1f 92       	push	r1
    4e4e:	8f 93       	push	r24
    4e50:	80 91 8f 08 	lds	r24, 0x088F
    4e54:	1f 92       	push	r1
    4e56:	8f 93       	push	r24
    4e58:	80 91 90 08 	lds	r24, 0x0890
    4e5c:	1f 92       	push	r1
    4e5e:	8f 93       	push	r24
    4e60:	80 91 91 08 	lds	r24, 0x0891
    4e64:	1f 92       	push	r1
    4e66:	8f 93       	push	r24
    4e68:	80 91 92 08 	lds	r24, 0x0892
    4e6c:	1f 92       	push	r1
    4e6e:	8f 93       	push	r24
    4e70:	8a ee       	ldi	r24, 0xEA	; 234
    4e72:	91 e0       	ldi	r25, 0x01	; 1
    4e74:	9f 93       	push	r25
    4e76:	8f 93       	push	r24
    4e78:	ff 92       	push	r15
    4e7a:	ef 92       	push	r14
    4e7c:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4e80:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    4e82:	2d b7       	in	r18, 0x3d	; 61
    4e84:	3e b7       	in	r19, 0x3e	; 62
    4e86:	20 5f       	subi	r18, 0xF0	; 240
    4e88:	3f 4f       	sbci	r19, 0xFF	; 255
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	f8 94       	cli
    4e8e:	3e bf       	out	0x3e, r19	; 62
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	2d bf       	out	0x3d, r18	; 61
    4e94:	88 23       	and	r24, r24
    4e96:	89 f0       	breq	.+34     	; 0x4eba <_ZN7wandern4drawEv+0x270>
    4e98:	00 e0       	ldi	r16, 0x00	; 0
    4e9a:	10 e0       	ldi	r17, 0x00	; 0
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	e1 0f       	add	r30, r17
    4ea0:	f1 1d       	adc	r31, r1
    4ea2:	28 e2       	ldi	r18, 0x28	; 40
    4ea4:	40 2f       	mov	r20, r16
    4ea6:	62 81       	ldd	r22, Z+2	; 0x02
    4ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    4eac:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4eb0:	1f 5f       	subi	r17, 0xFF	; 255
    4eb2:	0a 5f       	subi	r16, 0xFA	; 250
    4eb4:	8e 89       	ldd	r24, Y+22	; 0x16
    4eb6:	18 17       	cp	r17, r24
    4eb8:	88 f3       	brcs	.-30     	; 0x4e9c <_ZN7wandern4drawEv+0x252>
		
		
		//Druckdaten	
		buffersize=sprintf(buffer,"%.02f",druck.pressure);
    4eba:	e7 e1       	ldi	r30, 0x17	; 23
    4ebc:	f9 e0       	ldi	r31, 0x09	; 9
    4ebe:	83 81       	ldd	r24, Z+3	; 0x03
    4ec0:	8f 93       	push	r24
    4ec2:	82 81       	ldd	r24, Z+2	; 0x02
    4ec4:	8f 93       	push	r24
    4ec6:	81 81       	ldd	r24, Z+1	; 0x01
    4ec8:	8f 93       	push	r24
    4eca:	80 81       	ld	r24, Z
    4ecc:	8f 93       	push	r24
    4ece:	88 e0       	ldi	r24, 0x08	; 8
    4ed0:	92 e0       	ldi	r25, 0x02	; 2
    4ed2:	9f 93       	push	r25
    4ed4:	8f 93       	push	r24
    4ed6:	ff 92       	push	r15
    4ed8:	ef 92       	push	r14
    4eda:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4ede:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,6*charhighte);}
    4ee0:	2d b7       	in	r18, 0x3d	; 61
    4ee2:	3e b7       	in	r19, 0x3e	; 62
    4ee4:	28 5f       	subi	r18, 0xF8	; 248
    4ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee8:	0f b6       	in	r0, 0x3f	; 63
    4eea:	f8 94       	cli
    4eec:	3e bf       	out	0x3e, r19	; 62
    4eee:	0f be       	out	0x3f, r0	; 63
    4ef0:	2d bf       	out	0x3d, r18	; 61
    4ef2:	88 23       	and	r24, r24
    4ef4:	89 f0       	breq	.+34     	; 0x4f18 <_ZN7wandern4drawEv+0x2ce>
    4ef6:	00 e0       	ldi	r16, 0x00	; 0
    4ef8:	10 e0       	ldi	r17, 0x00	; 0
    4efa:	fe 01       	movw	r30, r28
    4efc:	e1 0f       	add	r30, r17
    4efe:	f1 1d       	adc	r31, r1
    4f00:	20 e3       	ldi	r18, 0x30	; 48
    4f02:	40 2f       	mov	r20, r16
    4f04:	62 81       	ldd	r22, Z+2	; 0x02
    4f06:	8f 89       	ldd	r24, Y+23	; 0x17
    4f08:	98 8d       	ldd	r25, Y+24	; 0x18
    4f0a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4f0e:	1f 5f       	subi	r17, 0xFF	; 255
    4f10:	0a 5f       	subi	r16, 0xFA	; 250
    4f12:	8e 89       	ldd	r24, Y+22	; 0x16
    4f14:	18 17       	cp	r17, r24
    4f16:	88 f3       	brcs	.-30     	; 0x4efa <_ZN7wandern4drawEv+0x2b0>
		
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
    4f18:	e7 e1       	ldi	r30, 0x17	; 23
    4f1a:	f9 e0       	ldi	r31, 0x09	; 9
    4f1c:	87 85       	ldd	r24, Z+15	; 0x0f
    4f1e:	8f 93       	push	r24
    4f20:	86 85       	ldd	r24, Z+14	; 0x0e
    4f22:	8f 93       	push	r24
    4f24:	85 85       	ldd	r24, Z+13	; 0x0d
    4f26:	8f 93       	push	r24
    4f28:	84 85       	ldd	r24, Z+12	; 0x0c
    4f2a:	8f 93       	push	r24
    4f2c:	88 e0       	ldi	r24, 0x08	; 8
    4f2e:	92 e0       	ldi	r25, 0x02	; 2
    4f30:	9f 93       	push	r25
    4f32:	8f 93       	push	r24
    4f34:	ff 92       	push	r15
    4f36:	ef 92       	push	r14
    4f38:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4f3c:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,7*charhighte);}
    4f3e:	2d b7       	in	r18, 0x3d	; 61
    4f40:	3e b7       	in	r19, 0x3e	; 62
    4f42:	28 5f       	subi	r18, 0xF8	; 248
    4f44:	3f 4f       	sbci	r19, 0xFF	; 255
    4f46:	0f b6       	in	r0, 0x3f	; 63
    4f48:	f8 94       	cli
    4f4a:	3e bf       	out	0x3e, r19	; 62
    4f4c:	0f be       	out	0x3f, r0	; 63
    4f4e:	2d bf       	out	0x3d, r18	; 61
    4f50:	88 23       	and	r24, r24
    4f52:	89 f0       	breq	.+34     	; 0x4f76 <_ZN7wandern4drawEv+0x32c>
    4f54:	00 e0       	ldi	r16, 0x00	; 0
    4f56:	10 e0       	ldi	r17, 0x00	; 0
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e1 0f       	add	r30, r17
    4f5c:	f1 1d       	adc	r31, r1
    4f5e:	28 e3       	ldi	r18, 0x38	; 56
    4f60:	40 2f       	mov	r20, r16
    4f62:	62 81       	ldd	r22, Z+2	; 0x02
    4f64:	8f 89       	ldd	r24, Y+23	; 0x17
    4f66:	98 8d       	ldd	r25, Y+24	; 0x18
    4f68:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    4f6c:	1f 5f       	subi	r17, 0xFF	; 255
    4f6e:	0a 5f       	subi	r16, 0xFA	; 250
    4f70:	8e 89       	ldd	r24, Y+22	; 0x16
    4f72:	18 17       	cp	r17, r24
    4f74:	88 f3       	brcs	.-30     	; 0x4f58 <_ZN7wandern4drawEv+0x30e>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    4f76:	8f 89       	ldd	r24, Y+23	; 0x17
    4f78:	98 8d       	ldd	r25, Y+24	; 0x18
    4f7a:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    4f7e:	04 c0       	rjmp	.+8      	; 0x4f88 <_ZN7wandern4drawEv+0x33e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4f80:	10 e5       	ldi	r17, 0x50	; 80
    4f82:	c1 2c       	mov	r12, r1
    4f84:	d1 2c       	mov	r13, r1
    4f86:	b8 ce       	rjmp	.-656    	; 0x4cf8 <_ZN7wandern4drawEv+0xae>
		buffersize=sprintf(buffer,"%.02f",druck.altitude);
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,7*charhighte);}
		
			
		send();	
	}
    4f88:	df 91       	pop	r29
    4f8a:	cf 91       	pop	r28
    4f8c:	1f 91       	pop	r17
    4f8e:	0f 91       	pop	r16
    4f90:	ff 90       	pop	r15
    4f92:	ef 90       	pop	r14
    4f94:	df 90       	pop	r13
    4f96:	cf 90       	pop	r12
    4f98:	08 95       	ret

00004f9a <_ZN5tacho4drawEv>:
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    4f9a:	af 92       	push	r10
    4f9c:	bf 92       	push	r11
    4f9e:	cf 92       	push	r12
    4fa0:	df 92       	push	r13
    4fa2:	ef 92       	push	r14
    4fa4:	ff 92       	push	r15
    4fa6:	0f 93       	push	r16
    4fa8:	1f 93       	push	r17
    4faa:	cf 93       	push	r28
    4fac:	df 93       	push	r29
    4fae:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    4fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    4fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    4fb4:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
    4fb8:	d8 dd       	rcall	.-1104   	; 0x4b6a <_Z14Batteriestatusv>
    4fba:	5e 01       	movw	r10, r28
    4fbc:	22 e0       	ldi	r18, 0x02	; 2
    4fbe:	a2 0e       	add	r10, r18
    4fc0:	b1 1c       	adc	r11, r1
    4fc2:	28 2f       	mov	r18, r24
    4fc4:	08 2e       	mov	r0, r24
    4fc6:	00 0c       	add	r0, r0
    4fc8:	33 0b       	sbc	r19, r19
    4fca:	3f 93       	push	r19
    4fcc:	8f 93       	push	r24
    4fce:	8e e0       	ldi	r24, 0x0E	; 14
    4fd0:	92 e0       	ldi	r25, 0x02	; 2
    4fd2:	9f 93       	push	r25
    4fd4:	8f 93       	push	r24
    4fd6:	bf 92       	push	r11
    4fd8:	af 92       	push	r10
    4fda:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    4fde:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    4fe0:	95 e1       	ldi	r25, 0x15	; 21
    4fe2:	09 2f       	mov	r16, r25
    4fe4:	08 1b       	sub	r16, r24
    4fe6:	0f 90       	pop	r0
    4fe8:	0f 90       	pop	r0
    4fea:	0f 90       	pop	r0
    4fec:	0f 90       	pop	r0
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	05 31       	cpi	r16, 0x15	; 21
    4ff4:	08 f0       	brcs	.+2      	; 0x4ff8 <_ZN5tacho4drawEv+0x5e>
    4ff6:	d4 c1       	rjmp	.+936    	; 0x53a0 <_ZN5tacho4drawEv+0x406>
    4ff8:	e0 2e       	mov	r14, r16
    4ffa:	ee 0c       	add	r14, r14
    4ffc:	e0 0e       	add	r14, r16
    4ffe:	1e 2d       	mov	r17, r14
    5000:	11 0f       	add	r17, r17
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    5002:	8e 89       	ldd	r24, Y+22	; 0x16
    5004:	fe 01       	movw	r30, r28
    5006:	e0 0f       	add	r30, r16
    5008:	f1 1d       	adc	r31, r1
    500a:	e8 0f       	add	r30, r24
    500c:	f1 1d       	adc	r31, r1
    500e:	73 97       	sbiw	r30, 0x13	; 19
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	41 2f       	mov	r20, r17
    5014:	60 81       	ld	r22, Z
    5016:	8f 89       	ldd	r24, Y+23	; 0x17
    5018:	98 8d       	ldd	r25, Y+24	; 0x18
    501a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 2:	//standard Header fuer fast alle Pages
				buffersize=sprintf(buffer,"Bat.: %i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    501e:	0f 5f       	subi	r16, 0xFF	; 255
    5020:	1a 5f       	subi	r17, 0xFA	; 250
    5022:	05 31       	cpi	r16, 0x15	; 21
    5024:	71 f7       	brne	.-36     	; 0x5002 <_ZN5tacho4drawEv+0x68>
    5026:	bc c1       	rjmp	.+888    	; 0x53a0 <_ZN5tacho4drawEv+0x406>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    5028:	e9 8d       	ldd	r30, Y+25	; 0x19
    502a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    502c:	ec 0d       	add	r30, r12
    502e:	fd 1d       	adc	r31, r13
    5030:	28 e3       	ldi	r18, 0x38	; 56
    5032:	41 2f       	mov	r20, r17
    5034:	60 85       	ldd	r22, Z+8	; 0x08
    5036:	8f 89       	ldd	r24, Y+23	; 0x17
    5038:	98 8d       	ldd	r25, Y+24	; 0x18
    503a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    503e:	3f ef       	ldi	r19, 0xFF	; 255
    5040:	c3 1a       	sub	r12, r19
    5042:	d3 0a       	sbc	r13, r19
    5044:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    5046:	10 38       	cpi	r17, 0x80	; 128
    5048:	79 f7       	brne	.-34     	; 0x5028 <_ZN5tacho4drawEv+0x8e>
		monitor::draw();
		header(2);
		bottom();

		//Rahmen zeichnen
		oled->drawHLine(0,SSD1306_HEIGHT-9,SSD1306_WIDTH);
    504a:	20 e8       	ldi	r18, 0x80	; 128
    504c:	47 e3       	ldi	r20, 0x37	; 55
    504e:	60 e0       	ldi	r22, 0x00	; 0
    5050:	8f 89       	ldd	r24, Y+23	; 0x17
    5052:	98 8d       	ldd	r25, Y+24	; 0x18
    5054:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(0,numbersmalhight-1,SSD1306_WIDTH/2+5);
    5058:	25 e4       	ldi	r18, 0x45	; 69
    505a:	4f e0       	ldi	r20, 0x0F	; 15
    505c:	60 e0       	ldi	r22, 0x00	; 0
    505e:	8f 89       	ldd	r24, Y+23	; 0x17
    5060:	98 8d       	ldd	r25, Y+24	; 0x18
    5062:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN7Display9drawHLineEhhh>
		oled->drawHLine(SSD1306_WIDTH/2+5,charhighte-1,SSD1306_WIDTH/2-5);
    5066:	2b e3       	ldi	r18, 0x3B	; 59
    5068:	47 e0       	ldi	r20, 0x07	; 7
    506a:	65 e4       	ldi	r22, 0x45	; 69
    506c:	8f 89       	ldd	r24, Y+23	; 0x17
    506e:	98 8d       	ldd	r25, Y+24	; 0x18
    5070:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH/2+5,0,numbersmalhight);
    5074:	20 e1       	ldi	r18, 0x10	; 16
    5076:	40 e0       	ldi	r20, 0x00	; 0
    5078:	65 e4       	ldi	r22, 0x45	; 69
    507a:	8f 89       	ldd	r24, Y+23	; 0x17
    507c:	98 8d       	ldd	r25, Y+24	; 0x18
    507e:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,5*charhighte-1,4*numbersmalsize+1);
    5082:	21 e4       	ldi	r18, 0x41	; 65
    5084:	47 e2       	ldi	r20, 0x27	; 39
    5086:	6f e3       	ldi	r22, 0x3F	; 63
    5088:	8f 89       	ldd	r24, Y+23	; 0x17
    508a:	98 8d       	ldd	r25, Y+24	; 0x18
    508c:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN7Display9drawHLineEhhh>
		oled->drawVLine(SSD1306_WIDTH-4*numbersmalsize-1,numbersmalhight,SSD1306_HEIGHT-numbersmalhight);
    5090:	20 e3       	ldi	r18, 0x30	; 48
    5092:	40 e1       	ldi	r20, 0x10	; 16
    5094:	6f e3       	ldi	r22, 0x3F	; 63
    5096:	8f 89       	ldd	r24, Y+23	; 0x17
    5098:	98 8d       	ldd	r25, Y+24	; 0x18
    509a:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN7Display9drawVLineEhhh>
		oled->drawHLine(SSD1306_WIDTH-4*numbersmalsize-1,3*charhighte,4*numbersmalsize+1);
    509e:	21 e4       	ldi	r18, 0x41	; 65
    50a0:	48 e1       	ldi	r20, 0x18	; 24
    50a2:	6f e3       	ldi	r22, 0x3F	; 63
    50a4:	8f 89       	ldd	r24, Y+23	; 0x17
    50a6:	98 8d       	ldd	r25, Y+24	; 0x18
    50a8:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN7Display9drawHLineEhhh>

		//lesbare Uhr
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',0*numbersmalsize,0*charhighte);
    50ac:	e9 8d       	ldd	r30, Y+25	; 0x19
    50ae:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50b0:	60 81       	ld	r22, Z
    50b2:	60 53       	subi	r22, 0x30	; 48
    50b4:	20 e0       	ldi	r18, 0x00	; 0
    50b6:	40 e0       	ldi	r20, 0x00	; 0
    50b8:	8f 89       	ldd	r24, Y+23	; 0x17
    50ba:	98 8d       	ldd	r25, Y+24	; 0x18
    50bc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',1*numbersmalsize,0*charhighte);
    50c0:	e9 8d       	ldd	r30, Y+25	; 0x19
    50c2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50c4:	61 81       	ldd	r22, Z+1	; 0x01
    50c6:	60 53       	subi	r22, 0x30	; 48
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	40 e1       	ldi	r20, 0x10	; 16
    50cc:	8f 89       	ldd	r24, Y+23	; 0x17
    50ce:	98 8d       	ldd	r25, Y+24	; 0x18
    50d0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
    50d4:	e9 8d       	ldd	r30, Y+25	; 0x19
    50d6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50d8:	63 81       	ldd	r22, Z+3	; 0x03
    50da:	60 53       	subi	r22, 0x30	; 48
    50dc:	20 e0       	ldi	r18, 0x00	; 0
    50de:	45 e2       	ldi	r20, 0x25	; 37
    50e0:	8f 89       	ldd	r24, Y+23	; 0x17
    50e2:	98 8d       	ldd	r25, Y+24	; 0x18
    50e4:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);
    50e8:	e9 8d       	ldd	r30, Y+25	; 0x19
    50ea:	fa 8d       	ldd	r31, Y+26	; 0x1a
    50ec:	64 81       	ldd	r22, Z+4	; 0x04
    50ee:	60 53       	subi	r22, 0x30	; 48
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	45 e3       	ldi	r20, 0x35	; 53
    50f4:	8f 89       	ldd	r24, Y+23	; 0x17
    50f6:	98 8d       	ldd	r25, Y+24	; 0x18
    50f8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
    50fc:	80 91 8c 08 	lds	r24, 0x088C
    5100:	8f 93       	push	r24
    5102:	80 91 8b 08 	lds	r24, 0x088B
    5106:	8f 93       	push	r24
    5108:	80 91 8a 08 	lds	r24, 0x088A
    510c:	8f 93       	push	r24
    510e:	80 91 89 08 	lds	r24, 0x0889
    5112:	8f 93       	push	r24
    5114:	89 e1       	ldi	r24, 0x19	; 25
    5116:	92 e0       	ldi	r25, 0x02	; 2
    5118:	9f 93       	push	r25
    511a:	8f 93       	push	r24
    511c:	bf 92       	push	r11
    511e:	af 92       	push	r10
    5120:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    5124:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    5126:	98 e0       	ldi	r25, 0x08	; 8
    5128:	09 2f       	mov	r16, r25
    512a:	08 1b       	sub	r16, r24
    512c:	8d b7       	in	r24, 0x3d	; 61
    512e:	9e b7       	in	r25, 0x3e	; 62
    5130:	08 96       	adiw	r24, 0x08	; 8
    5132:	0f b6       	in	r0, 0x3f	; 63
    5134:	f8 94       	cli
    5136:	9e bf       	out	0x3e, r25	; 62
    5138:	0f be       	out	0x3f, r0	; 63
    513a:	8d bf       	out	0x3d, r24	; 61
    513c:	08 30       	cpi	r16, 0x08	; 8
    513e:	f8 f4       	brcc	.+62     	; 0x517e <_ZN5tacho4drawEv+0x1e4>
    5140:	10 2f       	mov	r17, r16
    5142:	12 95       	swap	r17
    5144:	10 7f       	andi	r17, 0xF0	; 240
			if(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]=='.'){
    5146:	8e 89       	ldd	r24, Y+22	; 0x16
    5148:	fe 01       	movw	r30, r28
    514a:	e0 0f       	add	r30, r16
    514c:	f1 1d       	adc	r31, r1
    514e:	e8 0f       	add	r30, r24
    5150:	f1 1d       	adc	r31, r1
    5152:	36 97       	sbiw	r30, 0x06	; 6
    5154:	60 81       	ld	r22, Z
    5156:	6e 32       	cpi	r22, 0x2E	; 46
    5158:	39 f4       	brne	.+14     	; 0x5168 <_ZN5tacho4drawEv+0x1ce>
				oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)],i*numbersmalsize,4*charhighte);
    515a:	20 e2       	ldi	r18, 0x20	; 32
    515c:	41 2f       	mov	r20, r17
    515e:	8f 89       	ldd	r24, Y+23	; 0x17
    5160:	98 8d       	ldd	r25, Y+24	; 0x18
    5162:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    5166:	07 c0       	rjmp	.+14     	; 0x5176 <_ZN5tacho4drawEv+0x1dc>
			}
			else{
				oled->draw_number16x16(buffer[i-((SSD1306_WIDTH/numbersmalsize)-buffersize)]-'0',i*numbersmalsize,3*charhighte);
    5168:	60 53       	subi	r22, 0x30	; 48
    516a:	28 e1       	ldi	r18, 0x18	; 24
    516c:	41 2f       	mov	r20, r17
    516e:	8f 89       	ldd	r24, Y+23	; 0x17
    5170:	98 8d       	ldd	r25, Y+24	; 0x18
    5172:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',2.33*numbersmalsize,0*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',3.33*numbersmalsize,0*charhighte);

		//Ausgabe der Geschwidigkeit
		buffersize=sprintf(buffer,"%3.1f",geschw);
		for(uint8_t i=((SSD1306_WIDTH/numbersmalsize)-buffersize);i<((SSD1306_WIDTH/numbersmalsize));i++){
    5176:	0f 5f       	subi	r16, 0xFF	; 255
    5178:	10 5f       	subi	r17, 0xF0	; 240
    517a:	08 30       	cpi	r16, 0x08	; 8
    517c:	21 f7       	brne	.-56     	; 0x5146 <_ZN5tacho4drawEv+0x1ac>
		//Nadel erst, wenn Kompass implementiert
		//Anzeige der Richtung als Alternative
		//anzeige_kleinenadel(31,31+8,angle);

		//anzeige der gesammtstrecke
		buffersize=sprintf(buffer,"%.3fkm",strecke/1000);
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	4a e7       	ldi	r20, 0x7A	; 122
    5184:	54 e4       	ldi	r21, 0x44	; 68
    5186:	60 91 85 08 	lds	r22, 0x0885
    518a:	70 91 86 08 	lds	r23, 0x0886
    518e:	80 91 87 08 	lds	r24, 0x0887
    5192:	90 91 88 08 	lds	r25, 0x0888
    5196:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    519a:	9f 93       	push	r25
    519c:	8f 93       	push	r24
    519e:	7f 93       	push	r23
    51a0:	6f 93       	push	r22
    51a2:	8f e1       	ldi	r24, 0x1F	; 31
    51a4:	92 e0       	ldi	r25, 0x02	; 2
    51a6:	9f 93       	push	r25
    51a8:	8f 93       	push	r24
    51aa:	bf 92       	push	r11
    51ac:	af 92       	push	r10
    51ae:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    51b2:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,2*charhighte);}
    51b4:	2d b7       	in	r18, 0x3d	; 61
    51b6:	3e b7       	in	r19, 0x3e	; 62
    51b8:	28 5f       	subi	r18, 0xF8	; 248
    51ba:	3f 4f       	sbci	r19, 0xFF	; 255
    51bc:	0f b6       	in	r0, 0x3f	; 63
    51be:	f8 94       	cli
    51c0:	3e bf       	out	0x3e, r19	; 62
    51c2:	0f be       	out	0x3f, r0	; 63
    51c4:	2d bf       	out	0x3d, r18	; 61
    51c6:	88 23       	and	r24, r24
    51c8:	89 f0       	breq	.+34     	; 0x51ec <_ZN5tacho4drawEv+0x252>
    51ca:	16 e4       	ldi	r17, 0x46	; 70
    51cc:	f1 2c       	mov	r15, r1
    51ce:	fe 01       	movw	r30, r28
    51d0:	ef 0d       	add	r30, r15
    51d2:	f1 1d       	adc	r31, r1
    51d4:	20 e1       	ldi	r18, 0x10	; 16
    51d6:	41 2f       	mov	r20, r17
    51d8:	62 81       	ldd	r22, Z+2	; 0x02
    51da:	8f 89       	ldd	r24, Y+23	; 0x17
    51dc:	98 8d       	ldd	r25, Y+24	; 0x18
    51de:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    51e2:	f3 94       	inc	r15
    51e4:	1a 5f       	subi	r17, 0xFA	; 250
    51e6:	8e 89       	ldd	r24, Y+22	; 0x16
    51e8:	f8 16       	cp	r15, r24
    51ea:	88 f3       	brcs	.-30     	; 0x51ce <_ZN5tacho4drawEv+0x234>

		//anzeige der max geschwindigkeit
		buffersize=sprintf(buffer,"%.1fkm/h",maxgeschw);
    51ec:	80 91 84 08 	lds	r24, 0x0884
    51f0:	8f 93       	push	r24
    51f2:	80 91 83 08 	lds	r24, 0x0883
    51f6:	8f 93       	push	r24
    51f8:	80 91 82 08 	lds	r24, 0x0882
    51fc:	8f 93       	push	r24
    51fe:	80 91 81 08 	lds	r24, 0x0881
    5202:	8f 93       	push	r24
    5204:	86 e2       	ldi	r24, 0x26	; 38
    5206:	92 e0       	ldi	r25, 0x02	; 2
    5208:	9f 93       	push	r25
    520a:	8f 93       	push	r24
    520c:	bf 92       	push	r11
    520e:	af 92       	push	r10
    5210:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    5214:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,5*charhighte);}
    5216:	2d b7       	in	r18, 0x3d	; 61
    5218:	3e b7       	in	r19, 0x3e	; 62
    521a:	28 5f       	subi	r18, 0xF8	; 248
    521c:	3f 4f       	sbci	r19, 0xFF	; 255
    521e:	0f b6       	in	r0, 0x3f	; 63
    5220:	f8 94       	cli
    5222:	3e bf       	out	0x3e, r19	; 62
    5224:	0f be       	out	0x3f, r0	; 63
    5226:	2d bf       	out	0x3d, r18	; 61
    5228:	88 23       	and	r24, r24
    522a:	89 f0       	breq	.+34     	; 0x524e <_ZN5tacho4drawEv+0x2b4>
    522c:	16 e4       	ldi	r17, 0x46	; 70
    522e:	f1 2c       	mov	r15, r1
    5230:	fe 01       	movw	r30, r28
    5232:	ef 0d       	add	r30, r15
    5234:	f1 1d       	adc	r31, r1
    5236:	28 e2       	ldi	r18, 0x28	; 40
    5238:	41 2f       	mov	r20, r17
    523a:	62 81       	ldd	r22, Z+2	; 0x02
    523c:	8f 89       	ldd	r24, Y+23	; 0x17
    523e:	98 8d       	ldd	r25, Y+24	; 0x18
    5240:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    5244:	f3 94       	inc	r15
    5246:	1a 5f       	subi	r17, 0xFA	; 250
    5248:	8e 89       	ldd	r24, Y+22	; 0x16
    524a:	f8 16       	cp	r15, r24
    524c:	88 f3       	brcs	.-30     	; 0x5230 <_ZN5tacho4drawEv+0x296>

		//anzeige der Fahrtzeit
		buffersize=sprintf(buffer,"%02i:%02i:%02i",uint8_t(Fahrtzeit/3600),uint8_t(Fahrtzeit/60),uint8_t(Fahrtzeit%60));
    524e:	c0 90 7d 08 	lds	r12, 0x087D
    5252:	d0 90 7e 08 	lds	r13, 0x087E
    5256:	e0 90 7f 08 	lds	r14, 0x087F
    525a:	f0 90 80 08 	lds	r15, 0x0880
    525e:	c7 01       	movw	r24, r14
    5260:	b6 01       	movw	r22, r12
    5262:	2c e3       	ldi	r18, 0x3C	; 60
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	40 e0       	ldi	r20, 0x00	; 0
    5268:	50 e0       	ldi	r21, 0x00	; 0
    526a:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <__udivmodsi4>
    526e:	1f 92       	push	r1
    5270:	6f 93       	push	r22
    5272:	1f 92       	push	r1
    5274:	2f 93       	push	r18
    5276:	c7 01       	movw	r24, r14
    5278:	b6 01       	movw	r22, r12
    527a:	20 e1       	ldi	r18, 0x10	; 16
    527c:	3e e0       	ldi	r19, 0x0E	; 14
    527e:	40 e0       	ldi	r20, 0x00	; 0
    5280:	50 e0       	ldi	r21, 0x00	; 0
    5282:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <__udivmodsi4>
    5286:	1f 92       	push	r1
    5288:	2f 93       	push	r18
    528a:	8f e2       	ldi	r24, 0x2F	; 47
    528c:	92 e0       	ldi	r25, 0x02	; 2
    528e:	9f 93       	push	r25
    5290:	8f 93       	push	r24
    5292:	bf 92       	push	r11
    5294:	af 92       	push	r10
    5296:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    529a:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+70,6*charhighte);}
    529c:	2d b7       	in	r18, 0x3d	; 61
    529e:	3e b7       	in	r19, 0x3e	; 62
    52a0:	26 5f       	subi	r18, 0xF6	; 246
    52a2:	3f 4f       	sbci	r19, 0xFF	; 255
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	f8 94       	cli
    52a8:	3e bf       	out	0x3e, r19	; 62
    52aa:	0f be       	out	0x3f, r0	; 63
    52ac:	2d bf       	out	0x3d, r18	; 61
    52ae:	88 23       	and	r24, r24
    52b0:	89 f0       	breq	.+34     	; 0x52d4 <_ZN5tacho4drawEv+0x33a>
    52b2:	16 e4       	ldi	r17, 0x46	; 70
    52b4:	f1 2c       	mov	r15, r1
    52b6:	fe 01       	movw	r30, r28
    52b8:	ef 0d       	add	r30, r15
    52ba:	f1 1d       	adc	r31, r1
    52bc:	20 e3       	ldi	r18, 0x30	; 48
    52be:	41 2f       	mov	r20, r17
    52c0:	62 81       	ldd	r22, Z+2	; 0x02
    52c2:	8f 89       	ldd	r24, Y+23	; 0x17
    52c4:	98 8d       	ldd	r25, Y+24	; 0x18
    52c6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    52ca:	f3 94       	inc	r15
    52cc:	1a 5f       	subi	r17, 0xFA	; 250
    52ce:	8e 89       	ldd	r24, Y+22	; 0x16
    52d0:	f8 16       	cp	r15, r24
    52d2:	88 f3       	brcs	.-30     	; 0x52b6 <_ZN5tacho4drawEv+0x31c>
		
		//anzeige der durschschnittsgeschw
		if (Fahrtzeit==0)
    52d4:	60 91 7d 08 	lds	r22, 0x087D
    52d8:	70 91 7e 08 	lds	r23, 0x087E
    52dc:	80 91 7f 08 	lds	r24, 0x087F
    52e0:	90 91 80 08 	lds	r25, 0x0880
    52e4:	61 15       	cp	r22, r1
    52e6:	71 05       	cpc	r23, r1
    52e8:	81 05       	cpc	r24, r1
    52ea:	91 05       	cpc	r25, r1
    52ec:	b1 f4       	brne	.+44     	; 0x531a <_ZN5tacho4drawEv+0x380>
		{
			buffersize=sprintf(buffer,"%.1fkm/h",0.0);
    52ee:	1f 92       	push	r1
    52f0:	1f 92       	push	r1
    52f2:	1f 92       	push	r1
    52f4:	1f 92       	push	r1
    52f6:	86 e2       	ldi	r24, 0x26	; 38
    52f8:	92 e0       	ldi	r25, 0x02	; 2
    52fa:	9f 93       	push	r25
    52fc:	8f 93       	push	r24
    52fe:	bf 92       	push	r11
    5300:	af 92       	push	r10
    5302:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    5306:	8e 8b       	std	Y+22, r24	; 0x16
    5308:	8d b7       	in	r24, 0x3d	; 61
    530a:	9e b7       	in	r25, 0x3e	; 62
    530c:	08 96       	adiw	r24, 0x08	; 8
    530e:	0f b6       	in	r0, 0x3f	; 63
    5310:	f8 94       	cli
    5312:	9e bf       	out	0x3e, r25	; 62
    5314:	0f be       	out	0x3f, r0	; 63
    5316:	8d bf       	out	0x3d, r24	; 61
    5318:	2a c0       	rjmp	.+84     	; 0x536e <_ZN5tacho4drawEv+0x3d4>
		}
		else {
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
    531a:	0e 94 95 40 	call	0x812a	; 0x812a <__floatunsisf>
    531e:	9b 01       	movw	r18, r22
    5320:	ac 01       	movw	r20, r24
    5322:	60 91 85 08 	lds	r22, 0x0885
    5326:	70 91 86 08 	lds	r23, 0x0886
    532a:	80 91 87 08 	lds	r24, 0x0887
    532e:	90 91 88 08 	lds	r25, 0x0888
    5332:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    5336:	26 e6       	ldi	r18, 0x66	; 102
    5338:	36 e6       	ldi	r19, 0x66	; 102
    533a:	46 e6       	ldi	r20, 0x66	; 102
    533c:	50 e4       	ldi	r21, 0x40	; 64
    533e:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    5342:	9f 93       	push	r25
    5344:	8f 93       	push	r24
    5346:	7f 93       	push	r23
    5348:	6f 93       	push	r22
    534a:	86 e2       	ldi	r24, 0x26	; 38
    534c:	92 e0       	ldi	r25, 0x02	; 2
    534e:	9f 93       	push	r25
    5350:	8f 93       	push	r24
    5352:	bf 92       	push	r11
    5354:	af 92       	push	r10
    5356:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    535a:	8e 8b       	std	Y+22, r24	; 0x16
    535c:	2d b7       	in	r18, 0x3d	; 61
    535e:	3e b7       	in	r19, 0x3e	; 62
    5360:	28 5f       	subi	r18, 0xF8	; 248
    5362:	3f 4f       	sbci	r19, 0xFF	; 255
    5364:	0f b6       	in	r0, 0x3f	; 63
    5366:	f8 94       	cli
    5368:	3e bf       	out	0x3e, r19	; 62
    536a:	0f be       	out	0x3f, r0	; 63
    536c:	2d bf       	out	0x3d, r18	; 61
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}
    536e:	8e 89       	ldd	r24, Y+22	; 0x16
    5370:	88 23       	and	r24, r24
    5372:	89 f0       	breq	.+34     	; 0x5396 <_ZN5tacho4drawEv+0x3fc>
    5374:	0b e4       	ldi	r16, 0x4B	; 75
    5376:	10 e0       	ldi	r17, 0x00	; 0
    5378:	fe 01       	movw	r30, r28
    537a:	e1 0f       	add	r30, r17
    537c:	f1 1d       	adc	r31, r1
    537e:	28 e0       	ldi	r18, 0x08	; 8
    5380:	40 2f       	mov	r20, r16
    5382:	62 81       	ldd	r22, Z+2	; 0x02
    5384:	8f 89       	ldd	r24, Y+23	; 0x17
    5386:	98 8d       	ldd	r25, Y+24	; 0x18
    5388:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    538c:	1f 5f       	subi	r17, 0xFF	; 255
    538e:	0a 5f       	subi	r16, 0xFA	; 250
    5390:	8e 89       	ldd	r24, Y+22	; 0x16
    5392:	18 17       	cp	r17, r24
    5394:	88 f3       	brcs	.-30     	; 0x5378 <_ZN5tacho4drawEv+0x3de>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5396:	8f 89       	ldd	r24, Y+23	; 0x17
    5398:	98 8d       	ldd	r25, Y+24	; 0x18
    539a:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    539e:	04 c0       	rjmp	.+8      	; 0x53a8 <_ZN5tacho4drawEv+0x40e>
		}
		return 0;
	}

	//Anzeige schalten
	void draw(){
    53a0:	10 e5       	ldi	r17, 0x50	; 80
    53a2:	c1 2c       	mov	r12, r1
    53a4:	d1 2c       	mov	r13, r1
    53a6:	40 ce       	rjmp	.-896    	; 0x5028 <_ZN5tacho4drawEv+0x8e>
			buffersize=sprintf(buffer,"%.1fkm/h",(strecke/Fahrtzeit)*3.6);
		}
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+75,1*charhighte);}

		send();
	}
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	1f 91       	pop	r17
    53ae:	0f 91       	pop	r16
    53b0:	ff 90       	pop	r15
    53b2:	ef 90       	pop	r14
    53b4:	df 90       	pop	r13
    53b6:	cf 90       	pop	r12
    53b8:	bf 90       	pop	r11
    53ba:	af 90       	pop	r10
    53bc:	08 95       	ret

000053be <_ZN3uhr4drawEv>:
		}
	return 0;
	}

	//anzeige vorbereiten
	void draw()
    53be:	ef 92       	push	r14
    53c0:	ff 92       	push	r15
    53c2:	0f 93       	push	r16
    53c4:	1f 93       	push	r17
    53c6:	cf 93       	push	r28
    53c8:	df 93       	push	r29
    53ca:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    53cc:	8f 89       	ldd	r24, Y+23	; 0x17
    53ce:	98 8d       	ldd	r25, Y+24	; 0x18
    53d0:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
    53d4:	11 e4       	ldi	r17, 0x41	; 65
    53d6:	e1 2c       	mov	r14, r1
    53d8:	f1 2c       	mov	r15, r1
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
    53da:	e9 8d       	ldd	r30, Y+25	; 0x19
    53dc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    53de:	ee 0d       	add	r30, r14
    53e0:	ff 1d       	adc	r31, r15
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	41 2f       	mov	r20, r17
    53e6:	60 81       	ld	r22, Z
    53e8:	8f 89       	ldd	r24, Y+23	; 0x17
    53ea:	98 8d       	ldd	r25, Y+24	; 0x18
    53ec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    53f0:	8f ef       	ldi	r24, 0xFF	; 255
    53f2:	e8 1a       	sub	r14, r24
    53f4:	f8 0a       	sbc	r15, r24
    53f6:	1a 5f       	subi	r17, 0xFA	; 250
    53f8:	1f 35       	cpi	r17, 0x5F	; 95
    53fa:	79 f7       	brne	.-34     	; 0x53da <_ZN3uhr4drawEv+0x1c>
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
    53fc:	b6 db       	rcall	.-2196   	; 0x4b6a <_Z14Batteriestatusv>
    53fe:	28 2f       	mov	r18, r24
    5400:	08 2e       	mov	r0, r24
    5402:	00 0c       	add	r0, r0
    5404:	33 0b       	sbc	r19, r19
    5406:	3f 93       	push	r19
    5408:	8f 93       	push	r24
    540a:	84 e1       	ldi	r24, 0x14	; 20
    540c:	92 e0       	ldi	r25, 0x02	; 2
    540e:	9f 93       	push	r25
    5410:	8f 93       	push	r24
    5412:	ce 01       	movw	r24, r28
    5414:	02 96       	adiw	r24, 0x02	; 2
    5416:	9f 93       	push	r25
    5418:	8f 93       	push	r24
    541a:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    541e:	8e 8b       	std	Y+22, r24	; 0x16
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5420:	15 e1       	ldi	r17, 0x15	; 21
    5422:	18 1b       	sub	r17, r24
    5424:	0f 90       	pop	r0
    5426:	0f 90       	pop	r0
    5428:	0f 90       	pop	r0
    542a:	0f 90       	pop	r0
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
    5430:	15 31       	cpi	r17, 0x15	; 21
    5432:	08 f0       	brcs	.+2      	; 0x5436 <_ZN3uhr4drawEv+0x78>
    5434:	5f c0       	rjmp	.+190    	; 0x54f4 <_ZN3uhr4drawEv+0x136>
    5436:	01 2f       	mov	r16, r17
    5438:	00 0f       	add	r16, r16
    543a:	01 0f       	add	r16, r17
    543c:	00 0f       	add	r16, r16
					oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    543e:	8e 89       	ldd	r24, Y+22	; 0x16
    5440:	fe 01       	movw	r30, r28
    5442:	e1 0f       	add	r30, r17
    5444:	f1 1d       	adc	r31, r1
    5446:	e8 0f       	add	r30, r24
    5448:	f1 1d       	adc	r31, r1
    544a:	73 97       	sbiw	r30, 0x13	; 19
    544c:	20 e0       	ldi	r18, 0x00	; 0
    544e:	40 2f       	mov	r20, r16
    5450:	60 81       	ld	r22, Z
    5452:	8f 89       	ldd	r24, Y+23	; 0x17
    5454:	98 8d       	ldd	r25, Y+24	; 0x18
    5456:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
				}
				break;
			case 1:	//standard Header fuer fast alle Pages
				for(uint8_t i=0;i<(bitsderrtc-3);i++){oled->draw_ASCI(rtc->msg_uhr[i],65+i*charsize,0*charhighte);}
				buffersize=sprintf(buffer,"%i%%",Batteriestatus());
				for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    545a:	1f 5f       	subi	r17, 0xFF	; 255
    545c:	0a 5f       	subi	r16, 0xFA	; 250
    545e:	15 31       	cpi	r17, 0x15	; 21
    5460:	71 f7       	brne	.-36     	; 0x543e <_ZN3uhr4drawEv+0x80>
    5462:	48 c0       	rjmp	.+144    	; 0x54f4 <_ZN3uhr4drawEv+0x136>
				for(uint8_t i=0;i<8;i++){
					oled->draw_ASCI(rtc->msg_dat[i],5+i*charsize,7*charhighte);
				}
				break;
			case 2:
				for(uint8_t i=0;i<bitsderrtc;i++){oled->draw_ASCI(rtc->msg_dat[i],65+i*charsize,7*charhighte);}
    5464:	e9 8d       	ldd	r30, Y+25	; 0x19
    5466:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5468:	ee 0d       	add	r30, r14
    546a:	ff 1d       	adc	r31, r15
    546c:	28 e3       	ldi	r18, 0x38	; 56
    546e:	41 2f       	mov	r20, r17
    5470:	60 85       	ldd	r22, Z+8	; 0x08
    5472:	8f 89       	ldd	r24, Y+23	; 0x17
    5474:	98 8d       	ldd	r25, Y+24	; 0x18
    5476:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    547a:	8f ef       	ldi	r24, 0xFF	; 255
    547c:	e8 1a       	sub	r14, r24
    547e:	f8 0a       	sbc	r15, r24
    5480:	1a 5f       	subi	r17, 0xFA	; 250
    5482:	11 37       	cpi	r17, 0x71	; 113
    5484:	79 f7       	brne	.-34     	; 0x5464 <_ZN3uhr4drawEv+0xa6>
	{
		monitor::draw();
		header(1);
		bottom(2);

		oled->analog(rtc->Stunden,rtc->Minuten,rtc->Sekunden,Zeiger);
    5486:	e9 8d       	ldd	r30, Y+25	; 0x19
    5488:	fa 8d       	ldd	r31, Y+26	; 0x1a
    548a:	09 a5       	ldd	r16, Y+41	; 0x29
    548c:	22 89       	ldd	r18, Z+18	; 0x12
    548e:	41 89       	ldd	r20, Z+17	; 0x11
    5490:	60 89       	ldd	r22, Z+16	; 0x10
    5492:	8f 89       	ldd	r24, Y+23	; 0x17
    5494:	98 8d       	ldd	r25, Y+24	; 0x18
    5496:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN7Display6analogEhhhh>
		//draw large number
		oled->draw_number16x16(rtc->msg_uhr[0]-'0',70,1.66*charhighte);
    549a:	e9 8d       	ldd	r30, Y+25	; 0x19
    549c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    549e:	60 81       	ld	r22, Z
    54a0:	60 53       	subi	r22, 0x30	; 48
    54a2:	2d e0       	ldi	r18, 0x0D	; 13
    54a4:	46 e4       	ldi	r20, 0x46	; 70
    54a6:	8f 89       	ldd	r24, Y+23	; 0x17
    54a8:	98 8d       	ldd	r25, Y+24	; 0x18
    54aa:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
    54ae:	e9 8d       	ldd	r30, Y+25	; 0x19
    54b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54b2:	61 81       	ldd	r22, Z+1	; 0x01
    54b4:	60 53       	subi	r22, 0x30	; 48
    54b6:	2d e0       	ldi	r18, 0x0D	; 13
    54b8:	46 e5       	ldi	r20, 0x56	; 86
    54ba:	8f 89       	ldd	r24, Y+23	; 0x17
    54bc:	98 8d       	ldd	r25, Y+24	; 0x18
    54be:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
    54c2:	e9 8d       	ldd	r30, Y+25	; 0x19
    54c4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54c6:	63 81       	ldd	r22, Z+3	; 0x03
    54c8:	60 53       	subi	r22, 0x30	; 48
    54ca:	22 e2       	ldi	r18, 0x22	; 34
    54cc:	46 e4       	ldi	r20, 0x46	; 70
    54ce:	8f 89       	ldd	r24, Y+23	; 0x17
    54d0:	98 8d       	ldd	r25, Y+24	; 0x18
    54d2:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);
    54d6:	e9 8d       	ldd	r30, Y+25	; 0x19
    54d8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    54da:	64 81       	ldd	r22, Z+4	; 0x04
    54dc:	60 53       	subi	r22, 0x30	; 48
    54de:	22 e2       	ldi	r18, 0x22	; 34
    54e0:	46 e5       	ldi	r20, 0x56	; 86
    54e2:	8f 89       	ldd	r24, Y+23	; 0x17
    54e4:	98 8d       	ldd	r25, Y+24	; 0x18
    54e6:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    54ea:	8f 89       	ldd	r24, Y+23	; 0x17
    54ec:	98 8d       	ldd	r25, Y+24	; 0x18
    54ee:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    54f2:	04 c0       	rjmp	.+8      	; 0x54fc <_ZN3uhr4drawEv+0x13e>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    54f4:	11 e4       	ldi	r17, 0x41	; 65
    54f6:	e1 2c       	mov	r14, r1
    54f8:	f1 2c       	mov	r15, r1
    54fa:	b4 cf       	rjmp	.-152    	; 0x5464 <_ZN3uhr4drawEv+0xa6>
		oled->draw_number16x16(rtc->msg_uhr[1]-'0',70+numbersmalsize,1.66*charhighte);
		oled->draw_number16x16(rtc->msg_uhr[3]-'0',70,2.33*charhighte+numbersmalhight);
		oled->draw_number16x16(rtc->msg_uhr[4]-'0',70+numbersmalsize,2.33*charhighte+numbersmalhight);

		send();
	}
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	1f 91       	pop	r17
    5502:	0f 91       	pop	r16
    5504:	ff 90       	pop	r15
    5506:	ef 90       	pop	r14
    5508:	08 95       	ret

0000550a <_ZN5menue4drawEv>:
	
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}

	void draw(){
    550a:	cf 92       	push	r12
    550c:	df 92       	push	r13
    550e:	ef 92       	push	r14
    5510:	ff 92       	push	r15
    5512:	0f 93       	push	r16
    5514:	1f 93       	push	r17
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    551c:	8f 89       	ldd	r24, Y+23	; 0x17
    551e:	98 8d       	ldd	r25, Y+24	; 0x18
    5520:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
    5524:	10 e0       	ldi	r17, 0x00	; 0
    5526:	e1 2c       	mov	r14, r1
    5528:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    552a:	e9 8d       	ldd	r30, Y+25	; 0x19
    552c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    552e:	ee 0d       	add	r30, r14
    5530:	ff 1d       	adc	r31, r15
    5532:	20 e0       	ldi	r18, 0x00	; 0
    5534:	41 2f       	mov	r20, r17
    5536:	60 81       	ld	r22, Z
    5538:	8f 89       	ldd	r24, Y+23	; 0x17
    553a:	98 8d       	ldd	r25, Y+24	; 0x18
    553c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    5540:	8f ef       	ldi	r24, 0xFF	; 255
    5542:	e8 1a       	sub	r14, r24
    5544:	f8 0a       	sbc	r15, r24
    5546:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    5548:	10 33       	cpi	r17, 0x30	; 48
    554a:	79 f7       	brne	.-34     	; 0x552a <_ZN5menue4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    554c:	0e db       	rcall	.-2532   	; 0x4b6a <_Z14Batteriestatusv>
    554e:	7e 01       	movw	r14, r28
    5550:	92 e0       	ldi	r25, 0x02	; 2
    5552:	e9 0e       	add	r14, r25
    5554:	f1 1c       	adc	r15, r1
    5556:	28 2f       	mov	r18, r24
    5558:	08 2e       	mov	r0, r24
    555a:	00 0c       	add	r0, r0
    555c:	33 0b       	sbc	r19, r19
    555e:	3f 93       	push	r19
    5560:	8f 93       	push	r24
    5562:	82 ec       	ldi	r24, 0xC2	; 194
    5564:	91 e0       	ldi	r25, 0x01	; 1
    5566:	9f 93       	push	r25
    5568:	8f 93       	push	r24
    556a:	ff 92       	push	r15
    556c:	ef 92       	push	r14
    556e:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    5572:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    5574:	15 e1       	ldi	r17, 0x15	; 21
    5576:	18 1b       	sub	r17, r24
    5578:	0f 90       	pop	r0
    557a:	0f 90       	pop	r0
    557c:	0f 90       	pop	r0
    557e:	0f 90       	pop	r0
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	15 31       	cpi	r17, 0x15	; 21
    5586:	08 f0       	brcs	.+2      	; 0x558a <_ZN5menue4drawEv+0x80>
    5588:	bf c0       	rjmp	.+382    	; 0x5708 <_ZN5menue4drawEv+0x1fe>
    558a:	01 2f       	mov	r16, r17
    558c:	00 0f       	add	r16, r16
    558e:	01 0f       	add	r16, r17
    5590:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    5592:	8e 89       	ldd	r24, Y+22	; 0x16
    5594:	fe 01       	movw	r30, r28
    5596:	e1 0f       	add	r30, r17
    5598:	f1 1d       	adc	r31, r1
    559a:	e8 0f       	add	r30, r24
    559c:	f1 1d       	adc	r31, r1
    559e:	73 97       	sbiw	r30, 0x13	; 19
    55a0:	20 e0       	ldi	r18, 0x00	; 0
    55a2:	40 2f       	mov	r20, r16
    55a4:	60 81       	ld	r22, Z
    55a6:	8f 89       	ldd	r24, Y+23	; 0x17
    55a8:	98 8d       	ldd	r25, Y+24	; 0x18
    55aa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    55ae:	1f 5f       	subi	r17, 0xFF	; 255
    55b0:	0a 5f       	subi	r16, 0xFA	; 250
    55b2:	15 31       	cpi	r17, 0x15	; 21
    55b4:	71 f7       	brne	.-36     	; 0x5592 <_ZN5menue4drawEv+0x88>
    55b6:	a8 c0       	rjmp	.+336    	; 0x5708 <_ZN5menue4drawEv+0x1fe>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    55b8:	e9 8d       	ldd	r30, Y+25	; 0x19
    55ba:	fa 8d       	ldd	r31, Y+26	; 0x1a
    55bc:	ec 0d       	add	r30, r12
    55be:	fd 1d       	adc	r31, r13
    55c0:	28 e3       	ldi	r18, 0x38	; 56
    55c2:	41 2f       	mov	r20, r17
    55c4:	60 85       	ldd	r22, Z+8	; 0x08
    55c6:	8f 89       	ldd	r24, Y+23	; 0x17
    55c8:	98 8d       	ldd	r25, Y+24	; 0x18
    55ca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    55ce:	8f ef       	ldi	r24, 0xFF	; 255
    55d0:	c8 1a       	sub	r12, r24
    55d2:	d8 0a       	sbc	r13, r24
    55d4:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    55d6:	10 38       	cpi	r17, 0x80	; 128
    55d8:	79 f7       	brne	.-34     	; 0x55b8 <_ZN5menue4drawEv+0xae>
	void draw(){
		monitor::draw();
		header();
		bottom();
		//menueeintrag zeichnen
		buffersize=sprintf(buffer,"Uhr");
    55da:	85 e5       	ldi	r24, 0x55	; 85
    55dc:	98 e6       	ldi	r25, 0x68	; 104
    55de:	a2 e7       	ldi	r26, 0x72	; 114
    55e0:	b0 e0       	ldi	r27, 0x00	; 0
    55e2:	8a 83       	std	Y+2, r24	; 0x02
    55e4:	9b 83       	std	Y+3, r25	; 0x03
    55e6:	ac 83       	std	Y+4, r26	; 0x04
    55e8:	bd 83       	std	Y+5, r27	; 0x05
    55ea:	83 e0       	ldi	r24, 0x03	; 3
    55ec:	8e 8b       	std	Y+22, r24	; 0x16
    55ee:	0c e0       	ldi	r16, 0x0C	; 12
    55f0:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    55f2:	fe 01       	movw	r30, r28
    55f4:	e1 0f       	add	r30, r17
    55f6:	f1 1d       	adc	r31, r1
    55f8:	20 e1       	ldi	r18, 0x10	; 16
    55fa:	40 2f       	mov	r20, r16
    55fc:	62 81       	ldd	r22, Z+2	; 0x02
    55fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5600:	98 8d       	ldd	r25, Y+24	; 0x18
    5602:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    5606:	1f 5f       	subi	r17, 0xFF	; 255
    5608:	0a 5f       	subi	r16, 0xFA	; 250
    560a:	8e 89       	ldd	r24, Y+22	; 0x16
    560c:	18 17       	cp	r17, r24
    560e:	88 f3       	brcs	.-30     	; 0x55f2 <_ZN5menue4drawEv+0xe8>
		buffersize=sprintf(buffer,"Tacho");
    5610:	86 e0       	ldi	r24, 0x06	; 6
    5612:	ee e3       	ldi	r30, 0x3E	; 62
    5614:	f2 e0       	ldi	r31, 0x02	; 2
    5616:	d7 01       	movw	r26, r14
    5618:	01 90       	ld	r0, Z+
    561a:	0d 92       	st	X+, r0
    561c:	8a 95       	dec	r24
    561e:	e1 f7       	brne	.-8      	; 0x5618 <_ZN5menue4drawEv+0x10e>
    5620:	85 e0       	ldi	r24, 0x05	; 5
    5622:	8e 8b       	std	Y+22, r24	; 0x16
    5624:	0c e0       	ldi	r16, 0x0C	; 12
    5626:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    5628:	fe 01       	movw	r30, r28
    562a:	e1 0f       	add	r30, r17
    562c:	f1 1d       	adc	r31, r1
    562e:	28 e1       	ldi	r18, 0x18	; 24
    5630:	40 2f       	mov	r20, r16
    5632:	62 81       	ldd	r22, Z+2	; 0x02
    5634:	8f 89       	ldd	r24, Y+23	; 0x17
    5636:	98 8d       	ldd	r25, Y+24	; 0x18
    5638:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    563c:	1f 5f       	subi	r17, 0xFF	; 255
    563e:	0a 5f       	subi	r16, 0xFA	; 250
    5640:	8e 89       	ldd	r24, Y+22	; 0x16
    5642:	18 17       	cp	r17, r24
    5644:	88 f3       	brcs	.-30     	; 0x5628 <_ZN5menue4drawEv+0x11e>
		buffersize=sprintf(buffer,"Wandern");
    5646:	88 e0       	ldi	r24, 0x08	; 8
    5648:	e4 e4       	ldi	r30, 0x44	; 68
    564a:	f2 e0       	ldi	r31, 0x02	; 2
    564c:	d7 01       	movw	r26, r14
    564e:	01 90       	ld	r0, Z+
    5650:	0d 92       	st	X+, r0
    5652:	8a 95       	dec	r24
    5654:	e1 f7       	brne	.-8      	; 0x564e <_ZN5menue4drawEv+0x144>
    5656:	87 e0       	ldi	r24, 0x07	; 7
    5658:	8e 8b       	std	Y+22, r24	; 0x16
    565a:	0c e0       	ldi	r16, 0x0C	; 12
    565c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    565e:	fe 01       	movw	r30, r28
    5660:	e1 0f       	add	r30, r17
    5662:	f1 1d       	adc	r31, r1
    5664:	20 e2       	ldi	r18, 0x20	; 32
    5666:	40 2f       	mov	r20, r16
    5668:	62 81       	ldd	r22, Z+2	; 0x02
    566a:	8f 89       	ldd	r24, Y+23	; 0x17
    566c:	98 8d       	ldd	r25, Y+24	; 0x18
    566e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    5672:	1f 5f       	subi	r17, 0xFF	; 255
    5674:	0a 5f       	subi	r16, 0xFA	; 250
    5676:	8e 89       	ldd	r24, Y+22	; 0x16
    5678:	18 17       	cp	r17, r24
    567a:	88 f3       	brcs	.-30     	; 0x565e <_ZN5menue4drawEv+0x154>
		buffersize=sprintf(buffer,"Einstellungen");
    567c:	8e e0       	ldi	r24, 0x0E	; 14
    567e:	ec e4       	ldi	r30, 0x4C	; 76
    5680:	f2 e0       	ldi	r31, 0x02	; 2
    5682:	d7 01       	movw	r26, r14
    5684:	01 90       	ld	r0, Z+
    5686:	0d 92       	st	X+, r0
    5688:	8a 95       	dec	r24
    568a:	e1 f7       	brne	.-8      	; 0x5684 <_ZN5menue4drawEv+0x17a>
    568c:	8d e0       	ldi	r24, 0x0D	; 13
    568e:	8e 8b       	std	Y+22, r24	; 0x16
    5690:	0c e0       	ldi	r16, 0x0C	; 12
    5692:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    5694:	fe 01       	movw	r30, r28
    5696:	e1 0f       	add	r30, r17
    5698:	f1 1d       	adc	r31, r1
    569a:	28 e2       	ldi	r18, 0x28	; 40
    569c:	40 2f       	mov	r20, r16
    569e:	62 81       	ldd	r22, Z+2	; 0x02
    56a0:	8f 89       	ldd	r24, Y+23	; 0x17
    56a2:	98 8d       	ldd	r25, Y+24	; 0x18
    56a4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    56a8:	1f 5f       	subi	r17, 0xFF	; 255
    56aa:	0a 5f       	subi	r16, 0xFA	; 250
    56ac:	8e 89       	ldd	r24, Y+22	; 0x16
    56ae:	18 17       	cp	r17, r24
    56b0:	88 f3       	brcs	.-30     	; 0x5694 <_ZN5menue4drawEv+0x18a>
		buffersize=sprintf(buffer,"Display aus");
    56b2:	8c e0       	ldi	r24, 0x0C	; 12
    56b4:	ea e5       	ldi	r30, 0x5A	; 90
    56b6:	f2 e0       	ldi	r31, 0x02	; 2
    56b8:	d7 01       	movw	r26, r14
    56ba:	01 90       	ld	r0, Z+
    56bc:	0d 92       	st	X+, r0
    56be:	8a 95       	dec	r24
    56c0:	e1 f7       	brne	.-8      	; 0x56ba <_ZN5menue4drawEv+0x1b0>
    56c2:	8b e0       	ldi	r24, 0x0B	; 11
    56c4:	8e 8b       	std	Y+22, r24	; 0x16
    56c6:	0c e0       	ldi	r16, 0x0C	; 12
    56c8:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    56ca:	fe 01       	movw	r30, r28
    56cc:	e1 0f       	add	r30, r17
    56ce:	f1 1d       	adc	r31, r1
    56d0:	20 e3       	ldi	r18, 0x30	; 48
    56d2:	40 2f       	mov	r20, r16
    56d4:	62 81       	ldd	r22, Z+2	; 0x02
    56d6:	8f 89       	ldd	r24, Y+23	; 0x17
    56d8:	98 8d       	ldd	r25, Y+24	; 0x18
    56da:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    56de:	1f 5f       	subi	r17, 0xFF	; 255
    56e0:	0a 5f       	subi	r16, 0xFA	; 250
    56e2:	8e 89       	ldd	r24, Y+22	; 0x16
    56e4:	18 17       	cp	r17, r24
    56e6:	88 f3       	brcs	.-30     	; 0x56ca <_ZN5menue4drawEv+0x1c0>
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    56e8:	2d a1       	ldd	r18, Y+37	; 0x25
    56ea:	22 0f       	add	r18, r18
    56ec:	22 0f       	add	r18, r18
    56ee:	22 0f       	add	r18, r18
    56f0:	20 5f       	subi	r18, 0xF0	; 240
    56f2:	40 e0       	ldi	r20, 0x00	; 0
    56f4:	6e e3       	ldi	r22, 0x3E	; 62
    56f6:	8f 89       	ldd	r24, Y+23	; 0x17
    56f8:	98 8d       	ldd	r25, Y+24	; 0x18
    56fa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    56fe:	8f 89       	ldd	r24, Y+23	; 0x17
    5700:	98 8d       	ldd	r25, Y+24	; 0x18
    5702:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    5706:	04 c0       	rjmp	.+8      	; 0x5710 <_ZN5menue4drawEv+0x206>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    5708:	10 e5       	ldi	r17, 0x50	; 80
    570a:	c1 2c       	mov	r12, r1
    570c:	d1 2c       	mov	r13, r1
    570e:	54 cf       	rjmp	.-344    	; 0x55b8 <_ZN5menue4drawEv+0xae>
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
		buffersize=sprintf(buffer,"Display aus");
		for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
		oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
		send();
	}
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	1f 91       	pop	r17
    5716:	0f 91       	pop	r16
    5718:	ff 90       	pop	r15
    571a:	ef 90       	pop	r14
    571c:	df 90       	pop	r13
    571e:	cf 90       	pop	r12
    5720:	08 95       	ret

00005722 <_Z12EEPROM_Writejh>:

#ifndef EEPROM_H_
#define EEPROM_H_

void EEPROM_Write(uint16_t adresse, uint8_t data){
	cli();	//zur sicherheit interrupts ausschalten
    5722:	f8 94       	cli
	while(EECR&(1<<EEPE));
    5724:	f9 99       	sbic	0x1f, 1	; 31
    5726:	fe cf       	rjmp	.-4      	; 0x5724 <_Z12EEPROM_Writejh+0x2>
	
	//schreibe adresse und data
	EEAR = adresse;
    5728:	92 bd       	out	0x22, r25	; 34
    572a:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
    572c:	60 bd       	out	0x20, r22	; 32
	//fuehre schreiben aus
	EECR |= (1<<EEMPE);
    572e:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);
    5730:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();
    5732:	78 94       	sei
    5734:	08 95       	ret

00005736 <_ZN7wandern11tastendruckEPh>:
				name[i] = ' ';
			}
		}
	}
	
	uint8_t tastendruck(uint8_t *tast){
    5736:	cf 93       	push	r28
    5738:	df 93       	push	r29
    573a:	ec 01       	movw	r28, r24
		if (*tast=='e')
    573c:	fb 01       	movw	r30, r22
    573e:	90 81       	ld	r25, Z
    5740:	95 36       	cpi	r25, 0x65	; 101
    5742:	09 f0       	breq	.+2      	; 0x5746 <_ZN7wandern11tastendruckEPh+0x10>
    5744:	41 c0       	rjmp	.+130    	; 0x57c8 <_ZN7wandern11tastendruckEPh+0x92>
		{
			rtc->Stunden	= gpsstunde;
    5746:	e9 8d       	ldd	r30, Y+25	; 0x19
    5748:	fa 8d       	ldd	r31, Y+26	; 0x1a
    574a:	80 91 92 08 	lds	r24, 0x0892
    574e:	80 8b       	std	Z+16, r24	; 0x10
			rtc->Minuten	= gpsminute;
    5750:	e9 8d       	ldd	r30, Y+25	; 0x19
    5752:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5754:	80 91 91 08 	lds	r24, 0x0891
    5758:	81 8b       	std	Z+17, r24	; 0x11
			rtc->Sekunden	= gpssekunde;
    575a:	e9 8d       	ldd	r30, Y+25	; 0x19
    575c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    575e:	80 91 90 08 	lds	r24, 0x0890
    5762:	82 8b       	std	Z+18, r24	; 0x12
			
			rtc->Tag		= gpsTag;
    5764:	e9 8d       	ldd	r30, Y+25	; 0x19
    5766:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5768:	80 91 8f 08 	lds	r24, 0x088F
    576c:	84 8b       	std	Z+20, r24	; 0x14
			rtc->Monat		= gpsMonat;
    576e:	e9 8d       	ldd	r30, Y+25	; 0x19
    5770:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5772:	80 91 8e 08 	lds	r24, 0x088E
    5776:	86 8b       	std	Z+22, r24	; 0x16
			rtc->Jahr		= gpsJahr;
    5778:	e9 8d       	ldd	r30, Y+25	; 0x19
    577a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    577c:	80 91 8d 08 	lds	r24, 0x088D
    5780:	87 8b       	std	Z+23, r24	; 0x17
			rtc->ausgabedatumneu();
    5782:	89 8d       	ldd	r24, Y+25	; 0x19
    5784:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5786:	0e 94 93 3e 	call	0x7d26	; 0x7d26 <_ZN3RTC15ausgabedatumneuEv>
			//speichern der neuen Zeit im EEPROM
			EEPROM_Write(EEMINUTEN,rtc->Minuten);
    578a:	e9 8d       	ldd	r30, Y+25	; 0x19
    578c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    578e:	61 89       	ldd	r22, Z+17	; 0x11
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	c6 df       	rcall	.-116    	; 0x5722 <_Z12EEPROM_Writejh>
			EEPROM_Write(EESTUNDEN,rtc->Stunden);
    5796:	e9 8d       	ldd	r30, Y+25	; 0x19
    5798:	fa 8d       	ldd	r31, Y+26	; 0x1a
    579a:	60 89       	ldd	r22, Z+16	; 0x10
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	c0 df       	rcall	.-128    	; 0x5722 <_Z12EEPROM_Writejh>
			EEPROM_Write(EETAGE,rtc->Tag);
    57a2:	e9 8d       	ldd	r30, Y+25	; 0x19
    57a4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57a6:	64 89       	ldd	r22, Z+20	; 0x14
    57a8:	82 e0       	ldi	r24, 0x02	; 2
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	ba df       	rcall	.-140    	; 0x5722 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEMONAT,rtc->Monat);
    57ae:	e9 8d       	ldd	r30, Y+25	; 0x19
    57b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57b2:	66 89       	ldd	r22, Z+22	; 0x16
    57b4:	83 e0       	ldi	r24, 0x03	; 3
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	b4 df       	rcall	.-152    	; 0x5722 <_Z12EEPROM_Writejh>
			EEPROM_Write(EEJAHR,rtc->Jahr);
    57ba:	e9 8d       	ldd	r30, Y+25	; 0x19
    57bc:	fa 8d       	ldd	r31, Y+26	; 0x1a
    57be:	67 89       	ldd	r22, Z+23	; 0x17
    57c0:	84 e0       	ldi	r24, 0x04	; 4
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	ae df       	rcall	.-164    	; 0x5722 <_Z12EEPROM_Writejh>
    57c6:	07 c0       	rjmp	.+14     	; 0x57d6 <_ZN7wandern11tastendruckEPh+0xa0>
		}
		else if (*tast=='A')
    57c8:	91 34       	cpi	r25, 0x41	; 65
    57ca:	11 f4       	brne	.+4      	; 0x57d0 <_ZN7wandern11tastendruckEPh+0x9a>
		{
			GPSENABLE();
    57cc:	44 9a       	sbi	0x08, 4	; 8
    57ce:	03 c0       	rjmp	.+6      	; 0x57d6 <_ZN7wandern11tastendruckEPh+0xa0>
		}
		else if (*tast=='B')
    57d0:	92 34       	cpi	r25, 0x42	; 66
    57d2:	09 f4       	brne	.+2      	; 0x57d6 <_ZN7wandern11tastendruckEPh+0xa0>
		{
			GPSDISABLE();
    57d4:	44 98       	cbi	0x08, 4	; 8
		}
		return 0;
	}
    57d6:	80 e0       	ldi	r24, 0x00	; 0
    57d8:	df 91       	pop	r29
    57da:	cf 91       	pop	r28
    57dc:	08 95       	ret

000057de <_Z11EEPROM_Readj>:
}

uint8_t EEPROM_Read(uint16_t adresse){
	cli();	//zur sicherheit interrupts ausschalten
    57de:	f8 94       	cli
	while(EECR&(1<<EEPE));
    57e0:	f9 99       	sbic	0x1f, 1	; 31
    57e2:	fe cf       	rjmp	.-4      	; 0x57e0 <_Z11EEPROM_Readj+0x2>
	
	//schreibe adresse
	EEAR = adresse;
    57e4:	92 bd       	out	0x22, r25	; 34
    57e6:	81 bd       	out	0x21, r24	; 33
	//fuehre lesen aus
	EECR |= (1<<EERE);
    57e8:	f8 9a       	sbi	0x1f, 0	; 31
	
	sei();
    57ea:	78 94       	sei
	return EEDR;
    57ec:	80 b5       	in	r24, 0x20	; 32
}
    57ee:	08 95       	ret

000057f0 <__vector_16>:

//schlechte variante der Uhreinstellung
void uhreinstellen();

//SD karten Timer
ISR(TIMER0_COMPA_vect){
    57f0:	1f 92       	push	r1
    57f2:	0f 92       	push	r0
    57f4:	0f b6       	in	r0, 0x3f	; 63
    57f6:	0f 92       	push	r0
    57f8:	11 24       	eor	r1, r1
    57fa:	0b b6       	in	r0, 0x3b	; 59
    57fc:	0f 92       	push	r0
    57fe:	2f 93       	push	r18
    5800:	3f 93       	push	r19
    5802:	4f 93       	push	r20
    5804:	5f 93       	push	r21
    5806:	6f 93       	push	r22
    5808:	7f 93       	push	r23
    580a:	8f 93       	push	r24
    580c:	9f 93       	push	r25
    580e:	af 93       	push	r26
    5810:	bf 93       	push	r27
    5812:	ef 93       	push	r30
    5814:	ff 93       	push	r31
	disk_timerproc();	//Timer der SD Karte
    5816:	0e 94 20 0b 	call	0x1640	; 0x1640 <disk_timerproc>
}
    581a:	ff 91       	pop	r31
    581c:	ef 91       	pop	r30
    581e:	bf 91       	pop	r27
    5820:	af 91       	pop	r26
    5822:	9f 91       	pop	r25
    5824:	8f 91       	pop	r24
    5826:	7f 91       	pop	r23
    5828:	6f 91       	pop	r22
    582a:	5f 91       	pop	r21
    582c:	4f 91       	pop	r20
    582e:	3f 91       	pop	r19
    5830:	2f 91       	pop	r18
    5832:	0f 90       	pop	r0
    5834:	0b be       	out	0x3b, r0	; 59
    5836:	0f 90       	pop	r0
    5838:	0f be       	out	0x3f, r0	; 63
    583a:	0f 90       	pop	r0
    583c:	1f 90       	pop	r1
    583e:	18 95       	reti

00005840 <__vector_11>:

ISR(TIMER2_OVF_vect){	//Vektor fuer die RTC
    5840:	1f 92       	push	r1
    5842:	0f 92       	push	r0
    5844:	0f b6       	in	r0, 0x3f	; 63
    5846:	0f 92       	push	r0
    5848:	11 24       	eor	r1, r1
    584a:	0b b6       	in	r0, 0x3b	; 59
    584c:	0f 92       	push	r0
    584e:	8f 93       	push	r24
    5850:	ef 93       	push	r30
    5852:	ff 93       	push	r31
	//TCNT2=TIMER2RTCTIME;
	rtc.Sekunden++;
    5854:	ec e3       	ldi	r30, 0x3C	; 60
    5856:	fe e0       	ldi	r31, 0x0E	; 14
    5858:	82 89       	ldd	r24, Z+18	; 0x12
    585a:	8f 5f       	subi	r24, 0xFF	; 255
    585c:	82 8b       	std	Z+18, r24	; 0x12
	rtc.interupts|= (1<<sekundeninterupt);
    585e:	80 8d       	ldd	r24, Z+24	; 0x18
    5860:	82 60       	ori	r24, 0x02	; 2
    5862:	80 8f       	std	Z+24, r24	; 0x18
}
    5864:	ff 91       	pop	r31
    5866:	ef 91       	pop	r30
    5868:	8f 91       	pop	r24
    586a:	0f 90       	pop	r0
    586c:	0b be       	out	0x3b, r0	; 59
    586e:	0f 90       	pop	r0
    5870:	0f be       	out	0x3f, r0	; 63
    5872:	0f 90       	pop	r0
    5874:	1f 90       	pop	r1
    5876:	18 95       	reti

00005878 <__vector_13>:

ISR(TIMER1_COMPA_vect){
    5878:	1f 92       	push	r1
    587a:	0f 92       	push	r0
    587c:	0f b6       	in	r0, 0x3f	; 63
    587e:	0f 92       	push	r0
    5880:	11 24       	eor	r1, r1
    5882:	8f 93       	push	r24
	statusreg |= (1<<updaterate);
    5884:	80 91 0b 09 	lds	r24, 0x090B
    5888:	81 60       	ori	r24, 0x01	; 1
    588a:	80 93 0b 09 	sts	0x090B, r24
}
    588e:	8f 91       	pop	r24
    5890:	0f 90       	pop	r0
    5892:	0f be       	out	0x3f, r0	; 63
    5894:	0f 90       	pop	r0
    5896:	1f 90       	pop	r1
    5898:	18 95       	reti

0000589a <__vector_20>:
uint8_t gpssekunde;
uint8_t gpsTag;
uint8_t gpsMonat;
uint8_t gpsJahr;

ISR(USART0_RX_vect){
    589a:	1f 92       	push	r1
    589c:	0f 92       	push	r0
    589e:	0f b6       	in	r0, 0x3f	; 63
    58a0:	0f 92       	push	r0
    58a2:	11 24       	eor	r1, r1
    58a4:	0b b6       	in	r0, 0x3b	; 59
    58a6:	0f 92       	push	r0
    58a8:	2f 93       	push	r18
    58aa:	8f 93       	push	r24
    58ac:	9f 93       	push	r25
    58ae:	ef 93       	push	r30
    58b0:	ff 93       	push	r31
	uint8_t temp = UDR0;
    58b2:	20 91 c6 00 	lds	r18, 0x00C6
	if (temp == '$' && !(gpsstatus&(1<<complete)) && !(gpsstatus&(1<<completenotvalid)))
    58b6:	24 32       	cpi	r18, 0x24	; 36
    58b8:	51 f4       	brne	.+20     	; 0x58ce <__vector_20+0x34>
    58ba:	80 91 08 09 	lds	r24, 0x0908
    58be:	98 2f       	mov	r25, r24
    58c0:	9c 70       	andi	r25, 0x0C	; 12
    58c2:	29 f4       	brne	.+10     	; 0x58ce <__vector_20+0x34>
	{
		gpscounter = 0;
    58c4:	10 92 bf 08 	sts	0x08BF, r1
		gpsstatus |= (1<<message);
    58c8:	81 60       	ori	r24, 0x01	; 1
    58ca:	80 93 08 09 	sts	0x0908, r24
	}
	if ((gpsstatus&(1<<message)))
    58ce:	90 91 08 09 	lds	r25, 0x0908
    58d2:	90 ff       	sbrs	r25, 0
    58d4:	3c c0       	rjmp	.+120    	; 0x594e <__vector_20+0xb4>
	{
		gpsdata[gpscounter] = temp;
    58d6:	80 91 bf 08 	lds	r24, 0x08BF
    58da:	e8 2f       	mov	r30, r24
    58dc:	f0 e0       	ldi	r31, 0x00	; 0
    58de:	e0 54       	subi	r30, 0x40	; 64
    58e0:	f7 4f       	sbci	r31, 0xF7	; 247
    58e2:	20 83       	st	Z, r18
		gpscounter++;
    58e4:	8f 5f       	subi	r24, 0xFF	; 255
    58e6:	80 93 bf 08 	sts	0x08BF, r24
		if (gpscounter>72)
    58ea:	89 34       	cpi	r24, 0x49	; 73
    58ec:	20 f0       	brcs	.+8      	; 0x58f6 <__vector_20+0x5c>
		{
			gpsstatus &= ~(1<<message);
    58ee:	9e 7f       	andi	r25, 0xFE	; 254
    58f0:	90 93 08 09 	sts	0x0908, r25
    58f4:	2c c0       	rjmp	.+88     	; 0x594e <__vector_20+0xb4>
		}
		else if (gpscounter==19)
    58f6:	83 31       	cpi	r24, 0x13	; 19
    58f8:	c9 f4       	brne	.+50     	; 0x592c <__vector_20+0x92>
		{
			if (gpsdata[4]=='M' && gpsdata[5]=='C')
    58fa:	80 91 c4 08 	lds	r24, 0x08C4
    58fe:	8d 34       	cpi	r24, 0x4D	; 77
    5900:	89 f4       	brne	.+34     	; 0x5924 <__vector_20+0x8a>
    5902:	80 91 c5 08 	lds	r24, 0x08C5
    5906:	83 34       	cpi	r24, 0x43	; 67
    5908:	69 f4       	brne	.+26     	; 0x5924 <__vector_20+0x8a>
			{
				if (gpsdata[18]!='A')
    590a:	80 91 d2 08 	lds	r24, 0x08D2
    590e:	81 34       	cpi	r24, 0x41	; 65
    5910:	29 f0       	breq	.+10     	; 0x591c <__vector_20+0x82>
				{
					gpsstatus &= ~((1<<valid));
    5912:	9d 7f       	andi	r25, 0xFD	; 253
					gpsstatus |= (1<<notvalidgetdate);
    5914:	90 61       	ori	r25, 0x10	; 16
    5916:	90 93 08 09 	sts	0x0908, r25
    591a:	19 c0       	rjmp	.+50     	; 0x594e <__vector_20+0xb4>
				}
				else{
					gpsstatus |= (1<<valid);
    591c:	92 60       	ori	r25, 0x02	; 2
    591e:	90 93 08 09 	sts	0x0908, r25
    5922:	15 c0       	rjmp	.+42     	; 0x594e <__vector_20+0xb4>
				}
			}
			else{
				gpsstatus &= ~(1<<valid);
				gpsstatus &= ~(1<<message);
    5924:	9c 7f       	andi	r25, 0xFC	; 252
    5926:	90 93 08 09 	sts	0x0908, r25
    592a:	11 c0       	rjmp	.+34     	; 0x594e <__vector_20+0xb4>
			}
		}
		else if (gpscounter == 42 && (gpsstatus&(1<<notvalidgetdate)))
    592c:	8a 32       	cpi	r24, 0x2A	; 42
    592e:	39 f4       	brne	.+14     	; 0x593e <__vector_20+0xa4>
    5930:	94 ff       	sbrs	r25, 4
    5932:	0d c0       	rjmp	.+26     	; 0x594e <__vector_20+0xb4>
		{
			gpsstatus |= (1<<completenotvalid);
			gpsstatus &= ~((1<<message) | (1<<notvalidgetdate));
    5934:	9e 7e       	andi	r25, 0xEE	; 238
    5936:	98 60       	ori	r25, 0x08	; 8
    5938:	90 93 08 09 	sts	0x0908, r25
    593c:	08 c0       	rjmp	.+16     	; 0x594e <__vector_20+0xb4>
		}
		else if (gpscounter == 70 && (gpsstatus&(1<<valid)))
    593e:	86 34       	cpi	r24, 0x46	; 70
    5940:	31 f4       	brne	.+12     	; 0x594e <__vector_20+0xb4>
    5942:	91 ff       	sbrs	r25, 1
    5944:	04 c0       	rjmp	.+8      	; 0x594e <__vector_20+0xb4>
		{
			gpsstatus |= (1<<complete);
			gpsstatus &= ~((1<<message) | (1<<valid));
    5946:	9c 7f       	andi	r25, 0xFC	; 252
    5948:	94 60       	ori	r25, 0x04	; 4
    594a:	90 93 08 09 	sts	0x0908, r25
		}
	}
}
    594e:	ff 91       	pop	r31
    5950:	ef 91       	pop	r30
    5952:	9f 91       	pop	r25
    5954:	8f 91       	pop	r24
    5956:	2f 91       	pop	r18
    5958:	0f 90       	pop	r0
    595a:	0b be       	out	0x3b, r0	; 59
    595c:	0f 90       	pop	r0
    595e:	0f be       	out	0x3f, r0	; 63
    5960:	0f 90       	pop	r0
    5962:	1f 90       	pop	r1
    5964:	18 95       	reti

00005966 <_Z6nullenv>:
double geschw;
double strecke;
double maxgeschw;
uint32_t Fahrtzeit;
void nullen(){
	geschw = 0;
    5966:	10 92 89 08 	sts	0x0889, r1
    596a:	10 92 8a 08 	sts	0x088A, r1
    596e:	10 92 8b 08 	sts	0x088B, r1
    5972:	10 92 8c 08 	sts	0x088C, r1
	strecke = 0;
    5976:	10 92 85 08 	sts	0x0885, r1
    597a:	10 92 86 08 	sts	0x0886, r1
    597e:	10 92 87 08 	sts	0x0887, r1
    5982:	10 92 88 08 	sts	0x0888, r1
	maxgeschw = 0;
    5986:	10 92 81 08 	sts	0x0881, r1
    598a:	10 92 82 08 	sts	0x0882, r1
    598e:	10 92 83 08 	sts	0x0883, r1
    5992:	10 92 84 08 	sts	0x0884, r1
	Fahrtzeit = 0;
    5996:	10 92 7d 08 	sts	0x087D, r1
    599a:	10 92 7e 08 	sts	0x087E, r1
    599e:	10 92 7f 08 	sts	0x087F, r1
    59a2:	10 92 80 08 	sts	0x0880, r1
    59a6:	08 95       	ret

000059a8 <_ZN5tacho11tastendruckEPh>:
		nullen();
	}

	//Tasterhandler
	uint8_t tastendruck(uint8_t *tast){
		if (*tast=='e')
    59a8:	fb 01       	movw	r30, r22
    59aa:	80 81       	ld	r24, Z
    59ac:	85 36       	cpi	r24, 0x65	; 101
    59ae:	09 f4       	brne	.+2      	; 0x59b2 <_ZN5tacho11tastendruckEPh+0xa>
		{
			nullen();
    59b0:	da df       	rcall	.-76     	; 0x5966 <_Z6nullenv>
		}
		return 0;
	}
    59b2:	80 e0       	ldi	r24, 0x00	; 0
    59b4:	08 95       	ret

000059b6 <_Z13reed_debouncePVhh>:
}
uint8_t reed_debounce(volatile uint8_t *port, uint8_t pin)
{
	if ( (*port & (1 << pin)) )
    59b6:	fc 01       	movw	r30, r24
    59b8:	20 81       	ld	r18, Z
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	06 2e       	mov	r0, r22
    59be:	02 c0       	rjmp	.+4      	; 0x59c4 <_Z13reed_debouncePVhh+0xe>
    59c0:	35 95       	asr	r19
    59c2:	27 95       	ror	r18
    59c4:	0a 94       	dec	r0
    59c6:	e2 f7       	brpl	.-8      	; 0x59c0 <_Z13reed_debouncePVhh+0xa>
    59c8:	20 ff       	sbrs	r18, 0
    59ca:	16 c0       	rjmp	.+44     	; 0x59f8 <_Z13reed_debouncePVhh+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    59cc:	ef e0       	ldi	r30, 0x0F	; 15
    59ce:	f7 e2       	ldi	r31, 0x27	; 39
    59d0:	31 97       	sbiw	r30, 0x01	; 1
    59d2:	f1 f7       	brne	.-4      	; 0x59d0 <_Z13reed_debouncePVhh+0x1a>
    59d4:	00 c0       	rjmp	.+0      	; 0x59d6 <_Z13reed_debouncePVhh+0x20>
    59d6:	00 00       	nop
	{
		/* Pin wurde auf Masse gezogen, ms warten   */
		_delay_ms(REEDMS);
		if ( !(*port & (1 << pin)) )
    59d8:	fc 01       	movw	r30, r24
    59da:	80 81       	ld	r24, Z
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	02 c0       	rjmp	.+4      	; 0x59e4 <_Z13reed_debouncePVhh+0x2e>
    59e0:	95 95       	asr	r25
    59e2:	87 95       	ror	r24
    59e4:	6a 95       	dec	r22
    59e6:	e2 f7       	brpl	.-8      	; 0x59e0 <_Z13reed_debouncePVhh+0x2a>
    59e8:	80 fd       	sbrc	r24, 0
    59ea:	08 c0       	rjmp	.+16     	; 0x59fc <_Z13reed_debouncePVhh+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    59ec:	f2 e0       	ldi	r31, 0x02	; 2
    59ee:	fa 95       	dec	r31
    59f0:	f1 f7       	brne	.-4      	; 0x59ee <_Z13reed_debouncePVhh+0x38>
    59f2:	00 c0       	rjmp	.+0      	; 0x59f4 <_Z13reed_debouncePVhh+0x3e>
		{
			/* Anwender Zeit zum Loslassen des Tasters geben */
			_delay_us(1);
			return 1;
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	08 95       	ret
		}
	}
	return 0;
    59f8:	80 e0       	ldi	r24, 0x00	; 0
    59fa:	08 95       	ret
    59fc:	80 e0       	ldi	r24, 0x00	; 0
}
    59fe:	08 95       	ret

00005a00 <_Z15geschwindigkeitf>:
//Berechnung der Geschwindigkeit
void geschwindigkeit(float durch){
    5a00:	cf 92       	push	r12
    5a02:	df 92       	push	r13
    5a04:	ef 92       	push	r14
    5a06:	ff 92       	push	r15
    5a08:	cf 93       	push	r28
    5a0a:	df 93       	push	r29
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
    5a0c:	e4 e8       	ldi	r30, 0x84	; 132
    5a0e:	f0 e0       	ldi	r31, 0x00	; 0
    5a10:	c0 81       	ld	r28, Z
    5a12:	d1 81       	ldd	r29, Z+1	; 0x01
	TCNT1 = 0;
    5a14:	11 82       	std	Z+1, r1	; 0x01
    5a16:	10 82       	st	Z, r1
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
    5a18:	2b ed       	ldi	r18, 0xDB	; 219
    5a1a:	3f e0       	ldi	r19, 0x0F	; 15
    5a1c:	49 e4       	ldi	r20, 0x49	; 73
    5a1e:	50 e4       	ldi	r21, 0x40	; 64
    5a20:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    5a24:	26 e6       	ldi	r18, 0x66	; 102
    5a26:	36 e6       	ldi	r19, 0x66	; 102
    5a28:	46 e6       	ldi	r20, 0x66	; 102
    5a2a:	50 e4       	ldi	r21, 0x40	; 64
    5a2c:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    5a30:	6b 01       	movw	r12, r22
    5a32:	7c 01       	movw	r14, r24
	//Einholen der Daten und ruecksetzen
	uint16_t zaehlungen = TCNT1;
	TCNT1 = 0;
	//Berechnung
	double temp = geschw;
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
    5a34:	be 01       	movw	r22, r28
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	0e 94 95 40 	call	0x812a	; 0x812a <__floatunsisf>
    5a3e:	20 e0       	ldi	r18, 0x00	; 0
    5a40:	30 e0       	ldi	r19, 0x00	; 0
    5a42:	40 e0       	ldi	r20, 0x00	; 0
    5a44:	5e e3       	ldi	r21, 0x3E	; 62
    5a46:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    5a4a:	2d eb       	ldi	r18, 0xBD	; 189
    5a4c:	37 e3       	ldi	r19, 0x37	; 55
    5a4e:	46 e8       	ldi	r20, 0x86	; 134
    5a50:	5a e3       	ldi	r21, 0x3A	; 58
    5a52:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    5a56:	2a e0       	ldi	r18, 0x0A	; 10
    5a58:	37 ed       	ldi	r19, 0xD7	; 215
    5a5a:	43 ea       	ldi	r20, 0xA3	; 163
    5a5c:	5b e3       	ldi	r21, 0x3B	; 59
    5a5e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    5a62:	9b 01       	movw	r18, r22
    5a64:	ac 01       	movw	r20, r24
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
    5a66:	c7 01       	movw	r24, r14
    5a68:	b6 01       	movw	r22, r12
    5a6a:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
    5a6e:	20 91 89 08 	lds	r18, 0x0889
    5a72:	30 91 8a 08 	lds	r19, 0x088A
    5a76:	40 91 8b 08 	lds	r20, 0x088B
    5a7a:	50 91 8c 08 	lds	r21, 0x088C
    5a7e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
	geschw /= 2.0;
    5a82:	20 e0       	ldi	r18, 0x00	; 0
    5a84:	30 e0       	ldi	r19, 0x00	; 0
    5a86:	40 e0       	ldi	r20, 0x00	; 0
    5a88:	5f e3       	ldi	r21, 0x3F	; 63
    5a8a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    5a8e:	6b 01       	movw	r12, r22
    5a90:	7c 01       	movw	r14, r24
	if (geschw >=160)
    5a92:	20 e0       	ldi	r18, 0x00	; 0
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	40 e2       	ldi	r20, 0x20	; 32
    5a98:	53 e4       	ldi	r21, 0x43	; 67
    5a9a:	0e 94 a5 41 	call	0x834a	; 0x834a <__gesf2>
    5a9e:	88 23       	and	r24, r24
    5aa0:	4c f4       	brge	.+18     	; 0x5ab4 <_Z15geschwindigkeitf+0xb4>
	double umlaufzeit = (REEDMS/1000.0+(zaehlungen/zaehlungenprozeiteinheit)*zeitproachtzaehlungen);
	geschw = (durch)*M_PI*3.6;
	geschw /= umlaufzeit;
	//Mittelwert aus der letzten Messung zum Fehler minimieren
	geschw += temp;
	geschw /= 2.0;
    5aa2:	c0 92 89 08 	sts	0x0889, r12
    5aa6:	d0 92 8a 08 	sts	0x088A, r13
    5aaa:	e0 92 8b 08 	sts	0x088B, r14
    5aae:	f0 92 8c 08 	sts	0x088C, r15
    5ab2:	08 c0       	rjmp	.+16     	; 0x5ac4 <_Z15geschwindigkeitf+0xc4>
	if (geschw >=160)
	{
		geschw=0;
    5ab4:	10 92 89 08 	sts	0x0889, r1
    5ab8:	10 92 8a 08 	sts	0x088A, r1
    5abc:	10 92 8b 08 	sts	0x088B, r1
    5ac0:	10 92 8c 08 	sts	0x088C, r1
	}
}
    5ac4:	df 91       	pop	r29
    5ac6:	cf 91       	pop	r28
    5ac8:	ff 90       	pop	r15
    5aca:	ef 90       	pop	r14
    5acc:	df 90       	pop	r13
    5ace:	cf 90       	pop	r12
    5ad0:	08 95       	ret

00005ad2 <get_fattime>:

FATFS FATFS_Obj;
FIL logger;

DWORD get_fattime (void)
{
    5ad2:	0f 93       	push	r16
    5ad4:	1f 93       	push	r17
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
    5ad6:	ec e3       	ldi	r30, 0x3C	; 60
    5ad8:	fe e0       	ldi	r31, 0x0E	; 14
    5ada:	24 89       	ldd	r18, Z+20	; 0x14

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
	| ((DWORD)rtc.Monat << 21)
    5adc:	86 89       	ldd	r24, Z+22	; 0x16
    5ade:	90 e0       	ldi	r25, 0x00	; 0
    5ae0:	a0 e0       	ldi	r26, 0x00	; 0
    5ae2:	b0 e0       	ldi	r27, 0x00	; 0
    5ae4:	07 2e       	mov	r0, r23
    5ae6:	75 e1       	ldi	r23, 0x15	; 21
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	aa 1f       	adc	r26, r26
    5aee:	bb 1f       	adc	r27, r27
    5af0:	7a 95       	dec	r23
    5af2:	d1 f7       	brne	.-12     	; 0x5ae8 <get_fattime+0x16>
    5af4:	70 2d       	mov	r23, r0
    5af6:	a2 2b       	or	r26, r18
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
    5af8:	40 89       	ldd	r20, Z+16	; 0x10
    5afa:	50 e0       	ldi	r21, 0x00	; 0
    5afc:	60 e0       	ldi	r22, 0x00	; 0
    5afe:	70 e0       	ldi	r23, 0x00	; 0
    5b00:	03 2e       	mov	r0, r19
    5b02:	3b e0       	ldi	r19, 0x0B	; 11
    5b04:	44 0f       	add	r20, r20
    5b06:	55 1f       	adc	r21, r21
    5b08:	66 1f       	adc	r22, r22
    5b0a:	77 1f       	adc	r23, r23
    5b0c:	3a 95       	dec	r19
    5b0e:	d1 f7       	brne	.-12     	; 0x5b04 <get_fattime+0x32>
    5b10:	30 2d       	mov	r19, r0
    5b12:	84 2b       	or	r24, r20
    5b14:	95 2b       	or	r25, r21
    5b16:	a6 2b       	or	r26, r22
    5b18:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Minuten << 5)
    5b1a:	41 89       	ldd	r20, Z+17	; 0x11
    5b1c:	50 e0       	ldi	r21, 0x00	; 0
    5b1e:	60 e0       	ldi	r22, 0x00	; 0
    5b20:	70 e0       	ldi	r23, 0x00	; 0
    5b22:	44 0f       	add	r20, r20
    5b24:	55 1f       	adc	r21, r21
    5b26:	66 1f       	adc	r22, r22
    5b28:	77 1f       	adc	r23, r23
    5b2a:	44 0f       	add	r20, r20
    5b2c:	55 1f       	adc	r21, r21
    5b2e:	66 1f       	adc	r22, r22
    5b30:	77 1f       	adc	r23, r23
    5b32:	44 0f       	add	r20, r20
    5b34:	55 1f       	adc	r21, r21
    5b36:	66 1f       	adc	r22, r22
    5b38:	77 1f       	adc	r23, r23
    5b3a:	44 0f       	add	r20, r20
    5b3c:	55 1f       	adc	r21, r21
    5b3e:	66 1f       	adc	r22, r22
    5b40:	77 1f       	adc	r23, r23
    5b42:	44 0f       	add	r20, r20
    5b44:	55 1f       	adc	r21, r21
    5b46:	66 1f       	adc	r22, r22
    5b48:	77 1f       	adc	r23, r23
    5b4a:	84 2b       	or	r24, r20
    5b4c:	95 2b       	or	r25, r21
    5b4e:	a6 2b       	or	r26, r22
    5b50:	b7 2b       	or	r27, r23
	| ((DWORD)rtc.Sekunden >> 1);
    5b52:	42 89       	ldd	r20, Z+18	; 0x12
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	60 e0       	ldi	r22, 0x00	; 0
    5b58:	70 e0       	ldi	r23, 0x00	; 0
    5b5a:	76 95       	lsr	r23
    5b5c:	67 95       	ror	r22
    5b5e:	57 95       	ror	r21
    5b60:	47 95       	ror	r20
    5b62:	48 2b       	or	r20, r24
    5b64:	59 2b       	or	r21, r25
    5b66:	6a 2b       	or	r22, r26
    5b68:	7b 2b       	or	r23, r27
FIL logger;

DWORD get_fattime (void)
{
	/* Pack date and time into a DWORD variable */
	return	  ((DWORD)((2000+rtc.Jahr) - 1980) << 25)
    5b6a:	87 89       	ldd	r24, Z+23	; 0x17
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	44 96       	adiw	r24, 0x14	; 20
    5b70:	09 2e       	mov	r0, r25
    5b72:	00 0c       	add	r0, r0
    5b74:	aa 0b       	sbc	r26, r26
    5b76:	bb 0b       	sbc	r27, r27
    5b78:	07 2e       	mov	r0, r23
    5b7a:	79 e1       	ldi	r23, 0x19	; 25
    5b7c:	88 0f       	add	r24, r24
    5b7e:	99 1f       	adc	r25, r25
    5b80:	aa 1f       	adc	r26, r26
    5b82:	bb 1f       	adc	r27, r27
    5b84:	7a 95       	dec	r23
    5b86:	d1 f7       	brne	.-12     	; 0x5b7c <get_fattime+0xaa>
    5b88:	70 2d       	mov	r23, r0
	| ((DWORD)rtc.Monat << 21)
	| ((DWORD)rtc.Tag << 16)
	| ((DWORD)rtc.Stunden << 11)
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
    5b8a:	8a 01       	movw	r16, r20
    5b8c:	9b 01       	movw	r18, r22
    5b8e:	08 2b       	or	r16, r24
    5b90:	19 2b       	or	r17, r25
    5b92:	2a 2b       	or	r18, r26
    5b94:	3b 2b       	or	r19, r27
    5b96:	c9 01       	movw	r24, r18
    5b98:	b8 01       	movw	r22, r16
}
    5b9a:	1f 91       	pop	r17
    5b9c:	0f 91       	pop	r16
    5b9e:	08 95       	ret

00005ba0 <_Z15initialisierungv>:
		maininterupthandler(Folien[position]);
		gpshandler();
    }
}

void initialisierung(){
    5ba0:	ff 92       	push	r15
    5ba2:	0f 93       	push	r16
    5ba4:	1f 93       	push	r17
    5ba6:	cf 93       	push	r28
    5ba8:	df 93       	push	r29
    5baa:	cd b7       	in	r28, 0x3d	; 61
    5bac:	de b7       	in	r29, 0x3e	; 62
    5bae:	a9 97       	sbiw	r28, 0x29	; 41
    5bb0:	0f b6       	in	r0, 0x3f	; 63
    5bb2:	f8 94       	cli
    5bb4:	de bf       	out	0x3e, r29	; 62
    5bb6:	0f be       	out	0x3f, r0	; 63
    5bb8:	cd bf       	out	0x3d, r28	; 61
	//GPS EN aktivieren	
	DDRC |= (1<<PINC4);
    5bba:	3c 9a       	sbi	0x07, 4	; 7
	//GPSDISABLE();
	GPSENABLE();
    5bbc:	44 9a       	sbi	0x08, 4	; 8
	//nullen der Flagregister
	anzeige=0;
    5bbe:	10 92 0c 09 	sts	0x090C, r1
	statusreg=0;
    5bc2:	10 92 0b 09 	sts	0x090B, r1
	position=0;
    5bc6:	10 92 0a 09 	sts	0x090A, r1
	FPS=0;
    5bca:	10 92 09 09 	sts	0x0909, r1
	
	//initialisieren des Zaehler fuer die Winkelgeschw sowie den Timer
	TCNT1 = 0;
    5bce:	10 92 85 00 	sts	0x0085, r1
    5bd2:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0;
    5bd6:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = ((1<<CS12) | (1<<CS10));
    5bda:	85 e0       	ldi	r24, 0x05	; 5
    5bdc:	80 93 81 00 	sts	0x0081, r24
	
	//Eingang fuer den Reedkontak schalten mit internem Pullup
	DDRA |= ((1<<PORTA6));
    5be0:	0e 9a       	sbi	0x01, 6	; 1
	PORTA |= (1<<PORTA6);
    5be2:	16 9a       	sbi	0x02, 6	; 2
	
	//ADC Initialisieren auf CH0
	ADMUX = (1<<REFS0);
    5be4:	80 e4       	ldi	r24, 0x40	; 64
    5be6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS1) | (1<<ADPS0);
    5bea:	ea e7       	ldi	r30, 0x7A	; 122
    5bec:	f0 e0       	ldi	r31, 0x00	; 0
    5bee:	83 e0       	ldi	r24, 0x03	; 3
    5bf0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);
    5bf2:	80 81       	ld	r24, Z
    5bf4:	80 68       	ori	r24, 0x80	; 128
    5bf6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
    5bf8:	80 81       	ld	r24, Z
    5bfa:	80 64       	ori	r24, 0x40	; 64
    5bfc:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {}
    5bfe:	80 81       	ld	r24, Z
    5c00:	18 2f       	mov	r17, r24
    5c02:	10 74       	andi	r17, 0x40	; 64
    5c04:	86 fd       	sbrc	r24, 6
    5c06:	fb cf       	rjmp	.-10     	; 0x5bfe <_Z15initialisierungv+0x5e>
	(void) ADCW;
    5c08:	80 91 78 00 	lds	r24, 0x0078
    5c0c:	90 91 79 00 	lds	r25, 0x0079
	
	//USART initalisieren, aktivieren erst spaeter
	PIND &= ~((1<<PIND1) | (1<<PIND2));
    5c10:	89 b1       	in	r24, 0x09	; 9
    5c12:	89 7f       	andi	r24, 0xF9	; 249
    5c14:	89 b9       	out	0x09, r24	; 9
	DDRD &= ~((1<<PIND1) | (1<<PIND2));
    5c16:	8a b1       	in	r24, 0x0a	; 10
    5c18:	89 7f       	andi	r24, 0xF9	; 249
    5c1a:	8a b9       	out	0x0a, r24	; 10
	UBRR0H = 0;
    5c1c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;							//9600 Baud
    5c20:	83 e3       	ldi	r24, 0x33	; 51
    5c22:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);	// 8Bit Frame
    5c26:	86 e0       	ldi	r24, 0x06	; 6
    5c28:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXCIE0);
    5c2c:	80 e8       	ldi	r24, 0x80	; 128
    5c2e:	80 93 c1 00 	sts	0x00C1, r24
	gpscounter = 0;
    5c32:	10 92 bf 08 	sts	0x08BF, r1
	gpsstatus = (1<<fix);
    5c36:	80 93 08 09 	sts	0x0908, r24
	lat = 0;
    5c3a:	10 92 bb 08 	sts	0x08BB, r1
    5c3e:	10 92 bc 08 	sts	0x08BC, r1
    5c42:	10 92 bd 08 	sts	0x08BD, r1
    5c46:	10 92 be 08 	sts	0x08BE, r1
	lon = 0;
    5c4a:	10 92 a7 08 	sts	0x08A7, r1
    5c4e:	10 92 a8 08 	sts	0x08A8, r1
    5c52:	10 92 a9 08 	sts	0x08A9, r1
    5c56:	10 92 aa 08 	sts	0x08AA, r1
	gpsspeed = 0;
    5c5a:	10 92 93 08 	sts	0x0893, r1
    5c5e:	10 92 94 08 	sts	0x0894, r1
    5c62:	10 92 95 08 	sts	0x0895, r1
    5c66:	10 92 96 08 	sts	0x0896, r1
	gpsstunde = 0;
    5c6a:	10 92 92 08 	sts	0x0892, r1
	gpsminute = 0;
    5c6e:	10 92 91 08 	sts	0x0891, r1
	gpssekunde = 0;
    5c72:	10 92 90 08 	sts	0x0890, r1
	gpsTag = 0;
    5c76:	10 92 8f 08 	sts	0x088F, r1
	gpsMonat = 0;
    5c7a:	10 92 8e 08 	sts	0x088E, r1
	gpsJahr = 0;
    5c7e:	10 92 8d 08 	sts	0x088D, r1
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    5c82:	1f 8a       	std	Y+23, r1	; 0x17
		oled = ol;
    5c84:	8b e3       	ldi	r24, 0x3B	; 59
    5c86:	9a e0       	ldi	r25, 0x0A	; 10
    5c88:	99 8f       	std	Y+25, r25	; 0x19
    5c8a:	88 8f       	std	Y+24, r24	; 0x18
		rtc = rt;
    5c8c:	8c e3       	ldi	r24, 0x3C	; 60
    5c8e:	9e e0       	ldi	r25, 0x0E	; 14
    5c90:	9b 8f       	std	Y+27, r25	; 0x1b
    5c92:	8a 8f       	std	Y+26, r24	; 0x1a
		posy=0;
    5c94:	1e a2       	std	Y+38, r1	; 0x26
		posx=0;
    5c96:	1f a2       	std	Y+39, r1	; 0x27
		maxentriesx = 1;
    5c98:	81 e0       	ldi	r24, 0x01	; 1
    5c9a:	89 a7       	std	Y+41, r24	; 0x29
class wilkommen: public monitor
{
	private:
	
	public:
	wilkommen(Display *ol, RTC *rt):monitor(ol,rt)
    5c9c:	83 e1       	ldi	r24, 0x13	; 19
    5c9e:	94 e0       	ldi	r25, 0x04	; 4
    5ca0:	9a 83       	std	Y+2, r25	; 0x02
    5ca2:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	
	void draw(){
		oled->clearFrame();
    5ca4:	8b e3       	ldi	r24, 0x3B	; 59
    5ca6:	9a e0       	ldi	r25, 0x0A	; 10
    5ca8:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
		
		buffersize=sprintf(buffer,"Fahradcomputer");
    5cac:	8f e0       	ldi	r24, 0x0F	; 15
    5cae:	e6 e9       	ldi	r30, 0x96	; 150
    5cb0:	f1 e0       	ldi	r31, 0x01	; 1
    5cb2:	de 01       	movw	r26, r28
    5cb4:	13 96       	adiw	r26, 0x03	; 3
    5cb6:	01 90       	ld	r0, Z+
    5cb8:	0d 92       	st	X+, r0
    5cba:	8a 95       	dec	r24
    5cbc:	e1 f7       	brne	.-8      	; 0x5cb6 <_Z15initialisierungv+0x116>
    5cbe:	8e e0       	ldi	r24, 0x0E	; 14
    5cc0:	8f 8b       	std	Y+23, r24	; 0x17
    5cc2:	f1 2e       	mov	r15, r17
    5cc4:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
    5cc6:	e3 e0       	ldi	r30, 0x03	; 3
    5cc8:	f0 e0       	ldi	r31, 0x00	; 0
    5cca:	ec 0f       	add	r30, r28
    5ccc:	fd 1f       	adc	r31, r29
    5cce:	e0 0f       	add	r30, r16
    5cd0:	f1 1d       	adc	r31, r1
    5cd2:	20 e0       	ldi	r18, 0x00	; 0
    5cd4:	4f 2d       	mov	r20, r15
    5cd6:	60 81       	ld	r22, Z
    5cd8:	88 8d       	ldd	r24, Y+24	; 0x18
    5cda:	99 8d       	ldd	r25, Y+25	; 0x19
    5cdc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	
	void draw(){
		oled->clearFrame();
		
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
    5ce0:	0f 5f       	subi	r16, 0xFF	; 255
    5ce2:	26 e0       	ldi	r18, 0x06	; 6
    5ce4:	f2 0e       	add	r15, r18
    5ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ce8:	08 17       	cp	r16, r24
    5cea:	68 f3       	brcs	.-38     	; 0x5cc6 <_Z15initialisierungv+0x126>
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
    5cec:	8f e0       	ldi	r24, 0x0F	; 15
    5cee:	e5 ea       	ldi	r30, 0xA5	; 165
    5cf0:	f1 e0       	ldi	r31, 0x01	; 1
    5cf2:	de 01       	movw	r26, r28
    5cf4:	13 96       	adiw	r26, 0x03	; 3
    5cf6:	01 90       	ld	r0, Z+
    5cf8:	0d 92       	st	X+, r0
    5cfa:	8a 95       	dec	r24
    5cfc:	e1 f7       	brne	.-8      	; 0x5cf6 <_Z15initialisierungv+0x156>
    5cfe:	8e e0       	ldi	r24, 0x0E	; 14
    5d00:	8f 8b       	std	Y+23, r24	; 0x17
    5d02:	f1 2e       	mov	r15, r17
    5d04:	00 e0       	ldi	r16, 0x00	; 0
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
    5d06:	e3 e0       	ldi	r30, 0x03	; 3
    5d08:	f0 e0       	ldi	r31, 0x00	; 0
    5d0a:	ec 0f       	add	r30, r28
    5d0c:	fd 1f       	adc	r31, r29
    5d0e:	e0 0f       	add	r30, r16
    5d10:	f1 1d       	adc	r31, r1
    5d12:	28 e0       	ldi	r18, 0x08	; 8
    5d14:	4f 2d       	mov	r20, r15
    5d16:	60 81       	ld	r22, Z
    5d18:	88 8d       	ldd	r24, Y+24	; 0x18
    5d1a:	99 8d       	ldd	r25, Y+25	; 0x19
    5d1c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"Fahradcomputer");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
    5d20:	0f 5f       	subi	r16, 0xFF	; 255
    5d22:	36 e0       	ldi	r19, 0x06	; 6
    5d24:	f3 0e       	add	r15, r19
    5d26:	8f 89       	ldd	r24, Y+23	; 0x17
    5d28:	08 17       	cp	r16, r24
    5d2a:	68 f3       	brcs	.-38     	; 0x5d06 <_Z15initialisierungv+0x166>
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    5d2c:	80 e4       	ldi	r24, 0x40	; 64
    5d2e:	8f 93       	push	r24
    5d30:	83 e4       	ldi	r24, 0x43	; 67
    5d32:	8f 93       	push	r24
    5d34:	83 e3       	ldi	r24, 0x33	; 51
    5d36:	8f 93       	push	r24
    5d38:	8f 93       	push	r24
    5d3a:	84 eb       	ldi	r24, 0xB4	; 180
    5d3c:	91 e0       	ldi	r25, 0x01	; 1
    5d3e:	9f 93       	push	r25
    5d40:	8f 93       	push	r24
    5d42:	ce 01       	movw	r24, r28
    5d44:	03 96       	adiw	r24, 0x03	; 3
    5d46:	9f 93       	push	r25
    5d48:	8f 93       	push	r24
    5d4a:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    5d4e:	8f 8b       	std	Y+23, r24	; 0x17
		for(uint8_t i=0; i < buffersize;i++){
    5d50:	0f b6       	in	r0, 0x3f	; 63
    5d52:	f8 94       	cli
    5d54:	de bf       	out	0x3e, r29	; 62
    5d56:	0f be       	out	0x3f, r0	; 63
    5d58:	cd bf       	out	0x3d, r28	; 61
    5d5a:	88 23       	and	r24, r24
    5d5c:	99 f0       	breq	.+38     	; 0x5d84 <_Z15initialisierungv+0x1e4>
    5d5e:	00 e0       	ldi	r16, 0x00	; 0
			oled->draw_ASCI(buffer[i],i*charsize,32);
    5d60:	e3 e0       	ldi	r30, 0x03	; 3
    5d62:	f0 e0       	ldi	r31, 0x00	; 0
    5d64:	ec 0f       	add	r30, r28
    5d66:	fd 1f       	adc	r31, r29
    5d68:	e0 0f       	add	r30, r16
    5d6a:	f1 1d       	adc	r31, r1
    5d6c:	20 e2       	ldi	r18, 0x20	; 32
    5d6e:	41 2f       	mov	r20, r17
    5d70:	60 81       	ld	r22, Z
    5d72:	88 8d       	ldd	r24, Y+24	; 0x18
    5d74:	99 8d       	ldd	r25, Y+25	; 0x19
    5d76:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i=0; i < buffersize;i++){
			oled->draw_ASCI(buffer[i],i*charsize,8);
		}
		buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
		for(uint8_t i=0; i < buffersize;i++){
    5d7a:	0f 5f       	subi	r16, 0xFF	; 255
    5d7c:	1a 5f       	subi	r17, 0xFA	; 250
    5d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    5d80:	08 17       	cp	r16, r24
    5d82:	70 f3       	brcs	.-36     	; 0x5d60 <_Z15initialisierungv+0x1c0>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    5d84:	88 8d       	ldd	r24, Y+24	; 0x18
    5d86:	99 8d       	ldd	r25, Y+25	; 0x19
    5d88:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    5d8c:	8a e0       	ldi	r24, 0x0A	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5d8e:	ff e7       	ldi	r31, 0x7F	; 127
    5d90:	28 e3       	ldi	r18, 0x38	; 56
    5d92:	31 e0       	ldi	r19, 0x01	; 1
    5d94:	f1 50       	subi	r31, 0x01	; 1
    5d96:	20 40       	sbci	r18, 0x00	; 0
    5d98:	30 40       	sbci	r19, 0x00	; 0
    5d9a:	e1 f7       	brne	.-8      	; 0x5d94 <_Z15initialisierungv+0x1f4>
    5d9c:	00 c0       	rjmp	.+0      	; 0x5d9e <_Z15initialisierungv+0x1fe>
    5d9e:	00 00       	nop
    5da0:	9f e7       	ldi	r25, 0x7F	; 127
    5da2:	e8 e3       	ldi	r30, 0x38	; 56
    5da4:	f1 e0       	ldi	r31, 0x01	; 1
    5da6:	91 50       	subi	r25, 0x01	; 1
    5da8:	e0 40       	sbci	r30, 0x00	; 0
    5daa:	f0 40       	sbci	r31, 0x00	; 0
    5dac:	e1 f7       	brne	.-8      	; 0x5da6 <_Z15initialisierungv+0x206>
    5dae:	00 c0       	rjmp	.+0      	; 0x5db0 <_Z15initialisierungv+0x210>
    5db0:	00 00       	nop
    5db2:	81 50       	subi	r24, 0x01	; 1
	
	//Wilkommensanzeige
	wilkommen wil(&oled,&rtc);
	wil.draw();
	for (uint8_t i=0; i<10;i++)
    5db4:	61 f7       	brne	.-40     	; 0x5d8e <_Z15initialisierungv+0x1ee>
	{
		_delay_ms(50);
		_delay_ms(50);
	}
	//Zeit aus speicher
	rtc.Sekunden= 0;
    5db6:	0c e3       	ldi	r16, 0x3C	; 60
    5db8:	1e e0       	ldi	r17, 0x0E	; 14
    5dba:	f8 01       	movw	r30, r16
    5dbc:	12 8a       	std	Z+18, r1	; 0x12
	rtc.Minuten	= EEPROM_Read(EEMINUTEN);
    5dbe:	80 e0       	ldi	r24, 0x00	; 0
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	0d dd       	rcall	.-1510   	; 0x57de <_Z11EEPROM_Readj>
    5dc4:	f8 01       	movw	r30, r16
    5dc6:	81 8b       	std	Z+17, r24	; 0x11
	rtc.Stunden	= EEPROM_Read(EESTUNDEN);
    5dc8:	81 e0       	ldi	r24, 0x01	; 1
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	08 dd       	rcall	.-1520   	; 0x57de <_Z11EEPROM_Readj>
    5dce:	f8 01       	movw	r30, r16
    5dd0:	80 8b       	std	Z+16, r24	; 0x10
	rtc.Tag		= EEPROM_Read(EETAGE);
    5dd2:	82 e0       	ldi	r24, 0x02	; 2
    5dd4:	90 e0       	ldi	r25, 0x00	; 0
    5dd6:	03 dd       	rcall	.-1530   	; 0x57de <_Z11EEPROM_Readj>
    5dd8:	f8 01       	movw	r30, r16
    5dda:	84 8b       	std	Z+20, r24	; 0x14
	rtc.Monat	= EEPROM_Read(EEMONAT);
    5ddc:	83 e0       	ldi	r24, 0x03	; 3
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	fe dc       	rcall	.-1540   	; 0x57de <_Z11EEPROM_Readj>
    5de2:	f8 01       	movw	r30, r16
    5de4:	86 8b       	std	Z+22, r24	; 0x16
	rtc.Jahr	= EEPROM_Read(EEJAHR);
    5de6:	84 e0       	ldi	r24, 0x04	; 4
    5de8:	90 e0       	ldi	r25, 0x00	; 0
    5dea:	f9 dc       	rcall	.-1550   	; 0x57de <_Z11EEPROM_Readj>
    5dec:	f8 01       	movw	r30, r16
    5dee:	87 8b       	std	Z+23, r24	; 0x17
	rtc.ausgabedatumneu();
    5df0:	c8 01       	movw	r24, r16
    5df2:	0e 94 93 3e 	call	0x7d26	; 0x7d26 <_ZN3RTC15ausgabedatumneuEv>
	rtc.RTCstart();
    5df6:	c8 01       	movw	r24, r16
    5df8:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <_ZN3RTC8RTCstartEv>
	
	//AD deaktivieren zum stromsparen
	ACSR |= (1<<ACD);
    5dfc:	80 b7       	in	r24, 0x30	; 48
    5dfe:	80 68       	ori	r24, 0x80	; 128
    5e00:	80 bf       	out	0x30, r24	; 48
	
	//USART aktivieren jetzt nur hier zum testen
	UCSR0B |= (1<<RXEN0);
    5e02:	e1 ec       	ldi	r30, 0xC1	; 193
    5e04:	f0 e0       	ldi	r31, 0x00	; 0
    5e06:	80 81       	ld	r24, Z
    5e08:	80 61       	ori	r24, 0x10	; 16
    5e0a:	80 83       	st	Z, r24
	
	//SD Karten timer init
	TCCR0A	 = (1<<WGM01);		//Timer im ctc Mode
    5e0c:	82 e0       	ldi	r24, 0x02	; 2
    5e0e:	84 bd       	out	0x24, r24	; 36
	OCR0A	 = 38;		//ctc counter ende
    5e10:	86 e2       	ldi	r24, 0x26	; 38
    5e12:	87 bd       	out	0x27, r24	; 39
	TIMSK0	|= (1<<OCIE0A);
    5e14:	ee e6       	ldi	r30, 0x6E	; 110
    5e16:	f0 e0       	ldi	r31, 0x00	; 0
    5e18:	80 81       	ld	r24, Z
    5e1a:	82 60       	ori	r24, 0x02	; 2
    5e1c:	80 83       	st	Z, r24
	TCCR0B	|= (1<<CS02) | (1<<CS00);	//presc=1024
    5e1e:	85 b5       	in	r24, 0x25	; 37
    5e20:	85 60       	ori	r24, 0x05	; 5
    5e22:	85 bd       	out	0x25, r24	; 37
	
	sei();
    5e24:	78 94       	sei
}
    5e26:	a9 96       	adiw	r28, 0x29	; 41
    5e28:	0f b6       	in	r0, 0x3f	; 63
    5e2a:	f8 94       	cli
    5e2c:	de bf       	out	0x3e, r29	; 62
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	cd bf       	out	0x3d, r28	; 61
    5e32:	df 91       	pop	r29
    5e34:	cf 91       	pop	r28
    5e36:	1f 91       	pop	r17
    5e38:	0f 91       	pop	r16
    5e3a:	ff 90       	pop	r15
    5e3c:	08 95       	ret

00005e3e <_Z15tastaturhandlerP7monitorh>:

void tastaturhandler(monitor *mon, uint8_t taste){
    5e3e:	cf 93       	push	r28
    5e40:	df 93       	push	r29
    5e42:	1f 92       	push	r1
    5e44:	cd b7       	in	r28, 0x3d	; 61
    5e46:	de b7       	in	r29, 0x3e	; 62
    5e48:	69 83       	std	Y+1, r22	; 0x01
	if (taste!=' ')
    5e4a:	60 32       	cpi	r22, 0x20	; 32
    5e4c:	09 f4       	brne	.+2      	; 0x5e50 <_Z15tastaturhandlerP7monitorh+0x12>
    5e4e:	8e c0       	rjmp	.+284    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
    5e50:	dc 01       	movw	r26, r24
	{
		anzeige |= (1<<refreshdisplay);
    5e52:	80 91 0c 09 	lds	r24, 0x090C
    5e56:	81 60       	ori	r24, 0x01	; 1
    5e58:	80 93 0c 09 	sts	0x090C, r24
		switch (taste)							//Tastendruck ueberpruefen
    5e5c:	46 2f       	mov	r20, r22
    5e5e:	50 e0       	ldi	r21, 0x00	; 0
    5e60:	fa 01       	movw	r30, r20
    5e62:	f0 97       	sbiw	r30, 0x30	; 48
    5e64:	e6 34       	cpi	r30, 0x46	; 70
    5e66:	f1 05       	cpc	r31, r1
    5e68:	08 f0       	brcs	.+2      	; 0x5e6c <_Z15tastaturhandlerP7monitorh+0x2e>
    5e6a:	75 c0       	rjmp	.+234    	; 0x5f56 <_Z15tastaturhandlerP7monitorh+0x118>
    5e6c:	e5 55       	subi	r30, 0x55	; 85
    5e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e70:	0c 94 38 47 	jmp	0x8e70	; 0x8e70 <__tablejump2__>
		{
			case 'm':
			position = numberofpages;
    5e74:	85 e0       	ldi	r24, 0x05	; 5
    5e76:	80 93 0a 09 	sts	0x090A, r24
			break;
    5e7a:	78 c0       	rjmp	.+240    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			case 'l':
			if (mon->posx==0)
    5e7c:	96 96       	adiw	r26, 0x26	; 38
    5e7e:	8c 91       	ld	r24, X
    5e80:	96 97       	sbiw	r26, 0x26	; 38
    5e82:	81 11       	cpse	r24, r1
    5e84:	04 c0       	rjmp	.+8      	; 0x5e8e <_Z15tastaturhandlerP7monitorh+0x50>
			{
				position = numberofpages;
    5e86:	85 e0       	ldi	r24, 0x05	; 5
    5e88:	80 93 0a 09 	sts	0x090A, r24
    5e8c:	6f c0       	rjmp	.+222    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posx--;
    5e8e:	81 50       	subi	r24, 0x01	; 1
    5e90:	96 96       	adiw	r26, 0x26	; 38
    5e92:	8c 93       	st	X, r24
    5e94:	6b c0       	rjmp	.+214    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'r':
			if (position==numberofpages)
    5e96:	80 91 0a 09 	lds	r24, 0x090A
    5e9a:	85 30       	cpi	r24, 0x05	; 5
    5e9c:	29 f4       	brne	.+10     	; 0x5ea8 <_Z15tastaturhandlerP7monitorh+0x6a>
			{
				position=mon->posy;
    5e9e:	95 96       	adiw	r26, 0x25	; 37
    5ea0:	8c 91       	ld	r24, X
    5ea2:	80 93 0a 09 	sts	0x090A, r24
    5ea6:	62 c0       	rjmp	.+196    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    5ea8:	96 96       	adiw	r26, 0x26	; 38
    5eaa:	8c 91       	ld	r24, X
    5eac:	96 97       	sbiw	r26, 0x26	; 38
    5eae:	98 96       	adiw	r26, 0x28	; 40
    5eb0:	9c 91       	ld	r25, X
    5eb2:	98 97       	sbiw	r26, 0x28	; 40
    5eb4:	89 17       	cp	r24, r25
    5eb6:	08 f0       	brcs	.+2      	; 0x5eba <_Z15tastaturhandlerP7monitorh+0x7c>
    5eb8:	59 c0       	rjmp	.+178    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    5eba:	8f 5f       	subi	r24, 0xFF	; 255
    5ebc:	96 96       	adiw	r26, 0x26	; 38
    5ebe:	8c 93       	st	X, r24
    5ec0:	55 c0       	rjmp	.+170    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'o':
			if (position==numberofpages)
    5ec2:	80 91 0a 09 	lds	r24, 0x090A
    5ec6:	85 30       	cpi	r24, 0x05	; 5
    5ec8:	29 f4       	brne	.+10     	; 0x5ed4 <_Z15tastaturhandlerP7monitorh+0x96>
			{
				position=mon->posy;
    5eca:	95 96       	adiw	r26, 0x25	; 37
    5ecc:	8c 91       	ld	r24, X
    5ece:	80 93 0a 09 	sts	0x090A, r24
    5ed2:	4c c0       	rjmp	.+152    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else if (!(mon->posx >= mon->maxentriesx))
    5ed4:	96 96       	adiw	r26, 0x26	; 38
    5ed6:	8c 91       	ld	r24, X
    5ed8:	96 97       	sbiw	r26, 0x26	; 38
    5eda:	98 96       	adiw	r26, 0x28	; 40
    5edc:	9c 91       	ld	r25, X
    5ede:	98 97       	sbiw	r26, 0x28	; 40
    5ee0:	89 17       	cp	r24, r25
    5ee2:	08 f0       	brcs	.+2      	; 0x5ee6 <_Z15tastaturhandlerP7monitorh+0xa8>
    5ee4:	43 c0       	rjmp	.+134    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			{
				mon->posx++;
    5ee6:	8f 5f       	subi	r24, 0xFF	; 255
    5ee8:	96 96       	adiw	r26, 0x26	; 38
    5eea:	8c 93       	st	X, r24
    5eec:	3f c0       	rjmp	.+126    	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'd':
			if (!(mon->posy >= mon->maxentries-1))
    5eee:	95 96       	adiw	r26, 0x25	; 37
    5ef0:	2c 91       	ld	r18, X
    5ef2:	95 97       	sbiw	r26, 0x25	; 37
    5ef4:	42 2f       	mov	r20, r18
    5ef6:	50 e0       	ldi	r21, 0x00	; 0
    5ef8:	97 96       	adiw	r26, 0x27	; 39
    5efa:	8c 91       	ld	r24, X
    5efc:	97 97       	sbiw	r26, 0x27	; 39
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	01 97       	sbiw	r24, 0x01	; 1
    5f02:	48 17       	cp	r20, r24
    5f04:	59 07       	cpc	r21, r25
    5f06:	24 f4       	brge	.+8      	; 0x5f10 <_Z15tastaturhandlerP7monitorh+0xd2>
			{
				mon->posy++;
    5f08:	2f 5f       	subi	r18, 0xFF	; 255
    5f0a:	95 96       	adiw	r26, 0x25	; 37
    5f0c:	2c 93       	st	X, r18
    5f0e:	2e c0       	rjmp	.+92     	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy = 0;
    5f10:	95 96       	adiw	r26, 0x25	; 37
    5f12:	1c 92       	st	X, r1
    5f14:	2b c0       	rjmp	.+86     	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case 'u':
			if (!(mon->posy == 0))
    5f16:	95 96       	adiw	r26, 0x25	; 37
    5f18:	8c 91       	ld	r24, X
    5f1a:	95 97       	sbiw	r26, 0x25	; 37
    5f1c:	88 23       	and	r24, r24
    5f1e:	21 f0       	breq	.+8      	; 0x5f28 <_Z15tastaturhandlerP7monitorh+0xea>
			{
				mon->posy--;
    5f20:	81 50       	subi	r24, 0x01	; 1
    5f22:	95 96       	adiw	r26, 0x25	; 37
    5f24:	8c 93       	st	X, r24
    5f26:	22 c0       	rjmp	.+68     	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				mon->posy=mon->maxentries-1;
    5f28:	97 96       	adiw	r26, 0x27	; 39
    5f2a:	8c 91       	ld	r24, X
    5f2c:	97 97       	sbiw	r26, 0x27	; 39
    5f2e:	81 50       	subi	r24, 0x01	; 1
    5f30:	95 96       	adiw	r26, 0x25	; 37
    5f32:	8c 93       	st	X, r24
    5f34:	1b c0       	rjmp	.+54     	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			case '0':
			//Licht an/aus
			if (LED.ison())
    5f36:	81 e1       	ldi	r24, 0x11	; 17
    5f38:	99 e0       	ldi	r25, 0x09	; 9
    5f3a:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <_ZN6Output4isonEv>
    5f3e:	88 23       	and	r24, r24
    5f40:	29 f0       	breq	.+10     	; 0x5f4c <_Z15tastaturhandlerP7monitorh+0x10e>
			{
				LED.off();
    5f42:	81 e1       	ldi	r24, 0x11	; 17
    5f44:	99 e0       	ldi	r25, 0x09	; 9
    5f46:	0e 94 07 3e 	call	0x7c0e	; 0x7c0e <_ZN6Output3offEv>
    5f4a:	10 c0       	rjmp	.+32     	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			else{
				LED.on();
    5f4c:	81 e1       	ldi	r24, 0x11	; 17
    5f4e:	99 e0       	ldi	r25, 0x09	; 9
    5f50:	0e 94 8f 3d 	call	0x7b1e	; 0x7b1e <_ZN6Output2onEv>
    5f54:	0b c0       	rjmp	.+22     	; 0x5f6c <_Z15tastaturhandlerP7monitorh+0x12e>
			}
			break;
			default:
			//alle anderen Tasten werden an den jeweiligen Handler weiter gegeben
			mon->tastendruck(&taste);
    5f56:	ed 91       	ld	r30, X+
    5f58:	fc 91       	ld	r31, X
    5f5a:	11 97       	sbiw	r26, 0x01	; 1
    5f5c:	01 90       	ld	r0, Z+
    5f5e:	f0 81       	ld	r31, Z
    5f60:	e0 2d       	mov	r30, r0
    5f62:	be 01       	movw	r22, r28
    5f64:	6f 5f       	subi	r22, 0xFF	; 255
    5f66:	7f 4f       	sbci	r23, 0xFF	; 255
    5f68:	cd 01       	movw	r24, r26
    5f6a:	09 95       	icall
			break;
		}
	}
}
    5f6c:	0f 90       	pop	r0
    5f6e:	df 91       	pop	r29
    5f70:	cf 91       	pop	r28
    5f72:	08 95       	ret

00005f74 <_Z19maininterupthandlerP7monitor>:

void maininterupthandler(monitor *mon){
    5f74:	cf 92       	push	r12
    5f76:	df 92       	push	r13
    5f78:	ef 92       	push	r14
    5f7a:	ff 92       	push	r15
    5f7c:	0f 93       	push	r16
    5f7e:	1f 93       	push	r17
    5f80:	cf 93       	push	r28
    5f82:	df 93       	push	r29
    5f84:	cd b7       	in	r28, 0x3d	; 61
    5f86:	de b7       	in	r29, 0x3e	; 62
    5f88:	2d 97       	sbiw	r28, 0x0d	; 13
    5f8a:	0f b6       	in	r0, 0x3f	; 63
    5f8c:	f8 94       	cli
    5f8e:	de bf       	out	0x3e, r29	; 62
    5f90:	0f be       	out	0x3f, r0	; 63
    5f92:	cd bf       	out	0x3d, r28	; 61
    5f94:	8c 01       	movw	r16, r24
	if (position==1)							//Berechnung der Geschwindigkeit fuer Tacho
    5f96:	90 91 0a 09 	lds	r25, 0x090A
    5f9a:	91 30       	cpi	r25, 0x01	; 1
    5f9c:	09 f5       	brne	.+66     	; 0x5fe0 <_Z19maininterupthandlerP7monitor+0x6c>
	{
		//debounce Funktion fuer den Reedswitch
		if (reed_debounce(&PINA,PINA7))
    5f9e:	67 e0       	ldi	r22, 0x07	; 7
    5fa0:	80 e2       	ldi	r24, 0x20	; 32
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	08 dd       	rcall	.-1520   	; 0x59b6 <_Z13reed_debouncePVhh>
    5fa6:	88 23       	and	r24, r24
    5fa8:	31 f0       	breq	.+12     	; 0x5fb6 <_Z19maininterupthandlerP7monitor+0x42>
		{
			//Durchmesser ist 28 Zoll
			geschwindigkeit(28.0*2.54/100.0);
    5faa:	63 e3       	ldi	r22, 0x33	; 51
    5fac:	71 e1       	ldi	r23, 0x11	; 17
    5fae:	86 e3       	ldi	r24, 0x36	; 54
    5fb0:	9f e3       	ldi	r25, 0x3F	; 63
    5fb2:	26 dd       	rcall	.-1460   	; 0x5a00 <_Z15geschwindigkeitf>
    5fb4:	be c0       	rjmp	.+380    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
		}
		//Hier mit werden geschwindigkeiten, die kleiner als 2.6km/h betragen gefiltert
		//Somit wird die letzte Geschwindigkeit nach 3 Sekunden geloescht
		//Das ist noch nicht die beste Variante
		else if (TCNT1>23437)
    5fb6:	80 91 84 00 	lds	r24, 0x0084
    5fba:	90 91 85 00 	lds	r25, 0x0085
    5fbe:	8e 38       	cpi	r24, 0x8E	; 142
    5fc0:	9b 45       	sbci	r25, 0x5B	; 91
    5fc2:	08 f4       	brcc	.+2      	; 0x5fc6 <_Z19maininterupthandlerP7monitor+0x52>
    5fc4:	b6 c0       	rjmp	.+364    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
		{
			TCNT1=0;
    5fc6:	10 92 85 00 	sts	0x0085, r1
    5fca:	10 92 84 00 	sts	0x0084, r1
			geschw=0;
    5fce:	10 92 89 08 	sts	0x0889, r1
    5fd2:	10 92 8a 08 	sts	0x088A, r1
    5fd6:	10 92 8b 08 	sts	0x088B, r1
    5fda:	10 92 8c 08 	sts	0x088C, r1
    5fde:	a9 c0       	rjmp	.+338    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
		}
	}
	//SD Karte mounten bzw. aufnahme starten
	else if (position==3)
    5fe0:	93 30       	cpi	r25, 0x03	; 3
    5fe2:	09 f0       	breq	.+2      	; 0x5fe6 <_Z19maininterupthandlerP7monitor+0x72>
    5fe4:	a6 c0       	rjmp	.+332    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
	{
		if (mon->posy==3 && mon->posx==1)
    5fe6:	d8 01       	movw	r26, r16
    5fe8:	95 96       	adiw	r26, 0x25	; 37
    5fea:	8c 91       	ld	r24, X
    5fec:	95 97       	sbiw	r26, 0x25	; 37
    5fee:	83 30       	cpi	r24, 0x03	; 3
    5ff0:	81 f5       	brne	.+96     	; 0x6052 <_Z19maininterupthandlerP7monitor+0xde>
    5ff2:	96 96       	adiw	r26, 0x26	; 38
    5ff4:	8c 91       	ld	r24, X
    5ff6:	81 30       	cpi	r24, 0x01	; 1
    5ff8:	09 f0       	breq	.+2      	; 0x5ffc <_Z19maininterupthandlerP7monitor+0x88>
    5ffa:	9b c0       	rjmp	.+310    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
		{
			if (!(statusreg&(1<<mounttingstat)))
    5ffc:	80 91 0b 09 	lds	r24, 0x090B
    6000:	81 fd       	sbrc	r24, 1
    6002:	14 c0       	rjmp	.+40     	; 0x602c <_Z19maininterupthandlerP7monitor+0xb8>
			{
				//mounting sd Karte
				if (disk_initialize(0) == 0)
    6004:	80 e0       	ldi	r24, 0x00	; 0
    6006:	0e 94 fc 07 	call	0xff8	; 0xff8 <disk_initialize>
    600a:	81 11       	cpse	r24, r1
    600c:	1d c0       	rjmp	.+58     	; 0x6048 <_Z19maininterupthandlerP7monitor+0xd4>
				{
					if (f_mount(&FATFS_Obj,"",0) == 0)
    600e:	40 e0       	ldi	r20, 0x00	; 0
    6010:	6c e0       	ldi	r22, 0x0C	; 12
    6012:	73 e0       	ldi	r23, 0x03	; 3
    6014:	8f e4       	ldi	r24, 0x4F	; 79
    6016:	96 e0       	ldi	r25, 0x06	; 6
    6018:	0e 94 4b 1a 	call	0x3496	; 0x3496 <f_mount>
    601c:	81 11       	cpse	r24, r1
    601e:	14 c0       	rjmp	.+40     	; 0x6048 <_Z19maininterupthandlerP7monitor+0xd4>
					{
						statusreg |= (1<<mounttingstat);
    6020:	80 91 0b 09 	lds	r24, 0x090B
    6024:	82 60       	ori	r24, 0x02	; 2
    6026:	80 93 0b 09 	sts	0x090B, r24
    602a:	0e c0       	rjmp	.+28     	; 0x6048 <_Z19maininterupthandlerP7monitor+0xd4>
					}
				}
			}
			else if (!(statusreg&(1<<loggingstat)))
    602c:	82 fd       	sbrc	r24, 2
    602e:	0c c0       	rjmp	.+24     	; 0x6048 <_Z19maininterupthandlerP7monitor+0xd4>
			{
				f_mount(0,"",0);
    6030:	40 e0       	ldi	r20, 0x00	; 0
    6032:	6c e0       	ldi	r22, 0x0C	; 12
    6034:	73 e0       	ldi	r23, 0x03	; 3
    6036:	80 e0       	ldi	r24, 0x00	; 0
    6038:	90 e0       	ldi	r25, 0x00	; 0
    603a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <f_mount>
				statusreg &= ~(1<<mounttingstat);
    603e:	80 91 0b 09 	lds	r24, 0x090B
    6042:	8d 7f       	andi	r24, 0xFD	; 253
    6044:	80 93 0b 09 	sts	0x090B, r24
			}
			mon->posx--;
    6048:	f8 01       	movw	r30, r16
    604a:	86 a1       	ldd	r24, Z+38	; 0x26
    604c:	81 50       	subi	r24, 0x01	; 1
    604e:	86 a3       	std	Z+38, r24	; 0x26
    6050:	70 c0       	rjmp	.+224    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
		}
		else if (mon->posy==4 && mon->posx==1)
    6052:	84 30       	cpi	r24, 0x04	; 4
    6054:	09 f0       	breq	.+2      	; 0x6058 <_Z19maininterupthandlerP7monitor+0xe4>
    6056:	6d c0       	rjmp	.+218    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
    6058:	d8 01       	movw	r26, r16
    605a:	96 96       	adiw	r26, 0x26	; 38
    605c:	8c 91       	ld	r24, X
    605e:	81 30       	cpi	r24, 0x01	; 1
    6060:	09 f0       	breq	.+2      	; 0x6064 <_Z19maininterupthandlerP7monitor+0xf0>
    6062:	67 c0       	rjmp	.+206    	; 0x6132 <_Z19maininterupthandlerP7monitor+0x1be>
		{
			if (!(statusreg&(1<<loggingstat)) && (statusreg&(1<<mounttingstat)) )
    6064:	80 91 0b 09 	lds	r24, 0x090B
    6068:	82 fd       	sbrc	r24, 2
    606a:	4f c0       	rjmp	.+158    	; 0x610a <_Z19maininterupthandlerP7monitor+0x196>
    606c:	81 ff       	sbrs	r24, 1
    606e:	4d c0       	rjmp	.+154    	; 0x610a <_Z19maininterupthandlerP7monitor+0x196>
			{
				if (disk_status(0) == 0)
    6070:	80 e0       	ldi	r24, 0x00	; 0
    6072:	0e 94 bd 08 	call	0x117a	; 0x117a <disk_status>
    6076:	81 11       	cpse	r24, r1
    6078:	42 c0       	rjmp	.+132    	; 0x60fe <_Z19maininterupthandlerP7monitor+0x18a>
				{
					char name[13];
					sprintf(name,"%02u%02u%02u%02u.txt",rtc.Monat,rtc.Tag,rtc.Stunden,rtc.Minuten);
    607a:	ec e3       	ldi	r30, 0x3C	; 60
    607c:	fe e0       	ldi	r31, 0x0E	; 14
    607e:	81 89       	ldd	r24, Z+17	; 0x11
    6080:	1f 92       	push	r1
    6082:	8f 93       	push	r24
    6084:	80 89       	ldd	r24, Z+16	; 0x10
    6086:	1f 92       	push	r1
    6088:	8f 93       	push	r24
    608a:	84 89       	ldd	r24, Z+20	; 0x14
    608c:	1f 92       	push	r1
    608e:	8f 93       	push	r24
    6090:	86 89       	ldd	r24, Z+22	; 0x16
    6092:	1f 92       	push	r1
    6094:	8f 93       	push	r24
    6096:	86 e6       	ldi	r24, 0x66	; 102
    6098:	92 e0       	ldi	r25, 0x02	; 2
    609a:	9f 93       	push	r25
    609c:	8f 93       	push	r24
    609e:	fe 01       	movw	r30, r28
    60a0:	31 96       	adiw	r30, 0x01	; 1
    60a2:	7f 01       	movw	r14, r30
    60a4:	ff 93       	push	r31
    60a6:	ef 93       	push	r30
    60a8:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
					f_open(&logger, name, FA_OPEN_ALWAYS | FA_WRITE);
    60ac:	42 e1       	ldi	r20, 0x12	; 18
    60ae:	b7 01       	movw	r22, r14
    60b0:	8f e2       	ldi	r24, 0x2F	; 47
    60b2:	94 e0       	ldi	r25, 0x04	; 4
    60b4:	0e 94 9e 1a 	call	0x353c	; 0x353c <f_open>
					//Zeit und GPS
					f_printf(&logger,"#Zeit [s]\tlongitude [1e6]\tLatitude [1e5]\tGPSSpeed [1e2 km/h] ");
    60b8:	8b e7       	ldi	r24, 0x7B	; 123
    60ba:	92 e0       	ldi	r25, 0x02	; 2
    60bc:	9f 93       	push	r25
    60be:	8f 93       	push	r24
    60c0:	0f 2e       	mov	r0, r31
    60c2:	ff e2       	ldi	r31, 0x2F	; 47
    60c4:	ef 2e       	mov	r14, r31
    60c6:	f4 e0       	ldi	r31, 0x04	; 4
    60c8:	ff 2e       	mov	r15, r31
    60ca:	f0 2d       	mov	r31, r0
    60cc:	ff 92       	push	r15
    60ce:	ef 92       	push	r14
    60d0:	0e 94 03 21 	call	0x4206	; 0x4206 <f_printf>
					//Tacho
					f_printf(&logger,"\tTacho [1e2 km/h] ");
    60d4:	89 eb       	ldi	r24, 0xB9	; 185
    60d6:	92 e0       	ldi	r25, 0x02	; 2
    60d8:	9f 93       	push	r25
    60da:	8f 93       	push	r24
    60dc:	ff 92       	push	r15
    60de:	ef 92       	push	r14
    60e0:	0e 94 03 21 	call	0x4206	; 0x4206 <f_printf>
					//Barometer
					f_printf(&logger,"\tTemperatur [10 C] \tDruck [Pa] \tHoeheSee [10 m]\n");
    60e4:	8c ec       	ldi	r24, 0xCC	; 204
    60e6:	92 e0       	ldi	r25, 0x02	; 2
    60e8:	9f 93       	push	r25
    60ea:	8f 93       	push	r24
    60ec:	ff 92       	push	r15
    60ee:	ef 92       	push	r14
    60f0:	0e 94 03 21 	call	0x4206	; 0x4206 <f_printf>
    60f4:	0f b6       	in	r0, 0x3f	; 63
    60f6:	f8 94       	cli
    60f8:	de bf       	out	0x3e, r29	; 62
    60fa:	0f be       	out	0x3f, r0	; 63
    60fc:	cd bf       	out	0x3d, r28	; 61
				}
				
				statusreg |= (1<<loggingstat);
    60fe:	80 91 0b 09 	lds	r24, 0x090B
    6102:	84 60       	ori	r24, 0x04	; 4
    6104:	80 93 0b 09 	sts	0x090B, r24
    6108:	0d c0       	rjmp	.+26     	; 0x6124 <_Z19maininterupthandlerP7monitor+0x1b0>
			}
			else{
				f_sync(&logger);
    610a:	8f e2       	ldi	r24, 0x2F	; 47
    610c:	94 e0       	ldi	r25, 0x04	; 4
    610e:	0e 94 26 20 	call	0x404c	; 0x404c <f_sync>
				f_close(&logger);
    6112:	8f e2       	ldi	r24, 0x2F	; 47
    6114:	94 e0       	ldi	r25, 0x04	; 4
    6116:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <f_close>
				statusreg &= ~(1<<loggingstat);
    611a:	80 91 0b 09 	lds	r24, 0x090B
    611e:	8b 7f       	andi	r24, 0xFB	; 251
    6120:	80 93 0b 09 	sts	0x090B, r24
			}
			mon->posx--;
    6124:	d8 01       	movw	r26, r16
    6126:	96 96       	adiw	r26, 0x26	; 38
    6128:	8c 91       	ld	r24, X
    612a:	96 97       	sbiw	r26, 0x26	; 38
    612c:	81 50       	subi	r24, 0x01	; 1
    612e:	96 96       	adiw	r26, 0x26	; 38
    6130:	8c 93       	st	X, r24
	if (statusreg&(1<<updaterate))				//24 FPS fuer schnelle anzeigen
	{
		//anzeige &= (1<<refreshdisplay);
	}
	
	if ((rtc.interupts&(1<<sekundeninterupt)))	//Sekunden
    6132:	80 91 54 0e 	lds	r24, 0x0E54
    6136:	81 ff       	sbrs	r24, 1
    6138:	3d c1       	rjmp	.+634    	; 0x63b4 <_Z19maininterupthandlerP7monitor+0x440>
	{
		rtc.zeit();
    613a:	8c e3       	ldi	r24, 0x3C	; 60
    613c:	9e e0       	ldi	r25, 0x0E	; 14
    613e:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <_ZN3RTC4zeitEv>
		druck.bmp180_getaltitude();
    6142:	87 e1       	ldi	r24, 0x17	; 23
    6144:	99 e0       	ldi	r25, 0x09	; 9
    6146:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN6BMP18018bmp180_getaltitudeEv>
		if (position==1)
    614a:	80 91 0a 09 	lds	r24, 0x090A
    614e:	81 30       	cpi	r24, 0x01	; 1
    6150:	09 f0       	breq	.+2      	; 0x6154 <_Z19maininterupthandlerP7monitor+0x1e0>
    6152:	57 c0       	rjmp	.+174    	; 0x6202 <_Z19maininterupthandlerP7monitor+0x28e>
		{
			if (geschw>maxgeschw)
    6154:	c0 90 89 08 	lds	r12, 0x0889
    6158:	d0 90 8a 08 	lds	r13, 0x088A
    615c:	e0 90 8b 08 	lds	r14, 0x088B
    6160:	f0 90 8c 08 	lds	r15, 0x088C
    6164:	20 91 81 08 	lds	r18, 0x0881
    6168:	30 91 82 08 	lds	r19, 0x0882
    616c:	40 91 83 08 	lds	r20, 0x0883
    6170:	50 91 84 08 	lds	r21, 0x0884
    6174:	c7 01       	movw	r24, r14
    6176:	b6 01       	movw	r22, r12
    6178:	0e 94 a5 41 	call	0x834a	; 0x834a <__gesf2>
    617c:	18 16       	cp	r1, r24
    617e:	44 f4       	brge	.+16     	; 0x6190 <_Z19maininterupthandlerP7monitor+0x21c>
			{
				maxgeschw=geschw;
    6180:	c0 92 81 08 	sts	0x0881, r12
    6184:	d0 92 82 08 	sts	0x0882, r13
    6188:	e0 92 83 08 	sts	0x0883, r14
    618c:	f0 92 84 08 	sts	0x0884, r15
			}
			if (geschw >= 1.0)
    6190:	20 e0       	ldi	r18, 0x00	; 0
    6192:	30 e0       	ldi	r19, 0x00	; 0
    6194:	40 e8       	ldi	r20, 0x80	; 128
    6196:	5f e3       	ldi	r21, 0x3F	; 63
    6198:	c7 01       	movw	r24, r14
    619a:	b6 01       	movw	r22, r12
    619c:	0e 94 a5 41 	call	0x834a	; 0x834a <__gesf2>
    61a0:	88 23       	and	r24, r24
    61a2:	9c f0       	brlt	.+38     	; 0x61ca <_Z19maininterupthandlerP7monitor+0x256>
			{
				Fahrtzeit++;
    61a4:	80 91 7d 08 	lds	r24, 0x087D
    61a8:	90 91 7e 08 	lds	r25, 0x087E
    61ac:	a0 91 7f 08 	lds	r26, 0x087F
    61b0:	b0 91 80 08 	lds	r27, 0x0880
    61b4:	01 96       	adiw	r24, 0x01	; 1
    61b6:	a1 1d       	adc	r26, r1
    61b8:	b1 1d       	adc	r27, r1
    61ba:	80 93 7d 08 	sts	0x087D, r24
    61be:	90 93 7e 08 	sts	0x087E, r25
    61c2:	a0 93 7f 08 	sts	0x087F, r26
    61c6:	b0 93 80 08 	sts	0x0880, r27
			}
			strecke+=geschw/3.6;
    61ca:	26 e6       	ldi	r18, 0x66	; 102
    61cc:	36 e6       	ldi	r19, 0x66	; 102
    61ce:	46 e6       	ldi	r20, 0x66	; 102
    61d0:	50 e4       	ldi	r21, 0x40	; 64
    61d2:	c7 01       	movw	r24, r14
    61d4:	b6 01       	movw	r22, r12
    61d6:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    61da:	9b 01       	movw	r18, r22
    61dc:	ac 01       	movw	r20, r24
    61de:	60 91 85 08 	lds	r22, 0x0885
    61e2:	70 91 86 08 	lds	r23, 0x0886
    61e6:	80 91 87 08 	lds	r24, 0x0887
    61ea:	90 91 88 08 	lds	r25, 0x0888
    61ee:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    61f2:	60 93 85 08 	sts	0x0885, r22
    61f6:	70 93 86 08 	sts	0x0886, r23
    61fa:	80 93 87 08 	sts	0x0887, r24
    61fe:	90 93 88 08 	sts	0x0888, r25
    6202:	80 91 0b 09 	lds	r24, 0x090B
    6206:	86 70       	andi	r24, 0x06	; 6
		}
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    6208:	86 30       	cpi	r24, 0x06	; 6
    620a:	09 f0       	breq	.+2      	; 0x620e <_Z19maininterupthandlerP7monitor+0x29a>
    620c:	c9 c0       	rjmp	.+402    	; 0x63a0 <_Z19maininterupthandlerP7monitor+0x42c>
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
    620e:	0f 2e       	mov	r0, r31
    6210:	fc e3       	ldi	r31, 0x3C	; 60
    6212:	cf 2e       	mov	r12, r31
    6214:	fe e0       	ldi	r31, 0x0E	; 14
    6216:	df 2e       	mov	r13, r31
    6218:	f0 2d       	mov	r31, r0
    621a:	f6 01       	movw	r30, r12
    621c:	40 89       	ldd	r20, Z+16	; 0x10
    621e:	20 e1       	ldi	r18, 0x10	; 16
    6220:	3e e0       	ldi	r19, 0x0E	; 14
    6222:	42 9f       	mul	r20, r18
    6224:	c0 01       	movw	r24, r0
    6226:	43 9f       	mul	r20, r19
    6228:	90 0d       	add	r25, r0
    622a:	11 24       	eor	r1, r1
			Sekundenges += rtc.Minuten*60;
    622c:	21 89       	ldd	r18, Z+17	; 0x11
    622e:	7c 01       	movw	r14, r24
    6230:	fc e3       	ldi	r31, 0x3C	; 60
    6232:	2f 9f       	mul	r18, r31
    6234:	e0 0c       	add	r14, r0
    6236:	f1 1c       	adc	r15, r1
    6238:	11 24       	eor	r1, r1
			Sekundenges += rtc.Sekunden;
			//GPS Daten und Zeit
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100));
    623a:	20 e0       	ldi	r18, 0x00	; 0
    623c:	30 e0       	ldi	r19, 0x00	; 0
    623e:	48 ec       	ldi	r20, 0xC8	; 200
    6240:	52 e4       	ldi	r21, 0x42	; 66
    6242:	60 91 93 08 	lds	r22, 0x0893
    6246:	70 91 94 08 	lds	r23, 0x0894
    624a:	80 91 95 08 	lds	r24, 0x0895
    624e:	90 91 96 08 	lds	r25, 0x0896
    6252:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    6256:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__fixsfsi>
    625a:	9f 93       	push	r25
    625c:	8f 93       	push	r24
    625e:	7f 93       	push	r23
    6260:	6f 93       	push	r22
    6262:	20 e0       	ldi	r18, 0x00	; 0
    6264:	30 e5       	ldi	r19, 0x50	; 80
    6266:	43 ec       	ldi	r20, 0xC3	; 195
    6268:	57 e4       	ldi	r21, 0x47	; 71
    626a:	60 91 bb 08 	lds	r22, 0x08BB
    626e:	70 91 bc 08 	lds	r23, 0x08BC
    6272:	80 91 bd 08 	lds	r24, 0x08BD
    6276:	90 91 be 08 	lds	r25, 0x08BE
    627a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    627e:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__fixsfsi>
    6282:	9f 93       	push	r25
    6284:	8f 93       	push	r24
    6286:	7f 93       	push	r23
    6288:	6f 93       	push	r22
    628a:	20 e0       	ldi	r18, 0x00	; 0
    628c:	34 e2       	ldi	r19, 0x24	; 36
    628e:	44 e7       	ldi	r20, 0x74	; 116
    6290:	59 e4       	ldi	r21, 0x49	; 73
    6292:	60 91 a7 08 	lds	r22, 0x08A7
    6296:	70 91 a8 08 	lds	r23, 0x08A8
    629a:	80 91 a9 08 	lds	r24, 0x08A9
    629e:	90 91 aa 08 	lds	r25, 0x08AA
    62a2:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    62a6:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__fixsfsi>
    62aa:	9f 93       	push	r25
    62ac:	8f 93       	push	r24
    62ae:	7f 93       	push	r23
    62b0:	6f 93       	push	r22
		
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
		{
			uint16_t Sekundenges = rtc.Stunden*3600;
			Sekundenges += rtc.Minuten*60;
			Sekundenges += rtc.Sekunden;
    62b2:	d6 01       	movw	r26, r12
    62b4:	52 96       	adiw	r26, 0x12	; 18
    62b6:	8c 91       	ld	r24, X
    62b8:	f7 01       	movw	r30, r14
    62ba:	e8 0f       	add	r30, r24
    62bc:	f1 1d       	adc	r31, r1
    62be:	cf 01       	movw	r24, r30
			//GPS Daten und Zeit
			f_printf(&logger,"%u\t%ld\t%ld\t%ld\t",(uint16_t)Sekundenges,(int32_t)(lon*1000000),(int32_t)(lat*100000),(int32_t)(gpsspeed*100));
    62c0:	9f 93       	push	r25
    62c2:	ef 93       	push	r30
    62c4:	8d ef       	ldi	r24, 0xFD	; 253
    62c6:	92 e0       	ldi	r25, 0x02	; 2
    62c8:	9f 93       	push	r25
    62ca:	8f 93       	push	r24
    62cc:	0f 2e       	mov	r0, r31
    62ce:	ff e2       	ldi	r31, 0x2F	; 47
    62d0:	ef 2e       	mov	r14, r31
    62d2:	f4 e0       	ldi	r31, 0x04	; 4
    62d4:	ff 2e       	mov	r15, r31
    62d6:	f0 2d       	mov	r31, r0
    62d8:	ff 92       	push	r15
    62da:	ef 92       	push	r14
    62dc:	0e 94 03 21 	call	0x4206	; 0x4206 <f_printf>
			//Tacho
			f_printf(&logger,"%ld\t",(int32_t)(geschw*100));
    62e0:	20 e0       	ldi	r18, 0x00	; 0
    62e2:	30 e0       	ldi	r19, 0x00	; 0
    62e4:	48 ec       	ldi	r20, 0xC8	; 200
    62e6:	52 e4       	ldi	r21, 0x42	; 66
    62e8:	60 91 89 08 	lds	r22, 0x0889
    62ec:	70 91 8a 08 	lds	r23, 0x088A
    62f0:	80 91 8b 08 	lds	r24, 0x088B
    62f4:	90 91 8c 08 	lds	r25, 0x088C
    62f8:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    62fc:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__fixsfsi>
    6300:	9f 93       	push	r25
    6302:	8f 93       	push	r24
    6304:	7f 93       	push	r23
    6306:	6f 93       	push	r22
    6308:	88 e0       	ldi	r24, 0x08	; 8
    630a:	93 e0       	ldi	r25, 0x03	; 3
    630c:	9f 93       	push	r25
    630e:	8f 93       	push	r24
    6310:	ff 92       	push	r15
    6312:	ef 92       	push	r14
    6314:	0e 94 03 21 	call	0x4206	; 0x4206 <f_printf>
			//Barometer
			f_printf(&logger,"%d\t%u\t%d\n",(int16_t)(druck.temperature*10),(uint16_t)(druck.pressure*100),(int16_t)(druck.altitude*10));
    6318:	0f 2e       	mov	r0, r31
    631a:	f7 e1       	ldi	r31, 0x17	; 23
    631c:	cf 2e       	mov	r12, r31
    631e:	f9 e0       	ldi	r31, 0x09	; 9
    6320:	df 2e       	mov	r13, r31
    6322:	f0 2d       	mov	r31, r0
    6324:	20 e0       	ldi	r18, 0x00	; 0
    6326:	30 e0       	ldi	r19, 0x00	; 0
    6328:	40 e2       	ldi	r20, 0x20	; 32
    632a:	51 e4       	ldi	r21, 0x41	; 65
    632c:	d6 01       	movw	r26, r12
    632e:	1c 96       	adiw	r26, 0x0c	; 12
    6330:	6d 91       	ld	r22, X+
    6332:	7d 91       	ld	r23, X+
    6334:	8d 91       	ld	r24, X+
    6336:	9c 91       	ld	r25, X
    6338:	1f 97       	sbiw	r26, 0x0f	; 15
    633a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    633e:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__fixsfsi>
    6342:	7f 93       	push	r23
    6344:	6f 93       	push	r22
    6346:	20 e0       	ldi	r18, 0x00	; 0
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	48 ec       	ldi	r20, 0xC8	; 200
    634c:	52 e4       	ldi	r21, 0x42	; 66
    634e:	f6 01       	movw	r30, r12
    6350:	60 81       	ld	r22, Z
    6352:	71 81       	ldd	r23, Z+1	; 0x01
    6354:	82 81       	ldd	r24, Z+2	; 0x02
    6356:	93 81       	ldd	r25, Z+3	; 0x03
    6358:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    635c:	0e 94 69 40 	call	0x80d2	; 0x80d2 <__fixunssfsi>
    6360:	7f 93       	push	r23
    6362:	6f 93       	push	r22
    6364:	20 e0       	ldi	r18, 0x00	; 0
    6366:	30 e0       	ldi	r19, 0x00	; 0
    6368:	40 e2       	ldi	r20, 0x20	; 32
    636a:	51 e4       	ldi	r21, 0x41	; 65
    636c:	d6 01       	movw	r26, r12
    636e:	18 96       	adiw	r26, 0x08	; 8
    6370:	6d 91       	ld	r22, X+
    6372:	7d 91       	ld	r23, X+
    6374:	8d 91       	ld	r24, X+
    6376:	9c 91       	ld	r25, X
    6378:	1b 97       	sbiw	r26, 0x0b	; 11
    637a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    637e:	0e 94 64 40 	call	0x80c8	; 0x80c8 <__fixsfsi>
    6382:	7f 93       	push	r23
    6384:	6f 93       	push	r22
    6386:	8d e0       	ldi	r24, 0x0D	; 13
    6388:	93 e0       	ldi	r25, 0x03	; 3
    638a:	9f 93       	push	r25
    638c:	8f 93       	push	r24
    638e:	ff 92       	push	r15
    6390:	ef 92       	push	r14
    6392:	0e 94 03 21 	call	0x4206	; 0x4206 <f_printf>
    6396:	0f b6       	in	r0, 0x3f	; 63
    6398:	f8 94       	cli
    639a:	de bf       	out	0x3e, r29	; 62
    639c:	0f be       	out	0x3f, r0	; 63
    639e:	cd bf       	out	0x3d, r28	; 61
		}
		
		anzeige |= (1<<refreshdisplay);
    63a0:	80 91 0c 09 	lds	r24, 0x090C
    63a4:	81 60       	ori	r24, 0x01	; 1
    63a6:	80 93 0c 09 	sts	0x090C, r24
		rtc.interupts &= ~(1<<sekundeninterupt);
    63aa:	ec e3       	ldi	r30, 0x3C	; 60
    63ac:	fe e0       	ldi	r31, 0x0E	; 14
    63ae:	80 8d       	ldd	r24, Z+24	; 0x18
    63b0:	8d 7f       	andi	r24, 0xFD	; 253
    63b2:	80 8f       	std	Z+24, r24	; 0x18
	}
	if ((rtc.interupts&(1<<minuteninterupt)))		//Minuten
    63b4:	80 91 54 0e 	lds	r24, 0x0E54
    63b8:	82 ff       	sbrs	r24, 2
    63ba:	13 c0       	rjmp	.+38     	; 0x63e2 <_Z19maininterupthandlerP7monitor+0x46e>
    63bc:	80 91 0b 09 	lds	r24, 0x090B
    63c0:	86 70       	andi	r24, 0x06	; 6
	{
		if ((statusreg&(1<<mounttingstat)) && (statusreg&(1<<loggingstat)))
    63c2:	86 30       	cpi	r24, 0x06	; 6
    63c4:	21 f4       	brne	.+8      	; 0x63ce <_Z19maininterupthandlerP7monitor+0x45a>
		{
			f_sync(&logger);
    63c6:	8f e2       	ldi	r24, 0x2F	; 47
    63c8:	94 e0       	ldi	r25, 0x04	; 4
    63ca:	0e 94 26 20 	call	0x404c	; 0x404c <f_sync>
		}
		anzeige |= (1<<refreshdisplay);
    63ce:	80 91 0c 09 	lds	r24, 0x090C
    63d2:	81 60       	ori	r24, 0x01	; 1
    63d4:	80 93 0c 09 	sts	0x090C, r24
		rtc.interupts &= ~(1<<minuteninterupt);
    63d8:	ec e3       	ldi	r30, 0x3C	; 60
    63da:	fe e0       	ldi	r31, 0x0E	; 14
    63dc:	80 8d       	ldd	r24, Z+24	; 0x18
    63de:	8b 7f       	andi	r24, 0xFB	; 251
    63e0:	80 8f       	std	Z+24, r24	; 0x18
	}
	
	if ((anzeige&(1<<refreshdisplay)))			//Anzeige aktualieseren
    63e2:	80 91 0c 09 	lds	r24, 0x090C
    63e6:	80 ff       	sbrs	r24, 0
    63e8:	0d c0       	rjmp	.+26     	; 0x6404 <_Z19maininterupthandlerP7monitor+0x490>
	{
		//Hier aktuelle seite neu ausgeben
		mon->draw();
    63ea:	d8 01       	movw	r26, r16
    63ec:	ed 91       	ld	r30, X+
    63ee:	fc 91       	ld	r31, X
    63f0:	02 80       	ldd	r0, Z+2	; 0x02
    63f2:	f3 81       	ldd	r31, Z+3	; 0x03
    63f4:	e0 2d       	mov	r30, r0
    63f6:	c8 01       	movw	r24, r16
    63f8:	09 95       	icall
		anzeige &= ~(1<<refreshdisplay);
    63fa:	80 91 0c 09 	lds	r24, 0x090C
    63fe:	8e 7f       	andi	r24, 0xFE	; 254
    6400:	80 93 0c 09 	sts	0x090C, r24
		{
			anzeige |= (1<<blinkflag) | (1<<refreshdisplay);
			rtc.interupts &= ~(1<<Weckerein);
		}
	}*/
}
    6404:	2d 96       	adiw	r28, 0x0d	; 13
    6406:	0f b6       	in	r0, 0x3f	; 63
    6408:	f8 94       	cli
    640a:	de bf       	out	0x3e, r29	; 62
    640c:	0f be       	out	0x3f, r0	; 63
    640e:	cd bf       	out	0x3d, r28	; 61
    6410:	df 91       	pop	r29
    6412:	cf 91       	pop	r28
    6414:	1f 91       	pop	r17
    6416:	0f 91       	pop	r16
    6418:	ff 90       	pop	r15
    641a:	ef 90       	pop	r14
    641c:	df 90       	pop	r13
    641e:	cf 90       	pop	r12
    6420:	08 95       	ret

00006422 <_Z12gpsmovingavvdd>:

#define gpsmovavvnumber	4.0
void gpsmovingavv(double latneu, double lonneu){
    6422:	4f 92       	push	r4
    6424:	5f 92       	push	r5
    6426:	6f 92       	push	r6
    6428:	7f 92       	push	r7
    642a:	af 92       	push	r10
    642c:	bf 92       	push	r11
    642e:	cf 92       	push	r12
    6430:	df 92       	push	r13
    6432:	ef 92       	push	r14
    6434:	ff 92       	push	r15
    6436:	0f 93       	push	r16
    6438:	1f 93       	push	r17
    643a:	cf 93       	push	r28
    643c:	df 93       	push	r29
    643e:	2b 01       	movw	r4, r22
    6440:	3c 01       	movw	r6, r24
    6442:	69 01       	movw	r12, r18
    6444:	7a 01       	movw	r14, r20
    6446:	eb eb       	ldi	r30, 0xBB	; 187
    6448:	f8 e0       	ldi	r31, 0x08	; 8
    644a:	a7 ea       	ldi	r26, 0xA7	; 167
    644c:	b8 e0       	ldi	r27, 0x08	; 8
    644e:	0b ea       	ldi	r16, 0xAB	; 171
    6450:	18 e0       	ldi	r17, 0x08	; 8
	for (uint8_t i = gpsmovavvnumber; i >= 1; i--)
	{
		latavv[i]	= latavv[i-1];
    6452:	72 91       	ld	r23, -Z
    6454:	62 91       	ld	r22, -Z
    6456:	52 91       	ld	r21, -Z
    6458:	42 91       	ld	r20, -Z
    645a:	44 83       	std	Z+4, r20	; 0x04
    645c:	55 83       	std	Z+5, r21	; 0x05
    645e:	66 83       	std	Z+6, r22	; 0x06
    6460:	77 83       	std	Z+7, r23	; 0x07
		lonavv[i]	= lonavv[i-1];
    6462:	7e 91       	ld	r23, -X
    6464:	6e 91       	ld	r22, -X
    6466:	5e 91       	ld	r21, -X
    6468:	4e 91       	ld	r20, -X
    646a:	14 96       	adiw	r26, 0x04	; 4
    646c:	4d 93       	st	X+, r20
    646e:	5d 93       	st	X+, r21
    6470:	6d 93       	st	X+, r22
    6472:	7c 93       	st	X, r23
    6474:	17 97       	sbiw	r26, 0x07	; 7
	}*/
}

#define gpsmovavvnumber	4.0
void gpsmovingavv(double latneu, double lonneu){
	for (uint8_t i = gpsmovavvnumber; i >= 1; i--)
    6476:	e0 17       	cp	r30, r16
    6478:	f1 07       	cpc	r31, r17
    647a:	59 f7       	brne	.-42     	; 0x6452 <_Z12gpsmovingavvdd+0x30>
	{
		latavv[i]	= latavv[i-1];
		lonavv[i]	= lonavv[i-1];
	}
	latavv[0]	= latneu;
    647c:	40 92 ab 08 	sts	0x08AB, r4
    6480:	50 92 ac 08 	sts	0x08AC, r5
    6484:	60 92 ad 08 	sts	0x08AD, r6
    6488:	70 92 ae 08 	sts	0x08AE, r7
	lonavv[0]	= lonneu;
    648c:	c0 92 97 08 	sts	0x0897, r12
    6490:	d0 92 98 08 	sts	0x0898, r13
    6494:	e0 92 99 08 	sts	0x0899, r14
    6498:	f0 92 9a 08 	sts	0x089A, r15
    649c:	0f 2e       	mov	r0, r31
    649e:	f7 e9       	ldi	r31, 0x97	; 151
    64a0:	af 2e       	mov	r10, r31
    64a2:	f8 e0       	ldi	r31, 0x08	; 8
    64a4:	bf 2e       	mov	r11, r31
    64a6:	f0 2d       	mov	r31, r0
    64a8:	c1 e0       	ldi	r28, 0x01	; 1
    64aa:	d0 e0       	ldi	r29, 0x00	; 0
    64ac:	c1 2c       	mov	r12, r1
    64ae:	d1 2c       	mov	r13, r1
    64b0:	76 01       	movw	r14, r12
    64b2:	26 01       	movw	r4, r12
    64b4:	37 01       	movw	r6, r14
	
	double summelat	= 0;
	double summelon	= 0;
	for (uint8_t i = 0; i < gpsmovavvnumber; i++)
	{
		summelat	+= latavv[i];
    64b6:	f8 01       	movw	r30, r16
    64b8:	21 91       	ld	r18, Z+
    64ba:	31 91       	ld	r19, Z+
    64bc:	41 91       	ld	r20, Z+
    64be:	51 91       	ld	r21, Z+
    64c0:	8f 01       	movw	r16, r30
    64c2:	c3 01       	movw	r24, r6
    64c4:	b2 01       	movw	r22, r4
    64c6:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    64ca:	2b 01       	movw	r4, r22
    64cc:	3c 01       	movw	r6, r24
		summelon	+= lonavv[i];
    64ce:	f5 01       	movw	r30, r10
    64d0:	21 91       	ld	r18, Z+
    64d2:	31 91       	ld	r19, Z+
    64d4:	41 91       	ld	r20, Z+
    64d6:	51 91       	ld	r21, Z+
    64d8:	5f 01       	movw	r10, r30
    64da:	c7 01       	movw	r24, r14
    64dc:	b6 01       	movw	r22, r12
    64de:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    64e2:	6b 01       	movw	r12, r22
    64e4:	7c 01       	movw	r14, r24
    64e6:	21 96       	adiw	r28, 0x01	; 1
	latavv[0]	= latneu;
	lonavv[0]	= lonneu;
	
	double summelat	= 0;
	double summelon	= 0;
	for (uint8_t i = 0; i < gpsmovavvnumber; i++)
    64e8:	c5 30       	cpi	r28, 0x05	; 5
    64ea:	d1 05       	cpc	r29, r1
    64ec:	21 f7       	brne	.-56     	; 0x64b6 <_Z12gpsmovingavvdd+0x94>
	{
		summelat	+= latavv[i];
		summelon	+= lonavv[i];
	}
	lat	= summelat/gpsmovavvnumber;
    64ee:	20 e0       	ldi	r18, 0x00	; 0
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	40 e8       	ldi	r20, 0x80	; 128
    64f4:	5e e3       	ldi	r21, 0x3E	; 62
    64f6:	c3 01       	movw	r24, r6
    64f8:	b2 01       	movw	r22, r4
    64fa:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    64fe:	60 93 bb 08 	sts	0x08BB, r22
    6502:	70 93 bc 08 	sts	0x08BC, r23
    6506:	80 93 bd 08 	sts	0x08BD, r24
    650a:	90 93 be 08 	sts	0x08BE, r25
	lon	= summelon/gpsmovavvnumber;
    650e:	20 e0       	ldi	r18, 0x00	; 0
    6510:	30 e0       	ldi	r19, 0x00	; 0
    6512:	40 e8       	ldi	r20, 0x80	; 128
    6514:	5e e3       	ldi	r21, 0x3E	; 62
    6516:	c7 01       	movw	r24, r14
    6518:	b6 01       	movw	r22, r12
    651a:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    651e:	60 93 a7 08 	sts	0x08A7, r22
    6522:	70 93 a8 08 	sts	0x08A8, r23
    6526:	80 93 a9 08 	sts	0x08A9, r24
    652a:	90 93 aa 08 	sts	0x08AA, r25
}
    652e:	df 91       	pop	r29
    6530:	cf 91       	pop	r28
    6532:	1f 91       	pop	r17
    6534:	0f 91       	pop	r16
    6536:	ff 90       	pop	r15
    6538:	ef 90       	pop	r14
    653a:	df 90       	pop	r13
    653c:	cf 90       	pop	r12
    653e:	bf 90       	pop	r11
    6540:	af 90       	pop	r10
    6542:	7f 90       	pop	r7
    6544:	6f 90       	pop	r6
    6546:	5f 90       	pop	r5
    6548:	4f 90       	pop	r4
    654a:	08 95       	ret

0000654c <_Z10gpshandlerv>:

void gpshandler(){
    654c:	4f 92       	push	r4
    654e:	5f 92       	push	r5
    6550:	6f 92       	push	r6
    6552:	7f 92       	push	r7
    6554:	8f 92       	push	r8
    6556:	9f 92       	push	r9
    6558:	af 92       	push	r10
    655a:	bf 92       	push	r11
    655c:	cf 92       	push	r12
    655e:	df 92       	push	r13
    6560:	ef 92       	push	r14
    6562:	ff 92       	push	r15
    6564:	0f 93       	push	r16
    6566:	1f 93       	push	r17
    6568:	cf 93       	push	r28
    656a:	df 93       	push	r29
    656c:	00 d0       	rcall	.+0      	; 0x656e <_Z10gpshandlerv+0x22>
    656e:	00 d0       	rcall	.+0      	; 0x6570 <_Z10gpshandlerv+0x24>
    6570:	cd b7       	in	r28, 0x3d	; 61
    6572:	de b7       	in	r29, 0x3e	; 62
	if ((gpsstatus&(1<<complete)) && (gpsstatus&(1<<fix)))
    6574:	90 91 08 09 	lds	r25, 0x0908
    6578:	92 ff       	sbrs	r25, 2
    657a:	c6 c2       	rjmp	.+1420   	; 0x6b08 <_Z10gpshandlerv+0x5bc>
    657c:	99 23       	and	r25, r25
    657e:	0c f0       	brlt	.+2      	; 0x6582 <_Z10gpshandlerv+0x36>
    6580:	51 c3       	rjmp	.+1698   	; 0x6c24 <_Z10gpshandlerv+0x6d8>
		double la	= 0;
		double lo	= 0;
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    6582:	00 ec       	ldi	r16, 0xC0	; 192
    6584:	18 e0       	ldi	r17, 0x08	; 8
    6586:	f8 01       	movw	r30, r16
    6588:	80 85       	ldd	r24, Z+8	; 0x08
    658a:	21 ed       	ldi	r18, 0xD1	; 209
    658c:	28 0f       	add	r18, r24
	{
		double la	= 0;
		double lo	= 0;
		//brechnung von Latitutde, Longitude, Zeit und Datum
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    658e:	87 81       	ldd	r24, Z+7	; 0x07
    6590:	88 0f       	add	r24, r24
    6592:	80 56       	subi	r24, 0x60	; 96
    6594:	98 2f       	mov	r25, r24
    6596:	99 0f       	add	r25, r25
    6598:	99 0f       	add	r25, r25
    659a:	89 0f       	add	r24, r25
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    659c:	82 0f       	add	r24, r18
    659e:	80 93 92 08 	sts	0x0892, r24
    65a2:	82 85       	ldd	r24, Z+10	; 0x0a
    65a4:	20 ed       	ldi	r18, 0xD0	; 208
    65a6:	28 0f       	add	r18, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    65a8:	81 85       	ldd	r24, Z+9	; 0x09
    65aa:	88 0f       	add	r24, r24
    65ac:	80 56       	subi	r24, 0x60	; 96
    65ae:	98 2f       	mov	r25, r24
    65b0:	99 0f       	add	r25, r25
    65b2:	99 0f       	add	r25, r25
    65b4:	89 0f       	add	r24, r25
		gpsminute +=	(gpsdata[10] - '0');
    65b6:	82 0f       	add	r24, r18
    65b8:	80 93 91 08 	sts	0x0891, r24
    65bc:	84 85       	ldd	r24, Z+12	; 0x0c
    65be:	20 ed       	ldi	r18, 0xD0	; 208
    65c0:	28 0f       	add	r18, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    65c2:	83 85       	ldd	r24, Z+11	; 0x0b
    65c4:	88 0f       	add	r24, r24
    65c6:	80 56       	subi	r24, 0x60	; 96
    65c8:	98 2f       	mov	r25, r24
    65ca:	99 0f       	add	r25, r25
    65cc:	99 0f       	add	r25, r25
    65ce:	89 0f       	add	r24, r25
		gpssekunde +=	(gpsdata[12] - '0');
    65d0:	82 0f       	add	r24, r18
    65d2:	80 93 90 08 	sts	0x0890, r24
		
		//Latitude
		la =	(gpsdata[20] - '0')*10;
    65d6:	84 89       	ldd	r24, Z+20	; 0x14
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	c0 97       	sbiw	r24, 0x30	; 48
    65dc:	bc 01       	movw	r22, r24
    65de:	66 0f       	add	r22, r22
    65e0:	77 1f       	adc	r23, r23
    65e2:	88 0f       	add	r24, r24
    65e4:	99 1f       	adc	r25, r25
    65e6:	88 0f       	add	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	88 0f       	add	r24, r24
    65ec:	99 1f       	adc	r25, r25
    65ee:	68 0f       	add	r22, r24
    65f0:	79 1f       	adc	r23, r25
    65f2:	07 2e       	mov	r0, r23
    65f4:	00 0c       	add	r0, r0
    65f6:	88 0b       	sbc	r24, r24
    65f8:	99 0b       	sbc	r25, r25
    65fa:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    65fe:	6b 01       	movw	r12, r22
    6600:	7c 01       	movw	r14, r24
		la +=	(gpsdata[21] - '0');
    6602:	f8 01       	movw	r30, r16
    6604:	85 89       	ldd	r24, Z+21	; 0x15
    6606:	90 e0       	ldi	r25, 0x00	; 0
    6608:	c0 97       	sbiw	r24, 0x30	; 48
    660a:	bc 01       	movw	r22, r24
    660c:	99 0f       	add	r25, r25
    660e:	88 0b       	sbc	r24, r24
    6610:	99 0b       	sbc	r25, r25
    6612:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    6616:	a7 01       	movw	r20, r14
    6618:	96 01       	movw	r18, r12
    661a:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    661e:	6b 01       	movw	r12, r22
    6620:	7c 01       	movw	r14, r24
		float lamin =	(gpsdata[22] - '0')*10;
    6622:	f8 01       	movw	r30, r16
    6624:	46 89       	ldd	r20, Z+22	; 0x16
    6626:	50 e0       	ldi	r21, 0x00	; 0
    6628:	40 53       	subi	r20, 0x30	; 48
    662a:	51 09       	sbc	r21, r1
    662c:	ca 01       	movw	r24, r20
    662e:	88 0f       	add	r24, r24
    6630:	99 1f       	adc	r25, r25
    6632:	44 0f       	add	r20, r20
    6634:	55 1f       	adc	r21, r21
    6636:	44 0f       	add	r20, r20
    6638:	55 1f       	adc	r21, r21
    663a:	44 0f       	add	r20, r20
    663c:	55 1f       	adc	r21, r21
    663e:	84 0f       	add	r24, r20
    6640:	95 1f       	adc	r25, r21
    6642:	bc 01       	movw	r22, r24
    6644:	99 0f       	add	r25, r25
    6646:	88 0b       	sbc	r24, r24
    6648:	99 0b       	sbc	r25, r25
    664a:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    664e:	4b 01       	movw	r8, r22
    6650:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[23] - '0');
    6652:	f8 01       	movw	r30, r16
    6654:	67 89       	ldd	r22, Z+23	; 0x17
    6656:	70 e0       	ldi	r23, 0x00	; 0
    6658:	60 53       	subi	r22, 0x30	; 48
    665a:	71 09       	sbc	r23, r1
    665c:	07 2e       	mov	r0, r23
    665e:	00 0c       	add	r0, r0
    6660:	88 0b       	sbc	r24, r24
    6662:	99 0b       	sbc	r25, r25
    6664:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    6668:	a5 01       	movw	r20, r10
    666a:	94 01       	movw	r18, r8
    666c:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    6670:	4b 01       	movw	r8, r22
    6672:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[25] - '0')/10.0;
    6674:	f8 01       	movw	r30, r16
    6676:	81 8d       	ldd	r24, Z+25	; 0x19
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	c0 97       	sbiw	r24, 0x30	; 48
    667c:	bc 01       	movw	r22, r24
    667e:	99 0f       	add	r25, r25
    6680:	88 0b       	sbc	r24, r24
    6682:	99 0b       	sbc	r25, r25
    6684:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    6688:	20 e0       	ldi	r18, 0x00	; 0
    668a:	30 e0       	ldi	r19, 0x00	; 0
    668c:	40 e2       	ldi	r20, 0x20	; 32
    668e:	51 e4       	ldi	r21, 0x41	; 65
    6690:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    6694:	a5 01       	movw	r20, r10
    6696:	94 01       	movw	r18, r8
    6698:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    669c:	4b 01       	movw	r8, r22
    669e:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[26] - '0')/100.0;
    66a0:	f8 01       	movw	r30, r16
    66a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    66a4:	90 e0       	ldi	r25, 0x00	; 0
    66a6:	c0 97       	sbiw	r24, 0x30	; 48
    66a8:	bc 01       	movw	r22, r24
    66aa:	99 0f       	add	r25, r25
    66ac:	88 0b       	sbc	r24, r24
    66ae:	99 0b       	sbc	r25, r25
    66b0:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    66b4:	20 e0       	ldi	r18, 0x00	; 0
    66b6:	30 e0       	ldi	r19, 0x00	; 0
    66b8:	48 ec       	ldi	r20, 0xC8	; 200
    66ba:	52 e4       	ldi	r21, 0x42	; 66
    66bc:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    66c0:	a5 01       	movw	r20, r10
    66c2:	94 01       	movw	r18, r8
    66c4:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    66c8:	4b 01       	movw	r8, r22
    66ca:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[27] - '0')/1000.0;
    66cc:	f8 01       	movw	r30, r16
    66ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	c0 97       	sbiw	r24, 0x30	; 48
    66d4:	bc 01       	movw	r22, r24
    66d6:	99 0f       	add	r25, r25
    66d8:	88 0b       	sbc	r24, r24
    66da:	99 0b       	sbc	r25, r25
    66dc:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    66e0:	20 e0       	ldi	r18, 0x00	; 0
    66e2:	30 e0       	ldi	r19, 0x00	; 0
    66e4:	4a e7       	ldi	r20, 0x7A	; 122
    66e6:	54 e4       	ldi	r21, 0x44	; 68
    66e8:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    66ec:	a5 01       	movw	r20, r10
    66ee:	94 01       	movw	r18, r8
    66f0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    66f4:	4b 01       	movw	r8, r22
    66f6:	5c 01       	movw	r10, r24
		lamin +=		(gpsdata[28] - '0')/10000.0;
    66f8:	f8 01       	movw	r30, r16
    66fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	c0 97       	sbiw	r24, 0x30	; 48
    6700:	bc 01       	movw	r22, r24
    6702:	99 0f       	add	r25, r25
    6704:	88 0b       	sbc	r24, r24
    6706:	99 0b       	sbc	r25, r25
    6708:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    670c:	20 e0       	ldi	r18, 0x00	; 0
    670e:	30 e4       	ldi	r19, 0x40	; 64
    6710:	4c e1       	ldi	r20, 0x1C	; 28
    6712:	56 e4       	ldi	r21, 0x46	; 70
    6714:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    6718:	a5 01       	movw	r20, r10
    671a:	94 01       	movw	r18, r8
    671c:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
		la +=	lamin/60.0;
    6720:	20 e0       	ldi	r18, 0x00	; 0
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	40 e7       	ldi	r20, 0x70	; 112
    6726:	52 e4       	ldi	r21, 0x42	; 66
    6728:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    672c:	a7 01       	movw	r20, r14
    672e:	96 01       	movw	r18, r12
    6730:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    6734:	4b 01       	movw	r8, r22
    6736:	5c 01       	movw	r10, r24
		if (gpsdata[30] != 'N')
    6738:	f8 01       	movw	r30, r16
    673a:	86 8d       	ldd	r24, Z+30	; 0x1e
    673c:	8e 34       	cpi	r24, 0x4E	; 78
    673e:	21 f0       	breq	.+8      	; 0x6748 <_Z10gpshandlerv+0x1fc>
		{
			la *= -1;
    6740:	b7 fa       	bst	r11, 7
    6742:	b0 94       	com	r11
    6744:	b7 f8       	bld	r11, 7
    6746:	b0 94       	com	r11
		}
		
		//Longitude
		lo =	(gpsdata[32] - '0')*100;
    6748:	00 ec       	ldi	r16, 0xC0	; 192
    674a:	18 e0       	ldi	r17, 0x08	; 8
    674c:	f8 01       	movw	r30, r16
    674e:	80 a1       	ldd	r24, Z+32	; 0x20
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	c0 97       	sbiw	r24, 0x30	; 48
    6754:	24 e6       	ldi	r18, 0x64	; 100
    6756:	28 9f       	mul	r18, r24
    6758:	b0 01       	movw	r22, r0
    675a:	29 9f       	mul	r18, r25
    675c:	70 0d       	add	r23, r0
    675e:	11 24       	eor	r1, r1
    6760:	07 2e       	mov	r0, r23
    6762:	00 0c       	add	r0, r0
    6764:	88 0b       	sbc	r24, r24
    6766:	99 0b       	sbc	r25, r25
    6768:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    676c:	6b 01       	movw	r12, r22
    676e:	7c 01       	movw	r14, r24
		lo +=	(gpsdata[33] - '0')*10;
    6770:	f8 01       	movw	r30, r16
    6772:	81 a1       	ldd	r24, Z+33	; 0x21
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	c0 97       	sbiw	r24, 0x30	; 48
    6778:	bc 01       	movw	r22, r24
    677a:	66 0f       	add	r22, r22
    677c:	77 1f       	adc	r23, r23
    677e:	88 0f       	add	r24, r24
    6780:	99 1f       	adc	r25, r25
    6782:	88 0f       	add	r24, r24
    6784:	99 1f       	adc	r25, r25
    6786:	88 0f       	add	r24, r24
    6788:	99 1f       	adc	r25, r25
    678a:	68 0f       	add	r22, r24
    678c:	79 1f       	adc	r23, r25
    678e:	07 2e       	mov	r0, r23
    6790:	00 0c       	add	r0, r0
    6792:	88 0b       	sbc	r24, r24
    6794:	99 0b       	sbc	r25, r25
    6796:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    679a:	a7 01       	movw	r20, r14
    679c:	96 01       	movw	r18, r12
    679e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    67a2:	6b 01       	movw	r12, r22
    67a4:	7c 01       	movw	r14, r24
		lo +=	(gpsdata[34] - '0');
    67a6:	f8 01       	movw	r30, r16
    67a8:	62 a1       	ldd	r22, Z+34	; 0x22
    67aa:	70 e0       	ldi	r23, 0x00	; 0
    67ac:	60 53       	subi	r22, 0x30	; 48
    67ae:	71 09       	sbc	r23, r1
    67b0:	07 2e       	mov	r0, r23
    67b2:	00 0c       	add	r0, r0
    67b4:	88 0b       	sbc	r24, r24
    67b6:	99 0b       	sbc	r25, r25
    67b8:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    67bc:	a7 01       	movw	r20, r14
    67be:	96 01       	movw	r18, r12
    67c0:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    67c4:	6b 01       	movw	r12, r22
    67c6:	7c 01       	movw	r14, r24
		float lomin =	(gpsdata[35] - '0')*10;
    67c8:	f8 01       	movw	r30, r16
    67ca:	83 a1       	ldd	r24, Z+35	; 0x23
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	c0 97       	sbiw	r24, 0x30	; 48
    67d0:	bc 01       	movw	r22, r24
    67d2:	66 0f       	add	r22, r22
    67d4:	77 1f       	adc	r23, r23
    67d6:	88 0f       	add	r24, r24
    67d8:	99 1f       	adc	r25, r25
    67da:	88 0f       	add	r24, r24
    67dc:	99 1f       	adc	r25, r25
    67de:	88 0f       	add	r24, r24
    67e0:	99 1f       	adc	r25, r25
    67e2:	68 0f       	add	r22, r24
    67e4:	79 1f       	adc	r23, r25
    67e6:	07 2e       	mov	r0, r23
    67e8:	00 0c       	add	r0, r0
    67ea:	88 0b       	sbc	r24, r24
    67ec:	99 0b       	sbc	r25, r25
    67ee:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    67f2:	2b 01       	movw	r4, r22
    67f4:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[36] - '0');
    67f6:	f8 01       	movw	r30, r16
    67f8:	64 a1       	ldd	r22, Z+36	; 0x24
    67fa:	70 e0       	ldi	r23, 0x00	; 0
    67fc:	60 53       	subi	r22, 0x30	; 48
    67fe:	71 09       	sbc	r23, r1
    6800:	07 2e       	mov	r0, r23
    6802:	00 0c       	add	r0, r0
    6804:	88 0b       	sbc	r24, r24
    6806:	99 0b       	sbc	r25, r25
    6808:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    680c:	a3 01       	movw	r20, r6
    680e:	92 01       	movw	r18, r4
    6810:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    6814:	2b 01       	movw	r4, r22
    6816:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[38] - '0')/10.0;
    6818:	f8 01       	movw	r30, r16
    681a:	66 a1       	ldd	r22, Z+38	; 0x26
    681c:	70 e0       	ldi	r23, 0x00	; 0
    681e:	60 53       	subi	r22, 0x30	; 48
    6820:	71 09       	sbc	r23, r1
    6822:	07 2e       	mov	r0, r23
    6824:	00 0c       	add	r0, r0
    6826:	88 0b       	sbc	r24, r24
    6828:	99 0b       	sbc	r25, r25
    682a:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    682e:	20 e0       	ldi	r18, 0x00	; 0
    6830:	30 e0       	ldi	r19, 0x00	; 0
    6832:	40 e2       	ldi	r20, 0x20	; 32
    6834:	51 e4       	ldi	r21, 0x41	; 65
    6836:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    683a:	a3 01       	movw	r20, r6
    683c:	92 01       	movw	r18, r4
    683e:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    6842:	2b 01       	movw	r4, r22
    6844:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[39] - '0')/100.0;
    6846:	f8 01       	movw	r30, r16
    6848:	67 a1       	ldd	r22, Z+39	; 0x27
    684a:	70 e0       	ldi	r23, 0x00	; 0
    684c:	60 53       	subi	r22, 0x30	; 48
    684e:	71 09       	sbc	r23, r1
    6850:	07 2e       	mov	r0, r23
    6852:	00 0c       	add	r0, r0
    6854:	88 0b       	sbc	r24, r24
    6856:	99 0b       	sbc	r25, r25
    6858:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    685c:	20 e0       	ldi	r18, 0x00	; 0
    685e:	30 e0       	ldi	r19, 0x00	; 0
    6860:	48 ec       	ldi	r20, 0xC8	; 200
    6862:	52 e4       	ldi	r21, 0x42	; 66
    6864:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    6868:	a3 01       	movw	r20, r6
    686a:	92 01       	movw	r18, r4
    686c:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    6870:	2b 01       	movw	r4, r22
    6872:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[40] - '0')/1000.0;
    6874:	f8 01       	movw	r30, r16
    6876:	60 a5       	ldd	r22, Z+40	; 0x28
    6878:	70 e0       	ldi	r23, 0x00	; 0
    687a:	60 53       	subi	r22, 0x30	; 48
    687c:	71 09       	sbc	r23, r1
    687e:	07 2e       	mov	r0, r23
    6880:	00 0c       	add	r0, r0
    6882:	88 0b       	sbc	r24, r24
    6884:	99 0b       	sbc	r25, r25
    6886:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    688a:	20 e0       	ldi	r18, 0x00	; 0
    688c:	30 e0       	ldi	r19, 0x00	; 0
    688e:	4a e7       	ldi	r20, 0x7A	; 122
    6890:	54 e4       	ldi	r21, 0x44	; 68
    6892:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    6896:	a3 01       	movw	r20, r6
    6898:	92 01       	movw	r18, r4
    689a:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    689e:	2b 01       	movw	r4, r22
    68a0:	3c 01       	movw	r6, r24
		lomin +=		(gpsdata[41] - '0')/10000.0;
    68a2:	f8 01       	movw	r30, r16
    68a4:	61 a5       	ldd	r22, Z+41	; 0x29
    68a6:	70 e0       	ldi	r23, 0x00	; 0
    68a8:	60 53       	subi	r22, 0x30	; 48
    68aa:	71 09       	sbc	r23, r1
    68ac:	07 2e       	mov	r0, r23
    68ae:	00 0c       	add	r0, r0
    68b0:	88 0b       	sbc	r24, r24
    68b2:	99 0b       	sbc	r25, r25
    68b4:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    68b8:	20 e0       	ldi	r18, 0x00	; 0
    68ba:	30 e4       	ldi	r19, 0x40	; 64
    68bc:	4c e1       	ldi	r20, 0x1C	; 28
    68be:	56 e4       	ldi	r21, 0x46	; 70
    68c0:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    68c4:	a3 01       	movw	r20, r6
    68c6:	92 01       	movw	r18, r4
    68c8:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
		lo +=			lomin/60.0;
    68cc:	20 e0       	ldi	r18, 0x00	; 0
    68ce:	30 e0       	ldi	r19, 0x00	; 0
    68d0:	40 e7       	ldi	r20, 0x70	; 112
    68d2:	52 e4       	ldi	r21, 0x42	; 66
    68d4:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <__divsf3>
    68d8:	a7 01       	movw	r20, r14
    68da:	96 01       	movw	r18, r12
    68dc:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    68e0:	9b 01       	movw	r18, r22
    68e2:	ac 01       	movw	r20, r24
		if (gpsdata[43] != 'E')
    68e4:	f8 01       	movw	r30, r16
    68e6:	83 a5       	ldd	r24, Z+43	; 0x2b
    68e8:	85 34       	cpi	r24, 0x45	; 69
    68ea:	09 f0       	breq	.+2      	; 0x68ee <_Z10gpshandlerv+0x3a2>
		{
			lo *= -1;
    68ec:	50 58       	subi	r21, 0x80	; 128
		}
		
		//Avvaragging
		gpsmovingavv(la,lo);
    68ee:	c5 01       	movw	r24, r10
    68f0:	b4 01       	movw	r22, r8
    68f2:	97 dd       	rcall	.-1234   	; 0x6422 <_Z12gpsmovingavvdd>
		
		//Speed 
		volatile uint8_t counter = 45;
    68f4:	8d e2       	ldi	r24, 0x2D	; 45
    68f6:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t weiter = true;
		while (weiter)
		{
			if (gpsdata[counter]=='.')
    68f8:	ec 81       	ldd	r30, Y+4	; 0x04
    68fa:	f0 e0       	ldi	r31, 0x00	; 0
    68fc:	e0 54       	subi	r30, 0x40	; 64
    68fe:	f7 4f       	sbci	r31, 0xF7	; 247
    6900:	80 81       	ld	r24, Z
    6902:	8e 32       	cpi	r24, 0x2E	; 46
    6904:	91 f4       	brne	.+36     	; 0x692a <_Z10gpshandlerv+0x3de>
			{
				weiter=false;
				counter--;
    6906:	8c 81       	ldd	r24, Y+4	; 0x04
    6908:	81 50       	subi	r24, 0x01	; 1
    690a:	8c 83       	std	Y+4, r24	; 0x04
			}
			counter++;
    690c:	8c 81       	ldd	r24, Y+4	; 0x04
    690e:	8f 5f       	subi	r24, 0xFF	; 255
    6910:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		gpsspeed = 0;
    6912:	10 92 93 08 	sts	0x0893, r1
    6916:	10 92 94 08 	sts	0x0894, r1
    691a:	10 92 95 08 	sts	0x0895, r1
    691e:	10 92 96 08 	sts	0x0896, r1
		for(uint8_t i=45;i<counter;i++){
    6922:	8c 81       	ldd	r24, Y+4	; 0x04
    6924:	8e 32       	cpi	r24, 0x2E	; 46
    6926:	28 f4       	brcc	.+10     	; 0x6932 <_Z10gpshandlerv+0x3e6>
    6928:	47 c0       	rjmp	.+142    	; 0x69b8 <_Z10gpshandlerv+0x46c>
			if (gpsdata[counter]=='.')
			{
				weiter=false;
				counter--;
			}
			counter++;
    692a:	8c 81       	ldd	r24, Y+4	; 0x04
    692c:	8f 5f       	subi	r24, 0xFF	; 255
    692e:	8c 83       	std	Y+4, r24	; 0x04
    6930:	e3 cf       	rjmp	.-58     	; 0x68f8 <_Z10gpshandlerv+0x3ac>
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    6932:	81 2c       	mov	r8, r1
    6934:	91 2c       	mov	r9, r1
    6936:	54 01       	movw	r10, r8
    6938:	0f 2e       	mov	r0, r31
    693a:	fd e2       	ldi	r31, 0x2D	; 45
    693c:	ff 2e       	mov	r15, r31
    693e:	f0 2d       	mov	r31, r0
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
    6940:	0f 2d       	mov	r16, r15
    6942:	10 e0       	ldi	r17, 0x00	; 0
    6944:	8c 81       	ldd	r24, Y+4	; 0x04
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	80 1b       	sub	r24, r16
    694a:	91 0b       	sbc	r25, r17
    694c:	01 97       	sbiw	r24, 0x01	; 1
    694e:	bc 01       	movw	r22, r24
    6950:	99 0f       	add	r25, r25
    6952:	88 0b       	sbc	r24, r24
    6954:	99 0b       	sbc	r25, r25
    6956:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    695a:	9b 01       	movw	r18, r22
    695c:	ac 01       	movw	r20, r24
    695e:	60 e0       	ldi	r22, 0x00	; 0
    6960:	70 e0       	ldi	r23, 0x00	; 0
    6962:	80 e2       	ldi	r24, 0x20	; 32
    6964:	91 e4       	ldi	r25, 0x41	; 65
    6966:	0e 94 13 42 	call	0x8426	; 0x8426 <pow>
    696a:	2b 01       	movw	r4, r22
    696c:	3c 01       	movw	r6, r24
    696e:	f8 01       	movw	r30, r16
    6970:	e0 54       	subi	r30, 0x40	; 64
    6972:	f7 4f       	sbci	r31, 0xF7	; 247
    6974:	60 81       	ld	r22, Z
    6976:	70 e0       	ldi	r23, 0x00	; 0
    6978:	60 53       	subi	r22, 0x30	; 48
    697a:	71 09       	sbc	r23, r1
    697c:	07 2e       	mov	r0, r23
    697e:	00 0c       	add	r0, r0
    6980:	88 0b       	sbc	r24, r24
    6982:	99 0b       	sbc	r25, r25
    6984:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    6988:	a3 01       	movw	r20, r6
    698a:	92 01       	movw	r18, r4
    698c:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    6990:	9b 01       	movw	r18, r22
    6992:	ac 01       	movw	r20, r24
    6994:	c5 01       	movw	r24, r10
    6996:	b4 01       	movw	r22, r8
    6998:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    699c:	4b 01       	movw	r8, r22
    699e:	5c 01       	movw	r10, r24
			}
			counter++;
		}
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
    69a0:	f3 94       	inc	r15
    69a2:	8c 81       	ldd	r24, Y+4	; 0x04
    69a4:	f8 16       	cp	r15, r24
    69a6:	60 f2       	brcs	.-104    	; 0x6940 <_Z10gpshandlerv+0x3f4>
    69a8:	80 92 93 08 	sts	0x0893, r8
    69ac:	90 92 94 08 	sts	0x0894, r9
    69b0:	a0 92 95 08 	sts	0x0895, r10
    69b4:	b0 92 96 08 	sts	0x0896, r11
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    69b8:	ec 81       	ldd	r30, Y+4	; 0x04
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    69ba:	1c 81       	ldd	r17, Y+4	; 0x04
		
		gpsspeed = 0;
		for(uint8_t i=45;i<counter;i++){
			gpsspeed += (gpsdata[i]-'0')*pow(10,(counter-i-1));
		}
		gpsspeed += (gpsdata[counter+1]-'0')*0.1;
    69bc:	f0 e0       	ldi	r31, 0x00	; 0
    69be:	e0 54       	subi	r30, 0x40	; 64
    69c0:	f7 4f       	sbci	r31, 0xF7	; 247
    69c2:	61 81       	ldd	r22, Z+1	; 0x01
    69c4:	70 e0       	ldi	r23, 0x00	; 0
    69c6:	60 53       	subi	r22, 0x30	; 48
    69c8:	71 09       	sbc	r23, r1
    69ca:	07 2e       	mov	r0, r23
    69cc:	00 0c       	add	r0, r0
    69ce:	88 0b       	sbc	r24, r24
    69d0:	99 0b       	sbc	r25, r25
    69d2:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    69d6:	2d ec       	ldi	r18, 0xCD	; 205
    69d8:	3c ec       	ldi	r19, 0xCC	; 204
    69da:	4c ec       	ldi	r20, 0xCC	; 204
    69dc:	5d e3       	ldi	r21, 0x3D	; 61
    69de:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    69e2:	20 91 93 08 	lds	r18, 0x0893
    69e6:	30 91 94 08 	lds	r19, 0x0894
    69ea:	40 91 95 08 	lds	r20, 0x0895
    69ee:	50 91 96 08 	lds	r21, 0x0896
    69f2:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
    69f6:	6b 01       	movw	r12, r22
    69f8:	7c 01       	movw	r14, r24
		gpsspeed += (gpsdata[counter+2]-'0')*0.01;
    69fa:	e1 2f       	mov	r30, r17
    69fc:	f0 e0       	ldi	r31, 0x00	; 0
    69fe:	e0 54       	subi	r30, 0x40	; 64
    6a00:	f7 4f       	sbci	r31, 0xF7	; 247
    6a02:	82 81       	ldd	r24, Z+2	; 0x02
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	c0 97       	sbiw	r24, 0x30	; 48
    6a08:	bc 01       	movw	r22, r24
    6a0a:	99 0f       	add	r25, r25
    6a0c:	88 0b       	sbc	r24, r24
    6a0e:	99 0b       	sbc	r25, r25
    6a10:	0e 94 97 40 	call	0x812e	; 0x812e <__floatsisf>
    6a14:	2a e0       	ldi	r18, 0x0A	; 10
    6a16:	37 ed       	ldi	r19, 0xD7	; 215
    6a18:	43 e2       	ldi	r20, 0x23	; 35
    6a1a:	5c e3       	ldi	r21, 0x3C	; 60
    6a1c:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    6a20:	9b 01       	movw	r18, r22
    6a22:	ac 01       	movw	r20, r24
    6a24:	c7 01       	movw	r24, r14
    6a26:	b6 01       	movw	r22, r12
    6a28:	0e 94 95 3f 	call	0x7f2a	; 0x7f2a <__addsf3>
		//umrechnen knoten in kmh
		gpsspeed *= 1.852;
    6a2c:	26 e5       	ldi	r18, 0x56	; 86
    6a2e:	3e e0       	ldi	r19, 0x0E	; 14
    6a30:	4d ee       	ldi	r20, 0xED	; 237
    6a32:	5f e3       	ldi	r21, 0x3F	; 63
    6a34:	0e 94 b0 41 	call	0x8360	; 0x8360 <__mulsf3>
    6a38:	60 93 93 08 	sts	0x0893, r22
    6a3c:	70 93 94 08 	sts	0x0894, r23
    6a40:	80 93 95 08 	sts	0x0895, r24
    6a44:	90 93 96 08 	sts	0x0896, r25
		
		//date
		counter =19;
    6a48:	83 e1       	ldi	r24, 0x13	; 19
    6a4a:	8c 83       	std	Y+4, r24	; 0x04
		volatile uint8_t nichterreicht = 0;
    6a4c:	1b 82       	std	Y+3, r1	; 0x03
		
		while (nichterreicht < 7)
    6a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a50:	87 30       	cpi	r24, 0x07	; 7
    6a52:	80 f4       	brcc	.+32     	; 0x6a74 <_Z10gpshandlerv+0x528>
		{
			if (gpsdata[counter] == ',')
    6a54:	ec 81       	ldd	r30, Y+4	; 0x04
    6a56:	f0 e0       	ldi	r31, 0x00	; 0
    6a58:	e0 54       	subi	r30, 0x40	; 64
    6a5a:	f7 4f       	sbci	r31, 0xF7	; 247
    6a5c:	80 81       	ld	r24, Z
    6a5e:	8c 32       	cpi	r24, 0x2C	; 44
    6a60:	19 f4       	brne	.+6      	; 0x6a68 <_Z10gpshandlerv+0x51c>
			{
				nichterreicht++;
    6a62:	8b 81       	ldd	r24, Y+3	; 0x03
    6a64:	8f 5f       	subi	r24, 0xFF	; 255
    6a66:	8b 83       	std	Y+3, r24	; 0x03
			}
			counter++;
    6a68:	8c 81       	ldd	r24, Y+4	; 0x04
    6a6a:	8f 5f       	subi	r24, 0xFF	; 255
    6a6c:	8c 83       	std	Y+4, r24	; 0x04
		
		//date
		counter =19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    6a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a70:	87 30       	cpi	r24, 0x07	; 7
    6a72:	80 f3       	brcs	.-32     	; 0x6a54 <_Z10gpshandlerv+0x508>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6a74:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsTag +=	(gpsdata[counter+1] - '0');
    6a76:	ec 81       	ldd	r30, Y+4	; 0x04
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6a78:	b0 e0       	ldi	r27, 0x00	; 0
    6a7a:	a0 54       	subi	r26, 0x40	; 64
    6a7c:	b7 4f       	sbci	r27, 0xF7	; 247
    6a7e:	8c 91       	ld	r24, X
    6a80:	88 0f       	add	r24, r24
    6a82:	80 56       	subi	r24, 0x60	; 96
    6a84:	28 2f       	mov	r18, r24
    6a86:	22 0f       	add	r18, r18
    6a88:	22 0f       	add	r18, r18
    6a8a:	28 0f       	add	r18, r24
		gpsTag +=	(gpsdata[counter+1] - '0');
    6a8c:	f0 e0       	ldi	r31, 0x00	; 0
    6a8e:	e0 54       	subi	r30, 0x40	; 64
    6a90:	f7 4f       	sbci	r31, 0xF7	; 247
    6a92:	81 81       	ldd	r24, Z+1	; 0x01
    6a94:	90 e0       	ldi	r25, 0x00	; 0
    6a96:	c0 97       	sbiw	r24, 0x30	; 48
    6a98:	82 0f       	add	r24, r18
    6a9a:	91 1d       	adc	r25, r1
    6a9c:	80 93 8f 08 	sts	0x088F, r24
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6aa0:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6aa2:	ec 81       	ldd	r30, Y+4	; 0x04
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6aa4:	b0 e0       	ldi	r27, 0x00	; 0
    6aa6:	a0 54       	subi	r26, 0x40	; 64
    6aa8:	b7 4f       	sbci	r27, 0xF7	; 247
    6aaa:	12 96       	adiw	r26, 0x02	; 2
    6aac:	8c 91       	ld	r24, X
    6aae:	88 0f       	add	r24, r24
    6ab0:	80 56       	subi	r24, 0x60	; 96
    6ab2:	28 2f       	mov	r18, r24
    6ab4:	22 0f       	add	r18, r18
    6ab6:	22 0f       	add	r18, r18
    6ab8:	28 0f       	add	r18, r24
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6aba:	f0 e0       	ldi	r31, 0x00	; 0
    6abc:	e0 54       	subi	r30, 0x40	; 64
    6abe:	f7 4f       	sbci	r31, 0xF7	; 247
    6ac0:	83 81       	ldd	r24, Z+3	; 0x03
    6ac2:	90 e0       	ldi	r25, 0x00	; 0
    6ac4:	c0 97       	sbiw	r24, 0x30	; 48
    6ac6:	82 0f       	add	r24, r18
    6ac8:	91 1d       	adc	r25, r1
    6aca:	80 93 8e 08 	sts	0x088E, r24
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6ace:	ac 81       	ldd	r26, Y+4	; 0x04
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6ad0:	ec 81       	ldd	r30, Y+4	; 0x04
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6ad2:	b0 e0       	ldi	r27, 0x00	; 0
    6ad4:	a0 54       	subi	r26, 0x40	; 64
    6ad6:	b7 4f       	sbci	r27, 0xF7	; 247
    6ad8:	14 96       	adiw	r26, 0x04	; 4
    6ada:	8c 91       	ld	r24, X
    6adc:	88 0f       	add	r24, r24
    6ade:	80 56       	subi	r24, 0x60	; 96
    6ae0:	28 2f       	mov	r18, r24
    6ae2:	22 0f       	add	r18, r18
    6ae4:	22 0f       	add	r18, r18
    6ae6:	28 0f       	add	r18, r24
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6ae8:	f0 e0       	ldi	r31, 0x00	; 0
    6aea:	e0 54       	subi	r30, 0x40	; 64
    6aec:	f7 4f       	sbci	r31, 0xF7	; 247
    6aee:	85 81       	ldd	r24, Z+5	; 0x05
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	c0 97       	sbiw	r24, 0x30	; 48
    6af4:	82 0f       	add	r24, r18
    6af6:	91 1d       	adc	r25, r1
    6af8:	80 93 8d 08 	sts	0x088D, r24
		
		gpsstatus &= ~(1<<complete);
    6afc:	80 91 08 09 	lds	r24, 0x0908
    6b00:	8b 7f       	andi	r24, 0xFB	; 251
    6b02:	80 93 08 09 	sts	0x0908, r24
    6b06:	8e c0       	rjmp	.+284    	; 0x6c24 <_Z10gpshandlerv+0x6d8>
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
    6b08:	93 ff       	sbrs	r25, 3
    6b0a:	8c c0       	rjmp	.+280    	; 0x6c24 <_Z10gpshandlerv+0x6d8>
    6b0c:	99 23       	and	r25, r25
    6b0e:	0c f0       	brlt	.+2      	; 0x6b12 <_Z10gpshandlerv+0x5c6>
    6b10:	89 c0       	rjmp	.+274    	; 0x6c24 <_Z10gpshandlerv+0x6d8>
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
		gpsstunde +=	(gpsdata[8] - '0');
    6b12:	e0 ec       	ldi	r30, 0xC0	; 192
    6b14:	f8 e0       	ldi	r31, 0x08	; 8
    6b16:	80 85       	ldd	r24, Z+8	; 0x08
    6b18:	31 ed       	ldi	r19, 0xD1	; 209
    6b1a:	38 0f       	add	r19, r24
		gpsstatus &= ~(1<<complete);
	}
	else if ((gpsstatus&(1<<completenotvalid))  && (gpsstatus&(1<<fix)))
	{
		//Zeit
		gpsstunde =		(gpsdata[7] - '0')*10;
    6b1c:	87 81       	ldd	r24, Z+7	; 0x07
    6b1e:	88 0f       	add	r24, r24
    6b20:	80 56       	subi	r24, 0x60	; 96
    6b22:	28 2f       	mov	r18, r24
    6b24:	22 0f       	add	r18, r18
    6b26:	22 0f       	add	r18, r18
    6b28:	82 0f       	add	r24, r18
		gpsstunde +=	(gpsdata[8] - '0');
		gpsstunde += GMT;
    6b2a:	83 0f       	add	r24, r19
    6b2c:	80 93 92 08 	sts	0x0892, r24
    6b30:	82 85       	ldd	r24, Z+10	; 0x0a
    6b32:	30 ed       	ldi	r19, 0xD0	; 208
    6b34:	38 0f       	add	r19, r24
		gpsminute =		(gpsdata[9] - '0')*10;
    6b36:	81 85       	ldd	r24, Z+9	; 0x09
    6b38:	88 0f       	add	r24, r24
    6b3a:	80 56       	subi	r24, 0x60	; 96
    6b3c:	28 2f       	mov	r18, r24
    6b3e:	22 0f       	add	r18, r18
    6b40:	22 0f       	add	r18, r18
    6b42:	82 0f       	add	r24, r18
		gpsminute +=	(gpsdata[10] - '0');
    6b44:	83 0f       	add	r24, r19
    6b46:	80 93 91 08 	sts	0x0891, r24
    6b4a:	84 85       	ldd	r24, Z+12	; 0x0c
    6b4c:	30 ed       	ldi	r19, 0xD0	; 208
    6b4e:	38 0f       	add	r19, r24
		gpssekunde =	(gpsdata[11] - '0')*10;
    6b50:	83 85       	ldd	r24, Z+11	; 0x0b
    6b52:	88 0f       	add	r24, r24
    6b54:	80 56       	subi	r24, 0x60	; 96
    6b56:	28 2f       	mov	r18, r24
    6b58:	22 0f       	add	r18, r18
    6b5a:	22 0f       	add	r18, r18
    6b5c:	82 0f       	add	r24, r18
		gpssekunde +=	(gpsdata[12] - '0');
    6b5e:	83 0f       	add	r24, r19
    6b60:	80 93 90 08 	sts	0x0890, r24
		
		volatile uint8_t counter = 19;
    6b64:	83 e1       	ldi	r24, 0x13	; 19
    6b66:	8a 83       	std	Y+2, r24	; 0x02
		volatile uint8_t nichterreicht = 0;
    6b68:	19 82       	std	Y+1, r1	; 0x01
		
		while (nichterreicht < 7)
    6b6a:	89 81       	ldd	r24, Y+1	; 0x01
    6b6c:	87 30       	cpi	r24, 0x07	; 7
    6b6e:	80 f4       	brcc	.+32     	; 0x6b90 <_Z10gpshandlerv+0x644>
		{
			if (gpsdata[counter] == ',')
    6b70:	ea 81       	ldd	r30, Y+2	; 0x02
    6b72:	f0 e0       	ldi	r31, 0x00	; 0
    6b74:	e0 54       	subi	r30, 0x40	; 64
    6b76:	f7 4f       	sbci	r31, 0xF7	; 247
    6b78:	80 81       	ld	r24, Z
    6b7a:	8c 32       	cpi	r24, 0x2C	; 44
    6b7c:	19 f4       	brne	.+6      	; 0x6b84 <_Z10gpshandlerv+0x638>
			{
				nichterreicht++;
    6b7e:	89 81       	ldd	r24, Y+1	; 0x01
    6b80:	8f 5f       	subi	r24, 0xFF	; 255
    6b82:	89 83       	std	Y+1, r24	; 0x01
			}
			counter++;
    6b84:	8a 81       	ldd	r24, Y+2	; 0x02
    6b86:	8f 5f       	subi	r24, 0xFF	; 255
    6b88:	8a 83       	std	Y+2, r24	; 0x02
		gpssekunde +=	(gpsdata[12] - '0');
		
		volatile uint8_t counter = 19;
		volatile uint8_t nichterreicht = 0;
		
		while (nichterreicht < 7)
    6b8a:	89 81       	ldd	r24, Y+1	; 0x01
    6b8c:	87 30       	cpi	r24, 0x07	; 7
    6b8e:	80 f3       	brcs	.-32     	; 0x6b70 <_Z10gpshandlerv+0x624>
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6b90:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsTag +=	(gpsdata[counter+1] - '0');
    6b92:	ea 81       	ldd	r30, Y+2	; 0x02
			}
			counter++;
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
    6b94:	b0 e0       	ldi	r27, 0x00	; 0
    6b96:	a0 54       	subi	r26, 0x40	; 64
    6b98:	b7 4f       	sbci	r27, 0xF7	; 247
    6b9a:	8c 91       	ld	r24, X
    6b9c:	88 0f       	add	r24, r24
    6b9e:	80 56       	subi	r24, 0x60	; 96
    6ba0:	28 2f       	mov	r18, r24
    6ba2:	22 0f       	add	r18, r18
    6ba4:	22 0f       	add	r18, r18
    6ba6:	82 0f       	add	r24, r18
		gpsTag +=	(gpsdata[counter+1] - '0');
    6ba8:	f0 e0       	ldi	r31, 0x00	; 0
    6baa:	e0 54       	subi	r30, 0x40	; 64
    6bac:	f7 4f       	sbci	r31, 0xF7	; 247
    6bae:	21 81       	ldd	r18, Z+1	; 0x01
    6bb0:	30 e0       	ldi	r19, 0x00	; 0
    6bb2:	20 53       	subi	r18, 0x30	; 48
    6bb4:	31 09       	sbc	r19, r1
    6bb6:	28 0f       	add	r18, r24
    6bb8:	31 1d       	adc	r19, r1
    6bba:	20 93 8f 08 	sts	0x088F, r18
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6bbe:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6bc0:	ea 81       	ldd	r30, Y+2	; 0x02
		}
		
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
    6bc2:	b0 e0       	ldi	r27, 0x00	; 0
    6bc4:	a0 54       	subi	r26, 0x40	; 64
    6bc6:	b7 4f       	sbci	r27, 0xF7	; 247
    6bc8:	12 96       	adiw	r26, 0x02	; 2
    6bca:	8c 91       	ld	r24, X
    6bcc:	88 0f       	add	r24, r24
    6bce:	80 56       	subi	r24, 0x60	; 96
    6bd0:	28 2f       	mov	r18, r24
    6bd2:	22 0f       	add	r18, r18
    6bd4:	22 0f       	add	r18, r18
    6bd6:	82 0f       	add	r24, r18
		gpsMonat +=	(gpsdata[counter+3] - '0');
    6bd8:	f0 e0       	ldi	r31, 0x00	; 0
    6bda:	e0 54       	subi	r30, 0x40	; 64
    6bdc:	f7 4f       	sbci	r31, 0xF7	; 247
    6bde:	23 81       	ldd	r18, Z+3	; 0x03
    6be0:	30 e0       	ldi	r19, 0x00	; 0
    6be2:	20 53       	subi	r18, 0x30	; 48
    6be4:	31 09       	sbc	r19, r1
    6be6:	28 0f       	add	r18, r24
    6be8:	31 1d       	adc	r19, r1
    6bea:	20 93 8e 08 	sts	0x088E, r18
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6bee:	aa 81       	ldd	r26, Y+2	; 0x02
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6bf0:	ea 81       	ldd	r30, Y+2	; 0x02
		//Datum
		gpsTag =	(gpsdata[counter+0] - '0')*10;
		gpsTag +=	(gpsdata[counter+1] - '0');
		gpsMonat =	(gpsdata[counter+2] - '0')*10;
		gpsMonat +=	(gpsdata[counter+3] - '0');
		gpsJahr =	(gpsdata[counter+4] - '0')*10;
    6bf2:	b0 e0       	ldi	r27, 0x00	; 0
    6bf4:	a0 54       	subi	r26, 0x40	; 64
    6bf6:	b7 4f       	sbci	r27, 0xF7	; 247
    6bf8:	14 96       	adiw	r26, 0x04	; 4
    6bfa:	8c 91       	ld	r24, X
    6bfc:	88 0f       	add	r24, r24
    6bfe:	80 56       	subi	r24, 0x60	; 96
    6c00:	28 2f       	mov	r18, r24
    6c02:	22 0f       	add	r18, r18
    6c04:	22 0f       	add	r18, r18
    6c06:	82 0f       	add	r24, r18
		gpsJahr +=	(gpsdata[counter+5] - '0');
    6c08:	f0 e0       	ldi	r31, 0x00	; 0
    6c0a:	e0 54       	subi	r30, 0x40	; 64
    6c0c:	f7 4f       	sbci	r31, 0xF7	; 247
    6c0e:	25 81       	ldd	r18, Z+5	; 0x05
    6c10:	30 e0       	ldi	r19, 0x00	; 0
    6c12:	20 53       	subi	r18, 0x30	; 48
    6c14:	31 09       	sbc	r19, r1
    6c16:	28 0f       	add	r18, r24
    6c18:	31 1d       	adc	r19, r1
    6c1a:	20 93 8d 08 	sts	0x088D, r18
		
		gpsstatus &= ~(1<<completenotvalid);
    6c1e:	97 7f       	andi	r25, 0xF7	; 247
    6c20:	90 93 08 09 	sts	0x0908, r25
	}
	//fix status pruefen, wenn implementiert
}
    6c24:	0f 90       	pop	r0
    6c26:	0f 90       	pop	r0
    6c28:	0f 90       	pop	r0
    6c2a:	0f 90       	pop	r0
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28
    6c30:	1f 91       	pop	r17
    6c32:	0f 91       	pop	r16
    6c34:	ff 90       	pop	r15
    6c36:	ef 90       	pop	r14
    6c38:	df 90       	pop	r13
    6c3a:	cf 90       	pop	r12
    6c3c:	bf 90       	pop	r11
    6c3e:	af 90       	pop	r10
    6c40:	9f 90       	pop	r9
    6c42:	8f 90       	pop	r8
    6c44:	7f 90       	pop	r7
    6c46:	6f 90       	pop	r6
    6c48:	5f 90       	pop	r5
    6c4a:	4f 90       	pop	r4
    6c4c:	08 95       	ret

00006c4e <main>:
	| ((DWORD)rtc.Minuten << 5)
	| ((DWORD)rtc.Sekunden >> 1);
}

int main(void)
{
    6c4e:	cf 93       	push	r28
    6c50:	df 93       	push	r29
    6c52:	cd b7       	in	r28, 0x3d	; 61
    6c54:	de b7       	in	r29, 0x3e	; 62
    6c56:	65 97       	sbiw	r28, 0x15	; 21
    6c58:	0f b6       	in	r0, 0x3f	; 63
    6c5a:	f8 94       	cli
    6c5c:	de bf       	out	0x3e, r29	; 62
    6c5e:	0f be       	out	0x3f, r0	; 63
    6c60:	cd bf       	out	0x3d, r28	; 61
    initialisierung();
    6c62:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <_Z15initialisierungv>
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6c66:	8a e2       	ldi	r24, 0x2A	; 42
    6c68:	90 e0       	ldi	r25, 0x00	; 0
    6c6a:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <malloc>
    6c6e:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6c70:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6c72:	8b e3       	ldi	r24, 0x3B	; 59
    6c74:	9a e0       	ldi	r25, 0x0A	; 10
    6c76:	90 8f       	std	Z+24, r25	; 0x18
    6c78:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6c7a:	8c e3       	ldi	r24, 0x3C	; 60
    6c7c:	9e e0       	ldi	r25, 0x0E	; 14
    6c7e:	92 8f       	std	Z+26, r25	; 0x1a
    6c80:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    6c82:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6c84:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6c86:	81 e0       	ldi	r24, 0x01	; 1
    6c88:	80 a7       	std	Z+40, r24	; 0x28
class uhr:public monitor
{
	private:
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
    6c8a:	83 ef       	ldi	r24, 0xF3	; 243
    6c8c:	93 e0       	ldi	r25, 0x03	; 3
    6c8e:	91 83       	std	Z+1, r25	; 0x01
    6c90:	80 83       	st	Z, r24
	{
		char na[] = "Uhr";
    6c92:	85 e5       	ldi	r24, 0x55	; 85
    6c94:	98 e6       	ldi	r25, 0x68	; 104
    6c96:	a2 e7       	ldi	r26, 0x72	; 114
    6c98:	b0 e0       	ldi	r27, 0x00	; 0
    6c9a:	89 83       	std	Y+1, r24	; 0x01
    6c9c:	9a 83       	std	Y+2, r25	; 0x02
    6c9e:	ab 83       	std	Y+3, r26	; 0x03
    6ca0:	bc 83       	std	Y+4, r27	; 0x04
    6ca2:	9e 01       	movw	r18, r28
    6ca4:	2f 5f       	subi	r18, 0xFF	; 255
    6ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca8:	cf 01       	movw	r24, r30
    6caa:	4b 96       	adiw	r24, 0x1b	; 27
    6cac:	be 01       	movw	r22, r28
    6cae:	65 5f       	subi	r22, 0xF5	; 245
    6cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb2:	89 01       	movw	r16, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6cb4:	40 e2       	ldi	r20, 0x20	; 32
    6cb6:	50 2f       	mov	r21, r16
    6cb8:	52 1b       	sub	r21, r18
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6cba:	54 30       	cpi	r21, 0x04	; 4
    6cbc:	28 f4       	brcc	.+10     	; 0x6cc8 <main+0x7a>
			{
				name[i] = na[i];
    6cbe:	d8 01       	movw	r26, r16
    6cc0:	5c 91       	ld	r21, X
    6cc2:	dc 01       	movw	r26, r24
    6cc4:	5c 93       	st	X, r21
    6cc6:	02 c0       	rjmp	.+4      	; 0x6ccc <main+0x7e>
			}
			else
			{
				name[i] = ' ';
    6cc8:	dc 01       	movw	r26, r24
    6cca:	4c 93       	st	X, r20
    6ccc:	0f 5f       	subi	r16, 0xFF	; 255
    6cce:	1f 4f       	sbci	r17, 0xFF	; 255
    6cd0:	01 96       	adiw	r24, 0x01	; 1
	uint8_t Zeiger;
	public:
	uhr(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Uhr";
		for(uint8_t i =0; i< namesize;i++){
    6cd2:	06 17       	cp	r16, r22
    6cd4:	17 07       	cpc	r17, r23
    6cd6:	79 f7       	brne	.-34     	; 0x6cb6 <main+0x68>
			else
			{
				name[i] = ' ';
			}
		}
		Zeiger = 0;
    6cd8:	11 a6       	std	Z+41, r1	; 0x29
		maxentries = 3;
    6cda:	83 e0       	ldi	r24, 0x03	; 3
    6cdc:	87 a3       	std	Z+39, r24	; 0x27
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6cde:	fa 83       	std	Y+2, r31	; 0x02
    6ce0:	e9 83       	std	Y+1, r30	; 0x01
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6ce2:	89 e2       	ldi	r24, 0x29	; 41
    6ce4:	90 e0       	ldi	r25, 0x00	; 0
    6ce6:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <malloc>
    6cea:	8c 01       	movw	r16, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6cec:	fc 01       	movw	r30, r24
    6cee:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6cf0:	8b e3       	ldi	r24, 0x3B	; 59
    6cf2:	9a e0       	ldi	r25, 0x0A	; 10
    6cf4:	90 8f       	std	Z+24, r25	; 0x18
    6cf6:	87 8b       	std	Z+23, r24	; 0x17
		rtc = rt;
    6cf8:	8c e3       	ldi	r24, 0x3C	; 60
    6cfa:	9e e0       	ldi	r25, 0x0E	; 14
    6cfc:	92 8f       	std	Z+26, r25	; 0x1a
    6cfe:	81 8f       	std	Z+25, r24	; 0x19
		posy=0;
    6d00:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6d02:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6d04:	81 e0       	ldi	r24, 0x01	; 1
    6d06:	80 a7       	std	Z+40, r24	; 0x28
class tacho: public monitor
{
	private:
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
    6d08:	8b ef       	ldi	r24, 0xFB	; 251
    6d0a:	93 e0       	ldi	r25, 0x03	; 3
    6d0c:	91 83       	std	Z+1, r25	; 0x01
    6d0e:	80 83       	st	Z, r24
	{
		char na[] = "Tacho";
    6d10:	86 e0       	ldi	r24, 0x06	; 6
    6d12:	ee e3       	ldi	r30, 0x3E	; 62
    6d14:	f2 e0       	ldi	r31, 0x02	; 2
    6d16:	de 01       	movw	r26, r28
    6d18:	1d 96       	adiw	r26, 0x0d	; 13
    6d1a:	01 90       	ld	r0, Z+
    6d1c:	0d 92       	st	X+, r0
    6d1e:	8a 95       	dec	r24
    6d20:	e1 f7       	brne	.-8      	; 0x6d1a <main+0xcc>
    6d22:	ce 01       	movw	r24, r28
    6d24:	0d 96       	adiw	r24, 0x0d	; 13
    6d26:	d8 01       	movw	r26, r16
    6d28:	5b 96       	adiw	r26, 0x1b	; 27
    6d2a:	ae 01       	movw	r20, r28
    6d2c:	49 5e       	subi	r20, 0xE9	; 233
    6d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    6d30:	fc 01       	movw	r30, r24
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6d32:	20 e2       	ldi	r18, 0x20	; 32
    6d34:	3e 2f       	mov	r19, r30
    6d36:	38 1b       	sub	r19, r24
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6d38:	36 30       	cpi	r19, 0x06	; 6
    6d3a:	18 f4       	brcc	.+6      	; 0x6d42 <main+0xf4>
			{
				name[i] = na[i];
    6d3c:	30 81       	ld	r19, Z
    6d3e:	3c 93       	st	X, r19
    6d40:	01 c0       	rjmp	.+2      	; 0x6d44 <main+0xf6>
			}
			else
			{
				name[i] = ' ';
    6d42:	2c 93       	st	X, r18
    6d44:	31 96       	adiw	r30, 0x01	; 1
    6d46:	11 96       	adiw	r26, 0x01	; 1
		
	public:
	tacho(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Tacho";
		for(uint8_t i =0; i< namesize;i++){
    6d48:	e4 17       	cp	r30, r20
    6d4a:	f5 07       	cpc	r31, r21
    6d4c:	99 f7       	brne	.-26     	; 0x6d34 <main+0xe6>
			else
			{
				name[i] = ' ';
			}
		}
		nullen();
    6d4e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <_Z6nullenv>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6d52:	1c 83       	std	Y+4, r17	; 0x04
    6d54:	0b 83       	std	Y+3, r16	; 0x03
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6d56:	89 e2       	ldi	r24, 0x29	; 41
    6d58:	90 e0       	ldi	r25, 0x00	; 0
    6d5a:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6d5e:	dc 01       	movw	r26, r24
    6d60:	56 96       	adiw	r26, 0x16	; 22
    6d62:	1c 92       	st	X, r1
    6d64:	56 97       	sbiw	r26, 0x16	; 22
		oled = ol;
    6d66:	2b e3       	ldi	r18, 0x3B	; 59
    6d68:	3a e0       	ldi	r19, 0x0A	; 10
    6d6a:	58 96       	adiw	r26, 0x18	; 24
    6d6c:	3c 93       	st	X, r19
    6d6e:	2e 93       	st	-X, r18
    6d70:	57 97       	sbiw	r26, 0x17	; 23
		rtc = rt;
    6d72:	2c e3       	ldi	r18, 0x3C	; 60
    6d74:	3e e0       	ldi	r19, 0x0E	; 14
    6d76:	5a 96       	adiw	r26, 0x1a	; 26
    6d78:	3c 93       	st	X, r19
    6d7a:	2e 93       	st	-X, r18
    6d7c:	59 97       	sbiw	r26, 0x19	; 25
		posy=0;
    6d7e:	95 96       	adiw	r26, 0x25	; 37
    6d80:	1c 92       	st	X, r1
    6d82:	95 97       	sbiw	r26, 0x25	; 37
		posx=0;
    6d84:	96 96       	adiw	r26, 0x26	; 38
    6d86:	1c 92       	st	X, r1
    6d88:	96 97       	sbiw	r26, 0x26	; 38
		maxentriesx = 1;
    6d8a:	21 e0       	ldi	r18, 0x01	; 1
    6d8c:	98 96       	adiw	r26, 0x28	; 40
    6d8e:	2c 93       	st	X, r18
    6d90:	98 97       	sbiw	r26, 0x28	; 40
class wandern: public monitor
{
	private:
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
    6d92:	23 e0       	ldi	r18, 0x03	; 3
    6d94:	34 e0       	ldi	r19, 0x04	; 4
    6d96:	2d 93       	st	X+, r18
    6d98:	3c 93       	st	X, r19
	{
		char na[] = "Wandern";
    6d9a:	28 e0       	ldi	r18, 0x08	; 8
    6d9c:	e4 e4       	ldi	r30, 0x44	; 68
    6d9e:	f2 e0       	ldi	r31, 0x02	; 2
    6da0:	de 01       	movw	r26, r28
    6da2:	1d 96       	adiw	r26, 0x0d	; 13
    6da4:	01 90       	ld	r0, Z+
    6da6:	0d 92       	st	X+, r0
    6da8:	2a 95       	dec	r18
    6daa:	e1 f7       	brne	.-8      	; 0x6da4 <main+0x156>
    6dac:	9e 01       	movw	r18, r28
    6dae:	23 5f       	subi	r18, 0xF3	; 243
    6db0:	3f 4f       	sbci	r19, 0xFF	; 255
    6db2:	dc 01       	movw	r26, r24
    6db4:	5b 96       	adiw	r26, 0x1b	; 27
    6db6:	be 01       	movw	r22, r28
    6db8:	69 5e       	subi	r22, 0xE9	; 233
    6dba:	7f 4f       	sbci	r23, 0xFF	; 255
    6dbc:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6dbe:	40 e2       	ldi	r20, 0x20	; 32
    6dc0:	5e 2f       	mov	r21, r30
    6dc2:	52 1b       	sub	r21, r18
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6dc4:	58 30       	cpi	r21, 0x08	; 8
    6dc6:	18 f4       	brcc	.+6      	; 0x6dce <main+0x180>
			{
				name[i] = na[i];
    6dc8:	50 81       	ld	r21, Z
    6dca:	5c 93       	st	X, r21
    6dcc:	01 c0       	rjmp	.+2      	; 0x6dd0 <main+0x182>
			}
			else
			{
				name[i] = ' ';
    6dce:	4c 93       	st	X, r20
    6dd0:	31 96       	adiw	r30, 0x01	; 1
    6dd2:	11 96       	adiw	r26, 0x01	; 1
	
	public:	
	wandern(Display *ol,RTC *rtc):monitor(ol,rtc)
	{
		char na[] = "Wandern";
		for(uint8_t i =0; i< namesize;i++){
    6dd4:	e6 17       	cp	r30, r22
    6dd6:	f7 07       	cpc	r31, r23
    6dd8:	99 f7       	brne	.-26     	; 0x6dc0 <main+0x172>
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6dda:	9e 83       	std	Y+6, r25	; 0x06
    6ddc:	8d 83       	std	Y+5, r24	; 0x05
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6dde:	89 e2       	ldi	r24, 0x29	; 41
    6de0:	90 e0       	ldi	r25, 0x00	; 0
    6de2:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6de6:	fc 01       	movw	r30, r24
    6de8:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6dea:	2b e3       	ldi	r18, 0x3B	; 59
    6dec:	3a e0       	ldi	r19, 0x0A	; 10
    6dee:	30 8f       	std	Z+24, r19	; 0x18
    6df0:	27 8b       	std	Z+23, r18	; 0x17
		rtc = rt;
    6df2:	2c e3       	ldi	r18, 0x3C	; 60
    6df4:	3e e0       	ldi	r19, 0x0E	; 14
    6df6:	32 8f       	std	Z+26, r19	; 0x1a
    6df8:	21 8f       	std	Z+25, r18	; 0x19
		posy=0;
    6dfa:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6dfc:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6dfe:	21 e0       	ldi	r18, 0x01	; 1
    6e00:	20 a7       	std	Z+40, r18	; 0x28

class einstellungen: public monitor
{
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
    6e02:	2b e0       	ldi	r18, 0x0B	; 11
    6e04:	34 e0       	ldi	r19, 0x04	; 4
    6e06:	31 83       	std	Z+1, r19	; 0x01
    6e08:	20 83       	st	Z, r18
	{
		char na[] = "Settings";
    6e0a:	29 e0       	ldi	r18, 0x09	; 9
    6e0c:	e7 e1       	ldi	r30, 0x17	; 23
    6e0e:	f3 e0       	ldi	r31, 0x03	; 3
    6e10:	de 01       	movw	r26, r28
    6e12:	1d 96       	adiw	r26, 0x0d	; 13
    6e14:	01 90       	ld	r0, Z+
    6e16:	0d 92       	st	X+, r0
    6e18:	2a 95       	dec	r18
    6e1a:	e1 f7       	brne	.-8      	; 0x6e14 <main+0x1c6>
    6e1c:	9e 01       	movw	r18, r28
    6e1e:	23 5f       	subi	r18, 0xF3	; 243
    6e20:	3f 4f       	sbci	r19, 0xFF	; 255
    6e22:	dc 01       	movw	r26, r24
    6e24:	5b 96       	adiw	r26, 0x1b	; 27
    6e26:	be 01       	movw	r22, r28
    6e28:	69 5e       	subi	r22, 0xE9	; 233
    6e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e2c:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6e2e:	40 e2       	ldi	r20, 0x20	; 32
    6e30:	5e 2f       	mov	r21, r30
    6e32:	52 1b       	sub	r21, r18
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
			if (i<sizeof(na))
    6e34:	59 30       	cpi	r21, 0x09	; 9
    6e36:	18 f4       	brcc	.+6      	; 0x6e3e <main+0x1f0>
			{
				name[i] = na[i];
    6e38:	50 81       	ld	r21, Z
    6e3a:	5c 93       	st	X, r21
    6e3c:	01 c0       	rjmp	.+2      	; 0x6e40 <main+0x1f2>
			}
			else
			{
				name[i] = ' ';
    6e3e:	4c 93       	st	X, r20
    6e40:	31 96       	adiw	r30, 0x01	; 1
    6e42:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	einstellungen(Display *ol,RTC *rt): monitor(ol,rt)
	{
		char na[] = "Settings";
		for(uint8_t i =0; i< namesize;i++){
    6e44:	e6 17       	cp	r30, r22
    6e46:	f7 07       	cpc	r31, r23
    6e48:	99 f7       	brne	.-26     	; 0x6e30 <main+0x1e2>
			else
			{
				name[i] = ' ';
			}
		}
		maxentries = 5;
    6e4a:	25 e0       	ldi	r18, 0x05	; 5
    6e4c:	dc 01       	movw	r26, r24
    6e4e:	97 96       	adiw	r26, 0x27	; 39
    6e50:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6e52:	98 87       	std	Y+8, r25	; 0x08
    6e54:	8f 83       	std	Y+7, r24	; 0x07
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6e56:	89 e2       	ldi	r24, 0x29	; 41
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <malloc>
    6e5e:	fc 01       	movw	r30, r24
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6e60:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6e62:	0f 2e       	mov	r0, r31
    6e64:	fb e3       	ldi	r31, 0x3B	; 59
    6e66:	cf 2e       	mov	r12, r31
    6e68:	fa e0       	ldi	r31, 0x0A	; 10
    6e6a:	df 2e       	mov	r13, r31
    6e6c:	f0 2d       	mov	r31, r0
    6e6e:	d0 8e       	std	Z+24, r13	; 0x18
    6e70:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6e72:	0f 2e       	mov	r0, r31
    6e74:	fc e3       	ldi	r31, 0x3C	; 60
    6e76:	ef 2e       	mov	r14, r31
    6e78:	fe e0       	ldi	r31, 0x0E	; 14
    6e7a:	ff 2e       	mov	r15, r31
    6e7c:	f0 2d       	mov	r31, r0
    6e7e:	f2 8e       	std	Z+26, r15	; 0x1a
    6e80:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6e82:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6e84:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6e86:	11 e0       	ldi	r17, 0x01	; 1
    6e88:	10 a7       	std	Z+40, r17	; 0x28
class offscreen: public monitor
{
	private:
	
	public:
	offscreen(Display *ol, RTC *rt):monitor(ol,rt){
    6e8a:	83 e2       	ldi	r24, 0x23	; 35
    6e8c:	94 e0       	ldi	r25, 0x04	; 4
    6e8e:	91 83       	std	Z+1, r25	; 0x01
    6e90:	80 83       	st	Z, r24
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6e92:	fa 87       	std	Y+10, r31	; 0x0a
    6e94:	e9 87       	std	Y+9, r30	; 0x09
#include <avr/interrupt.h>

//define new and delete operator
void * operator new(size_t size)
{
	return malloc(size);
    6e96:	89 e2       	ldi	r24, 0x29	; 41
    6e98:	90 e0       	ldi	r25, 0x00	; 0
    6e9a:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <malloc>
		uint8_t posx;
		uint8_t maxentries;
		uint8_t maxentriesx;
	monitor(Display *ol, RTC *rt)
	{
		buffersize = 0;
    6e9e:	fc 01       	movw	r30, r24
    6ea0:	16 8a       	std	Z+22, r1	; 0x16
		oled = ol;
    6ea2:	d0 8e       	std	Z+24, r13	; 0x18
    6ea4:	c7 8a       	std	Z+23, r12	; 0x17
		rtc = rt;
    6ea6:	f2 8e       	std	Z+26, r15	; 0x1a
    6ea8:	e1 8e       	std	Z+25, r14	; 0x19
		posy=0;
    6eaa:	15 a2       	std	Z+37, r1	; 0x25
		posx=0;
    6eac:	16 a2       	std	Z+38, r1	; 0x26
		maxentriesx = 1;
    6eae:	10 a7       	std	Z+40, r17	; 0x28

class menue: public monitor
{
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
    6eb0:	2b e1       	ldi	r18, 0x1B	; 27
    6eb2:	34 e0       	ldi	r19, 0x04	; 4
    6eb4:	31 83       	std	Z+1, r19	; 0x01
    6eb6:	20 83       	st	Z, r18
	{
		char na[] = "Menue";
    6eb8:	26 e0       	ldi	r18, 0x06	; 6
    6eba:	e0 e2       	ldi	r30, 0x20	; 32
    6ebc:	f3 e0       	ldi	r31, 0x03	; 3
    6ebe:	de 01       	movw	r26, r28
    6ec0:	1d 96       	adiw	r26, 0x0d	; 13
    6ec2:	01 90       	ld	r0, Z+
    6ec4:	0d 92       	st	X+, r0
    6ec6:	2a 95       	dec	r18
    6ec8:	e1 f7       	brne	.-8      	; 0x6ec2 <main+0x274>
    6eca:	9e 01       	movw	r18, r28
    6ecc:	23 5f       	subi	r18, 0xF3	; 243
    6ece:	3f 4f       	sbci	r19, 0xFF	; 255
    6ed0:	dc 01       	movw	r26, r24
    6ed2:	5b 96       	adiw	r26, 0x1b	; 27
    6ed4:	be 01       	movw	r22, r28
    6ed6:	69 5e       	subi	r22, 0xE9	; 233
    6ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    6eda:	f9 01       	movw	r30, r18
			{
				name[i] = na[i];
			}
			else
			{
				name[i] = ' ';
    6edc:	40 e2       	ldi	r20, 0x20	; 32
    6ede:	5e 2f       	mov	r21, r30
    6ee0:	52 1b       	sub	r21, r18
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
			if (i<sizeof(na))
    6ee2:	56 30       	cpi	r21, 0x06	; 6
    6ee4:	18 f4       	brcc	.+6      	; 0x6eec <main+0x29e>
			{
				name[i] = na[i];
    6ee6:	50 81       	ld	r21, Z
    6ee8:	5c 93       	st	X, r21
    6eea:	01 c0       	rjmp	.+2      	; 0x6eee <main+0x2a0>
			}
			else
			{
				name[i] = ' ';
    6eec:	4c 93       	st	X, r20
    6eee:	31 96       	adiw	r30, 0x01	; 1
    6ef0:	11 96       	adiw	r26, 0x01	; 1
	private:
	public:
	menue(Display *ol, RTC *rt):monitor(ol,rt)
	{
		char na[] = "Menue";
		for(uint8_t i =0; i< namesize;i++)
    6ef2:	e6 17       	cp	r30, r22
    6ef4:	f7 07       	cpc	r31, r23
    6ef6:	99 f7       	brne	.-26     	; 0x6ede <main+0x290>
			}
			else
			{
				name[i] = ' ';
			}
			maxentriesx = 0;
    6ef8:	dc 01       	movw	r26, r24
    6efa:	98 96       	adiw	r26, 0x28	; 40
    6efc:	1c 92       	st	X, r1
    6efe:	98 97       	sbiw	r26, 0x28	; 40
			maxentries = numberofpages;
    6f00:	25 e0       	ldi	r18, 0x05	; 5
    6f02:	97 96       	adiw	r26, 0x27	; 39
    6f04:	2c 93       	st	X, r18
		new tacho(&oled,&rtc),
		new wandern(&oled,&rtc),
		new einstellungen(&oled,&rtc),
		new offscreen(&oled,&rtc),
		new menue(&oled,&rtc)
	};
    6f06:	9c 87       	std	Y+12, r25	; 0x0c
    6f08:	8b 87       	std	Y+11, r24	; 0x0b
	
	druck.bmp180_getcalibration();
    6f0a:	87 e1       	ldi	r24, 0x17	; 23
    6f0c:	99 e0       	ldi	r25, 0x09	; 9
    6f0e:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN6BMP18021bmp180_getcalibrationEv>
	//speichern der Werte und per hand rechnen
	
	
	while (1) 
    {
		tastaturhandler(Folien[position],Tastatur.unified());
    6f12:	8f e2       	ldi	r24, 0x2F	; 47
    6f14:	9a e0       	ldi	r25, 0x0A	; 10
    6f16:	0e 94 62 24 	call	0x48c4	; 0x48c4 <_ZN9Interface7unifiedEv>
    6f1a:	e0 91 0a 09 	lds	r30, 0x090A
    6f1e:	f0 e0       	ldi	r31, 0x00	; 0
    6f20:	ee 0f       	add	r30, r30
    6f22:	ff 1f       	adc	r31, r31
    6f24:	21 e0       	ldi	r18, 0x01	; 1
    6f26:	30 e0       	ldi	r19, 0x00	; 0
    6f28:	2c 0f       	add	r18, r28
    6f2a:	3d 1f       	adc	r19, r29
    6f2c:	e2 0f       	add	r30, r18
    6f2e:	f3 1f       	adc	r31, r19
    6f30:	68 2f       	mov	r22, r24
    6f32:	80 81       	ld	r24, Z
    6f34:	91 81       	ldd	r25, Z+1	; 0x01
    6f36:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <_Z15tastaturhandlerP7monitorh>
		maininterupthandler(Folien[position]);
    6f3a:	e0 91 0a 09 	lds	r30, 0x090A
    6f3e:	f0 e0       	ldi	r31, 0x00	; 0
    6f40:	ee 0f       	add	r30, r30
    6f42:	ff 1f       	adc	r31, r31
    6f44:	81 e0       	ldi	r24, 0x01	; 1
    6f46:	90 e0       	ldi	r25, 0x00	; 0
    6f48:	8c 0f       	add	r24, r28
    6f4a:	9d 1f       	adc	r25, r29
    6f4c:	e8 0f       	add	r30, r24
    6f4e:	f9 1f       	adc	r31, r25
    6f50:	80 81       	ld	r24, Z
    6f52:	91 81       	ldd	r25, Z+1	; 0x01
    6f54:	0f d8       	rcall	.-4066   	; 0x5f74 <_Z19maininterupthandlerP7monitor>
		gpshandler();
    6f56:	fa da       	rcall	.-2572   	; 0x654c <_Z10gpshandlerv>
    }
    6f58:	dc cf       	rjmp	.-72     	; 0x6f12 <main+0x2c4>

00006f5a <_Z13uhreinstellenv>:
		gpsstatus &= ~(1<<completenotvalid);
	}
	//fix status pruefen, wenn implementiert
}

void uhreinstellen(){
    6f5a:	2f 92       	push	r2
    6f5c:	3f 92       	push	r3
    6f5e:	4f 92       	push	r4
    6f60:	5f 92       	push	r5
    6f62:	6f 92       	push	r6
    6f64:	7f 92       	push	r7
    6f66:	8f 92       	push	r8
    6f68:	9f 92       	push	r9
    6f6a:	af 92       	push	r10
    6f6c:	bf 92       	push	r11
    6f6e:	cf 92       	push	r12
    6f70:	df 92       	push	r13
    6f72:	ef 92       	push	r14
    6f74:	ff 92       	push	r15
    6f76:	0f 93       	push	r16
    6f78:	1f 93       	push	r17
    6f7a:	cf 93       	push	r28
    6f7c:	df 93       	push	r29
    6f7e:	cd b7       	in	r28, 0x3d	; 61
    6f80:	de b7       	in	r29, 0x3e	; 62
    6f82:	66 97       	sbiw	r28, 0x16	; 22
    6f84:	0f b6       	in	r0, 0x3f	; 63
    6f86:	f8 94       	cli
    6f88:	de bf       	out	0x3e, r29	; 62
    6f8a:	0f be       	out	0x3f, r0	; 63
    6f8c:	cd bf       	out	0x3d, r28	; 61
	rtc.RTCstop();
    6f8e:	8c e3       	ldi	r24, 0x3C	; 60
    6f90:	9e e0       	ldi	r25, 0x0E	; 14
    6f92:	c4 d7       	rcall	.+3976   	; 0x7f1c <_ZN3RTC7RTCstopEv>
	
	oled.clearFrame();
    6f94:	8b e3       	ldi	r24, 0x3B	; 59
    6f96:	9a e0       	ldi	r25, 0x0A	; 10
    6f98:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
    6f9c:	91 2c       	mov	r9, r1
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6f9e:	0f 2e       	mov	r0, r31
    6fa0:	ff e0       	ldi	r31, 0x0F	; 15
    6fa2:	7f 2e       	mov	r7, r31
    6fa4:	f0 2d       	mov	r31, r0
    6fa6:	ce 01       	movw	r24, r28
    6fa8:	01 96       	adiw	r24, 0x01	; 1
    6faa:	2c 01       	movw	r4, r24
    6fac:	f1 2c       	mov	r15, r1
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    6fae:	8d 8b       	std	Y+21, r24	; 0x15
    6fb0:	5e 8a       	std	Y+22, r5	; 0x16
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    6fb2:	0f 2e       	mov	r0, r31
    6fb4:	fc e3       	ldi	r31, 0x3C	; 60
    6fb6:	cf 2e       	mov	r12, r31
    6fb8:	fe e0       	ldi	r31, 0x0E	; 14
    6fba:	df 2e       	mov	r13, r31
    6fbc:	f0 2d       	mov	r31, r0
    6fbe:	0f 2e       	mov	r0, r31
    6fc0:	fd ec       	ldi	r31, 0xCD	; 205
    6fc2:	8f 2e       	mov	r8, r31
    6fc4:	f0 2d       	mov	r31, r0
		buffer[1]=rtc.Stunden%10;
		buffer[2]=':';
		buffer[3]=rtc.Minuten/10;
		buffer[4]=rtc.Minuten%10;
		buffer[5]=' ';
    6fc6:	68 94       	set
    6fc8:	ee 24       	eor	r14, r14
    6fca:	e5 f8       	bld	r14, 5
		buffer[6]=rtc.Tag/10;
		buffer[7]=rtc.Tag%10;
		buffer[8]='.';
    6fcc:	0f 2e       	mov	r0, r31
    6fce:	fe e2       	ldi	r31, 0x2E	; 46
    6fd0:	6f 2e       	mov	r6, r31
    6fd2:	f0 2d       	mov	r31, r0
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
    6fd4:	e6 e2       	ldi	r30, 0x26	; 38
    6fd6:	f3 e0       	ldi	r31, 0x03	; 3
    6fd8:	d2 01       	movw	r26, r4
    6fda:	87 2d       	mov	r24, r7
    6fdc:	01 90       	ld	r0, Z+
    6fde:	0d 92       	st	X+, r0
    6fe0:	8a 95       	dec	r24
    6fe2:	e1 f7       	brne	.-8      	; 0x6fdc <_Z13uhreinstellenv+0x82>
    6fe4:	52 01       	movw	r10, r4
    6fe6:	12 01       	movw	r2, r4
    6fe8:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
    6fea:	f1 01       	movw	r30, r2
    6fec:	61 91       	ld	r22, Z+
    6fee:	1f 01       	movw	r2, r30
    6ff0:	2f 2d       	mov	r18, r15
    6ff2:	41 2f       	mov	r20, r17
    6ff4:	8b e3       	ldi	r24, 0x3B	; 59
    6ff6:	9a e0       	ldi	r25, 0x0A	; 10
    6ff8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    6ffc:	1a 5f       	subi	r17, 0xFA	; 250
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
    6ffe:	14 35       	cpi	r17, 0x54	; 84
    7000:	a1 f7       	brne	.-24     	; 0x6fea <_Z13uhreinstellenv+0x90>
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
    7002:	e5 ea       	ldi	r30, 0xA5	; 165
    7004:	f1 e0       	ldi	r31, 0x01	; 1
    7006:	d2 01       	movw	r26, r4
    7008:	87 2d       	mov	r24, r7
    700a:	01 90       	ld	r0, Z+
    700c:	0d 92       	st	X+, r0
    700e:	8a 95       	dec	r24
    7010:	e1 f7       	brne	.-8      	; 0x700a <_Z13uhreinstellenv+0xb0>
    7012:	2d 88       	ldd	r2, Y+21	; 0x15
    7014:	3e 88       	ldd	r3, Y+22	; 0x16
    7016:	1f 2d       	mov	r17, r15
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,8);
    7018:	f1 01       	movw	r30, r2
    701a:	61 91       	ld	r22, Z+
    701c:	1f 01       	movw	r2, r30
    701e:	28 e0       	ldi	r18, 0x08	; 8
    7020:	41 2f       	mov	r20, r17
    7022:	8b e3       	ldi	r24, 0x3B	; 59
    7024:	9a e0       	ldi	r25, 0x0A	; 10
    7026:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    702a:	1a 5f       	subi	r17, 0xFA	; 250
		buffersize=sprintf(buffer,"Uhreinstellung");
		for(uint8_t i = 0; i<buffersize;i++){
			oled.draw_ASCI(buffer[i],charsize*i,0);
		}
		buffersize=sprintf(buffer,"--------------");
		for(uint8_t i = 0; i<buffersize;i++){
    702c:	14 35       	cpi	r17, 0x54	; 84
    702e:	a1 f7       	brne	.-24     	; 0x7018 <_Z13uhreinstellenv+0xbe>
			oled.draw_ASCI(buffer[i],charsize*i,8);
		}
		buffer[0]=rtc.Stunden/10;
    7030:	f6 01       	movw	r30, r12
    7032:	90 89       	ldd	r25, Z+16	; 0x10
    7034:	98 9d       	mul	r25, r8
    7036:	81 2d       	mov	r24, r1
    7038:	11 24       	eor	r1, r1
    703a:	86 95       	lsr	r24
    703c:	86 95       	lsr	r24
    703e:	86 95       	lsr	r24
    7040:	89 83       	std	Y+1, r24	; 0x01
		buffer[1]=rtc.Stunden%10;
    7042:	88 0f       	add	r24, r24
    7044:	28 2f       	mov	r18, r24
    7046:	22 0f       	add	r18, r18
    7048:	22 0f       	add	r18, r18
    704a:	82 0f       	add	r24, r18
    704c:	98 1b       	sub	r25, r24
    704e:	9a 83       	std	Y+2, r25	; 0x02
		buffer[2]=':';
    7050:	fa e3       	ldi	r31, 0x3A	; 58
    7052:	fb 83       	std	Y+3, r31	; 0x03
		buffer[3]=rtc.Minuten/10;
    7054:	f6 01       	movw	r30, r12
    7056:	91 89       	ldd	r25, Z+17	; 0x11
    7058:	98 9d       	mul	r25, r8
    705a:	81 2d       	mov	r24, r1
    705c:	11 24       	eor	r1, r1
    705e:	86 95       	lsr	r24
    7060:	86 95       	lsr	r24
    7062:	86 95       	lsr	r24
    7064:	8c 83       	std	Y+4, r24	; 0x04
		buffer[4]=rtc.Minuten%10;
    7066:	88 0f       	add	r24, r24
    7068:	28 2f       	mov	r18, r24
    706a:	22 0f       	add	r18, r18
    706c:	22 0f       	add	r18, r18
    706e:	82 0f       	add	r24, r18
    7070:	98 1b       	sub	r25, r24
    7072:	9d 83       	std	Y+5, r25	; 0x05
		buffer[5]=' ';
    7074:	ee 82       	std	Y+6, r14	; 0x06
		buffer[6]=rtc.Tag/10;
    7076:	94 89       	ldd	r25, Z+20	; 0x14
    7078:	98 9d       	mul	r25, r8
    707a:	81 2d       	mov	r24, r1
    707c:	11 24       	eor	r1, r1
    707e:	86 95       	lsr	r24
    7080:	86 95       	lsr	r24
    7082:	86 95       	lsr	r24
    7084:	8f 83       	std	Y+7, r24	; 0x07
		buffer[7]=rtc.Tag%10;
    7086:	88 0f       	add	r24, r24
    7088:	28 2f       	mov	r18, r24
    708a:	22 0f       	add	r18, r18
    708c:	22 0f       	add	r18, r18
    708e:	82 0f       	add	r24, r18
    7090:	98 1b       	sub	r25, r24
    7092:	98 87       	std	Y+8, r25	; 0x08
		buffer[8]='.';
    7094:	69 86       	std	Y+9, r6	; 0x09
		buffer[9]=rtc.Monat/10;
    7096:	96 89       	ldd	r25, Z+22	; 0x16
    7098:	98 9d       	mul	r25, r8
    709a:	81 2d       	mov	r24, r1
    709c:	11 24       	eor	r1, r1
    709e:	86 95       	lsr	r24
    70a0:	86 95       	lsr	r24
    70a2:	86 95       	lsr	r24
    70a4:	8a 87       	std	Y+10, r24	; 0x0a
		buffer[10]=rtc.Monat%10;
    70a6:	88 0f       	add	r24, r24
    70a8:	28 2f       	mov	r18, r24
    70aa:	22 0f       	add	r18, r18
    70ac:	22 0f       	add	r18, r18
    70ae:	82 0f       	add	r24, r18
    70b0:	98 1b       	sub	r25, r24
    70b2:	9b 87       	std	Y+11, r25	; 0x0b
		buffer[11]='.';
    70b4:	6c 86       	std	Y+12, r6	; 0x0c
		buffer[12]=rtc.Jahr/10;
    70b6:	97 89       	ldd	r25, Z+23	; 0x17
    70b8:	98 9d       	mul	r25, r8
    70ba:	81 2d       	mov	r24, r1
    70bc:	11 24       	eor	r1, r1
    70be:	86 95       	lsr	r24
    70c0:	86 95       	lsr	r24
    70c2:	86 95       	lsr	r24
    70c4:	8d 87       	std	Y+13, r24	; 0x0d
		buffer[13]=rtc.Jahr%10;
    70c6:	88 0f       	add	r24, r24
    70c8:	28 2f       	mov	r18, r24
    70ca:	22 0f       	add	r18, r18
    70cc:	22 0f       	add	r18, r18
    70ce:	82 0f       	add	r24, r18
    70d0:	98 1b       	sub	r25, r24
    70d2:	9e 87       	std	Y+14, r25	; 0x0e
    70d4:	0d 89       	ldd	r16, Y+21	; 0x15
    70d6:	1e 89       	ldd	r17, Y+22	; 0x16
    70d8:	2f 2c       	mov	r2, r15
    70da:	33 24       	eor	r3, r3
    70dc:	33 94       	inc	r3
    70de:	05 c0       	rjmp	.+10     	; 0x70ea <_Z13uhreinstellenv+0x190>
    70e0:	33 94       	inc	r3
    70e2:	0f 5f       	subi	r16, 0xFF	; 255
    70e4:	1f 4f       	sbci	r17, 0xFF	; 255
    70e6:	f0 e1       	ldi	r31, 0x10	; 16
    70e8:	2f 0e       	add	r2, r31
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
			if(i!=2){
    70ea:	83 e0       	ldi	r24, 0x03	; 3
    70ec:	38 16       	cp	r3, r24
    70ee:	61 f0       	breq	.+24     	; 0x7108 <_Z13uhreinstellenv+0x1ae>
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
    70f0:	20 e1       	ldi	r18, 0x10	; 16
    70f2:	42 2d       	mov	r20, r2
    70f4:	f8 01       	movw	r30, r16
    70f6:	60 81       	ld	r22, Z
    70f8:	8b e3       	ldi	r24, 0x3B	; 59
    70fa:	9a e0       	ldi	r25, 0x0A	; 10
    70fc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    7100:	f4 e0       	ldi	r31, 0x04	; 4
    7102:	f3 15       	cp	r31, r3
    7104:	68 f7       	brcc	.-38     	; 0x70e0 <_Z13uhreinstellenv+0x186>
    7106:	08 c0       	rjmp	.+16     	; 0x7118 <_Z13uhreinstellenv+0x1be>
			if(i!=2){
				oled.draw_number16x16(buffer[i],i*numbersmalsize,2*charhighte);
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
    7108:	24 e1       	ldi	r18, 0x14	; 20
    710a:	48 e2       	ldi	r20, 0x28	; 40
    710c:	6b 81       	ldd	r22, Y+3	; 0x03
    710e:	8b e3       	ldi	r24, 0x3B	; 59
    7110:	9a e0       	ldi	r25, 0x0A	; 10
    7112:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    7116:	e4 cf       	rjmp	.-56     	; 0x70e0 <_Z13uhreinstellenv+0x186>
    7118:	8e 01       	movw	r16, r28
    711a:	09 5f       	subi	r16, 0xF9	; 249
    711c:	1f 4f       	sbci	r17, 0xFF	; 255
		buffer[10]=rtc.Monat%10;
		buffer[11]='.';
		buffer[12]=rtc.Jahr/10;
		buffer[13]=rtc.Jahr%10;
		buffersize=14;
		for(uint8_t i = 0; i<5;i++){
    711e:	2f 2c       	mov	r2, r15
    7120:	0f 2e       	mov	r0, r31
    7122:	f6 e0       	ldi	r31, 0x06	; 6
    7124:	3f 2e       	mov	r3, r31
    7126:	f0 2d       	mov	r31, r0
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
			if(i!=8 && i!=11){
    7128:	88 e0       	ldi	r24, 0x08	; 8
    712a:	38 16       	cp	r3, r24
    712c:	61 f0       	breq	.+24     	; 0x7146 <_Z13uhreinstellenv+0x1ec>
    712e:	9b e0       	ldi	r25, 0x0B	; 11
    7130:	39 16       	cp	r3, r25
    7132:	49 f0       	breq	.+18     	; 0x7146 <_Z13uhreinstellenv+0x1ec>
				oled.draw_number16x16(buffer[i],i*numbersmalsize-6*numbersmalsize,4*charhighte);
    7134:	2e 2d       	mov	r18, r14
    7136:	42 2d       	mov	r20, r2
    7138:	f8 01       	movw	r30, r16
    713a:	60 81       	ld	r22, Z
    713c:	8b e3       	ldi	r24, 0x3B	; 59
    713e:	9a e0       	ldi	r25, 0x0A	; 10
    7140:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_ZN7Display16draw_number16x16Ehhh>
    7144:	09 c0       	rjmp	.+18     	; 0x7158 <_Z13uhreinstellenv+0x1fe>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
    7146:	28 e2       	ldi	r18, 0x28	; 40
    7148:	48 e0       	ldi	r20, 0x08	; 8
    714a:	42 0d       	add	r20, r2
    714c:	f8 01       	movw	r30, r16
    714e:	60 81       	ld	r22, Z
    7150:	8b e3       	ldi	r24, 0x3B	; 59
    7152:	9a e0       	ldi	r25, 0x0A	; 10
    7154:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
			}
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2,2*charhighte+charhighte/2);
			}
		}
		for(uint8_t i = 6; i<buffersize;i++){
    7158:	33 94       	inc	r3
    715a:	0f 5f       	subi	r16, 0xFF	; 255
    715c:	1f 4f       	sbci	r17, 0xFF	; 255
    715e:	f0 e1       	ldi	r31, 0x10	; 16
    7160:	2f 0e       	add	r2, r31
    7162:	8e e0       	ldi	r24, 0x0E	; 14
    7164:	38 12       	cpse	r3, r24
    7166:	e0 cf       	rjmp	.-64     	; 0x7128 <_Z13uhreinstellenv+0x1ce>
			else {
				oled.draw_ASCI(buffer[i],i*numbersmalsize+numbersmalsize/2-6*numbersmalsize,5*charhighte);
			}
		}

		oled.sendFrame();
    7168:	8b e3       	ldi	r24, 0x3B	; 59
    716a:	9a e0       	ldi	r25, 0x0A	; 10
    716c:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
		oled.clearFrame();
    7170:	8b e3       	ldi	r24, 0x3B	; 59
    7172:	9a e0       	ldi	r25, 0x0A	; 10
    7174:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
		switch (pos) {
    7178:	89 2d       	mov	r24, r9
    717a:	90 e0       	ldi	r25, 0x00	; 0
    717c:	8a 30       	cpi	r24, 0x0A	; 10
    717e:	91 05       	cpc	r25, r1
    7180:	08 f0       	brcs	.+2      	; 0x7184 <_Z13uhreinstellenv+0x22a>
    7182:	2c c2       	rjmp	.+1112   	; 0x75dc <_Z13uhreinstellenv+0x682>
    7184:	fc 01       	movw	r30, r24
    7186:	ef 50       	subi	r30, 0x0F	; 15
    7188:	ff 4f       	sbci	r31, 0xFF	; 255
    718a:	0c 94 38 47 	jmp	0x8e70	; 0x8e70 <__tablejump2__>
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    718e:	8f e2       	ldi	r24, 0x2F	; 47
    7190:	9a e0       	ldi	r25, 0x0A	; 10
    7192:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    7196:	88 0f       	add	r24, r24
    7198:	98 2f       	mov	r25, r24
    719a:	99 0f       	add	r25, r25
    719c:	99 0f       	add	r25, r25
    719e:	89 0f       	add	r24, r25
			if(rtc.Stunden>=24){
    71a0:	88 31       	cpi	r24, 0x18	; 24
    71a2:	08 f4       	brcc	.+2      	; 0x71a6 <_Z13uhreinstellenv+0x24c>
    71a4:	57 c2       	rjmp	.+1198   	; 0x7654 <_Z13uhreinstellenv+0x6fa>
				rtc.Stunden=0;
    71a6:	f6 01       	movw	r30, r12
    71a8:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    71aa:	e5 e3       	ldi	r30, 0x35	; 53
    71ac:	f3 e0       	ldi	r31, 0x03	; 3
    71ae:	d2 01       	movw	r26, r4
    71b0:	87 2d       	mov	r24, r7
    71b2:	01 90       	ld	r0, Z+
    71b4:	0d 92       	st	X+, r0
    71b6:	8a 95       	dec	r24
    71b8:	e1 f7       	brne	.-8      	; 0x71b2 <_Z13uhreinstellenv+0x258>
    71ba:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    71bc:	f5 01       	movw	r30, r10
    71be:	61 91       	ld	r22, Z+
    71c0:	5f 01       	movw	r10, r30
    71c2:	28 e3       	ldi	r18, 0x38	; 56
    71c4:	41 2f       	mov	r20, r17
    71c6:	8b e3       	ldi	r24, 0x3B	; 59
    71c8:	9a e0       	ldi	r25, 0x0A	; 10
    71ca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    71ce:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    71d0:	14 35       	cpi	r17, 0x54	; 84
    71d2:	a1 f7       	brne	.-24     	; 0x71bc <_Z13uhreinstellenv+0x262>
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    71d4:	99 24       	eor	r9, r9
    71d6:	9a 94       	dec	r9
    71d8:	3f c2       	rjmp	.+1150   	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    71da:	8f e2       	ldi	r24, 0x2F	; 47
    71dc:	9a e0       	ldi	r25, 0x0A	; 10
    71de:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    71e2:	f6 01       	movw	r30, r12
    71e4:	20 89       	ldd	r18, Z+16	; 0x10
    71e6:	90 e0       	ldi	r25, 0x00	; 0
    71e8:	82 0f       	add	r24, r18
    71ea:	91 1d       	adc	r25, r1
			if(rtc.Stunden>=24){
    71ec:	88 31       	cpi	r24, 0x18	; 24
    71ee:	10 f4       	brcc	.+4      	; 0x71f4 <_Z13uhreinstellenv+0x29a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
    71f0:	80 8b       	std	Z+16, r24	; 0x10
    71f2:	32 c2       	rjmp	.+1124   	; 0x7658 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
    71f4:	f6 01       	movw	r30, r12
    71f6:	10 8a       	std	Z+16, r1	; 0x10
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
    71f8:	e5 e3       	ldi	r30, 0x35	; 53
    71fa:	f3 e0       	ldi	r31, 0x03	; 3
    71fc:	d2 01       	movw	r26, r4
    71fe:	87 2d       	mov	r24, r7
    7200:	01 90       	ld	r0, Z+
    7202:	0d 92       	st	X+, r0
    7204:	8a 95       	dec	r24
    7206:	e1 f7       	brne	.-8      	; 0x7200 <_Z13uhreinstellenv+0x2a6>
    7208:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    720a:	f5 01       	movw	r30, r10
    720c:	61 91       	ld	r22, Z+
    720e:	5f 01       	movw	r10, r30
    7210:	28 e3       	ldi	r18, 0x38	; 56
    7212:	41 2f       	mov	r20, r17
    7214:	8b e3       	ldi	r24, 0x3B	; 59
    7216:	9a e0       	ldi	r25, 0x0A	; 10
    7218:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    721c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
				buffersize=sprintf(buffer,"Stunden falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    721e:	14 35       	cpi	r17, 0x54	; 84
    7220:	a1 f7       	brne	.-24     	; 0x720a <_Z13uhreinstellenv+0x2b0>
			break;
			case 1:
			rtc.Stunden+=Tastatur.ZahlenausTastatur();
			if(rtc.Stunden>=24){
				rtc.Stunden=0;
				pos=-1;
    7222:	99 24       	eor	r9, r9
    7224:	9a 94       	dec	r9
    7226:	18 c2       	rjmp	.+1072   	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    7228:	8f e2       	ldi	r24, 0x2F	; 47
    722a:	9a e0       	ldi	r25, 0x0A	; 10
    722c:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    7230:	88 0f       	add	r24, r24
    7232:	98 2f       	mov	r25, r24
    7234:	99 0f       	add	r25, r25
    7236:	99 0f       	add	r25, r25
    7238:	89 0f       	add	r24, r25
			if(rtc.Minuten>=60){
    723a:	8c 33       	cpi	r24, 0x3C	; 60
    723c:	18 f4       	brcc	.+6      	; 0x7244 <_Z13uhreinstellenv+0x2ea>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
    723e:	f6 01       	movw	r30, r12
    7240:	81 8b       	std	Z+17, r24	; 0x11
    7242:	0a c2       	rjmp	.+1044   	; 0x7658 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    7244:	f6 01       	movw	r30, r12
    7246:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7248:	e4 e4       	ldi	r30, 0x44	; 68
    724a:	f3 e0       	ldi	r31, 0x03	; 3
    724c:	d2 01       	movw	r26, r4
    724e:	87 2d       	mov	r24, r7
    7250:	01 90       	ld	r0, Z+
    7252:	0d 92       	st	X+, r0
    7254:	8a 95       	dec	r24
    7256:	e1 f7       	brne	.-8      	; 0x7250 <_Z13uhreinstellenv+0x2f6>
    7258:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    725a:	f5 01       	movw	r30, r10
    725c:	61 91       	ld	r22, Z+
    725e:	5f 01       	movw	r10, r30
    7260:	28 e3       	ldi	r18, 0x38	; 56
    7262:	41 2f       	mov	r20, r17
    7264:	8b e3       	ldi	r24, 0x3B	; 59
    7266:	9a e0       	ldi	r25, 0x0A	; 10
    7268:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    726c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    726e:	14 35       	cpi	r17, 0x54	; 84
    7270:	a1 f7       	brne	.-24     	; 0x725a <_Z13uhreinstellenv+0x300>
			break;
			case 2:
			rtc.Minuten=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    7272:	99 24       	eor	r9, r9
    7274:	93 94       	inc	r9
    7276:	f0 c1       	rjmp	.+992    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    7278:	8f e2       	ldi	r24, 0x2F	; 47
    727a:	9a e0       	ldi	r25, 0x0A	; 10
    727c:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    7280:	f6 01       	movw	r30, r12
    7282:	21 89       	ldd	r18, Z+17	; 0x11
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	82 0f       	add	r24, r18
    7288:	91 1d       	adc	r25, r1
			if(rtc.Minuten>=60){
    728a:	8c 33       	cpi	r24, 0x3C	; 60
    728c:	10 f4       	brcc	.+4      	; 0x7292 <_Z13uhreinstellenv+0x338>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
    728e:	81 8b       	std	Z+17, r24	; 0x11
    7290:	e3 c1       	rjmp	.+966    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
    7292:	f6 01       	movw	r30, r12
    7294:	11 8a       	std	Z+17, r1	; 0x11
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
    7296:	e4 e4       	ldi	r30, 0x44	; 68
    7298:	f3 e0       	ldi	r31, 0x03	; 3
    729a:	d2 01       	movw	r26, r4
    729c:	87 2d       	mov	r24, r7
    729e:	01 90       	ld	r0, Z+
    72a0:	0d 92       	st	X+, r0
    72a2:	8a 95       	dec	r24
    72a4:	e1 f7       	brne	.-8      	; 0x729e <_Z13uhreinstellenv+0x344>
    72a6:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    72a8:	f5 01       	movw	r30, r10
    72aa:	61 91       	ld	r22, Z+
    72ac:	5f 01       	movw	r10, r30
    72ae:	28 e3       	ldi	r18, 0x38	; 56
    72b0:	41 2f       	mov	r20, r17
    72b2:	8b e3       	ldi	r24, 0x3B	; 59
    72b4:	9a e0       	ldi	r25, 0x0A	; 10
    72b6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    72ba:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
				buffersize=sprintf(buffer,"Minuten falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    72bc:	14 35       	cpi	r17, 0x54	; 84
    72be:	a1 f7       	brne	.-24     	; 0x72a8 <_Z13uhreinstellenv+0x34e>
			break;
			case 3:
			rtc.Minuten+=Tastatur.ZahlenausTastatur();
			if(rtc.Minuten>=60){
				rtc.Minuten=0;
				pos=1;
    72c0:	99 24       	eor	r9, r9
    72c2:	93 94       	inc	r9
    72c4:	c9 c1       	rjmp	.+914    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    72c6:	8f e2       	ldi	r24, 0x2F	; 47
    72c8:	9a e0       	ldi	r25, 0x0A	; 10
    72ca:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    72ce:	88 0f       	add	r24, r24
    72d0:	98 2f       	mov	r25, r24
    72d2:	99 0f       	add	r25, r25
    72d4:	99 0f       	add	r25, r25
    72d6:	89 0f       	add	r24, r25
			if(rtc.Tag>=32){
    72d8:	80 32       	cpi	r24, 0x20	; 32
    72da:	18 f4       	brcc	.+6      	; 0x72e2 <_Z13uhreinstellenv+0x388>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
    72dc:	f6 01       	movw	r30, r12
    72de:	84 8b       	std	Z+20, r24	; 0x14
    72e0:	bb c1       	rjmp	.+886    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    72e2:	f6 01       	movw	r30, r12
    72e4:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    72e6:	8b e0       	ldi	r24, 0x0B	; 11
    72e8:	e3 e5       	ldi	r30, 0x53	; 83
    72ea:	f3 e0       	ldi	r31, 0x03	; 3
    72ec:	d2 01       	movw	r26, r4
    72ee:	01 90       	ld	r0, Z+
    72f0:	0d 92       	st	X+, r0
    72f2:	8a 95       	dec	r24
    72f4:	e1 f7       	brne	.-8      	; 0x72ee <_Z13uhreinstellenv+0x394>
    72f6:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    72f8:	f5 01       	movw	r30, r10
    72fa:	61 91       	ld	r22, Z+
    72fc:	5f 01       	movw	r10, r30
    72fe:	28 e3       	ldi	r18, 0x38	; 56
    7300:	41 2f       	mov	r20, r17
    7302:	8b e3       	ldi	r24, 0x3B	; 59
    7304:	9a e0       	ldi	r25, 0x0A	; 10
    7306:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    730a:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    730c:	1c 33       	cpi	r17, 0x3C	; 60
    730e:	a1 f7       	brne	.-24     	; 0x72f8 <_Z13uhreinstellenv+0x39e>
			break;
			case 4:
			rtc.Tag=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    7310:	0f 2e       	mov	r0, r31
    7312:	f3 e0       	ldi	r31, 0x03	; 3
    7314:	9f 2e       	mov	r9, r31
    7316:	f0 2d       	mov	r31, r0
    7318:	9f c1       	rjmp	.+830    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    731a:	8f e2       	ldi	r24, 0x2F	; 47
    731c:	9a e0       	ldi	r25, 0x0A	; 10
    731e:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    7322:	f6 01       	movw	r30, r12
    7324:	24 89       	ldd	r18, Z+20	; 0x14
    7326:	90 e0       	ldi	r25, 0x00	; 0
    7328:	82 0f       	add	r24, r18
    732a:	91 1d       	adc	r25, r1
			if(rtc.Tag>=32){
    732c:	80 32       	cpi	r24, 0x20	; 32
    732e:	10 f4       	brcc	.+4      	; 0x7334 <_Z13uhreinstellenv+0x3da>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
    7330:	84 8b       	std	Z+20, r24	; 0x14
    7332:	92 c1       	rjmp	.+804    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Tag>=32){
				rtc.Tag=0;
    7334:	f6 01       	movw	r30, r12
    7336:	14 8a       	std	Z+20, r1	; 0x14
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
    7338:	8b e0       	ldi	r24, 0x0B	; 11
    733a:	e3 e5       	ldi	r30, 0x53	; 83
    733c:	f3 e0       	ldi	r31, 0x03	; 3
    733e:	d2 01       	movw	r26, r4
    7340:	01 90       	ld	r0, Z+
    7342:	0d 92       	st	X+, r0
    7344:	8a 95       	dec	r24
    7346:	e1 f7       	brne	.-8      	; 0x7340 <_Z13uhreinstellenv+0x3e6>
    7348:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    734a:	f5 01       	movw	r30, r10
    734c:	61 91       	ld	r22, Z+
    734e:	5f 01       	movw	r10, r30
    7350:	28 e3       	ldi	r18, 0x38	; 56
    7352:	41 2f       	mov	r20, r17
    7354:	8b e3       	ldi	r24, 0x3B	; 59
    7356:	9a e0       	ldi	r25, 0x0A	; 10
    7358:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    735c:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
				buffersize=sprintf(buffer,"Tag falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    735e:	1c 33       	cpi	r17, 0x3C	; 60
    7360:	a1 f7       	brne	.-24     	; 0x734a <_Z13uhreinstellenv+0x3f0>
			break;
			case 5:
			rtc.Tag+=Tastatur.ZahlenausTastatur();
			if(rtc.Tag>=32){
				rtc.Tag=0;
				pos=3;
    7362:	0f 2e       	mov	r0, r31
    7364:	f3 e0       	ldi	r31, 0x03	; 3
    7366:	9f 2e       	mov	r9, r31
    7368:	f0 2d       	mov	r31, r0
    736a:	76 c1       	rjmp	.+748    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    736c:	8f e2       	ldi	r24, 0x2F	; 47
    736e:	9a e0       	ldi	r25, 0x0A	; 10
    7370:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    7374:	88 0f       	add	r24, r24
    7376:	98 2f       	mov	r25, r24
    7378:	99 0f       	add	r25, r25
    737a:	99 0f       	add	r25, r25
    737c:	89 0f       	add	r24, r25
			if(rtc.Monat>=13){
    737e:	8d 30       	cpi	r24, 0x0D	; 13
    7380:	18 f4       	brcc	.+6      	; 0x7388 <_Z13uhreinstellenv+0x42e>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
    7382:	f6 01       	movw	r30, r12
    7384:	86 8b       	std	Z+22, r24	; 0x16
    7386:	68 c1       	rjmp	.+720    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    7388:	f6 01       	movw	r30, r12
    738a:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    738c:	8d e0       	ldi	r24, 0x0D	; 13
    738e:	ee e5       	ldi	r30, 0x5E	; 94
    7390:	f3 e0       	ldi	r31, 0x03	; 3
    7392:	d2 01       	movw	r26, r4
    7394:	01 90       	ld	r0, Z+
    7396:	0d 92       	st	X+, r0
    7398:	8a 95       	dec	r24
    739a:	e1 f7       	brne	.-8      	; 0x7394 <_Z13uhreinstellenv+0x43a>
    739c:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    739e:	f5 01       	movw	r30, r10
    73a0:	61 91       	ld	r22, Z+
    73a2:	5f 01       	movw	r10, r30
    73a4:	28 e3       	ldi	r18, 0x38	; 56
    73a6:	41 2f       	mov	r20, r17
    73a8:	8b e3       	ldi	r24, 0x3B	; 59
    73aa:	9a e0       	ldi	r25, 0x0A	; 10
    73ac:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    73b0:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    73b2:	18 34       	cpi	r17, 0x48	; 72
    73b4:	a1 f7       	brne	.-24     	; 0x739e <_Z13uhreinstellenv+0x444>
			break;
			case 6:
			rtc.Monat=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    73b6:	0f 2e       	mov	r0, r31
    73b8:	f5 e0       	ldi	r31, 0x05	; 5
    73ba:	9f 2e       	mov	r9, r31
    73bc:	f0 2d       	mov	r31, r0
    73be:	4c c1       	rjmp	.+664    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    73c0:	8f e2       	ldi	r24, 0x2F	; 47
    73c2:	9a e0       	ldi	r25, 0x0A	; 10
    73c4:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    73c8:	f6 01       	movw	r30, r12
    73ca:	26 89       	ldd	r18, Z+22	; 0x16
    73cc:	90 e0       	ldi	r25, 0x00	; 0
    73ce:	82 0f       	add	r24, r18
    73d0:	91 1d       	adc	r25, r1
			if(rtc.Monat>=13){
    73d2:	8d 30       	cpi	r24, 0x0D	; 13
    73d4:	10 f4       	brcc	.+4      	; 0x73da <_Z13uhreinstellenv+0x480>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
    73d6:	86 8b       	std	Z+22, r24	; 0x16
    73d8:	1d c0       	rjmp	.+58     	; 0x7414 <_Z13uhreinstellenv+0x4ba>
			if(rtc.Monat>=13){
				rtc.Monat=0;
    73da:	f6 01       	movw	r30, r12
    73dc:	16 8a       	std	Z+22, r1	; 0x16
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
    73de:	8d e0       	ldi	r24, 0x0D	; 13
    73e0:	ee e5       	ldi	r30, 0x5E	; 94
    73e2:	f3 e0       	ldi	r31, 0x03	; 3
    73e4:	d2 01       	movw	r26, r4
    73e6:	01 90       	ld	r0, Z+
    73e8:	0d 92       	st	X+, r0
    73ea:	8a 95       	dec	r24
    73ec:	e1 f7       	brne	.-8      	; 0x73e6 <_Z13uhreinstellenv+0x48c>
    73ee:	2d 88       	ldd	r2, Y+21	; 0x15
    73f0:	3e 88       	ldd	r3, Y+22	; 0x16
    73f2:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    73f4:	f1 01       	movw	r30, r2
    73f6:	61 91       	ld	r22, Z+
    73f8:	1f 01       	movw	r2, r30
    73fa:	28 e3       	ldi	r18, 0x38	; 56
    73fc:	41 2f       	mov	r20, r17
    73fe:	8b e3       	ldi	r24, 0x3B	; 59
    7400:	9a e0       	ldi	r25, 0x0A	; 10
    7402:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    7406:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7408:	18 34       	cpi	r17, 0x48	; 72
    740a:	a1 f7       	brne	.-24     	; 0x73f4 <_Z13uhreinstellenv+0x49a>
			break;
			case 7:
			rtc.Monat+=Tastatur.ZahlenausTastatur();
			if(rtc.Monat>=13){
				rtc.Monat=0;
				pos=5;
    740c:	0f 2e       	mov	r0, r31
    740e:	f5 e0       	ldi	r31, 0x05	; 5
    7410:	9f 2e       	mov	r9, r31
    7412:	f0 2d       	mov	r31, r0
				buffersize=sprintf(buffer,"Monat falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
    7414:	f6 01       	movw	r30, r12
    7416:	96 89       	ldd	r25, Z+22	; 0x16
    7418:	89 2f       	mov	r24, r25
    741a:	8d 7f       	andi	r24, 0xFD	; 253
    741c:	84 30       	cpi	r24, 0x04	; 4
    741e:	11 f0       	breq	.+4      	; 0x7424 <_Z13uhreinstellenv+0x4ca>
    7420:	89 30       	cpi	r24, 0x09	; 9
    7422:	09 f5       	brne	.+66     	; 0x7466 <_Z13uhreinstellenv+0x50c>
				if(rtc.Tag>=31){
    7424:	f6 01       	movw	r30, r12
    7426:	84 89       	ldd	r24, Z+20	; 0x14
    7428:	8f 31       	cpi	r24, 0x1F	; 31
    742a:	08 f4       	brcc	.+2      	; 0x742e <_Z13uhreinstellenv+0x4d4>
    742c:	d8 c0       	rjmp	.+432    	; 0x75de <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    742e:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7430:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    7432:	8b e0       	ldi	r24, 0x0B	; 11
    7434:	e3 e5       	ldi	r30, 0x53	; 83
    7436:	f3 e0       	ldi	r31, 0x03	; 3
    7438:	d2 01       	movw	r26, r4
    743a:	01 90       	ld	r0, Z+
    743c:	0d 92       	st	X+, r0
    743e:	8a 95       	dec	r24
    7440:	e1 f7       	brne	.-8      	; 0x743a <_Z13uhreinstellenv+0x4e0>
    7442:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7444:	f5 01       	movw	r30, r10
    7446:	61 91       	ld	r22, Z+
    7448:	5f 01       	movw	r10, r30
    744a:	28 e3       	ldi	r18, 0x38	; 56
    744c:	41 2f       	mov	r20, r17
    744e:	8b e3       	ldi	r24, 0x3B	; 59
    7450:	9a e0       	ldi	r25, 0x0A	; 10
    7452:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    7456:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    7458:	1c 33       	cpi	r17, 0x3C	; 60
    745a:	a1 f7       	brne	.-24     	; 0x7444 <_Z13uhreinstellenv+0x4ea>
			}
			if(rtc.Monat==4||rtc.Monat==6||rtc.Monat==9||rtc.Monat==11){
				if(rtc.Tag>=31){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    745c:	0f 2e       	mov	r0, r31
    745e:	f3 e0       	ldi	r31, 0x03	; 3
    7460:	9f 2e       	mov	r9, r31
    7462:	f0 2d       	mov	r31, r0
    7464:	f9 c0       	rjmp	.+498    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
					}
				}
			}
			else if(rtc.Monat==2){
    7466:	92 30       	cpi	r25, 0x02	; 2
    7468:	09 f0       	breq	.+2      	; 0x746c <_Z13uhreinstellenv+0x512>
    746a:	b9 c0       	rjmp	.+370    	; 0x75de <_Z13uhreinstellenv+0x684>
				if(rtc.Tag>=30){
    746c:	f6 01       	movw	r30, r12
    746e:	84 89       	ldd	r24, Z+20	; 0x14
    7470:	8e 31       	cpi	r24, 0x1E	; 30
    7472:	08 f4       	brcc	.+2      	; 0x7476 <_Z13uhreinstellenv+0x51c>
    7474:	b4 c0       	rjmp	.+360    	; 0x75de <_Z13uhreinstellenv+0x684>
					rtc.Tag=0;
    7476:	14 8a       	std	Z+20, r1	; 0x14
					rtc.Monat=0;
    7478:	16 8a       	std	Z+22, r1	; 0x16
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
    747a:	8b e0       	ldi	r24, 0x0B	; 11
    747c:	e3 e5       	ldi	r30, 0x53	; 83
    747e:	f3 e0       	ldi	r31, 0x03	; 3
    7480:	d2 01       	movw	r26, r4
    7482:	01 90       	ld	r0, Z+
    7484:	0d 92       	st	X+, r0
    7486:	8a 95       	dec	r24
    7488:	e1 f7       	brne	.-8      	; 0x7482 <_Z13uhreinstellenv+0x528>
    748a:	1f 2d       	mov	r17, r15
					for(uint8_t i = 0; i<buffersize;i++){
						oled.draw_ASCI(buffer[i],charsize*i,7*8);
    748c:	f5 01       	movw	r30, r10
    748e:	61 91       	ld	r22, Z+
    7490:	5f 01       	movw	r10, r30
    7492:	28 e3       	ldi	r18, 0x38	; 56
    7494:	41 2f       	mov	r20, r17
    7496:	8b e3       	ldi	r24, 0x3B	; 59
    7498:	9a e0       	ldi	r25, 0x0A	; 10
    749a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    749e:	1a 5f       	subi	r17, 0xFA	; 250
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
					buffersize=sprintf(buffer,"Tag falsch");
					for(uint8_t i = 0; i<buffersize;i++){
    74a0:	1c 33       	cpi	r17, 0x3C	; 60
    74a2:	a1 f7       	brne	.-24     	; 0x748c <_Z13uhreinstellenv+0x532>
			}
			else if(rtc.Monat==2){
				if(rtc.Tag>=30){
					rtc.Tag=0;
					rtc.Monat=0;
					pos=3;
    74a4:	0f 2e       	mov	r0, r31
    74a6:	f3 e0       	ldi	r31, 0x03	; 3
    74a8:	9f 2e       	mov	r9, r31
    74aa:	f0 2d       	mov	r31, r0
    74ac:	d5 c0       	rjmp	.+426    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    74ae:	8f e2       	ldi	r24, 0x2F	; 47
    74b0:	9a e0       	ldi	r25, 0x0A	; 10
    74b2:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    74b6:	88 0f       	add	r24, r24
    74b8:	98 2f       	mov	r25, r24
    74ba:	99 0f       	add	r25, r25
    74bc:	99 0f       	add	r25, r25
    74be:	89 0f       	add	r24, r25
			if(rtc.Jahr>=50){
    74c0:	82 33       	cpi	r24, 0x32	; 50
    74c2:	18 f4       	brcc	.+6      	; 0x74ca <_Z13uhreinstellenv+0x570>
					}
				}
			}
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
    74c4:	f6 01       	movw	r30, r12
    74c6:	87 8b       	std	Z+23, r24	; 0x17
    74c8:	c7 c0       	rjmp	.+398    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
    74ca:	f6 01       	movw	r30, r12
    74cc:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    74ce:	8c e0       	ldi	r24, 0x0C	; 12
    74d0:	eb e6       	ldi	r30, 0x6B	; 107
    74d2:	f3 e0       	ldi	r31, 0x03	; 3
    74d4:	d2 01       	movw	r26, r4
    74d6:	01 90       	ld	r0, Z+
    74d8:	0d 92       	st	X+, r0
    74da:	8a 95       	dec	r24
    74dc:	e1 f7       	brne	.-8      	; 0x74d6 <_Z13uhreinstellenv+0x57c>
    74de:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    74e0:	f5 01       	movw	r30, r10
    74e2:	61 91       	ld	r22, Z+
    74e4:	5f 01       	movw	r10, r30
    74e6:	28 e3       	ldi	r18, 0x38	; 56
    74e8:	41 2f       	mov	r20, r17
    74ea:	8b e3       	ldi	r24, 0x3B	; 59
    74ec:	9a e0       	ldi	r25, 0x0A	; 10
    74ee:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    74f2:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    74f4:	12 34       	cpi	r17, 0x42	; 66
    74f6:	a1 f7       	brne	.-24     	; 0x74e0 <_Z13uhreinstellenv+0x586>
			break;
			case 8:
			rtc.Jahr=Tastatur.ZahlenausTastatur()*10;
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    74f8:	0f 2e       	mov	r0, r31
    74fa:	f7 e0       	ldi	r31, 0x07	; 7
    74fc:	9f 2e       	mov	r9, r31
    74fe:	f0 2d       	mov	r31, r0
    7500:	ab c0       	rjmp	.+342    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    7502:	8f e2       	ldi	r24, 0x2F	; 47
    7504:	9a e0       	ldi	r25, 0x0A	; 10
    7506:	0e 94 86 24 	call	0x490c	; 0x490c <_ZN9Interface17ZahlenausTastaturEv>
    750a:	f6 01       	movw	r30, r12
    750c:	27 89       	ldd	r18, Z+23	; 0x17
    750e:	90 e0       	ldi	r25, 0x00	; 0
    7510:	82 0f       	add	r24, r18
    7512:	91 1d       	adc	r25, r1
			if(rtc.Jahr>=50){
    7514:	82 33       	cpi	r24, 0x32	; 50
    7516:	08 f4       	brcc	.+2      	; 0x751a <_Z13uhreinstellenv+0x5c0>
    7518:	96 c0       	rjmp	.+300    	; 0x7646 <_Z13uhreinstellenv+0x6ec>
				rtc.Jahr=0;
    751a:	17 8a       	std	Z+23, r1	; 0x17
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
    751c:	8c e0       	ldi	r24, 0x0C	; 12
    751e:	eb e6       	ldi	r30, 0x6B	; 107
    7520:	f3 e0       	ldi	r31, 0x03	; 3
    7522:	d2 01       	movw	r26, r4
    7524:	01 90       	ld	r0, Z+
    7526:	0d 92       	st	X+, r0
    7528:	8a 95       	dec	r24
    752a:	e1 f7       	brne	.-8      	; 0x7524 <_Z13uhreinstellenv+0x5ca>
    752c:	2d 88       	ldd	r2, Y+21	; 0x15
    752e:	3e 88       	ldd	r3, Y+22	; 0x16
    7530:	1f 2d       	mov	r17, r15
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7532:	f1 01       	movw	r30, r2
    7534:	61 91       	ld	r22, Z+
    7536:	1f 01       	movw	r2, r30
    7538:	28 e3       	ldi	r18, 0x38	; 56
    753a:	41 2f       	mov	r20, r17
    753c:	8b e3       	ldi	r24, 0x3B	; 59
    753e:	9a e0       	ldi	r25, 0x0A	; 10
    7540:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    7544:	1a 5f       	subi	r17, 0xFA	; 250
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
    7546:	12 34       	cpi	r17, 0x42	; 66
    7548:	a1 f7       	brne	.-24     	; 0x7532 <_Z13uhreinstellenv+0x5d8>
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
			if(rtc.Jahr>=50){
				rtc.Jahr=0;
				pos=7;
    754a:	0f 2e       	mov	r0, r31
    754c:	f7 e0       	ldi	r31, 0x07	; 7
    754e:	9f 2e       	mov	r9, r31
    7550:	f0 2d       	mov	r31, r0
    7552:	7b c0       	rjmp	.+246    	; 0x764a <_Z13uhreinstellenv+0x6f0>
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
				if(rtc.Jahr%4==0){
    7554:	f6 01       	movw	r30, r12
    7556:	17 89       	ldd	r17, Z+23	; 0x17
    7558:	13 70       	andi	r17, 0x03	; 3
    755a:	f9 f4       	brne	.+62     	; 0x759a <_Z13uhreinstellenv+0x640>
					if (rtc.Tag>=30)
    755c:	84 89       	ldd	r24, Z+20	; 0x14
    755e:	8e 31       	cpi	r24, 0x1E	; 30
    7560:	f0 f1       	brcs	.+124    	; 0x75de <_Z13uhreinstellenv+0x684>
					{
						rtc.Tag=0;
    7562:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    7564:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    7566:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    7568:	8b e0       	ldi	r24, 0x0B	; 11
    756a:	e3 e5       	ldi	r30, 0x53	; 83
    756c:	f3 e0       	ldi	r31, 0x03	; 3
    756e:	d2 01       	movw	r26, r4
    7570:	01 90       	ld	r0, Z+
    7572:	0d 92       	st	X+, r0
    7574:	8a 95       	dec	r24
    7576:	e1 f7       	brne	.-8      	; 0x7570 <_Z13uhreinstellenv+0x616>
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    7578:	f5 01       	movw	r30, r10
    757a:	61 91       	ld	r22, Z+
    757c:	5f 01       	movw	r10, r30
    757e:	28 e3       	ldi	r18, 0x38	; 56
    7580:	41 2f       	mov	r20, r17
    7582:	8b e3       	ldi	r24, 0x3B	; 59
    7584:	9a e0       	ldi	r25, 0x0A	; 10
    7586:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    758a:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    758c:	1c 33       	cpi	r17, 0x3C	; 60
    758e:	a1 f7       	brne	.-24     	; 0x7578 <_Z13uhreinstellenv+0x61e>
					if (rtc.Tag>=30)
					{
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    7590:	0f 2e       	mov	r0, r31
    7592:	f3 e0       	ldi	r31, 0x03	; 3
    7594:	9f 2e       	mov	r9, r31
    7596:	f0 2d       	mov	r31, r0
    7598:	5f c0       	rjmp	.+190    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
						}
					}
				}
				else{
					if(rtc.Tag>=29){
    759a:	f6 01       	movw	r30, r12
    759c:	84 89       	ldd	r24, Z+20	; 0x14
    759e:	8d 31       	cpi	r24, 0x1D	; 29
    75a0:	f0 f0       	brcs	.+60     	; 0x75de <_Z13uhreinstellenv+0x684>
						rtc.Tag=0;
    75a2:	14 8a       	std	Z+20, r1	; 0x14
						rtc.Monat=0;
    75a4:	16 8a       	std	Z+22, r1	; 0x16
						rtc.Jahr=0;
    75a6:	17 8a       	std	Z+23, r1	; 0x17
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
    75a8:	8b e0       	ldi	r24, 0x0B	; 11
    75aa:	e3 e5       	ldi	r30, 0x53	; 83
    75ac:	f3 e0       	ldi	r31, 0x03	; 3
    75ae:	d2 01       	movw	r26, r4
    75b0:	01 90       	ld	r0, Z+
    75b2:	0d 92       	st	X+, r0
    75b4:	8a 95       	dec	r24
    75b6:	e1 f7       	brne	.-8      	; 0x75b0 <_Z13uhreinstellenv+0x656>
    75b8:	1f 2d       	mov	r17, r15
						for(uint8_t i = 0; i<buffersize;i++){
							oled.draw_ASCI(buffer[i],charsize*i,7*8);
    75ba:	f5 01       	movw	r30, r10
    75bc:	61 91       	ld	r22, Z+
    75be:	5f 01       	movw	r10, r30
    75c0:	28 e3       	ldi	r18, 0x38	; 56
    75c2:	41 2f       	mov	r20, r17
    75c4:	8b e3       	ldi	r24, 0x3B	; 59
    75c6:	9a e0       	ldi	r25, 0x0A	; 10
    75c8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    75cc:	1a 5f       	subi	r17, 0xFA	; 250
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
						buffersize=sprintf(buffer,"Tag falsch");
						for(uint8_t i = 0; i<buffersize;i++){
    75ce:	1c 33       	cpi	r17, 0x3C	; 60
    75d0:	a1 f7       	brne	.-24     	; 0x75ba <_Z13uhreinstellenv+0x660>
				else{
					if(rtc.Tag>=29){
						rtc.Tag=0;
						rtc.Monat=0;
						rtc.Jahr=0;
						pos=3;
    75d2:	0f 2e       	mov	r0, r31
    75d4:	f3 e0       	ldi	r31, 0x03	; 3
    75d6:	9f 2e       	mov	r9, r31
    75d8:	f0 2d       	mov	r31, r0
    75da:	3e c0       	rjmp	.+124    	; 0x7658 <_Z13uhreinstellenv+0x6fe>
					}
				}
			}
			break;
			default:
			pos++;
    75dc:	93 94       	inc	r9
			break;
		}
		pos++;
    75de:	93 94       	inc	r9
	
	oled.clearFrame();
	char buffer[20];
	uint8_t buffersize;
	uint8_t pos=0;
	while(pos<11){
    75e0:	fa e0       	ldi	r31, 0x0A	; 10
    75e2:	f9 15       	cp	r31, r9
    75e4:	08 f0       	brcs	.+2      	; 0x75e8 <_Z13uhreinstellenv+0x68e>
    75e6:	f6 cc       	rjmp	.-1556   	; 0x6fd4 <_Z13uhreinstellenv+0x7a>
			break;
		}
		pos++;
	}
	
	rtc.Sekunden		= 0;
    75e8:	0c e3       	ldi	r16, 0x3C	; 60
    75ea:	1e e0       	ldi	r17, 0x0E	; 14
    75ec:	f8 01       	movw	r30, r16
    75ee:	12 8a       	std	Z+18, r1	; 0x12
	rtc.HundSekunden	= 0;
    75f0:	13 8a       	std	Z+19, r1	; 0x13
	//speichern der neuen Zeit im EEPROM
	EEPROM_Write(EEMINUTEN,rtc.Minuten);
    75f2:	61 89       	ldd	r22, Z+17	; 0x11
    75f4:	80 e0       	ldi	r24, 0x00	; 0
    75f6:	90 e0       	ldi	r25, 0x00	; 0
    75f8:	0e 94 91 2b 	call	0x5722	; 0x5722 <_Z12EEPROM_Writejh>
	EEPROM_Write(EESTUNDEN,rtc.Stunden);
    75fc:	f8 01       	movw	r30, r16
    75fe:	60 89       	ldd	r22, Z+16	; 0x10
    7600:	81 e0       	ldi	r24, 0x01	; 1
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	0e 94 91 2b 	call	0x5722	; 0x5722 <_Z12EEPROM_Writejh>
	EEPROM_Write(EETAGE,rtc.Tag);
    7608:	f8 01       	movw	r30, r16
    760a:	64 89       	ldd	r22, Z+20	; 0x14
    760c:	82 e0       	ldi	r24, 0x02	; 2
    760e:	90 e0       	ldi	r25, 0x00	; 0
    7610:	0e 94 91 2b 	call	0x5722	; 0x5722 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEMONAT,rtc.Monat);
    7614:	f8 01       	movw	r30, r16
    7616:	66 89       	ldd	r22, Z+22	; 0x16
    7618:	83 e0       	ldi	r24, 0x03	; 3
    761a:	90 e0       	ldi	r25, 0x00	; 0
    761c:	0e 94 91 2b 	call	0x5722	; 0x5722 <_Z12EEPROM_Writejh>
	EEPROM_Write(EEJAHR,rtc.Jahr);
    7620:	f8 01       	movw	r30, r16
    7622:	67 89       	ldd	r22, Z+23	; 0x17
    7624:	84 e0       	ldi	r24, 0x04	; 4
    7626:	90 e0       	ldi	r25, 0x00	; 0
    7628:	0e 94 91 2b 	call	0x5722	; 0x5722 <_Z12EEPROM_Writejh>
	
	oled.clearFrame();
    762c:	8b e3       	ldi	r24, 0x3B	; 59
    762e:	9a e0       	ldi	r25, 0x0A	; 10
    7630:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
	rtc.ausgabedatumneu();
    7634:	c8 01       	movw	r24, r16
    7636:	77 d3       	rcall	.+1774   	; 0x7d26 <_ZN3RTC15ausgabedatumneuEv>
	rtc.ausgabezeitneu();
    7638:	c8 01       	movw	r24, r16
    763a:	3c d3       	rcall	.+1656   	; 0x7cb4 <_ZN3RTC14ausgabezeitneuEv>
	rtc.RTCstart();
    763c:	c8 01       	movw	r24, r16
    763e:	54 d4       	rcall	.+2216   	; 0x7ee8 <_ZN3RTC8RTCstartEv>
    7640:	0d c0       	rjmp	.+26     	; 0x765c <_Z13uhreinstellenv+0x702>
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7642:	93 94       	inc	r9
    7644:	c7 cc       	rjmp	.-1650   	; 0x6fd4 <_Z13uhreinstellenv+0x7a>
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			break;
			case 9:
			rtc.Jahr+=Tastatur.ZahlenausTastatur();
    7646:	f6 01       	movw	r30, r12
    7648:	87 8b       	std	Z+23, r24	; 0x17
				buffersize=sprintf(buffer,"Jahr falsch");
				for(uint8_t i = 0; i<buffersize;i++){
					oled.draw_ASCI(buffer[i],charsize*i,7*8);
				}
			}
			if(rtc.Monat==2){
    764a:	f6 01       	movw	r30, r12
    764c:	86 89       	ldd	r24, Z+22	; 0x16
    764e:	82 30       	cpi	r24, 0x02	; 2
    7650:	c1 f7       	brne	.-16     	; 0x7642 <_Z13uhreinstellenv+0x6e8>
    7652:	80 cf       	rjmp	.-256    	; 0x7554 <_Z13uhreinstellenv+0x5fa>

		oled.sendFrame();
		oled.clearFrame();
		switch (pos) {
			case 0:
			rtc.Stunden=Tastatur.ZahlenausTastatur()*10;
    7654:	f6 01       	movw	r30, r12
    7656:	80 8b       	std	Z+16, r24	; 0x10
			break;
			default:
			pos++;
			break;
		}
		pos++;
    7658:	93 94       	inc	r9
    765a:	bc cc       	rjmp	.-1672   	; 0x6fd4 <_Z13uhreinstellenv+0x7a>
	
	oled.clearFrame();
	rtc.ausgabedatumneu();
	rtc.ausgabezeitneu();
	rtc.RTCstart();
}
    765c:	66 96       	adiw	r28, 0x16	; 22
    765e:	0f b6       	in	r0, 0x3f	; 63
    7660:	f8 94       	cli
    7662:	de bf       	out	0x3e, r29	; 62
    7664:	0f be       	out	0x3f, r0	; 63
    7666:	cd bf       	out	0x3d, r28	; 61
    7668:	df 91       	pop	r29
    766a:	cf 91       	pop	r28
    766c:	1f 91       	pop	r17
    766e:	0f 91       	pop	r16
    7670:	ff 90       	pop	r15
    7672:	ef 90       	pop	r14
    7674:	df 90       	pop	r13
    7676:	cf 90       	pop	r12
    7678:	bf 90       	pop	r11
    767a:	af 90       	pop	r10
    767c:	9f 90       	pop	r9
    767e:	8f 90       	pop	r8
    7680:	7f 90       	pop	r7
    7682:	6f 90       	pop	r6
    7684:	5f 90       	pop	r5
    7686:	4f 90       	pop	r4
    7688:	3f 90       	pop	r3
    768a:	2f 90       	pop	r2
    768c:	08 95       	ret

0000768e <_ZN13einstellungen4drawEv>:
	uint8_t tastendruck(uint8_t *tast){
		return 0;
	}
	
	//anzeige erstellen
	void draw(){
    768e:	cf 92       	push	r12
    7690:	df 92       	push	r13
    7692:	ef 92       	push	r14
    7694:	ff 92       	push	r15
    7696:	0f 93       	push	r16
    7698:	1f 93       	push	r17
    769a:	cf 93       	push	r28
    769c:	df 93       	push	r29
    769e:	ec 01       	movw	r28, r24
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    76a0:	8f 89       	ldd	r24, Y+23	; 0x17
    76a2:	98 8d       	ldd	r25, Y+24	; 0x18
    76a4:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN7Display10clearFrameEv>
    76a8:	10 e0       	ldi	r17, 0x00	; 0
    76aa:	e1 2c       	mov	r14, r1
    76ac:	f1 2c       	mov	r15, r1
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
    76ae:	e9 8d       	ldd	r30, Y+25	; 0x19
    76b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    76b2:	ee 0d       	add	r30, r14
    76b4:	ff 1d       	adc	r31, r15
    76b6:	20 e0       	ldi	r18, 0x00	; 0
    76b8:	41 2f       	mov	r20, r17
    76ba:	60 81       	ld	r22, Z
    76bc:	8f 89       	ldd	r24, Y+23	; 0x17
    76be:	98 8d       	ldd	r25, Y+24	; 0x18
    76c0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    76c4:	2f ef       	ldi	r18, 0xFF	; 255
    76c6:	e2 1a       	sub	r14, r18
    76c8:	f2 0a       	sbc	r15, r18
    76ca:	1a 5f       	subi	r17, 0xFA	; 250
		return &name[0];
	}
	
	//draw header and overload it
	void header(){
		for(uint8_t i=0;i<8;i++){
    76cc:	10 33       	cpi	r17, 0x30	; 48
    76ce:	79 f7       	brne	.-34     	; 0x76ae <_ZN13einstellungen4drawEv+0x20>
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
    76d0:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <_Z14Batteriestatusv>
    76d4:	7e 01       	movw	r14, r28
    76d6:	32 e0       	ldi	r19, 0x02	; 2
    76d8:	e3 0e       	add	r14, r19
    76da:	f1 1c       	adc	r15, r1
    76dc:	28 2f       	mov	r18, r24
    76de:	08 2e       	mov	r0, r24
    76e0:	00 0c       	add	r0, r0
    76e2:	33 0b       	sbc	r19, r19
    76e4:	3f 93       	push	r19
    76e6:	8f 93       	push	r24
    76e8:	82 ec       	ldi	r24, 0xC2	; 194
    76ea:	91 e0       	ldi	r25, 0x01	; 1
    76ec:	9f 93       	push	r25
    76ee:	8f 93       	push	r24
    76f0:	ff 92       	push	r15
    76f2:	ef 92       	push	r14
    76f4:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    76f8:	8e 8b       	std	Y+22, r24	; 0x16
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    76fa:	15 e1       	ldi	r17, 0x15	; 21
    76fc:	18 1b       	sub	r17, r24
    76fe:	0f 90       	pop	r0
    7700:	0f 90       	pop	r0
    7702:	0f 90       	pop	r0
    7704:	0f 90       	pop	r0
    7706:	0f 90       	pop	r0
    7708:	0f 90       	pop	r0
    770a:	15 31       	cpi	r17, 0x15	; 21
    770c:	08 f0       	brcs	.+2      	; 0x7710 <_ZN13einstellungen4drawEv+0x82>
    770e:	7f c1       	rjmp	.+766    	; 0x7a0e <_ZN13einstellungen4drawEv+0x380>
    7710:	01 2f       	mov	r16, r17
    7712:	00 0f       	add	r16, r16
    7714:	01 0f       	add	r16, r17
    7716:	00 0f       	add	r16, r16
			oled->draw_ASCI(buffer[i-((SSD1306_WIDTH/charsize)-buffersize)],i*charsize,0);
    7718:	8e 89       	ldd	r24, Y+22	; 0x16
    771a:	fe 01       	movw	r30, r28
    771c:	e1 0f       	add	r30, r17
    771e:	f1 1d       	adc	r31, r1
    7720:	e8 0f       	add	r30, r24
    7722:	f1 1d       	adc	r31, r1
    7724:	73 97       	sbiw	r30, 0x13	; 19
    7726:	20 e0       	ldi	r18, 0x00	; 0
    7728:	40 2f       	mov	r20, r16
    772a:	60 81       	ld	r22, Z
    772c:	8f 89       	ldd	r24, Y+23	; 0x17
    772e:	98 8d       	ldd	r25, Y+24	; 0x18
    7730:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
	void header(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_uhr[i],i*charsize,0);
		}
		buffersize=sprintf(buffer,"Bat: %i%%",Batteriestatus());
		for(uint8_t i=((SSD1306_WIDTH/charsize)-buffersize);i<(SSD1306_WIDTH/charsize);i++){
    7734:	1f 5f       	subi	r17, 0xFF	; 255
    7736:	0a 5f       	subi	r16, 0xFA	; 250
    7738:	15 31       	cpi	r17, 0x15	; 21
    773a:	71 f7       	brne	.-36     	; 0x7718 <_ZN13einstellungen4drawEv+0x8a>
    773c:	68 c1       	rjmp	.+720    	; 0x7a0e <_ZN13einstellungen4drawEv+0x380>
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
			oled->draw_ASCI(rtc->msg_dat[i],i*charsize+(SSD1306_WIDTH-bitsderrtc*charsize),7*charhighte);
    773e:	e9 8d       	ldd	r30, Y+25	; 0x19
    7740:	fa 8d       	ldd	r31, Y+26	; 0x1a
    7742:	ec 0d       	add	r30, r12
    7744:	fd 1d       	adc	r31, r13
    7746:	28 e3       	ldi	r18, 0x38	; 56
    7748:	41 2f       	mov	r20, r17
    774a:	60 85       	ldd	r22, Z+8	; 0x08
    774c:	8f 89       	ldd	r24, Y+23	; 0x17
    774e:	98 8d       	ldd	r25, Y+24	; 0x18
    7750:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    7754:	8f ef       	ldi	r24, 0xFF	; 255
    7756:	c8 1a       	sub	r12, r24
    7758:	d8 0a       	sbc	r13, r24
    775a:	1a 5f       	subi	r17, 0xFA	; 250
		}
	}
	
	//draw bottom and overload it
	void bottom(){
		for(uint8_t i=0;i<8;i++){
    775c:	10 38       	cpi	r17, 0x80	; 128
    775e:	79 f7       	brne	.-34     	; 0x773e <_ZN13einstellungen4drawEv+0xb0>
	//anzeige erstellen
	void draw(){
		monitor::draw();
		header();
		bottom();
		if (posx==0)
    7760:	8e a1       	ldd	r24, Y+38	; 0x26
    7762:	81 11       	cpse	r24, r1
    7764:	ae c0       	rjmp	.+348    	; 0x78c2 <_ZN13einstellungen4drawEv+0x234>
		{
			buffersize=sprintf(buffer,"Zeit einstellen");
    7766:	80 e1       	ldi	r24, 0x10	; 16
    7768:	e7 e7       	ldi	r30, 0x77	; 119
    776a:	f3 e0       	ldi	r31, 0x03	; 3
    776c:	d7 01       	movw	r26, r14
    776e:	01 90       	ld	r0, Z+
    7770:	0d 92       	st	X+, r0
    7772:	8a 95       	dec	r24
    7774:	e1 f7       	brne	.-8      	; 0x776e <_ZN13einstellungen4drawEv+0xe0>
    7776:	8f e0       	ldi	r24, 0x0F	; 15
    7778:	8e 8b       	std	Y+22, r24	; 0x16
    777a:	0c e0       	ldi	r16, 0x0C	; 12
    777c:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,2*charhighte);}
    777e:	fe 01       	movw	r30, r28
    7780:	e1 0f       	add	r30, r17
    7782:	f1 1d       	adc	r31, r1
    7784:	20 e1       	ldi	r18, 0x10	; 16
    7786:	40 2f       	mov	r20, r16
    7788:	62 81       	ldd	r22, Z+2	; 0x02
    778a:	8f 89       	ldd	r24, Y+23	; 0x17
    778c:	98 8d       	ldd	r25, Y+24	; 0x18
    778e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    7792:	1f 5f       	subi	r17, 0xFF	; 255
    7794:	0a 5f       	subi	r16, 0xFA	; 250
    7796:	8e 89       	ldd	r24, Y+22	; 0x16
    7798:	18 17       	cp	r17, r24
    779a:	88 f3       	brcs	.-30     	; 0x777e <_ZN13einstellungen4drawEv+0xf0>
			buffersize=sprintf(buffer,"g bestimmen");
    779c:	8c e0       	ldi	r24, 0x0C	; 12
    779e:	e7 e8       	ldi	r30, 0x87	; 135
    77a0:	f3 e0       	ldi	r31, 0x03	; 3
    77a2:	d7 01       	movw	r26, r14
    77a4:	01 90       	ld	r0, Z+
    77a6:	0d 92       	st	X+, r0
    77a8:	8a 95       	dec	r24
    77aa:	e1 f7       	brne	.-8      	; 0x77a4 <_ZN13einstellungen4drawEv+0x116>
    77ac:	8b e0       	ldi	r24, 0x0B	; 11
    77ae:	8e 8b       	std	Y+22, r24	; 0x16
    77b0:	0c e0       	ldi	r16, 0x0C	; 12
    77b2:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,3*charhighte);}
    77b4:	fe 01       	movw	r30, r28
    77b6:	e1 0f       	add	r30, r17
    77b8:	f1 1d       	adc	r31, r1
    77ba:	28 e1       	ldi	r18, 0x18	; 24
    77bc:	40 2f       	mov	r20, r16
    77be:	62 81       	ldd	r22, Z+2	; 0x02
    77c0:	8f 89       	ldd	r24, Y+23	; 0x17
    77c2:	98 8d       	ldd	r25, Y+24	; 0x18
    77c4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    77c8:	1f 5f       	subi	r17, 0xFF	; 255
    77ca:	0a 5f       	subi	r16, 0xFA	; 250
    77cc:	8e 89       	ldd	r24, Y+22	; 0x16
    77ce:	18 17       	cp	r17, r24
    77d0:	88 f3       	brcs	.-30     	; 0x77b4 <_ZN13einstellungen4drawEv+0x126>
			buffersize=sprintf(buffer,"Versionsnummer");
    77d2:	8f e0       	ldi	r24, 0x0F	; 15
    77d4:	e3 e9       	ldi	r30, 0x93	; 147
    77d6:	f3 e0       	ldi	r31, 0x03	; 3
    77d8:	d7 01       	movw	r26, r14
    77da:	01 90       	ld	r0, Z+
    77dc:	0d 92       	st	X+, r0
    77de:	8a 95       	dec	r24
    77e0:	e1 f7       	brne	.-8      	; 0x77da <_ZN13einstellungen4drawEv+0x14c>
    77e2:	8e e0       	ldi	r24, 0x0E	; 14
    77e4:	8e 8b       	std	Y+22, r24	; 0x16
    77e6:	0c e0       	ldi	r16, 0x0C	; 12
    77e8:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,4*charhighte);}
    77ea:	fe 01       	movw	r30, r28
    77ec:	e1 0f       	add	r30, r17
    77ee:	f1 1d       	adc	r31, r1
    77f0:	20 e2       	ldi	r18, 0x20	; 32
    77f2:	40 2f       	mov	r20, r16
    77f4:	62 81       	ldd	r22, Z+2	; 0x02
    77f6:	8f 89       	ldd	r24, Y+23	; 0x17
    77f8:	98 8d       	ldd	r25, Y+24	; 0x18
    77fa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    77fe:	1f 5f       	subi	r17, 0xFF	; 255
    7800:	0a 5f       	subi	r16, 0xFA	; 250
    7802:	8e 89       	ldd	r24, Y+22	; 0x16
    7804:	18 17       	cp	r17, r24
    7806:	88 f3       	brcs	.-30     	; 0x77ea <_ZN13einstellungen4drawEv+0x15c>
			buffersize=sprintf(buffer,"Mount SD: %u", (bool)(statusreg&(1<<mounttingstat)));
    7808:	80 91 0b 09 	lds	r24, 0x090B
    780c:	86 95       	lsr	r24
    780e:	81 70       	andi	r24, 0x01	; 1
    7810:	1f 92       	push	r1
    7812:	8f 93       	push	r24
    7814:	82 ea       	ldi	r24, 0xA2	; 162
    7816:	93 e0       	ldi	r25, 0x03	; 3
    7818:	9f 93       	push	r25
    781a:	8f 93       	push	r24
    781c:	ff 92       	push	r15
    781e:	ef 92       	push	r14
    7820:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    7824:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,5*charhighte);}
    7826:	0f 90       	pop	r0
    7828:	0f 90       	pop	r0
    782a:	0f 90       	pop	r0
    782c:	0f 90       	pop	r0
    782e:	0f 90       	pop	r0
    7830:	0f 90       	pop	r0
    7832:	88 23       	and	r24, r24
    7834:	89 f0       	breq	.+34     	; 0x7858 <_ZN13einstellungen4drawEv+0x1ca>
    7836:	0c e0       	ldi	r16, 0x0C	; 12
    7838:	10 e0       	ldi	r17, 0x00	; 0
    783a:	fe 01       	movw	r30, r28
    783c:	e1 0f       	add	r30, r17
    783e:	f1 1d       	adc	r31, r1
    7840:	28 e2       	ldi	r18, 0x28	; 40
    7842:	40 2f       	mov	r20, r16
    7844:	62 81       	ldd	r22, Z+2	; 0x02
    7846:	8f 89       	ldd	r24, Y+23	; 0x17
    7848:	98 8d       	ldd	r25, Y+24	; 0x18
    784a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    784e:	1f 5f       	subi	r17, 0xFF	; 255
    7850:	0a 5f       	subi	r16, 0xFA	; 250
    7852:	8e 89       	ldd	r24, Y+22	; 0x16
    7854:	18 17       	cp	r17, r24
    7856:	88 f3       	brcs	.-30     	; 0x783a <_ZN13einstellungen4drawEv+0x1ac>
			buffersize=sprintf(buffer,"Logging:  %u", (bool)(statusreg&(1<<loggingstat)));
    7858:	80 91 0b 09 	lds	r24, 0x090B
    785c:	82 fb       	bst	r24, 2
    785e:	88 27       	eor	r24, r24
    7860:	80 f9       	bld	r24, 0
    7862:	1f 92       	push	r1
    7864:	8f 93       	push	r24
    7866:	8f ea       	ldi	r24, 0xAF	; 175
    7868:	93 e0       	ldi	r25, 0x03	; 3
    786a:	9f 93       	push	r25
    786c:	8f 93       	push	r24
    786e:	ff 92       	push	r15
    7870:	ef 92       	push	r14
    7872:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    7876:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize+2*charsize,6*charhighte);}
    7878:	0f 90       	pop	r0
    787a:	0f 90       	pop	r0
    787c:	0f 90       	pop	r0
    787e:	0f 90       	pop	r0
    7880:	0f 90       	pop	r0
    7882:	0f 90       	pop	r0
    7884:	88 23       	and	r24, r24
    7886:	89 f0       	breq	.+34     	; 0x78aa <_ZN13einstellungen4drawEv+0x21c>
    7888:	0c e0       	ldi	r16, 0x0C	; 12
    788a:	10 e0       	ldi	r17, 0x00	; 0
    788c:	fe 01       	movw	r30, r28
    788e:	e1 0f       	add	r30, r17
    7890:	f1 1d       	adc	r31, r1
    7892:	20 e3       	ldi	r18, 0x30	; 48
    7894:	40 2f       	mov	r20, r16
    7896:	62 81       	ldd	r22, Z+2	; 0x02
    7898:	8f 89       	ldd	r24, Y+23	; 0x17
    789a:	98 8d       	ldd	r25, Y+24	; 0x18
    789c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    78a0:	1f 5f       	subi	r17, 0xFF	; 255
    78a2:	0a 5f       	subi	r16, 0xFA	; 250
    78a4:	8e 89       	ldd	r24, Y+22	; 0x16
    78a6:	18 17       	cp	r17, r24
    78a8:	88 f3       	brcs	.-30     	; 0x788c <_ZN13einstellungen4drawEv+0x1fe>
			oled->draw_ASCI('>',0*charsize,(posy+2)*charhighte);
    78aa:	2d a1       	ldd	r18, Y+37	; 0x25
    78ac:	22 0f       	add	r18, r18
    78ae:	22 0f       	add	r18, r18
    78b0:	22 0f       	add	r18, r18
    78b2:	20 5f       	subi	r18, 0xF0	; 240
    78b4:	40 e0       	ldi	r20, 0x00	; 0
    78b6:	6e e3       	ldi	r22, 0x3E	; 62
    78b8:	8f 89       	ldd	r24, Y+23	; 0x17
    78ba:	98 8d       	ldd	r25, Y+24	; 0x18
    78bc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    78c0:	a1 c0       	rjmp	.+322    	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
		}
		else if (posy==0 && posx==1)
    78c2:	9d a1       	ldd	r25, Y+37	; 0x25
    78c4:	91 11       	cpse	r25, r1
    78c6:	06 c0       	rjmp	.+12     	; 0x78d4 <_ZN13einstellungen4drawEv+0x246>
    78c8:	81 30       	cpi	r24, 0x01	; 1
    78ca:	09 f0       	breq	.+2      	; 0x78ce <_ZN13einstellungen4drawEv+0x240>
    78cc:	9b c0       	rjmp	.+310    	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
		{
			//Uhreinstellung machen
			//noch etwas bloed, aber mit eigener Funktion
			uhreinstellen();
    78ce:	45 db       	rcall	.-2422   	; 0x6f5a <_Z13uhreinstellenv>
			posx=0;
    78d0:	1e a2       	std	Y+38, r1	; 0x26
    78d2:	98 c0       	rjmp	.+304    	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
		}
		else if (posy==1 && posx==1)
    78d4:	91 30       	cpi	r25, 0x01	; 1
    78d6:	09 f0       	breq	.+2      	; 0x78da <_ZN13einstellungen4drawEv+0x24c>
    78d8:	60 c0       	rjmp	.+192    	; 0x799a <_ZN13einstellungen4drawEv+0x30c>
    78da:	81 30       	cpi	r24, 0x01	; 1
    78dc:	09 f0       	breq	.+2      	; 0x78e0 <_ZN13einstellungen4drawEv+0x252>
    78de:	92 c0       	rjmp	.+292    	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
		{
			//g bestimmen einbauen
			buffersize=sprintf(buffer,"Geraet nicht bewegen");
    78e0:	85 e1       	ldi	r24, 0x15	; 21
    78e2:	ec eb       	ldi	r30, 0xBC	; 188
    78e4:	f3 e0       	ldi	r31, 0x03	; 3
    78e6:	d7 01       	movw	r26, r14
    78e8:	01 90       	ld	r0, Z+
    78ea:	0d 92       	st	X+, r0
    78ec:	8a 95       	dec	r24
    78ee:	e1 f7       	brne	.-8      	; 0x78e8 <_ZN13einstellungen4drawEv+0x25a>
    78f0:	84 e1       	ldi	r24, 0x14	; 20
    78f2:	8e 8b       	std	Y+22, r24	; 0x16
    78f4:	00 e0       	ldi	r16, 0x00	; 0
    78f6:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,2*charhighte);}
    78f8:	fe 01       	movw	r30, r28
    78fa:	e1 0f       	add	r30, r17
    78fc:	f1 1d       	adc	r31, r1
    78fe:	20 e1       	ldi	r18, 0x10	; 16
    7900:	40 2f       	mov	r20, r16
    7902:	62 81       	ldd	r22, Z+2	; 0x02
    7904:	8f 89       	ldd	r24, Y+23	; 0x17
    7906:	98 8d       	ldd	r25, Y+24	; 0x18
    7908:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    790c:	1f 5f       	subi	r17, 0xFF	; 255
    790e:	0a 5f       	subi	r16, 0xFA	; 250
    7910:	8e 89       	ldd	r24, Y+22	; 0x16
    7912:	18 17       	cp	r17, r24
    7914:	88 f3       	brcs	.-30     	; 0x78f8 <_ZN13einstellungen4drawEv+0x26a>
			buffersize=sprintf(buffer,"* fuer start");
    7916:	8d e0       	ldi	r24, 0x0D	; 13
    7918:	e1 ed       	ldi	r30, 0xD1	; 209
    791a:	f3 e0       	ldi	r31, 0x03	; 3
    791c:	d7 01       	movw	r26, r14
    791e:	01 90       	ld	r0, Z+
    7920:	0d 92       	st	X+, r0
    7922:	8a 95       	dec	r24
    7924:	e1 f7       	brne	.-8      	; 0x791e <_ZN13einstellungen4drawEv+0x290>
    7926:	8c e0       	ldi	r24, 0x0C	; 12
    7928:	8e 8b       	std	Y+22, r24	; 0x16
    792a:	00 e0       	ldi	r16, 0x00	; 0
    792c:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,3*charhighte);}
    792e:	fe 01       	movw	r30, r28
    7930:	e1 0f       	add	r30, r17
    7932:	f1 1d       	adc	r31, r1
    7934:	28 e1       	ldi	r18, 0x18	; 24
    7936:	40 2f       	mov	r20, r16
    7938:	62 81       	ldd	r22, Z+2	; 0x02
    793a:	8f 89       	ldd	r24, Y+23	; 0x17
    793c:	98 8d       	ldd	r25, Y+24	; 0x18
    793e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    7942:	1f 5f       	subi	r17, 0xFF	; 255
    7944:	0a 5f       	subi	r16, 0xFA	; 250
    7946:	8e 89       	ldd	r24, Y+22	; 0x16
    7948:	18 17       	cp	r17, r24
    794a:	88 f3       	brcs	.-30     	; 0x792e <_ZN13einstellungen4drawEv+0x2a0>
			if (5<6&&5>0)
			{
				buffersize=sprintf(buffer,"Noch %i Sekunden",5);
    794c:	1f 92       	push	r1
    794e:	85 e0       	ldi	r24, 0x05	; 5
    7950:	8f 93       	push	r24
    7952:	8e ed       	ldi	r24, 0xDE	; 222
    7954:	93 e0       	ldi	r25, 0x03	; 3
    7956:	9f 93       	push	r25
    7958:	8f 93       	push	r24
    795a:	ff 92       	push	r15
    795c:	ef 92       	push	r14
    795e:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    7962:	8e 8b       	std	Y+22, r24	; 0x16
				for (uint8_t i=0;i<buffersize;i++){oled->draw_ASCI(buffer[i],i*charsize,5*charhighte);}
    7964:	0f 90       	pop	r0
    7966:	0f 90       	pop	r0
    7968:	0f 90       	pop	r0
    796a:	0f 90       	pop	r0
    796c:	0f 90       	pop	r0
    796e:	0f 90       	pop	r0
    7970:	88 23       	and	r24, r24
    7972:	09 f4       	brne	.+2      	; 0x7976 <_ZN13einstellungen4drawEv+0x2e8>
    7974:	47 c0       	rjmp	.+142    	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
    7976:	00 e0       	ldi	r16, 0x00	; 0
    7978:	10 e0       	ldi	r17, 0x00	; 0
    797a:	fe 01       	movw	r30, r28
    797c:	e1 0f       	add	r30, r17
    797e:	f1 1d       	adc	r31, r1
    7980:	28 e2       	ldi	r18, 0x28	; 40
    7982:	40 2f       	mov	r20, r16
    7984:	62 81       	ldd	r22, Z+2	; 0x02
    7986:	8f 89       	ldd	r24, Y+23	; 0x17
    7988:	98 8d       	ldd	r25, Y+24	; 0x18
    798a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
    798e:	1f 5f       	subi	r17, 0xFF	; 255
    7990:	0a 5f       	subi	r16, 0xFA	; 250
    7992:	8e 89       	ldd	r24, Y+22	; 0x16
    7994:	18 17       	cp	r17, r24
    7996:	88 f3       	brcs	.-30     	; 0x797a <_ZN13einstellungen4drawEv+0x2ec>
    7998:	35 c0       	rjmp	.+106    	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
			else if (5==0)
			{
				posx--;
			}
		}
		else if (posy==2 && posx==1)
    799a:	92 30       	cpi	r25, 0x02	; 2
    799c:	99 f5       	brne	.+102    	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
    799e:	81 30       	cpi	r24, 0x01	; 1
    79a0:	89 f5       	brne	.+98     	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
    79a2:	80 e4       	ldi	r24, 0x40	; 64
    79a4:	8f 93       	push	r24
    79a6:	83 e4       	ldi	r24, 0x43	; 67
    79a8:	8f 93       	push	r24
    79aa:	83 e3       	ldi	r24, 0x33	; 51
    79ac:	8f 93       	push	r24
    79ae:	8f 93       	push	r24
    79b0:	84 eb       	ldi	r24, 0xB4	; 180
    79b2:	91 e0       	ldi	r25, 0x01	; 1
    79b4:	9f 93       	push	r25
    79b6:	8f 93       	push	r24
    79b8:	ff 92       	push	r15
    79ba:	ef 92       	push	r14
    79bc:	0e 94 b3 49 	call	0x9366	; 0x9366 <sprintf>
    79c0:	8e 8b       	std	Y+22, r24	; 0x16
			for(uint8_t i=0; i < buffersize;i++){
    79c2:	2d b7       	in	r18, 0x3d	; 61
    79c4:	3e b7       	in	r19, 0x3e	; 62
    79c6:	28 5f       	subi	r18, 0xF8	; 248
    79c8:	3f 4f       	sbci	r19, 0xFF	; 255
    79ca:	0f b6       	in	r0, 0x3f	; 63
    79cc:	f8 94       	cli
    79ce:	3e bf       	out	0x3e, r19	; 62
    79d0:	0f be       	out	0x3f, r0	; 63
    79d2:	2d bf       	out	0x3d, r18	; 61
    79d4:	88 23       	and	r24, r24
    79d6:	b1 f0       	breq	.+44     	; 0x7a04 <_ZN13einstellungen4drawEv+0x376>
    79d8:	10 e0       	ldi	r17, 0x00	; 0
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);
    79da:	21 2f       	mov	r18, r17
    79dc:	30 e0       	ldi	r19, 0x00	; 0
    79de:	c9 01       	movw	r24, r18
    79e0:	02 96       	adiw	r24, 0x02	; 2
    79e2:	48 2f       	mov	r20, r24
    79e4:	44 0f       	add	r20, r20
    79e6:	48 0f       	add	r20, r24
    79e8:	44 0f       	add	r20, r20
    79ea:	fe 01       	movw	r30, r28
    79ec:	e2 0f       	add	r30, r18
    79ee:	f3 1f       	adc	r31, r19
    79f0:	2c e1       	ldi	r18, 0x1C	; 28
    79f2:	62 81       	ldd	r22, Z+2	; 0x02
    79f4:	8f 89       	ldd	r24, Y+23	; 0x17
    79f6:	98 8d       	ldd	r25, Y+24	; 0x18
    79f8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN7Display9draw_ASCIEhhh>
			}
		}
		else if (posy==2 && posx==1)
		{
			buffersize=sprintf(buffer,"Version: %.2f",(double)VERSIONSNUMMER);
			for(uint8_t i=0; i < buffersize;i++){
    79fc:	1f 5f       	subi	r17, 0xFF	; 255
    79fe:	8e 89       	ldd	r24, Y+22	; 0x16
    7a00:	18 17       	cp	r17, r24
    7a02:	58 f3       	brcs	.-42     	; 0x79da <_ZN13einstellungen4drawEv+0x34c>
		oled->clearFrame();
	}

	//send the frame to the display
	void send(){
		oled->sendFrame();	
    7a04:	8f 89       	ldd	r24, Y+23	; 0x17
    7a06:	98 8d       	ldd	r25, Y+24	; 0x18
    7a08:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN7Display9sendFrameEv>
    7a0c:	04 c0       	rjmp	.+8      	; 0x7a16 <_ZN13einstellungen4drawEv+0x388>
		return 0;
	}
	
	//drawfunktion
	virtual void draw(){
		oled->clearFrame();
    7a0e:	10 e5       	ldi	r17, 0x50	; 80
    7a10:	c1 2c       	mov	r12, r1
    7a12:	d1 2c       	mov	r13, r1
    7a14:	94 ce       	rjmp	.-728    	; 0x773e <_ZN13einstellungen4drawEv+0xb0>
				oled->draw_ASCI(buffer[i],(i+2)*charsize,3.5*charhighte);

			}
		}
		send();	
	}
    7a16:	df 91       	pop	r29
    7a18:	cf 91       	pop	r28
    7a1a:	1f 91       	pop	r17
    7a1c:	0f 91       	pop	r16
    7a1e:	ff 90       	pop	r15
    7a20:	ef 90       	pop	r14
    7a22:	df 90       	pop	r13
    7a24:	cf 90       	pop	r12
    7a26:	08 95       	ret

00007a28 <_GLOBAL__sub_I__Znwj>:
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7a28:	8c e3       	ldi	r24, 0x3C	; 60
    7a2a:	9e e0       	ldi	r25, 0x0E	; 14
    7a2c:	b5 d1       	rcall	.+874    	; 0x7d98 <_ZN3RTCC1Ev>

#include "Display.h"
Display oled;
    7a2e:	8b e3       	ldi	r24, 0x3B	; 59
    7a30:	9a e0       	ldi	r25, 0x0A	; 10
    7a32:	0e 94 aa 0b 	call	0x1754	; 0x1754 <_ZN7DisplayC1Ev>

#include "Interface.h"
Interface Tastatur;
    7a36:	8f e2       	ldi	r24, 0x2F	; 47
    7a38:	9a e0       	ldi	r25, 0x0A	; 10
    7a3a:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <_ZN9InterfaceC1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7a3e:	86 e4       	ldi	r24, 0x46	; 70
    7a40:	99 e0       	ldi	r25, 0x09	; 9
    7a42:	0e 94 c5 24 	call	0x498a	; 0x498a <_ZN7LSM303DC1Ev>

#include "BMP180.h"
BMP180 druck;
    7a46:	87 e1       	ldi	r24, 0x17	; 23
    7a48:	99 e0       	ldi	r25, 0x09	; 9
    7a4a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN6BMP180C1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7a4e:	41 e0       	ldi	r20, 0x01	; 1
    7a50:	62 e4       	ldi	r22, 0x42	; 66
    7a52:	81 e1       	ldi	r24, 0x11	; 17
    7a54:	99 e0       	ldi	r25, 0x09	; 9
    7a56:	28 d0       	rcall	.+80     	; 0x7aa8 <_ZN6OutputC1Ehh>
Output Vibrationsmotor('B',PORTB2);
    7a58:	42 e0       	ldi	r20, 0x02	; 2
    7a5a:	62 e4       	ldi	r22, 0x42	; 66
    7a5c:	8f e0       	ldi	r24, 0x0F	; 15
    7a5e:	99 e0       	ldi	r25, 0x09	; 9
    7a60:	23 d0       	rcall	.+70     	; 0x7aa8 <_ZN6OutputC1Ehh>
Output IRLED('D',PORTD7);
    7a62:	47 e0       	ldi	r20, 0x07	; 7
    7a64:	64 e4       	ldi	r22, 0x44	; 68
    7a66:	8d e0       	ldi	r24, 0x0D	; 13
    7a68:	99 e0       	ldi	r25, 0x09	; 9
    7a6a:	1e c0       	rjmp	.+60     	; 0x7aa8 <_ZN6OutputC1Ehh>
    7a6c:	08 95       	ret

00007a6e <_GLOBAL__sub_D__Znwj>:
    7a6e:	8d e0       	ldi	r24, 0x0D	; 13
    7a70:	99 e0       	ldi	r25, 0x09	; 9
    7a72:	54 d0       	rcall	.+168    	; 0x7b1c <_ZN6OutputD1Ev>

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
Output Vibrationsmotor('B',PORTB2);
    7a74:	8f e0       	ldi	r24, 0x0F	; 15
    7a76:	99 e0       	ldi	r25, 0x09	; 9
    7a78:	51 d0       	rcall	.+162    	; 0x7b1c <_ZN6OutputD1Ev>
BMP180 druck;

#include "ADC.h"

#include "Output.h"
Output LED('B',PORTB1);
    7a7a:	81 e1       	ldi	r24, 0x11	; 17
    7a7c:	99 e0       	ldi	r25, 0x09	; 9
    7a7e:	4e d0       	rcall	.+156    	; 0x7b1c <_ZN6OutputD1Ev>

#include "LSM303D.h"
LSM303D Accelerometer;

#include "BMP180.h"
BMP180 druck;
    7a80:	87 e1       	ldi	r24, 0x17	; 23
    7a82:	99 e0       	ldi	r25, 0x09	; 9
    7a84:	0e 94 84 03 	call	0x708	; 0x708 <_ZN6BMP180D1Ev>
//nicht mehr verwendet
//#include "SOUND.h"
//SOUND Lautsprecher;

#include "LSM303D.h"
LSM303D Accelerometer;
    7a88:	86 e4       	ldi	r24, 0x46	; 70
    7a8a:	99 e0       	ldi	r25, 0x09	; 9
    7a8c:	0e 94 91 24 	call	0x4922	; 0x4922 <_ZN7LSM303DD1Ev>

#include "Display.h"
Display oled;

#include "Interface.h"
Interface Tastatur;
    7a90:	8f e2       	ldi	r24, 0x2F	; 47
    7a92:	9a e0       	ldi	r25, 0x0A	; 10
    7a94:	0e 94 8e 23 	call	0x471c	; 0x471c <_ZN9InterfaceD1Ev>

#include "RTC.h"
RTC rtc;

#include "Display.h"
Display oled;
    7a98:	8b e3       	ldi	r24, 0x3B	; 59
    7a9a:	9a e0       	ldi	r25, 0x0A	; 10
    7a9c:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZN7DisplayD1Ev>
{
	free(ptr);
}

#include "RTC.h"
RTC rtc;
    7aa0:	8c e3       	ldi	r24, 0x3C	; 60
    7aa2:	9e e0       	ldi	r25, 0x0E	; 14
    7aa4:	f5 c0       	rjmp	.+490    	; 0x7c90 <_ZN3RTCD1Ev>
    7aa6:	08 95       	ret

00007aa8 <_ZN6OutputC1Ehh>:
#include "Output.h"

// default constructor
Output::Output(uint8_t Portpraefix, uint8_t Pinnumber)
{
	Pin=Pinnumber;
    7aa8:	fc 01       	movw	r30, r24
    7aaa:	41 83       	std	Z+1, r20	; 0x01
	Port=Portpraefix;
    7aac:	60 83       	st	Z, r22
	switch (Portpraefix)
    7aae:	62 34       	cpi	r22, 0x42	; 66
    7ab0:	a1 f0       	breq	.+40     	; 0x7ada <_ZN6OutputC1Ehh+0x32>
    7ab2:	18 f4       	brcc	.+6      	; 0x7aba <_ZN6OutputC1Ehh+0x12>
    7ab4:	61 34       	cpi	r22, 0x41	; 65
    7ab6:	31 f0       	breq	.+12     	; 0x7ac4 <_ZN6OutputC1Ehh+0x1c>
    7ab8:	08 95       	ret
    7aba:	63 34       	cpi	r22, 0x43	; 67
    7abc:	c9 f0       	breq	.+50     	; 0x7af0 <_ZN6OutputC1Ehh+0x48>
    7abe:	64 34       	cpi	r22, 0x44	; 68
    7ac0:	11 f1       	breq	.+68     	; 0x7b06 <_ZN6OutputC1Ehh+0x5e>
    7ac2:	08 95       	ret
	{
		case 'A':
			DDRA |= (1<<Pin);
    7ac4:	21 b1       	in	r18, 0x01	; 1
    7ac6:	81 e0       	ldi	r24, 0x01	; 1
    7ac8:	90 e0       	ldi	r25, 0x00	; 0
    7aca:	02 c0       	rjmp	.+4      	; 0x7ad0 <_ZN6OutputC1Ehh+0x28>
    7acc:	88 0f       	add	r24, r24
    7ace:	99 1f       	adc	r25, r25
    7ad0:	4a 95       	dec	r20
    7ad2:	e2 f7       	brpl	.-8      	; 0x7acc <_ZN6OutputC1Ehh+0x24>
    7ad4:	82 2b       	or	r24, r18
    7ad6:	81 b9       	out	0x01, r24	; 1
			break;
    7ad8:	08 95       	ret
		case 'B':
			DDRB |= (1<<Pin);
    7ada:	24 b1       	in	r18, 0x04	; 4
    7adc:	81 e0       	ldi	r24, 0x01	; 1
    7ade:	90 e0       	ldi	r25, 0x00	; 0
    7ae0:	02 c0       	rjmp	.+4      	; 0x7ae6 <_ZN6OutputC1Ehh+0x3e>
    7ae2:	88 0f       	add	r24, r24
    7ae4:	99 1f       	adc	r25, r25
    7ae6:	4a 95       	dec	r20
    7ae8:	e2 f7       	brpl	.-8      	; 0x7ae2 <_ZN6OutputC1Ehh+0x3a>
    7aea:	82 2b       	or	r24, r18
    7aec:	84 b9       	out	0x04, r24	; 4
			break;
    7aee:	08 95       	ret
		case 'C':
			DDRC |= (1<<Pin);
    7af0:	27 b1       	in	r18, 0x07	; 7
    7af2:	81 e0       	ldi	r24, 0x01	; 1
    7af4:	90 e0       	ldi	r25, 0x00	; 0
    7af6:	02 c0       	rjmp	.+4      	; 0x7afc <_ZN6OutputC1Ehh+0x54>
    7af8:	88 0f       	add	r24, r24
    7afa:	99 1f       	adc	r25, r25
    7afc:	4a 95       	dec	r20
    7afe:	e2 f7       	brpl	.-8      	; 0x7af8 <_ZN6OutputC1Ehh+0x50>
    7b00:	82 2b       	or	r24, r18
    7b02:	87 b9       	out	0x07, r24	; 7
			break;
    7b04:	08 95       	ret
		case 'D':
			DDRD |= (1<<Pin);
    7b06:	2a b1       	in	r18, 0x0a	; 10
    7b08:	81 e0       	ldi	r24, 0x01	; 1
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
    7b0c:	02 c0       	rjmp	.+4      	; 0x7b12 <_ZN6OutputC1Ehh+0x6a>
    7b0e:	88 0f       	add	r24, r24
    7b10:	99 1f       	adc	r25, r25
    7b12:	4a 95       	dec	r20
    7b14:	e2 f7       	brpl	.-8      	; 0x7b0e <_ZN6OutputC1Ehh+0x66>
    7b16:	82 2b       	or	r24, r18
    7b18:	8a b9       	out	0x0a, r24	; 10
    7b1a:	08 95       	ret

00007b1c <_ZN6OutputD1Ev>:
			break;
	}
} //Output

// default destructor
Output::~Output()
    7b1c:	08 95       	ret

00007b1e <_ZN6Output2onEv>:
{
} //~Output

void Output::on(){
    7b1e:	fc 01       	movw	r30, r24
	switch (Port)
    7b20:	90 81       	ld	r25, Z
    7b22:	92 34       	cpi	r25, 0x42	; 66
    7b24:	a9 f0       	breq	.+42     	; 0x7b50 <_ZN6Output2onEv+0x32>
    7b26:	18 f4       	brcc	.+6      	; 0x7b2e <_ZN6Output2onEv+0x10>
    7b28:	91 34       	cpi	r25, 0x41	; 65
    7b2a:	31 f0       	breq	.+12     	; 0x7b38 <_ZN6Output2onEv+0x1a>
    7b2c:	08 95       	ret
    7b2e:	93 34       	cpi	r25, 0x43	; 67
    7b30:	d9 f0       	breq	.+54     	; 0x7b68 <_ZN6Output2onEv+0x4a>
    7b32:	94 34       	cpi	r25, 0x44	; 68
    7b34:	29 f1       	breq	.+74     	; 0x7b80 <_ZN6Output2onEv+0x62>
    7b36:	08 95       	ret
	{
		case 'A':
			PORTA |= (1<<Pin);
    7b38:	22 b1       	in	r18, 0x02	; 2
    7b3a:	81 e0       	ldi	r24, 0x01	; 1
    7b3c:	90 e0       	ldi	r25, 0x00	; 0
    7b3e:	01 80       	ldd	r0, Z+1	; 0x01
    7b40:	02 c0       	rjmp	.+4      	; 0x7b46 <_ZN6Output2onEv+0x28>
    7b42:	88 0f       	add	r24, r24
    7b44:	99 1f       	adc	r25, r25
    7b46:	0a 94       	dec	r0
    7b48:	e2 f7       	brpl	.-8      	; 0x7b42 <_ZN6Output2onEv+0x24>
    7b4a:	82 2b       	or	r24, r18
    7b4c:	82 b9       	out	0x02, r24	; 2
			break;
    7b4e:	08 95       	ret
		case 'B':
			PORTB |= (1<<Pin);
    7b50:	25 b1       	in	r18, 0x05	; 5
    7b52:	81 e0       	ldi	r24, 0x01	; 1
    7b54:	90 e0       	ldi	r25, 0x00	; 0
    7b56:	01 80       	ldd	r0, Z+1	; 0x01
    7b58:	02 c0       	rjmp	.+4      	; 0x7b5e <_ZN6Output2onEv+0x40>
    7b5a:	88 0f       	add	r24, r24
    7b5c:	99 1f       	adc	r25, r25
    7b5e:	0a 94       	dec	r0
    7b60:	e2 f7       	brpl	.-8      	; 0x7b5a <_ZN6Output2onEv+0x3c>
    7b62:	82 2b       	or	r24, r18
    7b64:	85 b9       	out	0x05, r24	; 5
			break;
    7b66:	08 95       	ret
		case 'C':
			PORTC |= (1<<Pin);
    7b68:	28 b1       	in	r18, 0x08	; 8
    7b6a:	81 e0       	ldi	r24, 0x01	; 1
    7b6c:	90 e0       	ldi	r25, 0x00	; 0
    7b6e:	01 80       	ldd	r0, Z+1	; 0x01
    7b70:	02 c0       	rjmp	.+4      	; 0x7b76 <_ZN6Output2onEv+0x58>
    7b72:	88 0f       	add	r24, r24
    7b74:	99 1f       	adc	r25, r25
    7b76:	0a 94       	dec	r0
    7b78:	e2 f7       	brpl	.-8      	; 0x7b72 <_ZN6Output2onEv+0x54>
    7b7a:	82 2b       	or	r24, r18
    7b7c:	88 b9       	out	0x08, r24	; 8
			break;
    7b7e:	08 95       	ret
		case 'D':
			PORTD |= (1<<Pin);
    7b80:	2b b1       	in	r18, 0x0b	; 11
    7b82:	81 e0       	ldi	r24, 0x01	; 1
    7b84:	90 e0       	ldi	r25, 0x00	; 0
    7b86:	01 80       	ldd	r0, Z+1	; 0x01
    7b88:	02 c0       	rjmp	.+4      	; 0x7b8e <_ZN6Output2onEv+0x70>
    7b8a:	88 0f       	add	r24, r24
    7b8c:	99 1f       	adc	r25, r25
    7b8e:	0a 94       	dec	r0
    7b90:	e2 f7       	brpl	.-8      	; 0x7b8a <_ZN6Output2onEv+0x6c>
    7b92:	82 2b       	or	r24, r18
    7b94:	8b b9       	out	0x0b, r24	; 11
    7b96:	08 95       	ret

00007b98 <_ZN6Output4isonEv>:
		default:
			break;
	}
}

uint8_t Output::ison(){
    7b98:	fc 01       	movw	r30, r24
	uint8_t returnparam=0;
	switch (Port)
    7b9a:	90 81       	ld	r25, Z
    7b9c:	92 34       	cpi	r25, 0x42	; 66
    7b9e:	a1 f0       	breq	.+40     	; 0x7bc8 <_ZN6Output4isonEv+0x30>
    7ba0:	18 f4       	brcc	.+6      	; 0x7ba8 <_ZN6Output4isonEv+0x10>
    7ba2:	91 34       	cpi	r25, 0x41	; 65
    7ba4:	31 f0       	breq	.+12     	; 0x7bb2 <_ZN6Output4isonEv+0x1a>
    7ba6:	31 c0       	rjmp	.+98     	; 0x7c0a <_ZN6Output4isonEv+0x72>
    7ba8:	93 34       	cpi	r25, 0x43	; 67
    7baa:	c9 f0       	breq	.+50     	; 0x7bde <_ZN6Output4isonEv+0x46>
    7bac:	94 34       	cpi	r25, 0x44	; 68
    7bae:	11 f1       	breq	.+68     	; 0x7bf4 <_ZN6Output4isonEv+0x5c>
    7bb0:	2c c0       	rjmp	.+88     	; 0x7c0a <_ZN6Output4isonEv+0x72>
	{
		case 'A':
			if ((PORTA&(1<<Pin)))
    7bb2:	22 b1       	in	r18, 0x02	; 2
    7bb4:	30 e0       	ldi	r19, 0x00	; 0
    7bb6:	c9 01       	movw	r24, r18
    7bb8:	01 80       	ldd	r0, Z+1	; 0x01
    7bba:	02 c0       	rjmp	.+4      	; 0x7bc0 <_ZN6Output4isonEv+0x28>
    7bbc:	95 95       	asr	r25
    7bbe:	87 95       	ror	r24
    7bc0:	0a 94       	dec	r0
    7bc2:	e2 f7       	brpl	.-8      	; 0x7bbc <_ZN6Output4isonEv+0x24>
    7bc4:	81 70       	andi	r24, 0x01	; 1
    7bc6:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'B':
			if ((PORTB&(1<<Pin)))
    7bc8:	25 b1       	in	r18, 0x05	; 5
    7bca:	30 e0       	ldi	r19, 0x00	; 0
    7bcc:	c9 01       	movw	r24, r18
    7bce:	01 80       	ldd	r0, Z+1	; 0x01
    7bd0:	02 c0       	rjmp	.+4      	; 0x7bd6 <_ZN6Output4isonEv+0x3e>
    7bd2:	95 95       	asr	r25
    7bd4:	87 95       	ror	r24
    7bd6:	0a 94       	dec	r0
    7bd8:	e2 f7       	brpl	.-8      	; 0x7bd2 <_ZN6Output4isonEv+0x3a>
    7bda:	81 70       	andi	r24, 0x01	; 1
    7bdc:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'C':
			if ((PORTC&(1<<Pin)))
    7bde:	28 b1       	in	r18, 0x08	; 8
    7be0:	30 e0       	ldi	r19, 0x00	; 0
    7be2:	c9 01       	movw	r24, r18
    7be4:	01 80       	ldd	r0, Z+1	; 0x01
    7be6:	02 c0       	rjmp	.+4      	; 0x7bec <_ZN6Output4isonEv+0x54>
    7be8:	95 95       	asr	r25
    7bea:	87 95       	ror	r24
    7bec:	0a 94       	dec	r0
    7bee:	e2 f7       	brpl	.-8      	; 0x7be8 <_ZN6Output4isonEv+0x50>
    7bf0:	81 70       	andi	r24, 0x01	; 1
    7bf2:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		case 'D':
			if ((PORTD&(1<<Pin)))
    7bf4:	2b b1       	in	r18, 0x0b	; 11
    7bf6:	30 e0       	ldi	r19, 0x00	; 0
    7bf8:	c9 01       	movw	r24, r18
    7bfa:	01 80       	ldd	r0, Z+1	; 0x01
    7bfc:	02 c0       	rjmp	.+4      	; 0x7c02 <_ZN6Output4isonEv+0x6a>
    7bfe:	95 95       	asr	r25
    7c00:	87 95       	ror	r24
    7c02:	0a 94       	dec	r0
    7c04:	e2 f7       	brpl	.-8      	; 0x7bfe <_ZN6Output4isonEv+0x66>
    7c06:	81 70       	andi	r24, 0x01	; 1
    7c08:	08 95       	ret
			{
				returnparam = 1;
			}
			break;
		default:
		returnparam = 2;
    7c0a:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}
	return returnparam;
}
    7c0c:	08 95       	ret

00007c0e <_ZN6Output3offEv>:

void Output::off(){
    7c0e:	fc 01       	movw	r30, r24
	switch (Port)
    7c10:	90 81       	ld	r25, Z
    7c12:	92 34       	cpi	r25, 0x42	; 66
    7c14:	b1 f0       	breq	.+44     	; 0x7c42 <_ZN6Output3offEv+0x34>
    7c16:	18 f4       	brcc	.+6      	; 0x7c1e <_ZN6Output3offEv+0x10>
    7c18:	91 34       	cpi	r25, 0x41	; 65
    7c1a:	31 f0       	breq	.+12     	; 0x7c28 <_ZN6Output3offEv+0x1a>
    7c1c:	08 95       	ret
    7c1e:	93 34       	cpi	r25, 0x43	; 67
    7c20:	e9 f0       	breq	.+58     	; 0x7c5c <_ZN6Output3offEv+0x4e>
    7c22:	94 34       	cpi	r25, 0x44	; 68
    7c24:	41 f1       	breq	.+80     	; 0x7c76 <_ZN6Output3offEv+0x68>
    7c26:	08 95       	ret
	{
		case 'A':
			PORTA &= ~(1<<Pin);
    7c28:	22 b1       	in	r18, 0x02	; 2
    7c2a:	81 e0       	ldi	r24, 0x01	; 1
    7c2c:	90 e0       	ldi	r25, 0x00	; 0
    7c2e:	01 80       	ldd	r0, Z+1	; 0x01
    7c30:	02 c0       	rjmp	.+4      	; 0x7c36 <_ZN6Output3offEv+0x28>
    7c32:	88 0f       	add	r24, r24
    7c34:	99 1f       	adc	r25, r25
    7c36:	0a 94       	dec	r0
    7c38:	e2 f7       	brpl	.-8      	; 0x7c32 <_ZN6Output3offEv+0x24>
    7c3a:	80 95       	com	r24
    7c3c:	82 23       	and	r24, r18
    7c3e:	82 b9       	out	0x02, r24	; 2
			break;
    7c40:	08 95       	ret
		case 'B':
			PORTB &= ~(1<<Pin);
    7c42:	25 b1       	in	r18, 0x05	; 5
    7c44:	81 e0       	ldi	r24, 0x01	; 1
    7c46:	90 e0       	ldi	r25, 0x00	; 0
    7c48:	01 80       	ldd	r0, Z+1	; 0x01
    7c4a:	02 c0       	rjmp	.+4      	; 0x7c50 <_ZN6Output3offEv+0x42>
    7c4c:	88 0f       	add	r24, r24
    7c4e:	99 1f       	adc	r25, r25
    7c50:	0a 94       	dec	r0
    7c52:	e2 f7       	brpl	.-8      	; 0x7c4c <_ZN6Output3offEv+0x3e>
    7c54:	80 95       	com	r24
    7c56:	82 23       	and	r24, r18
    7c58:	85 b9       	out	0x05, r24	; 5
			break;
    7c5a:	08 95       	ret
		case 'C':
			PORTC &= ~(1<<Pin);
    7c5c:	28 b1       	in	r18, 0x08	; 8
    7c5e:	81 e0       	ldi	r24, 0x01	; 1
    7c60:	90 e0       	ldi	r25, 0x00	; 0
    7c62:	01 80       	ldd	r0, Z+1	; 0x01
    7c64:	02 c0       	rjmp	.+4      	; 0x7c6a <_ZN6Output3offEv+0x5c>
    7c66:	88 0f       	add	r24, r24
    7c68:	99 1f       	adc	r25, r25
    7c6a:	0a 94       	dec	r0
    7c6c:	e2 f7       	brpl	.-8      	; 0x7c66 <_ZN6Output3offEv+0x58>
    7c6e:	80 95       	com	r24
    7c70:	82 23       	and	r24, r18
    7c72:	88 b9       	out	0x08, r24	; 8
			break;
    7c74:	08 95       	ret
		case 'D':
			PORTD &= ~(1<<Pin);
    7c76:	2b b1       	in	r18, 0x0b	; 11
    7c78:	81 e0       	ldi	r24, 0x01	; 1
    7c7a:	90 e0       	ldi	r25, 0x00	; 0
    7c7c:	01 80       	ldd	r0, Z+1	; 0x01
    7c7e:	02 c0       	rjmp	.+4      	; 0x7c84 <_ZN6Output3offEv+0x76>
    7c80:	88 0f       	add	r24, r24
    7c82:	99 1f       	adc	r25, r25
    7c84:	0a 94       	dec	r0
    7c86:	e2 f7       	brpl	.-8      	; 0x7c80 <_ZN6Output3offEv+0x72>
    7c88:	80 95       	com	r24
    7c8a:	82 23       	and	r24, r18
    7c8c:	8b b9       	out	0x0b, r24	; 11
    7c8e:	08 95       	ret

00007c90 <_ZN3RTCD1Ev>:
	Tag=7;
	Monat=9;
	Jahr=15;
	ausgabedatumneu();
	ausgabezeitneu();
}
    7c90:	08 95       	ret

00007c92 <_ZN3RTC6WeckerEv>:
    7c92:	fc 01       	movw	r30, r24
    7c94:	80 8d       	ldd	r24, Z+24	; 0x18
    7c96:	83 ff       	sbrs	r24, 3
    7c98:	0c c0       	rjmp	.+24     	; 0x7cb2 <_ZN3RTC6WeckerEv+0x20>
    7c9a:	84 fd       	sbrc	r24, 4
    7c9c:	0a c0       	rjmp	.+20     	; 0x7cb2 <_ZN3RTC6WeckerEv+0x20>
    7c9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    7ca0:	90 89       	ldd	r25, Z+16	; 0x10
    7ca2:	29 13       	cpse	r18, r25
    7ca4:	06 c0       	rjmp	.+12     	; 0x7cb2 <_ZN3RTC6WeckerEv+0x20>
    7ca6:	21 8d       	ldd	r18, Z+25	; 0x19
    7ca8:	91 89       	ldd	r25, Z+17	; 0x11
    7caa:	29 13       	cpse	r18, r25
    7cac:	02 c0       	rjmp	.+4      	; 0x7cb2 <_ZN3RTC6WeckerEv+0x20>
    7cae:	80 61       	ori	r24, 0x10	; 16
    7cb0:	80 8f       	std	Z+24, r24	; 0x18
    7cb2:	08 95       	ret

00007cb4 <_ZN3RTC14ausgabezeitneuEv>:
    7cb4:	fc 01       	movw	r30, r24
    7cb6:	20 89       	ldd	r18, Z+16	; 0x10
    7cb8:	9d ec       	ldi	r25, 0xCD	; 205
    7cba:	29 9f       	mul	r18, r25
    7cbc:	81 2d       	mov	r24, r1
    7cbe:	11 24       	eor	r1, r1
    7cc0:	86 95       	lsr	r24
    7cc2:	86 95       	lsr	r24
    7cc4:	86 95       	lsr	r24
    7cc6:	30 e3       	ldi	r19, 0x30	; 48
    7cc8:	38 0f       	add	r19, r24
    7cca:	30 83       	st	Z, r19
    7ccc:	88 0f       	add	r24, r24
    7cce:	38 2f       	mov	r19, r24
    7cd0:	33 0f       	add	r19, r19
    7cd2:	33 0f       	add	r19, r19
    7cd4:	83 0f       	add	r24, r19
    7cd6:	28 1b       	sub	r18, r24
    7cd8:	20 5d       	subi	r18, 0xD0	; 208
    7cda:	21 83       	std	Z+1, r18	; 0x01
    7cdc:	21 89       	ldd	r18, Z+17	; 0x11
    7cde:	29 9f       	mul	r18, r25
    7ce0:	81 2d       	mov	r24, r1
    7ce2:	11 24       	eor	r1, r1
    7ce4:	86 95       	lsr	r24
    7ce6:	86 95       	lsr	r24
    7ce8:	86 95       	lsr	r24
    7cea:	30 e3       	ldi	r19, 0x30	; 48
    7cec:	38 0f       	add	r19, r24
    7cee:	33 83       	std	Z+3, r19	; 0x03
    7cf0:	88 0f       	add	r24, r24
    7cf2:	38 2f       	mov	r19, r24
    7cf4:	33 0f       	add	r19, r19
    7cf6:	33 0f       	add	r19, r19
    7cf8:	83 0f       	add	r24, r19
    7cfa:	28 1b       	sub	r18, r24
    7cfc:	20 5d       	subi	r18, 0xD0	; 208
    7cfe:	24 83       	std	Z+4, r18	; 0x04
    7d00:	82 89       	ldd	r24, Z+18	; 0x12
    7d02:	89 9f       	mul	r24, r25
    7d04:	91 2d       	mov	r25, r1
    7d06:	11 24       	eor	r1, r1
    7d08:	96 95       	lsr	r25
    7d0a:	96 95       	lsr	r25
    7d0c:	96 95       	lsr	r25
    7d0e:	20 e3       	ldi	r18, 0x30	; 48
    7d10:	29 0f       	add	r18, r25
    7d12:	26 83       	std	Z+6, r18	; 0x06
    7d14:	99 0f       	add	r25, r25
    7d16:	29 2f       	mov	r18, r25
    7d18:	22 0f       	add	r18, r18
    7d1a:	22 0f       	add	r18, r18
    7d1c:	92 0f       	add	r25, r18
    7d1e:	89 1b       	sub	r24, r25
    7d20:	80 5d       	subi	r24, 0xD0	; 208
    7d22:	87 83       	std	Z+7, r24	; 0x07
    7d24:	08 95       	ret

00007d26 <_ZN3RTC15ausgabedatumneuEv>:
    7d26:	fc 01       	movw	r30, r24
    7d28:	24 89       	ldd	r18, Z+20	; 0x14
    7d2a:	9d ec       	ldi	r25, 0xCD	; 205
    7d2c:	29 9f       	mul	r18, r25
    7d2e:	81 2d       	mov	r24, r1
    7d30:	11 24       	eor	r1, r1
    7d32:	86 95       	lsr	r24
    7d34:	86 95       	lsr	r24
    7d36:	86 95       	lsr	r24
    7d38:	30 e3       	ldi	r19, 0x30	; 48
    7d3a:	38 0f       	add	r19, r24
    7d3c:	30 87       	std	Z+8, r19	; 0x08
    7d3e:	88 0f       	add	r24, r24
    7d40:	38 2f       	mov	r19, r24
    7d42:	33 0f       	add	r19, r19
    7d44:	33 0f       	add	r19, r19
    7d46:	83 0f       	add	r24, r19
    7d48:	28 1b       	sub	r18, r24
    7d4a:	20 5d       	subi	r18, 0xD0	; 208
    7d4c:	21 87       	std	Z+9, r18	; 0x09
    7d4e:	26 89       	ldd	r18, Z+22	; 0x16
    7d50:	29 9f       	mul	r18, r25
    7d52:	81 2d       	mov	r24, r1
    7d54:	11 24       	eor	r1, r1
    7d56:	86 95       	lsr	r24
    7d58:	86 95       	lsr	r24
    7d5a:	86 95       	lsr	r24
    7d5c:	30 e3       	ldi	r19, 0x30	; 48
    7d5e:	38 0f       	add	r19, r24
    7d60:	33 87       	std	Z+11, r19	; 0x0b
    7d62:	88 0f       	add	r24, r24
    7d64:	38 2f       	mov	r19, r24
    7d66:	33 0f       	add	r19, r19
    7d68:	33 0f       	add	r19, r19
    7d6a:	83 0f       	add	r24, r19
    7d6c:	28 1b       	sub	r18, r24
    7d6e:	20 5d       	subi	r18, 0xD0	; 208
    7d70:	24 87       	std	Z+12, r18	; 0x0c
    7d72:	87 89       	ldd	r24, Z+23	; 0x17
    7d74:	89 9f       	mul	r24, r25
    7d76:	91 2d       	mov	r25, r1
    7d78:	11 24       	eor	r1, r1
    7d7a:	96 95       	lsr	r25
    7d7c:	96 95       	lsr	r25
    7d7e:	96 95       	lsr	r25
    7d80:	20 e3       	ldi	r18, 0x30	; 48
    7d82:	29 0f       	add	r18, r25
    7d84:	26 87       	std	Z+14, r18	; 0x0e
    7d86:	99 0f       	add	r25, r25
    7d88:	29 2f       	mov	r18, r25
    7d8a:	22 0f       	add	r18, r18
    7d8c:	22 0f       	add	r18, r18
    7d8e:	92 0f       	add	r25, r18
    7d90:	89 1b       	sub	r24, r25
    7d92:	80 5d       	subi	r24, 0xD0	; 208
    7d94:	87 87       	std	Z+15, r24	; 0x0f
    7d96:	08 95       	ret

00007d98 <_ZN3RTCC1Ev>:
    7d98:	cf 93       	push	r28
    7d9a:	df 93       	push	r29
    7d9c:	ec 01       	movw	r28, r24
    7d9e:	1a 8a       	std	Y+18, r1	; 0x12
    7da0:	1b 8a       	std	Y+19, r1	; 0x13
    7da2:	19 8a       	std	Y+17, r1	; 0x11
    7da4:	18 8a       	std	Y+16, r1	; 0x10
    7da6:	1c 8a       	std	Y+20, r1	; 0x14
    7da8:	1e 8a       	std	Y+22, r1	; 0x16
    7daa:	1f 8a       	std	Y+23, r1	; 0x17
    7dac:	1d 8a       	std	Y+21, r1	; 0x15
    7dae:	88 e2       	ldi	r24, 0x28	; 40
    7db0:	89 8f       	std	Y+25, r24	; 0x19
    7db2:	8a e0       	ldi	r24, 0x0A	; 10
    7db4:	8a 8f       	std	Y+26, r24	; 0x1a
    7db6:	1c 8e       	std	Y+28, r1	; 0x1c
    7db8:	1b 8e       	std	Y+27, r1	; 0x1b
    7dba:	1e 8e       	std	Y+30, r1	; 0x1e
    7dbc:	1d 8e       	std	Y+29, r1	; 0x1d
    7dbe:	fe 01       	movw	r30, r28
    7dc0:	ce 01       	movw	r24, r28
    7dc2:	08 96       	adiw	r24, 0x08	; 8
    7dc4:	dc 01       	movw	r26, r24
    7dc6:	11 92       	st	Z+, r1
    7dc8:	1d 92       	st	X+, r1
    7dca:	e8 17       	cp	r30, r24
    7dcc:	f9 07       	cpc	r31, r25
    7dce:	d9 f7       	brne	.-10     	; 0x7dc6 <_ZN3RTCC1Ev+0x2e>
    7dd0:	8a e3       	ldi	r24, 0x3A	; 58
    7dd2:	8a 83       	std	Y+2, r24	; 0x02
    7dd4:	8d 83       	std	Y+5, r24	; 0x05
    7dd6:	8e e2       	ldi	r24, 0x2E	; 46
    7dd8:	8a 87       	std	Y+10, r24	; 0x0a
    7dda:	8d 87       	std	Y+13, r24	; 0x0d
    7ddc:	ce 01       	movw	r24, r28
    7dde:	6a df       	rcall	.-300    	; 0x7cb4 <_ZN3RTC14ausgabezeitneuEv>
    7de0:	ce 01       	movw	r24, r28
    7de2:	a1 df       	rcall	.-190    	; 0x7d26 <_ZN3RTC15ausgabedatumneuEv>
    7de4:	df 91       	pop	r29
    7de6:	cf 91       	pop	r28
    7de8:	08 95       	ret

00007dea <_ZN3RTC8kalenderEv>:
    7dea:	fc 01       	movw	r30, r24
    7dec:	26 89       	ldd	r18, Z+22	; 0x16
    7dee:	32 2f       	mov	r19, r18
    7df0:	3d 7f       	andi	r19, 0xFD	; 253
    7df2:	34 30       	cpi	r19, 0x04	; 4
    7df4:	11 f0       	breq	.+4      	; 0x7dfa <_ZN3RTC8kalenderEv+0x10>
    7df6:	39 30       	cpi	r19, 0x09	; 9
    7df8:	91 f4       	brne	.+36     	; 0x7e1e <_ZN3RTC8kalenderEv+0x34>
    7dfa:	fc 01       	movw	r30, r24
    7dfc:	34 89       	ldd	r19, Z+20	; 0x14
    7dfe:	3f 31       	cpi	r19, 0x1F	; 31
    7e00:	b0 f1       	brcs	.+108    	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e02:	31 e0       	ldi	r19, 0x01	; 1
    7e04:	34 8b       	std	Z+20, r19	; 0x14
    7e06:	2f 5f       	subi	r18, 0xFF	; 255
    7e08:	2d 30       	cpi	r18, 0x0D	; 13
    7e0a:	10 f4       	brcc	.+4      	; 0x7e10 <_ZN3RTC8kalenderEv+0x26>
    7e0c:	26 8b       	std	Z+22, r18	; 0x16
    7e0e:	2f c0       	rjmp	.+94     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e10:	21 e0       	ldi	r18, 0x01	; 1
    7e12:	fc 01       	movw	r30, r24
    7e14:	26 8b       	std	Z+22, r18	; 0x16
    7e16:	27 89       	ldd	r18, Z+23	; 0x17
    7e18:	2f 5f       	subi	r18, 0xFF	; 255
    7e1a:	27 8b       	std	Z+23, r18	; 0x17
    7e1c:	28 c0       	rjmp	.+80     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e1e:	22 30       	cpi	r18, 0x02	; 2
    7e20:	a9 f4       	brne	.+42     	; 0x7e4c <_ZN3RTC8kalenderEv+0x62>
    7e22:	fc 01       	movw	r30, r24
    7e24:	27 89       	ldd	r18, Z+23	; 0x17
    7e26:	23 70       	andi	r18, 0x03	; 3
    7e28:	41 f4       	brne	.+16     	; 0x7e3a <_ZN3RTC8kalenderEv+0x50>
    7e2a:	24 89       	ldd	r18, Z+20	; 0x14
    7e2c:	2e 31       	cpi	r18, 0x1E	; 30
    7e2e:	f8 f0       	brcs	.+62     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e30:	21 e0       	ldi	r18, 0x01	; 1
    7e32:	24 8b       	std	Z+20, r18	; 0x14
    7e34:	23 e0       	ldi	r18, 0x03	; 3
    7e36:	26 8b       	std	Z+22, r18	; 0x16
    7e38:	1a c0       	rjmp	.+52     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e3a:	fc 01       	movw	r30, r24
    7e3c:	24 89       	ldd	r18, Z+20	; 0x14
    7e3e:	2d 31       	cpi	r18, 0x1D	; 29
    7e40:	b0 f0       	brcs	.+44     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e42:	21 e0       	ldi	r18, 0x01	; 1
    7e44:	24 8b       	std	Z+20, r18	; 0x14
    7e46:	23 e0       	ldi	r18, 0x03	; 3
    7e48:	26 8b       	std	Z+22, r18	; 0x16
    7e4a:	11 c0       	rjmp	.+34     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e4c:	fc 01       	movw	r30, r24
    7e4e:	34 89       	ldd	r19, Z+20	; 0x14
    7e50:	30 32       	cpi	r19, 0x20	; 32
    7e52:	68 f0       	brcs	.+26     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e54:	31 e0       	ldi	r19, 0x01	; 1
    7e56:	34 8b       	std	Z+20, r19	; 0x14
    7e58:	2f 5f       	subi	r18, 0xFF	; 255
    7e5a:	2d 30       	cpi	r18, 0x0D	; 13
    7e5c:	10 f4       	brcc	.+4      	; 0x7e62 <_ZN3RTC8kalenderEv+0x78>
    7e5e:	26 8b       	std	Z+22, r18	; 0x16
    7e60:	06 c0       	rjmp	.+12     	; 0x7e6e <_ZN3RTC8kalenderEv+0x84>
    7e62:	21 e0       	ldi	r18, 0x01	; 1
    7e64:	fc 01       	movw	r30, r24
    7e66:	26 8b       	std	Z+22, r18	; 0x16
    7e68:	27 89       	ldd	r18, Z+23	; 0x17
    7e6a:	2f 5f       	subi	r18, 0xFF	; 255
    7e6c:	27 8b       	std	Z+23, r18	; 0x17
    7e6e:	5b cf       	rjmp	.-330    	; 0x7d26 <_ZN3RTC15ausgabedatumneuEv>
    7e70:	08 95       	ret

00007e72 <_ZN3RTC4zeitEv>:
    7e72:	cf 93       	push	r28
    7e74:	df 93       	push	r29
    7e76:	ec 01       	movw	r28, r24
    7e78:	8a 89       	ldd	r24, Y+18	; 0x12
    7e7a:	8c 53       	subi	r24, 0x3C	; 60
    7e7c:	8d 38       	cpi	r24, 0x8D	; 141
    7e7e:	c0 f4       	brcc	.+48     	; 0x7eb0 <_ZN3RTC4zeitEv+0x3e>
    7e80:	1a 8a       	std	Y+18, r1	; 0x12
    7e82:	89 89       	ldd	r24, Y+17	; 0x11
    7e84:	8f 5f       	subi	r24, 0xFF	; 255
    7e86:	89 8b       	std	Y+17, r24	; 0x11
    7e88:	98 8d       	ldd	r25, Y+24	; 0x18
    7e8a:	94 60       	ori	r25, 0x04	; 4
    7e8c:	98 8f       	std	Y+24, r25	; 0x18
    7e8e:	8c 33       	cpi	r24, 0x3C	; 60
    7e90:	68 f0       	brcs	.+26     	; 0x7eac <_ZN3RTC4zeitEv+0x3a>
    7e92:	19 8a       	std	Y+17, r1	; 0x11
    7e94:	88 89       	ldd	r24, Y+16	; 0x10
    7e96:	8f 5f       	subi	r24, 0xFF	; 255
    7e98:	88 31       	cpi	r24, 0x18	; 24
    7e9a:	10 f4       	brcc	.+4      	; 0x7ea0 <_ZN3RTC4zeitEv+0x2e>
    7e9c:	88 8b       	std	Y+16, r24	; 0x10
    7e9e:	06 c0       	rjmp	.+12     	; 0x7eac <_ZN3RTC4zeitEv+0x3a>
    7ea0:	18 8a       	std	Y+16, r1	; 0x10
    7ea2:	8c 89       	ldd	r24, Y+20	; 0x14
    7ea4:	8f 5f       	subi	r24, 0xFF	; 255
    7ea6:	8c 8b       	std	Y+20, r24	; 0x14
    7ea8:	ce 01       	movw	r24, r28
    7eaa:	9f df       	rcall	.-194    	; 0x7dea <_ZN3RTC8kalenderEv>
    7eac:	ce 01       	movw	r24, r28
    7eae:	f1 de       	rcall	.-542    	; 0x7c92 <_ZN3RTC6WeckerEv>
    7eb0:	ce 01       	movw	r24, r28
    7eb2:	00 df       	rcall	.-512    	; 0x7cb4 <_ZN3RTC14ausgabezeitneuEv>
    7eb4:	88 8d       	ldd	r24, Y+24	; 0x18
    7eb6:	85 ff       	sbrs	r24, 5
    7eb8:	0b c0       	rjmp	.+22     	; 0x7ed0 <_ZN3RTC4zeitEv+0x5e>
    7eba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7ebc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7ebe:	21 50       	subi	r18, 0x01	; 1
    7ec0:	31 09       	sbc	r19, r1
    7ec2:	3c 8f       	std	Y+28, r19	; 0x1c
    7ec4:	2b 8f       	std	Y+27, r18	; 0x1b
    7ec6:	23 2b       	or	r18, r19
    7ec8:	19 f4       	brne	.+6      	; 0x7ed0 <_ZN3RTC4zeitEv+0x5e>
    7eca:	8f 7d       	andi	r24, 0xDF	; 223
    7ecc:	81 60       	ori	r24, 0x01	; 1
    7ece:	88 8f       	std	Y+24, r24	; 0x18
    7ed0:	88 8d       	ldd	r24, Y+24	; 0x18
    7ed2:	86 ff       	sbrs	r24, 6
    7ed4:	05 c0       	rjmp	.+10     	; 0x7ee0 <_ZN3RTC4zeitEv+0x6e>
    7ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7ed8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7eda:	01 96       	adiw	r24, 0x01	; 1
    7edc:	9e 8f       	std	Y+30, r25	; 0x1e
    7ede:	8d 8f       	std	Y+29, r24	; 0x1d
    7ee0:	80 e0       	ldi	r24, 0x00	; 0
    7ee2:	df 91       	pop	r29
    7ee4:	cf 91       	pop	r28
    7ee6:	08 95       	ret

00007ee8 <_ZN3RTC8RTCstartEv>:

void RTC::RTCstart(){
    7ee8:	fc 01       	movw	r30, r24
	//Einstellungen des Ausgabebuffers
	msg_uhr[0]='0';
    7eea:	80 e3       	ldi	r24, 0x30	; 48
    7eec:	80 83       	st	Z, r24
	msg_uhr[1]='0';
    7eee:	81 83       	std	Z+1, r24	; 0x01
	msg_uhr[2]=':';
    7ef0:	9a e3       	ldi	r25, 0x3A	; 58
    7ef2:	92 83       	std	Z+2, r25	; 0x02
	msg_uhr[3]='0';
    7ef4:	83 83       	std	Z+3, r24	; 0x03
	msg_uhr[4]='0';
    7ef6:	84 83       	std	Z+4, r24	; 0x04
	msg_uhr[5]=':';
    7ef8:	95 83       	std	Z+5, r25	; 0x05
	msg_uhr[6]='0';
    7efa:	86 83       	std	Z+6, r24	; 0x06
	msg_uhr[7]='0';
    7efc:	87 83       	std	Z+7, r24	; 0x07
	interupts = 0;
    7efe:	10 8e       	std	Z+24, r1	; 0x18
	//Timer2 als 1ms Timer fuer die RTC
	//asynchron mit 32.768 kHz 
	TCNT2 = TIMER2RTCTIME;
    7f00:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1<<AS2);
    7f04:	e6 eb       	ldi	r30, 0xB6	; 182
    7f06:	f0 e0       	ldi	r31, 0x00	; 0
    7f08:	80 81       	ld	r24, Z
    7f0a:	80 62       	ori	r24, 0x20	; 32
    7f0c:	80 83       	st	Z, r24
	TIMSK2 = (1<<TOIE2);
    7f0e:	81 e0       	ldi	r24, 0x01	; 1
    7f10:	80 93 70 00 	sts	0x0070, r24
	TCCR2B = (1<<CS22) | (1<<CS20);		//Vorteiler 256
    7f14:	85 e0       	ldi	r24, 0x05	; 5
    7f16:	80 93 b1 00 	sts	0x00B1, r24
    7f1a:	08 95       	ret

00007f1c <_ZN3RTC7RTCstopEv>:
}

void RTC::RTCstop(){
	TCCR2B &= ~((1<<CS22) | (1<<CS21));
    7f1c:	e1 eb       	ldi	r30, 0xB1	; 177
    7f1e:	f0 e0       	ldi	r31, 0x00	; 0
    7f20:	80 81       	ld	r24, Z
    7f22:	89 7f       	andi	r24, 0xF9	; 249
    7f24:	80 83       	st	Z, r24
    7f26:	08 95       	ret

00007f28 <__subsf3>:
    7f28:	50 58       	subi	r21, 0x80	; 128

00007f2a <__addsf3>:
    7f2a:	bb 27       	eor	r27, r27
    7f2c:	aa 27       	eor	r26, r26
    7f2e:	0e d0       	rcall	.+28     	; 0x7f4c <__addsf3x>
    7f30:	c1 c1       	rjmp	.+898    	; 0x82b4 <__fp_round>
    7f32:	8a d1       	rcall	.+788    	; 0x8248 <__fp_pscA>
    7f34:	30 f0       	brcs	.+12     	; 0x7f42 <__addsf3+0x18>
    7f36:	8f d1       	rcall	.+798    	; 0x8256 <__fp_pscB>
    7f38:	20 f0       	brcs	.+8      	; 0x7f42 <__addsf3+0x18>
    7f3a:	31 f4       	brne	.+12     	; 0x7f48 <__addsf3+0x1e>
    7f3c:	9f 3f       	cpi	r25, 0xFF	; 255
    7f3e:	11 f4       	brne	.+4      	; 0x7f44 <__addsf3+0x1a>
    7f40:	1e f4       	brtc	.+6      	; 0x7f48 <__addsf3+0x1e>
    7f42:	5a c1       	rjmp	.+692    	; 0x81f8 <__fp_nan>
    7f44:	0e f4       	brtc	.+2      	; 0x7f48 <__addsf3+0x1e>
    7f46:	e0 95       	com	r30
    7f48:	e7 fb       	bst	r30, 7
    7f4a:	50 c1       	rjmp	.+672    	; 0x81ec <__fp_inf>

00007f4c <__addsf3x>:
    7f4c:	e9 2f       	mov	r30, r25
    7f4e:	d4 d1       	rcall	.+936    	; 0x82f8 <__fp_split3>
    7f50:	80 f3       	brcs	.-32     	; 0x7f32 <__addsf3+0x8>
    7f52:	ba 17       	cp	r27, r26
    7f54:	62 07       	cpc	r22, r18
    7f56:	73 07       	cpc	r23, r19
    7f58:	84 07       	cpc	r24, r20
    7f5a:	95 07       	cpc	r25, r21
    7f5c:	18 f0       	brcs	.+6      	; 0x7f64 <__addsf3x+0x18>
    7f5e:	71 f4       	brne	.+28     	; 0x7f7c <__addsf3x+0x30>
    7f60:	9e f5       	brtc	.+102    	; 0x7fc8 <__addsf3x+0x7c>
    7f62:	ec c1       	rjmp	.+984    	; 0x833c <__fp_zero>
    7f64:	0e f4       	brtc	.+2      	; 0x7f68 <__addsf3x+0x1c>
    7f66:	e0 95       	com	r30
    7f68:	0b 2e       	mov	r0, r27
    7f6a:	ba 2f       	mov	r27, r26
    7f6c:	a0 2d       	mov	r26, r0
    7f6e:	0b 01       	movw	r0, r22
    7f70:	b9 01       	movw	r22, r18
    7f72:	90 01       	movw	r18, r0
    7f74:	0c 01       	movw	r0, r24
    7f76:	ca 01       	movw	r24, r20
    7f78:	a0 01       	movw	r20, r0
    7f7a:	11 24       	eor	r1, r1
    7f7c:	ff 27       	eor	r31, r31
    7f7e:	59 1b       	sub	r21, r25
    7f80:	99 f0       	breq	.+38     	; 0x7fa8 <__addsf3x+0x5c>
    7f82:	59 3f       	cpi	r21, 0xF9	; 249
    7f84:	50 f4       	brcc	.+20     	; 0x7f9a <__addsf3x+0x4e>
    7f86:	50 3e       	cpi	r21, 0xE0	; 224
    7f88:	68 f1       	brcs	.+90     	; 0x7fe4 <__addsf3x+0x98>
    7f8a:	1a 16       	cp	r1, r26
    7f8c:	f0 40       	sbci	r31, 0x00	; 0
    7f8e:	a2 2f       	mov	r26, r18
    7f90:	23 2f       	mov	r18, r19
    7f92:	34 2f       	mov	r19, r20
    7f94:	44 27       	eor	r20, r20
    7f96:	58 5f       	subi	r21, 0xF8	; 248
    7f98:	f3 cf       	rjmp	.-26     	; 0x7f80 <__addsf3x+0x34>
    7f9a:	46 95       	lsr	r20
    7f9c:	37 95       	ror	r19
    7f9e:	27 95       	ror	r18
    7fa0:	a7 95       	ror	r26
    7fa2:	f0 40       	sbci	r31, 0x00	; 0
    7fa4:	53 95       	inc	r21
    7fa6:	c9 f7       	brne	.-14     	; 0x7f9a <__addsf3x+0x4e>
    7fa8:	7e f4       	brtc	.+30     	; 0x7fc8 <__addsf3x+0x7c>
    7faa:	1f 16       	cp	r1, r31
    7fac:	ba 0b       	sbc	r27, r26
    7fae:	62 0b       	sbc	r22, r18
    7fb0:	73 0b       	sbc	r23, r19
    7fb2:	84 0b       	sbc	r24, r20
    7fb4:	ba f0       	brmi	.+46     	; 0x7fe4 <__addsf3x+0x98>
    7fb6:	91 50       	subi	r25, 0x01	; 1
    7fb8:	a1 f0       	breq	.+40     	; 0x7fe2 <__addsf3x+0x96>
    7fba:	ff 0f       	add	r31, r31
    7fbc:	bb 1f       	adc	r27, r27
    7fbe:	66 1f       	adc	r22, r22
    7fc0:	77 1f       	adc	r23, r23
    7fc2:	88 1f       	adc	r24, r24
    7fc4:	c2 f7       	brpl	.-16     	; 0x7fb6 <__addsf3x+0x6a>
    7fc6:	0e c0       	rjmp	.+28     	; 0x7fe4 <__addsf3x+0x98>
    7fc8:	ba 0f       	add	r27, r26
    7fca:	62 1f       	adc	r22, r18
    7fcc:	73 1f       	adc	r23, r19
    7fce:	84 1f       	adc	r24, r20
    7fd0:	48 f4       	brcc	.+18     	; 0x7fe4 <__addsf3x+0x98>
    7fd2:	87 95       	ror	r24
    7fd4:	77 95       	ror	r23
    7fd6:	67 95       	ror	r22
    7fd8:	b7 95       	ror	r27
    7fda:	f7 95       	ror	r31
    7fdc:	9e 3f       	cpi	r25, 0xFE	; 254
    7fde:	08 f0       	brcs	.+2      	; 0x7fe2 <__addsf3x+0x96>
    7fe0:	b3 cf       	rjmp	.-154    	; 0x7f48 <__addsf3+0x1e>
    7fe2:	93 95       	inc	r25
    7fe4:	88 0f       	add	r24, r24
    7fe6:	08 f0       	brcs	.+2      	; 0x7fea <__addsf3x+0x9e>
    7fe8:	99 27       	eor	r25, r25
    7fea:	ee 0f       	add	r30, r30
    7fec:	97 95       	ror	r25
    7fee:	87 95       	ror	r24
    7ff0:	08 95       	ret

00007ff2 <cos>:
    7ff2:	39 d1       	rcall	.+626    	; 0x8266 <__fp_rempio2>
    7ff4:	e3 95       	inc	r30
    7ff6:	6f c1       	rjmp	.+734    	; 0x82d6 <__fp_sinus>

00007ff8 <__divsf3>:
    7ff8:	0c d0       	rcall	.+24     	; 0x8012 <__divsf3x>
    7ffa:	5c c1       	rjmp	.+696    	; 0x82b4 <__fp_round>
    7ffc:	2c d1       	rcall	.+600    	; 0x8256 <__fp_pscB>
    7ffe:	40 f0       	brcs	.+16     	; 0x8010 <__divsf3+0x18>
    8000:	23 d1       	rcall	.+582    	; 0x8248 <__fp_pscA>
    8002:	30 f0       	brcs	.+12     	; 0x8010 <__divsf3+0x18>
    8004:	21 f4       	brne	.+8      	; 0x800e <__divsf3+0x16>
    8006:	5f 3f       	cpi	r21, 0xFF	; 255
    8008:	19 f0       	breq	.+6      	; 0x8010 <__divsf3+0x18>
    800a:	f0 c0       	rjmp	.+480    	; 0x81ec <__fp_inf>
    800c:	51 11       	cpse	r21, r1
    800e:	97 c1       	rjmp	.+814    	; 0x833e <__fp_szero>
    8010:	f3 c0       	rjmp	.+486    	; 0x81f8 <__fp_nan>

00008012 <__divsf3x>:
    8012:	72 d1       	rcall	.+740    	; 0x82f8 <__fp_split3>
    8014:	98 f3       	brcs	.-26     	; 0x7ffc <__divsf3+0x4>

00008016 <__divsf3_pse>:
    8016:	99 23       	and	r25, r25
    8018:	c9 f3       	breq	.-14     	; 0x800c <__divsf3+0x14>
    801a:	55 23       	and	r21, r21
    801c:	b1 f3       	breq	.-20     	; 0x800a <__divsf3+0x12>
    801e:	95 1b       	sub	r25, r21
    8020:	55 0b       	sbc	r21, r21
    8022:	bb 27       	eor	r27, r27
    8024:	aa 27       	eor	r26, r26
    8026:	62 17       	cp	r22, r18
    8028:	73 07       	cpc	r23, r19
    802a:	84 07       	cpc	r24, r20
    802c:	38 f0       	brcs	.+14     	; 0x803c <__divsf3_pse+0x26>
    802e:	9f 5f       	subi	r25, 0xFF	; 255
    8030:	5f 4f       	sbci	r21, 0xFF	; 255
    8032:	22 0f       	add	r18, r18
    8034:	33 1f       	adc	r19, r19
    8036:	44 1f       	adc	r20, r20
    8038:	aa 1f       	adc	r26, r26
    803a:	a9 f3       	breq	.-22     	; 0x8026 <__divsf3_pse+0x10>
    803c:	33 d0       	rcall	.+102    	; 0x80a4 <__divsf3_pse+0x8e>
    803e:	0e 2e       	mov	r0, r30
    8040:	3a f0       	brmi	.+14     	; 0x8050 <__divsf3_pse+0x3a>
    8042:	e0 e8       	ldi	r30, 0x80	; 128
    8044:	30 d0       	rcall	.+96     	; 0x80a6 <__divsf3_pse+0x90>
    8046:	91 50       	subi	r25, 0x01	; 1
    8048:	50 40       	sbci	r21, 0x00	; 0
    804a:	e6 95       	lsr	r30
    804c:	00 1c       	adc	r0, r0
    804e:	ca f7       	brpl	.-14     	; 0x8042 <__divsf3_pse+0x2c>
    8050:	29 d0       	rcall	.+82     	; 0x80a4 <__divsf3_pse+0x8e>
    8052:	fe 2f       	mov	r31, r30
    8054:	27 d0       	rcall	.+78     	; 0x80a4 <__divsf3_pse+0x8e>
    8056:	66 0f       	add	r22, r22
    8058:	77 1f       	adc	r23, r23
    805a:	88 1f       	adc	r24, r24
    805c:	bb 1f       	adc	r27, r27
    805e:	26 17       	cp	r18, r22
    8060:	37 07       	cpc	r19, r23
    8062:	48 07       	cpc	r20, r24
    8064:	ab 07       	cpc	r26, r27
    8066:	b0 e8       	ldi	r27, 0x80	; 128
    8068:	09 f0       	breq	.+2      	; 0x806c <__divsf3_pse+0x56>
    806a:	bb 0b       	sbc	r27, r27
    806c:	80 2d       	mov	r24, r0
    806e:	bf 01       	movw	r22, r30
    8070:	ff 27       	eor	r31, r31
    8072:	93 58       	subi	r25, 0x83	; 131
    8074:	5f 4f       	sbci	r21, 0xFF	; 255
    8076:	2a f0       	brmi	.+10     	; 0x8082 <__divsf3_pse+0x6c>
    8078:	9e 3f       	cpi	r25, 0xFE	; 254
    807a:	51 05       	cpc	r21, r1
    807c:	68 f0       	brcs	.+26     	; 0x8098 <__divsf3_pse+0x82>
    807e:	b6 c0       	rjmp	.+364    	; 0x81ec <__fp_inf>
    8080:	5e c1       	rjmp	.+700    	; 0x833e <__fp_szero>
    8082:	5f 3f       	cpi	r21, 0xFF	; 255
    8084:	ec f3       	brlt	.-6      	; 0x8080 <__divsf3_pse+0x6a>
    8086:	98 3e       	cpi	r25, 0xE8	; 232
    8088:	dc f3       	brlt	.-10     	; 0x8080 <__divsf3_pse+0x6a>
    808a:	86 95       	lsr	r24
    808c:	77 95       	ror	r23
    808e:	67 95       	ror	r22
    8090:	b7 95       	ror	r27
    8092:	f7 95       	ror	r31
    8094:	9f 5f       	subi	r25, 0xFF	; 255
    8096:	c9 f7       	brne	.-14     	; 0x808a <__divsf3_pse+0x74>
    8098:	88 0f       	add	r24, r24
    809a:	91 1d       	adc	r25, r1
    809c:	96 95       	lsr	r25
    809e:	87 95       	ror	r24
    80a0:	97 f9       	bld	r25, 7
    80a2:	08 95       	ret
    80a4:	e1 e0       	ldi	r30, 0x01	; 1
    80a6:	66 0f       	add	r22, r22
    80a8:	77 1f       	adc	r23, r23
    80aa:	88 1f       	adc	r24, r24
    80ac:	bb 1f       	adc	r27, r27
    80ae:	62 17       	cp	r22, r18
    80b0:	73 07       	cpc	r23, r19
    80b2:	84 07       	cpc	r24, r20
    80b4:	ba 07       	cpc	r27, r26
    80b6:	20 f0       	brcs	.+8      	; 0x80c0 <__divsf3_pse+0xaa>
    80b8:	62 1b       	sub	r22, r18
    80ba:	73 0b       	sbc	r23, r19
    80bc:	84 0b       	sbc	r24, r20
    80be:	ba 0b       	sbc	r27, r26
    80c0:	ee 1f       	adc	r30, r30
    80c2:	88 f7       	brcc	.-30     	; 0x80a6 <__divsf3_pse+0x90>
    80c4:	e0 95       	com	r30
    80c6:	08 95       	ret

000080c8 <__fixsfsi>:
    80c8:	04 d0       	rcall	.+8      	; 0x80d2 <__fixunssfsi>
    80ca:	68 94       	set
    80cc:	b1 11       	cpse	r27, r1
    80ce:	37 c1       	rjmp	.+622    	; 0x833e <__fp_szero>
    80d0:	08 95       	ret

000080d2 <__fixunssfsi>:
    80d2:	1a d1       	rcall	.+564    	; 0x8308 <__fp_splitA>
    80d4:	88 f0       	brcs	.+34     	; 0x80f8 <__fixunssfsi+0x26>
    80d6:	9f 57       	subi	r25, 0x7F	; 127
    80d8:	90 f0       	brcs	.+36     	; 0x80fe <__fixunssfsi+0x2c>
    80da:	b9 2f       	mov	r27, r25
    80dc:	99 27       	eor	r25, r25
    80de:	b7 51       	subi	r27, 0x17	; 23
    80e0:	a0 f0       	brcs	.+40     	; 0x810a <__fixunssfsi+0x38>
    80e2:	d1 f0       	breq	.+52     	; 0x8118 <__fixunssfsi+0x46>
    80e4:	66 0f       	add	r22, r22
    80e6:	77 1f       	adc	r23, r23
    80e8:	88 1f       	adc	r24, r24
    80ea:	99 1f       	adc	r25, r25
    80ec:	1a f0       	brmi	.+6      	; 0x80f4 <__fixunssfsi+0x22>
    80ee:	ba 95       	dec	r27
    80f0:	c9 f7       	brne	.-14     	; 0x80e4 <__fixunssfsi+0x12>
    80f2:	12 c0       	rjmp	.+36     	; 0x8118 <__fixunssfsi+0x46>
    80f4:	b1 30       	cpi	r27, 0x01	; 1
    80f6:	81 f0       	breq	.+32     	; 0x8118 <__fixunssfsi+0x46>
    80f8:	21 d1       	rcall	.+578    	; 0x833c <__fp_zero>
    80fa:	b1 e0       	ldi	r27, 0x01	; 1
    80fc:	08 95       	ret
    80fe:	1e c1       	rjmp	.+572    	; 0x833c <__fp_zero>
    8100:	67 2f       	mov	r22, r23
    8102:	78 2f       	mov	r23, r24
    8104:	88 27       	eor	r24, r24
    8106:	b8 5f       	subi	r27, 0xF8	; 248
    8108:	39 f0       	breq	.+14     	; 0x8118 <__fixunssfsi+0x46>
    810a:	b9 3f       	cpi	r27, 0xF9	; 249
    810c:	cc f3       	brlt	.-14     	; 0x8100 <__fixunssfsi+0x2e>
    810e:	86 95       	lsr	r24
    8110:	77 95       	ror	r23
    8112:	67 95       	ror	r22
    8114:	b3 95       	inc	r27
    8116:	d9 f7       	brne	.-10     	; 0x810e <__fixunssfsi+0x3c>
    8118:	3e f4       	brtc	.+14     	; 0x8128 <__fixunssfsi+0x56>
    811a:	90 95       	com	r25
    811c:	80 95       	com	r24
    811e:	70 95       	com	r23
    8120:	61 95       	neg	r22
    8122:	7f 4f       	sbci	r23, 0xFF	; 255
    8124:	8f 4f       	sbci	r24, 0xFF	; 255
    8126:	9f 4f       	sbci	r25, 0xFF	; 255
    8128:	08 95       	ret

0000812a <__floatunsisf>:
    812a:	e8 94       	clt
    812c:	09 c0       	rjmp	.+18     	; 0x8140 <__floatsisf+0x12>

0000812e <__floatsisf>:
    812e:	97 fb       	bst	r25, 7
    8130:	3e f4       	brtc	.+14     	; 0x8140 <__floatsisf+0x12>
    8132:	90 95       	com	r25
    8134:	80 95       	com	r24
    8136:	70 95       	com	r23
    8138:	61 95       	neg	r22
    813a:	7f 4f       	sbci	r23, 0xFF	; 255
    813c:	8f 4f       	sbci	r24, 0xFF	; 255
    813e:	9f 4f       	sbci	r25, 0xFF	; 255
    8140:	99 23       	and	r25, r25
    8142:	a9 f0       	breq	.+42     	; 0x816e <__floatsisf+0x40>
    8144:	f9 2f       	mov	r31, r25
    8146:	96 e9       	ldi	r25, 0x96	; 150
    8148:	bb 27       	eor	r27, r27
    814a:	93 95       	inc	r25
    814c:	f6 95       	lsr	r31
    814e:	87 95       	ror	r24
    8150:	77 95       	ror	r23
    8152:	67 95       	ror	r22
    8154:	b7 95       	ror	r27
    8156:	f1 11       	cpse	r31, r1
    8158:	f8 cf       	rjmp	.-16     	; 0x814a <__floatsisf+0x1c>
    815a:	fa f4       	brpl	.+62     	; 0x819a <__floatsisf+0x6c>
    815c:	bb 0f       	add	r27, r27
    815e:	11 f4       	brne	.+4      	; 0x8164 <__floatsisf+0x36>
    8160:	60 ff       	sbrs	r22, 0
    8162:	1b c0       	rjmp	.+54     	; 0x819a <__floatsisf+0x6c>
    8164:	6f 5f       	subi	r22, 0xFF	; 255
    8166:	7f 4f       	sbci	r23, 0xFF	; 255
    8168:	8f 4f       	sbci	r24, 0xFF	; 255
    816a:	9f 4f       	sbci	r25, 0xFF	; 255
    816c:	16 c0       	rjmp	.+44     	; 0x819a <__floatsisf+0x6c>
    816e:	88 23       	and	r24, r24
    8170:	11 f0       	breq	.+4      	; 0x8176 <__floatsisf+0x48>
    8172:	96 e9       	ldi	r25, 0x96	; 150
    8174:	11 c0       	rjmp	.+34     	; 0x8198 <__floatsisf+0x6a>
    8176:	77 23       	and	r23, r23
    8178:	21 f0       	breq	.+8      	; 0x8182 <__floatsisf+0x54>
    817a:	9e e8       	ldi	r25, 0x8E	; 142
    817c:	87 2f       	mov	r24, r23
    817e:	76 2f       	mov	r23, r22
    8180:	05 c0       	rjmp	.+10     	; 0x818c <__floatsisf+0x5e>
    8182:	66 23       	and	r22, r22
    8184:	71 f0       	breq	.+28     	; 0x81a2 <__floatsisf+0x74>
    8186:	96 e8       	ldi	r25, 0x86	; 134
    8188:	86 2f       	mov	r24, r22
    818a:	70 e0       	ldi	r23, 0x00	; 0
    818c:	60 e0       	ldi	r22, 0x00	; 0
    818e:	2a f0       	brmi	.+10     	; 0x819a <__floatsisf+0x6c>
    8190:	9a 95       	dec	r25
    8192:	66 0f       	add	r22, r22
    8194:	77 1f       	adc	r23, r23
    8196:	88 1f       	adc	r24, r24
    8198:	da f7       	brpl	.-10     	; 0x8190 <__floatsisf+0x62>
    819a:	88 0f       	add	r24, r24
    819c:	96 95       	lsr	r25
    819e:	87 95       	ror	r24
    81a0:	97 f9       	bld	r25, 7
    81a2:	08 95       	ret

000081a4 <__fp_cmp>:
    81a4:	99 0f       	add	r25, r25
    81a6:	00 08       	sbc	r0, r0
    81a8:	55 0f       	add	r21, r21
    81aa:	aa 0b       	sbc	r26, r26
    81ac:	e0 e8       	ldi	r30, 0x80	; 128
    81ae:	fe ef       	ldi	r31, 0xFE	; 254
    81b0:	16 16       	cp	r1, r22
    81b2:	17 06       	cpc	r1, r23
    81b4:	e8 07       	cpc	r30, r24
    81b6:	f9 07       	cpc	r31, r25
    81b8:	c0 f0       	brcs	.+48     	; 0x81ea <__fp_cmp+0x46>
    81ba:	12 16       	cp	r1, r18
    81bc:	13 06       	cpc	r1, r19
    81be:	e4 07       	cpc	r30, r20
    81c0:	f5 07       	cpc	r31, r21
    81c2:	98 f0       	brcs	.+38     	; 0x81ea <__fp_cmp+0x46>
    81c4:	62 1b       	sub	r22, r18
    81c6:	73 0b       	sbc	r23, r19
    81c8:	84 0b       	sbc	r24, r20
    81ca:	95 0b       	sbc	r25, r21
    81cc:	39 f4       	brne	.+14     	; 0x81dc <__fp_cmp+0x38>
    81ce:	0a 26       	eor	r0, r26
    81d0:	61 f0       	breq	.+24     	; 0x81ea <__fp_cmp+0x46>
    81d2:	23 2b       	or	r18, r19
    81d4:	24 2b       	or	r18, r20
    81d6:	25 2b       	or	r18, r21
    81d8:	21 f4       	brne	.+8      	; 0x81e2 <__fp_cmp+0x3e>
    81da:	08 95       	ret
    81dc:	0a 26       	eor	r0, r26
    81de:	09 f4       	brne	.+2      	; 0x81e2 <__fp_cmp+0x3e>
    81e0:	a1 40       	sbci	r26, 0x01	; 1
    81e2:	a6 95       	lsr	r26
    81e4:	8f ef       	ldi	r24, 0xFF	; 255
    81e6:	81 1d       	adc	r24, r1
    81e8:	81 1d       	adc	r24, r1
    81ea:	08 95       	ret

000081ec <__fp_inf>:
    81ec:	97 f9       	bld	r25, 7
    81ee:	9f 67       	ori	r25, 0x7F	; 127
    81f0:	80 e8       	ldi	r24, 0x80	; 128
    81f2:	70 e0       	ldi	r23, 0x00	; 0
    81f4:	60 e0       	ldi	r22, 0x00	; 0
    81f6:	08 95       	ret

000081f8 <__fp_nan>:
    81f8:	9f ef       	ldi	r25, 0xFF	; 255
    81fa:	80 ec       	ldi	r24, 0xC0	; 192
    81fc:	08 95       	ret

000081fe <__fp_powser>:
    81fe:	df 93       	push	r29
    8200:	cf 93       	push	r28
    8202:	1f 93       	push	r17
    8204:	0f 93       	push	r16
    8206:	ff 92       	push	r15
    8208:	ef 92       	push	r14
    820a:	df 92       	push	r13
    820c:	7b 01       	movw	r14, r22
    820e:	8c 01       	movw	r16, r24
    8210:	68 94       	set
    8212:	05 c0       	rjmp	.+10     	; 0x821e <__fp_powser+0x20>
    8214:	da 2e       	mov	r13, r26
    8216:	ef 01       	movw	r28, r30
    8218:	af d0       	rcall	.+350    	; 0x8378 <__mulsf3x>
    821a:	fe 01       	movw	r30, r28
    821c:	e8 94       	clt
    821e:	a5 91       	lpm	r26, Z+
    8220:	25 91       	lpm	r18, Z+
    8222:	35 91       	lpm	r19, Z+
    8224:	45 91       	lpm	r20, Z+
    8226:	55 91       	lpm	r21, Z+
    8228:	ae f3       	brts	.-22     	; 0x8214 <__fp_powser+0x16>
    822a:	ef 01       	movw	r28, r30
    822c:	8f de       	rcall	.-738    	; 0x7f4c <__addsf3x>
    822e:	fe 01       	movw	r30, r28
    8230:	97 01       	movw	r18, r14
    8232:	a8 01       	movw	r20, r16
    8234:	da 94       	dec	r13
    8236:	79 f7       	brne	.-34     	; 0x8216 <__fp_powser+0x18>
    8238:	df 90       	pop	r13
    823a:	ef 90       	pop	r14
    823c:	ff 90       	pop	r15
    823e:	0f 91       	pop	r16
    8240:	1f 91       	pop	r17
    8242:	cf 91       	pop	r28
    8244:	df 91       	pop	r29
    8246:	08 95       	ret

00008248 <__fp_pscA>:
    8248:	00 24       	eor	r0, r0
    824a:	0a 94       	dec	r0
    824c:	16 16       	cp	r1, r22
    824e:	17 06       	cpc	r1, r23
    8250:	18 06       	cpc	r1, r24
    8252:	09 06       	cpc	r0, r25
    8254:	08 95       	ret

00008256 <__fp_pscB>:
    8256:	00 24       	eor	r0, r0
    8258:	0a 94       	dec	r0
    825a:	12 16       	cp	r1, r18
    825c:	13 06       	cpc	r1, r19
    825e:	14 06       	cpc	r1, r20
    8260:	05 06       	cpc	r0, r21
    8262:	08 95       	ret
    8264:	c9 cf       	rjmp	.-110    	; 0x81f8 <__fp_nan>

00008266 <__fp_rempio2>:
    8266:	50 d0       	rcall	.+160    	; 0x8308 <__fp_splitA>
    8268:	e8 f3       	brcs	.-6      	; 0x8264 <__fp_pscB+0xe>
    826a:	e8 94       	clt
    826c:	e0 e0       	ldi	r30, 0x00	; 0
    826e:	bb 27       	eor	r27, r27
    8270:	9f 57       	subi	r25, 0x7F	; 127
    8272:	f0 f0       	brcs	.+60     	; 0x82b0 <__fp_rempio2+0x4a>
    8274:	2a ed       	ldi	r18, 0xDA	; 218
    8276:	3f e0       	ldi	r19, 0x0F	; 15
    8278:	49 ec       	ldi	r20, 0xC9	; 201
    827a:	06 c0       	rjmp	.+12     	; 0x8288 <__fp_rempio2+0x22>
    827c:	ee 0f       	add	r30, r30
    827e:	bb 0f       	add	r27, r27
    8280:	66 1f       	adc	r22, r22
    8282:	77 1f       	adc	r23, r23
    8284:	88 1f       	adc	r24, r24
    8286:	28 f0       	brcs	.+10     	; 0x8292 <__fp_rempio2+0x2c>
    8288:	b2 3a       	cpi	r27, 0xA2	; 162
    828a:	62 07       	cpc	r22, r18
    828c:	73 07       	cpc	r23, r19
    828e:	84 07       	cpc	r24, r20
    8290:	28 f0       	brcs	.+10     	; 0x829c <__fp_rempio2+0x36>
    8292:	b2 5a       	subi	r27, 0xA2	; 162
    8294:	62 0b       	sbc	r22, r18
    8296:	73 0b       	sbc	r23, r19
    8298:	84 0b       	sbc	r24, r20
    829a:	e3 95       	inc	r30
    829c:	9a 95       	dec	r25
    829e:	72 f7       	brpl	.-36     	; 0x827c <__fp_rempio2+0x16>
    82a0:	80 38       	cpi	r24, 0x80	; 128
    82a2:	30 f4       	brcc	.+12     	; 0x82b0 <__fp_rempio2+0x4a>
    82a4:	9a 95       	dec	r25
    82a6:	bb 0f       	add	r27, r27
    82a8:	66 1f       	adc	r22, r22
    82aa:	77 1f       	adc	r23, r23
    82ac:	88 1f       	adc	r24, r24
    82ae:	d2 f7       	brpl	.-12     	; 0x82a4 <__fp_rempio2+0x3e>
    82b0:	90 48       	sbci	r25, 0x80	; 128
    82b2:	3e c1       	rjmp	.+636    	; 0x8530 <__fp_mpack_finite>

000082b4 <__fp_round>:
    82b4:	09 2e       	mov	r0, r25
    82b6:	03 94       	inc	r0
    82b8:	00 0c       	add	r0, r0
    82ba:	11 f4       	brne	.+4      	; 0x82c0 <__fp_round+0xc>
    82bc:	88 23       	and	r24, r24
    82be:	52 f0       	brmi	.+20     	; 0x82d4 <__fp_round+0x20>
    82c0:	bb 0f       	add	r27, r27
    82c2:	40 f4       	brcc	.+16     	; 0x82d4 <__fp_round+0x20>
    82c4:	bf 2b       	or	r27, r31
    82c6:	11 f4       	brne	.+4      	; 0x82cc <__fp_round+0x18>
    82c8:	60 ff       	sbrs	r22, 0
    82ca:	04 c0       	rjmp	.+8      	; 0x82d4 <__fp_round+0x20>
    82cc:	6f 5f       	subi	r22, 0xFF	; 255
    82ce:	7f 4f       	sbci	r23, 0xFF	; 255
    82d0:	8f 4f       	sbci	r24, 0xFF	; 255
    82d2:	9f 4f       	sbci	r25, 0xFF	; 255
    82d4:	08 95       	ret

000082d6 <__fp_sinus>:
    82d6:	ef 93       	push	r30
    82d8:	e0 ff       	sbrs	r30, 0
    82da:	06 c0       	rjmp	.+12     	; 0x82e8 <__fp_sinus+0x12>
    82dc:	a2 ea       	ldi	r26, 0xA2	; 162
    82de:	2a ed       	ldi	r18, 0xDA	; 218
    82e0:	3f e0       	ldi	r19, 0x0F	; 15
    82e2:	49 ec       	ldi	r20, 0xC9	; 201
    82e4:	5f eb       	ldi	r21, 0xBF	; 191
    82e6:	32 de       	rcall	.-924    	; 0x7f4c <__addsf3x>
    82e8:	e5 df       	rcall	.-54     	; 0x82b4 <__fp_round>
    82ea:	0f 90       	pop	r0
    82ec:	03 94       	inc	r0
    82ee:	01 fc       	sbrc	r0, 1
    82f0:	90 58       	subi	r25, 0x80	; 128
    82f2:	e6 ef       	ldi	r30, 0xF6	; 246
    82f4:	f1 e0       	ldi	r31, 0x01	; 1
    82f6:	28 c1       	rjmp	.+592    	; 0x8548 <__fp_powsodd>

000082f8 <__fp_split3>:
    82f8:	57 fd       	sbrc	r21, 7
    82fa:	90 58       	subi	r25, 0x80	; 128
    82fc:	44 0f       	add	r20, r20
    82fe:	55 1f       	adc	r21, r21
    8300:	59 f0       	breq	.+22     	; 0x8318 <__fp_splitA+0x10>
    8302:	5f 3f       	cpi	r21, 0xFF	; 255
    8304:	71 f0       	breq	.+28     	; 0x8322 <__fp_splitA+0x1a>
    8306:	47 95       	ror	r20

00008308 <__fp_splitA>:
    8308:	88 0f       	add	r24, r24
    830a:	97 fb       	bst	r25, 7
    830c:	99 1f       	adc	r25, r25
    830e:	61 f0       	breq	.+24     	; 0x8328 <__fp_splitA+0x20>
    8310:	9f 3f       	cpi	r25, 0xFF	; 255
    8312:	79 f0       	breq	.+30     	; 0x8332 <__fp_splitA+0x2a>
    8314:	87 95       	ror	r24
    8316:	08 95       	ret
    8318:	12 16       	cp	r1, r18
    831a:	13 06       	cpc	r1, r19
    831c:	14 06       	cpc	r1, r20
    831e:	55 1f       	adc	r21, r21
    8320:	f2 cf       	rjmp	.-28     	; 0x8306 <__fp_split3+0xe>
    8322:	46 95       	lsr	r20
    8324:	f1 df       	rcall	.-30     	; 0x8308 <__fp_splitA>
    8326:	08 c0       	rjmp	.+16     	; 0x8338 <__fp_splitA+0x30>
    8328:	16 16       	cp	r1, r22
    832a:	17 06       	cpc	r1, r23
    832c:	18 06       	cpc	r1, r24
    832e:	99 1f       	adc	r25, r25
    8330:	f1 cf       	rjmp	.-30     	; 0x8314 <__fp_splitA+0xc>
    8332:	86 95       	lsr	r24
    8334:	71 05       	cpc	r23, r1
    8336:	61 05       	cpc	r22, r1
    8338:	08 94       	sec
    833a:	08 95       	ret

0000833c <__fp_zero>:
    833c:	e8 94       	clt

0000833e <__fp_szero>:
    833e:	bb 27       	eor	r27, r27
    8340:	66 27       	eor	r22, r22
    8342:	77 27       	eor	r23, r23
    8344:	cb 01       	movw	r24, r22
    8346:	97 f9       	bld	r25, 7
    8348:	08 95       	ret

0000834a <__gesf2>:
    834a:	2c df       	rcall	.-424    	; 0x81a4 <__fp_cmp>
    834c:	08 f4       	brcc	.+2      	; 0x8350 <__gesf2+0x6>
    834e:	8f ef       	ldi	r24, 0xFF	; 255
    8350:	08 95       	ret

00008352 <inverse>:
    8352:	9b 01       	movw	r18, r22
    8354:	ac 01       	movw	r20, r24
    8356:	60 e0       	ldi	r22, 0x00	; 0
    8358:	70 e0       	ldi	r23, 0x00	; 0
    835a:	80 e8       	ldi	r24, 0x80	; 128
    835c:	9f e3       	ldi	r25, 0x3F	; 63
    835e:	4c ce       	rjmp	.-872    	; 0x7ff8 <__divsf3>

00008360 <__mulsf3>:
    8360:	0b d0       	rcall	.+22     	; 0x8378 <__mulsf3x>
    8362:	a8 cf       	rjmp	.-176    	; 0x82b4 <__fp_round>
    8364:	71 df       	rcall	.-286    	; 0x8248 <__fp_pscA>
    8366:	28 f0       	brcs	.+10     	; 0x8372 <__mulsf3+0x12>
    8368:	76 df       	rcall	.-276    	; 0x8256 <__fp_pscB>
    836a:	18 f0       	brcs	.+6      	; 0x8372 <__mulsf3+0x12>
    836c:	95 23       	and	r25, r21
    836e:	09 f0       	breq	.+2      	; 0x8372 <__mulsf3+0x12>
    8370:	3d cf       	rjmp	.-390    	; 0x81ec <__fp_inf>
    8372:	42 cf       	rjmp	.-380    	; 0x81f8 <__fp_nan>
    8374:	11 24       	eor	r1, r1
    8376:	e3 cf       	rjmp	.-58     	; 0x833e <__fp_szero>

00008378 <__mulsf3x>:
    8378:	bf df       	rcall	.-130    	; 0x82f8 <__fp_split3>
    837a:	a0 f3       	brcs	.-24     	; 0x8364 <__mulsf3+0x4>

0000837c <__mulsf3_pse>:
    837c:	95 9f       	mul	r25, r21
    837e:	d1 f3       	breq	.-12     	; 0x8374 <__mulsf3+0x14>
    8380:	95 0f       	add	r25, r21
    8382:	50 e0       	ldi	r21, 0x00	; 0
    8384:	55 1f       	adc	r21, r21
    8386:	62 9f       	mul	r22, r18
    8388:	f0 01       	movw	r30, r0
    838a:	72 9f       	mul	r23, r18
    838c:	bb 27       	eor	r27, r27
    838e:	f0 0d       	add	r31, r0
    8390:	b1 1d       	adc	r27, r1
    8392:	63 9f       	mul	r22, r19
    8394:	aa 27       	eor	r26, r26
    8396:	f0 0d       	add	r31, r0
    8398:	b1 1d       	adc	r27, r1
    839a:	aa 1f       	adc	r26, r26
    839c:	64 9f       	mul	r22, r20
    839e:	66 27       	eor	r22, r22
    83a0:	b0 0d       	add	r27, r0
    83a2:	a1 1d       	adc	r26, r1
    83a4:	66 1f       	adc	r22, r22
    83a6:	82 9f       	mul	r24, r18
    83a8:	22 27       	eor	r18, r18
    83aa:	b0 0d       	add	r27, r0
    83ac:	a1 1d       	adc	r26, r1
    83ae:	62 1f       	adc	r22, r18
    83b0:	73 9f       	mul	r23, r19
    83b2:	b0 0d       	add	r27, r0
    83b4:	a1 1d       	adc	r26, r1
    83b6:	62 1f       	adc	r22, r18
    83b8:	83 9f       	mul	r24, r19
    83ba:	a0 0d       	add	r26, r0
    83bc:	61 1d       	adc	r22, r1
    83be:	22 1f       	adc	r18, r18
    83c0:	74 9f       	mul	r23, r20
    83c2:	33 27       	eor	r19, r19
    83c4:	a0 0d       	add	r26, r0
    83c6:	61 1d       	adc	r22, r1
    83c8:	23 1f       	adc	r18, r19
    83ca:	84 9f       	mul	r24, r20
    83cc:	60 0d       	add	r22, r0
    83ce:	21 1d       	adc	r18, r1
    83d0:	82 2f       	mov	r24, r18
    83d2:	76 2f       	mov	r23, r22
    83d4:	6a 2f       	mov	r22, r26
    83d6:	11 24       	eor	r1, r1
    83d8:	9f 57       	subi	r25, 0x7F	; 127
    83da:	50 40       	sbci	r21, 0x00	; 0
    83dc:	8a f0       	brmi	.+34     	; 0x8400 <__mulsf3_pse+0x84>
    83de:	e1 f0       	breq	.+56     	; 0x8418 <__mulsf3_pse+0x9c>
    83e0:	88 23       	and	r24, r24
    83e2:	4a f0       	brmi	.+18     	; 0x83f6 <__mulsf3_pse+0x7a>
    83e4:	ee 0f       	add	r30, r30
    83e6:	ff 1f       	adc	r31, r31
    83e8:	bb 1f       	adc	r27, r27
    83ea:	66 1f       	adc	r22, r22
    83ec:	77 1f       	adc	r23, r23
    83ee:	88 1f       	adc	r24, r24
    83f0:	91 50       	subi	r25, 0x01	; 1
    83f2:	50 40       	sbci	r21, 0x00	; 0
    83f4:	a9 f7       	brne	.-22     	; 0x83e0 <__mulsf3_pse+0x64>
    83f6:	9e 3f       	cpi	r25, 0xFE	; 254
    83f8:	51 05       	cpc	r21, r1
    83fa:	70 f0       	brcs	.+28     	; 0x8418 <__mulsf3_pse+0x9c>
    83fc:	f7 ce       	rjmp	.-530    	; 0x81ec <__fp_inf>
    83fe:	9f cf       	rjmp	.-194    	; 0x833e <__fp_szero>
    8400:	5f 3f       	cpi	r21, 0xFF	; 255
    8402:	ec f3       	brlt	.-6      	; 0x83fe <__mulsf3_pse+0x82>
    8404:	98 3e       	cpi	r25, 0xE8	; 232
    8406:	dc f3       	brlt	.-10     	; 0x83fe <__mulsf3_pse+0x82>
    8408:	86 95       	lsr	r24
    840a:	77 95       	ror	r23
    840c:	67 95       	ror	r22
    840e:	b7 95       	ror	r27
    8410:	f7 95       	ror	r31
    8412:	e7 95       	ror	r30
    8414:	9f 5f       	subi	r25, 0xFF	; 255
    8416:	c1 f7       	brne	.-16     	; 0x8408 <__mulsf3_pse+0x8c>
    8418:	fe 2b       	or	r31, r30
    841a:	88 0f       	add	r24, r24
    841c:	91 1d       	adc	r25, r1
    841e:	96 95       	lsr	r25
    8420:	87 95       	ror	r24
    8422:	97 f9       	bld	r25, 7
    8424:	08 95       	ret

00008426 <pow>:
    8426:	fa 01       	movw	r30, r20
    8428:	ee 0f       	add	r30, r30
    842a:	ff 1f       	adc	r31, r31
    842c:	30 96       	adiw	r30, 0x00	; 0
    842e:	21 05       	cpc	r18, r1
    8430:	31 05       	cpc	r19, r1
    8432:	99 f1       	breq	.+102    	; 0x849a <pow+0x74>
    8434:	61 15       	cp	r22, r1
    8436:	71 05       	cpc	r23, r1
    8438:	61 f4       	brne	.+24     	; 0x8452 <pow+0x2c>
    843a:	80 38       	cpi	r24, 0x80	; 128
    843c:	bf e3       	ldi	r27, 0x3F	; 63
    843e:	9b 07       	cpc	r25, r27
    8440:	49 f1       	breq	.+82     	; 0x8494 <pow+0x6e>
    8442:	68 94       	set
    8444:	90 38       	cpi	r25, 0x80	; 128
    8446:	81 05       	cpc	r24, r1
    8448:	61 f0       	breq	.+24     	; 0x8462 <pow+0x3c>
    844a:	80 38       	cpi	r24, 0x80	; 128
    844c:	bf ef       	ldi	r27, 0xFF	; 255
    844e:	9b 07       	cpc	r25, r27
    8450:	41 f0       	breq	.+16     	; 0x8462 <pow+0x3c>
    8452:	99 23       	and	r25, r25
    8454:	42 f5       	brpl	.+80     	; 0x84a6 <pow+0x80>
    8456:	ff 3f       	cpi	r31, 0xFF	; 255
    8458:	e1 05       	cpc	r30, r1
    845a:	31 05       	cpc	r19, r1
    845c:	21 05       	cpc	r18, r1
    845e:	11 f1       	breq	.+68     	; 0x84a4 <pow+0x7e>
    8460:	e8 94       	clt
    8462:	08 94       	sec
    8464:	e7 95       	ror	r30
    8466:	d9 01       	movw	r26, r18
    8468:	aa 23       	and	r26, r26
    846a:	29 f4       	brne	.+10     	; 0x8476 <pow+0x50>
    846c:	ab 2f       	mov	r26, r27
    846e:	be 2f       	mov	r27, r30
    8470:	f8 5f       	subi	r31, 0xF8	; 248
    8472:	d0 f3       	brcs	.-12     	; 0x8468 <pow+0x42>
    8474:	10 c0       	rjmp	.+32     	; 0x8496 <pow+0x70>
    8476:	ff 5f       	subi	r31, 0xFF	; 255
    8478:	70 f4       	brcc	.+28     	; 0x8496 <pow+0x70>
    847a:	a6 95       	lsr	r26
    847c:	e0 f7       	brcc	.-8      	; 0x8476 <pow+0x50>
    847e:	f7 39       	cpi	r31, 0x97	; 151
    8480:	50 f0       	brcs	.+20     	; 0x8496 <pow+0x70>
    8482:	19 f0       	breq	.+6      	; 0x848a <pow+0x64>
    8484:	ff 3a       	cpi	r31, 0xAF	; 175
    8486:	38 f4       	brcc	.+14     	; 0x8496 <pow+0x70>
    8488:	9f 77       	andi	r25, 0x7F	; 127
    848a:	9f 93       	push	r25
    848c:	0c d0       	rcall	.+24     	; 0x84a6 <pow+0x80>
    848e:	0f 90       	pop	r0
    8490:	07 fc       	sbrc	r0, 7
    8492:	90 58       	subi	r25, 0x80	; 128
    8494:	08 95       	ret
    8496:	3e f0       	brts	.+14     	; 0x84a6 <pow+0x80>
    8498:	af ce       	rjmp	.-674    	; 0x81f8 <__fp_nan>
    849a:	60 e0       	ldi	r22, 0x00	; 0
    849c:	70 e0       	ldi	r23, 0x00	; 0
    849e:	80 e8       	ldi	r24, 0x80	; 128
    84a0:	9f e3       	ldi	r25, 0x3F	; 63
    84a2:	08 95       	ret
    84a4:	4f e7       	ldi	r20, 0x7F	; 127
    84a6:	9f 77       	andi	r25, 0x7F	; 127
    84a8:	5f 93       	push	r21
    84aa:	4f 93       	push	r20
    84ac:	3f 93       	push	r19
    84ae:	2f 93       	push	r18
    84b0:	97 d0       	rcall	.+302    	; 0x85e0 <log>
    84b2:	2f 91       	pop	r18
    84b4:	3f 91       	pop	r19
    84b6:	4f 91       	pop	r20
    84b8:	5f 91       	pop	r21
    84ba:	52 df       	rcall	.-348    	; 0x8360 <__mulsf3>
    84bc:	0b c0       	rjmp	.+22     	; 0x84d4 <exp>

000084be <sin>:
    84be:	9f 93       	push	r25
    84c0:	d2 de       	rcall	.-604    	; 0x8266 <__fp_rempio2>
    84c2:	0f 90       	pop	r0
    84c4:	07 fc       	sbrc	r0, 7
    84c6:	ee 5f       	subi	r30, 0xFE	; 254
    84c8:	06 cf       	rjmp	.-500    	; 0x82d6 <__fp_sinus>
    84ca:	19 f4       	brne	.+6      	; 0x84d2 <sin+0x14>
    84cc:	0e f0       	brts	.+2      	; 0x84d0 <sin+0x12>
    84ce:	8e ce       	rjmp	.-740    	; 0x81ec <__fp_inf>
    84d0:	35 cf       	rjmp	.-406    	; 0x833c <__fp_zero>
    84d2:	92 ce       	rjmp	.-732    	; 0x81f8 <__fp_nan>

000084d4 <exp>:
    84d4:	19 df       	rcall	.-462    	; 0x8308 <__fp_splitA>
    84d6:	c8 f3       	brcs	.-14     	; 0x84ca <sin+0xc>
    84d8:	96 38       	cpi	r25, 0x86	; 134
    84da:	c0 f7       	brcc	.-16     	; 0x84cc <sin+0xe>
    84dc:	07 f8       	bld	r0, 7
    84de:	0f 92       	push	r0
    84e0:	e8 94       	clt
    84e2:	2b e3       	ldi	r18, 0x3B	; 59
    84e4:	3a ea       	ldi	r19, 0xAA	; 170
    84e6:	48 eb       	ldi	r20, 0xB8	; 184
    84e8:	5f e7       	ldi	r21, 0x7F	; 127
    84ea:	48 df       	rcall	.-368    	; 0x837c <__mulsf3_pse>
    84ec:	0f 92       	push	r0
    84ee:	0f 92       	push	r0
    84f0:	0f 92       	push	r0
    84f2:	4d b7       	in	r20, 0x3d	; 61
    84f4:	5e b7       	in	r21, 0x3e	; 62
    84f6:	0f 92       	push	r0
    84f8:	b3 d0       	rcall	.+358    	; 0x8660 <modf>
    84fa:	e4 e1       	ldi	r30, 0x14	; 20
    84fc:	f2 e0       	ldi	r31, 0x02	; 2
    84fe:	7f de       	rcall	.-770    	; 0x81fe <__fp_powser>
    8500:	4f 91       	pop	r20
    8502:	5f 91       	pop	r21
    8504:	ef 91       	pop	r30
    8506:	ff 91       	pop	r31
    8508:	e5 95       	asr	r30
    850a:	ee 1f       	adc	r30, r30
    850c:	ff 1f       	adc	r31, r31
    850e:	49 f0       	breq	.+18     	; 0x8522 <exp+0x4e>
    8510:	fe 57       	subi	r31, 0x7E	; 126
    8512:	e0 68       	ori	r30, 0x80	; 128
    8514:	44 27       	eor	r20, r20
    8516:	ee 0f       	add	r30, r30
    8518:	44 1f       	adc	r20, r20
    851a:	fa 95       	dec	r31
    851c:	e1 f7       	brne	.-8      	; 0x8516 <exp+0x42>
    851e:	41 95       	neg	r20
    8520:	55 0b       	sbc	r21, r21
    8522:	25 d0       	rcall	.+74     	; 0x856e <ldexp>
    8524:	0f 90       	pop	r0
    8526:	07 fe       	sbrs	r0, 7
    8528:	14 cf       	rjmp	.-472    	; 0x8352 <inverse>
    852a:	08 95       	ret

0000852c <__fp_mpack>:
    852c:	9f 3f       	cpi	r25, 0xFF	; 255
    852e:	31 f0       	breq	.+12     	; 0x853c <__fp_mpack_finite+0xc>

00008530 <__fp_mpack_finite>:
    8530:	91 50       	subi	r25, 0x01	; 1
    8532:	20 f4       	brcc	.+8      	; 0x853c <__fp_mpack_finite+0xc>
    8534:	87 95       	ror	r24
    8536:	77 95       	ror	r23
    8538:	67 95       	ror	r22
    853a:	b7 95       	ror	r27
    853c:	88 0f       	add	r24, r24
    853e:	91 1d       	adc	r25, r1
    8540:	96 95       	lsr	r25
    8542:	87 95       	ror	r24
    8544:	97 f9       	bld	r25, 7
    8546:	08 95       	ret

00008548 <__fp_powsodd>:
    8548:	9f 93       	push	r25
    854a:	8f 93       	push	r24
    854c:	7f 93       	push	r23
    854e:	6f 93       	push	r22
    8550:	ff 93       	push	r31
    8552:	ef 93       	push	r30
    8554:	9b 01       	movw	r18, r22
    8556:	ac 01       	movw	r20, r24
    8558:	03 df       	rcall	.-506    	; 0x8360 <__mulsf3>
    855a:	ef 91       	pop	r30
    855c:	ff 91       	pop	r31
    855e:	4f de       	rcall	.-866    	; 0x81fe <__fp_powser>
    8560:	2f 91       	pop	r18
    8562:	3f 91       	pop	r19
    8564:	4f 91       	pop	r20
    8566:	5f 91       	pop	r21
    8568:	fb ce       	rjmp	.-522    	; 0x8360 <__mulsf3>
    856a:	40 ce       	rjmp	.-896    	; 0x81ec <__fp_inf>
    856c:	df cf       	rjmp	.-66     	; 0x852c <__fp_mpack>

0000856e <ldexp>:
    856e:	cc de       	rcall	.-616    	; 0x8308 <__fp_splitA>
    8570:	e8 f3       	brcs	.-6      	; 0x856c <__fp_powsodd+0x24>
    8572:	99 23       	and	r25, r25
    8574:	d9 f3       	breq	.-10     	; 0x856c <__fp_powsodd+0x24>
    8576:	94 0f       	add	r25, r20
    8578:	51 1d       	adc	r21, r1
    857a:	bb f3       	brvs	.-18     	; 0x856a <__fp_powsodd+0x22>
    857c:	91 50       	subi	r25, 0x01	; 1
    857e:	50 40       	sbci	r21, 0x00	; 0
    8580:	94 f0       	brlt	.+36     	; 0x85a6 <ldexp+0x38>
    8582:	59 f0       	breq	.+22     	; 0x859a <ldexp+0x2c>
    8584:	88 23       	and	r24, r24
    8586:	32 f0       	brmi	.+12     	; 0x8594 <ldexp+0x26>
    8588:	66 0f       	add	r22, r22
    858a:	77 1f       	adc	r23, r23
    858c:	88 1f       	adc	r24, r24
    858e:	91 50       	subi	r25, 0x01	; 1
    8590:	50 40       	sbci	r21, 0x00	; 0
    8592:	c1 f7       	brne	.-16     	; 0x8584 <ldexp+0x16>
    8594:	9e 3f       	cpi	r25, 0xFE	; 254
    8596:	51 05       	cpc	r21, r1
    8598:	44 f7       	brge	.-48     	; 0x856a <__fp_powsodd+0x22>
    859a:	88 0f       	add	r24, r24
    859c:	91 1d       	adc	r25, r1
    859e:	96 95       	lsr	r25
    85a0:	87 95       	ror	r24
    85a2:	97 f9       	bld	r25, 7
    85a4:	08 95       	ret
    85a6:	5f 3f       	cpi	r21, 0xFF	; 255
    85a8:	ac f0       	brlt	.+42     	; 0x85d4 <ldexp+0x66>
    85aa:	98 3e       	cpi	r25, 0xE8	; 232
    85ac:	9c f0       	brlt	.+38     	; 0x85d4 <ldexp+0x66>
    85ae:	bb 27       	eor	r27, r27
    85b0:	86 95       	lsr	r24
    85b2:	77 95       	ror	r23
    85b4:	67 95       	ror	r22
    85b6:	b7 95       	ror	r27
    85b8:	08 f4       	brcc	.+2      	; 0x85bc <ldexp+0x4e>
    85ba:	b1 60       	ori	r27, 0x01	; 1
    85bc:	93 95       	inc	r25
    85be:	c1 f7       	brne	.-16     	; 0x85b0 <ldexp+0x42>
    85c0:	bb 0f       	add	r27, r27
    85c2:	58 f7       	brcc	.-42     	; 0x859a <ldexp+0x2c>
    85c4:	11 f4       	brne	.+4      	; 0x85ca <ldexp+0x5c>
    85c6:	60 ff       	sbrs	r22, 0
    85c8:	e8 cf       	rjmp	.-48     	; 0x859a <ldexp+0x2c>
    85ca:	6f 5f       	subi	r22, 0xFF	; 255
    85cc:	7f 4f       	sbci	r23, 0xFF	; 255
    85ce:	8f 4f       	sbci	r24, 0xFF	; 255
    85d0:	9f 4f       	sbci	r25, 0xFF	; 255
    85d2:	e3 cf       	rjmp	.-58     	; 0x859a <ldexp+0x2c>
    85d4:	b4 ce       	rjmp	.-664    	; 0x833e <__fp_szero>
    85d6:	0e f0       	brts	.+2      	; 0x85da <ldexp+0x6c>
    85d8:	a9 cf       	rjmp	.-174    	; 0x852c <__fp_mpack>
    85da:	0e ce       	rjmp	.-996    	; 0x81f8 <__fp_nan>
    85dc:	68 94       	set
    85de:	06 ce       	rjmp	.-1012   	; 0x81ec <__fp_inf>

000085e0 <log>:
    85e0:	93 de       	rcall	.-730    	; 0x8308 <__fp_splitA>
    85e2:	c8 f3       	brcs	.-14     	; 0x85d6 <ldexp+0x68>
    85e4:	99 23       	and	r25, r25
    85e6:	d1 f3       	breq	.-12     	; 0x85dc <ldexp+0x6e>
    85e8:	c6 f3       	brts	.-16     	; 0x85da <ldexp+0x6c>
    85ea:	df 93       	push	r29
    85ec:	cf 93       	push	r28
    85ee:	1f 93       	push	r17
    85f0:	0f 93       	push	r16
    85f2:	ff 92       	push	r15
    85f4:	c9 2f       	mov	r28, r25
    85f6:	dd 27       	eor	r29, r29
    85f8:	88 23       	and	r24, r24
    85fa:	2a f0       	brmi	.+10     	; 0x8606 <log+0x26>
    85fc:	21 97       	sbiw	r28, 0x01	; 1
    85fe:	66 0f       	add	r22, r22
    8600:	77 1f       	adc	r23, r23
    8602:	88 1f       	adc	r24, r24
    8604:	da f7       	brpl	.-10     	; 0x85fc <log+0x1c>
    8606:	20 e0       	ldi	r18, 0x00	; 0
    8608:	30 e0       	ldi	r19, 0x00	; 0
    860a:	40 e8       	ldi	r20, 0x80	; 128
    860c:	5f eb       	ldi	r21, 0xBF	; 191
    860e:	9f e3       	ldi	r25, 0x3F	; 63
    8610:	88 39       	cpi	r24, 0x98	; 152
    8612:	20 f0       	brcs	.+8      	; 0x861c <log+0x3c>
    8614:	80 3e       	cpi	r24, 0xE0	; 224
    8616:	30 f0       	brcs	.+12     	; 0x8624 <log+0x44>
    8618:	21 96       	adiw	r28, 0x01	; 1
    861a:	8f 77       	andi	r24, 0x7F	; 127
    861c:	86 dc       	rcall	.-1780   	; 0x7f2a <__addsf3>
    861e:	ec e3       	ldi	r30, 0x3C	; 60
    8620:	f2 e0       	ldi	r31, 0x02	; 2
    8622:	03 c0       	rjmp	.+6      	; 0x862a <log+0x4a>
    8624:	82 dc       	rcall	.-1788   	; 0x7f2a <__addsf3>
    8626:	e9 e6       	ldi	r30, 0x69	; 105
    8628:	f2 e0       	ldi	r31, 0x02	; 2
    862a:	e9 dd       	rcall	.-1070   	; 0x81fe <__fp_powser>
    862c:	8b 01       	movw	r16, r22
    862e:	be 01       	movw	r22, r28
    8630:	ec 01       	movw	r28, r24
    8632:	fb 2e       	mov	r15, r27
    8634:	6f 57       	subi	r22, 0x7F	; 127
    8636:	71 09       	sbc	r23, r1
    8638:	75 95       	asr	r23
    863a:	77 1f       	adc	r23, r23
    863c:	88 0b       	sbc	r24, r24
    863e:	99 0b       	sbc	r25, r25
    8640:	76 dd       	rcall	.-1300   	; 0x812e <__floatsisf>
    8642:	28 e1       	ldi	r18, 0x18	; 24
    8644:	32 e7       	ldi	r19, 0x72	; 114
    8646:	41 e3       	ldi	r20, 0x31	; 49
    8648:	5f e3       	ldi	r21, 0x3F	; 63
    864a:	96 de       	rcall	.-724    	; 0x8378 <__mulsf3x>
    864c:	af 2d       	mov	r26, r15
    864e:	98 01       	movw	r18, r16
    8650:	ae 01       	movw	r20, r28
    8652:	ff 90       	pop	r15
    8654:	0f 91       	pop	r16
    8656:	1f 91       	pop	r17
    8658:	cf 91       	pop	r28
    865a:	df 91       	pop	r29
    865c:	77 dc       	rcall	.-1810   	; 0x7f4c <__addsf3x>
    865e:	2a ce       	rjmp	.-940    	; 0x82b4 <__fp_round>

00008660 <modf>:
    8660:	fa 01       	movw	r30, r20
    8662:	dc 01       	movw	r26, r24
    8664:	aa 0f       	add	r26, r26
    8666:	bb 1f       	adc	r27, r27
    8668:	9b 01       	movw	r18, r22
    866a:	ac 01       	movw	r20, r24
    866c:	bf 57       	subi	r27, 0x7F	; 127
    866e:	28 f4       	brcc	.+10     	; 0x867a <modf+0x1a>
    8670:	22 27       	eor	r18, r18
    8672:	33 27       	eor	r19, r19
    8674:	44 27       	eor	r20, r20
    8676:	50 78       	andi	r21, 0x80	; 128
    8678:	1f c0       	rjmp	.+62     	; 0x86b8 <modf+0x58>
    867a:	b7 51       	subi	r27, 0x17	; 23
    867c:	88 f4       	brcc	.+34     	; 0x86a0 <modf+0x40>
    867e:	ab 2f       	mov	r26, r27
    8680:	00 24       	eor	r0, r0
    8682:	46 95       	lsr	r20
    8684:	37 95       	ror	r19
    8686:	27 95       	ror	r18
    8688:	01 1c       	adc	r0, r1
    868a:	a3 95       	inc	r26
    868c:	d2 f3       	brmi	.-12     	; 0x8682 <modf+0x22>
    868e:	00 20       	and	r0, r0
    8690:	69 f0       	breq	.+26     	; 0x86ac <modf+0x4c>
    8692:	22 0f       	add	r18, r18
    8694:	33 1f       	adc	r19, r19
    8696:	44 1f       	adc	r20, r20
    8698:	b3 95       	inc	r27
    869a:	da f3       	brmi	.-10     	; 0x8692 <modf+0x32>
    869c:	0d d0       	rcall	.+26     	; 0x86b8 <modf+0x58>
    869e:	44 cc       	rjmp	.-1912   	; 0x7f28 <__subsf3>
    86a0:	61 30       	cpi	r22, 0x01	; 1
    86a2:	71 05       	cpc	r23, r1
    86a4:	a0 e8       	ldi	r26, 0x80	; 128
    86a6:	8a 07       	cpc	r24, r26
    86a8:	b9 46       	sbci	r27, 0x69	; 105
    86aa:	30 f4       	brcc	.+12     	; 0x86b8 <modf+0x58>
    86ac:	9b 01       	movw	r18, r22
    86ae:	ac 01       	movw	r20, r24
    86b0:	66 27       	eor	r22, r22
    86b2:	77 27       	eor	r23, r23
    86b4:	88 27       	eor	r24, r24
    86b6:	90 78       	andi	r25, 0x80	; 128
    86b8:	30 96       	adiw	r30, 0x00	; 0
    86ba:	21 f0       	breq	.+8      	; 0x86c4 <modf+0x64>
    86bc:	20 83       	st	Z, r18
    86be:	31 83       	std	Z+1, r19	; 0x01
    86c0:	42 83       	std	Z+2, r20	; 0x02
    86c2:	53 83       	std	Z+3, r21	; 0x03
    86c4:	08 95       	ret

000086c6 <vfprintf>:
    86c6:	2f 92       	push	r2
    86c8:	3f 92       	push	r3
    86ca:	4f 92       	push	r4
    86cc:	5f 92       	push	r5
    86ce:	6f 92       	push	r6
    86d0:	7f 92       	push	r7
    86d2:	8f 92       	push	r8
    86d4:	9f 92       	push	r9
    86d6:	af 92       	push	r10
    86d8:	bf 92       	push	r11
    86da:	cf 92       	push	r12
    86dc:	df 92       	push	r13
    86de:	ef 92       	push	r14
    86e0:	ff 92       	push	r15
    86e2:	0f 93       	push	r16
    86e4:	1f 93       	push	r17
    86e6:	cf 93       	push	r28
    86e8:	df 93       	push	r29
    86ea:	cd b7       	in	r28, 0x3d	; 61
    86ec:	de b7       	in	r29, 0x3e	; 62
    86ee:	63 97       	sbiw	r28, 0x13	; 19
    86f0:	0f b6       	in	r0, 0x3f	; 63
    86f2:	f8 94       	cli
    86f4:	de bf       	out	0x3e, r29	; 62
    86f6:	0f be       	out	0x3f, r0	; 63
    86f8:	cd bf       	out	0x3d, r28	; 61
    86fa:	6c 01       	movw	r12, r24
    86fc:	4b 01       	movw	r8, r22
    86fe:	2a 01       	movw	r4, r20
    8700:	fc 01       	movw	r30, r24
    8702:	17 82       	std	Z+7, r1	; 0x07
    8704:	16 82       	std	Z+6, r1	; 0x06
    8706:	83 81       	ldd	r24, Z+3	; 0x03
    8708:	81 ff       	sbrs	r24, 1
    870a:	29 c3       	rjmp	.+1618   	; 0x8d5e <vfprintf+0x698>
    870c:	ae 01       	movw	r20, r28
    870e:	4f 5f       	subi	r20, 0xFF	; 255
    8710:	5f 4f       	sbci	r21, 0xFF	; 255
    8712:	3a 01       	movw	r6, r20
    8714:	f6 01       	movw	r30, r12
    8716:	93 81       	ldd	r25, Z+3	; 0x03
    8718:	f4 01       	movw	r30, r8
    871a:	93 fd       	sbrc	r25, 3
    871c:	85 91       	lpm	r24, Z+
    871e:	93 ff       	sbrs	r25, 3
    8720:	81 91       	ld	r24, Z+
    8722:	4f 01       	movw	r8, r30
    8724:	88 23       	and	r24, r24
    8726:	09 f4       	brne	.+2      	; 0x872a <vfprintf+0x64>
    8728:	16 c3       	rjmp	.+1580   	; 0x8d56 <vfprintf+0x690>
    872a:	85 32       	cpi	r24, 0x25	; 37
    872c:	39 f4       	brne	.+14     	; 0x873c <vfprintf+0x76>
    872e:	93 fd       	sbrc	r25, 3
    8730:	85 91       	lpm	r24, Z+
    8732:	93 ff       	sbrs	r25, 3
    8734:	81 91       	ld	r24, Z+
    8736:	4f 01       	movw	r8, r30
    8738:	85 32       	cpi	r24, 0x25	; 37
    873a:	31 f4       	brne	.+12     	; 0x8748 <vfprintf+0x82>
    873c:	b6 01       	movw	r22, r12
    873e:	90 e0       	ldi	r25, 0x00	; 0
    8740:	da d5       	rcall	.+2996   	; 0x92f6 <fputc>
    8742:	52 01       	movw	r10, r4
    8744:	25 01       	movw	r4, r10
    8746:	e6 cf       	rjmp	.-52     	; 0x8714 <vfprintf+0x4e>
    8748:	10 e0       	ldi	r17, 0x00	; 0
    874a:	f1 2c       	mov	r15, r1
    874c:	20 e0       	ldi	r18, 0x00	; 0
    874e:	20 32       	cpi	r18, 0x20	; 32
    8750:	a0 f4       	brcc	.+40     	; 0x877a <vfprintf+0xb4>
    8752:	8b 32       	cpi	r24, 0x2B	; 43
    8754:	69 f0       	breq	.+26     	; 0x8770 <vfprintf+0xaa>
    8756:	30 f4       	brcc	.+12     	; 0x8764 <vfprintf+0x9e>
    8758:	80 32       	cpi	r24, 0x20	; 32
    875a:	59 f0       	breq	.+22     	; 0x8772 <vfprintf+0xac>
    875c:	83 32       	cpi	r24, 0x23	; 35
    875e:	69 f4       	brne	.+26     	; 0x877a <vfprintf+0xb4>
    8760:	20 61       	ori	r18, 0x10	; 16
    8762:	2c c0       	rjmp	.+88     	; 0x87bc <vfprintf+0xf6>
    8764:	8d 32       	cpi	r24, 0x2D	; 45
    8766:	39 f0       	breq	.+14     	; 0x8776 <vfprintf+0xb0>
    8768:	80 33       	cpi	r24, 0x30	; 48
    876a:	39 f4       	brne	.+14     	; 0x877a <vfprintf+0xb4>
    876c:	21 60       	ori	r18, 0x01	; 1
    876e:	26 c0       	rjmp	.+76     	; 0x87bc <vfprintf+0xf6>
    8770:	22 60       	ori	r18, 0x02	; 2
    8772:	24 60       	ori	r18, 0x04	; 4
    8774:	23 c0       	rjmp	.+70     	; 0x87bc <vfprintf+0xf6>
    8776:	28 60       	ori	r18, 0x08	; 8
    8778:	21 c0       	rjmp	.+66     	; 0x87bc <vfprintf+0xf6>
    877a:	27 fd       	sbrc	r18, 7
    877c:	27 c0       	rjmp	.+78     	; 0x87cc <vfprintf+0x106>
    877e:	30 ed       	ldi	r19, 0xD0	; 208
    8780:	38 0f       	add	r19, r24
    8782:	3a 30       	cpi	r19, 0x0A	; 10
    8784:	78 f4       	brcc	.+30     	; 0x87a4 <vfprintf+0xde>
    8786:	26 ff       	sbrs	r18, 6
    8788:	06 c0       	rjmp	.+12     	; 0x8796 <vfprintf+0xd0>
    878a:	fa e0       	ldi	r31, 0x0A	; 10
    878c:	1f 9f       	mul	r17, r31
    878e:	30 0d       	add	r19, r0
    8790:	11 24       	eor	r1, r1
    8792:	13 2f       	mov	r17, r19
    8794:	13 c0       	rjmp	.+38     	; 0x87bc <vfprintf+0xf6>
    8796:	4a e0       	ldi	r20, 0x0A	; 10
    8798:	f4 9e       	mul	r15, r20
    879a:	30 0d       	add	r19, r0
    879c:	11 24       	eor	r1, r1
    879e:	f3 2e       	mov	r15, r19
    87a0:	20 62       	ori	r18, 0x20	; 32
    87a2:	0c c0       	rjmp	.+24     	; 0x87bc <vfprintf+0xf6>
    87a4:	8e 32       	cpi	r24, 0x2E	; 46
    87a6:	21 f4       	brne	.+8      	; 0x87b0 <vfprintf+0xea>
    87a8:	26 fd       	sbrc	r18, 6
    87aa:	d5 c2       	rjmp	.+1450   	; 0x8d56 <vfprintf+0x690>
    87ac:	20 64       	ori	r18, 0x40	; 64
    87ae:	06 c0       	rjmp	.+12     	; 0x87bc <vfprintf+0xf6>
    87b0:	8c 36       	cpi	r24, 0x6C	; 108
    87b2:	11 f4       	brne	.+4      	; 0x87b8 <vfprintf+0xf2>
    87b4:	20 68       	ori	r18, 0x80	; 128
    87b6:	02 c0       	rjmp	.+4      	; 0x87bc <vfprintf+0xf6>
    87b8:	88 36       	cpi	r24, 0x68	; 104
    87ba:	41 f4       	brne	.+16     	; 0x87cc <vfprintf+0x106>
    87bc:	f4 01       	movw	r30, r8
    87be:	93 fd       	sbrc	r25, 3
    87c0:	85 91       	lpm	r24, Z+
    87c2:	93 ff       	sbrs	r25, 3
    87c4:	81 91       	ld	r24, Z+
    87c6:	4f 01       	movw	r8, r30
    87c8:	81 11       	cpse	r24, r1
    87ca:	c1 cf       	rjmp	.-126    	; 0x874e <vfprintf+0x88>
    87cc:	9b eb       	ldi	r25, 0xBB	; 187
    87ce:	98 0f       	add	r25, r24
    87d0:	93 30       	cpi	r25, 0x03	; 3
    87d2:	18 f4       	brcc	.+6      	; 0x87da <vfprintf+0x114>
    87d4:	20 61       	ori	r18, 0x10	; 16
    87d6:	80 5e       	subi	r24, 0xE0	; 224
    87d8:	06 c0       	rjmp	.+12     	; 0x87e6 <vfprintf+0x120>
    87da:	9b e9       	ldi	r25, 0x9B	; 155
    87dc:	98 0f       	add	r25, r24
    87de:	93 30       	cpi	r25, 0x03	; 3
    87e0:	08 f0       	brcs	.+2      	; 0x87e4 <vfprintf+0x11e>
    87e2:	64 c1       	rjmp	.+712    	; 0x8aac <vfprintf+0x3e6>
    87e4:	2f 7e       	andi	r18, 0xEF	; 239
    87e6:	26 ff       	sbrs	r18, 6
    87e8:	16 e0       	ldi	r17, 0x06	; 6
    87ea:	2f 73       	andi	r18, 0x3F	; 63
    87ec:	32 2e       	mov	r3, r18
    87ee:	85 36       	cpi	r24, 0x65	; 101
    87f0:	19 f4       	brne	.+6      	; 0x87f8 <vfprintf+0x132>
    87f2:	20 64       	ori	r18, 0x40	; 64
    87f4:	32 2e       	mov	r3, r18
    87f6:	08 c0       	rjmp	.+16     	; 0x8808 <vfprintf+0x142>
    87f8:	86 36       	cpi	r24, 0x66	; 102
    87fa:	21 f4       	brne	.+8      	; 0x8804 <vfprintf+0x13e>
    87fc:	f2 2f       	mov	r31, r18
    87fe:	f0 68       	ori	r31, 0x80	; 128
    8800:	3f 2e       	mov	r3, r31
    8802:	02 c0       	rjmp	.+4      	; 0x8808 <vfprintf+0x142>
    8804:	11 11       	cpse	r17, r1
    8806:	11 50       	subi	r17, 0x01	; 1
    8808:	37 fe       	sbrs	r3, 7
    880a:	07 c0       	rjmp	.+14     	; 0x881a <vfprintf+0x154>
    880c:	1c 33       	cpi	r17, 0x3C	; 60
    880e:	50 f4       	brcc	.+20     	; 0x8824 <vfprintf+0x15e>
    8810:	ee 24       	eor	r14, r14
    8812:	e3 94       	inc	r14
    8814:	e1 0e       	add	r14, r17
    8816:	27 e0       	ldi	r18, 0x07	; 7
    8818:	0b c0       	rjmp	.+22     	; 0x8830 <vfprintf+0x16a>
    881a:	18 30       	cpi	r17, 0x08	; 8
    881c:	38 f0       	brcs	.+14     	; 0x882c <vfprintf+0x166>
    881e:	27 e0       	ldi	r18, 0x07	; 7
    8820:	17 e0       	ldi	r17, 0x07	; 7
    8822:	05 c0       	rjmp	.+10     	; 0x882e <vfprintf+0x168>
    8824:	27 e0       	ldi	r18, 0x07	; 7
    8826:	4c e3       	ldi	r20, 0x3C	; 60
    8828:	e4 2e       	mov	r14, r20
    882a:	02 c0       	rjmp	.+4      	; 0x8830 <vfprintf+0x16a>
    882c:	21 2f       	mov	r18, r17
    882e:	e1 2c       	mov	r14, r1
    8830:	52 01       	movw	r10, r4
    8832:	44 e0       	ldi	r20, 0x04	; 4
    8834:	a4 0e       	add	r10, r20
    8836:	b1 1c       	adc	r11, r1
    8838:	f2 01       	movw	r30, r4
    883a:	60 81       	ld	r22, Z
    883c:	71 81       	ldd	r23, Z+1	; 0x01
    883e:	82 81       	ldd	r24, Z+2	; 0x02
    8840:	93 81       	ldd	r25, Z+3	; 0x03
    8842:	0e 2d       	mov	r16, r14
    8844:	a3 01       	movw	r20, r6
    8846:	69 d4       	rcall	.+2258   	; 0x911a <__ftoa_engine>
    8848:	2c 01       	movw	r4, r24
    884a:	09 81       	ldd	r16, Y+1	; 0x01
    884c:	00 ff       	sbrs	r16, 0
    884e:	02 c0       	rjmp	.+4      	; 0x8854 <vfprintf+0x18e>
    8850:	03 ff       	sbrs	r16, 3
    8852:	07 c0       	rjmp	.+14     	; 0x8862 <vfprintf+0x19c>
    8854:	31 fc       	sbrc	r3, 1
    8856:	08 c0       	rjmp	.+16     	; 0x8868 <vfprintf+0x1a2>
    8858:	32 fe       	sbrs	r3, 2
    885a:	09 c0       	rjmp	.+18     	; 0x886e <vfprintf+0x1a8>
    885c:	30 e2       	ldi	r19, 0x20	; 32
    885e:	23 2e       	mov	r2, r19
    8860:	07 c0       	rjmp	.+14     	; 0x8870 <vfprintf+0x1aa>
    8862:	2d e2       	ldi	r18, 0x2D	; 45
    8864:	22 2e       	mov	r2, r18
    8866:	04 c0       	rjmp	.+8      	; 0x8870 <vfprintf+0x1aa>
    8868:	9b e2       	ldi	r25, 0x2B	; 43
    886a:	29 2e       	mov	r2, r25
    886c:	01 c0       	rjmp	.+2      	; 0x8870 <vfprintf+0x1aa>
    886e:	21 2c       	mov	r2, r1
    8870:	80 2f       	mov	r24, r16
    8872:	8c 70       	andi	r24, 0x0C	; 12
    8874:	19 f0       	breq	.+6      	; 0x887c <vfprintf+0x1b6>
    8876:	21 10       	cpse	r2, r1
    8878:	51 c2       	rjmp	.+1186   	; 0x8d1c <vfprintf+0x656>
    887a:	8d c2       	rjmp	.+1306   	; 0x8d96 <vfprintf+0x6d0>
    887c:	37 fe       	sbrs	r3, 7
    887e:	0f c0       	rjmp	.+30     	; 0x889e <vfprintf+0x1d8>
    8880:	e4 0c       	add	r14, r4
    8882:	04 ff       	sbrs	r16, 4
    8884:	04 c0       	rjmp	.+8      	; 0x888e <vfprintf+0x1c8>
    8886:	8a 81       	ldd	r24, Y+2	; 0x02
    8888:	81 33       	cpi	r24, 0x31	; 49
    888a:	09 f4       	brne	.+2      	; 0x888e <vfprintf+0x1c8>
    888c:	ea 94       	dec	r14
    888e:	1e 14       	cp	r1, r14
    8890:	74 f5       	brge	.+92     	; 0x88ee <vfprintf+0x228>
    8892:	f8 e0       	ldi	r31, 0x08	; 8
    8894:	fe 15       	cp	r31, r14
    8896:	78 f5       	brcc	.+94     	; 0x88f6 <vfprintf+0x230>
    8898:	88 e0       	ldi	r24, 0x08	; 8
    889a:	e8 2e       	mov	r14, r24
    889c:	2c c0       	rjmp	.+88     	; 0x88f6 <vfprintf+0x230>
    889e:	36 fc       	sbrc	r3, 6
    88a0:	2a c0       	rjmp	.+84     	; 0x88f6 <vfprintf+0x230>
    88a2:	81 2f       	mov	r24, r17
    88a4:	90 e0       	ldi	r25, 0x00	; 0
    88a6:	84 15       	cp	r24, r4
    88a8:	95 05       	cpc	r25, r5
    88aa:	9c f0       	brlt	.+38     	; 0x88d2 <vfprintf+0x20c>
    88ac:	2c ef       	ldi	r18, 0xFC	; 252
    88ae:	42 16       	cp	r4, r18
    88b0:	2f ef       	ldi	r18, 0xFF	; 255
    88b2:	52 06       	cpc	r5, r18
    88b4:	74 f0       	brlt	.+28     	; 0x88d2 <vfprintf+0x20c>
    88b6:	43 2d       	mov	r20, r3
    88b8:	40 68       	ori	r20, 0x80	; 128
    88ba:	34 2e       	mov	r3, r20
    88bc:	0a c0       	rjmp	.+20     	; 0x88d2 <vfprintf+0x20c>
    88be:	e2 e0       	ldi	r30, 0x02	; 2
    88c0:	f0 e0       	ldi	r31, 0x00	; 0
    88c2:	ec 0f       	add	r30, r28
    88c4:	fd 1f       	adc	r31, r29
    88c6:	e1 0f       	add	r30, r17
    88c8:	f1 1d       	adc	r31, r1
    88ca:	80 81       	ld	r24, Z
    88cc:	80 33       	cpi	r24, 0x30	; 48
    88ce:	19 f4       	brne	.+6      	; 0x88d6 <vfprintf+0x210>
    88d0:	11 50       	subi	r17, 0x01	; 1
    88d2:	11 11       	cpse	r17, r1
    88d4:	f4 cf       	rjmp	.-24     	; 0x88be <vfprintf+0x1f8>
    88d6:	37 fe       	sbrs	r3, 7
    88d8:	0e c0       	rjmp	.+28     	; 0x88f6 <vfprintf+0x230>
    88da:	ee 24       	eor	r14, r14
    88dc:	e3 94       	inc	r14
    88de:	e1 0e       	add	r14, r17
    88e0:	81 2f       	mov	r24, r17
    88e2:	90 e0       	ldi	r25, 0x00	; 0
    88e4:	48 16       	cp	r4, r24
    88e6:	59 06       	cpc	r5, r25
    88e8:	2c f4       	brge	.+10     	; 0x88f4 <vfprintf+0x22e>
    88ea:	14 19       	sub	r17, r4
    88ec:	04 c0       	rjmp	.+8      	; 0x88f6 <vfprintf+0x230>
    88ee:	ee 24       	eor	r14, r14
    88f0:	e3 94       	inc	r14
    88f2:	01 c0       	rjmp	.+2      	; 0x88f6 <vfprintf+0x230>
    88f4:	10 e0       	ldi	r17, 0x00	; 0
    88f6:	37 fe       	sbrs	r3, 7
    88f8:	06 c0       	rjmp	.+12     	; 0x8906 <vfprintf+0x240>
    88fa:	14 14       	cp	r1, r4
    88fc:	15 04       	cpc	r1, r5
    88fe:	34 f4       	brge	.+12     	; 0x890c <vfprintf+0x246>
    8900:	c2 01       	movw	r24, r4
    8902:	01 96       	adiw	r24, 0x01	; 1
    8904:	05 c0       	rjmp	.+10     	; 0x8910 <vfprintf+0x24a>
    8906:	85 e0       	ldi	r24, 0x05	; 5
    8908:	90 e0       	ldi	r25, 0x00	; 0
    890a:	02 c0       	rjmp	.+4      	; 0x8910 <vfprintf+0x24a>
    890c:	81 e0       	ldi	r24, 0x01	; 1
    890e:	90 e0       	ldi	r25, 0x00	; 0
    8910:	21 10       	cpse	r2, r1
    8912:	01 96       	adiw	r24, 0x01	; 1
    8914:	11 23       	and	r17, r17
    8916:	31 f0       	breq	.+12     	; 0x8924 <vfprintf+0x25e>
    8918:	21 2f       	mov	r18, r17
    891a:	30 e0       	ldi	r19, 0x00	; 0
    891c:	2f 5f       	subi	r18, 0xFF	; 255
    891e:	3f 4f       	sbci	r19, 0xFF	; 255
    8920:	82 0f       	add	r24, r18
    8922:	93 1f       	adc	r25, r19
    8924:	2f 2d       	mov	r18, r15
    8926:	30 e0       	ldi	r19, 0x00	; 0
    8928:	82 17       	cp	r24, r18
    892a:	93 07       	cpc	r25, r19
    892c:	14 f4       	brge	.+4      	; 0x8932 <vfprintf+0x26c>
    892e:	f8 1a       	sub	r15, r24
    8930:	01 c0       	rjmp	.+2      	; 0x8934 <vfprintf+0x26e>
    8932:	f1 2c       	mov	r15, r1
    8934:	83 2d       	mov	r24, r3
    8936:	89 70       	andi	r24, 0x09	; 9
    8938:	41 f4       	brne	.+16     	; 0x894a <vfprintf+0x284>
    893a:	ff 20       	and	r15, r15
    893c:	31 f0       	breq	.+12     	; 0x894a <vfprintf+0x284>
    893e:	b6 01       	movw	r22, r12
    8940:	80 e2       	ldi	r24, 0x20	; 32
    8942:	90 e0       	ldi	r25, 0x00	; 0
    8944:	d8 d4       	rcall	.+2480   	; 0x92f6 <fputc>
    8946:	fa 94       	dec	r15
    8948:	f8 cf       	rjmp	.-16     	; 0x893a <vfprintf+0x274>
    894a:	22 20       	and	r2, r2
    894c:	21 f0       	breq	.+8      	; 0x8956 <vfprintf+0x290>
    894e:	b6 01       	movw	r22, r12
    8950:	82 2d       	mov	r24, r2
    8952:	90 e0       	ldi	r25, 0x00	; 0
    8954:	d0 d4       	rcall	.+2464   	; 0x92f6 <fputc>
    8956:	33 fc       	sbrc	r3, 3
    8958:	08 c0       	rjmp	.+16     	; 0x896a <vfprintf+0x2a4>
    895a:	ff 20       	and	r15, r15
    895c:	31 f0       	breq	.+12     	; 0x896a <vfprintf+0x2a4>
    895e:	b6 01       	movw	r22, r12
    8960:	80 e3       	ldi	r24, 0x30	; 48
    8962:	90 e0       	ldi	r25, 0x00	; 0
    8964:	c8 d4       	rcall	.+2448   	; 0x92f6 <fputc>
    8966:	fa 94       	dec	r15
    8968:	f8 cf       	rjmp	.-16     	; 0x895a <vfprintf+0x294>
    896a:	37 fe       	sbrs	r3, 7
    896c:	58 c0       	rjmp	.+176    	; 0x8a1e <vfprintf+0x358>
    896e:	94 2d       	mov	r25, r4
    8970:	85 2d       	mov	r24, r5
    8972:	57 fe       	sbrs	r5, 7
    8974:	02 c0       	rjmp	.+4      	; 0x897a <vfprintf+0x2b4>
    8976:	90 e0       	ldi	r25, 0x00	; 0
    8978:	80 e0       	ldi	r24, 0x00	; 0
    897a:	29 2e       	mov	r2, r25
    897c:	38 2e       	mov	r3, r24
    897e:	20 e0       	ldi	r18, 0x00	; 0
    8980:	30 e0       	ldi	r19, 0x00	; 0
    8982:	a2 01       	movw	r20, r4
    8984:	4e 19       	sub	r20, r14
    8986:	51 09       	sbc	r21, r1
    8988:	5d 87       	std	Y+13, r21	; 0x0d
    898a:	4c 87       	std	Y+12, r20	; 0x0c
    898c:	a2 01       	movw	r20, r4
    898e:	42 19       	sub	r20, r2
    8990:	53 09       	sbc	r21, r3
    8992:	5f 87       	std	Y+15, r21	; 0x0f
    8994:	4e 87       	std	Y+14, r20	; 0x0e
    8996:	61 2f       	mov	r22, r17
    8998:	70 e0       	ldi	r23, 0x00	; 0
    899a:	44 27       	eor	r20, r20
    899c:	55 27       	eor	r21, r21
    899e:	46 1b       	sub	r20, r22
    89a0:	57 0b       	sbc	r21, r23
    89a2:	59 8b       	std	Y+17, r21	; 0x11
    89a4:	48 8b       	std	Y+16, r20	; 0x10
    89a6:	5f ef       	ldi	r21, 0xFF	; 255
    89a8:	25 16       	cp	r2, r21
    89aa:	35 06       	cpc	r3, r21
    89ac:	41 f4       	brne	.+16     	; 0x89be <vfprintf+0x2f8>
    89ae:	b6 01       	movw	r22, r12
    89b0:	8e e2       	ldi	r24, 0x2E	; 46
    89b2:	90 e0       	ldi	r25, 0x00	; 0
    89b4:	2a 8b       	std	Y+18, r18	; 0x12
    89b6:	3b 8b       	std	Y+19, r19	; 0x13
    89b8:	9e d4       	rcall	.+2364   	; 0x92f6 <fputc>
    89ba:	3b 89       	ldd	r19, Y+19	; 0x13
    89bc:	2a 89       	ldd	r18, Y+18	; 0x12
    89be:	42 14       	cp	r4, r2
    89c0:	53 04       	cpc	r5, r3
    89c2:	6c f0       	brlt	.+26     	; 0x89de <vfprintf+0x318>
    89c4:	4c 85       	ldd	r20, Y+12	; 0x0c
    89c6:	5d 85       	ldd	r21, Y+13	; 0x0d
    89c8:	42 15       	cp	r20, r2
    89ca:	53 05       	cpc	r21, r3
    89cc:	44 f4       	brge	.+16     	; 0x89de <vfprintf+0x318>
    89ce:	ee 85       	ldd	r30, Y+14	; 0x0e
    89d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    89d2:	e2 0f       	add	r30, r18
    89d4:	f3 1f       	adc	r31, r19
    89d6:	e6 0d       	add	r30, r6
    89d8:	f7 1d       	adc	r31, r7
    89da:	81 81       	ldd	r24, Z+1	; 0x01
    89dc:	01 c0       	rjmp	.+2      	; 0x89e0 <vfprintf+0x31a>
    89de:	80 e3       	ldi	r24, 0x30	; 48
    89e0:	51 e0       	ldi	r21, 0x01	; 1
    89e2:	25 1a       	sub	r2, r21
    89e4:	31 08       	sbc	r3, r1
    89e6:	2f 5f       	subi	r18, 0xFF	; 255
    89e8:	3f 4f       	sbci	r19, 0xFF	; 255
    89ea:	48 89       	ldd	r20, Y+16	; 0x10
    89ec:	59 89       	ldd	r21, Y+17	; 0x11
    89ee:	24 16       	cp	r2, r20
    89f0:	35 06       	cpc	r3, r21
    89f2:	44 f0       	brlt	.+16     	; 0x8a04 <vfprintf+0x33e>
    89f4:	b6 01       	movw	r22, r12
    89f6:	90 e0       	ldi	r25, 0x00	; 0
    89f8:	2a 8b       	std	Y+18, r18	; 0x12
    89fa:	3b 8b       	std	Y+19, r19	; 0x13
    89fc:	7c d4       	rcall	.+2296   	; 0x92f6 <fputc>
    89fe:	2a 89       	ldd	r18, Y+18	; 0x12
    8a00:	3b 89       	ldd	r19, Y+19	; 0x13
    8a02:	d1 cf       	rjmp	.-94     	; 0x89a6 <vfprintf+0x2e0>
    8a04:	24 14       	cp	r2, r4
    8a06:	35 04       	cpc	r3, r5
    8a08:	39 f4       	brne	.+14     	; 0x8a18 <vfprintf+0x352>
    8a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    8a0c:	96 33       	cpi	r25, 0x36	; 54
    8a0e:	18 f4       	brcc	.+6      	; 0x8a16 <vfprintf+0x350>
    8a10:	95 33       	cpi	r25, 0x35	; 53
    8a12:	11 f4       	brne	.+4      	; 0x8a18 <vfprintf+0x352>
    8a14:	04 ff       	sbrs	r16, 4
    8a16:	81 e3       	ldi	r24, 0x31	; 49
    8a18:	b6 01       	movw	r22, r12
    8a1a:	90 e0       	ldi	r25, 0x00	; 0
    8a1c:	45 c0       	rjmp	.+138    	; 0x8aa8 <vfprintf+0x3e2>
    8a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    8a20:	81 33       	cpi	r24, 0x31	; 49
    8a22:	09 f0       	breq	.+2      	; 0x8a26 <vfprintf+0x360>
    8a24:	0f 7e       	andi	r16, 0xEF	; 239
    8a26:	b6 01       	movw	r22, r12
    8a28:	90 e0       	ldi	r25, 0x00	; 0
    8a2a:	65 d4       	rcall	.+2250   	; 0x92f6 <fputc>
    8a2c:	11 11       	cpse	r17, r1
    8a2e:	05 c0       	rjmp	.+10     	; 0x8a3a <vfprintf+0x374>
    8a30:	34 fc       	sbrc	r3, 4
    8a32:	16 c0       	rjmp	.+44     	; 0x8a60 <vfprintf+0x39a>
    8a34:	85 e6       	ldi	r24, 0x65	; 101
    8a36:	90 e0       	ldi	r25, 0x00	; 0
    8a38:	15 c0       	rjmp	.+42     	; 0x8a64 <vfprintf+0x39e>
    8a3a:	b6 01       	movw	r22, r12
    8a3c:	8e e2       	ldi	r24, 0x2E	; 46
    8a3e:	90 e0       	ldi	r25, 0x00	; 0
    8a40:	5a d4       	rcall	.+2228   	; 0x92f6 <fputc>
    8a42:	82 e0       	ldi	r24, 0x02	; 2
    8a44:	ee 24       	eor	r14, r14
    8a46:	e3 94       	inc	r14
    8a48:	e8 0e       	add	r14, r24
    8a4a:	f3 01       	movw	r30, r6
    8a4c:	e8 0f       	add	r30, r24
    8a4e:	f1 1d       	adc	r31, r1
    8a50:	80 81       	ld	r24, Z
    8a52:	b6 01       	movw	r22, r12
    8a54:	90 e0       	ldi	r25, 0x00	; 0
    8a56:	4f d4       	rcall	.+2206   	; 0x92f6 <fputc>
    8a58:	11 50       	subi	r17, 0x01	; 1
    8a5a:	8e 2d       	mov	r24, r14
    8a5c:	99 f7       	brne	.-26     	; 0x8a44 <vfprintf+0x37e>
    8a5e:	e8 cf       	rjmp	.-48     	; 0x8a30 <vfprintf+0x36a>
    8a60:	85 e4       	ldi	r24, 0x45	; 69
    8a62:	90 e0       	ldi	r25, 0x00	; 0
    8a64:	b6 01       	movw	r22, r12
    8a66:	47 d4       	rcall	.+2190   	; 0x92f6 <fputc>
    8a68:	57 fc       	sbrc	r5, 7
    8a6a:	05 c0       	rjmp	.+10     	; 0x8a76 <vfprintf+0x3b0>
    8a6c:	41 14       	cp	r4, r1
    8a6e:	51 04       	cpc	r5, r1
    8a70:	39 f4       	brne	.+14     	; 0x8a80 <vfprintf+0x3ba>
    8a72:	04 ff       	sbrs	r16, 4
    8a74:	05 c0       	rjmp	.+10     	; 0x8a80 <vfprintf+0x3ba>
    8a76:	51 94       	neg	r5
    8a78:	41 94       	neg	r4
    8a7a:	51 08       	sbc	r5, r1
    8a7c:	8d e2       	ldi	r24, 0x2D	; 45
    8a7e:	01 c0       	rjmp	.+2      	; 0x8a82 <vfprintf+0x3bc>
    8a80:	8b e2       	ldi	r24, 0x2B	; 43
    8a82:	b6 01       	movw	r22, r12
    8a84:	90 e0       	ldi	r25, 0x00	; 0
    8a86:	37 d4       	rcall	.+2158   	; 0x92f6 <fputc>
    8a88:	80 e3       	ldi	r24, 0x30	; 48
    8a8a:	9a e0       	ldi	r25, 0x0A	; 10
    8a8c:	49 16       	cp	r4, r25
    8a8e:	51 04       	cpc	r5, r1
    8a90:	2c f0       	brlt	.+10     	; 0x8a9c <vfprintf+0x3d6>
    8a92:	8f 5f       	subi	r24, 0xFF	; 255
    8a94:	5a e0       	ldi	r21, 0x0A	; 10
    8a96:	45 1a       	sub	r4, r21
    8a98:	51 08       	sbc	r5, r1
    8a9a:	f7 cf       	rjmp	.-18     	; 0x8a8a <vfprintf+0x3c4>
    8a9c:	b6 01       	movw	r22, r12
    8a9e:	90 e0       	ldi	r25, 0x00	; 0
    8aa0:	2a d4       	rcall	.+2132   	; 0x92f6 <fputc>
    8aa2:	b6 01       	movw	r22, r12
    8aa4:	c2 01       	movw	r24, r4
    8aa6:	c0 96       	adiw	r24, 0x30	; 48
    8aa8:	26 d4       	rcall	.+2124   	; 0x92f6 <fputc>
    8aaa:	4c c1       	rjmp	.+664    	; 0x8d44 <vfprintf+0x67e>
    8aac:	83 36       	cpi	r24, 0x63	; 99
    8aae:	31 f0       	breq	.+12     	; 0x8abc <vfprintf+0x3f6>
    8ab0:	83 37       	cpi	r24, 0x73	; 115
    8ab2:	79 f0       	breq	.+30     	; 0x8ad2 <vfprintf+0x40c>
    8ab4:	83 35       	cpi	r24, 0x53	; 83
    8ab6:	09 f0       	breq	.+2      	; 0x8aba <vfprintf+0x3f4>
    8ab8:	54 c0       	rjmp	.+168    	; 0x8b62 <vfprintf+0x49c>
    8aba:	20 c0       	rjmp	.+64     	; 0x8afc <vfprintf+0x436>
    8abc:	52 01       	movw	r10, r4
    8abe:	e2 e0       	ldi	r30, 0x02	; 2
    8ac0:	ae 0e       	add	r10, r30
    8ac2:	b1 1c       	adc	r11, r1
    8ac4:	f2 01       	movw	r30, r4
    8ac6:	80 81       	ld	r24, Z
    8ac8:	89 83       	std	Y+1, r24	; 0x01
    8aca:	01 e0       	ldi	r16, 0x01	; 1
    8acc:	10 e0       	ldi	r17, 0x00	; 0
    8ace:	23 01       	movw	r4, r6
    8ad0:	13 c0       	rjmp	.+38     	; 0x8af8 <vfprintf+0x432>
    8ad2:	52 01       	movw	r10, r4
    8ad4:	f2 e0       	ldi	r31, 0x02	; 2
    8ad6:	af 0e       	add	r10, r31
    8ad8:	b1 1c       	adc	r11, r1
    8ada:	f2 01       	movw	r30, r4
    8adc:	40 80       	ld	r4, Z
    8ade:	51 80       	ldd	r5, Z+1	; 0x01
    8ae0:	26 ff       	sbrs	r18, 6
    8ae2:	03 c0       	rjmp	.+6      	; 0x8aea <vfprintf+0x424>
    8ae4:	61 2f       	mov	r22, r17
    8ae6:	70 e0       	ldi	r23, 0x00	; 0
    8ae8:	02 c0       	rjmp	.+4      	; 0x8aee <vfprintf+0x428>
    8aea:	6f ef       	ldi	r22, 0xFF	; 255
    8aec:	7f ef       	ldi	r23, 0xFF	; 255
    8aee:	c2 01       	movw	r24, r4
    8af0:	2a 8b       	std	Y+18, r18	; 0x12
    8af2:	f6 d3       	rcall	.+2028   	; 0x92e0 <strnlen>
    8af4:	8c 01       	movw	r16, r24
    8af6:	2a 89       	ldd	r18, Y+18	; 0x12
    8af8:	2f 77       	andi	r18, 0x7F	; 127
    8afa:	14 c0       	rjmp	.+40     	; 0x8b24 <vfprintf+0x45e>
    8afc:	52 01       	movw	r10, r4
    8afe:	f2 e0       	ldi	r31, 0x02	; 2
    8b00:	af 0e       	add	r10, r31
    8b02:	b1 1c       	adc	r11, r1
    8b04:	f2 01       	movw	r30, r4
    8b06:	40 80       	ld	r4, Z
    8b08:	51 80       	ldd	r5, Z+1	; 0x01
    8b0a:	26 ff       	sbrs	r18, 6
    8b0c:	03 c0       	rjmp	.+6      	; 0x8b14 <vfprintf+0x44e>
    8b0e:	61 2f       	mov	r22, r17
    8b10:	70 e0       	ldi	r23, 0x00	; 0
    8b12:	02 c0       	rjmp	.+4      	; 0x8b18 <vfprintf+0x452>
    8b14:	6f ef       	ldi	r22, 0xFF	; 255
    8b16:	7f ef       	ldi	r23, 0xFF	; 255
    8b18:	c2 01       	movw	r24, r4
    8b1a:	2a 8b       	std	Y+18, r18	; 0x12
    8b1c:	d6 d3       	rcall	.+1964   	; 0x92ca <strnlen_P>
    8b1e:	8c 01       	movw	r16, r24
    8b20:	2a 89       	ldd	r18, Y+18	; 0x12
    8b22:	20 68       	ori	r18, 0x80	; 128
    8b24:	32 2e       	mov	r3, r18
    8b26:	23 fd       	sbrc	r18, 3
    8b28:	18 c0       	rjmp	.+48     	; 0x8b5a <vfprintf+0x494>
    8b2a:	8f 2d       	mov	r24, r15
    8b2c:	90 e0       	ldi	r25, 0x00	; 0
    8b2e:	08 17       	cp	r16, r24
    8b30:	19 07       	cpc	r17, r25
    8b32:	98 f4       	brcc	.+38     	; 0x8b5a <vfprintf+0x494>
    8b34:	b6 01       	movw	r22, r12
    8b36:	80 e2       	ldi	r24, 0x20	; 32
    8b38:	90 e0       	ldi	r25, 0x00	; 0
    8b3a:	dd d3       	rcall	.+1978   	; 0x92f6 <fputc>
    8b3c:	fa 94       	dec	r15
    8b3e:	f5 cf       	rjmp	.-22     	; 0x8b2a <vfprintf+0x464>
    8b40:	f2 01       	movw	r30, r4
    8b42:	37 fc       	sbrc	r3, 7
    8b44:	85 91       	lpm	r24, Z+
    8b46:	37 fe       	sbrs	r3, 7
    8b48:	81 91       	ld	r24, Z+
    8b4a:	2f 01       	movw	r4, r30
    8b4c:	b6 01       	movw	r22, r12
    8b4e:	90 e0       	ldi	r25, 0x00	; 0
    8b50:	d2 d3       	rcall	.+1956   	; 0x92f6 <fputc>
    8b52:	f1 10       	cpse	r15, r1
    8b54:	fa 94       	dec	r15
    8b56:	01 50       	subi	r16, 0x01	; 1
    8b58:	11 09       	sbc	r17, r1
    8b5a:	01 15       	cp	r16, r1
    8b5c:	11 05       	cpc	r17, r1
    8b5e:	81 f7       	brne	.-32     	; 0x8b40 <vfprintf+0x47a>
    8b60:	f1 c0       	rjmp	.+482    	; 0x8d44 <vfprintf+0x67e>
    8b62:	84 36       	cpi	r24, 0x64	; 100
    8b64:	11 f0       	breq	.+4      	; 0x8b6a <vfprintf+0x4a4>
    8b66:	89 36       	cpi	r24, 0x69	; 105
    8b68:	51 f5       	brne	.+84     	; 0x8bbe <vfprintf+0x4f8>
    8b6a:	52 01       	movw	r10, r4
    8b6c:	27 ff       	sbrs	r18, 7
    8b6e:	09 c0       	rjmp	.+18     	; 0x8b82 <vfprintf+0x4bc>
    8b70:	f4 e0       	ldi	r31, 0x04	; 4
    8b72:	af 0e       	add	r10, r31
    8b74:	b1 1c       	adc	r11, r1
    8b76:	f2 01       	movw	r30, r4
    8b78:	60 81       	ld	r22, Z
    8b7a:	71 81       	ldd	r23, Z+1	; 0x01
    8b7c:	82 81       	ldd	r24, Z+2	; 0x02
    8b7e:	93 81       	ldd	r25, Z+3	; 0x03
    8b80:	0a c0       	rjmp	.+20     	; 0x8b96 <vfprintf+0x4d0>
    8b82:	f2 e0       	ldi	r31, 0x02	; 2
    8b84:	af 0e       	add	r10, r31
    8b86:	b1 1c       	adc	r11, r1
    8b88:	f2 01       	movw	r30, r4
    8b8a:	60 81       	ld	r22, Z
    8b8c:	71 81       	ldd	r23, Z+1	; 0x01
    8b8e:	07 2e       	mov	r0, r23
    8b90:	00 0c       	add	r0, r0
    8b92:	88 0b       	sbc	r24, r24
    8b94:	99 0b       	sbc	r25, r25
    8b96:	2f 76       	andi	r18, 0x6F	; 111
    8b98:	32 2e       	mov	r3, r18
    8b9a:	97 ff       	sbrs	r25, 7
    8b9c:	09 c0       	rjmp	.+18     	; 0x8bb0 <vfprintf+0x4ea>
    8b9e:	90 95       	com	r25
    8ba0:	80 95       	com	r24
    8ba2:	70 95       	com	r23
    8ba4:	61 95       	neg	r22
    8ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    8baa:	9f 4f       	sbci	r25, 0xFF	; 255
    8bac:	20 68       	ori	r18, 0x80	; 128
    8bae:	32 2e       	mov	r3, r18
    8bb0:	2a e0       	ldi	r18, 0x0A	; 10
    8bb2:	30 e0       	ldi	r19, 0x00	; 0
    8bb4:	a3 01       	movw	r20, r6
    8bb6:	06 d4       	rcall	.+2060   	; 0x93c4 <__ultoa_invert>
    8bb8:	e8 2e       	mov	r14, r24
    8bba:	e6 18       	sub	r14, r6
    8bbc:	3e c0       	rjmp	.+124    	; 0x8c3a <vfprintf+0x574>
    8bbe:	02 2f       	mov	r16, r18
    8bc0:	85 37       	cpi	r24, 0x75	; 117
    8bc2:	21 f4       	brne	.+8      	; 0x8bcc <vfprintf+0x506>
    8bc4:	0f 7e       	andi	r16, 0xEF	; 239
    8bc6:	2a e0       	ldi	r18, 0x0A	; 10
    8bc8:	30 e0       	ldi	r19, 0x00	; 0
    8bca:	1d c0       	rjmp	.+58     	; 0x8c06 <vfprintf+0x540>
    8bcc:	09 7f       	andi	r16, 0xF9	; 249
    8bce:	8f 36       	cpi	r24, 0x6F	; 111
    8bd0:	91 f0       	breq	.+36     	; 0x8bf6 <vfprintf+0x530>
    8bd2:	18 f4       	brcc	.+6      	; 0x8bda <vfprintf+0x514>
    8bd4:	88 35       	cpi	r24, 0x58	; 88
    8bd6:	59 f0       	breq	.+22     	; 0x8bee <vfprintf+0x528>
    8bd8:	be c0       	rjmp	.+380    	; 0x8d56 <vfprintf+0x690>
    8bda:	80 37       	cpi	r24, 0x70	; 112
    8bdc:	19 f0       	breq	.+6      	; 0x8be4 <vfprintf+0x51e>
    8bde:	88 37       	cpi	r24, 0x78	; 120
    8be0:	11 f0       	breq	.+4      	; 0x8be6 <vfprintf+0x520>
    8be2:	b9 c0       	rjmp	.+370    	; 0x8d56 <vfprintf+0x690>
    8be4:	00 61       	ori	r16, 0x10	; 16
    8be6:	04 ff       	sbrs	r16, 4
    8be8:	09 c0       	rjmp	.+18     	; 0x8bfc <vfprintf+0x536>
    8bea:	04 60       	ori	r16, 0x04	; 4
    8bec:	07 c0       	rjmp	.+14     	; 0x8bfc <vfprintf+0x536>
    8bee:	24 ff       	sbrs	r18, 4
    8bf0:	08 c0       	rjmp	.+16     	; 0x8c02 <vfprintf+0x53c>
    8bf2:	06 60       	ori	r16, 0x06	; 6
    8bf4:	06 c0       	rjmp	.+12     	; 0x8c02 <vfprintf+0x53c>
    8bf6:	28 e0       	ldi	r18, 0x08	; 8
    8bf8:	30 e0       	ldi	r19, 0x00	; 0
    8bfa:	05 c0       	rjmp	.+10     	; 0x8c06 <vfprintf+0x540>
    8bfc:	20 e1       	ldi	r18, 0x10	; 16
    8bfe:	30 e0       	ldi	r19, 0x00	; 0
    8c00:	02 c0       	rjmp	.+4      	; 0x8c06 <vfprintf+0x540>
    8c02:	20 e1       	ldi	r18, 0x10	; 16
    8c04:	32 e0       	ldi	r19, 0x02	; 2
    8c06:	52 01       	movw	r10, r4
    8c08:	07 ff       	sbrs	r16, 7
    8c0a:	09 c0       	rjmp	.+18     	; 0x8c1e <vfprintf+0x558>
    8c0c:	f4 e0       	ldi	r31, 0x04	; 4
    8c0e:	af 0e       	add	r10, r31
    8c10:	b1 1c       	adc	r11, r1
    8c12:	f2 01       	movw	r30, r4
    8c14:	60 81       	ld	r22, Z
    8c16:	71 81       	ldd	r23, Z+1	; 0x01
    8c18:	82 81       	ldd	r24, Z+2	; 0x02
    8c1a:	93 81       	ldd	r25, Z+3	; 0x03
    8c1c:	08 c0       	rjmp	.+16     	; 0x8c2e <vfprintf+0x568>
    8c1e:	f2 e0       	ldi	r31, 0x02	; 2
    8c20:	af 0e       	add	r10, r31
    8c22:	b1 1c       	adc	r11, r1
    8c24:	f2 01       	movw	r30, r4
    8c26:	60 81       	ld	r22, Z
    8c28:	71 81       	ldd	r23, Z+1	; 0x01
    8c2a:	80 e0       	ldi	r24, 0x00	; 0
    8c2c:	90 e0       	ldi	r25, 0x00	; 0
    8c2e:	a3 01       	movw	r20, r6
    8c30:	c9 d3       	rcall	.+1938   	; 0x93c4 <__ultoa_invert>
    8c32:	e8 2e       	mov	r14, r24
    8c34:	e6 18       	sub	r14, r6
    8c36:	0f 77       	andi	r16, 0x7F	; 127
    8c38:	30 2e       	mov	r3, r16
    8c3a:	36 fe       	sbrs	r3, 6
    8c3c:	0b c0       	rjmp	.+22     	; 0x8c54 <vfprintf+0x58e>
    8c3e:	33 2d       	mov	r19, r3
    8c40:	3e 7f       	andi	r19, 0xFE	; 254
    8c42:	e1 16       	cp	r14, r17
    8c44:	50 f4       	brcc	.+20     	; 0x8c5a <vfprintf+0x594>
    8c46:	34 fe       	sbrs	r3, 4
    8c48:	0a c0       	rjmp	.+20     	; 0x8c5e <vfprintf+0x598>
    8c4a:	32 fc       	sbrc	r3, 2
    8c4c:	08 c0       	rjmp	.+16     	; 0x8c5e <vfprintf+0x598>
    8c4e:	33 2d       	mov	r19, r3
    8c50:	3e 7e       	andi	r19, 0xEE	; 238
    8c52:	05 c0       	rjmp	.+10     	; 0x8c5e <vfprintf+0x598>
    8c54:	0e 2d       	mov	r16, r14
    8c56:	33 2d       	mov	r19, r3
    8c58:	03 c0       	rjmp	.+6      	; 0x8c60 <vfprintf+0x59a>
    8c5a:	0e 2d       	mov	r16, r14
    8c5c:	01 c0       	rjmp	.+2      	; 0x8c60 <vfprintf+0x59a>
    8c5e:	01 2f       	mov	r16, r17
    8c60:	34 ff       	sbrs	r19, 4
    8c62:	0c c0       	rjmp	.+24     	; 0x8c7c <vfprintf+0x5b6>
    8c64:	fe 01       	movw	r30, r28
    8c66:	ee 0d       	add	r30, r14
    8c68:	f1 1d       	adc	r31, r1
    8c6a:	80 81       	ld	r24, Z
    8c6c:	80 33       	cpi	r24, 0x30	; 48
    8c6e:	11 f4       	brne	.+4      	; 0x8c74 <vfprintf+0x5ae>
    8c70:	39 7e       	andi	r19, 0xE9	; 233
    8c72:	08 c0       	rjmp	.+16     	; 0x8c84 <vfprintf+0x5be>
    8c74:	32 ff       	sbrs	r19, 2
    8c76:	05 c0       	rjmp	.+10     	; 0x8c82 <vfprintf+0x5bc>
    8c78:	0e 5f       	subi	r16, 0xFE	; 254
    8c7a:	04 c0       	rjmp	.+8      	; 0x8c84 <vfprintf+0x5be>
    8c7c:	83 2f       	mov	r24, r19
    8c7e:	86 78       	andi	r24, 0x86	; 134
    8c80:	09 f0       	breq	.+2      	; 0x8c84 <vfprintf+0x5be>
    8c82:	0f 5f       	subi	r16, 0xFF	; 255
    8c84:	33 fd       	sbrc	r19, 3
    8c86:	12 c0       	rjmp	.+36     	; 0x8cac <vfprintf+0x5e6>
    8c88:	30 ff       	sbrs	r19, 0
    8c8a:	06 c0       	rjmp	.+12     	; 0x8c98 <vfprintf+0x5d2>
    8c8c:	1e 2d       	mov	r17, r14
    8c8e:	0f 15       	cp	r16, r15
    8c90:	18 f4       	brcc	.+6      	; 0x8c98 <vfprintf+0x5d2>
    8c92:	1f 0d       	add	r17, r15
    8c94:	10 1b       	sub	r17, r16
    8c96:	0f 2d       	mov	r16, r15
    8c98:	0f 15       	cp	r16, r15
    8c9a:	60 f4       	brcc	.+24     	; 0x8cb4 <vfprintf+0x5ee>
    8c9c:	b6 01       	movw	r22, r12
    8c9e:	80 e2       	ldi	r24, 0x20	; 32
    8ca0:	90 e0       	ldi	r25, 0x00	; 0
    8ca2:	3b 8b       	std	Y+19, r19	; 0x13
    8ca4:	28 d3       	rcall	.+1616   	; 0x92f6 <fputc>
    8ca6:	0f 5f       	subi	r16, 0xFF	; 255
    8ca8:	3b 89       	ldd	r19, Y+19	; 0x13
    8caa:	f6 cf       	rjmp	.-20     	; 0x8c98 <vfprintf+0x5d2>
    8cac:	0f 15       	cp	r16, r15
    8cae:	10 f4       	brcc	.+4      	; 0x8cb4 <vfprintf+0x5ee>
    8cb0:	f0 1a       	sub	r15, r16
    8cb2:	01 c0       	rjmp	.+2      	; 0x8cb6 <vfprintf+0x5f0>
    8cb4:	f1 2c       	mov	r15, r1
    8cb6:	34 ff       	sbrs	r19, 4
    8cb8:	11 c0       	rjmp	.+34     	; 0x8cdc <vfprintf+0x616>
    8cba:	b6 01       	movw	r22, r12
    8cbc:	80 e3       	ldi	r24, 0x30	; 48
    8cbe:	90 e0       	ldi	r25, 0x00	; 0
    8cc0:	3b 8b       	std	Y+19, r19	; 0x13
    8cc2:	19 d3       	rcall	.+1586   	; 0x92f6 <fputc>
    8cc4:	3b 89       	ldd	r19, Y+19	; 0x13
    8cc6:	32 ff       	sbrs	r19, 2
    8cc8:	16 c0       	rjmp	.+44     	; 0x8cf6 <vfprintf+0x630>
    8cca:	31 fd       	sbrc	r19, 1
    8ccc:	03 c0       	rjmp	.+6      	; 0x8cd4 <vfprintf+0x60e>
    8cce:	88 e7       	ldi	r24, 0x78	; 120
    8cd0:	90 e0       	ldi	r25, 0x00	; 0
    8cd2:	02 c0       	rjmp	.+4      	; 0x8cd8 <vfprintf+0x612>
    8cd4:	88 e5       	ldi	r24, 0x58	; 88
    8cd6:	90 e0       	ldi	r25, 0x00	; 0
    8cd8:	b6 01       	movw	r22, r12
    8cda:	0c c0       	rjmp	.+24     	; 0x8cf4 <vfprintf+0x62e>
    8cdc:	83 2f       	mov	r24, r19
    8cde:	86 78       	andi	r24, 0x86	; 134
    8ce0:	51 f0       	breq	.+20     	; 0x8cf6 <vfprintf+0x630>
    8ce2:	31 ff       	sbrs	r19, 1
    8ce4:	02 c0       	rjmp	.+4      	; 0x8cea <vfprintf+0x624>
    8ce6:	8b e2       	ldi	r24, 0x2B	; 43
    8ce8:	01 c0       	rjmp	.+2      	; 0x8cec <vfprintf+0x626>
    8cea:	80 e2       	ldi	r24, 0x20	; 32
    8cec:	37 fd       	sbrc	r19, 7
    8cee:	8d e2       	ldi	r24, 0x2D	; 45
    8cf0:	b6 01       	movw	r22, r12
    8cf2:	90 e0       	ldi	r25, 0x00	; 0
    8cf4:	00 d3       	rcall	.+1536   	; 0x92f6 <fputc>
    8cf6:	e1 16       	cp	r14, r17
    8cf8:	30 f4       	brcc	.+12     	; 0x8d06 <vfprintf+0x640>
    8cfa:	b6 01       	movw	r22, r12
    8cfc:	80 e3       	ldi	r24, 0x30	; 48
    8cfe:	90 e0       	ldi	r25, 0x00	; 0
    8d00:	fa d2       	rcall	.+1524   	; 0x92f6 <fputc>
    8d02:	11 50       	subi	r17, 0x01	; 1
    8d04:	f8 cf       	rjmp	.-16     	; 0x8cf6 <vfprintf+0x630>
    8d06:	ea 94       	dec	r14
    8d08:	f3 01       	movw	r30, r6
    8d0a:	ee 0d       	add	r30, r14
    8d0c:	f1 1d       	adc	r31, r1
    8d0e:	80 81       	ld	r24, Z
    8d10:	b6 01       	movw	r22, r12
    8d12:	90 e0       	ldi	r25, 0x00	; 0
    8d14:	f0 d2       	rcall	.+1504   	; 0x92f6 <fputc>
    8d16:	e1 10       	cpse	r14, r1
    8d18:	f6 cf       	rjmp	.-20     	; 0x8d06 <vfprintf+0x640>
    8d1a:	14 c0       	rjmp	.+40     	; 0x8d44 <vfprintf+0x67e>
    8d1c:	f4 e0       	ldi	r31, 0x04	; 4
    8d1e:	ff 15       	cp	r31, r15
    8d20:	48 f5       	brcc	.+82     	; 0x8d74 <vfprintf+0x6ae>
    8d22:	84 e0       	ldi	r24, 0x04	; 4
    8d24:	f8 1a       	sub	r15, r24
    8d26:	33 fe       	sbrs	r3, 3
    8d28:	1d c0       	rjmp	.+58     	; 0x8d64 <vfprintf+0x69e>
    8d2a:	21 10       	cpse	r2, r1
    8d2c:	24 c0       	rjmp	.+72     	; 0x8d76 <vfprintf+0x6b0>
    8d2e:	03 ff       	sbrs	r16, 3
    8d30:	27 c0       	rjmp	.+78     	; 0x8d80 <vfprintf+0x6ba>
    8d32:	0c ea       	ldi	r16, 0xAC	; 172
    8d34:	15 e0       	ldi	r17, 0x05	; 5
    8d36:	f3 2d       	mov	r31, r3
    8d38:	f0 71       	andi	r31, 0x10	; 16
    8d3a:	3f 2e       	mov	r3, r31
    8d3c:	f8 01       	movw	r30, r16
    8d3e:	84 91       	lpm	r24, Z
    8d40:	81 11       	cpse	r24, r1
    8d42:	21 c0       	rjmp	.+66     	; 0x8d86 <vfprintf+0x6c0>
    8d44:	ff 20       	and	r15, r15
    8d46:	09 f4       	brne	.+2      	; 0x8d4a <vfprintf+0x684>
    8d48:	fd cc       	rjmp	.-1542   	; 0x8744 <vfprintf+0x7e>
    8d4a:	b6 01       	movw	r22, r12
    8d4c:	80 e2       	ldi	r24, 0x20	; 32
    8d4e:	90 e0       	ldi	r25, 0x00	; 0
    8d50:	d2 d2       	rcall	.+1444   	; 0x92f6 <fputc>
    8d52:	fa 94       	dec	r15
    8d54:	f7 cf       	rjmp	.-18     	; 0x8d44 <vfprintf+0x67e>
    8d56:	f6 01       	movw	r30, r12
    8d58:	86 81       	ldd	r24, Z+6	; 0x06
    8d5a:	97 81       	ldd	r25, Z+7	; 0x07
    8d5c:	23 c0       	rjmp	.+70     	; 0x8da4 <vfprintf+0x6de>
    8d5e:	8f ef       	ldi	r24, 0xFF	; 255
    8d60:	9f ef       	ldi	r25, 0xFF	; 255
    8d62:	20 c0       	rjmp	.+64     	; 0x8da4 <vfprintf+0x6de>
    8d64:	b6 01       	movw	r22, r12
    8d66:	80 e2       	ldi	r24, 0x20	; 32
    8d68:	90 e0       	ldi	r25, 0x00	; 0
    8d6a:	c5 d2       	rcall	.+1418   	; 0x92f6 <fputc>
    8d6c:	fa 94       	dec	r15
    8d6e:	f1 10       	cpse	r15, r1
    8d70:	f9 cf       	rjmp	.-14     	; 0x8d64 <vfprintf+0x69e>
    8d72:	db cf       	rjmp	.-74     	; 0x8d2a <vfprintf+0x664>
    8d74:	f1 2c       	mov	r15, r1
    8d76:	b6 01       	movw	r22, r12
    8d78:	82 2d       	mov	r24, r2
    8d7a:	90 e0       	ldi	r25, 0x00	; 0
    8d7c:	bc d2       	rcall	.+1400   	; 0x92f6 <fputc>
    8d7e:	d7 cf       	rjmp	.-82     	; 0x8d2e <vfprintf+0x668>
    8d80:	00 eb       	ldi	r16, 0xB0	; 176
    8d82:	15 e0       	ldi	r17, 0x05	; 5
    8d84:	d8 cf       	rjmp	.-80     	; 0x8d36 <vfprintf+0x670>
    8d86:	31 10       	cpse	r3, r1
    8d88:	80 52       	subi	r24, 0x20	; 32
    8d8a:	b6 01       	movw	r22, r12
    8d8c:	90 e0       	ldi	r25, 0x00	; 0
    8d8e:	b3 d2       	rcall	.+1382   	; 0x92f6 <fputc>
    8d90:	0f 5f       	subi	r16, 0xFF	; 255
    8d92:	1f 4f       	sbci	r17, 0xFF	; 255
    8d94:	d3 cf       	rjmp	.-90     	; 0x8d3c <vfprintf+0x676>
    8d96:	23 e0       	ldi	r18, 0x03	; 3
    8d98:	2f 15       	cp	r18, r15
    8d9a:	10 f4       	brcc	.+4      	; 0x8da0 <vfprintf+0x6da>
    8d9c:	83 e0       	ldi	r24, 0x03	; 3
    8d9e:	c2 cf       	rjmp	.-124    	; 0x8d24 <vfprintf+0x65e>
    8da0:	f1 2c       	mov	r15, r1
    8da2:	c5 cf       	rjmp	.-118    	; 0x8d2e <vfprintf+0x668>
    8da4:	63 96       	adiw	r28, 0x13	; 19
    8da6:	0f b6       	in	r0, 0x3f	; 63
    8da8:	f8 94       	cli
    8daa:	de bf       	out	0x3e, r29	; 62
    8dac:	0f be       	out	0x3f, r0	; 63
    8dae:	cd bf       	out	0x3d, r28	; 61
    8db0:	df 91       	pop	r29
    8db2:	cf 91       	pop	r28
    8db4:	1f 91       	pop	r17
    8db6:	0f 91       	pop	r16
    8db8:	ff 90       	pop	r15
    8dba:	ef 90       	pop	r14
    8dbc:	df 90       	pop	r13
    8dbe:	cf 90       	pop	r12
    8dc0:	bf 90       	pop	r11
    8dc2:	af 90       	pop	r10
    8dc4:	9f 90       	pop	r9
    8dc6:	8f 90       	pop	r8
    8dc8:	7f 90       	pop	r7
    8dca:	6f 90       	pop	r6
    8dcc:	5f 90       	pop	r5
    8dce:	4f 90       	pop	r4
    8dd0:	3f 90       	pop	r3
    8dd2:	2f 90       	pop	r2
    8dd4:	08 95       	ret

00008dd6 <__mulsi3>:
    8dd6:	db 01       	movw	r26, r22
    8dd8:	8f 93       	push	r24
    8dda:	9f 93       	push	r25
    8ddc:	61 d0       	rcall	.+194    	; 0x8ea0 <__muluhisi3>
    8dde:	bf 91       	pop	r27
    8de0:	af 91       	pop	r26
    8de2:	a2 9f       	mul	r26, r18
    8de4:	80 0d       	add	r24, r0
    8de6:	91 1d       	adc	r25, r1
    8de8:	a3 9f       	mul	r26, r19
    8dea:	90 0d       	add	r25, r0
    8dec:	b2 9f       	mul	r27, r18
    8dee:	90 0d       	add	r25, r0
    8df0:	11 24       	eor	r1, r1
    8df2:	08 95       	ret

00008df4 <__udivmodsi4>:
    8df4:	a1 e2       	ldi	r26, 0x21	; 33
    8df6:	1a 2e       	mov	r1, r26
    8df8:	aa 1b       	sub	r26, r26
    8dfa:	bb 1b       	sub	r27, r27
    8dfc:	fd 01       	movw	r30, r26
    8dfe:	0d c0       	rjmp	.+26     	; 0x8e1a <__udivmodsi4_ep>

00008e00 <__udivmodsi4_loop>:
    8e00:	aa 1f       	adc	r26, r26
    8e02:	bb 1f       	adc	r27, r27
    8e04:	ee 1f       	adc	r30, r30
    8e06:	ff 1f       	adc	r31, r31
    8e08:	a2 17       	cp	r26, r18
    8e0a:	b3 07       	cpc	r27, r19
    8e0c:	e4 07       	cpc	r30, r20
    8e0e:	f5 07       	cpc	r31, r21
    8e10:	20 f0       	brcs	.+8      	; 0x8e1a <__udivmodsi4_ep>
    8e12:	a2 1b       	sub	r26, r18
    8e14:	b3 0b       	sbc	r27, r19
    8e16:	e4 0b       	sbc	r30, r20
    8e18:	f5 0b       	sbc	r31, r21

00008e1a <__udivmodsi4_ep>:
    8e1a:	66 1f       	adc	r22, r22
    8e1c:	77 1f       	adc	r23, r23
    8e1e:	88 1f       	adc	r24, r24
    8e20:	99 1f       	adc	r25, r25
    8e22:	1a 94       	dec	r1
    8e24:	69 f7       	brne	.-38     	; 0x8e00 <__udivmodsi4_loop>
    8e26:	60 95       	com	r22
    8e28:	70 95       	com	r23
    8e2a:	80 95       	com	r24
    8e2c:	90 95       	com	r25
    8e2e:	9b 01       	movw	r18, r22
    8e30:	ac 01       	movw	r20, r24
    8e32:	bd 01       	movw	r22, r26
    8e34:	cf 01       	movw	r24, r30
    8e36:	08 95       	ret

00008e38 <__divmodsi4>:
    8e38:	05 2e       	mov	r0, r21
    8e3a:	97 fb       	bst	r25, 7
    8e3c:	16 f4       	brtc	.+4      	; 0x8e42 <__divmodsi4+0xa>
    8e3e:	00 94       	com	r0
    8e40:	0f d0       	rcall	.+30     	; 0x8e60 <__negsi2>
    8e42:	57 fd       	sbrc	r21, 7
    8e44:	05 d0       	rcall	.+10     	; 0x8e50 <__divmodsi4_neg2>
    8e46:	d6 df       	rcall	.-84     	; 0x8df4 <__udivmodsi4>
    8e48:	07 fc       	sbrc	r0, 7
    8e4a:	02 d0       	rcall	.+4      	; 0x8e50 <__divmodsi4_neg2>
    8e4c:	46 f4       	brtc	.+16     	; 0x8e5e <__divmodsi4_exit>
    8e4e:	08 c0       	rjmp	.+16     	; 0x8e60 <__negsi2>

00008e50 <__divmodsi4_neg2>:
    8e50:	50 95       	com	r21
    8e52:	40 95       	com	r20
    8e54:	30 95       	com	r19
    8e56:	21 95       	neg	r18
    8e58:	3f 4f       	sbci	r19, 0xFF	; 255
    8e5a:	4f 4f       	sbci	r20, 0xFF	; 255
    8e5c:	5f 4f       	sbci	r21, 0xFF	; 255

00008e5e <__divmodsi4_exit>:
    8e5e:	08 95       	ret

00008e60 <__negsi2>:
    8e60:	90 95       	com	r25
    8e62:	80 95       	com	r24
    8e64:	70 95       	com	r23
    8e66:	61 95       	neg	r22
    8e68:	7f 4f       	sbci	r23, 0xFF	; 255
    8e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    8e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    8e6e:	08 95       	ret

00008e70 <__tablejump2__>:
    8e70:	ee 0f       	add	r30, r30
    8e72:	ff 1f       	adc	r31, r31
    8e74:	00 24       	eor	r0, r0
    8e76:	00 1c       	adc	r0, r0
    8e78:	0b be       	out	0x3b, r0	; 59
    8e7a:	07 90       	elpm	r0, Z+
    8e7c:	f6 91       	elpm	r31, Z
    8e7e:	e0 2d       	mov	r30, r0
    8e80:	09 94       	ijmp

00008e82 <__umulhisi3>:
    8e82:	a2 9f       	mul	r26, r18
    8e84:	b0 01       	movw	r22, r0
    8e86:	b3 9f       	mul	r27, r19
    8e88:	c0 01       	movw	r24, r0
    8e8a:	a3 9f       	mul	r26, r19
    8e8c:	70 0d       	add	r23, r0
    8e8e:	81 1d       	adc	r24, r1
    8e90:	11 24       	eor	r1, r1
    8e92:	91 1d       	adc	r25, r1
    8e94:	b2 9f       	mul	r27, r18
    8e96:	70 0d       	add	r23, r0
    8e98:	81 1d       	adc	r24, r1
    8e9a:	11 24       	eor	r1, r1
    8e9c:	91 1d       	adc	r25, r1
    8e9e:	08 95       	ret

00008ea0 <__muluhisi3>:
    8ea0:	f0 df       	rcall	.-32     	; 0x8e82 <__umulhisi3>
    8ea2:	a5 9f       	mul	r26, r21
    8ea4:	90 0d       	add	r25, r0
    8ea6:	b4 9f       	mul	r27, r20
    8ea8:	90 0d       	add	r25, r0
    8eaa:	a4 9f       	mul	r26, r20
    8eac:	80 0d       	add	r24, r0
    8eae:	91 1d       	adc	r25, r1
    8eb0:	11 24       	eor	r1, r1
    8eb2:	08 95       	ret

00008eb4 <__mulshisi3>:
    8eb4:	b7 ff       	sbrs	r27, 7
    8eb6:	f4 cf       	rjmp	.-24     	; 0x8ea0 <__muluhisi3>

00008eb8 <__mulohisi3>:
    8eb8:	f3 df       	rcall	.-26     	; 0x8ea0 <__muluhisi3>
    8eba:	82 1b       	sub	r24, r18
    8ebc:	93 0b       	sbc	r25, r19
    8ebe:	08 95       	ret

00008ec0 <malloc>:
    8ec0:	cf 93       	push	r28
    8ec2:	df 93       	push	r29
    8ec4:	82 30       	cpi	r24, 0x02	; 2
    8ec6:	91 05       	cpc	r25, r1
    8ec8:	10 f4       	brcc	.+4      	; 0x8ece <malloc+0xe>
    8eca:	82 e0       	ldi	r24, 0x02	; 2
    8ecc:	90 e0       	ldi	r25, 0x00	; 0
    8ece:	e0 91 5d 0e 	lds	r30, 0x0E5D
    8ed2:	f0 91 5e 0e 	lds	r31, 0x0E5E
    8ed6:	20 e0       	ldi	r18, 0x00	; 0
    8ed8:	30 e0       	ldi	r19, 0x00	; 0
    8eda:	c0 e0       	ldi	r28, 0x00	; 0
    8edc:	d0 e0       	ldi	r29, 0x00	; 0
    8ede:	30 97       	sbiw	r30, 0x00	; 0
    8ee0:	11 f1       	breq	.+68     	; 0x8f26 <malloc+0x66>
    8ee2:	40 81       	ld	r20, Z
    8ee4:	51 81       	ldd	r21, Z+1	; 0x01
    8ee6:	48 17       	cp	r20, r24
    8ee8:	59 07       	cpc	r21, r25
    8eea:	c0 f0       	brcs	.+48     	; 0x8f1c <malloc+0x5c>
    8eec:	48 17       	cp	r20, r24
    8eee:	59 07       	cpc	r21, r25
    8ef0:	61 f4       	brne	.+24     	; 0x8f0a <malloc+0x4a>
    8ef2:	82 81       	ldd	r24, Z+2	; 0x02
    8ef4:	93 81       	ldd	r25, Z+3	; 0x03
    8ef6:	20 97       	sbiw	r28, 0x00	; 0
    8ef8:	19 f0       	breq	.+6      	; 0x8f00 <malloc+0x40>
    8efa:	9b 83       	std	Y+3, r25	; 0x03
    8efc:	8a 83       	std	Y+2, r24	; 0x02
    8efe:	2b c0       	rjmp	.+86     	; 0x8f56 <malloc+0x96>
    8f00:	90 93 5e 0e 	sts	0x0E5E, r25
    8f04:	80 93 5d 0e 	sts	0x0E5D, r24
    8f08:	26 c0       	rjmp	.+76     	; 0x8f56 <malloc+0x96>
    8f0a:	21 15       	cp	r18, r1
    8f0c:	31 05       	cpc	r19, r1
    8f0e:	19 f0       	breq	.+6      	; 0x8f16 <malloc+0x56>
    8f10:	42 17       	cp	r20, r18
    8f12:	53 07       	cpc	r21, r19
    8f14:	18 f4       	brcc	.+6      	; 0x8f1c <malloc+0x5c>
    8f16:	9a 01       	movw	r18, r20
    8f18:	be 01       	movw	r22, r28
    8f1a:	df 01       	movw	r26, r30
    8f1c:	ef 01       	movw	r28, r30
    8f1e:	02 80       	ldd	r0, Z+2	; 0x02
    8f20:	f3 81       	ldd	r31, Z+3	; 0x03
    8f22:	e0 2d       	mov	r30, r0
    8f24:	dc cf       	rjmp	.-72     	; 0x8ede <malloc+0x1e>
    8f26:	21 15       	cp	r18, r1
    8f28:	31 05       	cpc	r19, r1
    8f2a:	09 f1       	breq	.+66     	; 0x8f6e <malloc+0xae>
    8f2c:	28 1b       	sub	r18, r24
    8f2e:	39 0b       	sbc	r19, r25
    8f30:	24 30       	cpi	r18, 0x04	; 4
    8f32:	31 05       	cpc	r19, r1
    8f34:	90 f4       	brcc	.+36     	; 0x8f5a <malloc+0x9a>
    8f36:	12 96       	adiw	r26, 0x02	; 2
    8f38:	8d 91       	ld	r24, X+
    8f3a:	9c 91       	ld	r25, X
    8f3c:	13 97       	sbiw	r26, 0x03	; 3
    8f3e:	61 15       	cp	r22, r1
    8f40:	71 05       	cpc	r23, r1
    8f42:	21 f0       	breq	.+8      	; 0x8f4c <malloc+0x8c>
    8f44:	fb 01       	movw	r30, r22
    8f46:	93 83       	std	Z+3, r25	; 0x03
    8f48:	82 83       	std	Z+2, r24	; 0x02
    8f4a:	04 c0       	rjmp	.+8      	; 0x8f54 <malloc+0x94>
    8f4c:	90 93 5e 0e 	sts	0x0E5E, r25
    8f50:	80 93 5d 0e 	sts	0x0E5D, r24
    8f54:	fd 01       	movw	r30, r26
    8f56:	32 96       	adiw	r30, 0x02	; 2
    8f58:	44 c0       	rjmp	.+136    	; 0x8fe2 <malloc+0x122>
    8f5a:	fd 01       	movw	r30, r26
    8f5c:	e2 0f       	add	r30, r18
    8f5e:	f3 1f       	adc	r31, r19
    8f60:	81 93       	st	Z+, r24
    8f62:	91 93       	st	Z+, r25
    8f64:	22 50       	subi	r18, 0x02	; 2
    8f66:	31 09       	sbc	r19, r1
    8f68:	2d 93       	st	X+, r18
    8f6a:	3c 93       	st	X, r19
    8f6c:	3a c0       	rjmp	.+116    	; 0x8fe2 <malloc+0x122>
    8f6e:	20 91 5b 0e 	lds	r18, 0x0E5B
    8f72:	30 91 5c 0e 	lds	r19, 0x0E5C
    8f76:	23 2b       	or	r18, r19
    8f78:	41 f4       	brne	.+16     	; 0x8f8a <malloc+0xca>
    8f7a:	20 91 02 01 	lds	r18, 0x0102
    8f7e:	30 91 03 01 	lds	r19, 0x0103
    8f82:	30 93 5c 0e 	sts	0x0E5C, r19
    8f86:	20 93 5b 0e 	sts	0x0E5B, r18
    8f8a:	20 91 00 01 	lds	r18, 0x0100
    8f8e:	30 91 01 01 	lds	r19, 0x0101
    8f92:	21 15       	cp	r18, r1
    8f94:	31 05       	cpc	r19, r1
    8f96:	41 f4       	brne	.+16     	; 0x8fa8 <malloc+0xe8>
    8f98:	2d b7       	in	r18, 0x3d	; 61
    8f9a:	3e b7       	in	r19, 0x3e	; 62
    8f9c:	40 91 04 01 	lds	r20, 0x0104
    8fa0:	50 91 05 01 	lds	r21, 0x0105
    8fa4:	24 1b       	sub	r18, r20
    8fa6:	35 0b       	sbc	r19, r21
    8fa8:	e0 91 5b 0e 	lds	r30, 0x0E5B
    8fac:	f0 91 5c 0e 	lds	r31, 0x0E5C
    8fb0:	e2 17       	cp	r30, r18
    8fb2:	f3 07       	cpc	r31, r19
    8fb4:	a0 f4       	brcc	.+40     	; 0x8fde <malloc+0x11e>
    8fb6:	2e 1b       	sub	r18, r30
    8fb8:	3f 0b       	sbc	r19, r31
    8fba:	28 17       	cp	r18, r24
    8fbc:	39 07       	cpc	r19, r25
    8fbe:	78 f0       	brcs	.+30     	; 0x8fde <malloc+0x11e>
    8fc0:	ac 01       	movw	r20, r24
    8fc2:	4e 5f       	subi	r20, 0xFE	; 254
    8fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    8fc6:	24 17       	cp	r18, r20
    8fc8:	35 07       	cpc	r19, r21
    8fca:	48 f0       	brcs	.+18     	; 0x8fde <malloc+0x11e>
    8fcc:	4e 0f       	add	r20, r30
    8fce:	5f 1f       	adc	r21, r31
    8fd0:	50 93 5c 0e 	sts	0x0E5C, r21
    8fd4:	40 93 5b 0e 	sts	0x0E5B, r20
    8fd8:	81 93       	st	Z+, r24
    8fda:	91 93       	st	Z+, r25
    8fdc:	02 c0       	rjmp	.+4      	; 0x8fe2 <malloc+0x122>
    8fde:	e0 e0       	ldi	r30, 0x00	; 0
    8fe0:	f0 e0       	ldi	r31, 0x00	; 0
    8fe2:	cf 01       	movw	r24, r30
    8fe4:	df 91       	pop	r29
    8fe6:	cf 91       	pop	r28
    8fe8:	08 95       	ret

00008fea <free>:
    8fea:	0f 93       	push	r16
    8fec:	1f 93       	push	r17
    8fee:	cf 93       	push	r28
    8ff0:	df 93       	push	r29
    8ff2:	00 97       	sbiw	r24, 0x00	; 0
    8ff4:	09 f4       	brne	.+2      	; 0x8ff8 <free+0xe>
    8ff6:	8c c0       	rjmp	.+280    	; 0x9110 <free+0x126>
    8ff8:	fc 01       	movw	r30, r24
    8ffa:	32 97       	sbiw	r30, 0x02	; 2
    8ffc:	13 82       	std	Z+3, r1	; 0x03
    8ffe:	12 82       	std	Z+2, r1	; 0x02
    9000:	00 91 5d 0e 	lds	r16, 0x0E5D
    9004:	10 91 5e 0e 	lds	r17, 0x0E5E
    9008:	01 15       	cp	r16, r1
    900a:	11 05       	cpc	r17, r1
    900c:	81 f4       	brne	.+32     	; 0x902e <free+0x44>
    900e:	20 81       	ld	r18, Z
    9010:	31 81       	ldd	r19, Z+1	; 0x01
    9012:	82 0f       	add	r24, r18
    9014:	93 1f       	adc	r25, r19
    9016:	20 91 5b 0e 	lds	r18, 0x0E5B
    901a:	30 91 5c 0e 	lds	r19, 0x0E5C
    901e:	28 17       	cp	r18, r24
    9020:	39 07       	cpc	r19, r25
    9022:	79 f5       	brne	.+94     	; 0x9082 <free+0x98>
    9024:	f0 93 5c 0e 	sts	0x0E5C, r31
    9028:	e0 93 5b 0e 	sts	0x0E5B, r30
    902c:	71 c0       	rjmp	.+226    	; 0x9110 <free+0x126>
    902e:	d8 01       	movw	r26, r16
    9030:	40 e0       	ldi	r20, 0x00	; 0
    9032:	50 e0       	ldi	r21, 0x00	; 0
    9034:	ae 17       	cp	r26, r30
    9036:	bf 07       	cpc	r27, r31
    9038:	50 f4       	brcc	.+20     	; 0x904e <free+0x64>
    903a:	12 96       	adiw	r26, 0x02	; 2
    903c:	2d 91       	ld	r18, X+
    903e:	3c 91       	ld	r19, X
    9040:	13 97       	sbiw	r26, 0x03	; 3
    9042:	ad 01       	movw	r20, r26
    9044:	21 15       	cp	r18, r1
    9046:	31 05       	cpc	r19, r1
    9048:	09 f1       	breq	.+66     	; 0x908c <free+0xa2>
    904a:	d9 01       	movw	r26, r18
    904c:	f3 cf       	rjmp	.-26     	; 0x9034 <free+0x4a>
    904e:	9d 01       	movw	r18, r26
    9050:	da 01       	movw	r26, r20
    9052:	33 83       	std	Z+3, r19	; 0x03
    9054:	22 83       	std	Z+2, r18	; 0x02
    9056:	60 81       	ld	r22, Z
    9058:	71 81       	ldd	r23, Z+1	; 0x01
    905a:	86 0f       	add	r24, r22
    905c:	97 1f       	adc	r25, r23
    905e:	82 17       	cp	r24, r18
    9060:	93 07       	cpc	r25, r19
    9062:	69 f4       	brne	.+26     	; 0x907e <free+0x94>
    9064:	ec 01       	movw	r28, r24
    9066:	28 81       	ld	r18, Y
    9068:	39 81       	ldd	r19, Y+1	; 0x01
    906a:	26 0f       	add	r18, r22
    906c:	37 1f       	adc	r19, r23
    906e:	2e 5f       	subi	r18, 0xFE	; 254
    9070:	3f 4f       	sbci	r19, 0xFF	; 255
    9072:	31 83       	std	Z+1, r19	; 0x01
    9074:	20 83       	st	Z, r18
    9076:	8a 81       	ldd	r24, Y+2	; 0x02
    9078:	9b 81       	ldd	r25, Y+3	; 0x03
    907a:	93 83       	std	Z+3, r25	; 0x03
    907c:	82 83       	std	Z+2, r24	; 0x02
    907e:	45 2b       	or	r20, r21
    9080:	29 f4       	brne	.+10     	; 0x908c <free+0xa2>
    9082:	f0 93 5e 0e 	sts	0x0E5E, r31
    9086:	e0 93 5d 0e 	sts	0x0E5D, r30
    908a:	42 c0       	rjmp	.+132    	; 0x9110 <free+0x126>
    908c:	13 96       	adiw	r26, 0x03	; 3
    908e:	fc 93       	st	X, r31
    9090:	ee 93       	st	-X, r30
    9092:	12 97       	sbiw	r26, 0x02	; 2
    9094:	ed 01       	movw	r28, r26
    9096:	49 91       	ld	r20, Y+
    9098:	59 91       	ld	r21, Y+
    909a:	9e 01       	movw	r18, r28
    909c:	24 0f       	add	r18, r20
    909e:	35 1f       	adc	r19, r21
    90a0:	e2 17       	cp	r30, r18
    90a2:	f3 07       	cpc	r31, r19
    90a4:	71 f4       	brne	.+28     	; 0x90c2 <free+0xd8>
    90a6:	80 81       	ld	r24, Z
    90a8:	91 81       	ldd	r25, Z+1	; 0x01
    90aa:	84 0f       	add	r24, r20
    90ac:	95 1f       	adc	r25, r21
    90ae:	02 96       	adiw	r24, 0x02	; 2
    90b0:	11 96       	adiw	r26, 0x01	; 1
    90b2:	9c 93       	st	X, r25
    90b4:	8e 93       	st	-X, r24
    90b6:	82 81       	ldd	r24, Z+2	; 0x02
    90b8:	93 81       	ldd	r25, Z+3	; 0x03
    90ba:	13 96       	adiw	r26, 0x03	; 3
    90bc:	9c 93       	st	X, r25
    90be:	8e 93       	st	-X, r24
    90c0:	12 97       	sbiw	r26, 0x02	; 2
    90c2:	e0 e0       	ldi	r30, 0x00	; 0
    90c4:	f0 e0       	ldi	r31, 0x00	; 0
    90c6:	d8 01       	movw	r26, r16
    90c8:	12 96       	adiw	r26, 0x02	; 2
    90ca:	8d 91       	ld	r24, X+
    90cc:	9c 91       	ld	r25, X
    90ce:	13 97       	sbiw	r26, 0x03	; 3
    90d0:	00 97       	sbiw	r24, 0x00	; 0
    90d2:	19 f0       	breq	.+6      	; 0x90da <free+0xf0>
    90d4:	f8 01       	movw	r30, r16
    90d6:	8c 01       	movw	r16, r24
    90d8:	f6 cf       	rjmp	.-20     	; 0x90c6 <free+0xdc>
    90da:	8d 91       	ld	r24, X+
    90dc:	9c 91       	ld	r25, X
    90de:	98 01       	movw	r18, r16
    90e0:	2e 5f       	subi	r18, 0xFE	; 254
    90e2:	3f 4f       	sbci	r19, 0xFF	; 255
    90e4:	82 0f       	add	r24, r18
    90e6:	93 1f       	adc	r25, r19
    90e8:	20 91 5b 0e 	lds	r18, 0x0E5B
    90ec:	30 91 5c 0e 	lds	r19, 0x0E5C
    90f0:	28 17       	cp	r18, r24
    90f2:	39 07       	cpc	r19, r25
    90f4:	69 f4       	brne	.+26     	; 0x9110 <free+0x126>
    90f6:	30 97       	sbiw	r30, 0x00	; 0
    90f8:	29 f4       	brne	.+10     	; 0x9104 <free+0x11a>
    90fa:	10 92 5e 0e 	sts	0x0E5E, r1
    90fe:	10 92 5d 0e 	sts	0x0E5D, r1
    9102:	02 c0       	rjmp	.+4      	; 0x9108 <free+0x11e>
    9104:	13 82       	std	Z+3, r1	; 0x03
    9106:	12 82       	std	Z+2, r1	; 0x02
    9108:	10 93 5c 0e 	sts	0x0E5C, r17
    910c:	00 93 5b 0e 	sts	0x0E5B, r16
    9110:	df 91       	pop	r29
    9112:	cf 91       	pop	r28
    9114:	1f 91       	pop	r17
    9116:	0f 91       	pop	r16
    9118:	08 95       	ret

0000911a <__ftoa_engine>:
    911a:	28 30       	cpi	r18, 0x08	; 8
    911c:	08 f0       	brcs	.+2      	; 0x9120 <__ftoa_engine+0x6>
    911e:	27 e0       	ldi	r18, 0x07	; 7
    9120:	33 27       	eor	r19, r19
    9122:	da 01       	movw	r26, r20
    9124:	99 0f       	add	r25, r25
    9126:	31 1d       	adc	r19, r1
    9128:	87 fd       	sbrc	r24, 7
    912a:	91 60       	ori	r25, 0x01	; 1
    912c:	00 96       	adiw	r24, 0x00	; 0
    912e:	61 05       	cpc	r22, r1
    9130:	71 05       	cpc	r23, r1
    9132:	39 f4       	brne	.+14     	; 0x9142 <__ftoa_engine+0x28>
    9134:	32 60       	ori	r19, 0x02	; 2
    9136:	2e 5f       	subi	r18, 0xFE	; 254
    9138:	3d 93       	st	X+, r19
    913a:	30 e3       	ldi	r19, 0x30	; 48
    913c:	2a 95       	dec	r18
    913e:	e1 f7       	brne	.-8      	; 0x9138 <__ftoa_engine+0x1e>
    9140:	08 95       	ret
    9142:	9f 3f       	cpi	r25, 0xFF	; 255
    9144:	30 f0       	brcs	.+12     	; 0x9152 <__ftoa_engine+0x38>
    9146:	80 38       	cpi	r24, 0x80	; 128
    9148:	71 05       	cpc	r23, r1
    914a:	61 05       	cpc	r22, r1
    914c:	09 f0       	breq	.+2      	; 0x9150 <__ftoa_engine+0x36>
    914e:	3c 5f       	subi	r19, 0xFC	; 252
    9150:	3c 5f       	subi	r19, 0xFC	; 252
    9152:	3d 93       	st	X+, r19
    9154:	91 30       	cpi	r25, 0x01	; 1
    9156:	08 f0       	brcs	.+2      	; 0x915a <__ftoa_engine+0x40>
    9158:	80 68       	ori	r24, 0x80	; 128
    915a:	91 1d       	adc	r25, r1
    915c:	df 93       	push	r29
    915e:	cf 93       	push	r28
    9160:	1f 93       	push	r17
    9162:	0f 93       	push	r16
    9164:	ff 92       	push	r15
    9166:	ef 92       	push	r14
    9168:	19 2f       	mov	r17, r25
    916a:	98 7f       	andi	r25, 0xF8	; 248
    916c:	96 95       	lsr	r25
    916e:	e9 2f       	mov	r30, r25
    9170:	96 95       	lsr	r25
    9172:	96 95       	lsr	r25
    9174:	e9 0f       	add	r30, r25
    9176:	ff 27       	eor	r31, r31
    9178:	e2 5f       	subi	r30, 0xF2	; 242
    917a:	f9 4f       	sbci	r31, 0xF9	; 249
    917c:	99 27       	eor	r25, r25
    917e:	33 27       	eor	r19, r19
    9180:	ee 24       	eor	r14, r14
    9182:	ff 24       	eor	r15, r15
    9184:	a7 01       	movw	r20, r14
    9186:	e7 01       	movw	r28, r14
    9188:	05 90       	lpm	r0, Z+
    918a:	08 94       	sec
    918c:	07 94       	ror	r0
    918e:	28 f4       	brcc	.+10     	; 0x919a <__ftoa_engine+0x80>
    9190:	36 0f       	add	r19, r22
    9192:	e7 1e       	adc	r14, r23
    9194:	f8 1e       	adc	r15, r24
    9196:	49 1f       	adc	r20, r25
    9198:	51 1d       	adc	r21, r1
    919a:	66 0f       	add	r22, r22
    919c:	77 1f       	adc	r23, r23
    919e:	88 1f       	adc	r24, r24
    91a0:	99 1f       	adc	r25, r25
    91a2:	06 94       	lsr	r0
    91a4:	a1 f7       	brne	.-24     	; 0x918e <__ftoa_engine+0x74>
    91a6:	05 90       	lpm	r0, Z+
    91a8:	07 94       	ror	r0
    91aa:	28 f4       	brcc	.+10     	; 0x91b6 <__ftoa_engine+0x9c>
    91ac:	e7 0e       	add	r14, r23
    91ae:	f8 1e       	adc	r15, r24
    91b0:	49 1f       	adc	r20, r25
    91b2:	56 1f       	adc	r21, r22
    91b4:	c1 1d       	adc	r28, r1
    91b6:	77 0f       	add	r23, r23
    91b8:	88 1f       	adc	r24, r24
    91ba:	99 1f       	adc	r25, r25
    91bc:	66 1f       	adc	r22, r22
    91be:	06 94       	lsr	r0
    91c0:	a1 f7       	brne	.-24     	; 0x91aa <__ftoa_engine+0x90>
    91c2:	05 90       	lpm	r0, Z+
    91c4:	07 94       	ror	r0
    91c6:	28 f4       	brcc	.+10     	; 0x91d2 <__ftoa_engine+0xb8>
    91c8:	f8 0e       	add	r15, r24
    91ca:	49 1f       	adc	r20, r25
    91cc:	56 1f       	adc	r21, r22
    91ce:	c7 1f       	adc	r28, r23
    91d0:	d1 1d       	adc	r29, r1
    91d2:	88 0f       	add	r24, r24
    91d4:	99 1f       	adc	r25, r25
    91d6:	66 1f       	adc	r22, r22
    91d8:	77 1f       	adc	r23, r23
    91da:	06 94       	lsr	r0
    91dc:	a1 f7       	brne	.-24     	; 0x91c6 <__ftoa_engine+0xac>
    91de:	05 90       	lpm	r0, Z+
    91e0:	07 94       	ror	r0
    91e2:	20 f4       	brcc	.+8      	; 0x91ec <__ftoa_engine+0xd2>
    91e4:	49 0f       	add	r20, r25
    91e6:	56 1f       	adc	r21, r22
    91e8:	c7 1f       	adc	r28, r23
    91ea:	d8 1f       	adc	r29, r24
    91ec:	99 0f       	add	r25, r25
    91ee:	66 1f       	adc	r22, r22
    91f0:	77 1f       	adc	r23, r23
    91f2:	88 1f       	adc	r24, r24
    91f4:	06 94       	lsr	r0
    91f6:	a9 f7       	brne	.-22     	; 0x91e2 <__ftoa_engine+0xc8>
    91f8:	84 91       	lpm	r24, Z
    91fa:	10 95       	com	r17
    91fc:	17 70       	andi	r17, 0x07	; 7
    91fe:	41 f0       	breq	.+16     	; 0x9210 <__ftoa_engine+0xf6>
    9200:	d6 95       	lsr	r29
    9202:	c7 95       	ror	r28
    9204:	57 95       	ror	r21
    9206:	47 95       	ror	r20
    9208:	f7 94       	ror	r15
    920a:	e7 94       	ror	r14
    920c:	1a 95       	dec	r17
    920e:	c1 f7       	brne	.-16     	; 0x9200 <__ftoa_engine+0xe6>
    9210:	e4 eb       	ldi	r30, 0xB4	; 180
    9212:	f5 e0       	ldi	r31, 0x05	; 5
    9214:	68 94       	set
    9216:	15 90       	lpm	r1, Z+
    9218:	15 91       	lpm	r17, Z+
    921a:	35 91       	lpm	r19, Z+
    921c:	65 91       	lpm	r22, Z+
    921e:	95 91       	lpm	r25, Z+
    9220:	05 90       	lpm	r0, Z+
    9222:	7f e2       	ldi	r23, 0x2F	; 47
    9224:	73 95       	inc	r23
    9226:	e1 18       	sub	r14, r1
    9228:	f1 0a       	sbc	r15, r17
    922a:	43 0b       	sbc	r20, r19
    922c:	56 0b       	sbc	r21, r22
    922e:	c9 0b       	sbc	r28, r25
    9230:	d0 09       	sbc	r29, r0
    9232:	c0 f7       	brcc	.-16     	; 0x9224 <__ftoa_engine+0x10a>
    9234:	e1 0c       	add	r14, r1
    9236:	f1 1e       	adc	r15, r17
    9238:	43 1f       	adc	r20, r19
    923a:	56 1f       	adc	r21, r22
    923c:	c9 1f       	adc	r28, r25
    923e:	d0 1d       	adc	r29, r0
    9240:	7e f4       	brtc	.+30     	; 0x9260 <__ftoa_engine+0x146>
    9242:	70 33       	cpi	r23, 0x30	; 48
    9244:	11 f4       	brne	.+4      	; 0x924a <__ftoa_engine+0x130>
    9246:	8a 95       	dec	r24
    9248:	e6 cf       	rjmp	.-52     	; 0x9216 <__ftoa_engine+0xfc>
    924a:	e8 94       	clt
    924c:	01 50       	subi	r16, 0x01	; 1
    924e:	30 f0       	brcs	.+12     	; 0x925c <__ftoa_engine+0x142>
    9250:	08 0f       	add	r16, r24
    9252:	0a f4       	brpl	.+2      	; 0x9256 <__ftoa_engine+0x13c>
    9254:	00 27       	eor	r16, r16
    9256:	02 17       	cp	r16, r18
    9258:	08 f4       	brcc	.+2      	; 0x925c <__ftoa_engine+0x142>
    925a:	20 2f       	mov	r18, r16
    925c:	23 95       	inc	r18
    925e:	02 2f       	mov	r16, r18
    9260:	7a 33       	cpi	r23, 0x3A	; 58
    9262:	28 f0       	brcs	.+10     	; 0x926e <__ftoa_engine+0x154>
    9264:	79 e3       	ldi	r23, 0x39	; 57
    9266:	7d 93       	st	X+, r23
    9268:	2a 95       	dec	r18
    926a:	e9 f7       	brne	.-6      	; 0x9266 <__ftoa_engine+0x14c>
    926c:	10 c0       	rjmp	.+32     	; 0x928e <__ftoa_engine+0x174>
    926e:	7d 93       	st	X+, r23
    9270:	2a 95       	dec	r18
    9272:	89 f6       	brne	.-94     	; 0x9216 <__ftoa_engine+0xfc>
    9274:	06 94       	lsr	r0
    9276:	97 95       	ror	r25
    9278:	67 95       	ror	r22
    927a:	37 95       	ror	r19
    927c:	17 95       	ror	r17
    927e:	17 94       	ror	r1
    9280:	e1 18       	sub	r14, r1
    9282:	f1 0a       	sbc	r15, r17
    9284:	43 0b       	sbc	r20, r19
    9286:	56 0b       	sbc	r21, r22
    9288:	c9 0b       	sbc	r28, r25
    928a:	d0 09       	sbc	r29, r0
    928c:	98 f0       	brcs	.+38     	; 0x92b4 <__ftoa_engine+0x19a>
    928e:	23 95       	inc	r18
    9290:	7e 91       	ld	r23, -X
    9292:	73 95       	inc	r23
    9294:	7a 33       	cpi	r23, 0x3A	; 58
    9296:	08 f0       	brcs	.+2      	; 0x929a <__ftoa_engine+0x180>
    9298:	70 e3       	ldi	r23, 0x30	; 48
    929a:	7c 93       	st	X, r23
    929c:	20 13       	cpse	r18, r16
    929e:	b8 f7       	brcc	.-18     	; 0x928e <__ftoa_engine+0x174>
    92a0:	7e 91       	ld	r23, -X
    92a2:	70 61       	ori	r23, 0x10	; 16
    92a4:	7d 93       	st	X+, r23
    92a6:	30 f0       	brcs	.+12     	; 0x92b4 <__ftoa_engine+0x19a>
    92a8:	83 95       	inc	r24
    92aa:	71 e3       	ldi	r23, 0x31	; 49
    92ac:	7d 93       	st	X+, r23
    92ae:	70 e3       	ldi	r23, 0x30	; 48
    92b0:	2a 95       	dec	r18
    92b2:	e1 f7       	brne	.-8      	; 0x92ac <__ftoa_engine+0x192>
    92b4:	11 24       	eor	r1, r1
    92b6:	ef 90       	pop	r14
    92b8:	ff 90       	pop	r15
    92ba:	0f 91       	pop	r16
    92bc:	1f 91       	pop	r17
    92be:	cf 91       	pop	r28
    92c0:	df 91       	pop	r29
    92c2:	99 27       	eor	r25, r25
    92c4:	87 fd       	sbrc	r24, 7
    92c6:	90 95       	com	r25
    92c8:	08 95       	ret

000092ca <strnlen_P>:
    92ca:	fc 01       	movw	r30, r24
    92cc:	05 90       	lpm	r0, Z+
    92ce:	61 50       	subi	r22, 0x01	; 1
    92d0:	70 40       	sbci	r23, 0x00	; 0
    92d2:	01 10       	cpse	r0, r1
    92d4:	d8 f7       	brcc	.-10     	; 0x92cc <strnlen_P+0x2>
    92d6:	80 95       	com	r24
    92d8:	90 95       	com	r25
    92da:	8e 0f       	add	r24, r30
    92dc:	9f 1f       	adc	r25, r31
    92de:	08 95       	ret

000092e0 <strnlen>:
    92e0:	fc 01       	movw	r30, r24
    92e2:	61 50       	subi	r22, 0x01	; 1
    92e4:	70 40       	sbci	r23, 0x00	; 0
    92e6:	01 90       	ld	r0, Z+
    92e8:	01 10       	cpse	r0, r1
    92ea:	d8 f7       	brcc	.-10     	; 0x92e2 <strnlen+0x2>
    92ec:	80 95       	com	r24
    92ee:	90 95       	com	r25
    92f0:	8e 0f       	add	r24, r30
    92f2:	9f 1f       	adc	r25, r31
    92f4:	08 95       	ret

000092f6 <fputc>:
    92f6:	0f 93       	push	r16
    92f8:	1f 93       	push	r17
    92fa:	cf 93       	push	r28
    92fc:	df 93       	push	r29
    92fe:	fb 01       	movw	r30, r22
    9300:	23 81       	ldd	r18, Z+3	; 0x03
    9302:	21 fd       	sbrc	r18, 1
    9304:	03 c0       	rjmp	.+6      	; 0x930c <fputc+0x16>
    9306:	8f ef       	ldi	r24, 0xFF	; 255
    9308:	9f ef       	ldi	r25, 0xFF	; 255
    930a:	28 c0       	rjmp	.+80     	; 0x935c <fputc+0x66>
    930c:	22 ff       	sbrs	r18, 2
    930e:	16 c0       	rjmp	.+44     	; 0x933c <fputc+0x46>
    9310:	46 81       	ldd	r20, Z+6	; 0x06
    9312:	57 81       	ldd	r21, Z+7	; 0x07
    9314:	24 81       	ldd	r18, Z+4	; 0x04
    9316:	35 81       	ldd	r19, Z+5	; 0x05
    9318:	42 17       	cp	r20, r18
    931a:	53 07       	cpc	r21, r19
    931c:	44 f4       	brge	.+16     	; 0x932e <fputc+0x38>
    931e:	a0 81       	ld	r26, Z
    9320:	b1 81       	ldd	r27, Z+1	; 0x01
    9322:	9d 01       	movw	r18, r26
    9324:	2f 5f       	subi	r18, 0xFF	; 255
    9326:	3f 4f       	sbci	r19, 0xFF	; 255
    9328:	31 83       	std	Z+1, r19	; 0x01
    932a:	20 83       	st	Z, r18
    932c:	8c 93       	st	X, r24
    932e:	26 81       	ldd	r18, Z+6	; 0x06
    9330:	37 81       	ldd	r19, Z+7	; 0x07
    9332:	2f 5f       	subi	r18, 0xFF	; 255
    9334:	3f 4f       	sbci	r19, 0xFF	; 255
    9336:	37 83       	std	Z+7, r19	; 0x07
    9338:	26 83       	std	Z+6, r18	; 0x06
    933a:	10 c0       	rjmp	.+32     	; 0x935c <fputc+0x66>
    933c:	eb 01       	movw	r28, r22
    933e:	09 2f       	mov	r16, r25
    9340:	18 2f       	mov	r17, r24
    9342:	00 84       	ldd	r0, Z+8	; 0x08
    9344:	f1 85       	ldd	r31, Z+9	; 0x09
    9346:	e0 2d       	mov	r30, r0
    9348:	09 95       	icall
    934a:	89 2b       	or	r24, r25
    934c:	e1 f6       	brne	.-72     	; 0x9306 <fputc+0x10>
    934e:	8e 81       	ldd	r24, Y+6	; 0x06
    9350:	9f 81       	ldd	r25, Y+7	; 0x07
    9352:	01 96       	adiw	r24, 0x01	; 1
    9354:	9f 83       	std	Y+7, r25	; 0x07
    9356:	8e 83       	std	Y+6, r24	; 0x06
    9358:	81 2f       	mov	r24, r17
    935a:	90 2f       	mov	r25, r16
    935c:	df 91       	pop	r29
    935e:	cf 91       	pop	r28
    9360:	1f 91       	pop	r17
    9362:	0f 91       	pop	r16
    9364:	08 95       	ret

00009366 <sprintf>:
    9366:	0f 93       	push	r16
    9368:	1f 93       	push	r17
    936a:	cf 93       	push	r28
    936c:	df 93       	push	r29
    936e:	cd b7       	in	r28, 0x3d	; 61
    9370:	de b7       	in	r29, 0x3e	; 62
    9372:	2e 97       	sbiw	r28, 0x0e	; 14
    9374:	0f b6       	in	r0, 0x3f	; 63
    9376:	f8 94       	cli
    9378:	de bf       	out	0x3e, r29	; 62
    937a:	0f be       	out	0x3f, r0	; 63
    937c:	cd bf       	out	0x3d, r28	; 61
    937e:	0d 89       	ldd	r16, Y+21	; 0x15
    9380:	1e 89       	ldd	r17, Y+22	; 0x16
    9382:	86 e0       	ldi	r24, 0x06	; 6
    9384:	8c 83       	std	Y+4, r24	; 0x04
    9386:	1a 83       	std	Y+2, r17	; 0x02
    9388:	09 83       	std	Y+1, r16	; 0x01
    938a:	8f ef       	ldi	r24, 0xFF	; 255
    938c:	9f e7       	ldi	r25, 0x7F	; 127
    938e:	9e 83       	std	Y+6, r25	; 0x06
    9390:	8d 83       	std	Y+5, r24	; 0x05
    9392:	ae 01       	movw	r20, r28
    9394:	47 5e       	subi	r20, 0xE7	; 231
    9396:	5f 4f       	sbci	r21, 0xFF	; 255
    9398:	6f 89       	ldd	r22, Y+23	; 0x17
    939a:	78 8d       	ldd	r23, Y+24	; 0x18
    939c:	ce 01       	movw	r24, r28
    939e:	01 96       	adiw	r24, 0x01	; 1
    93a0:	92 d9       	rcall	.-3292   	; 0x86c6 <vfprintf>
    93a2:	2f 81       	ldd	r18, Y+7	; 0x07
    93a4:	38 85       	ldd	r19, Y+8	; 0x08
    93a6:	f8 01       	movw	r30, r16
    93a8:	e2 0f       	add	r30, r18
    93aa:	f3 1f       	adc	r31, r19
    93ac:	10 82       	st	Z, r1
    93ae:	2e 96       	adiw	r28, 0x0e	; 14
    93b0:	0f b6       	in	r0, 0x3f	; 63
    93b2:	f8 94       	cli
    93b4:	de bf       	out	0x3e, r29	; 62
    93b6:	0f be       	out	0x3f, r0	; 63
    93b8:	cd bf       	out	0x3d, r28	; 61
    93ba:	df 91       	pop	r29
    93bc:	cf 91       	pop	r28
    93be:	1f 91       	pop	r17
    93c0:	0f 91       	pop	r16
    93c2:	08 95       	ret

000093c4 <__ultoa_invert>:
    93c4:	fa 01       	movw	r30, r20
    93c6:	aa 27       	eor	r26, r26
    93c8:	28 30       	cpi	r18, 0x08	; 8
    93ca:	51 f1       	breq	.+84     	; 0x9420 <__ultoa_invert+0x5c>
    93cc:	20 31       	cpi	r18, 0x10	; 16
    93ce:	81 f1       	breq	.+96     	; 0x9430 <__ultoa_invert+0x6c>
    93d0:	e8 94       	clt
    93d2:	6f 93       	push	r22
    93d4:	6e 7f       	andi	r22, 0xFE	; 254
    93d6:	6e 5f       	subi	r22, 0xFE	; 254
    93d8:	7f 4f       	sbci	r23, 0xFF	; 255
    93da:	8f 4f       	sbci	r24, 0xFF	; 255
    93dc:	9f 4f       	sbci	r25, 0xFF	; 255
    93de:	af 4f       	sbci	r26, 0xFF	; 255
    93e0:	b1 e0       	ldi	r27, 0x01	; 1
    93e2:	3e d0       	rcall	.+124    	; 0x9460 <__ultoa_invert+0x9c>
    93e4:	b4 e0       	ldi	r27, 0x04	; 4
    93e6:	3c d0       	rcall	.+120    	; 0x9460 <__ultoa_invert+0x9c>
    93e8:	67 0f       	add	r22, r23
    93ea:	78 1f       	adc	r23, r24
    93ec:	89 1f       	adc	r24, r25
    93ee:	9a 1f       	adc	r25, r26
    93f0:	a1 1d       	adc	r26, r1
    93f2:	68 0f       	add	r22, r24
    93f4:	79 1f       	adc	r23, r25
    93f6:	8a 1f       	adc	r24, r26
    93f8:	91 1d       	adc	r25, r1
    93fa:	a1 1d       	adc	r26, r1
    93fc:	6a 0f       	add	r22, r26
    93fe:	71 1d       	adc	r23, r1
    9400:	81 1d       	adc	r24, r1
    9402:	91 1d       	adc	r25, r1
    9404:	a1 1d       	adc	r26, r1
    9406:	20 d0       	rcall	.+64     	; 0x9448 <__ultoa_invert+0x84>
    9408:	09 f4       	brne	.+2      	; 0x940c <__ultoa_invert+0x48>
    940a:	68 94       	set
    940c:	3f 91       	pop	r19
    940e:	2a e0       	ldi	r18, 0x0A	; 10
    9410:	26 9f       	mul	r18, r22
    9412:	11 24       	eor	r1, r1
    9414:	30 19       	sub	r19, r0
    9416:	30 5d       	subi	r19, 0xD0	; 208
    9418:	31 93       	st	Z+, r19
    941a:	de f6       	brtc	.-74     	; 0x93d2 <__ultoa_invert+0xe>
    941c:	cf 01       	movw	r24, r30
    941e:	08 95       	ret
    9420:	46 2f       	mov	r20, r22
    9422:	47 70       	andi	r20, 0x07	; 7
    9424:	40 5d       	subi	r20, 0xD0	; 208
    9426:	41 93       	st	Z+, r20
    9428:	b3 e0       	ldi	r27, 0x03	; 3
    942a:	0f d0       	rcall	.+30     	; 0x944a <__ultoa_invert+0x86>
    942c:	c9 f7       	brne	.-14     	; 0x9420 <__ultoa_invert+0x5c>
    942e:	f6 cf       	rjmp	.-20     	; 0x941c <__ultoa_invert+0x58>
    9430:	46 2f       	mov	r20, r22
    9432:	4f 70       	andi	r20, 0x0F	; 15
    9434:	40 5d       	subi	r20, 0xD0	; 208
    9436:	4a 33       	cpi	r20, 0x3A	; 58
    9438:	18 f0       	brcs	.+6      	; 0x9440 <__ultoa_invert+0x7c>
    943a:	49 5d       	subi	r20, 0xD9	; 217
    943c:	31 fd       	sbrc	r19, 1
    943e:	40 52       	subi	r20, 0x20	; 32
    9440:	41 93       	st	Z+, r20
    9442:	02 d0       	rcall	.+4      	; 0x9448 <__ultoa_invert+0x84>
    9444:	a9 f7       	brne	.-22     	; 0x9430 <__ultoa_invert+0x6c>
    9446:	ea cf       	rjmp	.-44     	; 0x941c <__ultoa_invert+0x58>
    9448:	b4 e0       	ldi	r27, 0x04	; 4
    944a:	a6 95       	lsr	r26
    944c:	97 95       	ror	r25
    944e:	87 95       	ror	r24
    9450:	77 95       	ror	r23
    9452:	67 95       	ror	r22
    9454:	ba 95       	dec	r27
    9456:	c9 f7       	brne	.-14     	; 0x944a <__ultoa_invert+0x86>
    9458:	00 97       	sbiw	r24, 0x00	; 0
    945a:	61 05       	cpc	r22, r1
    945c:	71 05       	cpc	r23, r1
    945e:	08 95       	ret
    9460:	9b 01       	movw	r18, r22
    9462:	ac 01       	movw	r20, r24
    9464:	0a 2e       	mov	r0, r26
    9466:	06 94       	lsr	r0
    9468:	57 95       	ror	r21
    946a:	47 95       	ror	r20
    946c:	37 95       	ror	r19
    946e:	27 95       	ror	r18
    9470:	ba 95       	dec	r27
    9472:	c9 f7       	brne	.-14     	; 0x9466 <__ultoa_invert+0xa2>
    9474:	62 0f       	add	r22, r18
    9476:	73 1f       	adc	r23, r19
    9478:	84 1f       	adc	r24, r20
    947a:	95 1f       	adc	r25, r21
    947c:	a0 1d       	adc	r26, r0
    947e:	08 95       	ret

00009480 <__do_global_dtors>:
    9480:	13 e0       	ldi	r17, 0x03	; 3
    9482:	c8 e5       	ldi	r28, 0x58	; 88
    9484:	d3 e0       	ldi	r29, 0x03	; 3
    9486:	03 c0       	rjmp	.+6      	; 0x948e <__do_global_dtors+0xe>
    9488:	fe 01       	movw	r30, r28
    948a:	f2 dc       	rcall	.-1564   	; 0x8e70 <__tablejump2__>
    948c:	21 96       	adiw	r28, 0x01	; 1
    948e:	c9 35       	cpi	r28, 0x59	; 89
    9490:	d1 07       	cpc	r29, r17
    9492:	d1 f7       	brne	.-12     	; 0x9488 <__do_global_dtors+0x8>
    9494:	f8 94       	cli

00009496 <__stop_program>:
    9496:	ff cf       	rjmp	.-2      	; 0x9496 <__stop_program>
